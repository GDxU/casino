//ActionScript 3.0
//  package com
//    package demonsters
//      package debugger
//        class IMonsterDebuggerConnection
package com.demonsters.debugger 
{
    internal interface IMonsterDebuggerConnection
    {
        function processQueue():void;

        function set onConnect(arg1:Function):void;

        function set address(arg1:String):void;

        function get connected():Boolean;

        function connect():void;

        function send(arg1:String, arg2:Object, arg3:Boolean=false):void;
    }
}


//        class MonsterDebugger
package com.demonsters.debugger 
{
    import flash.display.*;
    
    public class MonsterDebugger extends Object
    {
        public function MonsterDebugger()
        {
            super();
            return;
        }

        public static function get enabled():Boolean
        {
            return _enabled;
        }

        public static function trace(arg1:*, arg2:*, arg3:String="", arg4:String="", arg5:uint=0, arg6:int=5):void
        {
            if (_initialized && _enabled) 
            {
                MonsterDebuggerCore.trace(arg1, arg2, arg3, arg4, arg5, arg6);
            }
            return;
        }

        static function send(arg1:String, arg2:Object):void
        {
            if (_initialized && _enabled) 
            {
                MonsterDebuggerConnection.send(arg1, arg2, false);
            }
            return;
        }

        public static function log(... rest):void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (_initialized && _enabled) 
            {
                loc1 = [];
                loc2 = 0;
                while (loc2 < rest.length) 
                {
                    loc1[loc1.length] = String(rest[loc2]);
                    ++loc2;
                }
                MonsterDebuggerCore.trace("log", loc1.join(", "), "", "", 0, 5);
            }
            return;
        }

        public static function clear():void
        {
            if (_initialized && _enabled) 
            {
                MonsterDebuggerCore.clear();
            }
            return;
        }

        public static function unregisterPlugin(arg1:String):void
        {
            if (_initialized) 
            {
                MonsterDebuggerCore.unregisterPlugin(arg1);
            }
            return;
        }

        public static function set enabled(arg1:Boolean):void
        {
            _enabled = arg1;
            return;
        }

        public static function snapshot(arg1:*, arg2:flash.display.DisplayObject, arg3:String="", arg4:String=""):void
        {
            if (_initialized && _enabled) 
            {
                MonsterDebuggerCore.snapshot(arg1, arg2, arg3, arg4);
            }
            return;
        }

        public static function inspect(arg1:*):void
        {
            if (_initialized && _enabled) 
            {
                MonsterDebuggerCore.inspect(arg1);
            }
            return;
        }

        public static function registerPlugin(arg1:Class):void
        {
            var loc1:*=null;
            if (_initialized) 
            {
                loc1 = new arg1();
                MonsterDebuggerCore.registerPlugin(loc1.id, loc1);
            }
            return;
        }

        public static function hasPlugin(arg1:String):Boolean
        {
            if (_initialized) 
            {
                return MonsterDebuggerCore.hasPlugin(arg1);
            }
            return false;
        }

        public static function breakpoint(arg1:*, arg2:String="breakpoint"):void
        {
            if (_initialized && _enabled) 
            {
                MonsterDebuggerCore.breakpoint(arg1, arg2);
            }
            return;
        }

        public static function initialize(arg1:Object, arg2:String="127.0.0.1", arg3:Function=null):void
        {
            if (!_initialized) 
            {
                _initialized = true;
                MonsterDebuggerCore.base = arg1;
                MonsterDebuggerCore.initialize();
                MonsterDebuggerConnection.initialize();
                MonsterDebuggerConnection.address = arg2;
                MonsterDebuggerConnection.onConnect = arg3;
                MonsterDebuggerConnection.connect();
            }
            return;
        }

        
        {
            _enabled = true;
            _initialized = false;
        }

        static const VERSION:Number=3;

        internal static var _enabled:Boolean=true;

        internal static var _initialized:Boolean=false;

        public static var logger:Function;
    }
}


//        class MonsterDebuggerConnection
package com.demonsters.debugger 
{
    internal class MonsterDebuggerConnection extends Object
    {
        public function MonsterDebuggerConnection()
        {
            super();
            return;
        }

        static function initialize():void
        {
            connector = new MonsterDebuggerConnectionDefault();
            return;
        }

        static function processQueue():void
        {
            connector.processQueue();
            return;
        }

        static function set onConnect(arg1:Function):void
        {
            connector.onConnect = arg1;
            return;
        }

        static function set address(arg1:String):void
        {
            connector.address = arg1;
            return;
        }

        static function get connected():Boolean
        {
            return connector.connected;
        }

        static function connect():void
        {
            connector.connect();
            return;
        }

        static function send(arg1:String, arg2:Object, arg3:Boolean=false):void
        {
            connector.send(arg1, arg2, arg3);
            return;
        }

        internal static var connector:IMonsterDebuggerConnection;
    }
}


//        class MonsterDebuggerConnectionDefault
package com.demonsters.debugger 
{
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    
    internal class MonsterDebuggerConnectionDefault extends Object implements com.demonsters.debugger.IMonsterDebuggerConnection
    {
        public function MonsterDebuggerConnectionDefault()
        {
            _queue = [];
            super();
            _socket = new flash.net.Socket();
            _socket.addEventListener(flash.events.Event.CONNECT, connectHandler, false, 0, false);
            _socket.addEventListener(flash.events.Event.CLOSE, closeHandler, false, 0, false);
            _socket.addEventListener(flash.events.IOErrorEvent.IO_ERROR, closeHandler, false, 0, false);
            _socket.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, closeHandler, false, 0, false);
            _socket.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, dataHandler, false, 0, false);
            _connecting = false;
            _process = false;
            _address = "127.0.0.1";
            _port = 5800;
            _timeout = new flash.utils.Timer(2000, 1);
            _timeout.addEventListener(flash.events.TimerEvent.TIMER, closeHandler, false, 0, false);
            _retry = new flash.utils.Timer(1000, 1);
            _retry.addEventListener(flash.events.TimerEvent.TIMER, retryHandler, false, 0, false);
            return;
        }

        internal function dataHandler(arg1:flash.events.ProgressEvent):void
        {
            _bytes = new flash.utils.ByteArray();
            _socket.readBytes(_bytes, 0, _socket.bytesAvailable);
            _bytes.position = 0;
            processPackage();
            return;
        }

        public function send(arg1:String, arg2:Object, arg3:Boolean=false):void
        {
            var loc1:*=null;
            if (arg3 && arg1 == MonsterDebuggerCore.ID && _socket.connected) 
            {
                loc1 = new com.demonsters.debugger.MonsterDebuggerData(arg1, arg2).bytes;
                _socket.writeUnsignedInt(loc1.length);
                _socket.writeBytes(loc1);
                _socket.flush();
                return;
            }
            _queue.push(new com.demonsters.debugger.MonsterDebuggerData(arg1, arg2));
            if (_queue.length > MAX_QUEUE_LENGTH) 
            {
                _queue.shift();
            }
            if (_queue.length > 0) 
            {
                next();
            }
            return;
        }

        public function get connected():Boolean
        {
            if (_socket == null) 
            {
                return false;
            }
            return _socket.connected;
        }

        internal function next():void
        {
            if (!com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                return;
            }
            if (!_process) 
            {
                return;
            }
            if (!_socket.connected) 
            {
                connect();
                return;
            }
            var loc1:*=com.demonsters.debugger.MonsterDebuggerData(_queue.shift()).bytes;
            _socket.writeUnsignedInt(loc1.length);
            _socket.writeBytes(loc1);
            _socket.flush();
            loc1 = null;
            if (_queue.length > 0) 
            {
                next();
            }
            return;
        }

        internal function retryHandler(arg1:flash.events.TimerEvent):void
        {
            _retry.stop();
            connect();
            return;
        }

        public function set onConnect(arg1:Function):void
        {
            _onConnect = arg1;
            return;
        }

        internal function processPackage():void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (_bytes.bytesAvailable == 0) 
            {
                return;
            }
            if (_length == 0) 
            {
                _length = _bytes.readUnsignedInt();
                _package = new flash.utils.ByteArray();
            }
            if (_package.length < _length && _bytes.bytesAvailable > 0) 
            {
                loc1 = _bytes.bytesAvailable;
                if (loc1 > _length - _package.length) 
                {
                    loc1 = _length - _package.length;
                }
                _bytes.readBytes(_package, _package.length, loc1);
            }
            if (!(_length == 0) && _package.length == _length) 
            {
                loc2 = com.demonsters.debugger.MonsterDebuggerData.read(_package);
                if (loc2.id != null) 
                {
                    MonsterDebuggerCore.handle(loc2);
                }
                _length = 0;
                _package = null;
            }
            if (_length == 0 && _bytes.bytesAvailable > 0) 
            {
                processPackage();
            }
            return;
        }

        public function set address(arg1:String):void
        {
            _address = arg1;
            return;
        }

        internal function connectHandler(arg1:flash.events.Event):void
        {
            _timeout.stop();
            _retry.stop();
            if (_onConnect != null) 
            {
                _onConnect();
            }
            _connecting = false;
            _bytes = new flash.utils.ByteArray();
            _package = new flash.utils.ByteArray();
            _length = 0;
            _socket.writeUTFBytes("<hello/>" + "\n");
            _socket.writeByte(0);
            _socket.flush();
            return;
        }

        public function processQueue():void
        {
            if (!_process) 
            {
                _process = true;
                if (_queue.length > 0) 
                {
                    next();
                }
            }
            return;
        }

        internal function closeHandler(arg1:flash.events.Event=null):void
        {
            MonsterDebuggerUtils.resume();
            if (!_retry.running) 
            {
                _connecting = false;
                _process = false;
                _timeout.stop();
                _retry.reset();
                _retry.start();
            }
            return;
        }

        public function connect():void
        {
            var loc1:*;
            if (!_connecting && com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                try 
                {
                    flash.system.Security.loadPolicyFile("xmlsocket://" + _address + ":" + _port);
                    _connecting = true;
                    _socket.connect(_address, _port);
                    _retry.stop();
                    _timeout.reset();
                    _timeout.start();
                }
                catch (e:Error)
                {
                    closeHandler();
                }
            }
            return;
        }

        internal const MAX_QUEUE_LENGTH:int=500;

        internal var _length:uint;

        internal var _package:flash.utils.ByteArray;

        internal var _onConnect:Function;

        internal var _queue:Array;

        internal var _connecting:Boolean;

        internal var _socket:flash.net.Socket;

        internal var _timeout:flash.utils.Timer;

        internal var _port:int;

        internal var _retry:flash.utils.Timer;

        internal var _bytes:flash.utils.ByteArray;

        internal var _process:Boolean;

        internal var _address:String;
    }
}


//        class MonsterDebuggerConstants
package com.demonsters.debugger 
{
    internal class MonsterDebuggerConstants extends Object
    {
        public function MonsterDebuggerConstants()
        {
            super();
            return;
        }

        static const ICON_DISPLAY_OBJECT:String="iconDisplayObject";

        static const TYPE_BOOLEAN:String="Boolean";

        static const TYPE_XMLLIST:String="XMLList";

        static const COMMAND_TRACE:String="TRACE";

        static const TYPE_VECTOR:String="Vector";

        static const TYPE_NOT_FOUND:String="Not found";

        static const ACCESS_METHOD:String="method";

        static const TYPE_XMLVALUE:String="XMLValue";

        static const COMMAND_NOTFOUND:String="NOTFOUND";

        static const COMMAND_MONITOR:String="MONITOR";

        static const COMMAND_STOP_HIGHLIGHT:String="STOP_HIGHLIGHT";

        static const ACCESS_CONSTANT:String="constant";

        static const TYPE_FUNCTION:String="Function";

        static const TYPE_UINT:String="uint";

        static const COMMAND_INFO:String="INFO";

        static const TYPE_INT:String="int";

        static const TYPE_XMLATTRIBUTE:String="XMLAttribute";

        static const COMMAND_SNAPSHOT:String="SNAPSHOT";

        static const ICON_DEFAULT:String="iconDefault";

        static const ICON_VARIABLE_READONLY:String="iconVariableReadonly";

        static const COMMAND_BASE:String="BASE";

        static const ICON_XMLATTRIBUTE:String="iconXMLAttribute";

        static const COMMAND_GET_PROPERTIES:String="GET_PROPERTIES";

        static const TYPE_XML:String="XML";

        static const TYPE_BYTEARRAY:String="ByteArray";

        static const TYPE_XMLNODE:String="XMLNode";

        static const ICON_VARIABLE_WRITEONLY:String="iconVariableWriteonly";

        static const TYPE_WARNING:String="Warning";

        static const PERMISSION_READWRITE:String="readwrite";

        static const PERMISSION_WRITEONLY:String="writeonly";

        static const COMMAND_HIGHLIGHT:String="HIGHLIGHT";

        static const TYPE_VOID:String="void";

        static const ICON_VARIABLE:String="iconVariable";

        static const TYPE_METHOD:String="MethodClosure";

        static const COMMAND_GET_PREVIEW:String="GET_PREVIEW";

        static const COMMAND_GET_FUNCTIONS:String="GET_FUNCTIONS";

        static const COMMAND_HELLO:String="HELLO";

        static const TYPE_UNREADABLE:String="Unreadable";

        static const PERMISSION_READONLY:String="readonly";

        static const ICON_XMLNODE:String="iconXMLNode";

        static const COMMAND_CLEAR_TRACES:String="CLEAR_TRACES";

        static const TYPE_STRING:String="String";

        static const ACCESS_DISPLAY_OBJECT:String="displayObject";

        static const COMMAND_RESUME:String="RESUME";

        static const COMMAND_PAUSE:String="PAUSE";

        static const COMMAND_START_HIGHLIGHT:String="START_HIGHLIGHT";

        static const ICON_WARNING:String="iconWarning";

        static const COMMAND_SET_PROPERTY:String="SET_PROPERTY";

        static const ICON_XMLVALUE:String="iconXMLValue";

        static const ACCESS_ACCESSOR:String="accessor";

        static const COMMAND_CALL_METHOD:String="CALL_METHOD";

        static const COMMAND_SAMPLES:String="SAMPLES";

        static const ICON_FUNCTION:String="iconFunction";

        static const COMMAND_INSPECT:String="INSPECT";

        static const TYPE_OBJECT:String="Object";

        static const TYPE_NUMBER:String="Number";

        static const ICON_ROOT:String="iconRoot";

        static const TYPE_ARRAY:String="Array";

        static const ACCESS_VARIABLE:String="variable";

        static const COMMAND_GET_OBJECT:String="GET_OBJECT";

        static const DELIMITER:String=".";
    }
}


//        class MonsterDebuggerCore
package com.demonsters.debugger 
{
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.geom.*;
    import flash.system.*;
    import flash.text.*;
    import flash.utils.*;
    
    internal class MonsterDebuggerCore extends Object
    {
        public function MonsterDebuggerCore()
        {
            super();
            return;
        }

        static function clear():void
        {
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                send({"command":MonsterDebuggerConstants.COMMAND_CLEAR_TRACES});
            }
            return;
        }

        static function sendInformation():void
        {
            var tmpTitle:String;
            var isFlex:Boolean;
            var slash:int;
            var ns:Namespace;
            var filename:String;
            var FileClass:*;
            var fileLocation:String;
            var NativeApplicationClass:*;
            var data:Object;
            var isDebugger:Boolean;
            var tmpLocation:String;
            var descriptor:XML;
            var UIComponentClass:*;
            var playerVersion:String;
            var playerType:String;
            var fileTitle:String;

            var loc1:*;
            UIComponentClass = undefined;
            tmpLocation = null;
            tmpTitle = null;
            NativeApplicationClass = undefined;
            descriptor = null;
            ns = null;
            filename = null;
            FileClass = undefined;
            slash = 0;
            playerType = flash.system.Capabilities.playerType;
            playerVersion = flash.system.Capabilities.version;
            isDebugger = flash.system.Capabilities.isDebugger;
            isFlex = false;
            fileTitle = "";
            fileLocation = "";
            try 
            {
                UIComponentClass = flash.utils.getDefinitionByName("mx.core::UIComponent");
                if (UIComponentClass != null) 
                {
                    isFlex = true;
                }
            }
            catch (e1:Error)
            {
            };
            if (_base is flash.display.DisplayObject && _base.hasOwnProperty("loaderInfo")) 
            {
                if (flash.display.DisplayObject(_base).loaderInfo != null) 
                {
                    fileLocation = unescape(flash.display.DisplayObject(_base).loaderInfo.url);
                }
            }
            if (_base.hasOwnProperty("stage")) 
            {
                if (!(_base["stage"] == null) && _base["stage"] is flash.display.Stage) 
                {
                    fileLocation = unescape(flash.display.Stage(_base["stage"]).loaderInfo.url);
                }
            }
            if (playerType == "ActiveX" || playerType == "PlugIn") 
            {
                if (flash.external.ExternalInterface.available) 
                {
                    try 
                    {
                        tmpLocation = flash.external.ExternalInterface.call("window.location.href.toString");
                        tmpTitle = flash.external.ExternalInterface.call("window.document.title.toString");
                        if (tmpLocation != null) 
                        {
                            fileLocation = tmpLocation;
                        }
                        if (tmpTitle != null) 
                        {
                            fileTitle = tmpTitle;
                        }
                    }
                    catch (e2:Error)
                    {
                    };
                }
            }
            if (playerType == "Desktop") 
            {
                try 
                {
                    NativeApplicationClass = flash.utils.getDefinitionByName("flash.desktop::NativeApplication");
                    if (NativeApplicationClass != null) 
                    {
                        descriptor = NativeApplicationClass["nativeApplication"]["applicationDescriptor"];
                        ns = descriptor.namespace();
                        filename = descriptor.ns::filename;
                        FileClass = flash.utils.getDefinitionByName("flash.filesystem::File");
                        if (flash.system.Capabilities.os.toLowerCase().indexOf("windows") == -1) 
                        {
                            if (flash.system.Capabilities.os.toLowerCase().indexOf("mac") != -1) 
                            {
                                filename = filename + ".app";
                                fileLocation = (loc2 = FileClass["applicationDirectory"])["resolvePath"](filename)["nativePath"];
                            }
                        }
                        else 
                        {
                            filename = filename + ".exe";
                            fileLocation = (loc2 = FileClass["applicationDirectory"])["resolvePath"](filename)["nativePath"];
                        }
                    }
                }
                catch (e3:Error)
                {
                };
            }
            if (fileTitle == "" && !(fileLocation == "")) 
            {
                slash = Math.max(fileLocation.lastIndexOf("\\"), fileLocation.lastIndexOf("/"));
                if (slash == -1) 
                {
                    fileTitle = fileLocation;
                }
                else 
                {
                    fileTitle = fileLocation.substring(slash + 1, fileLocation.lastIndexOf("."));
                }
            }
            data = {"command":MonsterDebuggerConstants.COMMAND_INFO, "debuggerVersion":com.demonsters.debugger.MonsterDebugger.VERSION, "playerType":playerType, "playerVersion":playerVersion, "isDebugger":isDebugger, "isFlex":isFlex, "fileLocation":fileLocation, "fileTitle":fileTitle};
            send(data, true);
            MonsterDebuggerConnection.processQueue();
            return;
        }

        internal static function handleInternal(arg1:com.demonsters.debugger.MonsterDebuggerData):void
        {
            var method:Function;
            var displayObject:flash.display.DisplayObject;
            var bytes:flash.utils.ByteArray;
            var item:com.demonsters.debugger.MonsterDebuggerData;
            var xml:XML;
            var bitmapData:flash.display.BitmapData;
            var obj:*;

            var loc1:*;
            obj = undefined;
            xml = null;
            method = null;
            displayObject = null;
            bitmapData = null;
            bytes = null;
            item = arg1;
            var loc2:*=item.data["command"];
            switch (loc2) 
            {
                case MonsterDebuggerConstants.COMMAND_HELLO:
                {
                    sendInformation();
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_BASE:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, "", 0);
                    if (obj != null) 
                    {
                        xml = XML(MonsterDebuggerUtils.parse(obj, "", 1, 2, true));
                        send({"command":MonsterDebuggerConstants.COMMAND_BASE, "xml":xml});
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_INSPECT:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null) 
                    {
                        _base = obj;
                        xml = XML(MonsterDebuggerUtils.parse(obj, "", 1, 2, true));
                        send({"command":MonsterDebuggerConstants.COMMAND_BASE, "xml":xml});
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_GET_OBJECT:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null) 
                    {
                        xml = XML(MonsterDebuggerUtils.parse(obj, item.data["target"], 1, 2, true));
                        send({"command":MonsterDebuggerConstants.COMMAND_GET_OBJECT, "xml":xml});
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_GET_PROPERTIES:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null) 
                    {
                        xml = XML(MonsterDebuggerUtils.parse(obj, item.data["target"], 1, 1, false));
                        send({"command":MonsterDebuggerConstants.COMMAND_GET_PROPERTIES, "xml":xml});
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_GET_FUNCTIONS:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (obj != null) 
                    {
                        xml = XML(MonsterDebuggerUtils.parseFunctions(obj, item.data["target"]));
                        send({"command":MonsterDebuggerConstants.COMMAND_GET_FUNCTIONS, "xml":xml});
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_SET_PROPERTY:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 1);
                    if (obj != null) 
                    {
                        try 
                        {
                            obj[item.data["name"]] = item.data["value"];
                            send({"command":MonsterDebuggerConstants.COMMAND_SET_PROPERTY, "target":item.data["target"], "value":obj[item.data["name"]]});
                        }
                        catch (e1:Error)
                        {
                        };
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_GET_PREVIEW:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (!(obj == null) && MonsterDebuggerUtils.isDisplayObject(obj)) 
                    {
                        displayObject = obj as flash.display.DisplayObject;
                        bitmapData = MonsterDebuggerUtils.snapshot(displayObject, new flash.geom.Rectangle(0, 0, 300, 300));
                        if (bitmapData != null) 
                        {
                            bytes = bitmapData.getPixels(new flash.geom.Rectangle(0, 0, bitmapData.width, bitmapData.height));
                            send({"command":MonsterDebuggerConstants.COMMAND_GET_PREVIEW, "bytes":bytes, "width":bitmapData.width, "height":bitmapData.height});
                        }
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_CALL_METHOD:
                {
                    method = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (!(method == null) && method is Function) 
                    {
                        if (item.data["returnType"] != MonsterDebuggerConstants.TYPE_VOID) 
                        {
                            try 
                            {
                                obj = method.apply(null, item.data["arguments"]);
                                xml = XML(MonsterDebuggerUtils.parse(obj, "", 1, 5, false));
                                send({"command":MonsterDebuggerConstants.COMMAND_CALL_METHOD, "id":item.data["id"], "xml":xml});
                            }
                            catch (e2:Error)
                            {
                            };
                        }
                        else 
                        {
                            method.apply(null, item.data["arguments"]);
                        }
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_PAUSE:
                {
                    MonsterDebuggerUtils.pause();
                    send({"command":MonsterDebuggerConstants.COMMAND_PAUSE});
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_RESUME:
                {
                    MonsterDebuggerUtils.resume();
                    send({"command":MonsterDebuggerConstants.COMMAND_RESUME});
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_HIGHLIGHT:
                {
                    obj = MonsterDebuggerUtils.getObject(_base, item.data["target"], 0);
                    if (!(obj == null) && MonsterDebuggerUtils.isDisplayObject(obj)) 
                    {
                        if (!(flash.display.DisplayObject(obj).stage == null) && flash.display.DisplayObject(obj).stage is flash.display.Stage) 
                        {
                            _stage = obj["stage"];
                        }
                        if (_stage != null) 
                        {
                            highlightClear();
                            send({"command":MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT});
                            _highlight.removeEventListener(flash.events.MouseEvent.CLICK, highlightClicked);
                            _highlight.mouseEnabled = false;
                            _highlightTarget = flash.display.DisplayObject(obj);
                            _highlightMouse = false;
                            _highlightUpdate = true;
                        }
                    }
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_START_HIGHLIGHT:
                {
                    highlightClear();
                    _highlight.addEventListener(flash.events.MouseEvent.CLICK, highlightClicked, false, 0, true);
                    _highlight.mouseEnabled = true;
                    _highlightTarget = null;
                    _highlightMouse = true;
                    _highlightUpdate = true;
                    send({"command":MonsterDebuggerConstants.COMMAND_START_HIGHLIGHT});
                    break;
                }
                case MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT:
                {
                    highlightClear();
                    _highlight.removeEventListener(flash.events.MouseEvent.CLICK, highlightClicked);
                    _highlight.mouseEnabled = false;
                    _highlightTarget = null;
                    _highlightMouse = false;
                    _highlightUpdate = false;
                    send({"command":MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT});
                    break;
                }
            }
            return;
        }

        static function get base():*
        {
            return _base;
        }

        internal static function highlightClicked(arg1:flash.events.MouseEvent):void
        {
            arg1.preventDefault();
            arg1.stopImmediatePropagation();
            highlightClear();
            _highlightTarget = MonsterDebuggerUtils.getObjectUnderPoint(_stage, new flash.geom.Point(_stage.mouseX, _stage.mouseY));
            _highlightMouse = false;
            _highlight.removeEventListener(flash.events.MouseEvent.CLICK, highlightClicked);
            _highlight.mouseEnabled = false;
            if (_highlightTarget != null) 
            {
                inspect(_highlightTarget);
                highlightDraw(false);
            }
            send({"command":MonsterDebuggerConstants.COMMAND_STOP_HIGHLIGHT});
            return;
        }

        static function unregisterPlugin(arg1:String):void
        {
            if (arg1 in _plugins) 
            {
                _plugins[arg1] = null;
            }
            return;
        }

        static function hasPlugin(arg1:String):Boolean
        {
            return arg1 in _plugins;
        }

        static function initialize():void
        {
            _monitorTime = new Date().time;
            _monitorStart = new Date().time;
            _monitorFrames = 0;
            _monitorTimer = new flash.utils.Timer(MONITOR_UPDATE);
            _monitorTimer.addEventListener(flash.events.TimerEvent.TIMER, monitorTimerCallback, false, 0, true);
            _monitorTimer.start();
            if (_base.hasOwnProperty("stage") && !(_base["stage"] == null) && _base["stage"] is flash.display.Stage) 
            {
                _stage = _base["stage"] as flash.display.Stage;
            }
            _monitorSprite = new flash.display.Sprite();
            _monitorSprite.addEventListener(flash.events.Event.ENTER_FRAME, frameHandler, false, 0, true);
            var loc1:*=new flash.text.TextFormat();
            loc1.font = "Arial";
            loc1.color = 16777215;
            loc1.size = 11;
            loc1.leftMargin = 5;
            loc1.rightMargin = 5;
            _highlightInfo = new flash.text.TextField();
            _highlightInfo.embedFonts = false;
            _highlightInfo.autoSize = flash.text.TextFieldAutoSize.LEFT;
            _highlightInfo.mouseWheelEnabled = false;
            _highlightInfo.mouseEnabled = false;
            _highlightInfo.condenseWhite = false;
            _highlightInfo.embedFonts = false;
            _highlightInfo.multiline = false;
            _highlightInfo.selectable = false;
            _highlightInfo.wordWrap = false;
            _highlightInfo.defaultTextFormat = loc1;
            _highlightInfo.text = "";
            _highlight = new flash.display.Sprite();
            _highlightMouse = false;
            _highlightTarget = null;
            _highlightUpdate = false;
            return;
        }

        internal static function highlightDraw(arg1:Boolean):void
        {
            var boundsInner:flash.geom.Rectangle;
            var fill:Boolean;
            var boundsOuter:flash.geom.Rectangle;
            var boundsText:flash.geom.Rectangle;

            var loc1:*;
            fill = arg1;
            if (_highlightTarget == null) 
            {
                return;
            }
            boundsOuter = _highlightTarget.getBounds(_stage);
            if (_highlightTarget is flash.display.Stage) 
            {
                boundsOuter.x = 0;
                boundsOuter.y = 0;
                boundsOuter.width = _highlightTarget["stageWidth"];
                boundsOuter.height = _highlightTarget["stageHeight"];
            }
            else 
            {
                boundsOuter.x = int(boundsOuter.x + 0.5);
                boundsOuter.y = int(boundsOuter.y + 0.5);
                boundsOuter.width = int(boundsOuter.width + 0.5);
                boundsOuter.height = int(boundsOuter.height + 0.5);
            }
            boundsInner = boundsOuter.clone();
            boundsInner.x = boundsInner.x + 2;
            boundsInner.y = boundsInner.y + 2;
            boundsInner.width = boundsInner.width - 4;
            boundsInner.height = boundsInner.height - 4;
            if (boundsInner.width < 0) 
            {
                boundsInner.width = 0;
            }
            if (boundsInner.height < 0) 
            {
                boundsInner.height = 0;
            }
            _highlight.graphics.clear();
            _highlight.graphics.beginFill(HIGHLITE_COLOR, 1);
            _highlight.graphics.drawRect(boundsOuter.x, boundsOuter.y, boundsOuter.width, boundsOuter.height);
            _highlight.graphics.drawRect(boundsInner.x, boundsInner.y, boundsInner.width, boundsInner.height);
            if (fill) 
            {
                _highlight.graphics.beginFill(HIGHLITE_COLOR, 0.25);
                _highlight.graphics.drawRect(boundsInner.x, boundsInner.y, boundsInner.width, boundsInner.height);
            }
            if (_highlightTarget.name == null) 
            {
                _highlightInfo.text = String(MonsterDebuggerDescribeType.get(_highlightTarget).@name);
            }
            else 
            {
                _highlightInfo.text = String(_highlightTarget.name) + " - " + String(MonsterDebuggerDescribeType.get(_highlightTarget).@name);
            }
            boundsText = new flash.geom.Rectangle(boundsOuter.x, boundsOuter.y - (_highlightInfo.textHeight + 3), _highlightInfo.textWidth + 15, _highlightInfo.textHeight + 5);
            if (boundsText.y < 0) 
            {
                boundsText.y = boundsOuter.y + boundsOuter.height;
            }
            if (boundsText.y + boundsText.height > _stage.stageHeight) 
            {
                boundsText.y = _stage.stageHeight - boundsText.height;
            }
            if (boundsText.x < 0) 
            {
                boundsText.x = 0;
            }
            if (boundsText.x + boundsText.width > _stage.stageWidth) 
            {
                boundsText.x = _stage.stageWidth - boundsText.width;
            }
            _highlight.graphics.beginFill(HIGHLITE_COLOR, 1);
            _highlight.graphics.drawRect(boundsText.x, boundsText.y, boundsText.width, boundsText.height);
            _highlight.graphics.endFill();
            _highlightInfo.x = boundsText.x;
            _highlightInfo.y = boundsText.y;
            try 
            {
                _stage.addChild(_highlight);
                _stage.addChild(_highlightInfo);
            }
            catch (e:Error)
            {
            };
            return;
        }

        static function inspect(arg1:*):void
        {
            var loc1:*=undefined;
            var loc2:*=null;
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                _base = arg1;
                loc1 = MonsterDebuggerUtils.getObject(_base, "", 0);
                if (loc1 != null) 
                {
                    loc2 = XML(MonsterDebuggerUtils.parse(loc1, "", 1, 2, true));
                    send({"command":MonsterDebuggerConstants.COMMAND_BASE, "xml":loc2});
                }
            }
            return;
        }

        internal static function frameHandler(arg1:flash.events.Event):void
        {
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                var loc1:*;
                _monitorFrames++;
                if (_highlightUpdate) 
                {
                    highlightUpdate();
                }
            }
            return;
        }

        internal static function send(arg1:Object, arg2:Boolean=false):void
        {
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                MonsterDebuggerConnection.send(MonsterDebuggerCore.ID, arg1, arg2);
            }
            return;
        }

        internal static function monitorTimerCallback(arg1:flash.events.TimerEvent):void
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=null;
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                loc1 = new Date().time;
                loc2 = loc1 - _monitorTime;
                loc3 = _monitorFrames / loc2 * 1000;
                loc4 = 0;
                if (_stage == null) 
                {
                    if (_base.hasOwnProperty("stage") && !(_base["stage"] == null) && _base["stage"] is flash.display.Stage) 
                    {
                        _stage = flash.display.Stage(_base["stage"]);
                    }
                }
                if (_stage != null) 
                {
                    loc4 = _stage.frameRate;
                }
                _monitorFrames = 0;
                _monitorTime = loc1;
                if (MonsterDebuggerConnection.connected) 
                {
                    loc5 = {"command":MonsterDebuggerConstants.COMMAND_MONITOR, "memory":MonsterDebuggerUtils.getMemory(), "fps":loc3, "fpsMovie":loc4, "time":loc1};
                    send(loc5);
                }
            }
            return;
        }

        internal static function highlightUpdate():void
        {
            var loc1:*=undefined;
            highlightClear();
            if (_highlightMouse) 
            {
                if (_base.hasOwnProperty("stage") && !(_base["stage"] == null) && _base["stage"] is flash.display.Stage) 
                {
                    _stage = _base["stage"] as flash.display.Stage;
                }
                if (flash.system.Capabilities.playerType == "Desktop") 
                {
                    loc1 = flash.utils.getDefinitionByName("flash.desktop::NativeApplication");
                    if (!(loc1 == null) && !(loc1["nativeApplication"]["activeWindow"] == null)) 
                    {
                        _stage = loc1["nativeApplication"]["activeWindow"]["stage"];
                    }
                }
                if (_stage == null) 
                {
                    _highlight.removeEventListener(flash.events.MouseEvent.CLICK, highlightClicked);
                    _highlight.mouseEnabled = false;
                    _highlightTarget = null;
                    _highlightMouse = false;
                    _highlightUpdate = false;
                    return;
                }
                _highlightTarget = MonsterDebuggerUtils.getObjectUnderPoint(_stage, new flash.geom.Point(_stage.mouseX, _stage.mouseY));
                if (_highlightTarget != null) 
                {
                    highlightDraw(true);
                }
                return;
            }
            if (_highlightTarget != null) 
            {
                if (_highlightTarget.stage == null || _highlightTarget.parent == null) 
                {
                    _highlight.removeEventListener(flash.events.MouseEvent.CLICK, highlightClicked);
                    _highlight.mouseEnabled = false;
                    _highlightTarget = null;
                    _highlightMouse = false;
                    _highlightUpdate = false;
                    return;
                }
                highlightDraw(false);
            }
            return;
        }

        static function breakpoint(arg1:*, arg2:String="breakpoint"):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (com.demonsters.debugger.MonsterDebugger.enabled && MonsterDebuggerConnection.connected) 
            {
                loc1 = MonsterDebuggerUtils.stackTrace();
                loc2 = {"command":MonsterDebuggerConstants.COMMAND_PAUSE, "memory":MonsterDebuggerUtils.getMemory(), "date":new Date(), "target":String(arg1), "reference":MonsterDebuggerUtils.getReferenceID(arg1), "stack":loc1, "id":arg2};
                send(loc2);
                MonsterDebuggerUtils.pause();
            }
            return;
        }

        static function set base(arg1:*):void
        {
            _base = arg1;
            return;
        }

        internal static function highlightClear():void
        {
            if (!(_highlight == null) && !(_highlight.parent == null)) 
            {
                _highlight.parent.removeChild(_highlight);
                _highlight.graphics.clear();
                _highlight.x = 0;
                _highlight.y = 0;
            }
            if (!(_highlightInfo == null) && !(_highlightInfo.parent == null)) 
            {
                _highlightInfo.parent.removeChild(_highlightInfo);
                _highlightInfo.x = 0;
                _highlightInfo.y = 0;
            }
            return;
        }

        static function handle(arg1:com.demonsters.debugger.MonsterDebuggerData):void
        {
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                if (arg1.id == null || arg1.id == "") 
                {
                    return;
                }
                if (arg1.id != MonsterDebuggerCore.ID) 
                {
                    if (arg1.id in _plugins && !(_plugins[arg1.id] == null)) 
                    {
                        com.demonsters.debugger.MonsterDebuggerPlugin(_plugins[arg1.id]).handle(arg1);
                    }
                }
                else 
                {
                    handleInternal(arg1);
                }
            }
            return;
        }

        
        {
            _base = null;
            _stage = null;
            _plugins = {};
        }

        static function registerPlugin(arg1:String, arg2:com.demonsters.debugger.MonsterDebuggerPlugin):void
        {
            if (arg1 in _plugins) 
            {
                return;
            }
            _plugins[arg1] = arg2;
            return;
        }

        static function snapshot(arg1:*, arg2:flash.display.DisplayObject, arg3:String="", arg4:String=""):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                if ((loc1 = MonsterDebuggerUtils.snapshot(arg2)) != null) 
                {
                    loc2 = loc1.getPixels(new flash.geom.Rectangle(0, 0, loc1.width, loc1.height));
                    loc3 = {"command":MonsterDebuggerConstants.COMMAND_SNAPSHOT, "memory":MonsterDebuggerUtils.getMemory(), "date":new Date(), "target":String(arg1), "reference":MonsterDebuggerUtils.getReferenceID(arg1), "bytes":loc2, "width":arg2.width, "height":arg2.height, "person":arg3, "label":arg4};
                    send(loc3);
                }
            }
            return;
        }

        static function trace(arg1:*, arg2:*, arg3:String="", arg4:String="", arg5:uint=0, arg6:int=5):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (com.demonsters.debugger.MonsterDebugger.enabled) 
            {
                loc1 = XML(MonsterDebuggerUtils.parse(arg2, "", 1, arg6, false));
                loc2 = {"command":MonsterDebuggerConstants.COMMAND_TRACE, "memory":MonsterDebuggerUtils.getMemory(), "date":new Date(), "target":String(arg1), "reference":MonsterDebuggerUtils.getReferenceID(arg1), "xml":loc1, "person":arg3, "label":arg4, "color":arg5};
                send(loc2);
            }
            return;
        }

        internal static const HIGHLITE_COLOR:uint=3381759;

        static const ID:String="com.demonsters.debugger.core";

        internal static const MONITOR_UPDATE:int=500;

        internal static var _highlightInfo:flash.text.TextField;

        internal static var _monitorStart:Number;

        internal static var _monitorTime:Number;

        internal static var _monitorFrames:int;

        internal static var _highlightTarget:flash.display.DisplayObject;

        internal static var _monitorTimer:flash.utils.Timer;

        internal static var _monitorSprite:flash.display.Sprite;

        internal static var _highlightMouse:Boolean;

        internal static var _highlight:flash.display.Sprite;

        internal static var _highlightUpdate:Boolean;

        internal static var _plugins:Object;

        internal static var _stage:flash.display.Stage=null;

        internal static var _base:Object=null;
    }
}


//        class MonsterDebuggerData
package com.demonsters.debugger 
{
    import flash.utils.*;
    
    public class MonsterDebuggerData extends Object
    {
        public function MonsterDebuggerData(arg1:String, arg2:Object)
        {
            super();
            _id = arg1;
            _data = arg2;
            return;
        }

        public function get data():Object
        {
            return _data;
        }

        public function set bytes(arg1:flash.utils.ByteArray):void
        {
            var value:flash.utils.ByteArray;
            var bytesData:flash.utils.ByteArray;
            var bytesId:flash.utils.ByteArray;

            var loc1:*;
            value = arg1;
            bytesId = new flash.utils.ByteArray();
            bytesData = new flash.utils.ByteArray();
            try 
            {
                value.readBytes(bytesId, 0, value.readUnsignedInt());
                value.readBytes(bytesData, 0, value.readUnsignedInt());
                _id = bytesId.readObject() as String;
                _data = bytesData.readObject() as Object;
            }
            catch (e:Error)
            {
                _id = null;
                _data = null;
            }
            bytesId = null;
            bytesData = null;
            return;
        }

        public function get id():String
        {
            return _id;
        }

        public function get bytes():flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=new flash.utils.ByteArray();
            loc1.writeObject(_id);
            loc2.writeObject(_data);
            var loc3:*=new flash.utils.ByteArray();
            loc3.writeUnsignedInt(loc1.length);
            loc3.writeBytes(loc1);
            loc3.writeUnsignedInt(loc2.length);
            loc3.writeBytes(loc2);
            loc3.position = 0;
            loc1 = null;
            loc2 = null;
            return loc3;
        }

        public static function read(arg1:flash.utils.ByteArray):com.demonsters.debugger.MonsterDebuggerData
        {
            var loc1:*=new MonsterDebuggerData(null, null);
            loc1.bytes = arg1;
            return loc1;
        }

        internal var _data:Object;

        internal var _id:String;
    }
}


//        class MonsterDebuggerDescribeType
package com.demonsters.debugger 
{
    import flash.utils.*;
    
    internal class MonsterDebuggerDescribeType extends Object
    {
        public function MonsterDebuggerDescribeType()
        {
            super();
            return;
        }

        static function get(arg1:*):XML
        {
            var loc1:*=flash.utils.getQualifiedClassName(arg1);
            if (loc1 in cache) 
            {
                return cache[loc1];
            }
            var loc2:*=flash.utils.describeType(arg1);
            cache[loc1] = loc2;
            return loc2;
        }

        
        {
            cache = {};
        }

        internal static var cache:Object;
    }
}


//        class MonsterDebuggerPlugin
package com.demonsters.debugger 
{
    public class MonsterDebuggerPlugin extends Object
    {
        public function MonsterDebuggerPlugin(arg1:String)
        {
            super();
            _id = arg1;
            return;
        }

        protected function send(arg1:Object):void
        {
            com.demonsters.debugger.MonsterDebugger.send(_id, arg1);
            return;
        }

        public function get id():String
        {
            return _id;
        }

        public function handle(arg1:com.demonsters.debugger.MonsterDebuggerData):void
        {
            return;
        }

        internal var _id:String;
    }
}


//        class MonsterDebuggerUtils
package com.demonsters.debugger 
{
    import flash.display.*;
    import flash.geom.*;
    import flash.system.*;
    import flash.utils.*;
    
    internal class MonsterDebuggerUtils extends Object
    {
        public function MonsterDebuggerUtils()
        {
            super();
            return;
        }

        public static function snapshot(arg1:flash.display.DisplayObject, arg2:flash.geom.Rectangle=null):flash.display.BitmapData
        {
            var bitmapData:flash.display.BitmapData;
            var rotation:Number;
            var scaleX:Number;
            var scaleY:Number;
            var scaled:flash.geom.Rectangle;
            var b:flash.display.BitmapData;
            var alpha:Number;
            var m:flash.geom.Matrix;
            var rectangle:flash.geom.Rectangle=null;
            var s:Number;
            var bounds:flash.geom.Rectangle;
            var visible:Boolean;
            var object:flash.display.DisplayObject;

            var loc1:*;
            m = null;
            scaled = null;
            s = NaN;
            b = null;
            object = arg1;
            rectangle = arg2;
            if (object == null) 
            {
                return null;
            }
            visible = object.visible;
            alpha = object.alpha;
            rotation = object.rotation;
            scaleX = object.scaleX;
            scaleY = object.scaleY;
            try 
            {
                object.visible = true;
                object.alpha = 1;
                object.rotation = 0;
                object.scaleX = 1;
                object.scaleY = 1;
            }
            catch (e1:Error)
            {
            };
            bounds = object.getBounds(object);
            bounds.x = int(bounds.x + 0.5);
            bounds.y = int(bounds.y + 0.5);
            bounds.width = int(bounds.width + 0.5);
            bounds.height = int(bounds.height + 0.5);
            if (object is flash.display.Stage) 
            {
                bounds.x = 0;
                bounds.y = 0;
                bounds.width = flash.display.Stage(object).stageWidth;
                bounds.height = flash.display.Stage(object).stageHeight;
            }
            bitmapData = null;
            if (bounds.width <= 0 || bounds.height <= 0) 
            {
                return null;
            }
            bitmapData = new flash.display.BitmapData(bounds.width, bounds.height, false, 16777215);
            m = new flash.geom.Matrix();
            m.tx = -bounds.x;
            m.ty = -bounds.y;
            bitmapData.draw(object, m, null, null, null, false);
            try 
            {
                object.visible = visible;
                object.alpha = alpha;
                object.rotation = rotation;
                object.scaleX = scaleX;
                object.scaleY = scaleY;
            }
            catch (e2:Error)
            {
            };
            if (rectangle != null) 
            {
                if (bounds.width <= rectangle.width && bounds.height <= rectangle.height) 
                {
                    return bitmapData;
                }
                scaled = bounds.clone();
                scaled.width = rectangle.width;
                scaled.height = rectangle.width * bounds.height / bounds.width;
                if (scaled.height > rectangle.height) 
                {
                    scaled = bounds.clone();
                    scaled.width = rectangle.height * bounds.width / bounds.height;
                    scaled.height = rectangle.height;
                }
                s = scaled.width / bounds.width;
                b = new flash.display.BitmapData(scaled.width, scaled.height, false, 0);
                m = new flash.geom.Matrix();
                m.scale(s, s);
                b.draw(bitmapData, m, null, null, null, true);
                return b;
            }
            return bitmapData;
        }

        internal static function parseClass(arg1:*, arg2:String, arg3:XML, arg4:int=1, arg5:int=5, arg6:Boolean=true):XML
        {
            var displayObjects:Array;
            var itemXML:XML;
            var accessors:XMLList;
            var target:String;
            var accessorsLength:int;
            var item:*;
            var constantsLength:int;
            var isXMLString:XML;
            var itemTarget:String;
            var displayObject:flash.display.DisplayObjectContainer;
            var child:flash.display.DisplayObject;
            var isXML:Boolean;
            var childLength:int;
            var itemIcon:String;
            var nodeXML:XML;
            var includeDisplayObjects:Boolean=true;
            var isDynamic:Boolean;
            var variablesLength:int;
            var maxDepth:int=5;
            var itemPermission:String;
            var itemName:String;
            var itemsArrayLength:int;
            var currentDepth:int=1;
            var object:*;
            var constants:XMLList;
            var rootXML:XML;
            var itemAccess:String;
            var key:String;
            var prop:*;
            var i:int;
            var itemType:String;
            var variables:XMLList;
            var itemsArray:Array;
            var keys:Object;
            var description:XML;

            var loc1:*;
            key = null;
            itemsArrayLength = 0;
            item = undefined;
            itemXML = null;
            itemAccess = null;
            itemPermission = null;
            itemIcon = null;
            itemType = null;
            itemName = null;
            itemTarget = null;
            isXMLString = null;
            i = 0;
            prop = undefined;
            displayObject = null;
            displayObjects = null;
            child = null;
            object = arg1;
            target = arg2;
            description = arg3;
            currentDepth = arg4;
            maxDepth = arg5;
            includeDisplayObjects = arg6;
            rootXML = new XML("<root/>");
            nodeXML = new XML("<node/>");
            variables = description;
            accessors = description;
            constants = description;
            isDynamic = description.@isDynamic;
            variablesLength = variables.length();
            accessorsLength = accessors.length();
            constantsLength = constants.length();
            childLength = 0;
            keys = {};
            itemsArray = [];
            isXML = false;
            if (isDynamic) 
            {
                var loc2:*=0;
                var loc3:*=object;
                for (prop in loc3) 
                {
                    key = String(prop);
                    if (keys.hasOwnProperty(key)) 
                    {
                        continue;
                    }
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(flash.utils.getQualifiedClassName(object[key]));
                    itemTarget = target + "." + key;
                    itemAccess = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE;
                    itemsArray[itemsArray.length] = {"name":itemName, "type":itemType, "target":itemTarget, "access":itemAccess, "permission":itemPermission, "icon":itemIcon};
                }
            }
            i = 0;
            while (i < variablesLength) 
            {
                key = variables[i].@name;
                if (!keys.hasOwnProperty(key)) 
                {
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(variables[i].@type);
                    itemTarget = target + "." + key;
                    itemAccess = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE;
                    itemsArray[itemsArray.length] = {"name":itemName, "type":itemType, "target":itemTarget, "access":itemAccess, "permission":itemPermission, "icon":itemIcon};
                }
                ++i;
            }
            i = 0;
            while (i < accessorsLength) 
            {
                key = accessors[i].@name;
                if (!keys.hasOwnProperty(key)) 
                {
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(accessors[i].@type);
                    itemTarget = target + "." + key;
                    itemAccess = MonsterDebuggerConstants.ACCESS_ACCESSOR;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE;
                    if (accessors[i].@access == MonsterDebuggerConstants.PERMISSION_READONLY) 
                    {
                        itemPermission = MonsterDebuggerConstants.PERMISSION_READONLY;
                        itemIcon = MonsterDebuggerConstants.ICON_VARIABLE_READONLY;
                    }
                    if (accessors[i].@access == MonsterDebuggerConstants.PERMISSION_WRITEONLY) 
                    {
                        itemPermission = MonsterDebuggerConstants.PERMISSION_WRITEONLY;
                        itemIcon = MonsterDebuggerConstants.ICON_VARIABLE_WRITEONLY;
                    }
                    itemsArray[itemsArray.length] = {"name":itemName, "type":itemType, "target":itemTarget, "access":itemAccess, "permission":itemPermission, "icon":itemIcon};
                }
                ++i;
            }
            i = 0;
            while (i < constantsLength) 
            {
                key = constants[i].@name;
                if (!keys.hasOwnProperty(key)) 
                {
                    keys[key] = key;
                    itemName = key;
                    itemType = parseType(constants[i].@type);
                    itemTarget = target + "." + key;
                    itemAccess = MonsterDebuggerConstants.ACCESS_CONSTANT;
                    itemPermission = MonsterDebuggerConstants.PERMISSION_READONLY;
                    itemIcon = MonsterDebuggerConstants.ICON_VARIABLE_READONLY;
                    itemsArray[itemsArray.length] = {"name":itemName, "type":itemType, "target":itemTarget, "access":itemAccess, "permission":itemPermission, "icon":itemIcon};
                }
                ++i;
            }
            itemsArray.sortOn("name", Array.CASEINSENSITIVE);
            if (includeDisplayObjects && object is flash.display.DisplayObjectContainer) 
            {
                displayObject = flash.display.DisplayObjectContainer(object);
                displayObjects = [];
                childLength = displayObject.numChildren;
                i = 0;
                while (i < childLength) 
                {
                    child = displayObject.getChildAt(i);
                    if (child != null) 
                    {
                        itemXML = MonsterDebuggerDescribeType.get(child);
                        itemType = parseType(itemXML.@name);
                        itemName = "DisplayObject";
                        if (child.name != null) 
                        {
                            itemName = itemName + (" - " + child.name);
                        }
                        itemTarget = target + "." + "getChildAt(" + i + ")";
                        itemAccess = MonsterDebuggerConstants.ACCESS_DISPLAY_OBJECT;
                        itemPermission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        itemIcon = child is flash.display.DisplayObjectContainer ? MonsterDebuggerConstants.ICON_ROOT : MonsterDebuggerConstants.ICON_DISPLAY_OBJECT;
                        displayObjects[displayObjects.length] = {"name":itemName, "type":itemType, "target":itemTarget, "access":itemAccess, "permission":itemPermission, "icon":itemIcon, "index":i};
                    }
                    ++i;
                }
                displayObjects.sortOn("name", Array.CASEINSENSITIVE);
                itemsArray = displayObjects.concat(itemsArray);
            }
            itemsArrayLength = itemsArray.length;
            i = 0;
            while (i < itemsArrayLength) 
            {
                itemType = itemsArray[i].type;
                itemName = itemsArray[i].name;
                itemTarget = itemsArray[i].target;
                itemPermission = itemsArray[i].permission;
                itemAccess = itemsArray[i].access;
                itemIcon = itemsArray[i].icon;
                try 
                {
                    if (itemAccess != MonsterDebuggerConstants.ACCESS_DISPLAY_OBJECT) 
                    {
                        item = object[itemName];
                    }
                    else 
                    {
                        item = flash.display.DisplayObjectContainer(object).getChildAt(itemsArray[i].index);
                    }
                }
                catch (e:Error)
                {
                    item = null;
                }
                if (!(item == null) && !(itemPermission == MonsterDebuggerConstants.PERMISSION_WRITEONLY)) 
                {
                    if (itemType == MonsterDebuggerConstants.TYPE_STRING || itemType == MonsterDebuggerConstants.TYPE_BOOLEAN || itemType == MonsterDebuggerConstants.TYPE_NUMBER || itemType == MonsterDebuggerConstants.TYPE_INT || itemType == MonsterDebuggerConstants.TYPE_UINT || itemType == MonsterDebuggerConstants.TYPE_FUNCTION) 
                    {
                        isXML = false;
                        isXMLString = new XML();
                        if (itemType == MonsterDebuggerConstants.TYPE_STRING) 
                        {
                            try 
                            {
                                isXMLString = new XML(item);
                                isXML = !isXMLString.hasSimpleContent() && isXMLString.children().length() > 0;
                            }
                            catch (error:TypeError)
                            {
                            };
                        }
                        if (isXML) 
                        {
                            nodeXML = new XML("<node/>");
                            nodeXML.@icon = itemIcon;
                            nodeXML.@label = itemName + " (" + itemType + ")";
                            nodeXML.@name = itemName;
                            nodeXML.@type = itemType;
                            nodeXML.@value = "";
                            nodeXML.@target = itemTarget;
                            nodeXML.@access = itemAccess;
                            nodeXML.@permission = itemPermission;
                            nodeXML.appendChild(parseXML(isXMLString, itemTarget + "." + "children()", currentDepth, maxDepth).children());
                            rootXML.appendChild(nodeXML);
                        }
                        else 
                        {
                            nodeXML = new XML("<node/>");
                            nodeXML.@icon = itemIcon;
                            nodeXML.@label = itemName + " (" + itemType + ") = " + printValue(item, itemType);
                            nodeXML.@name = itemName;
                            nodeXML.@type = itemType;
                            nodeXML.@value = printValue(item, itemType);
                            nodeXML.@target = itemTarget;
                            nodeXML.@access = itemAccess;
                            nodeXML.@permission = itemPermission;
                            rootXML.appendChild(nodeXML);
                        }
                    }
                    else 
                    {
                        nodeXML = new XML("<node/>");
                        nodeXML.@icon = itemIcon;
                        nodeXML.@label = itemName + " (" + itemType + ")";
                        nodeXML.@name = itemName;
                        nodeXML.@type = itemType;
                        nodeXML.@target = itemTarget;
                        nodeXML.@access = itemAccess;
                        nodeXML.@permission = itemPermission;
                        if (!(item == null) && !(itemType == MonsterDebuggerConstants.TYPE_BYTEARRAY)) 
                        {
                            nodeXML.appendChild(parse(item, itemTarget, currentDepth + 1, maxDepth, includeDisplayObjects).children());
                        }
                        rootXML.appendChild(nodeXML);
                    }
                }
                ++i;
            }
            return rootXML;
        }

        internal static function parseArray(arg1:*, arg2:String, arg3:int=1, arg4:int=5, arg5:Boolean=true):XML
        {
            var isNumeric:Boolean;
            var maxDepth:int=5;
            var currentDepth:int=1;
            var childTarget:String;
            var target:String;
            var isXML:Boolean;
            var rootXML:XML;
            var childXML:XML;
            var key:*;
            var i:int;
            var nodeXML:XML;
            var includeDisplayObjects:Boolean=true;
            var keys:Array;
            var childType:String;
            var isXMLString:XML;
            var object:*;

            var loc1:*;
            nodeXML = null;
            childXML = null;
            key = undefined;
            object = arg1;
            target = arg2;
            currentDepth = arg3;
            maxDepth = arg4;
            includeDisplayObjects = arg5;
            rootXML = new XML("<root/>");
            childType = "";
            childTarget = "";
            isXML = false;
            isXMLString = new XML();
            i = 0;
            nodeXML = new XML("<node/>");
            nodeXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
            nodeXML.@label = "length" + " (" + MonsterDebuggerConstants.TYPE_UINT + ") = " + object["length"];
            nodeXML.@name = "length";
            nodeXML.@type = MonsterDebuggerConstants.TYPE_UINT;
            nodeXML.@value = object["length"];
            nodeXML.@target = target + "." + "length";
            nodeXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
            nodeXML.@permission = MonsterDebuggerConstants.PERMISSION_READONLY;
            keys = [];
            isNumeric = true;
            var loc2:*=0;
            var loc3:*=object;
            for (key in loc3) 
            {
                if (!(key is int)) 
                {
                    isNumeric = false;
                }
                keys.push(key);
            }
            if (isNumeric) 
            {
                keys.sort(Array.NUMERIC);
            }
            else 
            {
                keys.sort(Array.CASEINSENSITIVE);
            }
            i = 0;
            while (i < keys.length) 
            {
                childType = parseType(MonsterDebuggerDescribeType.get(object[keys[i]]).@name);
                childTarget = target + "." + String(keys[i]);
                if (childType == MonsterDebuggerConstants.TYPE_STRING || childType == MonsterDebuggerConstants.TYPE_BOOLEAN || childType == MonsterDebuggerConstants.TYPE_NUMBER || childType == MonsterDebuggerConstants.TYPE_INT || childType == MonsterDebuggerConstants.TYPE_UINT || childType == MonsterDebuggerConstants.TYPE_FUNCTION) 
                {
                    isXML = false;
                    isXMLString = new XML();
                    if (childType == MonsterDebuggerConstants.TYPE_STRING) 
                    {
                        try 
                        {
                            isXMLString = new XML(object[keys[i]]);
                            if (!isXMLString.hasSimpleContent() && isXMLString.children().length() > 0) 
                            {
                                isXML = true;
                            }
                        }
                        catch (error:TypeError)
                        {
                        };
                    }
                    if (isXML) 
                    {
                        childXML = new XML("<node/>");
                        childXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                        childXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        childXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        childXML.@label = "[" + keys[i] + "] (" + childType + ")";
                        childXML.@name = "[" + keys[i] + "]";
                        childXML.@type = childType;
                        childXML.@value = "";
                        childXML.@target = childTarget;
                        childXML.appendChild(parseXML(object[keys[i]], childTarget, currentDepth + 1, maxDepth).children());
                        nodeXML.appendChild(childXML);
                    }
                    else 
                    {
                        childXML = new XML("<node/>");
                        childXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                        childXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        childXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        childXML.@label = "[" + keys[i] + "] (" + childType + ") = " + printValue(object[keys[i]], childType);
                        childXML.@name = "[" + keys[i] + "]";
                        childXML.@type = childType;
                        childXML.@value = printValue(object[keys[i]], childType);
                        childXML.@target = childTarget;
                        nodeXML.appendChild(childXML);
                    }
                }
                else 
                {
                    childXML = new XML("<node/>");
                    childXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                    childXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    childXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    childXML.@label = "[" + keys[i] + "] (" + childType + ")";
                    childXML.@name = "[" + keys[i] + "]";
                    childXML.@type = childType;
                    childXML.@value = "";
                    childXML.@target = childTarget;
                    childXML.appendChild(parse(object[keys[i]], childTarget, currentDepth + 1, maxDepth, includeDisplayObjects).children());
                    nodeXML.appendChild(childXML);
                }
                ++i;
            }
            rootXML.appendChild(nodeXML);
            return rootXML;
        }

        public static function parseFunctions(arg1:*, arg2:String=""):XML
        {
            var description:XML;
            var itemXML:XML;
            var methodsLength:int;
            var returnType:String;
            var itemTarget:String;
            var argsString:String;
            var methodsArr:Array;
            var target:String="";
            var rootXML:XML;
            var args:Array;
            var key:String;
            var optional:Boolean;
            var i:int;
            var itemType:String;
            var n:int;
            var parameters:XMLList;
            var methods:XMLList;
            var parameterXML:XML;
            var methodXML:XML;
            var parametersLength:int;
            var type:String;
            var keys:Object;
            var itemName:String;
            var object:*;

            var loc1:*;
            itemXML = null;
            key = null;
            returnType = null;
            parameters = null;
            parametersLength = 0;
            args = null;
            argsString = null;
            methodXML = null;
            parameterXML = null;
            object = arg1;
            target = arg2;
            rootXML = new XML("<root/>");
            description = MonsterDebuggerDescribeType.get(object);
            type = parseType(description.@name);
            itemType = "";
            itemName = "";
            itemTarget = "";
            keys = {};
            methods = description;
            methodsArr = [];
            methodsLength = methods.length();
            optional = false;
            i = 0;
            n = 0;
            itemXML = new XML("<node/>");
            itemXML.@icon = MonsterDebuggerConstants.ICON_DEFAULT;
            itemXML.@label = "(" + type + ")";
            itemXML.@target = target;
            i = 0;
            while (i < methodsLength) 
            {
                key = methods[i].@name;
                try 
                {
                    if (!keys.hasOwnProperty(key)) 
                    {
                        keys[key] = key;
                        methodsArr[methodsArr.length] = {"name":key, "xml":methods[i], "access":MonsterDebuggerConstants.ACCESS_METHOD};
                    }
                }
                catch (e:Error)
                {
                };
                ++i;
            }
            methodsArr.sortOn("name", Array.CASEINSENSITIVE);
            methodsLength = methodsArr.length;
            i = 0;
            while (i < methodsLength) 
            {
                itemType = MonsterDebuggerConstants.TYPE_FUNCTION;
                itemName = methodsArr[i].xml.@name;
                itemTarget = target + MonsterDebuggerConstants.DELIMITER + itemName;
                returnType = parseType(methodsArr[i].xml.@returnType);
                parameters = methodsArr[i].xml;
                parametersLength = parameters.length();
                args = [];
                argsString = "";
                optional = false;
                n = 0;
                while (n < parametersLength) 
                {
                    if (parameters[n].@optional == "true" && !optional) 
                    {
                        optional = true;
                        args[args.length] = "[";
                    }
                    args[args.length] = parseType(parameters[n].@type);
                    ++n;
                }
                if (optional) 
                {
                    args[args.length] = "]";
                }
                argsString = args.join(", ");
                argsString = argsString.replace("[, ", "[");
                argsString = argsString.replace(", ]", "]");
                methodXML = new XML("<node/>");
                methodXML.@icon = MonsterDebuggerConstants.ICON_FUNCTION;
                methodXML.@type = MonsterDebuggerConstants.TYPE_FUNCTION;
                methodXML.@access = MonsterDebuggerConstants.ACCESS_METHOD;
                methodXML.@label = itemName + "(" + argsString + "):" + returnType;
                methodXML.@name = itemName;
                methodXML.@target = itemTarget;
                methodXML.@args = argsString;
                methodXML.@returnType = returnType;
                n = 0;
                while (n < parametersLength) 
                {
                    parameterXML = new XML("<node/>");
                    parameterXML.@type = parseType(parameters[n].@type);
                    parameterXML.@index = parameters[n].@index;
                    parameterXML.@optional = parameters[n].@optional;
                    methodXML.appendChild(parameterXML);
                    ++n;
                }
                itemXML.appendChild(methodXML);
                ++i;
            }
            rootXML.appendChild(itemXML);
            return rootXML;
        }

        public static function parseXML(arg1:*, arg2:String="", arg3:int=1, arg4:int=-1):XML
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc5:*=null;
            var loc1:*=new XML("<root/>");
            var loc4:*=0;
            if (!(arg4 == -1) && arg3 > arg4) 
            {
                return loc1;
            }
            if (arg2.indexOf("@") == -1) 
            {
                if (arg1.name() != null) 
                {
                    if (arg1.hasSimpleContent()) 
                    {
                        (loc2 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLNODE;
                        loc2.@type = MonsterDebuggerConstants.TYPE_XMLNODE;
                        loc2.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        loc2.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        loc2.@label = arg1.name() + " (" + MonsterDebuggerConstants.TYPE_XMLNODE + ")";
                        loc2.@name = arg1.name();
                        loc2.@value = "";
                        loc2.@target = arg2;
                        if (arg1 != "") 
                        {
                            (loc3 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLVALUE;
                            loc3.@type = MonsterDebuggerConstants.TYPE_XMLVALUE;
                            loc3.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                            loc3.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                            loc3.@label = "(" + MonsterDebuggerConstants.TYPE_XMLVALUE + ") = " + printValue(arg1, MonsterDebuggerConstants.TYPE_XMLVALUE);
                            loc3.@name = "";
                            loc3.@value = printValue(arg1, MonsterDebuggerConstants.TYPE_XMLVALUE);
                            loc3.@target = arg2;
                            loc2.appendChild(loc3);
                        }
                        loc4 = 0;
                        while (loc4 < arg1.attributes().length()) 
                        {
                            (loc3 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLATTRIBUTE;
                            loc3.@type = MonsterDebuggerConstants.TYPE_XMLATTRIBUTE;
                            loc3.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                            loc3.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                            loc3.@label = "@" + arg1.attributes()[loc4].name() + " (" + MonsterDebuggerConstants.TYPE_XMLATTRIBUTE + ") = " + arg1.attributes()[loc4];
                            loc3.@name = "";
                            loc3.@value = arg1.attributes()[loc4];
                            loc3.@target = arg2 + "." + "@" + arg1.attributes()[loc4].name();
                            loc2.appendChild(loc3);
                            ++loc4;
                        }
                        loc1.appendChild(loc2);
                    }
                    else 
                    {
                        (loc2 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLNODE;
                        loc2.@type = MonsterDebuggerConstants.TYPE_XMLNODE;
                        loc2.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        loc2.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        loc2.@label = arg1.name() + " (" + MonsterDebuggerConstants.TYPE_XMLNODE + ")";
                        loc2.@name = arg1.name();
                        loc2.@value = "";
                        loc2.@target = arg2;
                        loc4 = 0;
                        while (loc4 < arg1.attributes().length()) 
                        {
                            (loc3 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLATTRIBUTE;
                            loc3.@type = MonsterDebuggerConstants.TYPE_XMLATTRIBUTE;
                            loc3.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                            loc3.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                            loc3.@label = "@" + arg1.attributes()[loc4].name() + " (" + MonsterDebuggerConstants.TYPE_XMLATTRIBUTE + ") = " + arg1.attributes()[loc4];
                            loc3.@name = "";
                            loc3.@value = arg1.attributes()[loc4];
                            loc3.@target = arg2 + "." + "@" + arg1.attributes()[loc4].name();
                            loc2.appendChild(loc3);
                            ++loc4;
                        }
                        loc4 = 0;
                        while (loc4 < arg1.children().length()) 
                        {
                            loc5 = arg2 + "." + "children()" + "." + loc4;
                            loc2.appendChild(parseXML(arg1.children()[loc4], loc5, arg3 + 1, arg4).children());
                            ++loc4;
                        }
                        loc1.appendChild(loc2);
                    }
                }
                else 
                {
                    (loc2 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLVALUE;
                    loc2.@type = MonsterDebuggerConstants.TYPE_XMLVALUE;
                    loc2.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    loc2.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    loc2.@label = "(" + MonsterDebuggerConstants.TYPE_XMLVALUE + ") = " + printValue(arg1, MonsterDebuggerConstants.TYPE_XMLVALUE);
                    loc2.@name = "";
                    loc2.@value = printValue(arg1, MonsterDebuggerConstants.TYPE_XMLVALUE);
                    loc2.@target = arg2;
                    loc1.appendChild(loc2);
                }
            }
            else 
            {
                (loc2 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_XMLATTRIBUTE;
                loc2.@type = MonsterDebuggerConstants.TYPE_XMLATTRIBUTE;
                loc2.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                loc2.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                loc2.@label = arg1;
                loc2.@name = "";
                loc2.@value = arg1;
                loc2.@target = arg2;
                loc1.appendChild(loc2);
            }
            return loc1;
        }

        public static function resume():Boolean
        {
            var loc1:*;
            try 
            {
                flash.system.System.resume();
                return true;
            }
            catch (e:Error)
            {
            };
            return false;
        }

        public static function getObjectUnderPoint(arg1:flash.display.DisplayObjectContainer, arg2:flash.geom.Point):flash.display.DisplayObject
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc4:*=null;
            if (arg1.areInaccessibleObjectsUnderPoint(arg2)) 
            {
                return arg1;
            }
            loc1 = arg1.getObjectsUnderPoint(arg2);
            loc1.reverse();
            if (loc1 == null || loc1.length == 0) 
            {
                return arg1;
            }
            loc2 = loc1[0];
            loc1.length = 0;
            for (;;) 
            {
                loc1[loc1.length] = loc2;
                if (loc2.parent == null) 
                {
                    break;
                }
                loc2 = loc2.parent;
            }
            loc1.reverse();
            var loc3:*=0;
            while (loc3 < loc1.length) 
            {
                if ((loc4 = loc1[loc3]) is flash.display.DisplayObjectContainer) 
                {
                    loc2 = loc4;
                    if (!flash.display.DisplayObjectContainer(loc4).mouseChildren) 
                    {
                        break;
                    }
                }
                else 
                {
                    break;
                }
                ++loc3;
            }
            return loc2;
        }

        public static function getReferenceID(arg1:*):String
        {
            if (arg1 in _references) 
            {
                return _references[arg1];
            }
            var loc1:*="#" + String(_reference);
            _references[arg1] = loc1;
            var loc2:*;
            _reference++;
            return loc1;
        }

        public static function printValue(arg1:*, arg2:String):String
        {
            if (arg2 == MonsterDebuggerConstants.TYPE_BYTEARRAY) 
            {
                return arg1["length"] + " bytes";
            }
            if (arg1 == null) 
            {
                return "null";
            }
            return String(arg1);
        }

        internal static function parseObject(arg1:*, arg2:String, arg3:int=1, arg4:int=5, arg5:Boolean=true):XML
        {
            var isNumeric:Boolean;
            var maxDepth:int=5;
            var currentDepth:int=1;
            var childTarget:String;
            var target:String;
            var isXML:Boolean;
            var rootXML:XML;
            var childXML:XML;
            var i:int;
            var prop:*;
            var properties:Array;
            var nodeXML:XML;
            var includeDisplayObjects:Boolean=true;
            var childType:String;
            var isXMLString:XML;
            var object:*;

            var loc1:*;
            childXML = null;
            prop = undefined;
            object = arg1;
            target = arg2;
            currentDepth = arg3;
            maxDepth = arg4;
            includeDisplayObjects = arg5;
            rootXML = new XML("<root/>");
            nodeXML = new XML("<node/>");
            childType = "";
            childTarget = "";
            isXML = false;
            isXMLString = new XML();
            i = 0;
            properties = [];
            isNumeric = true;
            var loc2:*=0;
            var loc3:*=object;
            for (prop in loc3) 
            {
                if (!(prop is int)) 
                {
                    isNumeric = false;
                }
                properties.push(prop);
            }
            if (isNumeric) 
            {
                properties.sort(Array.NUMERIC);
            }
            else 
            {
                properties.sort(Array.CASEINSENSITIVE);
            }
            i = 0;
            while (i < properties.length) 
            {
                childType = parseType(MonsterDebuggerDescribeType.get(object[properties[i]]).@name);
                childTarget = target + "." + properties[i];
                if (childType == MonsterDebuggerConstants.TYPE_STRING || childType == MonsterDebuggerConstants.TYPE_BOOLEAN || childType == MonsterDebuggerConstants.TYPE_NUMBER || childType == MonsterDebuggerConstants.TYPE_INT || childType == MonsterDebuggerConstants.TYPE_UINT || childType == MonsterDebuggerConstants.TYPE_FUNCTION) 
                {
                    isXML = false;
                    isXMLString = new XML();
                    if (childType == MonsterDebuggerConstants.TYPE_STRING) 
                    {
                        try 
                        {
                            isXMLString = new XML(object[properties[i]]);
                            if (!isXMLString.hasSimpleContent() && isXMLString.children().length() > 0) 
                            {
                                isXML = true;
                            }
                        }
                        catch (error:TypeError)
                        {
                        };
                    }
                    if (isXML) 
                    {
                        childXML = new XML("<node/>");
                        childXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                        childXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        childXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        childXML.@label = properties[i] + " (" + childType + ")";
                        childXML.@name = properties[i];
                        childXML.@type = childType;
                        childXML.@value = "";
                        childXML.@target = childTarget;
                        childXML.appendChild(parseXML(object[properties[i]], childTarget, currentDepth + 1, maxDepth).children());
                        nodeXML.appendChild(childXML);
                    }
                    else 
                    {
                        childXML = new XML("<node/>");
                        childXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                        childXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        childXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                        childXML.@label = properties[i] + " (" + childType + ") = " + printValue(object[properties[i]], childType);
                        childXML.@name = properties[i];
                        childXML.@type = childType;
                        childXML.@value = printValue(object[properties[i]], childType);
                        childXML.@target = childTarget;
                        nodeXML.appendChild(childXML);
                    }
                }
                else 
                {
                    childXML = new XML("<node/>");
                    childXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                    childXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                    childXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                    childXML.@label = properties[i] + " (" + childType + ")";
                    childXML.@name = properties[i];
                    childXML.@type = childType;
                    childXML.@value = "";
                    childXML.@target = childTarget;
                    childXML.appendChild(parse(object[properties[i]], childTarget, currentDepth + 1, maxDepth, includeDisplayObjects).children());
                    nodeXML.appendChild(childXML);
                }
                ++i;
            }
            rootXML.appendChild(nodeXML.children());
            return rootXML;
        }

        public static function parse(arg1:*, arg2:String="", arg3:int=1, arg4:int=5, arg5:Boolean=true):XML
        {
            var loc3:*=null;
            var loc8:*=0;
            var loc9:*=null;
            var loc1:*=new XML("<root/>");
            var loc2:*=new XML("<node/>");
            var loc4:*=new XML();
            var loc5:*="";
            var loc6:*="";
            var loc7:*=false;
            if (!(arg4 == -1) && arg3 > arg4) 
            {
                return loc1;
            }
            if (arg1 != null) 
            {
                loc4 = MonsterDebuggerDescribeType.get(arg1);
                loc5 = parseType(loc4.@name);
                loc6 = parseType(loc4.@base);
                loc7 = loc4.@isDynamic;
                if (arg1 is Class) 
                {
                    loc2.appendChild(parseClass(arg1, arg2, loc4, arg3, arg4, arg5).children());
                }
                else if (loc5 != MonsterDebuggerConstants.TYPE_XML) 
                {
                    if (loc5 != MonsterDebuggerConstants.TYPE_XMLLIST) 
                    {
                        if (loc5 == MonsterDebuggerConstants.TYPE_STRING || loc5 == MonsterDebuggerConstants.TYPE_BOOLEAN || loc5 == MonsterDebuggerConstants.TYPE_NUMBER || loc5 == MonsterDebuggerConstants.TYPE_INT || loc5 == MonsterDebuggerConstants.TYPE_UINT) 
                        {
                            loc2.appendChild(parseBasics(arg1, arg2, loc5).children());
                        }
                        else if (loc5 == MonsterDebuggerConstants.TYPE_ARRAY || loc5.indexOf(MonsterDebuggerConstants.TYPE_VECTOR) == 0) 
                        {
                            loc2.appendChild(parseArray(arg1, arg2, arg3, arg4).children());
                        }
                        else if (loc5 != MonsterDebuggerConstants.TYPE_OBJECT) 
                        {
                            loc2.appendChild(parseClass(arg1, arg2, loc4, arg3, arg4, arg5).children());
                        }
                        else 
                        {
                            loc2.appendChild(parseObject(arg1, arg2, arg3, arg4, arg5).children());
                        }
                    }
                    else 
                    {
                        (loc3 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                        loc3.@type = MonsterDebuggerConstants.TYPE_UINT;
                        loc3.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                        loc3.@permission = MonsterDebuggerConstants.PERMISSION_READONLY;
                        loc3.@target = arg2 + "." + "length";
                        loc3.@label = "length" + " (" + MonsterDebuggerConstants.TYPE_UINT + ") = " + arg1.length();
                        loc3.@name = "length";
                        loc3.@value = arg1.length();
                        loc8 = 0;
                        while (loc8 < arg1.length()) 
                        {
                            loc3.appendChild(parseXML(arg1[loc8], arg2 + "." + String(loc8) + ".children()", arg3, arg4).children());
                            ++loc8;
                        }
                        loc2.appendChild(loc3);
                    }
                }
                else 
                {
                    loc2.appendChild(parseXML(arg1, arg2 + "." + "children()", arg3, arg4).children());
                }
            }
            else 
            {
                (loc3 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_WARNING;
                loc3.@label = "Null object";
                loc3.@name = "Null object";
                loc3.@type = MonsterDebuggerConstants.TYPE_WARNING;
                loc2.appendChild(loc3);
                loc5 = "null";
            }
            if (arg3 != 1) 
            {
                loc1.appendChild(loc2.children());
            }
            else 
            {
                (loc9 = new XML("<node/>")).@icon = MonsterDebuggerConstants.ICON_ROOT;
                loc9.@label = "(" + loc5 + ")";
                loc9.@type = loc5;
                loc9.@target = arg2;
                loc9.appendChild(loc2.children());
                loc1.appendChild(loc9);
            }
            return loc1;
        }

        public static function parseType(arg1:String):String
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg1.indexOf("::") != -1) 
            {
                arg1 = arg1.substring(arg1.indexOf("::") + 2, arg1.length);
            }
            if (arg1.indexOf("::") != -1) 
            {
                loc1 = arg1.substring(0, arg1.indexOf("<") + 1);
                loc2 = arg1.substring(arg1.indexOf("::") + 2, arg1.length);
                arg1 = loc1 + loc2;
            }
            arg1 = arg1.replace("()", "");
            arg1 = arg1.replace(MonsterDebuggerConstants.TYPE_METHOD, MonsterDebuggerConstants.TYPE_FUNCTION);
            return arg1;
        }

        public static function getReference(arg1:String):*
        {
            var loc1:*=undefined;
            var loc2:*=null;
            if (arg1.charAt(0) != "#") 
            {
                return null;
            }
            var loc3:*=0;
            var loc4:*=_references;
            for (loc1 in loc4) 
            {
                loc2 = _references[loc1];
                if (loc2 != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public static function pause():Boolean
        {
            var loc1:*;
            try 
            {
                flash.system.System.pause();
                return true;
            }
            catch (e:Error)
            {
            };
            return false;
        }

        public static function getMemory():uint
        {
            return flash.system.System.totalMemory;
        }

        public static function getObject(arg1:*, arg2:String="", arg3:int=0):*
        {
            var i:int;
            var parent:int=0;
            var index:Number;
            var target:String="";
            var base:*;
            var splitted:Array;
            var object:*;

            var loc1:*;
            index = NaN;
            base = arg1;
            target = arg2;
            parent = arg3;
            if (target == null || target == "") 
            {
                return base;
            }
            if (target.charAt(0) == "#") 
            {
                return getReference(target);
            }
            object = base;
            splitted = target.split(MonsterDebuggerConstants.DELIMITER);
            i = 0;
            while (i < splitted.length - parent) 
            {
                if (splitted[i] != "") 
                {
                    try 
                    {
                        if (splitted[i] != "children()") 
                        {
                            if (object is flash.display.DisplayObjectContainer && splitted[i].indexOf("getChildAt(") == 0) 
                            {
                                index = splitted[i].substring(11, splitted[i].indexOf(")", 11));
                                object = flash.display.DisplayObjectContainer(object).getChildAt(index);
                            }
                            else 
                            {
                                object = object[splitted[i]];
                            }
                        }
                        else 
                        {
                            object = object.children();
                        }
                    }
                    catch (e:Error)
                    {
                        break;
                    }
                }
                ++i;
            }
            return object;
        }

        public static function stackTrace():XML
        {
            var classname:String;
            var stack:String;
            var bracketIndex:int;
            var rootXML:XML;
            var childXML:XML;
            var functionXML:XML;
            var method:String;
            var i:int;
            var methodIndex:int;
            var s:String;
            var line:String;
            var file:String;
            var lines:Array;

            var loc1:*;
            childXML = null;
            stack = null;
            lines = null;
            i = 0;
            s = null;
            bracketIndex = 0;
            methodIndex = 0;
            classname = null;
            method = null;
            file = null;
            line = null;
            functionXML = null;
            rootXML = new XML("<root/>");
            childXML = new XML("<node/>");
            try 
            {
                throw new Error();
            }
            catch (e:Error)
            {
                stack = e.getStackTrace();
                if (stack == null || stack == "") 
                {
                    return new XML("<root><error>Stack unavailable</error></root>");
                }
                stack = stack.split("\t").join("");
                lines = stack.split("\n");
                if (lines.length <= 4) 
                {
                    return new XML("<root><error>Stack to short</error></root>");
                }
                lines.shift();
                lines.shift();
                lines.shift();
                lines.shift();
                i = 0;
                while (i < lines.length) 
                {
                    s = lines[i];
                    s = s.substring(3, s.length);
                    bracketIndex = s.indexOf("[");
                    methodIndex = s.indexOf("/");
                    if (bracketIndex == -1) 
                    {
                        bracketIndex = s.length;
                    }
                    if (methodIndex == -1) 
                    {
                        methodIndex = bracketIndex;
                    }
                    classname = MonsterDebuggerUtils.parseType(s.substring(0, methodIndex));
                    method = "";
                    file = "";
                    line = "";
                    if (!(methodIndex == s.length) && !(methodIndex == bracketIndex)) 
                    {
                        method = s.substring(methodIndex + 1, bracketIndex);
                    }
                    if (bracketIndex != s.length) 
                    {
                        file = s.substring(bracketIndex + 1, s.lastIndexOf(":"));
                        line = s.substring(s.lastIndexOf(":") + 1, (s.length - 1));
                    }
                    functionXML = new XML("<node/>");
                    functionXML.@classname = classname;
                    functionXML.@method = method;
                    functionXML.@file = file;
                    functionXML.@line = line;
                    childXML.appendChild(functionXML);
                    ++i;
                }
            }
            rootXML.appendChild(childXML.children());
            return rootXML;
        }

        public static function isDisplayObject(arg1:*):Boolean
        {
            return arg1 is flash.display.DisplayObject || arg1 is flash.display.DisplayObjectContainer;
        }

        internal static function parseBasics(arg1:*, arg2:String, arg3:String, arg4:int=1, arg5:int=5):XML
        {
            var object:*;
            var isXML:Boolean;
            var target:String;
            var rootXML:XML;
            var isXMLString:XML;
            var currentDepth:int=1;
            var type:String;
            var nodeXML:XML;
            var maxDepth:int=5;

            var loc1:*;
            object = arg1;
            target = arg2;
            type = arg3;
            currentDepth = arg4;
            maxDepth = arg5;
            rootXML = new XML("<root/>");
            nodeXML = new XML("<node/>");
            isXML = false;
            isXMLString = new XML();
            if (type == MonsterDebuggerConstants.TYPE_STRING) 
            {
                try 
                {
                    isXMLString = new XML(object);
                    isXML = !isXMLString.hasSimpleContent() && isXMLString.children().length() > 0;
                }
                catch (error:TypeError)
                {
                };
            }
            if (isXML) 
            {
                nodeXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                nodeXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                nodeXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                nodeXML.@label = "(" + MonsterDebuggerConstants.TYPE_XML + ")";
                nodeXML.@name = "";
                nodeXML.@type = MonsterDebuggerConstants.TYPE_XML;
                nodeXML.@value = "";
                nodeXML.@target = target;
                nodeXML.appendChild(parseXML(isXMLString, target + "." + "children()", currentDepth, maxDepth).children());
            }
            else 
            {
                nodeXML.@icon = MonsterDebuggerConstants.ICON_VARIABLE;
                nodeXML.@access = MonsterDebuggerConstants.ACCESS_VARIABLE;
                nodeXML.@permission = MonsterDebuggerConstants.PERMISSION_READWRITE;
                nodeXML.@label = "(" + type + ") = " + printValue(object, type);
                nodeXML.@name = "";
                nodeXML.@type = type;
                nodeXML.@value = printValue(object, type);
                nodeXML.@target = target;
            }
            rootXML.appendChild(nodeXML);
            return rootXML;
        }

        
        {
            _references = new flash.utils.Dictionary(true);
            _reference = 0;
        }

        internal static var _references:flash.utils.Dictionary;

        internal static var _reference:int=0;
    }
}


//    package greensock
//      package events
//        class LoaderEvent
package com.greensock.events 
{
    import flash.events.*;
    
    public class LoaderEvent extends flash.events.Event
    {
        public function LoaderEvent(arg1:String, arg2:Object, arg3:String="", arg4:*=null)
        {
            super(arg1, false, false);
            _target = arg2;
            this.text = arg3;
            this.data = arg4;
            return;
        }

        public override function get target():Object
        {
            if (_ready) 
            {
                return _target;
            }
            _ready = true;
            return null;
        }

        public override function clone():flash.events.Event
        {
            return new com.greensock.events.LoaderEvent(this.type, _target, this.text, this.data);
        }

        public static const CHILD_FAIL:String="childFail";

        public static const HTTP_STATUS:String="httpStatus";

        public static const OPEN:String="open";

        public static const IO_ERROR:String="ioError";

        public static const CHILD_PROGRESS:String="childProgress";

        public static const INIT:String="init";

        public static const CHILD_CANCEL:String="childCancel";

        public static const FAIL:String="fail";

        public static const CHILD_COMPLETE:String="childComplete";

        public static const ERROR:String="error";

        public static const SCRIPT_ACCESS_DENIED:String="scriptAccessDenied";

        public static const PROGRESS:String="progress";

        public static const SECURITY_ERROR:String="securityError";

        public static const CHILD_OPEN:String="childOpen";

        public static const COMPLETE:String="complete";

        public static const CANCEL:String="cancel";

        protected var _target:Object;

        public var data:*;

        protected var _ready:Boolean;

        public var text:String;
    }
}


//      package loading
//        package core
//          class DisplayObjectLoader
package com.greensock.loading.core 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import com.greensock.loading.display.*;
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    
    public class DisplayObjectLoader extends com.greensock.loading.core.LoaderItem
    {
        public function DisplayObjectLoader(arg1:*, arg2:Object=null)
        {
            super(arg1, arg2);
            _refreshLoader(false);
            if (com.greensock.loading.LoaderMax.contentDisplayClass is Class) 
            {
                _sprite = new com.greensock.loading.LoaderMax.contentDisplayClass(this);
                if (!_sprite.hasOwnProperty("rawContent")) 
                {
                    throw new Error("LoaderMax.contentDisplayClass must be set to a class with a \'rawContent\' property, like com.greensock.loading.display.ContentDisplay");
                }
            }
            else 
            {
                _sprite = new com.greensock.loading.display.ContentDisplay(this);
            }
            return;
        }

        protected function _securityErrorHandler(arg1:flash.events.ErrorEvent):void
        {
            if (!(_context == null) && _context.checkPolicyFile && !("context" in this.vars)) 
            {
                _context = new flash.system.LoaderContext(false);
                _scriptAccessDenied = true;
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.SCRIPT_ACCESS_DENIED, this, arg1.text));
                _errorHandler(arg1);
                _load();
            }
            else 
            {
                _failHandler(arg1);
            }
            return;
        }

        protected override function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            if (arg1 != 1) 
            {
                if (arg1 != 2) 
                {
                    if (arg1 == 3) 
                    {
                        (_sprite as Object).dispose(false, false);
                    }
                }
                else 
                {
                    (_sprite as Object).loader = null;
                }
            }
            else 
            {
                (_sprite as Object).rawContent = null;
            }
            if (!_stealthMode) 
            {
                _refreshLoader(Boolean(!(arg1 == 2)));
            }
            super._dump(arg1, arg2, arg3);
            return;
        }

        protected function _determineScriptAccess():void
        {
            if (!_scriptAccessDenied) 
            {
                if (!_loader.contentLoaderInfo.childAllowsParent) 
                {
                    _scriptAccessDenied = true;
                    dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.SCRIPT_ACCESS_DENIED, this, "Error #2123: Security sandbox violation: " + this + ". No policy files granted access."));
                }
            }
            return;
        }

        protected override function _load():void
        {
            _prepRequest();
            if (this.vars.context is flash.system.LoaderContext) 
            {
                _context = this.vars.context;
            }
            else if (_context == null && !_isLocal) 
            {
                _context = new flash.system.LoaderContext(true, new flash.system.ApplicationDomain(flash.system.ApplicationDomain.currentDomain), flash.system.SecurityDomain.currentDomain);
            }
            if (flash.system.Capabilities.playerType != "Desktop") 
            {
                flash.system.Security.allowDomain(_url);
            }
            _loader.load(_request, _context);
            return;
        }

        public function get rawContent():*
        {
            return _content;
        }

        protected function _refreshLoader(arg1:Boolean=true):void
        {
            var unloadContent:Boolean=true;

            var loc1:*;
            unloadContent = arg1;
            if (_loader != null) 
            {
                if (_status == com.greensock.loading.LoaderStatus.LOADING) 
                {
                    try 
                    {
                        _loader.close();
                    }
                    catch (error:Error)
                    {
                    };
                }
                _loader.contentLoaderInfo.removeEventListener(flash.events.ProgressEvent.PROGRESS, _progressHandler);
                _loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, _completeHandler);
                _loader.contentLoaderInfo.removeEventListener("ioError", _failHandler);
                _loader.contentLoaderInfo.removeEventListener("securityError", _securityErrorHandler);
                _loader.contentLoaderInfo.removeEventListener("httpStatus", _httpStatusHandler);
                _loader.contentLoaderInfo.removeEventListener(flash.events.Event.INIT, _initHandler);
                if (unloadContent) 
                {
                    try 
                    {
                        if (_loader.hasOwnProperty("unloadAndStop")) 
                        {
                            (_loader as Object).unloadAndStop();
                        }
                        else 
                        {
                            _loader.unload();
                        }
                    }
                    catch (error:Error)
                    {
                    };
                }
                forceGC(_sprite, this.hasOwnProperty("getClass") ? 3 : 1);
            }
            _initted = false;
            _loader = new flash.display.Loader();
            _loader.contentLoaderInfo.addEventListener(flash.events.ProgressEvent.PROGRESS, _progressHandler, false, 0, true);
            _loader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, _completeHandler, false, 0, true);
            _loader.contentLoaderInfo.addEventListener("ioError", _failHandler, false, 0, true);
            _loader.contentLoaderInfo.addEventListener("securityError", _securityErrorHandler, false, 0, true);
            _loader.contentLoaderInfo.addEventListener("httpStatus", _httpStatusHandler, false, 0, true);
            _loader.contentLoaderInfo.addEventListener(flash.events.Event.INIT, _initHandler, false, 0, true);
            return;
        }

        public override function get content():*
        {
            return _sprite;
        }

        public function setContentDisplay(arg1:flash.display.Sprite):void
        {
            _sprite = arg1;
            return;
        }

        protected function _initHandler(arg1:flash.events.Event):void
        {
            if (!_initted) 
            {
                _initted = true;
                (_sprite as Object).rawContent = _content as flash.display.DisplayObject;
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.INIT, this));
            }
            return;
        }

        protected static function _forceGCHandler(arg1:flash.events.Event):void
        {
            var event:flash.events.Event;

            var loc1:*;
            event = arg1;
            if (_gcCycles == 0) 
            {
                _gcDispatcher.removeEventListener(flash.events.Event.ENTER_FRAME, _forceGCHandler);
                _gcDispatcher = null;
            }
            var loc2:*;
            _gcCycles--;
            try 
            {
                new flash.net.LocalConnection().connect("FORCE_GC");
                new flash.net.LocalConnection().connect("FORCE_GC");
            }
            catch (error:Error)
            {
            };
            return;
        }

        public static function forceGC(arg1:flash.display.DisplayObject, arg2:uint=1):void
        {
            if (_gcCycles < arg2) 
            {
                _gcCycles = arg2;
                if (_gcDispatcher == null) 
                {
                    _gcDispatcher = arg1;
                    _gcDispatcher.addEventListener(flash.events.Event.ENTER_FRAME, _forceGCHandler, false, 0, true);
                }
            }
            return;
        }

        
        {
            _gcCycles = 0;
        }

        protected var _initted:Boolean;

        protected var _stealthMode:Boolean;

        protected var _sprite:flash.display.Sprite;

        protected var _context:flash.system.LoaderContext;

        protected var _loader:flash.display.Loader;

        protected static var _gcDispatcher:flash.display.DisplayObject;

        protected static var _gcCycles:uint=0;
    }
}


//          class LoaderCore
package com.greensock.loading.core 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    
    public class LoaderCore extends flash.events.EventDispatcher
    {
        public function LoaderCore(arg1:Object=null)
        {
            var loc1:*=null;
            super();
            this.vars = arg1 == null ? {} : arg1;
            if (!("name" in this.vars)) 
            {
                var loc2:*;
            }
            undefined.name = this;
            _cachedBytesLoaded = 0;
            _cachedBytesTotal = "estimatedBytes" in this.vars ? uint(this.vars.estimatedBytes) : com.greensock.loading.LoaderMax.defaultEstimatedBytes;
            this.autoDispose = Boolean(this.vars.autoDispose == true);
            _status = this.vars.paused != true ? com.greensock.loading.LoaderStatus.READY : com.greensock.loading.LoaderStatus.PAUSED;
            _auditedSize = Boolean("estimatedBytes" in this.vars && !(this.vars.auditSize == true));
            _rootLoader = this.vars.requireWithRoot ? _rootLookup[this.vars.requireWithRoot] : _globalRootLoader;
            if (_globalRootLoader == null) 
            {
                if (this.vars.__isRoot == true) 
                {
                    return;
                }
                _rootLoader = loc2 = new com.greensock.loading.LoaderMax({"name":"root", "__isRoot":true});
                _globalRootLoader = loc2;
                _isLocal = Boolean(new flash.net.LocalConnection().domain == "localhost" || flash.system.Capabilities.playerType == "Desktop");
            }
            if (_rootLoader) 
            {
                _rootLoader.append(this);
            }
            else 
            {
                _rootLoader = loc2 = new com.greensock.loading.LoaderMax();
                _rootLookup[this.vars.requireWithRoot] = loc2;
                _rootLoader.name = "subloaded_swf_" + this.vars.requireWithRoot.loaderInfo.url;
                _rootLoader.append(this);
            }
            loc2 = 0;
            loc3 = _listenerTypes;
            for (loc1 in loc3) 
            {
                if (!(loc1 in this.vars)) 
                {
                    continue;
                }
                this.addEventListener(_listenerTypes[loc1], this.vars[loc1], false, 0, true);
            }
            return;
        }

        protected function _errorHandler(arg1:flash.events.Event):void
        {
            var loc1:*=arg1 is com.greensock.events.LoaderEvent && this.hasOwnProperty("getChildren") ? arg1.target : this;
            var loc2:*=(arg1 as Object).text;
            trace("Loading error on " + this.toString() + ": " + loc2);
            if (!(arg1.type == com.greensock.events.LoaderEvent.ERROR) && this.hasEventListener(arg1.type)) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(arg1.type, loc1, loc2));
            }
            if (this.hasEventListener(com.greensock.events.LoaderEvent.ERROR)) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.ERROR, loc1, this.toString() + " > " + loc2));
            }
            return;
        }

        public function get loadTime():Number
        {
            if (_status == com.greensock.loading.LoaderStatus.READY) 
            {
                return 0;
            }
            if (_status == com.greensock.loading.LoaderStatus.LOADING) 
            {
                return (flash.utils.getTimer() - _time) / 1000;
            }
            return _time / 1000;
        }

        public function get auditedSize():Boolean
        {
            return _auditedSize;
        }

        protected function _failHandler(arg1:flash.events.Event):void
        {
            _dump(0, com.greensock.loading.LoaderStatus.FAILED);
            _errorHandler(arg1);
            dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.FAIL, arg1 is com.greensock.events.LoaderEvent && this.hasOwnProperty("getChildren") ? arg1.target : this, this.toString() + " > " + (arg1 as Object).text));
            return;
        }

        protected function _passThroughEvent(arg1:flash.events.Event):void
        {
            var loc1:*=arg1.type;
            var loc2:*=this;
            if (this.hasOwnProperty("getChildren")) 
            {
                if (arg1 is com.greensock.events.LoaderEvent) 
                {
                    loc2 = arg1.target;
                }
                if (loc1 != "complete") 
                {
                    if (loc1 != "open") 
                    {
                        if (loc1 != "cancel") 
                        {
                            if (loc1 == "fail") 
                            {
                                loc1 = "childFail";
                            }
                        }
                        else 
                        {
                            loc1 = "childCancel";
                        }
                    }
                    else 
                    {
                        loc1 = "childOpen";
                    }
                }
                else 
                {
                    loc1 = "childComplete";
                }
            }
            if (this.hasEventListener(loc1)) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(loc1, loc2, arg1.hasOwnProperty("text") ? (arg1 as Object).text : ""));
            }
            return;
        }

        public function dispose(arg1:Boolean=false):void
        {
            _dump(arg1 ? 3 : 2, com.greensock.loading.LoaderStatus.DISPOSED);
            return;
        }

        protected function _completeHandler(arg1:flash.events.Event=null):void
        {
            _cachedBytesLoaded = _cachedBytesTotal;
            if (_status != com.greensock.loading.LoaderStatus.COMPLETED) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
                _status = com.greensock.loading.LoaderStatus.COMPLETED;
                _time = flash.utils.getTimer() - _time;
            }
            dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.COMPLETE, this));
            if (this.autoDispose) 
            {
                dispose();
            }
            return;
        }

        public function get rootLoader():com.greensock.loading.LoaderMax
        {
            return _rootLoader;
        }

        public function load(arg1:Boolean=false):void
        {
            var loc1:*=flash.utils.getTimer();
            if (this.status == com.greensock.loading.LoaderStatus.PAUSED) 
            {
                _status = _prePauseStatus <= com.greensock.loading.LoaderStatus.LOADING ? com.greensock.loading.LoaderStatus.READY : _prePauseStatus;
                if (_status == com.greensock.loading.LoaderStatus.READY && this is com.greensock.loading.LoaderMax) 
                {
                    loc1 = loc1 - _time;
                }
            }
            if (arg1 || _status == com.greensock.loading.LoaderStatus.FAILED) 
            {
                _dump(1, com.greensock.loading.LoaderStatus.READY);
            }
            if (_status != com.greensock.loading.LoaderStatus.READY) 
            {
                if (_status == com.greensock.loading.LoaderStatus.COMPLETED) 
                {
                    _completeHandler(null);
                }
            }
            else 
            {
                _status = com.greensock.loading.LoaderStatus.LOADING;
                _time = loc1;
                _load();
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.OPEN, this));
            }
            return;
        }

        public override function toString():String
        {
            return _type + " \'" + this.name + "\'" + (this is com.greensock.loading.core.LoaderItem ? " (" + (this as com.greensock.loading.core.LoaderItem).url + ")" : "");
        }

        protected function _progressHandler(arg1:flash.events.Event):void
        {
            if (arg1 is flash.events.ProgressEvent) 
            {
                _cachedBytesLoaded = (arg1 as flash.events.ProgressEvent).bytesLoaded;
                _cachedBytesTotal = (arg1 as flash.events.ProgressEvent).bytesTotal;
                _auditedSize = true;
            }
            if (_dispatchProgress && _status == com.greensock.loading.LoaderStatus.LOADING && !(_cachedBytesLoaded == _cachedBytesTotal)) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
            }
            return;
        }

        public function get status():int
        {
            return _status;
        }

        public function pause():void
        {
            this.paused = true;
            return;
        }

        public function get bytesTotal():uint
        {
            if (_cacheIsDirty) 
            {
                _calculateProgress();
            }
            return _cachedBytesTotal;
        }

        public function get content():*
        {
            return _content;
        }

        public function resume():void
        {
            this.paused = false;
            load(false);
            return;
        }

        public function get paused():Boolean
        {
            return Boolean(_status == com.greensock.loading.LoaderStatus.PAUSED);
        }

        protected function _calculateProgress():void
        {
            return;
        }

        public function cancel():void
        {
            if (_status == com.greensock.loading.LoaderStatus.LOADING) 
            {
                _dump(0, com.greensock.loading.LoaderStatus.READY);
            }
            return;
        }

        public function auditSize():void
        {
            return;
        }

        public function get progress():Number
        {
            return this.bytesTotal == 0 ? _status != com.greensock.loading.LoaderStatus.COMPLETED ? 0 : 1 : _cachedBytesLoaded / _cachedBytesTotal;
        }

        public function prioritize(arg1:Boolean=true):void
        {
            dispatchEvent(new flash.events.Event("prioritize"));
            if (arg1 && !(_status == com.greensock.loading.LoaderStatus.COMPLETED) && !(_status == com.greensock.loading.LoaderStatus.LOADING)) 
            {
                load(false);
            }
            return;
        }

        public function unload():void
        {
            _dump(1, com.greensock.loading.LoaderStatus.READY);
            return;
        }

        
        {
            _loaderCount = 0;
            _rootLookup = new flash.utils.Dictionary(false);
            _listenerTypes = {"onOpen":"open", "onInit":"init", "onComplete":"complete", "onProgress":"progress", "onCancel":"cancel", "onFail":"fail", "onError":"error", "onSecurityError":"securityError", "onHTTPStatus":"httpStatus", "onIOError":"ioError", "onScriptAccessDenied":"scriptAccessDenied", "onChildOpen":"childOpen", "onChildCancel":"childCancel", "onChildComplete":"childComplete", "onChildProgress":"childProgress", "onChildFail":"childFail"};
            _types = {};
            _extensions = {};
        }

        protected static function _activateClass(arg1:String, arg2:Class, arg3:String):Boolean
        {
            _types[arg1] = arg2;
            var loc1:*;
            var loc2:*=(loc1 = arg3.split(",")).length;
            while (--loc2 > -1) 
            {
                _extensions[loc1[loc2]] = arg2;
            }
            return true;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (arg1 != com.greensock.events.LoaderEvent.PROGRESS) 
            {
                if (arg1 == com.greensock.events.LoaderEvent.CHILD_PROGRESS && this is com.greensock.loading.LoaderMax) 
                {
                    _dispatchChildProgress = true;
                }
            }
            else 
            {
                _dispatchProgress = true;
            }
            super.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function set paused(arg1:Boolean):void
        {
            if (arg1 && !(_status == com.greensock.loading.LoaderStatus.PAUSED)) 
            {
                _prePauseStatus = _status;
                if (_status == com.greensock.loading.LoaderStatus.LOADING) 
                {
                    _dump(0, com.greensock.loading.LoaderStatus.PAUSED);
                }
                _status == com.greensock.loading.LoaderStatus.PAUSED;
            }
            else if (!arg1 && _status == com.greensock.loading.LoaderStatus.PAUSED) 
            {
                if (_prePauseStatus != com.greensock.loading.LoaderStatus.LOADING) 
                {
                    _status = _prePauseStatus || com.greensock.loading.LoaderStatus.READY;
                }
                else 
                {
                    load(false);
                }
            }
            return;
        }

        public function get bytesLoaded():uint
        {
            if (_cacheIsDirty) 
            {
                _calculateProgress();
            }
            return _cachedBytesLoaded;
        }

        protected function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            var loc2:*=null;
            _content = null;
            var loc1:*=Boolean(_status == com.greensock.loading.LoaderStatus.LOADING);
            if (_status == com.greensock.loading.LoaderStatus.PAUSED && !(arg2 == com.greensock.loading.LoaderStatus.PAUSED)) 
            {
                _prePauseStatus = arg2;
            }
            else if (_status != com.greensock.loading.LoaderStatus.DISPOSED) 
            {
                _status = arg2;
            }
            if (loc1) 
            {
                _time = flash.utils.getTimer() - _time;
            }
            if (_dispatchProgress && !arg3 && !(_status == com.greensock.loading.LoaderStatus.DISPOSED)) 
            {
                if (this is com.greensock.loading.LoaderMax) 
                {
                    _calculateProgress();
                }
                else 
                {
                    _cachedBytesLoaded = 0;
                }
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
            }
            if (loc1 && !arg3) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.CANCEL, this));
            }
            if (arg2 == com.greensock.loading.LoaderStatus.DISPOSED) 
            {
                if (!arg3) 
                {
                    dispatchEvent(new flash.events.Event("dispose"));
                }
                var loc3:*=0;
                var loc4:*=_listenerTypes;
                for (loc2 in loc4) 
                {
                    if (!(loc2 in this.vars)) 
                    {
                        continue;
                    }
                    this.removeEventListener(_listenerTypes[loc2], this.vars[loc2]);
                }
            }
            return;
        }

        protected function _load():void
        {
            return;
        }

        public static const version:Number=1.2;

        protected var _prePauseStatus:int;

        public var name:String;

        protected var _dispatchChildProgress:Boolean;

        protected var _type:String;

        protected var _auditedSize:Boolean;

        protected var _status:int;

        protected var _dispatchProgress:Boolean;

        public var vars:Object;

        protected var _cachedBytesTotal:uint;

        protected var _time:uint;

        protected var _content:*;

        protected var _rootLoader:com.greensock.loading.LoaderMax;

        protected var _cacheIsDirty:Boolean;

        protected static var _types:Object;

        protected static var _listenerTypes:Object;

        protected static var _isLocal:Boolean;

        protected var _cachedBytesLoaded:uint;

        public var autoDispose:Boolean;

        protected static var _globalRootLoader:com.greensock.loading.LoaderMax;

        protected static var _rootLookup:flash.utils.Dictionary;

        protected static var _loaderCount:uint=0;

        protected static var _extensions:Object;
    }
}


//          class LoaderItem
package com.greensock.loading.core 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import flash.events.*;
    import flash.net.*;
    
    public class LoaderItem extends com.greensock.loading.core.LoaderCore
    {
        public function LoaderItem(arg1:*, arg2:Object=null)
        {
            super(arg2);
            _request = arg1 is flash.net.URLRequest ? arg1 as flash.net.URLRequest : new flash.net.URLRequest(arg1);
            _url = _request.url;
            return;
        }

        public function get scriptAccessDenied():Boolean
        {
            return _scriptAccessDenied;
        }

        protected override function _failHandler(arg1:flash.events.Event):void
        {
            if ("alternateURL" in this.vars && !(_url == this.vars.alternateURL)) 
            {
                this.url = this.vars.alternateURL;
                _errorHandler(arg1);
            }
            else 
            {
                super._failHandler(arg1);
            }
            return;
        }

        public function get request():flash.net.URLRequest
        {
            return _request;
        }

        protected function _httpStatusHandler(arg1:flash.events.Event):void
        {
            _httpStatus = (arg1 as Object).status;
            dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.HTTP_STATUS, this));
            return;
        }

        protected override function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            _closeStream();
            super._dump(arg1, arg2, arg3);
            return;
        }

        protected function _closeStream():void
        {
            var loc1:*;
            if (_auditStream != null) 
            {
                _auditStream.removeEventListener(flash.events.ProgressEvent.PROGRESS, _auditStreamHandler);
                _auditStream.removeEventListener(flash.events.Event.COMPLETE, _auditStreamHandler);
                _auditStream.removeEventListener("ioError", _auditStreamHandler);
                _auditStream.removeEventListener("securityError", _auditStreamHandler);
                try 
                {
                    _auditStream.close();
                }
                catch (error:Error)
                {
                };
                _auditStream = null;
            }
            return;
        }

        public function get httpStatus():int
        {
            return _httpStatus;
        }

        public function set url(arg1:String):void
        {
            var loc1:*=false;
            if (_url != arg1) 
            {
                var loc2:*;
                _request.url = loc2 = arg1;
                _url = loc2;
                loc1 = Boolean(_status == com.greensock.loading.LoaderStatus.LOADING);
                _dump(0, com.greensock.loading.LoaderStatus.READY, true);
                if (loc1) 
                {
                    _load();
                }
            }
            return;
        }

        protected function _prepRequest():void
        {
            _scriptAccessDenied = false;
            _httpStatus = 0;
            _closeStream();
            if (this.vars.noCache && (!_isLocal || _url.substr(0, 4) == "http")) 
            {
                var loc1:*;
                _request.url = _url + (_url.indexOf("?") != -1 ? "&" : "?") + "cacheBusterID=" + _cacheID++;
            }
            return;
        }

        protected function _auditStreamHandler(arg1:flash.events.Event):void
        {
            if (arg1 is flash.events.ProgressEvent) 
            {
                _cachedBytesTotal = (arg1 as flash.events.ProgressEvent).bytesTotal;
                if (_preferEstimatedBytesInAudit && uint(this.vars.estimatedBytes) > _cachedBytesTotal) 
                {
                    _cachedBytesTotal = uint(this.vars.estimatedBytes);
                }
            }
            else if (arg1.type == "ioError" || arg1.type == "securityError") 
            {
                if ("alternateURL" in this.vars && !(_url == this.vars.alternateURL)) 
                {
                    var loc1:*;
                    _request.url = loc1 = this.vars.alternateURL;
                    _url = loc1;
                    _auditStream.load(_request);
                    _errorHandler(arg1);
                    return;
                }
                super._failHandler(arg1);
            }
            _auditedSize = true;
            _closeStream();
            dispatchEvent(new flash.events.Event("auditedSize"));
            return;
        }

        public function get url():String
        {
            return _url;
        }

        public override function auditSize():void
        {
            if (_auditStream == null) 
            {
                _auditStream = new flash.net.URLStream();
                _auditStream.addEventListener(flash.events.ProgressEvent.PROGRESS, _auditStreamHandler, false, 0, true);
                _auditStream.addEventListener(flash.events.Event.COMPLETE, _auditStreamHandler, false, 0, true);
                _auditStream.addEventListener("ioError", _auditStreamHandler, false, 0, true);
                _auditStream.addEventListener("securityError", _auditStreamHandler, false, 0, true);
                _auditStream.load(_request);
            }
            return;
        }

        
        {
            _cacheID = uint(Math.random() * 100000000) * int(Math.random() * 1000);
        }

        protected var _auditStream:flash.net.URLStream;

        protected var _request:flash.net.URLRequest;

        protected var _scriptAccessDenied:Boolean;

        protected var _url:String;

        protected var _preferEstimatedBytesInAudit:Boolean;

        protected var _httpStatus:int;

        protected static var _cacheID:uint;
    }
}


//        package display
//          class ContentDisplay
package com.greensock.loading.display 
{
    import com.greensock.loading.core.*;
    import flash.display.*;
    import flash.geom.*;
    
    public class ContentDisplay extends flash.display.Sprite
    {
        public function ContentDisplay(arg1:com.greensock.loading.core.LoaderItem)
        {
            super();
            this.loader = arg1;
            return;
        }

        public function set rawContent(arg1:*):void
        {
            var loc4:*=NaN;
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=null;
            var loc9:*=NaN;
            var loc10:*=NaN;
            if (!(_rawContent == null) && !(_rawContent == arg1) && _rawContent.parent == this) 
            {
                removeChild(_rawContent);
            }
            var loc11:*;
            _rawContent = loc11 = arg1 as flash.display.DisplayObject;
            var loc1:*=loc11;
            if (loc1 == null || _vars == null) 
            {
                return;
            }
            addChildAt(loc1, 0);
            var loc2:*=loc1.width;
            var loc3:*=loc1.height;
            if (_loader.hasOwnProperty("getClass") && !_loader.scriptAccessDenied) 
            {
                loc2 = loc1.loaderInfo.width;
                loc3 = loc1.loaderInfo.height;
            }
            if (_fitRect == null) 
            {
                loc1.x = _vars.centerRegistration ? (-loc2) / 2 : 0;
                loc1.y = _vars.centerRegistration ? (-loc3) / 2 : 0;
            }
            else 
            {
                loc4 = _fitRect.width;
                loc5 = _fitRect.height;
                loc6 = loc4 - loc2;
                loc7 = loc5 - loc3;
                if ((loc8 = _vars.scaleMode) != "none") 
                {
                    loc9 = loc4 / loc5;
                    if ((loc10 = loc2 / loc3) < loc9 && loc8 == "proportionalInside" || loc10 > loc9 && loc8 == "proportionalOutside") 
                    {
                        loc4 = loc5 * loc10;
                    }
                    if (loc10 > loc9 && loc8 == "proportionalInside" || loc10 < loc9 && loc8 == "proportionalOutside") 
                    {
                        loc5 = loc4 / loc10;
                    }
                    if (loc8 != "heightOnly") 
                    {
                        loc1.width = loc1.width * loc4 / loc2;
                        loc6 = _fitRect.width - loc4;
                    }
                    if (loc8 != "widthOnly") 
                    {
                        loc1.height = loc1.height * loc5 / loc3;
                        loc7 = _fitRect.height - loc5;
                    }
                }
                if (_vars.hAlign != "left") 
                {
                    if (_vars.hAlign != "right") 
                    {
                        loc6 = loc6 * 0.5;
                    }
                }
                else 
                {
                    loc6 = 0;
                }
                if (_vars.vAlign != "top") 
                {
                    if (_vars.vAlign != "bottom") 
                    {
                        loc7 = loc7 * 0.5;
                    }
                }
                else 
                {
                    loc7 = 0;
                }
                loc1.x = _fitRect.x;
                loc1.y = _fitRect.y;
                if (_vars.crop != true) 
                {
                    loc1.x = loc1.x + loc6;
                    loc1.y = loc1.y + loc7;
                }
                else 
                {
                    loc1.scrollRect = new flash.geom.Rectangle((-loc6) / loc1.scaleX, (-loc7) / loc1.scaleY, _fitRect.width / loc1.scaleX, _fitRect.height / loc1.scaleY);
                }
            }
            return;
        }

        public function set loader(arg1:com.greensock.loading.core.LoaderItem):void
        {
            var loc1:*=null;
            var loc2:*=null;
            _loader = arg1;
            if (_loader == null) 
            {
                return;
            }
            if (!_loader.hasOwnProperty("setContentDisplay")) 
            {
                throw new Error("Incompatible loader used for a ContentDisplay");
            }
            graphics.clear();
            _fitRect = null;
            _vars = _loader.vars;
            this.name = _loader.name;
            if (_vars.container is flash.display.DisplayObjectContainer) 
            {
                (_vars.container as flash.display.DisplayObjectContainer).addChild(this);
            }
            var loc3:*=0;
            var loc4:*=_transformProps;
            for (loc2 in loc4) 
            {
                if (!(loc2 in _vars)) 
                {
                    continue;
                }
                loc1 = typeof _transformProps[loc2];
                this[loc2] = loc1 != "number" ? loc1 != "string" ? Boolean(_vars[loc2]) : String(_vars[loc2]) : Number(_vars[loc2]);
            }
            if ("width" in _vars && "height" in _vars) 
            {
                _fitRect = new flash.geom.Rectangle(0, 0, Number(_vars.width), Number(_vars.height));
                _fitRect.x = _vars.centerRegistration ? (-_fitRect.width) / 2 : 0;
                _fitRect.y = _vars.centerRegistration ? (-_fitRect.height) / 2 : 0;
                graphics.beginFill("bgColor" in _vars ? uint(_vars.bgColor) : 16777215, "bgAlpha" in _vars ? Number(_vars.bgAlpha) : "bgColor" in _vars ? 1 : 0);
                graphics.drawRect(_fitRect.x, _fitRect.y, _fitRect.width, _fitRect.height);
                graphics.endFill();
            }
            if (_loader.content != this) 
            {
                (_loader as Object).setContentDisplay(this);
            }
            this.rawContent = (_loader as Object).rawContent;
            return;
        }

        public function get rawContent():*
        {
            return _rawContent;
        }

        public function get loader():com.greensock.loading.core.LoaderItem
        {
            return _loader;
        }

        public function dispose(arg1:Boolean=true, arg2:Boolean=true):void
        {
            if (this.parent != null) 
            {
                this.parent.removeChild(this);
            }
            this.rawContent = null;
            if (_loader != null) 
            {
                if (arg1) 
                {
                    _loader.unload();
                }
                if (arg2) 
                {
                    _loader.dispose(false);
                    _loader = null;
                }
            }
            return;
        }

        
        {
            _transformProps = {"x":1, "y":1, "scaleX":1, "scaleY":1, "rotation":1, "alpha":1, "visible":true, "blendMode":"normal"};
        }

        protected var _vars:Object;

        protected var _rawContent:flash.display.DisplayObject;

        protected var _loader:com.greensock.loading.core.LoaderItem;

        public var gcProtect:*;

        protected var _fitRect:flash.geom.Rectangle;

        protected static var _transformProps:Object;
    }
}


//        class DataLoader
package com.greensock.loading 
{
    import com.greensock.loading.core.*;
    import flash.events.*;
    import flash.net.*;
    
    public class DataLoader extends com.greensock.loading.core.LoaderItem
    {
        public function DataLoader(arg1:*, arg2:Object=null)
        {
            super(arg1, arg2);
            _type = "DataLoader";
            _loader = new flash.net.URLLoader(null);
            if ("format" in this.vars) 
            {
                _loader.dataFormat = String(this.vars.format);
            }
            _loader.addEventListener(flash.events.ProgressEvent.PROGRESS, _progressHandler, false, 0, true);
            _loader.addEventListener(flash.events.Event.COMPLETE, _receiveDataHandler, false, 0, true);
            _loader.addEventListener("ioError", _failHandler, false, 0, true);
            _loader.addEventListener("securityError", _failHandler, false, 0, true);
            _loader.addEventListener("httpStatus", _httpStatusHandler, false, 0, true);
            return;
        }

        protected override function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            var newStatus:int=0;
            var scrubLevel:int=0;
            var suppressEvents:Boolean=false;

            var loc1:*;
            scrubLevel = arg1;
            newStatus = arg2;
            suppressEvents = arg3;
            if (_status == com.greensock.loading.LoaderStatus.LOADING) 
            {
                try 
                {
                    _loader.close();
                }
                catch (error:Error)
                {
                };
            }
            super._dump(scrubLevel, newStatus, suppressEvents);
            return;
        }

        protected override function _load():void
        {
            _prepRequest();
            _loader.load(_request);
            return;
        }

        protected function _receiveDataHandler(arg1:flash.events.Event):void
        {
            _content = _loader.data;
            super._completeHandler(arg1);
            return;
        }

        
        {
            _classActivated = _activateClass("DataLoader", DataLoader, "txt,js");
        }

        protected var _loader:flash.net.URLLoader;

        internal static var _classActivated:Boolean;
    }
}


//        class LoaderMax
package com.greensock.loading 
{
    import com.greensock.events.*;
    import com.greensock.loading.core.*;
    import flash.events.*;
    import flash.utils.*;
    
    public class LoaderMax extends com.greensock.loading.core.LoaderCore
    {
        public function LoaderMax(arg1:Object=null)
        {
            var loc1:*=0;
            super(arg1);
            _type = "LoaderMax";
            _loaders = [];
            _activeLoaders = new flash.utils.Dictionary();
            this.skipFailed = Boolean(!(this.vars.skipFailed == false));
            this.skipPaused = Boolean(!(this.vars.skipPaused == false));
            this.maxConnections = "maxConnections" in this.vars ? uint(this.vars.maxConnections) : 2;
            if (this.vars.loaders is Array) 
            {
                loc1 = 0;
                while (loc1 < this.vars.loaders.length) 
                {
                    insert(this.vars.loaders[loc1], loc1);
                    ++loc1;
                }
            }
            return;
        }

        public override function get content():*
        {
            var loc1:*=[];
            var loc2:*=_loaders.length;
            while (--loc2 > -1) 
            {
                loc1[loc2] = com.greensock.loading.core.LoaderCore(_loaders[loc2]).content;
            }
            return loc1;
        }

        public static function getLoader(arg1:String):com.greensock.loading.core.LoaderCore
        {
            return _globalRootLoader == null ? null : _globalRootLoader.getLoader(arg1);
        }

        public function getContent(arg1:String):*
        {
            var loc1:*=this.getLoader(arg1);
            return loc1 == null ? null : loc1.content;
        }

        public function remove(arg1:com.greensock.loading.core.LoaderCore):void
        {
            _removeLoader(arg1, true);
            return;
        }

        protected override function _load():void
        {
            _loadNext(null);
            return;
        }

        protected function _cancelActiveLoaders():void
        {
            var loc2:*=null;
            var loc1:*=_loaders.length;
            while (--loc1 > -1) 
            {
                loc2 = _loaders[loc1];
                if (loc2.status != com.greensock.loading.LoaderStatus.LOADING) 
                {
                    continue;
                }
                delete _activeLoaders[loc2];
                _removeLoaderListeners(loc2, false);
                loc2.cancel();
            }
            return;
        }

        protected function _removeLoaderListeners(arg1:com.greensock.loading.core.LoaderCore, arg2:Boolean):void
        {
            var loc1:*=null;
            arg1.removeEventListener(com.greensock.events.LoaderEvent.COMPLETE, _loadNext);
            arg1.removeEventListener(com.greensock.events.LoaderEvent.CANCEL, _loadNext);
            if (arg2) 
            {
                arg1.removeEventListener(com.greensock.events.LoaderEvent.PROGRESS, _progressHandler);
                arg1.removeEventListener("prioritize", _prioritizeHandler);
                var loc2:*=0;
                var loc3:*=_listenerTypes;
                for (loc1 in loc3) 
                {
                    if (!(!(loc1 == "onProgress") && !(loc1 == "onInit"))) 
                    {
                        continue;
                    }
                    arg1.removeEventListener(_listenerTypes[loc1], _passThroughEvent);
                }
            }
            return;
        }

        protected function _disposeHandler(arg1:flash.events.Event):void
        {
            _removeLoader(com.greensock.loading.core.LoaderCore(arg1.target), false);
            return;
        }

        public function getChildIndex(arg1:com.greensock.loading.core.LoaderCore):uint
        {
            var loc1:*=_loaders.length;
            while (--loc1 > -1) 
            {
                if (_loaders[loc1] != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return 999999999;
        }

        public static function parse(arg1:*, arg2:Object=null):com.greensock.loading.core.LoaderCore
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            if (arg1 is Array) 
            {
                loc1 = new LoaderMax(arg2);
                loc2 = arg1.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    loc1.append(com.greensock.loading.LoaderMax.parse(arg1[loc3]));
                    ++loc3;
                }
                return loc1;
            }
            if (arg1 is String) 
            {
                loc4 = arg1.toLowerCase().split("?")[0];
                if ((loc4 = loc4.substr(loc4.lastIndexOf(".") + 1)) in _extensions) 
                {
                    return new _extensions[loc4](arg1, arg2);
                }
            }
            else if (arg1 is com.greensock.loading.core.LoaderCore) 
            {
                return arg1 as com.greensock.loading.core.LoaderCore;
            }
            throw new Error("LoaderMax could not parse " + arg1 + ". Don\'t forget to use LoaderMax.activate() to activate the necessary types of loaders.");
        }

        public function prepend(arg1:com.greensock.loading.core.LoaderCore):com.greensock.loading.core.LoaderCore
        {
            return insert(arg1, 0);
        }

        public function getLoader(arg1:String):*
        {
            var loc2:*=null;
            var loc1:*=_loaders.length;
            while (--loc1 > -1) 
            {
                loc2 = _loaders[loc1];
                if (loc2.name == arg1 || loc2 is com.greensock.loading.core.LoaderItem && (loc2 as com.greensock.loading.core.LoaderItem).url == arg1) 
                {
                    return loc2;
                }
                if (!loc2.hasOwnProperty("getLoader")) 
                {
                    continue;
                }
                loc2 = (loc2 as Object).getLoader(arg1) as com.greensock.loading.core.LoaderCore;
                if (loc2 == null) 
                {
                    continue;
                }
                return loc2;
            }
            return null;
        }

        public static function activate(arg1:Array):void
        {
            return;
        }

        public function prependURLs(arg1:String, arg2:Boolean=false):void
        {
            var loc1:*=getChildren(arg2, true);
            var loc2:*=loc1.length;
            while (--loc2 > -1) 
            {
                com.greensock.loading.core.LoaderItem(_loaders[loc2]).url = arg1 + com.greensock.loading.core.LoaderItem(_loaders[loc2]).url;
            }
            return;
        }

        protected override function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            var loc1:*=0;
            if (arg2 == com.greensock.loading.LoaderStatus.DISPOSED) 
            {
                _status = com.greensock.loading.LoaderStatus.DISPOSED;
                empty(true, Boolean(arg1 == 3));
                if (this.vars.requireWithRoot) 
                {
                    delete _rootLookup[this.vars.requireWithRoot];
                }
                _activeLoaders = null;
            }
            if (arg1 <= 1) 
            {
                _cancelActiveLoaders();
            }
            if (arg1 == 1) 
            {
                loc1 = _loaders.length;
                while (--loc1 > -1) 
                {
                    com.greensock.loading.core.LoaderCore(_loaders[loc1]).unload();
                }
            }
            super._dump(arg1, arg2, arg3);
            _cacheIsDirty = true;
            return;
        }

        public function empty(arg1:Boolean=true, arg2:Boolean=false):void
        {
            var loc1:*=_loaders.length;
            while (--loc1 > -1) 
            {
                if (arg1) 
                {
                    com.greensock.loading.core.LoaderCore(_loaders[loc1]).dispose(arg2);
                    continue;
                }
                if (arg2) 
                {
                    com.greensock.loading.core.LoaderCore(_loaders[loc1]).unload();
                    continue;
                }
                _removeLoader(_loaders[loc1], true);
            }
            return;
        }

        protected function _removeLoader(arg1:com.greensock.loading.core.LoaderCore, arg2:Boolean):void
        {
            if (arg1 == null) 
            {
                return;
            }
            if (arg2 && !(this == arg1.rootLoader)) 
            {
                arg1.rootLoader.append(arg1);
            }
            _removeLoaderListeners(arg1, true);
            _loaders.splice(getChildIndex(arg1), 1);
            if (arg1 in _activeLoaders) 
            {
                delete _activeLoaders[arg1];
                arg1.cancel();
                if (_status == com.greensock.loading.LoaderStatus.LOADING) 
                {
                    _loadNext(null);
                }
            }
            return;
        }

        protected function _loadNext(arg1:flash.events.Event=null):void
        {
            var loc1:*=false;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            if (arg1 != null) 
            {
                delete _activeLoaders[arg1.target];
                _removeLoaderListeners(com.greensock.loading.core.LoaderCore(arg1.target), false);
            }
            if (_status == com.greensock.loading.LoaderStatus.LOADING) 
            {
                loc1 = "auditSize" in this.vars ? Boolean(this.vars.auditSize) : com.greensock.loading.LoaderMax.defaultAuditSize;
                if (loc1 && !this.auditedSize) 
                {
                    _auditSize(null);
                    return;
                }
                loc3 = _loaders.length;
                loc4 = 0;
                _calculateProgress();
                loc5 = 0;
                while (loc5 < loc3) 
                {
                    loc2 = _loaders[loc5];
                    if (!this.skipPaused && loc2.status == com.greensock.loading.LoaderStatus.PAUSED) 
                    {
                        super._failHandler(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.FAIL, this, "Did not complete LoaderMax because skipPaused was false and " + loc2.toString() + " was paused."));
                        return;
                    }
                    if (!this.skipFailed && loc2.status == com.greensock.loading.LoaderStatus.FAILED) 
                    {
                        super._failHandler(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.FAIL, this, "Did not complete LoaderMax because skipFailed was false and " + loc2.toString() + " failed."));
                        return;
                    }
                    if (loc2.status <= com.greensock.loading.LoaderStatus.LOADING) 
                    {
                        ++loc4;
                        if (!(loc2 in _activeLoaders)) 
                        {
                            _activeLoaders[loc2] = true;
                            loc2.addEventListener(com.greensock.events.LoaderEvent.COMPLETE, _loadNext);
                            loc2.addEventListener(com.greensock.events.LoaderEvent.CANCEL, _loadNext);
                            loc2.load(false);
                        }
                        if (loc4 == this.maxConnections) 
                        {
                            break;
                        }
                    }
                    ++loc5;
                }
                if (loc4 == 0 && _cachedBytesLoaded == _cachedBytesTotal) 
                {
                    _completeHandler(null);
                }
            }
            return;
        }

        public function append(arg1:com.greensock.loading.core.LoaderCore):com.greensock.loading.core.LoaderCore
        {
            return insert(arg1, _loaders.length);
        }

        public static function prioritize(arg1:String, arg2:Boolean=true):com.greensock.loading.core.LoaderCore
        {
            var loc1:*=getLoader(arg1);
            if (loc1 != null) 
            {
                loc1.prioritize(arg2);
            }
            return loc1;
        }

        
        {
            defaultEstimatedBytes = 20000;
            defaultAuditSize = true;
        }

        protected override function _progressHandler(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (_dispatchProgress) 
            {
                loc1 = _cachedBytesLoaded;
                loc2 = _cachedBytesTotal;
                _calculateProgress();
                if ((!(_cachedBytesLoaded == _cachedBytesTotal) || !(_status == com.greensock.loading.LoaderStatus.LOADING)) && (!(loc1 == _cachedBytesLoaded) || !(loc2 == _cachedBytesTotal))) 
                {
                    dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
                }
            }
            else 
            {
                _cacheIsDirty = true;
            }
            if (_dispatchChildProgress) 
            {
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.CHILD_PROGRESS, arg1.target));
            }
            return;
        }

        protected function _prioritizeHandler(arg1:flash.events.Event):void
        {
            var loc2:*=0;
            var loc1:*=arg1.target as com.greensock.loading.core.LoaderCore;
            _loaders.splice(getChildIndex(loc1), 1);
            _loaders.unshift(loc1);
            if (_status == com.greensock.loading.LoaderStatus.LOADING && loc1.status <= com.greensock.loading.LoaderStatus.LOADING && !(loc1 in _activeLoaders)) 
            {
                _cancelActiveLoaders();
                loc2 = this.maxConnections;
                this.maxConnections = 1;
                _loadNext(null);
                this.maxConnections = loc2;
            }
            return;
        }

        public function get numChildren():uint
        {
            return _loaders.length;
        }

        public function replaceURLText(arg1:String, arg2:String, arg3:Boolean=false):void
        {
            var loc2:*=null;
            var loc1:*;
            var loc3:*=(loc1 = getChildren(arg3, true)).length;
            while (--loc3 > -1) 
            {
                loc2 = _loaders[loc3];
                loc2.url = loc2.url.split(arg1).join(arg2);
                if (!("alternateURL" in loc2.vars)) 
                {
                    continue;
                }
                loc2.vars.alternateURL = loc2.vars.alternateURL.split(arg1).join(arg2);
            }
            return;
        }

        public override function get auditedSize():Boolean
        {
            var loc1:*=this.skipPaused ? com.greensock.loading.LoaderStatus.COMPLETED : com.greensock.loading.LoaderStatus.PAUSED;
            var loc2:*=_loaders.length;
            while (--loc2 > -1) 
            {
                if (!(!com.greensock.loading.core.LoaderCore(_loaders[loc2]).auditedSize && com.greensock.loading.core.LoaderCore(_loaders[loc2]).status <= loc1)) 
                {
                    continue;
                }
                return false;
            }
            return true;
        }

        public override function get status():int
        {
            var loc1:*=null;
            var loc2:*=0;
            if (_status == com.greensock.loading.LoaderStatus.COMPLETED) 
            {
                loc1 = [0, 0, 0, 0, 0, 0];
                loc2 = _loaders.length;
                while (--loc2 > -1) 
                {
                    var loc3:*;
                    var loc4:*;
                    var loc5:*=((loc3 = loc1)[loc4 = com.greensock.loading.core.LoaderCore(_loaders[loc2]).status] + 1);
                    loc3[loc4] = loc5;
                }
                if (!this.skipFailed && !(loc1[4] == 0) || !this.skipPaused && !(loc1[3] == 0)) 
                {
                    _status = com.greensock.loading.LoaderStatus.FAILED;
                }
                else if (loc1[0] + loc1[1] != 0) 
                {
                    _status = com.greensock.loading.LoaderStatus.READY;
                    _cacheIsDirty = true;
                }
            }
            return _status;
        }

        protected override function _calculateProgress():void
        {
            var loc2:*=null;
            var loc3:*=0;
            _cachedBytesLoaded = 0;
            _cachedBytesTotal = 0;
            var loc1:*=_loaders.length;
            while (--loc1 > -1) 
            {
                loc2 = _loaders[loc1];
                loc3 = loc2.status;
                if (!(loc3 <= com.greensock.loading.LoaderStatus.COMPLETED || !this.skipPaused && loc3 == com.greensock.loading.LoaderStatus.PAUSED || !this.skipFailed && loc3 == com.greensock.loading.LoaderStatus.FAILED)) 
                {
                    continue;
                }
                _cachedBytesLoaded = _cachedBytesLoaded + loc2.bytesLoaded;
                _cachedBytesTotal = _cachedBytesTotal + loc2.bytesTotal;
            }
            _cacheIsDirty = false;
            return;
        }

        public function getChildren(arg1:Boolean=false, arg2:Boolean=false):Array
        {
            var loc1:*=[];
            var loc2:*=_loaders.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                if (!arg2 || !(_loaders[loc3] is com.greensock.loading.LoaderMax)) 
                {
                    loc1.push(_loaders[loc3]);
                }
                if (arg1 && _loaders[loc3].hasOwnProperty("getChildren")) 
                {
                    loc1 = loc1.concat(_loaders[loc3].getChildren(true, arg2));
                }
                ++loc3;
            }
            return loc1;
        }

        public function insert(arg1:com.greensock.loading.core.LoaderCore, arg2:uint=999999999):com.greensock.loading.core.LoaderCore
        {
            var loc1:*=null;
            if (arg1 == null || arg1 == this || _status == com.greensock.loading.LoaderStatus.DISPOSED) 
            {
                return null;
            }
            if (this != arg1.rootLoader) 
            {
                _removeLoader(arg1, false);
            }
            arg1.rootLoader.remove(arg1);
            if (arg2 > _loaders.length) 
            {
                arg2 = _loaders.length;
            }
            _loaders.splice(arg2, 0, arg1);
            if (this != _globalRootLoader) 
            {
                arg1.addEventListener(com.greensock.events.LoaderEvent.PROGRESS, _progressHandler, false, 0, true);
                arg1.addEventListener("prioritize", _prioritizeHandler, false, 0, true);
                var loc2:*=0;
                var loc3:*=_listenerTypes;
                for (loc1 in loc3) 
                {
                    if (!(!(loc1 == "onProgress") && !(loc1 == "onInit"))) 
                    {
                        continue;
                    }
                    arg1.addEventListener(_listenerTypes[loc1], _passThroughEvent, false, 0, true);
                }
            }
            arg1.addEventListener("dispose", _disposeHandler, false, 0, true);
            _cacheIsDirty = true;
            if (_status != com.greensock.loading.LoaderStatus.LOADING) 
            {
                if (_status == com.greensock.loading.LoaderStatus.PAUSED) 
                {
                    if (_prePauseStatus == com.greensock.loading.LoaderStatus.COMPLETED) 
                    {
                        _prePauseStatus = com.greensock.loading.LoaderStatus.READY;
                    }
                }
                else 
                {
                    _status = com.greensock.loading.LoaderStatus.READY;
                }
            }
            return arg1;
        }

        public override function auditSize():void
        {
            if (!this.auditedSize) 
            {
                _auditSize(null);
            }
            return;
        }

        protected function _auditSize(arg1:flash.events.Event=null):void
        {
            var loc3:*=null;
            var loc4:*=false;
            if (arg1 != null) 
            {
                arg1.target.removeEventListener("auditedSize", _auditSize);
            }
            var loc1:*=_loaders.length;
            var loc2:*=this.skipPaused ? com.greensock.loading.LoaderStatus.COMPLETED : com.greensock.loading.LoaderStatus.PAUSED;
            var loc5:*=0;
            while (loc5 < loc1) 
            {
                if (!(loc3 = _loaders[loc5]).auditedSize && loc3.status <= loc2) 
                {
                    if (!loc4) 
                    {
                        loc3.addEventListener("auditedSize", _auditSize, false, 0, true);
                    }
                    loc4 = true;
                    loc3.auditSize();
                }
                ++loc5;
            }
            if (!loc4) 
            {
                if (_status == com.greensock.loading.LoaderStatus.LOADING) 
                {
                    _loadNext(null);
                }
                dispatchEvent(new flash.events.Event("auditedSize"));
            }
            return;
        }

        public function getChildrenByStatus(arg1:int, arg2:Boolean=false):Array
        {
            var loc1:*=[];
            var loc2:*;
            var loc3:*=(loc2 = getChildren(arg2, false)).length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                if (com.greensock.loading.core.LoaderCore(loc2[loc4]).status == arg1) 
                {
                    loc1.push(loc2[loc4]);
                }
                ++loc4;
            }
            return loc1;
        }

        public static function getContent(arg1:String):*
        {
            return _globalRootLoader == null ? null : _globalRootLoader.getContent(arg1);
        }

        public static const version:Number=1.23;

        protected var _loaders:Array;

        public var skipPaused:Boolean;

        public var maxConnections:uint;

        protected var _activeLoaders:flash.utils.Dictionary;

        public var skipFailed:Boolean;

        public static var defaultEstimatedBytes:uint=20000;

        public static var defaultAuditSize:Boolean=true;

        public static var contentDisplayClass:Class;
    }
}


//        class LoaderStatus
package com.greensock.loading 
{
    public class LoaderStatus extends Object
    {
        public function LoaderStatus()
        {
            super();
            return;
        }

        public static const READY:int=0;

        public static const DISPOSED:int=5;

        public static const COMPLETED:int=2;

        public static const PAUSED:int=3;

        public static const LOADING:int=1;

        public static const FAILED:int=4;
    }
}


//        class SWFLoader
package com.greensock.loading 
{
    import com.greensock.events.*;
    import com.greensock.loading.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.media.*;
    import flash.utils.*;
    
    public class SWFLoader extends com.greensock.loading.core.DisplayObjectLoader
    {
        public function SWFLoader(arg1:*, arg2:Object=null)
        {
            super(arg1, arg2);
            _preferEstimatedBytesInAudit = true;
            _type = "SWFLoader";
            return;
        }

        public function getClass(arg1:String):Class
        {
            var loc2:*=null;
            var loc3:*=0;
            if (_content == null || _scriptAccessDenied) 
            {
                return null;
            }
            var loc1:*=_content.loaderInfo.applicationDomain.getDefinition(arg1);
            if (loc1 != null) 
            {
                return loc1 as Class;
            }
            if (_queue != null) 
            {
                loc2 = _queue.getChildren(true, true);
                loc3 = loc2.length;
                while (--loc3 > -1) 
                {
                    if (!(loc2[loc3] is SWFLoader)) 
                    {
                        continue;
                    }
                    loc1 = (loc2[loc3] as SWFLoader).getClass(arg1);
                    if (loc1 == null) 
                    {
                        continue;
                    }
                    return loc1 as Class;
                }
            }
            return null;
        }

        protected override function _determineScriptAccess():void
        {
            var mc:flash.display.DisplayObject;

            var loc1:*;
            mc = null;
            try 
            {
                mc = _loader.content;
            }
            catch (error:Error)
            {
                _scriptAccessDenied = true;
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.SCRIPT_ACCESS_DENIED, this, error.message));
                return;
            }
            if (_loader.content is flash.display.AVM1Movie) 
            {
                _scriptAccessDenied = true;
                dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.SCRIPT_ACCESS_DENIED, this, "AVM1Movie denies script access"));
            }
            return;
        }

        protected override function _load():void
        {
            if (_stealthMode) 
            {
                _stealthMode = false;
            }
            else if (_initted) 
            {
                if (_queue != null) 
                {
                    _changeQueueListeners(true);
                    _queue.load(false);
                }
            }
            else 
            {
                super._load();
            }
            return;
        }

        protected override function _passThroughEvent(arg1:flash.events.Event):void
        {
            if (arg1.target != _queue) 
            {
                super._passThroughEvent(arg1);
            }
            return;
        }

        protected override function _initHandler(arg1:flash.events.Event):void
        {
            var event:flash.events.Event;
            var className:String;
            var tempContent:flash.display.DisplayObject;
            var rslPreloader:Object;

            var loc1:*;
            tempContent = null;
            className = null;
            rslPreloader = null;
            event = arg1;
            if (_stealthMode) 
            {
                _initted = true;
                _dump(1, _status, true);
                return;
            }
            _hasRSL = false;
            try 
            {
                tempContent = _loader.content;
                className = flash.utils.getQualifiedClassName(tempContent);
                if (className.substr(-13) == "__Preloader__") 
                {
                    rslPreloader = tempContent["__rslPreloader"];
                    if (rslPreloader != null) 
                    {
                        className = flash.utils.getQualifiedClassName(rslPreloader);
                        if (className == "fl.rsl::RSLPreloader") 
                        {
                            _hasRSL = true;
                            _rslAddedCount = 0;
                            tempContent.addEventListener(flash.events.Event.ADDED, _rslAddedHandler);
                        }
                    }
                }
            }
            catch (error:Error)
            {
            };
            if (!_hasRSL) 
            {
                _init();
            }
            return;
        }

        public function getLoader(arg1:String):*
        {
            return _queue == null ? null : _queue.getLoader(arg1);
        }

        public function getContent(arg1:String):*
        {
            if (arg1 == this.name || arg1 == _url) 
            {
                return this.content;
            }
            var loc1:*=this.getLoader(arg1);
            return loc1 == null ? null : loc1.content;
        }

        protected override function _calculateProgress():void
        {
            _cachedBytesLoaded = _stealthMode ? 0 : _loader.contentLoaderInfo.bytesLoaded;
            _cachedBytesTotal = _loader.contentLoaderInfo.bytesTotal;
            if (_cachedBytesTotal < _cachedBytesLoaded || _initted) 
            {
                _cachedBytesTotal = _cachedBytesLoaded;
            }
            if (this.vars.integrateProgress != false) 
            {
                if (!(_queue == null) && (!("estimatedBytes" in this.vars) || _queue.auditedSize)) 
                {
                    if (_queue.status <= com.greensock.loading.LoaderStatus.COMPLETED) 
                    {
                        _cachedBytesLoaded = _cachedBytesLoaded + _queue.bytesLoaded;
                        _cachedBytesTotal = _cachedBytesTotal + _queue.bytesTotal;
                    }
                }
                else if (uint(this.vars.estimatedBytes) > _cachedBytesLoaded && (!_initted || !(_queue == null) && _queue.status <= com.greensock.loading.LoaderStatus.COMPLETED && !_queue.auditedSize)) 
                {
                    _cachedBytesTotal = uint(this.vars.estimatedBytes);
                }
            }
            if (_hasRSL && _content == null || !_initted && _cachedBytesLoaded == _cachedBytesTotal) 
            {
                _cachedBytesLoaded = int(_cachedBytesLoaded * 0.99);
            }
            _cacheIsDirty = false;
            return;
        }

        protected function _rslAddedHandler(arg1:flash.events.Event):void
        {
            if (arg1.target is flash.display.DisplayObject && arg1.currentTarget is flash.display.DisplayObjectContainer && arg1.target.parent == arg1.currentTarget) 
            {
                var loc1:*;
                _rslAddedCount++;
            }
            if (_rslAddedCount > 1) 
            {
                arg1.currentTarget.removeEventListener(flash.events.Event.ADDED, _rslAddedHandler);
                if (_status == com.greensock.loading.LoaderStatus.LOADING) 
                {
                    _content = arg1.target;
                    _init();
                    _calculateProgress();
                    dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
                    _completeHandler(null);
                }
            }
            return;
        }

        protected function _init():void
        {
            var loc1:*=null;
            _determineScriptAccess();
            if (_scriptAccessDenied) 
            {
                _content = _loader;
            }
            else 
            {
                if (!_hasRSL) 
                {
                    _content = _loader.content;
                }
                if (_content != null) 
                {
                    if (this.vars.autoPlay == false && _content is flash.display.MovieClip) 
                    {
                        loc1 = _content.soundTransform;
                        loc1.volume = 0;
                        _content.soundTransform = loc1;
                        _content.stop();
                    }
                    _checkRequiredLoaders();
                }
            }
            super._initHandler(null);
            return;
        }

        protected function _stopMovieClips(arg1:flash.display.DisplayObject):void
        {
            var loc1:*=arg1 as flash.display.MovieClip;
            if (loc1 == null) 
            {
                return;
            }
            loc1.stop();
            var loc2:*=loc1.numChildren;
            while (--loc2 > -1) 
            {
                _stopMovieClips(loc1.getChildAt(loc2));
            }
            return;
        }

        public function getChildren(arg1:Boolean=false, arg2:Boolean=false):Array
        {
            return _queue == null ? [] : _queue.getChildren(arg1, arg2);
        }

        public function getSWFChild(arg1:String):flash.display.DisplayObject
        {
            return !_scriptAccessDenied && _content is flash.display.DisplayObjectContainer ? flash.display.DisplayObjectContainer(_content).getChildByName(arg1) : null;
        }

        protected function _checkRequiredLoaders():void
        {
            if (_queue == null && !(this.vars.integrateProgress == false) && !_scriptAccessDenied) 
            {
                _queue = _rootLookup[_loader.content];
                if (_queue != null) 
                {
                    _changeQueueListeners(true);
                    _queue.load(false);
                    _cacheIsDirty = true;
                }
            }
            return;
        }

        protected override function _completeHandler(arg1:flash.events.Event=null):void
        {
            var loc1:*=null;
            _checkRequiredLoaders();
            _calculateProgress();
            if (this.progress == 1) 
            {
                if (!_scriptAccessDenied && this.vars.autoPlay == false && _content is flash.display.MovieClip) 
                {
                    loc1 = _content.soundTransform;
                    loc1.volume = 1;
                    _content.soundTransform = loc1;
                }
                _changeQueueListeners(false);
                super._determineScriptAccess();
                super._completeHandler(arg1);
            }
            return;
        }

        protected override function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            var loc1:*=undefined;
            if (_status == com.greensock.loading.LoaderStatus.LOADING && !_initted) 
            {
                _stealthMode = true;
                super._dump(arg1, arg2, arg3);
                return;
            }
            if (_initted && !_scriptAccessDenied && !(arg1 == 2)) 
            {
                _stopMovieClips(_loader.content);
                if (_loader.content in _rootLookup) 
                {
                    _queue = com.greensock.loading.LoaderMax(_rootLookup[_loader.content]);
                    _changeQueueListeners(false);
                    if (arg1 != 1) 
                    {
                        if (arg1 == 1) 
                        {
                            _queue.unload();
                        }
                        _queue.dispose();
                    }
                    else 
                    {
                        _queue.cancel();
                    }
                }
            }
            var loc2:*;
            _hasRSL = loc2 = false;
            _stealthMode = loc2;
            _cacheIsDirty = true;
            if (arg1 >= 1) 
            {
                _queue = null;
                _initted = false;
                super._dump(arg1, arg2, arg3);
            }
            else 
            {
                loc1 = _content;
                super._dump(arg1, arg2, arg3);
                _content = loc1;
            }
            return;
        }

        protected function _changeQueueListeners(arg1:Boolean):void
        {
            var loc1:*=null;
            if (_queue != null) 
            {
                if (arg1 && !(this.vars.integrateProgress == false)) 
                {
                    _queue.addEventListener(com.greensock.events.LoaderEvent.COMPLETE, _completeHandler, false, 0, true);
                    _queue.addEventListener(com.greensock.events.LoaderEvent.PROGRESS, _progressHandler, false, 0, true);
                    _queue.addEventListener(com.greensock.events.LoaderEvent.FAIL, _failHandler, false, 0, true);
                    var loc2:*=0;
                    var loc3:*=_listenerTypes;
                    for (loc1 in loc3) 
                    {
                        if (!(!(loc1 == "onProgress") && !(loc1 == "onInit"))) 
                        {
                            continue;
                        }
                        _queue.addEventListener(_listenerTypes[loc1], _passThroughEvent, false, 0, true);
                    }
                }
                else 
                {
                    _queue.removeEventListener(com.greensock.events.LoaderEvent.COMPLETE, _completeHandler);
                    _queue.removeEventListener(com.greensock.events.LoaderEvent.PROGRESS, _progressHandler);
                    _queue.removeEventListener(com.greensock.events.LoaderEvent.FAIL, _failHandler);
                    loc2 = 0;
                    loc3 = _listenerTypes;
                    for (loc1 in loc3) 
                    {
                        if (!(!(loc1 == "onProgress") && !(loc1 == "onInit"))) 
                        {
                            continue;
                        }
                        _queue.removeEventListener(_listenerTypes[loc1], _passThroughEvent);
                    }
                }
            }
            return;
        }

        protected override function _progressHandler(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (_status == com.greensock.loading.LoaderStatus.LOADING) 
            {
                if (_queue == null && _initted) 
                {
                    _checkRequiredLoaders();
                }
                if (_dispatchProgress) 
                {
                    loc1 = _cachedBytesLoaded;
                    loc2 = _cachedBytesTotal;
                    _calculateProgress();
                    if (!(_cachedBytesLoaded == _cachedBytesTotal) && (!(loc1 == _cachedBytesLoaded) || !(loc2 == _cachedBytesTotal))) 
                    {
                        dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
                    }
                }
                else 
                {
                    _cacheIsDirty = true;
                }
            }
            return;
        }

        
        {
            _classActivated = _activateClass("SWFLoader", SWFLoader, "swf");
        }

        protected var _hasRSL:Boolean;

        protected var _queue:com.greensock.loading.LoaderMax;

        protected var _rslAddedCount:uint;

        internal static var _classActivated:Boolean;
    }
}


//        class XMLLoader
package com.greensock.loading 
{
    import com.greensock.events.*;
    import com.greensock.loading.core.*;
    import flash.events.*;
    import flash.system.*;
    
    public class XMLLoader extends com.greensock.loading.DataLoader
    {
        public function XMLLoader(arg1:*, arg2:Object=null)
        {
            super(arg1, arg2);
            _preferEstimatedBytesInAudit = true;
            _type = "XMLLoader";
            _loader.dataFormat = "text";
            return;
        }

        public function getContent(arg1:String):*
        {
            if (arg1 == this.name || arg1 == _url) 
            {
                return _content;
            }
            var loc1:*=this.getLoader(arg1);
            return loc1 == null ? null : loc1.content;
        }

        protected override function _load():void
        {
            if (_initted) 
            {
                if (_loadingQueue != null) 
                {
                    _changeQueueListeners(true);
                    _loadingQueue.load(false);
                }
            }
            else 
            {
                _prepRequest();
                _loader.load(_request);
            }
            return;
        }

        public function getLoader(arg1:String):*
        {
            return _parsed == null ? null : _parsed.getLoader(arg1);
        }

        protected override function _passThroughEvent(arg1:flash.events.Event):void
        {
            if (arg1.target != _loadingQueue) 
            {
                super._passThroughEvent(arg1);
            }
            return;
        }

        public override function get progress():Number
        {
            return this.bytesTotal == 0 ? _status == com.greensock.loading.LoaderStatus.COMPLETED || _initted ? 1 : 0 : _cachedBytesLoaded / _cachedBytesTotal;
        }

        protected override function _completeHandler(arg1:flash.events.Event=null):void
        {
            _calculateProgress();
            if (this.progress == 1) 
            {
                _changeQueueListeners(false);
                super._completeHandler(arg1);
            }
            return;
        }

        public function getChildren(arg1:Boolean=false, arg2:Boolean=false):Array
        {
            return _parsed == null ? [] : _parsed.getChildren(arg1, arg2);
        }

        protected override function _dump(arg1:int=0, arg2:int=0, arg3:Boolean=false):void
        {
            if (_loadingQueue != null) 
            {
                _changeQueueListeners(false);
                if (arg1 != 0) 
                {
                    _loadingQueue.dispose(Boolean(arg1 == 3));
                    _loadingQueue = null;
                }
                else 
                {
                    _loadingQueue.cancel();
                }
            }
            if (arg1 >= 1) 
            {
                if (_parsed != null) 
                {
                    _parsed.dispose(Boolean(arg1 == 3));
                    _parsed = null;
                }
                _initted = false;
            }
            _cacheIsDirty = true;
            var loc1:*=_content;
            super._dump(arg1, arg2, arg3);
            if (arg1 == 0) 
            {
                _content = loc1;
            }
            return;
        }

        protected override function _calculateProgress():void
        {
            _cachedBytesLoaded = _loader.bytesLoaded;
            _cachedBytesTotal = _loader.bytesTotal;
            if (_cachedBytesTotal < _cachedBytesLoaded || _initted) 
            {
                _cachedBytesTotal = _cachedBytesLoaded;
            }
            if (this.vars.integrateProgress != false) 
            {
                if (!(_loadingQueue == null) && (!("estimatedBytes" in this.vars) || _loadingQueue.auditedSize)) 
                {
                    if (_loadingQueue.status <= com.greensock.loading.LoaderStatus.COMPLETED) 
                    {
                        _cachedBytesLoaded = _cachedBytesLoaded + _loadingQueue.bytesLoaded;
                        _cachedBytesTotal = _cachedBytesTotal + _loadingQueue.bytesTotal;
                    }
                }
                else if (uint(this.vars.estimatedBytes) > _cachedBytesLoaded && (!_initted || !(_loadingQueue == null) && _loadingQueue.status <= com.greensock.loading.LoaderStatus.COMPLETED && !_loadingQueue.auditedSize)) 
                {
                    _cachedBytesTotal = uint(this.vars.estimatedBytes);
                }
            }
            if (!_initted && _cachedBytesLoaded == _cachedBytesTotal) 
            {
                _cachedBytesLoaded = int(_cachedBytesLoaded * 0.99);
            }
            _cacheIsDirty = false;
            return;
        }

        protected override function _receiveDataHandler(arg1:flash.events.Event):void
        {
            var event:flash.events.Event;

            var loc1:*;
            event = arg1;
            try 
            {
                _content = new XML(_loader.data);
            }
            catch (error:Error)
            {
                _content = _loader.data;
                _failHandler(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.ERROR, this, error.message));
                return;
            }
            _initted = true;
            _loadingQueue = new com.greensock.loading.LoaderMax({"name":this.name + "_Queue"});
            _parsed = new com.greensock.loading.LoaderMax({"name":this.name + "_ParsedLoaders", "paused":true});
            parseLoaders(_content as XML, _parsed, _loadingQueue);
            if (_parsed.numChildren != 0) 
            {
                _parsed.auditSize();
            }
            else 
            {
                _parsed.dispose(false);
                _parsed = null;
            }
            if (_loadingQueue.getChildren(true, true).length != 0) 
            {
                _cacheIsDirty = true;
                _changeQueueListeners(true);
                _loadingQueue.load(false);
            }
            else 
            {
                _loadingQueue.empty(false);
                _loadingQueue.dispose(false);
                _loadingQueue = null;
            }
            dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.INIT, this));
            if (_loadingQueue == null || this.vars.integrateProgress == false) 
            {
                _completeHandler(event);
            }
            return;
        }

        protected function _changeQueueListeners(arg1:Boolean):void
        {
            var loc1:*=null;
            if (_loadingQueue != null) 
            {
                if (arg1 && !(this.vars.integrateProgress == false)) 
                {
                    _loadingQueue.addEventListener(com.greensock.events.LoaderEvent.COMPLETE, _completeHandler, false, 0, true);
                    _loadingQueue.addEventListener(com.greensock.events.LoaderEvent.PROGRESS, _progressHandler, false, 0, true);
                    _loadingQueue.addEventListener(com.greensock.events.LoaderEvent.FAIL, _failHandler, false, 0, true);
                    var loc2:*=0;
                    var loc3:*=_listenerTypes;
                    for (loc1 in loc3) 
                    {
                        if (!(!(loc1 == "onProgress") && !(loc1 == "onInit"))) 
                        {
                            continue;
                        }
                        _loadingQueue.addEventListener(_listenerTypes[loc1], _passThroughEvent, false, 0, true);
                    }
                }
                else 
                {
                    _loadingQueue.removeEventListener(com.greensock.events.LoaderEvent.COMPLETE, _completeHandler);
                    _loadingQueue.removeEventListener(com.greensock.events.LoaderEvent.PROGRESS, _progressHandler);
                    _loadingQueue.removeEventListener(com.greensock.events.LoaderEvent.FAIL, _failHandler);
                    loc2 = 0;
                    loc3 = _listenerTypes;
                    for (loc1 in loc3) 
                    {
                        if (!(!(loc1 == "onProgress") && !(loc1 == "onInit"))) 
                        {
                            continue;
                        }
                        _loadingQueue.removeEventListener(_listenerTypes[loc1], _passThroughEvent);
                    }
                }
            }
            return;
        }

        protected override function _progressHandler(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (_dispatchProgress) 
            {
                loc1 = _cachedBytesLoaded;
                loc2 = _cachedBytesTotal;
                _calculateProgress();
                if (!(_cachedBytesLoaded == _cachedBytesTotal) && (!(loc1 == _cachedBytesLoaded) || !(loc2 == _cachedBytesTotal))) 
                {
                    dispatchEvent(new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.PROGRESS, this));
                }
            }
            else 
            {
                _cacheIsDirty = true;
            }
            return;
        }

        protected static function _parseVars(arg1:XML):Object
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc7:*=null;
            var loc1:*={};
            var loc6:*=arg1.attributes();
            var loc8:*=0;
            var loc9:*=loc6;
            for each (loc7 in loc9) 
            {
                loc2 = loc7.name();
                loc4 = loc7.toString();
                if (loc2 != "url") 
                {
                    if (loc2 == "domain") 
                    {
                        loc1.context = new flash.system.LoaderContext(true, loc4 != "child" ? loc4 != "separate" ? flash.system.ApplicationDomain.currentDomain : new flash.system.ApplicationDomain() : new flash.system.ApplicationDomain(flash.system.ApplicationDomain.currentDomain), flash.system.SecurityDomain.currentDomain);
                        continue;
                    }
                }
                else 
                {
                    continue;
                }
                if ((loc3 = typeof _varTypes[loc2]) == "boolean") 
                {
                    loc1[loc2] = Boolean(loc4 == "true" || loc4 == "1");
                    continue;
                }
                if (loc3 == "number") 
                {
                    loc1[loc2] = Number(loc4);
                    continue;
                }
                loc1[loc2] = loc4;
            }
            return loc1;
        }

        public static function parseLoaders(arg1:XML, arg2:com.greensock.loading.LoaderMax, arg3:com.greensock.loading.LoaderMax=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc8:*=arg1.children();
            for each (loc6 in loc8) 
            {
                if ((loc3 = loc6.name()) == "LoaderMax") 
                {
                    loc2 = arg2.append(new com.greensock.loading.LoaderMax(_parseVars(loc6))) as com.greensock.loading.LoaderMax;
                    if (!(arg3 == null) && loc2.vars.load) 
                    {
                        arg3.append(loc2);
                    }
                    parseLoaders(loc6, loc2, arg3);
                    if ("replaceURLText" in loc2.vars) 
                    {
                        if ((loc4 = loc2.vars.replaceURLText.split(",")).length == 2) 
                        {
                            loc2.replaceURLText(loc4[0], loc4[1], false);
                        }
                    }
                    if ("prependURLs" in loc2.vars) 
                    {
                        loc2.prependURLs(loc2.vars.prependURLs, false);
                    }
                    continue;
                }
                if (loc3 in _types) 
                {
                    loc5 = _types[loc3];
                    loc1 = arg2.append(new loc5(loc6.@url, _parseVars(loc6)));
                    if (!(arg3 == null) && loc1.vars.load) 
                    {
                        arg3.append(loc1);
                    }
                }
                parseLoaders(loc6, arg2, arg3);
            }
            return;
        }

        
        {
            _classActivated = _activateClass("XMLLoader", XMLLoader, "xml,php,jsp,asp,cfm,cfml,aspx");
            _varTypes = {"skipFailed":true, "skipPaused":true, "paused":false, "load":false, "noCache":false, "maxConnections":2, "autoPlay":false, "autoDispose":false, "smoothing":false, "estimatedBytes":1, "x":1, "y":1, "width":1, "height":1, "scaleX":1, "scaleY":1, "rotation":1, "alpha":1, "visible":true, "bgColor":0, "bgAlpha":0, "deblocking":1, "repeat":1, "checkPolicyFile":false, "centerRegistration":false, "bufferTime":5, "volume":1, "bufferMode":false, "estimatedDuration":200, "crop":false};
        }

        protected var _initted:Boolean;

        protected var _parsed:com.greensock.loading.LoaderMax;

        protected var _loadingQueue:com.greensock.loading.LoaderMax;

        protected static var _varTypes:Object;

        internal static var _classActivated:Boolean;
    }
}


//    package mgs
//      package utils
//        class Events
package com.mgs.utils 
{
    import flash.events.*;
    import flash.utils.*;
    
    public class Events extends Object
    {
        public function Events()
        {
            super();
            return;
        }

        public static function addOneTimeListener(arg1:flash.events.IEventDispatcher, arg2:String, arg3:Function):void
        {
            addManyTimeListener(arg1, arg2, 1, arg3, null);
            return;
        }

        public static function addOneTimeListerner(arg1:flash.events.IEventDispatcher, arg2:String, arg3:Function):void
        {
            addOneTimeListener(arg1, arg2, arg3);
            return;
        }

        public static function addManyTimeListener(arg1:flash.events.IEventDispatcher, arg2:String, arg3:uint, arg4:Function, arg5:Function):void
        {
            var object:flash.events.IEventDispatcher;
            var eventType:String;
            var times:uint;
            var callback:Function;
            var onComplete:Function;
            var cleanup:Function;

            var loc1:*;
            cleanup = null;
            object = arg1;
            eventType = arg2;
            times = arg3;
            callback = arg4;
            onComplete = arg5;
            cleanup = function (arg1:flash.events.Event):void
            {
                callback(arg1);
                var loc1:*;
                var loc2:*;
                var loc3:*=((loc1 = _manyTimeListernerReferenceCount)[loc2 = cleanup] - 1);
                loc1[loc2] = loc3;
                if (_manyTimeListernerReferenceCount[cleanup] == 0) 
                {
                    if (onComplete != null) 
                    {
                        onComplete();
                    }
                    object.removeEventListener(eventType, cleanup);
                    delete _oneTimeListernerCleanupMethods[cleanup];
                    delete _manyTimeListernerReferenceCount[cleanup];
                }
                return;
            }
            _manyTimeListernerReferenceCount[cleanup] = times;
            _oneTimeListernerCleanupMethods[cleanup] = cleanup;
            object.addEventListener(eventType, cleanup);
            return;
        }

        
        {
            _oneTimeListernerCleanupMethods = new flash.utils.Dictionary();
            _manyTimeListernerReferenceCount = new flash.utils.Dictionary();
        }

        internal static var _oneTimeListernerCleanupMethods:flash.utils.Dictionary;

        internal static var _manyTimeListernerReferenceCount:flash.utils.Dictionary;
    }
}


//        class FileUtils
package com.mgs.utils 
{
    public class FileUtils extends Object
    {
        public function FileUtils()
        {
            super();
            return;
        }

        public static function getFileExtention(arg1:String):String
        {
            return arg1.substring(arg1.lastIndexOf(".") + 1, arg1.length);
        }
    }
}


//        class StringUtils
package com.mgs.utils 
{
    import __AS3__.vec.*;
    import flash.geom.*;
    
    public class StringUtils extends Object
    {
        public function StringUtils()
        {
            super();
            return;
        }

        public static function getBoolen(arg1:String):Boolean
        {
            var loc1:*=arg1.toLowerCase();
            switch (loc1) 
            {
                case "1":
                case "true":
                case "yes":
                {
                    return true;
                }
                case "0":
                case "false":
                case "no":
                {
                    return false;
                }
                default:
                {
                    Boolean(arg1);
                }
            }
            return false;
        }

        public static function formatAsTime(arg1:uint):String
        {
            var loc1:*=com.mgs.utils.Time.getHours(arg1, false);
            var loc2:*=com.mgs.utils.Time.getMins(arg1, true);
            var loc3:*=com.mgs.utils.Time.getSeconds(arg1, true);
            var loc4:*;
            return loc4 = (loc1 >= 10 ? String(loc1) : "0" + String(loc1)) + ":" + (loc2 >= 10 ? String(loc2) : "0" + String(loc2)) + ":" + (loc3 >= 10 ? String(loc3) : "0" + String(loc3));
        }

        public static function csvToVector_uint(arg1:String):__AS3__.vec.Vector.<uint>
        {
            var loc3:*=0;
            var loc1:*=new Vector.<uint>();
            var loc2:*=arg1.split(",");
            var loc4:*=0;
            var loc5:*=loc2;
            for each (loc3 in loc5) 
            {
                loc1.push(loc3);
            }
            return loc1;
        }

        public static function csvToVector_string(arg1:String):__AS3__.vec.Vector.<String>
        {
            var loc3:*=null;
            var loc1:*=new Vector.<String>();
            var loc2:*=arg1.split(",");
            var loc4:*=0;
            var loc5:*=loc2;
            for each (loc3 in loc5) 
            {
                loc1.push(loc3);
            }
            return loc1;
        }

        public static function chunk(arg1:String, arg2:uint):__AS3__.vec.Vector.<String>
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=null;
            var loc1:*=new Vector.<String>();
            if (arg2) 
            {
                loc2 = 0;
                loc3 = arg2;
                loc4 = 0;
                while (loc4 < arg1.length) 
                {
                    loc5 = arg1.slice(loc2, loc3);
                    loc1.push(loc5);
                    loc4 = loc4 + loc5.length;
                    loc2 = loc3;
                    loc3 = loc3 + arg2;
                }
            }
            return loc1;
        }

        public static function pointFromString(arg1:String):flash.geom.Point
        {
            var loc1:*=arg1.indexOf("x=");
            var loc2:*=arg1.indexOf(",");
            var loc3:*=arg1.indexOf("y=");
            var loc4:*=arg1.indexOf(")");
            var loc5:*=arg1.substring(loc1 + 2, loc2);
            var loc6:*=arg1.substring(loc3 + 2, loc4);
            var loc7:*=Number(loc5);
            var loc8:*=Number(loc6);
            return new flash.geom.Point(loc7, loc8);
        }

        public static function paddedNumberToString(arg1:Number, arg2:String, arg3:uint):String
        {
            if (arg2.length > 1) 
            {
                throw new Error("padding cannot be > 1 char");
            }
            var loc1:*=arg1.toString();
            var loc2:*="";
            var loc3:*=0;
            while (loc3 < arg3 - loc1.length) 
            {
                loc2 = loc2 + arg2;
                ++loc3;
            }
            return loc2 = loc2 + loc1;
        }
    }
}


//        class Time
package com.mgs.utils 
{
    public class Time extends Object
    {
        public function Time()
        {
            super();
            return;
        }

        internal static function squeezeTime(arg1:uint, arg2:uint, arg3:Boolean, arg4:uint):uint
        {
            var loc1:*=arg1 / arg2;
            if (arg3) 
            {
                return loc1 % arg4;
            }
            return loc1;
        }

        public static function getHours(arg1:uint, arg2:Boolean):uint
        {
            return squeezeTime(arg1, HORUS_IN_MS, arg2, CLOCK_HOURS);
        }

        public static function getMins(arg1:uint, arg2:Boolean):uint
        {
            return squeezeTime(arg1, MIN_IN_MS, arg2, CLOCK_MINS);
        }

        public static function getSeconds(arg1:uint, arg2:Boolean):uint
        {
            return squeezeTime(arg1, SEC_IN_MS, arg2, CLOCK_SECS);
        }

        internal static const CLOCK_HOURS:uint=24;

        internal static const CLOCK_MINS:uint=60;

        internal static const CLOCK_SECS:uint=60;

        internal static const CLOCK_MS:uint=1000;

        public static const HORUS_IN_MS:uint=CLOCK_MS * CLOCK_SECS * CLOCK_MINS;

        public static const MIN_IN_MS:uint=CLOCK_MS * CLOCK_SECS;

        public static const SEC_IN_MS:uint=CLOCK_MS;
    }
}


//    package orbis
//      package controller
//        class IController
package com.orbis.controller 
{
    public interface IController
    {
        function realPlayClicked():void;

        function demoPlayClicked():void;

        function cycleQuality():void;

        function showAbout(arg1:Boolean):void;

        function showError(arg1:String, arg2:Boolean, arg3:String):void;

        function isRealPlay():Boolean;

        function soundOn():Boolean;

        function isTurbo():Boolean;

        function isLoggedIn():Boolean;

        function toggleSound():void;

        function toggleTurbo():void;

        function setLoggedIn(arg1:Boolean):void;

        function setRealPlay(arg1:Boolean):void;

        function setQuality(arg1:String):void;

        function setGameVersion(arg1:String):void;

        function setPreloaderVersion(arg1:String):void;

        function setTopbarVersion(arg1:String):void;

        function errorOKClicked():void;

        function getSettings():void;

        function setSound(arg1:Boolean):void;

        function setTurbo(arg1:Boolean):void;

        function onBonusOKClicked():void;
    }
}


//      package ui
//        package topbar
//          class ITopBar
package com.orbis.ui.topbar 
{
    public interface ITopBar
    {
        function setController(arg1:Object):void;

        function showBalance(arg1:String):void;

        function showPaid(arg1:String):void;

        function showStake(arg1:String):void;

        function showFreeBets(arg1:String):void;

        function showBonusWin(arg1:String, arg2:*):void;

        function setBonusPercent(arg1:Number):void;

        function setGameVersion(arg1:String):void;

        function setTopbarVersion(arg1:String):void;

        function setPreloaderVersion(arg1:String):void;

        function show():void;

        function layout():void;

        function addMessage(arg1:String, arg2:Number, arg3:String):void;

        function getVersion():String;

        function setGameLogo(arg1:String):void;

        function setTime(arg1:String, arg2:String):void;

        function updateStopWatch(arg1:Number):void;

        function setupButtons():void;

        function hideDialog(arg1:String):void;

        function setLoggedIn(arg1:Boolean):void;

        function setRealPlay(arg1:Boolean):void;

        function showError(arg1:String, arg2:Boolean, arg3:String):void;

        function hideBonusWin():void;

        function hideDemoRealDialogs():void;

        function getSettings():void;

        function updateSetting(arg1:String, arg2:*):void;

        function showAbout(arg1:Boolean):void;

        function setSound(arg1:Boolean):void;

        function setTurbo(arg1:Boolean):void;

        function showRealDemoDialogs():void;
    }
}


//  package deng
//    package fzip
//      class FZip
package deng.fzip 
{
    import flash.events.*;
    import flash.net.*;
    import flash.utils.*;
    
    public class FZip extends flash.events.EventDispatcher
    {
        public function FZip(arg1:String="utf-8")
        {
            super();
            this.charEncoding = arg1;
            this.parseFunc = this.parseIdle;
            return;
        }

        protected function parseLocalfile(arg1:flash.utils.IDataInput):Boolean
        {
            if (this.currentFile.parse(arg1)) 
            {
                if (this.currentFile.hasDataDescriptor) 
                {
                    this.parseFunc = this.findDataDescriptor;
                    this.ddBuffer = new flash.utils.ByteArray();
                    this.ddSignature = 0;
                    this.ddCompressedSize = 0;
                    return true;
                }
                this.onFileLoaded();
                if (this.parseFunc != this.parseIdle) 
                {
                    this.parseFunc = this.parseSignature;
                    return true;
                }
            }
            return false;
        }

        protected function findDataDescriptor(arg1:flash.utils.IDataInput):Boolean
        {
            var loc1:*=0;
            while (arg1.bytesAvailable > 0) 
            {
                loc1 = arg1.readUnsignedByte();
                this.ddSignature = this.ddSignature >>> 8 | loc1 << 24;
                if (this.ddSignature == SIG_DATA_DESCRIPTOR) 
                {
                    this.ddBuffer.length = this.ddBuffer.length - 3;
                    this.parseFunc = this.validateDataDescriptor;
                    return true;
                }
                this.ddBuffer.writeByte(loc1);
            }
            return false;
        }

        protected function validateDataDescriptor(arg1:flash.utils.IDataInput):Boolean
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            if (arg1.bytesAvailable >= 12) 
            {
                loc1 = arg1.readUnsignedInt();
                loc2 = arg1.readUnsignedInt();
                loc3 = arg1.readUnsignedInt();
                if (this.ddBuffer.length != loc2) 
                {
                    this.ddBuffer.writeUnsignedInt(loc1);
                    this.ddBuffer.writeUnsignedInt(loc2);
                    this.ddBuffer.writeUnsignedInt(loc3);
                    this.parseFunc = this.findDataDescriptor;
                }
                else 
                {
                    this.ddBuffer.position = 0;
                    this.currentFile._crc32 = loc1;
                    this.currentFile._sizeCompressed = loc2;
                    this.currentFile._sizeUncompressed = loc3;
                    this.currentFile.parseContent(this.ddBuffer);
                    this.onFileLoaded();
                    this.parseFunc = this.parseSignature;
                }
                return true;
            }
            return false;
        }

        protected function onFileLoaded():void
        {
            this.filesList.push(this.currentFile);
            if (this.currentFile.filename) 
            {
                this.filesDict[this.currentFile.filename] = this.currentFile;
            }
            dispatchEvent(new deng.fzip.FZipEvent(deng.fzip.FZipEvent.FILE_LOADED, this.currentFile));
            this.currentFile = null;
            return;
        }

        public function get active():Boolean
        {
            return !(this.parseFunc === this.parseIdle);
        }

        protected function progressHandler(arg1:flash.events.Event):void
        {
            var evt:flash.events.Event;

            var loc1:*;
            evt = arg1;
            dispatchEvent(evt.clone());
            try 
            {
                if (this.parse(this.urlStream)) 
                {
                    this.close();
                    dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
                }
            }
            catch (e:Error)
            {
                close();
                if (hasEventListener(deng.fzip.FZipErrorEvent.PARSE_ERROR)) 
                {
                    dispatchEvent(new deng.fzip.FZipErrorEvent(deng.fzip.FZipErrorEvent.PARSE_ERROR, e.message));
                }
                else 
                {
                    throw e;
                }
            }
            return;
        }

        protected function defaultHandler(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1.clone());
            return;
        }

        protected function defaultErrorHandler(arg1:flash.events.Event):void
        {
            this.close();
            dispatchEvent(arg1.clone());
            return;
        }

        protected function addEventHandlers():void
        {
            this.urlStream.addEventListener(flash.events.Event.COMPLETE, this.defaultHandler);
            this.urlStream.addEventListener(flash.events.Event.OPEN, this.defaultHandler);
            this.urlStream.addEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.defaultHandler);
            this.urlStream.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.defaultErrorHandler);
            this.urlStream.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.defaultErrorHandler);
            this.urlStream.addEventListener(flash.events.ProgressEvent.PROGRESS, this.progressHandler);
            return;
        }

        protected function removeEventHandlers():void
        {
            this.urlStream.removeEventListener(flash.events.Event.COMPLETE, this.defaultHandler);
            this.urlStream.removeEventListener(flash.events.Event.OPEN, this.defaultHandler);
            this.urlStream.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.defaultHandler);
            this.urlStream.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.defaultErrorHandler);
            this.urlStream.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.defaultErrorHandler);
            this.urlStream.removeEventListener(flash.events.ProgressEvent.PROGRESS, this.progressHandler);
            return;
        }

        public function load(arg1:flash.net.URLRequest):void
        {
            if (!this.urlStream && this.parseFunc == this.parseIdle) 
            {
                this.urlStream = new flash.net.URLStream();
                this.urlStream.endian = flash.utils.Endian.LITTLE_ENDIAN;
                this.addEventHandlers();
                this.filesList = [];
                this.filesDict = new flash.utils.Dictionary();
                this.parseFunc = this.parseSignature;
                this.urlStream.load(arg1);
            }
            return;
        }

        public function loadBytes(arg1:flash.utils.ByteArray):void
        {
            if (!this.urlStream && this.parseFunc == this.parseIdle) 
            {
                this.filesList = [];
                this.filesDict = new flash.utils.Dictionary();
                arg1.position = 0;
                arg1.endian = flash.utils.Endian.LITTLE_ENDIAN;
                this.parseFunc = this.parseSignature;
                if (this.parse(arg1)) 
                {
                    this.parseFunc = this.parseIdle;
                    dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
                }
                else 
                {
                    dispatchEvent(new deng.fzip.FZipErrorEvent(deng.fzip.FZipErrorEvent.PARSE_ERROR, "EOF"));
                }
            }
            return;
        }

        public function close():void
        {
            if (this.urlStream) 
            {
                this.parseFunc = this.parseIdle;
                this.removeEventHandlers();
                this.urlStream.close();
                this.urlStream = null;
            }
            return;
        }

        public function serialize(arg1:flash.utils.IDataOutput, arg2:Boolean=false):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=null;
            if (!(arg1 == null) && this.filesList.length > 0) 
            {
                loc1 = arg1.endian;
                loc2 = new flash.utils.ByteArray();
                var loc7:*;
                loc2.endian = loc7 = flash.utils.Endian.LITTLE_ENDIAN;
                arg1.endian = loc7;
                loc3 = 0;
                loc4 = 0;
                loc5 = 0;
                while (loc5 < this.filesList.length) 
                {
                    if ((loc6 = this.filesList[loc5] as deng.fzip.FZipFile) != null) 
                    {
                        loc6.serialize(loc2, arg2, true, loc3);
                        loc3 = loc3 + loc6.serialize(arg1, arg2);
                        ++loc4;
                    }
                    ++loc5;
                }
                if (loc2.length > 0) 
                {
                    arg1.writeBytes(loc2);
                }
                arg1.writeUnsignedInt(SIG_END_OF_CENTRAL_DIRECTORY);
                arg1.writeShort(0);
                arg1.writeShort(0);
                arg1.writeShort(loc4);
                arg1.writeShort(loc4);
                arg1.writeUnsignedInt(loc2.length);
                arg1.writeUnsignedInt(loc3);
                arg1.writeShort(0);
                arg1.endian = loc1;
            }
            return;
        }

        public function getFileCount():uint
        {
            return this.filesList ? this.filesList.length : 0;
        }

        public function getFileAt(arg1:uint):deng.fzip.FZipFile
        {
            return this.filesList ? this.filesList[arg1] as deng.fzip.FZipFile : null;
        }

        public function getFileByName(arg1:String):deng.fzip.FZipFile
        {
            return this.filesDict[arg1] ? this.filesDict[arg1] as deng.fzip.FZipFile : null;
        }

        public function addFile(arg1:String, arg2:flash.utils.ByteArray=null, arg3:Boolean=true):deng.fzip.FZipFile
        {
            return this.addFileAt(this.filesList ? this.filesList.length : 0, arg1, arg2, arg3);
        }

        public function addFileFromString(arg1:String, arg2:String, arg3:String="utf-8", arg4:Boolean=true):deng.fzip.FZipFile
        {
            return this.addFileFromStringAt(this.filesList ? this.filesList.length : 0, arg1, arg2, arg3, arg4);
        }

        public function addFileAt(arg1:uint, arg2:String, arg3:flash.utils.ByteArray=null, arg4:Boolean=true):deng.fzip.FZipFile
        {
            if (this.filesList == null) 
            {
                this.filesList = [];
            }
            if (this.filesDict != null) 
            {
                if (this.filesDict[arg2]) 
                {
                    throw new Error("File already exists: " + arg2 + ". Please remove first.");
                }
            }
            else 
            {
                this.filesDict = new flash.utils.Dictionary();
            }
            var loc1:*;
            (loc1 = new deng.fzip.FZipFile()).filename = arg2;
            loc1.setContent(arg3, arg4);
            if (arg1 >= this.filesList.length) 
            {
                this.filesList.push(loc1);
            }
            else 
            {
                this.filesList.splice(arg1, 0, loc1);
            }
            this.filesDict[arg2] = loc1;
            return loc1;
        }

        public function addFileFromStringAt(arg1:uint, arg2:String, arg3:String, arg4:String="utf-8", arg5:Boolean=true):deng.fzip.FZipFile
        {
            if (this.filesList == null) 
            {
                this.filesList = [];
            }
            if (this.filesDict != null) 
            {
                if (this.filesDict[arg2]) 
                {
                    throw new Error("File already exists: " + arg2 + ". Please remove first.");
                }
            }
            else 
            {
                this.filesDict = new flash.utils.Dictionary();
            }
            var loc1:*;
            (loc1 = new deng.fzip.FZipFile()).filename = arg2;
            loc1.setContentAsString(arg3, arg4, arg5);
            if (arg1 >= this.filesList.length) 
            {
                this.filesList.push(loc1);
            }
            else 
            {
                this.filesList.splice(arg1, 0, loc1);
            }
            this.filesDict[arg2] = loc1;
            return loc1;
        }

        public function removeFileAt(arg1:uint):deng.fzip.FZipFile
        {
            var loc1:*=null;
            if (!(this.filesList == null) && !(this.filesDict == null) && arg1 < this.filesList.length) 
            {
                loc1 = this.filesList[arg1] as deng.fzip.FZipFile;
                if (loc1 != null) 
                {
                    this.filesList.splice(arg1, 1);
                    delete this.filesDict[loc1.filename];
                    return loc1;
                }
            }
            return null;
        }

        protected function parse(arg1:flash.utils.IDataInput):Boolean
        {
            do 
            {
            }
            while (this.parseFunc(arg1));
            return this.parseFunc === this.parseIdle;
        }

        protected function parseIdle(arg1:flash.utils.IDataInput):Boolean
        {
            return false;
        }

        protected function parseSignature(arg1:flash.utils.IDataInput):Boolean
        {
            var loc1:*=0;
            if (arg1.bytesAvailable >= 4) 
            {
                loc1 = arg1.readUnsignedInt();
                var loc2:*=loc1;
                switch (loc2) 
                {
                    case SIG_LOCAL_FILE_HEADER:
                    {
                        this.parseFunc = this.parseLocalfile;
                        this.currentFile = new deng.fzip.FZipFile(this.charEncoding);
                        break;
                    }
                    case SIG_CENTRAL_FILE_HEADER:
                    case SIG_END_OF_CENTRAL_DIRECTORY:
                    case SIG_SPANNING_MARKER:
                    case SIG_DIGITAL_SIGNATURE:
                    case SIG_ZIP64_END_OF_CENTRAL_DIRECTORY:
                    case SIG_ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR:
                    case SIG_DATA_DESCRIPTOR:
                    case SIG_ARCHIVE_EXTRA_DATA:
                    case SIG_SPANNING:
                    {
                        this.parseFunc = this.parseIdle;
                        break;
                    }
                    default:
                    {
                        throw new Error("Unknown record signature: 0x" + loc1.toString(16));
                    }
                }
                return true;
            }
            return false;
        }

        static const SIG_CENTRAL_FILE_HEADER:uint=33639248;

        static const SIG_SPANNING_MARKER:uint=808471376;

        static const SIG_LOCAL_FILE_HEADER:uint=67324752;

        static const SIG_DIGITAL_SIGNATURE:uint=84233040;

        static const SIG_END_OF_CENTRAL_DIRECTORY:uint=101010256;

        static const SIG_ZIP64_END_OF_CENTRAL_DIRECTORY:uint=101075792;

        static const SIG_ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR:uint=117853008;

        static const SIG_DATA_DESCRIPTOR:uint=134695760;

        static const SIG_ARCHIVE_EXTRA_DATA:uint=134630224;

        static const SIG_SPANNING:uint=134695760;

        protected var filesList:Array;

        protected var filesDict:flash.utils.Dictionary;

        protected var urlStream:flash.net.URLStream;

        protected var charEncoding:String;

        protected var currentFile:deng.fzip.FZipFile;

        protected var ddBuffer:flash.utils.ByteArray;

        protected var ddSignature:uint;

        protected var ddCompressedSize:uint;

        protected var parseFunc:Function;
    }
}


//      class FZipErrorEvent
package deng.fzip 
{
    import flash.events.*;
    
    public class FZipErrorEvent extends flash.events.Event
    {
        public function FZipErrorEvent(arg1:String, arg2:String="", arg3:Boolean=false, arg4:Boolean=false)
        {
            this.text = arg2;
            super(arg1, arg3, arg4);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new deng.fzip.FZipErrorEvent(type, this.text, bubbles, cancelable);
        }

        public static const PARSE_ERROR:String="parseError";

        public var text:String;
    }
}


//      class FZipEvent
package deng.fzip 
{
    import flash.events.*;
    
    public class FZipEvent extends flash.events.Event
    {
        public function FZipEvent(arg1:String, arg2:deng.fzip.FZipFile=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            this.file = arg2;
            super(arg1, arg3, arg4);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new deng.fzip.FZipEvent(type, this.file, bubbles, cancelable);
        }

        public override function toString():String
        {
            return "[FZipEvent type=\"" + type + "\" filename=\"" + this.file.filename + "\" bubbles=" + bubbles + " cancelable=" + cancelable + " eventPhase=" + eventPhase + "]";
        }

        public static const FILE_LOADED:String="fileLoaded";

        public var file:deng.fzip.FZipFile;
    }
}


//      class FZipFile
package deng.fzip 
{
    import deng.utils.*;
    import flash.utils.*;
    
    public class FZipFile extends Object
    {
        public function FZipFile(arg1:String="utf-8")
        {
            this.parseFunc = this.parseFileHead;
            super();
            this._filenameEncoding = arg1;
            this._extraFields = new flash.utils.Dictionary();
            this._content = new flash.utils.ByteArray();
            this._content.endian = flash.utils.Endian.BIG_ENDIAN;
            return;
        }

        public function get filename():String
        {
            return this._filename;
        }

        public function set filename(arg1:String):void
        {
            this._filename = arg1;
            return;
        }

        function get hasDataDescriptor():Boolean
        {
            return this._hasDataDescriptor;
        }

        public function get content():flash.utils.ByteArray
        {
            if (this.isCompressed) 
            {
                this.uncompress();
            }
            return this._content;
        }

        public function set content(arg1:flash.utils.ByteArray):void
        {
            this.setContent(arg1);
            return;
        }

        
        {
            var loc2:*=0;
            var loc3:*=flash.utils.describeType(flash.utils.ByteArray).factory.method;
            var loc1:*=new XMLList("");
            for each (var loc4:* in loc3) 
            {
                var loc5:*;
                with (loc5 = loc4) 
                {
                    if (@name == "uncompress") 
                    {
                        loc1[loc2] = loc4;
                    }
                }
            }
            HAS_UNCOMPRESS = loc1.parameter.length() > 0;
            loc2 = 0;
            loc3 = flash.utils.describeType(flash.utils.ByteArray).factory.method;
            loc1 = new XMLList("");
            for each (loc4 in loc3) 
            {
                with (loc5 = loc4) 
                {
                    if (@name == "inflate") 
                    {
                        loc1[loc2] = loc4;
                    }
                }
            }
            HAS_INFLATE = loc1.length() > 0;
        }

        public function get versionNumber():String
        {
            return this._versionNumber;
        }

        protected function parseFileIdle(arg1:flash.utils.IDataInput):Boolean
        {
            return false;
        }

        public function get sizeCompressed():uint
        {
            return this._sizeCompressed;
        }

        public function get sizeUncompressed():uint
        {
            return this._sizeUncompressed;
        }

        public function getContentAsString(arg1:Boolean=true, arg2:String="utf-8"):String
        {
            var loc1:*=null;
            if (this.isCompressed) 
            {
                this.uncompress();
            }
            this._content.position = 0;
            if (arg2 != "utf-8") 
            {
                loc1 = this._content.readMultiByte(this._content.bytesAvailable, arg2);
            }
            else 
            {
                loc1 = this._content.readUTFBytes(this._content.bytesAvailable);
            }
            this._content.position = 0;
            if (arg1) 
            {
                this.compress();
            }
            return loc1;
        }

        public function setContentAsString(arg1:String, arg2:String="utf-8", arg3:Boolean=true):void
        {
            this._content.length = 0;
            this._content.position = 0;
            this.isCompressed = false;
            if (!(arg1 == null) && arg1.length > 0) 
            {
                if (arg2 != "utf-8") 
                {
                    this._content.writeMultiByte(arg1, arg2);
                }
                else 
                {
                    this._content.writeUTFBytes(arg1);
                }
                this._crc32 = deng.utils.ChecksumUtil.CRC32(this._content);
                this._hasAdler32 = false;
            }
            if (arg3) 
            {
                this.compress();
            }
            else 
            {
                var loc1:*;
                this._sizeCompressed = loc1 = this._content.length;
                this._sizeUncompressed = loc1;
            }
            return;
        }

        public function serialize(arg1:flash.utils.IDataOutput, arg2:Boolean, arg3:Boolean=false, arg4:uint=0):uint
        {
            var loc6:*=null;
            var loc11:*=null;
            var loc12:*=false;
            if (arg1 == null) 
            {
                return 0;
            }
            if (arg3) 
            {
                arg1.writeUnsignedInt(deng.fzip.FZip.SIG_CENTRAL_FILE_HEADER);
                arg1.writeShort(this._versionHost << 8 | 20);
            }
            else 
            {
                arg1.writeUnsignedInt(deng.fzip.FZip.SIG_LOCAL_FILE_HEADER);
            }
            arg1.writeShort(this._versionHost << 8 | 20);
            arg1.writeShort(this._filenameEncoding != "utf-8" ? 0 : 2048);
            arg1.writeShort(this.isCompressed ? COMPRESSION_DEFLATED : COMPRESSION_NONE);
            var loc1:*=this._date == null ? new Date() : this._date;
            var loc2:*=uint(loc1.getSeconds()) | uint(loc1.getMinutes()) << 5 | uint(loc1.getHours()) << 11;
            var loc3:*=uint(loc1.getDate()) | uint(loc1.getMonth() + 1) << 5 | uint(loc1.getFullYear() - 1980) << 9;
            arg1.writeShort(loc2);
            arg1.writeShort(loc3);
            arg1.writeUnsignedInt(this._crc32);
            arg1.writeUnsignedInt(this._sizeCompressed);
            arg1.writeUnsignedInt(this._sizeUncompressed);
            var loc4:*;
            (loc4 = new flash.utils.ByteArray()).endian = flash.utils.Endian.LITTLE_ENDIAN;
            if (this._filenameEncoding != "utf-8") 
            {
                loc4.writeMultiByte(this._filename, this._filenameEncoding);
            }
            else 
            {
                loc4.writeUTFBytes(this._filename);
            }
            var loc5:*=loc4.position;
            var loc13:*=0;
            var loc14:*=this._extraFields;
            for (loc6 in loc14) 
            {
                if ((loc11 = this._extraFields[loc6] as flash.utils.ByteArray) == null) 
                {
                    continue;
                }
                loc4.writeShort(uint(loc6));
                loc4.writeShort(uint(loc11.length));
                loc4.writeBytes(loc11);
            }
            if (arg2) 
            {
                if (!this._hasAdler32) 
                {
                    if (loc12 = this.isCompressed) 
                    {
                        this.uncompress();
                    }
                    this._adler32 = deng.utils.ChecksumUtil.Adler32(this._content, 0, this._content.length);
                    this._hasAdler32 = true;
                    if (loc12) 
                    {
                        this.compress();
                    }
                }
                loc4.writeShort(56026);
                loc4.writeShort(4);
                loc4.writeUnsignedInt(this._adler32);
            }
            var loc7:*=loc4.position - loc5;
            if (arg3 && this._comment.length > 0) 
            {
                if (this._filenameEncoding != "utf-8") 
                {
                    loc4.writeMultiByte(this._comment, this._filenameEncoding);
                }
                else 
                {
                    loc4.writeUTFBytes(this._comment);
                }
            }
            var loc8:*=loc4.position - loc5 - loc7;
            arg1.writeShort(loc5);
            arg1.writeShort(loc7);
            if (arg3) 
            {
                arg1.writeShort(loc8);
                arg1.writeShort(0);
                arg1.writeShort(0);
                arg1.writeUnsignedInt(0);
                arg1.writeUnsignedInt(arg4);
            }
            if (loc5 + loc7 + loc8 > 0) 
            {
                arg1.writeBytes(loc4);
            }
            var loc9:*=0;
            if (!arg3 && this._content.length > 0) 
            {
                if (this.isCompressed) 
                {
                    if (HAS_UNCOMPRESS || HAS_INFLATE) 
                    {
                        loc9 = this._content.length;
                        arg1.writeBytes(this._content, 0, loc9);
                    }
                    else 
                    {
                        loc9 = this._content.length - 6;
                        arg1.writeBytes(this._content, 2, loc9);
                    }
                }
                else 
                {
                    loc9 = this._content.length;
                    arg1.writeBytes(this._content, 0, loc9);
                }
            }
            var loc10:*=30 + loc5 + loc7 + loc8 + loc9;
            if (arg3) 
            {
                loc10 = loc10 + 16;
            }
            return loc10;
        }

        function parse(arg1:flash.utils.IDataInput):Boolean
        {
            do 
            {
            }
            while (arg1.bytesAvailable && this.parseFunc(arg1));
            return this.parseFunc === this.parseFileIdle;
        }

        protected function parseFileHead(arg1:flash.utils.IDataInput):Boolean
        {
            if (arg1.bytesAvailable >= 30) 
            {
                this.parseHead(arg1);
                if (this._sizeFilename + this._sizeExtra > 0) 
                {
                    this.parseFunc = this.parseFileHeadExt;
                }
                else 
                {
                    this.parseFunc = this.parseFileContent;
                }
                return true;
            }
            return false;
        }

        protected function parseFileHeadExt(arg1:flash.utils.IDataInput):Boolean
        {
            if (arg1.bytesAvailable >= this._sizeFilename + this._sizeExtra) 
            {
                this.parseHeadExt(arg1);
                this.parseFunc = this.parseFileContent;
                return true;
            }
            return false;
        }

        protected function parseFileContent(arg1:flash.utils.IDataInput):Boolean
        {
            var loc1:*=true;
            if (this._hasDataDescriptor) 
            {
                this.parseFunc = this.parseFileIdle;
                loc1 = false;
            }
            else if (this._sizeCompressed != 0) 
            {
                if (arg1.bytesAvailable >= this._sizeCompressed) 
                {
                    this.parseContent(arg1);
                    this.parseFunc = this.parseFileIdle;
                }
                else 
                {
                    loc1 = false;
                }
            }
            else 
            {
                this.parseFunc = this.parseFileIdle;
            }
            return loc1;
        }

        protected function parseHead(arg1:flash.utils.IDataInput):void
        {
            var loc1:*=arg1.readUnsignedShort();
            this._versionHost = loc1 >> 8;
            this._versionNumber = Math.floor((loc1 & 255) / 10) + "." + (loc1 & 255) % 10;
            var loc2:*=arg1.readUnsignedShort();
            this._compressionMethod = arg1.readUnsignedShort();
            this._encrypted = !((loc2 & 1) === 0);
            this._hasDataDescriptor = !((loc2 & 8) === 0);
            this._hasCompressedPatchedData = !((loc2 & 32) === 0);
            if ((loc2 & 800) !== 0) 
            {
                this._filenameEncoding = "utf-8";
            }
            if (this._compressionMethod !== COMPRESSION_IMPLODED) 
            {
                if (this._compressionMethod === COMPRESSION_DEFLATED) 
                {
                    this._deflateSpeedOption = (loc2 & 6) >> 1;
                }
            }
            else 
            {
                this._implodeDictSize = (loc2 & 2) === 0 ? 4096 : 8192;
                this._implodeShannonFanoTrees = (loc2 & 4) === 0 ? 2 : 3;
            }
            var loc3:*=arg1.readUnsignedShort();
            var loc4:*=arg1.readUnsignedShort();
            var loc5:*=loc3 & 31;
            var loc6:*=(loc3 & 2016) >> 5;
            var loc7:*=(loc3 & 63488) >> 11;
            var loc8:*=loc4 & 31;
            var loc9:*=(loc4 & 480) >> 5;
            var loc10:*=((loc4 & 65024) >> 9) + 1980;
            this._date = new Date(loc10, (loc9 - 1), loc8, loc7, loc6, loc5, 0);
            this._crc32 = arg1.readUnsignedInt();
            this._sizeCompressed = arg1.readUnsignedInt();
            this._sizeUncompressed = arg1.readUnsignedInt();
            this._sizeFilename = arg1.readUnsignedShort();
            this._sizeExtra = arg1.readUnsignedShort();
            return;
        }

        protected function parseHeadExt(arg1:flash.utils.IDataInput):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            if (this._filenameEncoding != "utf-8") 
            {
                this._filename = arg1.readMultiByte(this._sizeFilename, this._filenameEncoding);
            }
            else 
            {
                this._filename = arg1.readUTFBytes(this._sizeFilename);
            }
            var loc1:*=this._sizeExtra;
            while (loc1 > 4) 
            {
                loc2 = arg1.readUnsignedShort();
                if ((loc3 = arg1.readUnsignedShort()) > loc1) 
                {
                    throw new Error("Parse error in file " + this._filename + ": Extra field data size too big.");
                }
                if (loc2 === 56026 && loc3 === 4) 
                {
                    this._adler32 = arg1.readUnsignedInt();
                    this._hasAdler32 = true;
                }
                else if (loc3 > 0) 
                {
                    loc4 = new flash.utils.ByteArray();
                    arg1.readBytes(loc4, 0, loc3);
                    this._extraFields[loc2] = loc4;
                }
                loc1 = loc1 - (loc3 + 4);
            }
            if (loc1 > 0) 
            {
                arg1.readBytes(new flash.utils.ByteArray(), 0, loc1);
            }
            return;
        }

        function parseContent(arg1:flash.utils.IDataInput):void
        {
            var loc1:*=0;
            if (this._compressionMethod === COMPRESSION_DEFLATED && !this._encrypted) 
            {
                if (HAS_UNCOMPRESS || HAS_INFLATE) 
                {
                    arg1.readBytes(this._content, 0, this._sizeCompressed);
                }
                else if (this._hasAdler32) 
                {
                    this._content.writeByte(120);
                    loc1 = ~this._deflateSpeedOption << 6 & 192;
                    loc1 = loc1 + (31 - (120 << 8 | loc1) % 31);
                    this._content.writeByte(loc1);
                    arg1.readBytes(this._content, 2, this._sizeCompressed);
                    this._content.position = this._content.length;
                    this._content.writeUnsignedInt(this._adler32);
                }
                else 
                {
                    throw new Error("Adler32 checksum not found.");
                }
                this.isCompressed = true;
            }
            else if (this._compressionMethod != COMPRESSION_NONE) 
            {
                throw new Error("Compression method " + this._compressionMethod + " is not supported.");
            }
            else 
            {
                arg1.readBytes(this._content, 0, this._sizeCompressed);
                this.isCompressed = false;
            }
            this._content.position = 0;
            return;
        }

        protected function compress():void
        {
            if (!this.isCompressed) 
            {
                if (this._content.length > 0) 
                {
                    this._content.position = 0;
                    this._sizeUncompressed = this._content.length;
                    if (HAS_INFLATE) 
                    {
                        this._content.deflate();
                        this._sizeCompressed = this._content.length;
                    }
                    else if (HAS_UNCOMPRESS) 
                    {
                        this._content.compress.apply(this._content, ["deflate"]);
                        this._sizeCompressed = this._content.length;
                    }
                    else 
                    {
                        this._content.compress();
                        this._sizeCompressed = this._content.length - 6;
                    }
                    this._content.position = 0;
                    this.isCompressed = true;
                }
                else 
                {
                    this._sizeCompressed = 0;
                    this._sizeUncompressed = 0;
                }
            }
            return;
        }

        protected function uncompress():void
        {
            if (this.isCompressed && this._content.length > 0) 
            {
                this._content.position = 0;
                if (HAS_INFLATE) 
                {
                    this._content.inflate();
                }
                else if (HAS_UNCOMPRESS) 
                {
                    this._content.uncompress.apply(this._content, ["deflate"]);
                }
                else 
                {
                    this._content.uncompress();
                }
                this._content.position = 0;
                this.isCompressed = false;
            }
            return;
        }

        public function toString():String
        {
            return "[FZipFile]" + "\n  name:" + this._filename + "\n  date:" + this._date + "\n  sizeCompressed:" + this._sizeCompressed + "\n  sizeUncompressed:" + this._sizeUncompressed + "\n  versionHost:" + this._versionHost + "\n  versionNumber:" + this._versionNumber + "\n  compressionMethod:" + this._compressionMethod + "\n  encrypted:" + this._encrypted + "\n  hasDataDescriptor:" + this._hasDataDescriptor + "\n  hasCompressedPatchedData:" + this._hasCompressedPatchedData + "\n  filenameEncoding:" + this._filenameEncoding + "\n  crc32:" + this._crc32.toString(16) + "\n  adler32:" + this._adler32.toString(16);
        }

        public function setContent(arg1:flash.utils.ByteArray, arg2:Boolean=true):void
        {
            if (!(arg1 == null) && arg1.length > 0) 
            {
                arg1.position = 0;
                arg1.readBytes(this._content, 0, arg1.length);
                this._crc32 = deng.utils.ChecksumUtil.CRC32(this._content);
                this._hasAdler32 = false;
            }
            else 
            {
                this._content.length = 0;
                this._content.position = 0;
                this.isCompressed = false;
            }
            if (arg2) 
            {
                this.compress();
            }
            else 
            {
                var loc1:*;
                this._sizeCompressed = loc1 = this._content.length;
                this._sizeUncompressed = loc1;
            }
            return;
        }

        public function get date():Date
        {
            return this._date;
        }

        public function set date(arg1:Date):void
        {
            this._date = arg1 == null ? new Date() : arg1;
            return;
        }

        public static const COMPRESSION_REDUCED_4:int=5;

        public static const COMPRESSION_NONE:int=0;

        public static const COMPRESSION_SHRUNK:int=1;

        public static const COMPRESSION_REDUCED_1:int=2;

        public static const COMPRESSION_REDUCED_2:int=3;

        public static const COMPRESSION_REDUCED_3:int=4;

        public static const COMPRESSION_IMPLODED:int=6;

        public static const COMPRESSION_TOKENIZED:int=7;

        public static const COMPRESSION_DEFLATED:int=8;

        public static const COMPRESSION_DEFLATED_EXT:int=9;

        public static const COMPRESSION_IMPLODED_PKWARE:int=10;

        protected var _sizeFilename:uint=0;

        protected var _sizeExtra:uint=0;

        protected var _filename:String="";

        protected var _filenameEncoding:String;

        protected var _extraFields:flash.utils.Dictionary;

        protected var _comment:String="";

        protected var _content:flash.utils.ByteArray;

        protected var _versionHost:int=0;

        var _sizeCompressed:uint=0;

        var _sizeUncompressed:uint=0;

        protected var isCompressed:Boolean=false;

        protected var parseFunc:Function;

        protected var _versionNumber:String="2.0";

        protected var _compressionMethod:int=8;

        protected var _encrypted:Boolean=false;

        protected var _implodeDictSize:int=-1;

        protected var _implodeShannonFanoTrees:int=-1;

        protected var _hasDataDescriptor:Boolean=false;

        protected var _deflateSpeedOption:int=-1;

        protected var _hasCompressedPatchedData:Boolean=false;

        protected var _date:Date;

        protected var _adler32:uint;

        protected var _hasAdler32:Boolean=false;

        protected static var HAS_UNCOMPRESS:Boolean;

        protected static var HAS_INFLATE:Boolean;

        var _crc32:uint;
    }
}


//    package utils
//      class ChecksumUtil
package deng.utils 
{
    import flash.utils.*;
    
    public class ChecksumUtil extends Object
    {
        public function ChecksumUtil()
        {
            super();
            return;
        }

        internal static function makeCRCTable():Array
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=[];
            loc2 = 0;
            while (loc2 < 256) 
            {
                loc4 = loc2;
                loc3 = 0;
                while (loc3 < 8) 
                {
                    if (loc4 & 1) 
                    {
                        loc4 = 3988292384 ^ loc4 >>> 1;
                    }
                    else 
                    {
                        loc4 = loc4 >>> 1;
                    }
                    ++loc3;
                }
                loc1.push(loc4);
                ++loc2;
            }
            return loc1;
        }

        public static function CRC32(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):uint
        {
            var loc1:*=0;
            if (arg2 >= arg1.length) 
            {
                arg2 = arg1.length;
            }
            if (arg3 == 0) 
            {
                arg3 = arg1.length - arg2;
            }
            if (arg3 + arg2 > arg1.length) 
            {
                arg3 = arg1.length - arg2;
            }
            var loc2:*=4294967295;
            loc1 = arg2;
            while (loc1 < arg3) 
            {
                loc2 = uint(crcTable[(loc2 ^ arg1[loc1]) & 255]) ^ loc2 >>> 8;
                ++loc1;
            }
            return loc2 ^ 4294967295;
        }

        public static function Adler32(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):uint
        {
            if (arg2 >= arg1.length) 
            {
                arg2 = arg1.length;
            }
            if (arg3 == 0) 
            {
                arg3 = arg1.length - arg2;
            }
            if (arg3 + arg2 > arg1.length) 
            {
                arg3 = arg1.length - arg2;
            }
            var loc1:*=arg2;
            var loc2:*=1;
            var loc3:*=0;
            while (loc1 < arg2 + arg3) 
            {
                loc3 = ((loc2 = (loc2 + arg1[loc1]) % 65521) + loc3) % 65521;
                ++loc1;
            }
            return loc3 << 16 | loc2;
        }

        
        {
            crcTable = makeCRCTable();
        }

        internal static var crcTable:Array;
    }
}


//  package fl
//    package containers
//      class BaseScrollPane
package fl.containers 
{
    import fl.controls.*;
    import fl.core.*;
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    
    public class BaseScrollPane extends fl.core.UIComponent
    {
        public function BaseScrollPane()
        {
            super();
            return;
        }

        public function set horizontalPageScrollSize(arg1:Number):void
        {
            _horizontalPageScrollSize = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get verticalPageScrollSize():Number
        {
            if (isNaN(availableHeight)) 
            {
                drawNow();
            }
            return _verticalPageScrollSize == 0 && !isNaN(availableHeight) ? availableHeight : _verticalPageScrollSize;
        }

        public function set verticalPageScrollSize(arg1:Number):void
        {
            _verticalPageScrollSize = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get horizontalScrollBar():fl.controls.ScrollBar
        {
            return _horizontalScrollBar;
        }

        public function get verticalScrollBar():fl.controls.ScrollBar
        {
            return _verticalScrollBar;
        }

        protected override function configUI():void
        {
            super.configUI();
            contentScrollRect = new flash.geom.Rectangle(0, 0, 85, 85);
            _verticalScrollBar = new fl.controls.ScrollBar();
            _verticalScrollBar.addEventListener(fl.events.ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _verticalScrollBar.visible = false;
            _verticalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_verticalScrollBar);
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            _horizontalScrollBar = new fl.controls.ScrollBar();
            _horizontalScrollBar.direction = fl.controls.ScrollBarDirection.HORIZONTAL;
            _horizontalScrollBar.addEventListener(fl.events.ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _horizontalScrollBar.visible = false;
            _horizontalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_horizontalScrollBar);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            disabledOverlay = new flash.display.Shape();
            var loc1:*=disabledOverlay.graphics;
            loc1.beginFill(16777215);
            loc1.drawRect(0, 0, width, height);
            loc1.endFill();
            addEventListener(flash.events.MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
            return;
        }

        public function get horizontalScrollPosition():Number
        {
            return _horizontalScrollBar.scrollPosition;
        }

        protected function setContentSize(arg1:Number, arg2:Number):void
        {
            if ((contentWidth == arg1 || useFixedHorizontalScrolling) && contentHeight == arg2) 
            {
                return;
            }
            contentWidth = arg1;
            contentHeight = arg2;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        protected function handleScroll(arg1:fl.events.ScrollEvent):void
        {
            if (arg1.target != _verticalScrollBar) 
            {
                setHorizontalScrollPosition(arg1.position);
            }
            else 
            {
                setVerticalScrollPosition(arg1.position);
            }
            return;
        }

        protected function handleWheel(arg1:flash.events.MouseEvent):void
        {
            if (!enabled || !_verticalScrollBar.visible || contentHeight <= availableHeight) 
            {
                return;
            }
            _verticalScrollBar.scrollPosition = _verticalScrollBar.scrollPosition - arg1.delta * verticalLineScrollSize;
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition);
            dispatchEvent(new fl.events.ScrollEvent(fl.controls.ScrollBarDirection.VERTICAL, arg1.delta, horizontalScrollPosition));
            return;
        }

        protected function setHorizontalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            return;
        }

        protected function setVerticalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")) 
                {
                    invalidate(fl.core.InvalidationType.SIZE, false);
                }
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STATE)) 
            {
                drawLayout();
            }
            updateChildren();
            super.draw();
            return;
        }

        protected function setStyles():void
        {
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            return;
        }

        protected function drawBackground():void
        {
            var loc1:*=background;
            background = getDisplayObjectInstance(getStyleValue("skin"));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (!(loc1 == null) && !(loc1 == background)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected function drawLayout():void
        {
            calculateAvailableSize();
            calculateContentWidth();
            background.width = width;
            background.height = height;
            if (vScrollBar) 
            {
                _verticalScrollBar.visible = true;
                _verticalScrollBar.x = width - fl.controls.ScrollBar.WIDTH - contentPadding;
                _verticalScrollBar.y = contentPadding;
                _verticalScrollBar.height = availableHeight;
            }
            else 
            {
                _verticalScrollBar.visible = false;
            }
            _verticalScrollBar.setScrollProperties(availableHeight, 0, contentHeight - availableHeight, verticalPageScrollSize);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
            if (hScrollBar) 
            {
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.x = contentPadding;
                _horizontalScrollBar.y = height - fl.controls.ScrollBar.WIDTH - contentPadding;
                _horizontalScrollBar.width = availableWidth;
            }
            else 
            {
                _horizontalScrollBar.visible = false;
            }
            _horizontalScrollBar.setScrollProperties(availableWidth, 0, useFixedHorizontalScrolling ? _maxHorizontalScrollPosition : contentWidth - availableWidth, horizontalPageScrollSize);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
            drawDisabledOverlay();
            return;
        }

        protected function calculateAvailableSize():void
        {
            var loc1:*=fl.controls.ScrollBar.WIDTH;
            var loc6:*;
            contentPadding = loc6 = Number(getStyleValue("contentPadding"));
            var loc2:*=loc6;
            var loc3:*=height - 2 * loc2 - vOffset;
            vScrollBar = _verticalScrollPolicy == fl.controls.ScrollPolicy.ON || _verticalScrollPolicy == fl.controls.ScrollPolicy.AUTO && contentHeight > loc3;
            var loc4:*=width - (vScrollBar ? loc1 : 0) - 2 * loc2;
            var loc5:*=useFixedHorizontalScrolling ? _maxHorizontalScrollPosition : contentWidth - loc4;
            hScrollBar = _horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && loc5 > 0;
            if (hScrollBar) 
            {
                loc3 = loc3 - loc1;
            }
            if (hScrollBar && !vScrollBar && _verticalScrollPolicy == fl.controls.ScrollPolicy.AUTO && contentHeight > loc3) 
            {
                vScrollBar = true;
                loc4 = loc4 - loc1;
            }
            availableHeight = loc3 + vOffset;
            availableWidth = loc4;
            return;
        }

        protected function calculateContentWidth():void
        {
            return;
        }

        protected function updateChildren():void
        {
            var loc1:*;
            _horizontalScrollBar.enabled = loc1 = enabled;
            _verticalScrollBar.enabled = loc1;
            _verticalScrollBar.drawNow();
            _horizontalScrollBar.drawNow();
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.ScrollBar.getStyleDefinition());
        }

        
        {
            defaultStyles = {"repeatDelay":500, "repeatInterval":35, "skin":"ScrollPane_upSkin", "contentPadding":0, "disabledAlpha":0.5};
        }

        public override function set enabled(arg1:Boolean):void
        {
            if (enabled == arg1) 
            {
                return;
            }
            _verticalScrollBar.enabled = arg1;
            _horizontalScrollBar.enabled = arg1;
            super.enabled = arg1;
            return;
        }

        public function get horizontalScrollPolicy():String
        {
            return _horizontalScrollPolicy;
        }

        public function set horizontalScrollPolicy(arg1:String):void
        {
            _horizontalScrollPolicy = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get verticalScrollPolicy():String
        {
            return _verticalScrollPolicy;
        }

        public function set verticalScrollPolicy(arg1:String):void
        {
            _verticalScrollPolicy = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get horizontalLineScrollSize():Number
        {
            return _horizontalScrollBar.lineScrollSize;
        }

        public function set horizontalLineScrollSize(arg1:Number):void
        {
            _horizontalScrollBar.lineScrollSize = arg1;
            return;
        }

        public function get verticalLineScrollSize():Number
        {
            return _verticalScrollBar.lineScrollSize;
        }

        public function set verticalLineScrollSize(arg1:Number):void
        {
            _verticalScrollBar.lineScrollSize = arg1;
            return;
        }

        protected function drawDisabledOverlay():void
        {
            if (enabled) 
            {
                if (contains(disabledOverlay)) 
                {
                    removeChild(disabledOverlay);
                }
            }
            else 
            {
                var loc1:*;
                disabledOverlay.y = loc1 = contentPadding;
                disabledOverlay.x = loc1;
                disabledOverlay.width = availableWidth;
                disabledOverlay.height = availableHeight;
                disabledOverlay.alpha = getStyleValue("disabledAlpha") as Number;
                addChild(disabledOverlay);
            }
            return;
        }

        public function set horizontalScrollPosition(arg1:Number):void
        {
            drawNow();
            _horizontalScrollBar.scrollPosition = arg1;
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
            return;
        }

        public function get verticalScrollPosition():Number
        {
            return _verticalScrollBar.scrollPosition;
        }

        public function set verticalScrollPosition(arg1:Number):void
        {
            drawNow();
            _verticalScrollBar.scrollPosition = arg1;
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
            return;
        }

        public function get maxHorizontalScrollPosition():Number
        {
            drawNow();
            return Math.max(0, contentWidth - availableWidth);
        }

        public function get maxVerticalScrollPosition():Number
        {
            drawNow();
            return Math.max(0, contentHeight - availableHeight);
        }

        public function get useBitmapScrolling():Boolean
        {
            return _useBitmpScrolling;
        }

        public function set useBitmapScrolling(arg1:Boolean):void
        {
            _useBitmpScrolling = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get horizontalPageScrollSize():Number
        {
            if (isNaN(availableWidth)) 
            {
                drawNow();
            }
            return _horizontalPageScrollSize == 0 && !isNaN(availableWidth) ? availableWidth : _horizontalPageScrollSize;
        }

        protected static const SCROLL_BAR_STYLES:Object={"upArrowDisabledSkin":"upArrowDisabledSkin", "upArrowDownSkin":"upArrowDownSkin", "upArrowOverSkin":"upArrowOverSkin", "upArrowUpSkin":"upArrowUpSkin", "downArrowDisabledSkin":"downArrowDisabledSkin", "downArrowDownSkin":"downArrowDownSkin", "downArrowOverSkin":"downArrowOverSkin", "downArrowUpSkin":"downArrowUpSkin", "thumbDisabledSkin":"thumbDisabledSkin", "thumbDownSkin":"thumbDownSkin", "thumbOverSkin":"thumbOverSkin", "thumbUpSkin":"thumbUpSkin", "thumbIcon":"thumbIcon", "trackDisabledSkin":"trackDisabledSkin", "trackDownSkin":"trackDownSkin", "trackOverSkin":"trackOverSkin", "trackUpSkin":"trackUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        protected var _verticalScrollBar:fl.controls.ScrollBar;

        protected var _horizontalScrollBar:fl.controls.ScrollBar;

        protected var contentScrollRect:flash.geom.Rectangle;

        protected var disabledOverlay:flash.display.Shape;

        protected var background:flash.display.DisplayObject;

        protected var contentWidth:Number=0;

        protected var _horizontalScrollPolicy:String;

        protected var _verticalScrollPolicy:String;

        protected var contentPadding:Number=0;

        protected var availableWidth:Number;

        protected var availableHeight:Number;

        protected var vOffset:Number=0;

        protected var vScrollBar:Boolean;

        protected var hScrollBar:Boolean;

        protected var _maxHorizontalScrollPosition:Number=0;

        protected var _horizontalPageScrollSize:Number=0;

        protected var _verticalPageScrollSize:Number=0;

        protected var defaultLineScrollSize:Number=4;

        protected var useFixedHorizontalScrolling:Boolean=false;

        protected var _useBitmpScrolling:Boolean=false;

        protected var contentHeight:Number=0;

        internal static var defaultStyles:Object;
    }
}


//      class ScrollPane
package fl.containers 
{
    import fl.controls.*;
    import fl.core.*;
    import fl.display.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.ui.*;
    
    public class ScrollPane extends fl.containers.BaseScrollPane implements fl.managers.IFocusManagerComponent
    {
        public function ScrollPane()
        {
            super();
            return;
        }

        protected function setScrollDrag():void
        {
            if (_scrollDrag) 
            {
                contentClip.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, doStartDrag, false, 0, true);
                focusManager.form.addEventListener(flash.events.MouseEvent.MOUSE_UP, endDrag, false, 0, true);
            }
            else 
            {
                contentClip.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, doStartDrag);
                focusManager.form.removeEventListener(flash.events.MouseEvent.MOUSE_UP, endDrag);
                removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, doDrag);
            }
            contentClip.buttonMode = _scrollDrag;
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                drawBackground();
            }
            if (isInvalid(fl.core.InvalidationType.STATE)) 
            {
                setScrollDrag();
            }
            super.draw();
            return;
        }

        protected override function drawBackground():void
        {
            var loc1:*=background;
            background = getDisplayObjectInstance(getStyleValue(enabled ? "upSkin" : "disabledSkin"));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (!(loc1 == null) && !(loc1 == background)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected function clearContent():void
        {
            var loc1:*;
            if (contentClip.numChildren == 0) 
            {
                return;
            }
            contentClip.removeChildAt(0);
            currentContent = null;
            if (loader != null) 
            {
                try 
                {
                    loader.close();
                }
                catch (e:*)
                {
                };
                try 
                {
                    loader.unload();
                }
                catch (e:*)
                {
                };
                loader = null;
            }
            return;
        }

        public function get scrollDrag():Boolean
        {
            return _scrollDrag;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc1:*=calculateAvailableHeight();
            var loc2:*=arg1.keyCode;
            switch (loc2) 
            {
                case flash.ui.Keyboard.DOWN:
                {
                    verticalScrollPosition++;
                    break;
                }
                case flash.ui.Keyboard.UP:
                {
                    verticalScrollPosition--;
                    break;
                }
                case flash.ui.Keyboard.RIGHT:
                {
                    horizontalScrollPosition++;
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                {
                    horizontalScrollPosition--;
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    verticalScrollPosition = maxVerticalScrollPosition;
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    verticalScrollPosition = 0;
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    verticalScrollPosition = verticalScrollPosition - loc1;
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    verticalScrollPosition = verticalScrollPosition + loc1;
                    break;
                }
            }
            return;
        }

        protected function calculateAvailableHeight():Number
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            return height - loc1 * 2 - (_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0);
        }

        protected override function configUI():void
        {
            super.configUI();
            contentClip = new flash.display.Sprite();
            addChild(contentClip);
            contentClip.scrollRect = contentScrollRect;
            _horizontalScrollPolicy = fl.controls.ScrollPolicy.AUTO;
            _verticalScrollPolicy = fl.controls.ScrollPolicy.AUTO;
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.containers.BaseScrollPane.getStyleDefinition());
        }

        
        {
            defaultStyles = {"upSkin":"ScrollPane_upSkin", "disabledSkin":"ScrollPane_disabledSkin", "focusRectSkin":null, "focusRectPadding":null, "contentPadding":0};
        }

        public function set scrollDrag(arg1:Boolean):void
        {
            _scrollDrag = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get percentLoaded():Number
        {
            if (loader != null) 
            {
                return Math.round(bytesLoaded / bytesTotal * 100);
            }
            return 0;
        }

        public function get bytesLoaded():Number
        {
            return loader == null || loader.contentLoaderInfo == null ? 0 : loader.contentLoaderInfo.bytesLoaded;
        }

        public function get bytesTotal():Number
        {
            return loader == null || loader.contentLoaderInfo == null ? 0 : loader.contentLoaderInfo.bytesTotal;
        }

        public function refreshPane():void
        {
            if (_source is flash.net.URLRequest) 
            {
                _source = _source.url;
            }
            source = _source;
            return;
        }

        public function update():void
        {
            var loc1:*=contentClip.getChildAt(0);
            setContentSize(loc1.width, loc1.height);
            return;
        }

        public function get content():flash.display.DisplayObject
        {
            var loc1:*=currentContent;
            if (loc1 is flash.net.URLRequest) 
            {
                loc1 = loader.content;
            }
            return loc1 as flash.display.DisplayObject;
        }

        public function get source():Object
        {
            return _source;
        }

        public function set source(arg1:Object):void
        {
            var loc1:*=undefined;
            clearContent();
            if (isLivePreview) 
            {
                return;
            }
            _source = arg1;
            if (_source == "" || _source == null) 
            {
                return;
            }
            currentContent = getDisplayObjectInstance(arg1);
            if (currentContent == null) 
            {
                load(new flash.net.URLRequest(_source.toString()));
            }
            else 
            {
                loc1 = contentClip.addChild(currentContent as flash.display.DisplayObject);
                dispatchEvent(new flash.events.Event(flash.events.Event.INIT));
                update();
            }
            return;
        }

        public function load(arg1:flash.net.URLRequest, arg2:flash.system.LoaderContext=null):void
        {
            if (arg2 == null) 
            {
                arg2 = new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain);
            }
            clearContent();
            initLoader();
            var loc1:*;
            _source = loc1 = arg1;
            currentContent = loc1;
            loader.load(arg1, arg2);
            return;
        }

        protected override function setVerticalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            var loc1:*=contentClip.scrollRect;
            loc1.y = arg1;
            contentClip.scrollRect = loc1;
            return;
        }

        protected override function setHorizontalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            var loc1:*=contentClip.scrollRect;
            loc1.x = arg1;
            contentClip.scrollRect = loc1;
            return;
        }

        protected override function drawLayout():void
        {
            super.drawLayout();
            contentScrollRect = contentClip.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            contentClip.cacheAsBitmap = useBitmapScrolling;
            contentClip.scrollRect = contentScrollRect;
            var loc1:*;
            contentClip.y = loc1 = contentPadding;
            contentClip.x = loc1;
            return;
        }

        protected function onContentLoad(arg1:flash.events.Event):void
        {
            update();
            var loc1:*=calculateAvailableHeight();
            calculateAvailableSize();
            horizontalScrollBar.setScrollProperties(availableWidth, 0, useFixedHorizontalScrolling ? _maxHorizontalScrollPosition : contentWidth - availableWidth, availableWidth);
            verticalScrollBar.setScrollProperties(loc1, 0, contentHeight - loc1, loc1);
            passEvent(arg1);
            return;
        }

        protected function passEvent(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            return;
        }

        protected function initLoader():void
        {
            loader = new fl.display.ProLoader();
            loader.contentLoaderInfo.addEventListener(flash.events.IOErrorEvent.IO_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.Event.OPEN, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.ProgressEvent.PROGRESS, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, onContentLoad, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.Event.INIT, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, passEvent, false, 0, true);
            contentClip.addChild(loader);
            return;
        }

        protected override function handleScroll(arg1:fl.events.ScrollEvent):void
        {
            passEvent(arg1);
            super.handleScroll(arg1);
            return;
        }

        protected function handleError(arg1:flash.events.Event):void
        {
            passEvent(arg1);
            clearLoadEvents();
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.INIT, handleInit);
            return;
        }

        protected function handleInit(arg1:flash.events.Event):void
        {
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.INIT, handleInit);
            passEvent(arg1);
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        protected function clearLoadEvents():void
        {
            loader.contentLoaderInfo.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.OPEN, passEvent);
            loader.contentLoaderInfo.removeEventListener(flash.events.ProgressEvent.PROGRESS, passEvent);
            loader.contentLoaderInfo.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, passEvent);
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, onContentLoad);
            return;
        }

        protected function doDrag(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=scrollDragVPos - (mouseY - yOffset);
            _verticalScrollBar.setScrollPosition(loc1);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, true);
            var loc2:*=scrollDragHPos - (mouseX - xOffset);
            _horizontalScrollBar.setScrollPosition(loc2);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, true);
            return;
        }

        protected function doStartDrag(arg1:flash.events.MouseEvent):void
        {
            if (!enabled) 
            {
                return;
            }
            xOffset = mouseX;
            yOffset = mouseY;
            scrollDragHPos = horizontalScrollPosition;
            scrollDragVPos = verticalScrollPosition;
            focusManager.form.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, doDrag, false, 0, true);
            return;
        }

        protected function endDrag(arg1:flash.events.MouseEvent):void
        {
            focusManager.form.removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, doDrag);
            return;
        }

        protected var _source:Object="";

        protected var _scrollDrag:Boolean=false;

        protected var contentClip:flash.display.Sprite;

        protected var loader:fl.display.ProLoader;

        protected var yOffset:Number;

        protected var scrollDragHPos:Number;

        protected var scrollDragVPos:Number;

        protected var currentContent:Object;

        protected var xOffset:Number;

        internal static var defaultStyles:Object;
    }
}


//      class UILoader
package fl.containers 
{
    import fl.core.*;
    import fl.display.*;
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    
    public class UILoader extends fl.core.UIComponent
    {
        public function UILoader()
        {
            super();
            return;
        }

        protected function clearLoadEvents():void
        {
            loader.contentLoaderInfo.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.OPEN, passEvent);
            loader.contentLoaderInfo.removeEventListener(flash.events.ProgressEvent.PROGRESS, passEvent);
            loader.contentLoaderInfo.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, passEvent);
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, handleComplete);
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
            }
            super.draw();
            return;
        }

        protected function drawLayout():void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc6:*=null;
            if (!contentInited) 
            {
                return;
            }
            var loc1:*=false;
            if (loader) 
            {
                loc2 = (loc6 = loader.contentLoaderInfo).width;
                loc3 = loc6.height;
            }
            else 
            {
                loc2 = contentClip.width;
                loc3 = contentClip.height;
            }
            var loc4:*=_width;
            var loc5:*=_height;
            if (_scaleContent) 
            {
                sizeContent(contentClip, loc2, loc3, _width, _height);
            }
            else 
            {
                _width = contentClip.width;
                _height = contentClip.height;
            }
            if (!(loc4 == _width) || !(loc5 == _height)) 
            {
                dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.RESIZE, true));
            }
            return;
        }

        protected function sizeContent(arg1:flash.display.DisplayObject, arg2:Number, arg3:Number, arg4:Number, arg5:Number):void
        {
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc1:*=arg4;
            var loc2:*=arg5;
            if (_maintainAspectRatio) 
            {
                loc3 = arg4 / arg5;
                loc4 = arg2 / arg3;
                if (loc3 < loc4) 
                {
                    loc2 = loc1 / loc4;
                }
                else 
                {
                    loc1 = loc2 * loc4;
                }
            }
            arg1.width = loc1;
            arg1.height = loc2;
            arg1.x = arg4 / 2 - loc1 / 2;
            arg1.y = arg5 / 2 - loc2 / 2;
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            contentClip = new flash.display.Sprite();
            addChild(contentClip);
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {};
        }

        public override function setSize(arg1:Number, arg2:Number):void
        {
            if (!_scaleContent && _width > 0) 
            {
                return;
            }
            super.setSize(arg1, arg2);
            return;
        }

        public function get autoLoad():Boolean
        {
            return _autoLoad;
        }

        public function set autoLoad(arg1:Boolean):void
        {
            _autoLoad = arg1;
            if (_autoLoad && loader == null && !(_source == null) && !(_source == "")) 
            {
                load();
            }
            return;
        }

        public function get scaleContent():Boolean
        {
            return _scaleContent;
        }

        public function set scaleContent(arg1:Boolean):void
        {
            if (_scaleContent == arg1) 
            {
                return;
            }
            _scaleContent = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get maintainAspectRatio():Boolean
        {
            return _maintainAspectRatio;
        }

        public function set maintainAspectRatio(arg1:Boolean):void
        {
            _maintainAspectRatio = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get bytesLoaded():uint
        {
            return loader == null || loader.contentLoaderInfo == null ? 0 : loader.contentLoaderInfo.bytesLoaded;
        }

        public function get bytesTotal():uint
        {
            return loader == null || loader.contentLoaderInfo == null ? 0 : loader.contentLoaderInfo.bytesTotal;
        }

        public function loadBytes(arg1:flash.utils.ByteArray, arg2:flash.system.LoaderContext=null):void
        {
            var bytes:flash.utils.ByteArray;
            var context:flash.system.LoaderContext=null;

            var loc1:*;
            bytes = arg1;
            context = arg2;
            _unload();
            initLoader();
            try 
            {
                loader.loadBytes(bytes, context);
            }
            catch (error:*)
            {
                throw error;
            }
            return;
        }

        public function get content():flash.display.DisplayObject
        {
            if (loader != null) 
            {
                return loader.content;
            }
            if (contentClip.numChildren) 
            {
                return contentClip.getChildAt(0);
            }
            return null;
        }

        public function get source():Object
        {
            return _source;
        }

        public function set source(arg1:Object):void
        {
            if (arg1 == "") 
            {
                return;
            }
            _source = arg1;
            _unload();
            if (_autoLoad && !(_source == null)) 
            {
                load();
            }
            return;
        }

        public function get percentLoaded():Number
        {
            return bytesTotal <= 0 ? 0 : bytesLoaded / bytesTotal * 100;
        }

        public function load(arg1:flash.net.URLRequest=null, arg2:flash.system.LoaderContext=null):void
        {
            _unload();
            if ((arg1 == null || arg1.url == null) && (_source == null || _source == "")) 
            {
                return;
            }
            var loc1:*=getDisplayObjectInstance(source);
            if (loc1 != null) 
            {
                contentClip.addChild(loc1);
                contentInited = true;
                invalidate(fl.core.InvalidationType.SIZE);
                return;
            }
            arg1 = arg1;
            if (arg1 == null) 
            {
                arg1 = new flash.net.URLRequest(_source.toString());
            }
            if (arg2 == null) 
            {
                arg2 = new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain);
            }
            initLoader();
            loader.load(arg1, arg2);
            return;
        }

        public function unload():void
        {
            _source = null;
            _unload(true);
            return;
        }

        public function close():void
        {
            var loc1:*;
            try 
            {
                loader.close();
            }
            catch (error:*)
            {
                throw error;
            }
            return;
        }

        protected function _unload(arg1:Boolean=false):void
        {
            var throwError:Boolean=false;

            var loc1:*;
            throwError = arg1;
            if (loader != null) 
            {
                clearLoadEvents();
                contentClip.removeChild(loader);
                try 
                {
                    loader.close();
                }
                catch (e:Error)
                {
                };
                try 
                {
                    loader.unload();
                }
                catch (e:*)
                {
                    if (throwError) 
                    {
                        throw e;
                    }
                }
                loader = null;
                return;
            }
            contentInited = false;
            if (contentClip.numChildren) 
            {
                contentClip.removeChildAt(0);
            }
            return;
        }

        protected function initLoader():void
        {
            loader = new fl.display.ProLoader();
            loader.contentLoaderInfo.addEventListener(flash.events.IOErrorEvent.IO_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.Event.OPEN, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.ProgressEvent.PROGRESS, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, handleComplete, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.Event.INIT, handleInit, false, 0, true);
            loader.contentLoaderInfo.addEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, passEvent, false, 0, true);
            contentClip.addChild(loader);
            return;
        }

        protected function handleComplete(arg1:flash.events.Event):void
        {
            clearLoadEvents();
            passEvent(arg1);
            return;
        }

        protected function passEvent(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            return;
        }

        protected function handleError(arg1:flash.events.Event):void
        {
            passEvent(arg1);
            clearLoadEvents();
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.INIT, handleInit);
            return;
        }

        protected function handleInit(arg1:flash.events.Event):void
        {
            loader.contentLoaderInfo.removeEventListener(flash.events.Event.INIT, handleInit);
            contentInited = true;
            passEvent(arg1);
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        protected var _scaleContent:Boolean=true;

        protected var _autoLoad:Boolean=true;

        protected var contentInited:Boolean=false;

        protected var _source:Object;

        protected var loader:fl.display.ProLoader;

        protected var _maintainAspectRatio:Boolean=true;

        protected var contentClip:flash.display.Sprite;

        internal static var defaultStyles:Object;
    }
}


//    package controls
//      package dataGridClasses
//        class DataGridCellEditor
package fl.controls.dataGridClasses 
{
    import fl.controls.*;
    import fl.controls.listClasses.*;
    
    public class DataGridCellEditor extends fl.controls.TextInput implements fl.controls.listClasses.ICellRenderer
    {
        public function DataGridCellEditor()
        {
            super();
            return;
        }

        public function get listData():fl.controls.listClasses.ListData
        {
            return _listData;
        }

        public function set listData(arg1:fl.controls.listClasses.ListData):void
        {
            _listData = arg1;
            text = _listData.label;
            return;
        }

        public function get data():Object
        {
            return _data;
        }

        public function set data(arg1:Object):void
        {
            _data = arg1;
            return;
        }

        public function get selected():Boolean
        {
            return false;
        }

        public function set selected(arg1:Boolean):void
        {
            return;
        }

        public function setMouseState(arg1:String):void
        {
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"textPadding":1, "textFormat":null, "upSkin":"DataGridCellEditor_skin"};
        }

        protected var _listData:fl.controls.listClasses.ListData;

        protected var _data:Object;

        internal static var defaultStyles:Object;
    }
}


//        class DataGridColumn
package fl.controls.dataGridClasses 
{
    import fl.controls.*;
    import fl.core.*;
    
    public class DataGridColumn extends Object
    {
        public function DataGridColumn(arg1:String=null)
        {
            super();
            if (arg1) 
            {
                dataField = arg1;
                headerText = arg1;
            }
            return;
        }

        public function set visible(arg1:Boolean):void
        {
            if (_visible != arg1) 
            {
                _visible = arg1;
                if (owner) 
                {
                    owner.invalidate(fl.core.InvalidationType.SIZE);
                }
            }
            return;
        }

        public function get headerText():String
        {
            return _headerText == null ? dataField : _headerText;
        }

        public function get cellRenderer():Object
        {
            return _cellRenderer;
        }

        public function set cellRenderer(arg1:Object):void
        {
            _cellRenderer = arg1;
            if (owner) 
            {
                owner.invalidate(fl.core.InvalidationType.DATA);
            }
            return;
        }

        public function get headerRenderer():Object
        {
            return _headerRenderer;
        }

        public function set headerRenderer(arg1:Object):void
        {
            _headerRenderer = arg1;
            if (owner) 
            {
                owner.invalidate(fl.core.InvalidationType.DATA);
            }
            return;
        }

        public function set headerText(arg1:String):void
        {
            _headerText = arg1;
            if (owner) 
            {
                owner.invalidate(fl.core.InvalidationType.DATA);
            }
            return;
        }

        public function get imeMode():String
        {
            return _imeMode;
        }

        public function set imeMode(arg1:String):void
        {
            _imeMode = arg1;
            return;
        }

        public function get labelFunction():Function
        {
            return _labelFunction;
        }

        public function set labelFunction(arg1:Function):void
        {
            if (_labelFunction == arg1) 
            {
                return;
            }
            _labelFunction = arg1;
            if (owner) 
            {
                owner.invalidate(fl.core.InvalidationType.DATA);
            }
            return;
        }

        public function get minWidth():Number
        {
            return _minWidth;
        }

        public function set minWidth(arg1:Number):void
        {
            _minWidth = arg1;
            if (_width < arg1) 
            {
                _width = arg1;
            }
            if (owner) 
            {
                owner.invalidate(fl.core.InvalidationType.SIZE);
            }
            return;
        }

        public function get sortCompareFunction():Function
        {
            return _sortCompareFunction;
        }

        public function set sortCompareFunction(arg1:Function):void
        {
            _sortCompareFunction = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return _visible;
        }

        public function get width():Number
        {
            return _width;
        }

        public function set width(arg1:Number):void
        {
            var loc1:*=false;
            explicitWidth = arg1;
            if (owner == null) 
            {
                _width = arg1;
            }
            else 
            {
                loc1 = resizable;
                resizable = false;
                owner.resizeColumn(colNum, arg1);
                resizable = loc1;
            }
            return;
        }

        public function setWidth(arg1:Number):void
        {
            _width = arg1;
            return;
        }

        public function itemToLabel(arg1:Object):String
        {
            var data:Object;

            var loc1:*;
            data = arg1;
            if (!data) 
            {
                return " ";
            }
            if (labelFunction != null) 
            {
                return labelFunction(data);
            }
            if (owner.labelFunction != null) 
            {
                return owner.labelFunction(data, this);
            }
            if (typeof data == "object" || typeof data == "xml") 
            {
                try 
                {
                    data = data[dataField];
                }
                catch (e:Error)
                {
                    data = null;
                }
            }
            if (data is String) 
            {
                return String(data);
            }
            try 
            {
                return data.toString();
            }
            catch (e:Error)
            {
            };
            return " ";
        }

        public function toString():String
        {
            return "[object DataGridColumn]";
        }

        internal var _visible:Boolean=true;

        internal var _columnName:String;

        internal var _headerText:String;

        internal var _minWidth:Number=20;

        internal var _width:Number=100;

        internal var forceImport:fl.controls.dataGridClasses.DataGridCellEditor;

        internal var _cellRenderer:Object;

        internal var _headerRenderer:Object;

        internal var _labelFunction:Function;

        internal var _sortCompareFunction:Function;

        internal var _imeMode:String;

        public var owner:fl.controls.DataGrid;

        public var colNum:Number;

        public var explicitWidth:Number;

        public var sortable:Boolean=true;

        public var resizable:Boolean=true;

        public var itemEditor:Object="fl.controls.dataGridClasses.DataGridCellEditor";

        public var editable:Boolean=true;

        public var editorDataField:String="text";

        public var dataField:String;

        public var sortDescending:Boolean=false;

        public var sortOptions:uint=0;
    }
}


//        class HeaderRenderer
package fl.controls.dataGridClasses 
{
    import fl.controls.*;
    
    public class HeaderRenderer extends fl.controls.LabelButton
    {
        public function HeaderRenderer()
        {
            super();
            focusEnabled = false;
            return;
        }

        public function get column():uint
        {
            return _column;
        }

        public function set column(arg1:uint):void
        {
            _column = arg1;
            return;
        }

        protected override function drawLayout():void
        {
            var loc1:*=Number(getStyleValue("textPadding"));
            textField.height = textField.textHeight + 4;
            textField.visible = label.length > 0;
            var loc2:*=textField.textWidth + 4;
            var loc3:*=textField.textHeight + 4;
            var loc4:*=icon != null ? icon.width + 4 : 0;
            var loc5:*=Math.max(0, Math.min(loc2, width - 2 * loc1 - loc4));
            if (icon != null) 
            {
                icon.x = width - loc1 - icon.width - 2;
                icon.y = Math.round((height - icon.height) / 2);
            }
            textField.width = loc5;
            textField.x = loc1;
            textField.y = Math.round((height - textField.height) / 2);
            background.width = width;
            background.height = height;
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"upSkin":"HeaderRenderer_upSkin", "downSkin":"HeaderRenderer_downSkin", "overSkin":"HeaderRenderer_overSkin", "disabledSkin":"HeaderRenderer_disabledSkin", "selectedDisabledSkin":"HeaderRenderer_selectedDisabledSkin", "selectedUpSkin":"HeaderRenderer_selectedUpSkin", "selectedDownSkin":"HeaderRenderer_selectedDownSkin", "selectedOverSkin":"HeaderRenderer_selectedOverSkin", "textFormat":null, "disabledTextFormat":null, "textPadding":5};
        }

        public var _column:uint;

        internal static var defaultStyles:Object;
    }
}


//      package listClasses
//        class CellRenderer
package fl.controls.listClasses 
{
    import fl.controls.*;
    import flash.events.*;
    
    public class CellRenderer extends fl.controls.LabelButton implements fl.controls.listClasses.ICellRenderer
    {
        public function CellRenderer()
        {
            super();
            toggle = true;
            focusEnabled = false;
            return;
        }

        public override function setSize(arg1:Number, arg2:Number):void
        {
            super.setSize(arg1, arg2);
            return;
        }

        public function get listData():fl.controls.listClasses.ListData
        {
            return _listData;
        }

        public function set listData(arg1:fl.controls.listClasses.ListData):void
        {
            _listData = arg1;
            label = _listData.label;
            setStyle("icon", _listData.icon);
            return;
        }

        public function get data():Object
        {
            return _data;
        }

        public function set data(arg1:Object):void
        {
            _data = arg1;
            return;
        }

        public override function get selected():Boolean
        {
            return super.selected;
        }

        public override function set selected(arg1:Boolean):void
        {
            super.selected = arg1;
            return;
        }

        protected override function toggleSelected(arg1:flash.events.MouseEvent):void
        {
            return;
        }

        protected override function drawLayout():void
        {
            var loc3:*=NaN;
            var loc1:*=Number(getStyleValue("textPadding"));
            var loc2:*=0;
            if (icon != null) 
            {
                icon.x = loc1;
                icon.y = Math.round(height - icon.height >> 1);
                loc2 = icon.width + loc1;
            }
            if (label.length > 0) 
            {
                textField.visible = true;
                loc3 = Math.max(0, width - loc2 - loc1 * 2);
                textField.width = loc3;
                textField.height = textField.textHeight + 4;
                textField.x = loc2 + loc1;
                textField.y = Math.round(height - textField.height >> 1);
            }
            else 
            {
                textField.visible = false;
            }
            background.width = width;
            background.height = height;
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"upSkin":"CellRenderer_upSkin", "downSkin":"CellRenderer_downSkin", "overSkin":"CellRenderer_overSkin", "disabledSkin":"CellRenderer_disabledSkin", "selectedDisabledSkin":"CellRenderer_selectedDisabledSkin", "selectedUpSkin":"CellRenderer_selectedUpSkin", "selectedDownSkin":"CellRenderer_selectedDownSkin", "selectedOverSkin":"CellRenderer_selectedOverSkin", "textFormat":null, "disabledTextFormat":null, "embedFonts":null, "textPadding":5};
        }

        protected var _listData:fl.controls.listClasses.ListData;

        protected var _data:Object;

        internal static var defaultStyles:Object;
    }
}


//        class ICellRenderer
package fl.controls.listClasses 
{
    public interface ICellRenderer
    {
        function set y(arg1:Number):void;

        function set x(arg1:Number):void;

        function setSize(arg1:Number, arg2:Number):void;

        function get listData():fl.controls.listClasses.ListData;

        function set listData(arg1:fl.controls.listClasses.ListData):void;

        function get data():Object;

        function set data(arg1:Object):void;

        function get selected():Boolean;

        function set selected(arg1:Boolean):void;

        function setMouseState(arg1:String):void;
    }
}


//        class ImageCell
package fl.controls.listClasses 
{
    import fl.containers.*;
    import flash.display.*;
    import flash.events.*;
    
    public class ImageCell extends fl.controls.listClasses.CellRenderer implements fl.controls.listClasses.ICellRenderer
    {
        public function ImageCell()
        {
            super();
            loader = new fl.containers.UILoader();
            loader.addEventListener(flash.events.IOErrorEvent.IO_ERROR, handleErrorEvent, false, 0, true);
            loader.autoLoad = true;
            loader.scaleContent = true;
            addChild(loader);
            return;
        }

        public override function get listData():fl.controls.listClasses.ListData
        {
            return _listData;
        }

        public override function set listData(arg1:fl.controls.listClasses.ListData):void
        {
            _listData = arg1;
            label = _listData.label;
            var loc1:*=(_listData as fl.controls.listClasses.TileListData).source;
            if (source != loc1) 
            {
                source = loc1;
            }
            return;
        }

        public function get source():Object
        {
            return loader.source;
        }

        public function set source(arg1:Object):void
        {
            loader.source = arg1;
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            textOverlay = new flash.display.Shape();
            var loc1:*=textOverlay.graphics;
            loc1.beginFill(16777215);
            loc1.drawRect(0, 0, 100, 100);
            loc1.endFill();
            return;
        }

        protected override function draw():void
        {
            super.draw();
            return;
        }

        protected override function drawLayout():void
        {
            var loc4:*=NaN;
            var loc1:*=getStyleValue("imagePadding") as Number;
            loader.move(loc1, loc1);
            var loc2:*=width - loc1 * 2;
            var loc3:*=height - loc1 * 2;
            if (!(loader.width == loc2) && !(loader.height == loc3)) 
            {
                loader.setSize(loc2, loc3);
            }
            loader.drawNow();
            if (_label == "" || _label == null) 
            {
                if (contains(textField)) 
                {
                    removeChild(textField);
                }
                if (contains(textOverlay)) 
                {
                    removeChild(textOverlay);
                }
            }
            else 
            {
                loc4 = getStyleValue("textPadding") as Number;
                textField.width = Math.min(width - loc4 * 2, textField.textWidth + 5);
                textField.height = textField.textHeight + 5;
                textField.x = Math.max(loc4, width / 2 - textField.width / 2);
                textField.y = height - textField.height - loc4;
                textOverlay.x = loc1;
                textOverlay.height = textField.height + loc4 * 2;
                textOverlay.y = height - textOverlay.height - loc1;
                textOverlay.width = width - loc1 * 2;
                textOverlay.alpha = getStyleValue("textOverlayAlpha") as Number;
                addChild(textOverlay);
                addChild(textField);
            }
            background.width = width;
            background.height = height;
            return;
        }

        protected function handleErrorEvent(arg1:flash.events.IOErrorEvent):void
        {
            dispatchEvent(arg1);
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.listClasses.CellRenderer.getStyleDefinition());
        }

        
        {
            defaultStyles = {"imagePadding":1, "textOverlayAlpha":0.7};
        }

        protected var textOverlay:flash.display.Shape;

        protected var loader:fl.containers.UILoader;

        internal static var defaultStyles:Object;
    }
}


//        class ListData
package fl.controls.listClasses 
{
    import fl.core.*;
    
    public class ListData extends Object
    {
        public function ListData(arg1:String, arg2:Object, arg3:fl.core.UIComponent, arg4:uint, arg5:uint, arg6:uint=0)
        {
            super();
            _label = arg1;
            _icon = arg2;
            _owner = arg3;
            _index = arg4;
            _row = arg5;
            _column = arg6;
            return;
        }

        public function get label():String
        {
            return _label;
        }

        public function get icon():Object
        {
            return _icon;
        }

        public function get owner():fl.core.UIComponent
        {
            return _owner;
        }

        public function get index():uint
        {
            return _index;
        }

        public function get row():uint
        {
            return _row;
        }

        public function get column():uint
        {
            return _column;
        }

        protected var _icon:Object=null;

        protected var _label:String;

        protected var _owner:fl.core.UIComponent;

        protected var _index:uint;

        protected var _row:uint;

        protected var _column:uint;
    }
}


//        class TileListData
package fl.controls.listClasses 
{
    import fl.core.*;
    
    public class TileListData extends fl.controls.listClasses.ListData
    {
        public function TileListData(arg1:String, arg2:Object, arg3:Object, arg4:fl.core.UIComponent, arg5:uint, arg6:uint, arg7:uint=0)
        {
            super(arg1, arg2, arg4, arg5, arg6, arg7);
            _source = arg3;
            return;
        }

        public function get source():Object
        {
            return _source;
        }

        protected var _source:Object;
    }
}


//      package progressBarClasses
//        class IndeterminateBar
package fl.controls.progressBarClasses 
{
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    
    public class IndeterminateBar extends fl.core.UIComponent
    {
        public function IndeterminateBar()
        {
            super();
            setSize(0, 0);
            startAnimation();
            return;
        }

        public override function get visible():Boolean
        {
            return super.visible;
        }

        public override function set visible(arg1:Boolean):void
        {
            if (arg1) 
            {
                startAnimation();
            }
            else 
            {
                stopAnimation();
            }
            super.visible = arg1;
            return;
        }

        protected function startAnimation():void
        {
            addEventListener(flash.events.Event.ENTER_FRAME, handleEnterFrame, false, 0, true);
            return;
        }

        protected function stopAnimation():void
        {
            removeEventListener(flash.events.Event.ENTER_FRAME, handleEnterFrame);
            return;
        }

        protected function handleEnterFrame(arg1:flash.events.Event):void
        {
            if (patternBmp == null) 
            {
                return;
            }
            animationCount = (animationCount + 2) % patternBmp.width;
            bar.x = -animationCount;
            return;
        }

        protected override function configUI():void
        {
            bar = new flash.display.Sprite();
            addChild(bar);
            barMask = new flash.display.Sprite();
            addChild(barMask);
            bar.mask = barMask;
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                drawPattern();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawBar();
                drawMask();
            }
            super.draw();
            return;
        }

        protected function drawPattern():void
        {
            var loc1:*=getDisplayObjectInstance(getStyleValue("indeterminateSkin"));
            if (patternBmp) 
            {
                patternBmp.dispose();
            }
            patternBmp = new flash.display.BitmapData(loc1.width << 0, loc1.height << 0, true, 0);
            patternBmp.draw(loc1);
            return;
        }

        protected function drawMask():void
        {
            var loc1:*=barMask.graphics;
            loc1.clear();
            loc1.beginFill(0, 0);
            loc1.drawRect(0, 0, _width, _height);
            loc1.endFill();
            return;
        }

        protected function drawBar():void
        {
            if (patternBmp == null) 
            {
                return;
            }
            var loc1:*=bar.graphics;
            loc1.clear();
            loc1.beginBitmapFill(patternBmp);
            loc1.drawRect(0, 0, _width + patternBmp.width, _height);
            loc1.endFill();
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"indeterminateSkin":"ProgressBar_indeterminateSkin"};
        }

        protected var animationCount:uint=0;

        protected var bar:flash.display.Sprite;

        protected var barMask:flash.display.Sprite;

        protected var patternBmp:flash.display.BitmapData;

        internal static var defaultStyles:Object;
    }
}


//      class BaseButton
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    
    public class BaseButton extends fl.core.UIComponent
    {
        public function BaseButton()
        {
            super();
            buttonMode = true;
            mouseChildren = false;
            useHandCursor = false;
            setupMouseEvents();
            setMouseState("up");
            pressTimer = new flash.utils.Timer(1, 0);
            pressTimer.addEventListener(flash.events.TimerEvent.TIMER, buttonDown, false, 0, true);
            return;
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            mouseEnabled = arg1;
            return;
        }

        public function get selected():Boolean
        {
            return _selected;
        }

        public function set selected(arg1:Boolean):void
        {
            if (_selected == arg1) 
            {
                return;
            }
            _selected = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get autoRepeat():Boolean
        {
            return _autoRepeat;
        }

        public function set autoRepeat(arg1:Boolean):void
        {
            _autoRepeat = arg1;
            return;
        }

        public function set mouseStateLocked(arg1:Boolean):void
        {
            _mouseStateLocked = arg1;
            if (arg1 != false) 
            {
                unlockedMouseState = mouseState;
            }
            else 
            {
                setMouseState(unlockedMouseState);
            }
            return;
        }

        public function setMouseState(arg1:String):void
        {
            if (_mouseStateLocked) 
            {
                unlockedMouseState = arg1;
                return;
            }
            if (mouseState == arg1) 
            {
                return;
            }
            mouseState = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        protected function setupMouseEvents():void
        {
            addEventListener(flash.events.MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true);
            addEventListener(flash.events.MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true);
            addEventListener(flash.events.MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true);
            addEventListener(flash.events.MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true);
            return;
        }

        protected function mouseEventHandler(arg1:flash.events.MouseEvent):void
        {
            if (arg1.type != flash.events.MouseEvent.MOUSE_DOWN) 
            {
                if (arg1.type == flash.events.MouseEvent.ROLL_OVER || arg1.type == flash.events.MouseEvent.MOUSE_UP) 
                {
                    setMouseState("over");
                    endPress();
                }
                else if (arg1.type == flash.events.MouseEvent.ROLL_OUT) 
                {
                    setMouseState("up");
                    endPress();
                }
            }
            else 
            {
                setMouseState("down");
                startPress();
            }
            return;
        }

        protected function startPress():void
        {
            if (_autoRepeat) 
            {
                pressTimer.delay = Number(getStyleValue("repeatDelay"));
                pressTimer.start();
            }
            dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.BUTTON_DOWN, true));
            return;
        }

        protected function buttonDown(arg1:flash.events.TimerEvent):void
        {
            if (!_autoRepeat) 
            {
                endPress();
                return;
            }
            if (pressTimer.currentCount == 1) 
            {
                pressTimer.delay = Number(getStyleValue("repeatInterval"));
            }
            dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.BUTTON_DOWN, true));
            return;
        }

        protected function endPress():void
        {
            pressTimer.reset();
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                drawBackground();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
            }
            super.draw();
            return;
        }

        protected function drawBackground():void
        {
            var loc1:*=enabled ? mouseState : "disabled";
            if (selected) 
            {
                loc1 = "selected" + loc1.substr(0, 1).toUpperCase() + loc1.substr(1);
            }
            loc1 = loc1 + "Skin";
            var loc2:*=background;
            background = getDisplayObjectInstance(getStyleValue(loc1));
            addChildAt(background, 0);
            if (!(loc2 == null) && !(loc2 == background)) 
            {
                removeChild(loc2);
            }
            return;
        }

        protected function drawLayout():void
        {
            background.width = width;
            background.height = height;
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"upSkin":"Button_upSkin", "downSkin":"Button_downSkin", "overSkin":"Button_overSkin", "disabledSkin":"Button_disabledSkin", "selectedDisabledSkin":"Button_selectedDisabledSkin", "selectedUpSkin":"Button_selectedUpSkin", "selectedDownSkin":"Button_selectedDownSkin", "selectedOverSkin":"Button_selectedOverSkin", "focusRectSkin":null, "focusRectPadding":null, "repeatDelay":500, "repeatInterval":35};
        }

        protected var background:flash.display.DisplayObject;

        protected var mouseState:String;

        protected var _selected:Boolean=false;

        protected var _autoRepeat:Boolean=false;

        protected var pressTimer:flash.utils.Timer;

        internal var _mouseStateLocked:Boolean=false;

        internal var unlockedMouseState:String;

        internal static var defaultStyles:Object;
    }
}


//      class Button
package fl.controls 
{
    import fl.core.*;
    import fl.managers.*;
    import flash.display.*;
    
    public class Button extends fl.controls.LabelButton implements fl.managers.IFocusManagerComponent
    {
        public function Button()
        {
            super();
            return;
        }

        public function get emphasized():Boolean
        {
            return _emphasized;
        }

        public function set emphasized(arg1:Boolean):void
        {
            _emphasized = arg1;
            invalidate(fl.core.InvalidationType.STYLES);
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES) || isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawEmphasized();
            }
            super.draw();
            if (emphasizedBorder != null) 
            {
                setChildIndex(emphasizedBorder, (numChildren - 1));
            }
            return;
        }

        protected function drawEmphasized():void
        {
            var loc2:*=NaN;
            if (emphasizedBorder != null) 
            {
                removeChild(emphasizedBorder);
            }
            emphasizedBorder = null;
            if (!_emphasized) 
            {
                return;
            }
            var loc1:*=getStyleValue("emphasizedSkin");
            if (loc1 != null) 
            {
                emphasizedBorder = getDisplayObjectInstance(loc1);
            }
            if (emphasizedBorder != null) 
            {
                addChildAt(emphasizedBorder, 0);
                loc2 = Number(getStyleValue("emphasizedPadding"));
                var loc3:*;
                emphasizedBorder.y = loc3 = -loc2;
                emphasizedBorder.x = loc3;
                emphasizedBorder.width = width + loc2 * 2;
                emphasizedBorder.height = height + loc2 * 2;
            }
            return;
        }

        public override function drawFocus(arg1:Boolean):void
        {
            var loc1:*=NaN;
            var loc2:*=undefined;
            super.drawFocus(arg1);
            if (arg1) 
            {
                loc1 = Number(getStyleValue("emphasizedPadding"));
                if (loc1 < 0 || !_emphasized) 
                {
                    loc1 = 0;
                }
                loc2 = getStyleValue("focusRectPadding");
                loc2 = loc2 != null ? loc2 : 2;
                loc2 = loc2 + loc1;
                uiFocusRect.x = -loc2;
                uiFocusRect.y = -loc2;
                uiFocusRect.width = width + loc2 * 2;
                uiFocusRect.height = height + loc2 * 2;
            }
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.Button.createAccessibilityImplementation != null) 
            {
                fl.controls.Button.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return fl.core.UIComponent.mergeStyles(fl.controls.LabelButton.getStyleDefinition(), defaultStyles);
        }

        
        {
            defaultStyles = {"emphasizedSkin":"Button_emphasizedSkin", "emphasizedPadding":2};
        }

        protected var _emphasized:Boolean=false;

        protected var emphasizedBorder:flash.display.DisplayObject;

        internal static var defaultStyles:Object;

        public static var createAccessibilityImplementation:Function;
    }
}


//      class ButtonLabelPlacement
package fl.controls 
{
    public class ButtonLabelPlacement extends Object
    {
        public function ButtonLabelPlacement()
        {
            super();
            return;
        }

        public static const BOTTOM:String="bottom";

        public static const TOP:String="top";

        public static const LEFT:String="left";

        public static const RIGHT:String="right";
    }
}


//      class CheckBox
package fl.controls 
{
    import flash.display.*;
    
    public class CheckBox extends fl.controls.LabelButton
    {
        public function CheckBox()
        {
            super();
            return;
        }

        public override function get toggle():Boolean
        {
            return true;
        }

        public override function set toggle(arg1:Boolean):void
        {
            throw new Error("Warning: You cannot change a CheckBox\'s toggle.");
        }

        public override function get autoRepeat():Boolean
        {
            return false;
        }

        public override function set autoRepeat(arg1:Boolean):void
        {
            return;
        }

        protected override function drawLayout():void
        {
            super.drawLayout();
            var loc1:*=Number(getStyleValue("textPadding"));
            var loc2:*=_labelPlacement;
            switch (loc2) 
            {
                case fl.controls.ButtonLabelPlacement.RIGHT:
                {
                    icon.x = loc1;
                    textField.x = icon.x + (icon.width + loc1);
                    background.width = textField.x + textField.width + loc1;
                    background.height = Math.max(textField.height, icon.height) + loc1 * 2;
                    break;
                }
                case fl.controls.ButtonLabelPlacement.LEFT:
                {
                    icon.x = width - icon.width - loc1;
                    textField.x = width - icon.width - loc1 * 2 - textField.width;
                    background.width = textField.width + icon.width + loc1 * 3;
                    background.height = Math.max(textField.height, icon.height) + loc1 * 2;
                    break;
                }
                case fl.controls.ButtonLabelPlacement.TOP:
                case fl.controls.ButtonLabelPlacement.BOTTOM:
                {
                    background.width = Math.max(textField.width, icon.width) + loc1 * 2;
                    background.height = textField.height + icon.height + loc1 * 3;
                    break;
                }
            }
            background.x = Math.min(icon.x - loc1, textField.x - loc1);
            background.y = Math.min(icon.y - loc1, textField.y - loc1);
            return;
        }

        protected override function drawBackground():void
        {
            return;
        }

        public override function drawFocus(arg1:Boolean):void
        {
            var loc1:*=NaN;
            super.drawFocus(arg1);
            if (arg1) 
            {
                loc1 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = background.x - loc1;
                uiFocusRect.y = background.y - loc1;
                uiFocusRect.width = background.width + (loc1 << 1);
                uiFocusRect.height = background.height + (loc1 << 1);
            }
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.CheckBox.createAccessibilityImplementation != null) 
            {
                fl.controls.CheckBox.createAccessibilityImplementation(this);
            }
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            super.toggle = true;
            var loc1:*=new flash.display.Shape();
            var loc2:*=loc1.graphics;
            loc2.beginFill(0, 0);
            loc2.drawRect(0, 0, 100, 100);
            loc2.endFill();
            background = loc1 as flash.display.DisplayObject;
            addChildAt(background, 0);
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"icon":null, "upIcon":"CheckBox_upIcon", "downIcon":"CheckBox_downIcon", "overIcon":"CheckBox_overIcon", "disabledIcon":"CheckBox_disabledIcon", "selectedDisabledIcon":"CheckBox_selectedDisabledIcon", "focusRectSkin":null, "focusRectPadding":null, "selectedUpIcon":"CheckBox_selectedUpIcon", "selectedDownIcon":"CheckBox_selectedDownIcon", "selectedOverIcon":"CheckBox_selectedOverIcon", "textFormat":null, "disabledTextFormat":null, "embedFonts":null, "textPadding":5};
        }

        internal static var defaultStyles:Object;

        public static var createAccessibilityImplementation:Function;
    }
}


//      class ColorPicker
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.ui.*;
    
    public class ColorPicker extends fl.core.UIComponent implements fl.managers.IFocusManagerComponent
    {
        public function ColorPicker()
        {
            super();
            return;
        }

        protected function positionTextField():void
        {
            if (!showTextField) 
            {
                return;
            }
            var loc1:*=getStyleValue("backgroundPadding") as Number;
            var loc2:*=getStyleValue("textPadding") as Number;
            textFieldBG.x = paletteBG.x + loc1;
            textFieldBG.y = paletteBG.y + loc1;
            textField.x = textFieldBG.x + loc2;
            textField.y = textFieldBG.y + loc2;
            return;
        }

        protected function setColorDisplay():void
        {
            if (!swatchMap.length) 
            {
                return;
            }
            var loc1:*=new flash.geom.ColorTransform(0, 0, 0, 1, _selectedColor >> 16, _selectedColor >> 8 & 255, _selectedColor & 255, 0);
            setColorWellColor(loc1);
            setColorText(_selectedColor);
            var loc2:*=findSwatch(_selectedColor);
            setSwatchHighlight(loc2);
            if (swatchMap.length && colorHash[_selectedColor] == undefined) 
            {
                cleanUpSelected();
            }
            return;
        }

        protected function setSwatchHighlight(arg1:flash.display.Sprite):void
        {
            if (arg1 == null) 
            {
                if (palette.contains(swatchSelectedSkin)) 
                {
                    palette.removeChild(swatchSelectedSkin);
                }
                return;
            }
            if (!palette.contains(swatchSelectedSkin) && colors.length > 0) 
            {
                palette.addChild(swatchSelectedSkin);
            }
            else if (!colors.length) 
            {
                return;
            }
            var loc1:*=getStyleValue("swatchPadding") as Number;
            palette.setChildIndex(swatchSelectedSkin, (palette.numChildren - 1));
            swatchSelectedSkin.x = (swatches.x + arg1.x - 1);
            swatchSelectedSkin.y = (swatches.y + arg1.y - 1);
            var loc2:*=arg1.getChildByName("color").transform.colorTransform.color;
            currColIndex = colorHash[loc2].col;
            currRowIndex = colorHash[loc2].row;
            return;
        }

        protected function findSwatch(arg1:uint):flash.display.Sprite
        {
            if (!swatchMap.length) 
            {
                return null;
            }
            var loc1:*=colorHash[arg1];
            if (loc1 != null) 
            {
                return loc1.swatch;
            }
            return null;
        }

        protected function onSwatchClick(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target.getChildByName("color").transform.colorTransform;
            _selectedColor = loc1.color;
            dispatchEvent(new fl.events.ColorPickerEvent(fl.events.ColorPickerEvent.CHANGE, selectedColor));
            close();
            return;
        }

        protected function onSwatchOver(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target.getChildByName("color") as fl.controls.BaseButton;
            var loc2:*=loc1.transform.colorTransform;
            setColorWellColor(loc2);
            setSwatchHighlight(arg1.target as flash.display.Sprite);
            setColorText(loc2.color);
            dispatchEvent(new fl.events.ColorPickerEvent(fl.events.ColorPickerEvent.ITEM_ROLL_OVER, loc2.color));
            return;
        }

        protected function onSwatchOut(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target.transform.colorTransform;
            dispatchEvent(new fl.events.ColorPickerEvent(fl.events.ColorPickerEvent.ITEM_ROLL_OUT, loc1.color));
            return;
        }

        protected function setColorText(arg1:uint):void
        {
            if (textField == null) 
            {
                return;
            }
            textField.text = "#" + colorToString(arg1);
            return;
        }

        protected function setStyles():void
        {
            var loc1:*=colorWell;
            var loc2:*=getStyleValue("colorWell");
            if (loc2 != null) 
            {
                colorWell = getDisplayObjectInstance(loc2) as flash.display.DisplayObject;
            }
            addChildAt(colorWell, getChildIndex(swatchButton));
            copyStylesToChild(swatchButton, POPUP_BUTTON_STYLES);
            swatchButton.drawNow();
            if (!(loc1 == null) && contains(loc1) && !(loc1 == colorWell)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected function colorToString(arg1:uint):String
        {
            var loc1:*=arg1.toString(16);
            while (loc1.length < 6) 
            {
                loc1 = "0" + loc1;
            }
            return loc1;
        }

        protected function setColorWellColor(arg1:flash.geom.ColorTransform):void
        {
            if (!colorWell) 
            {
                return;
            }
            colorWell.transform.colorTransform = arg1;
            return;
        }

        protected function createSwatch(arg1:uint):flash.display.Sprite
        {
            var loc1:*=new flash.display.Sprite();
            var loc2:*=new fl.controls.BaseButton();
            loc2.focusEnabled = false;
            var loc3:*=getStyleValue("swatchWidth") as Number;
            var loc4:*=getStyleValue("swatchHeight") as Number;
            loc2.setSize(loc3, loc4);
            loc2.transform.colorTransform = new flash.geom.ColorTransform(0, 0, 0, 1, arg1 >> 16, arg1 >> 8 & 255, arg1 & 255, 0);
            copyStylesToChild(loc2, SWATCH_STYLES);
            loc2.mouseEnabled = false;
            loc2.drawNow();
            loc2.name = "color";
            loc1.addChild(loc2);
            var loc5:*=getStyleValue("swatchPadding") as Number;
            var loc6:*;
            (loc6 = loc1.graphics).beginFill(0);
            loc6.drawRect(-loc5, -loc5, loc3 + loc5 * 2, loc4 + loc5 * 2);
            loc6.endFill();
            loc1.addEventListener(flash.events.MouseEvent.CLICK, onSwatchClick, false, 0, true);
            loc1.addEventListener(flash.events.MouseEvent.MOUSE_OVER, onSwatchOver, false, 0, true);
            loc1.addEventListener(flash.events.MouseEvent.MOUSE_OUT, onSwatchOut, false, 0, true);
            return loc1;
        }

        protected function addStageListener(arg1:flash.events.Event=null):void
        {
            focusManager.form.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, onStageClick, false, 0, true);
            return;
        }

        protected function removeStageListener(arg1:flash.events.Event=null):void
        {
            focusManager.form.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, onStageClick, false);
            return;
        }

        protected override function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            super.focusInHandler(arg1);
            setIMEMode(true);
            return;
        }

        protected override function isOurFocus(arg1:flash.display.DisplayObject):Boolean
        {
            return arg1 == textField || super.isOurFocus(arg1);
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc2:*=null;
            var loc3:*=arg1.keyCode;
            switch (loc3) 
            {
                case flash.ui.Keyboard.SHIFT:
                case flash.ui.Keyboard.CONTROL:
                {
                    return;
                }
            }
            if (arg1.ctrlKey) 
            {
                loc3 = arg1.keyCode;
                switch (loc3) 
                {
                    case flash.ui.Keyboard.DOWN:
                    {
                        open();
                        break;
                    }
                    case flash.ui.Keyboard.UP:
                    {
                        close();
                        break;
                    }
                }
                return;
            }
            if (!isOpen) 
            {
                loc3 = arg1.keyCode;
                switch (loc3) 
                {
                    case flash.ui.Keyboard.UP:
                    case flash.ui.Keyboard.DOWN:
                    case flash.ui.Keyboard.LEFT:
                    case flash.ui.Keyboard.RIGHT:
                    case flash.ui.Keyboard.SPACE:
                    {
                        open();
                        return;
                    }
                }
            }
            textField.maxChars = arg1.keyCode == "#".charCodeAt(0) || textField.text.indexOf("#") > -1 ? 7 : 6;
            loc3 = arg1.keyCode;
            switch (loc3) 
            {
                case flash.ui.Keyboard.TAB:
                {
                    loc2 = findSwatch(_selectedColor);
                    setSwatchHighlight(loc2);
                    return;
                }
                case flash.ui.Keyboard.HOME:
                {
                    currRowIndex = loc3 = 0;
                    currColIndex = loc3;
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    currColIndex = (swatchMap[(swatchMap.length - 1)].length - 1);
                    currRowIndex = (swatchMap.length - 1);
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    currRowIndex = (swatchMap.length - 1);
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    currRowIndex = 0;
                    break;
                }
                case flash.ui.Keyboard.ESCAPE:
                {
                    if (isOpen) 
                    {
                        selectedColor = _selectedColor;
                    }
                    close();
                    return;
                }
                case flash.ui.Keyboard.ENTER:
                {
                    return;
                }
                case flash.ui.Keyboard.UP:
                {
                    currRowIndex = Math.max(-1, (currRowIndex - 1));
                    if (currRowIndex == -1) 
                    {
                        currRowIndex = (swatchMap.length - 1);
                    }
                    break;
                }
                case flash.ui.Keyboard.DOWN:
                {
                    currRowIndex = Math.min(swatchMap.length, currRowIndex + 1);
                    if (currRowIndex == swatchMap.length) 
                    {
                        currRowIndex = 0;
                    }
                    break;
                }
                case flash.ui.Keyboard.RIGHT:
                {
                    currColIndex = Math.min(swatchMap[currRowIndex].length, currColIndex + 1);
                    if (currColIndex == swatchMap[currRowIndex].length) 
                    {
                        currColIndex = 0;
                        currRowIndex = Math.min(swatchMap.length, currRowIndex + 1);
                        if (currRowIndex == swatchMap.length) 
                        {
                            currRowIndex = 0;
                        }
                    }
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                {
                    currColIndex = Math.max(-1, (currColIndex - 1));
                    if (currColIndex == -1) 
                    {
                        currColIndex = (swatchMap[currRowIndex].length - 1);
                        currRowIndex = Math.max(-1, (currRowIndex - 1));
                        if (currRowIndex == -1) 
                        {
                            currRowIndex = (swatchMap.length - 1);
                        }
                    }
                    break;
                }
                default:
                {
                    return;
                }
            }
            var loc1:*=swatchMap[currRowIndex][currColIndex].getChildByName("color").transform.colorTransform;
            rollOverColor = loc1.color;
            setColorWellColor(loc1);
            setSwatchHighlight(swatchMap[currRowIndex][currColIndex]);
            setColorText(loc1.color);
            return;
        }

        protected override function configUI():void
        {
            var loc1:*=0;
            super.configUI();
            tabChildren = false;
            if (ColorPicker.defaultColors == null) 
            {
                ColorPicker.defaultColors = [];
                loc1 = 0;
                while (loc1 < 216) 
                {
                    ColorPicker.defaultColors.push(((loc1 / 6 % 3 << 0) + (loc1 / 108 << 0) * 3) * 51 << 16 | loc1 % 6 * 51 << 8 | (loc1 / 18 << 0) % 6 * 51);
                    ++loc1;
                }
            }
            colorHash = {};
            swatchMap = [];
            textField = new flash.text.TextField();
            textField.tabEnabled = false;
            swatchButton = new fl.controls.BaseButton();
            swatchButton.focusEnabled = false;
            swatchButton.useHandCursor = false;
            swatchButton.autoRepeat = false;
            swatchButton.setSize(25, 25);
            swatchButton.addEventListener(flash.events.MouseEvent.CLICK, onPopupButtonClick, false, 0, true);
            addChild(swatchButton);
            palette = new flash.display.Sprite();
            palette.tabChildren = false;
            palette.cacheAsBitmap = true;
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"upSkin":"ColorPicker_upSkin", "disabledSkin":"ColorPicker_disabledSkin", "overSkin":"ColorPicker_overSkin", "downSkin":"ColorPicker_downSkin", "colorWell":"ColorPicker_colorWell", "swatchSkin":"ColorPicker_swatchSkin", "swatchSelectedSkin":"ColorPicker_swatchSelectedSkin", "swatchWidth":10, "swatchHeight":10, "columnCount":18, "swatchPadding":1, "textFieldSkin":"ColorPicker_textFieldSkin", "textFieldWidth":null, "textFieldHeight":null, "textPadding":3, "background":"ColorPicker_backgroundSkin", "backgroundPadding":5, "textFormat":null, "focusRectSkin":null, "focusRectPadding":null, "embedFonts":false};
        }

        public function get selectedColor():uint
        {
            if (colorWell == null) 
            {
                return 0;
            }
            return colorWell.transform.colorTransform.color;
        }

        public function set selectedColor(arg1:uint):void
        {
            if (!_enabled) 
            {
                return;
            }
            _selectedColor = arg1;
            rollOverColor = -1;
            var loc2:*;
            currRowIndex = loc2 = 0;
            currColIndex = loc2;
            var loc1:*=new flash.geom.ColorTransform();
            loc1.color = arg1;
            setColorWellColor(loc1);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get hexValue():String
        {
            if (colorWell == null) 
            {
                return colorToString(0);
            }
            return colorToString(colorWell.transform.colorTransform.color);
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            if (!arg1) 
            {
                close();
            }
            swatchButton.enabled = arg1;
            return;
        }

        public function get editable():Boolean
        {
            return _editable;
        }

        public function set editable(arg1:Boolean):void
        {
            _editable = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get showTextField():Boolean
        {
            return _showTextField;
        }

        public function set showTextField(arg1:Boolean):void
        {
            invalidate(fl.core.InvalidationType.STYLES);
            _showTextField = arg1;
            return;
        }

        public function get colors():Array
        {
            return customColors == null ? ColorPicker.defaultColors : customColors;
        }

        public function set colors(arg1:Array):void
        {
            customColors = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get imeMode():String
        {
            return _imeMode;
        }

        public function set imeMode(arg1:String):void
        {
            _imeMode = arg1;
            return;
        }

        public function open():void
        {
            if (!_enabled) 
            {
                return;
            }
            doOpen = true;
            var loc1:*=focusManager;
            if (loc1) 
            {
                loc1.defaultButtonEnabled = false;
            }
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function close():void
        {
            if (isOpen) 
            {
                focusManager.form.removeChild(palette);
                isOpen = false;
                dispatchEvent(new flash.events.Event(flash.events.Event.CLOSE));
            }
            var loc1:*=focusManager;
            if (loc1) 
            {
                loc1.defaultButtonEnabled = true;
            }
            removeStageListener();
            cleanUpSelected();
            return;
        }

        internal function addCloseListener(arg1:flash.events.Event):*
        {
            removeEventListener(flash.events.Event.ENTER_FRAME, addCloseListener);
            if (!isOpen) 
            {
                return;
            }
            addStageListener();
            return;
        }

        protected function onStageClick(arg1:flash.events.MouseEvent):void
        {
            if (!contains(arg1.target as flash.display.DisplayObject) && !palette.contains(arg1.target as flash.display.DisplayObject)) 
            {
                selectedColor = _selectedColor;
                close();
            }
            return;
        }

        protected override function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            if (arg1.relatedObject == textField) 
            {
                setFocus();
                return;
            }
            if (isOpen) 
            {
                close();
            }
            super.focusOutHandler(arg1);
            setIMEMode(false);
            return;
        }

        protected function cleanUpSelected():void
        {
            if (swatchSelectedSkin && palette.contains(swatchSelectedSkin)) 
            {
                palette.removeChild(swatchSelectedSkin);
            }
            return;
        }

        protected function onPopupButtonClick(arg1:flash.events.MouseEvent):void
        {
            if (isOpen) 
            {
                close();
            }
            else 
            {
                open();
            }
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.DATA)) 
            {
                setStyles();
                drawPalette();
                setEmbedFonts();
                invalidate(fl.core.InvalidationType.DATA, false);
                invalidate(fl.core.InvalidationType.STYLES, false);
            }
            if (isInvalid(fl.core.InvalidationType.DATA)) 
            {
                drawSwatchHighlight();
                setColorDisplay();
            }
            if (isInvalid(fl.core.InvalidationType.STATE)) 
            {
                setTextEditable();
                if (doOpen) 
                {
                    doOpen = false;
                    showPalette();
                }
                colorWell.visible = enabled;
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STYLES)) 
            {
                swatchButton.setSize(width, height);
                swatchButton.drawNow();
                colorWell.width = width;
                colorWell.height = height;
            }
            super.draw();
            return;
        }

        protected function showPalette():void
        {
            if (isOpen) 
            {
                positionPalette();
                return;
            }
            addEventListener(flash.events.Event.ENTER_FRAME, addCloseListener, false, 0, true);
            focusManager.form.addChild(palette);
            isOpen = true;
            positionPalette();
            dispatchEvent(new flash.events.Event(flash.events.Event.OPEN));
            stage.focus = textField;
            var loc1:*=selectedSwatch;
            if (loc1 == null) 
            {
                loc1 = findSwatch(_selectedColor);
            }
            setSwatchHighlight(loc1);
            return;
        }

        protected function setEmbedFonts():void
        {
            var loc1:*=getStyleValue("embedFonts");
            if (loc1 != null) 
            {
                textField.embedFonts = loc1;
            }
            return;
        }

        protected function drawSwatchHighlight():void
        {
            cleanUpSelected();
            var loc1:*=getStyleValue("swatchSelectedSkin");
            var loc2:*=getStyleValue("swatchPadding") as Number;
            if (loc1 != null) 
            {
                swatchSelectedSkin = getDisplayObjectInstance(loc1);
                swatchSelectedSkin.x = 0;
                swatchSelectedSkin.y = 0;
                swatchSelectedSkin.width = (getStyleValue("swatchWidth") as Number) + 2;
                swatchSelectedSkin.height = (getStyleValue("swatchHeight") as Number) + 2;
            }
            return;
        }

        protected function drawPalette():void
        {
            if (isOpen) 
            {
                focusManager.form.removeChild(palette);
            }
            palette = new flash.display.Sprite();
            drawTextField();
            drawSwatches();
            drawBG();
            return;
        }

        protected function drawTextField():void
        {
            if (!showTextField) 
            {
                return;
            }
            var loc1:*=getStyleValue("backgroundPadding") as Number;
            var loc2:*=getStyleValue("textPadding") as Number;
            textFieldBG = getDisplayObjectInstance(getStyleValue("textFieldSkin"));
            if (textFieldBG != null) 
            {
                palette.addChild(textFieldBG);
                var loc6:*;
                textFieldBG.y = loc6 = loc1;
                textFieldBG.x = loc6;
            }
            var loc3:*=fl.core.UIComponent.getStyleDefinition();
            var loc4:*=enabled ? loc3.defaultTextFormat as flash.text.TextFormat : loc3.defaultDisabledTextFormat as flash.text.TextFormat;
            textField.setTextFormat(loc4);
            var loc5:*;
            if ((loc5 = getStyleValue("textFormat") as flash.text.TextFormat) == null) 
            {
                loc5 = loc4;
            }
            else 
            {
                textField.setTextFormat(loc5);
            }
            textField.defaultTextFormat = loc5;
            setEmbedFonts();
            textField.restrict = "A-Fa-f0-9#";
            textField.maxChars = 6;
            palette.addChild(textField);
            textField.text = " #888888 ";
            textField.height = textField.textHeight + 3;
            textField.width = textField.textWidth + 3;
            textField.text = "";
            textField.y = loc6 = loc1 + loc2;
            textField.x = loc6;
            textFieldBG.width = textField.width + loc2 * 2;
            textFieldBG.height = textField.height + loc2 * 2;
            setTextEditable();
            return;
        }

        protected function drawSwatches():void
        {
            var loc10:*=null;
            var loc1:*=getStyleValue("backgroundPadding") as Number;
            var loc2:*=showTextField ? textFieldBG.y + textFieldBG.height + loc1 : loc1;
            swatches = new flash.display.Sprite();
            palette.addChild(swatches);
            swatches.x = loc1;
            swatches.y = loc2;
            var loc3:*=getStyleValue("columnCount") as uint;
            var loc4:*=getStyleValue("swatchPadding") as uint;
            var loc5:*=getStyleValue("swatchWidth") as Number;
            var loc6:*=getStyleValue("swatchHeight") as Number;
            colorHash = {};
            swatchMap = [];
            var loc7:*=Math.min(1024, colors.length);
            var loc8:*=-1;
            var loc9:*=0;
            while (loc9 < loc7) 
            {
                (loc10 = createSwatch(colors[loc9])).x = (loc5 + loc4) * loc9 % loc3;
                if (loc10.x != 0) 
                {
                    swatchMap[loc8].push(loc10);
                }
                else 
                {
                    swatchMap.push([loc10]);
                    ++loc8;
                }
                colorHash[colors[loc9]] = {"swatch":loc10, "row":loc8, "col":(swatchMap[loc8].length - 1)};
                loc10.y = Math.floor(loc9 / loc3) * (loc6 + loc4);
                swatches.addChild(loc10);
                ++loc9;
            }
            return;
        }

        protected function drawBG():void
        {
            var loc1:*=getStyleValue("background");
            if (loc1 != null) 
            {
                paletteBG = getDisplayObjectInstance(loc1) as flash.display.Sprite;
            }
            if (paletteBG == null) 
            {
                return;
            }
            var loc2:*=Number(getStyleValue("backgroundPadding"));
            paletteBG.width = Math.max(showTextField ? textFieldBG.width : 0, swatches.width) + loc2 * 2;
            paletteBG.height = swatches.y + swatches.height + loc2;
            palette.addChildAt(paletteBG, 0);
            return;
        }

        protected function positionPalette():void
        {
            var p:flash.geom.Point;
            var myForm:flash.display.DisplayObjectContainer;
            var padding:Number;
            var theStageHeight:Number;
            var theStageWidth:Number;

            var loc1:*;
            myForm = null;
            theStageHeight = NaN;
            theStageWidth = NaN;
            p = swatchButton.localToGlobal(new flash.geom.Point(0, 0));
            myForm = focusManager.form;
            p = myForm.globalToLocal(p);
            padding = getStyleValue("backgroundPadding") as Number;
            try 
            {
                theStageHeight = stage.stageHeight;
                theStageWidth = stage.stageWidth;
            }
            catch (se:SecurityError)
            {
                theStageHeight = myForm.height;
                theStageWidth = myForm.width;
            }
            if (p.x + palette.width > theStageWidth) 
            {
                palette.x = p.x - palette.width << 0;
            }
            else 
            {
                palette.x = p.x + swatchButton.width + padding << 0;
            }
            palette.y = Math.max(0, Math.min(p.y, theStageHeight - palette.height)) << 0;
            return;
        }

        protected function setTextEditable():void
        {
            if (!showTextField) 
            {
                return;
            }
            textField.type = editable ? flash.text.TextFieldType.INPUT : flash.text.TextFieldType.DYNAMIC;
            textField.selectable = editable;
            return;
        }

        protected override function keyUpHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc1:*=0;
            var loc3:*=null;
            var loc4:*=null;
            if (!isOpen) 
            {
                return;
            }
            var loc2:*=new flash.geom.ColorTransform();
            if (editable && showTextField) 
            {
                if ((loc3 = textField.text).indexOf("#") > -1) 
                {
                    loc3 = (loc3 = loc3.replace(new RegExp("^\\s+|\\s+$", "g"), "")).replace(new RegExp("#", "g"), "");
                }
                loc1 = parseInt(loc3, 16);
                loc4 = findSwatch(loc1);
                setSwatchHighlight(loc4);
                loc2.color = loc1;
                setColorWellColor(loc2);
            }
            else 
            {
                loc1 = rollOverColor;
                loc2.color = loc1;
            }
            if (arg1.keyCode != flash.ui.Keyboard.ENTER) 
            {
                return;
            }
            dispatchEvent(new fl.events.ColorPickerEvent(fl.events.ColorPickerEvent.ENTER, loc1));
            _selectedColor = rollOverColor;
            setColorText(loc2.color);
            rollOverColor = loc2.color;
            dispatchEvent(new fl.events.ColorPickerEvent(fl.events.ColorPickerEvent.CHANGE, selectedColor));
            close();
            return;
        }

        protected static const POPUP_BUTTON_STYLES:Object={"disabledSkin":"disabledSkin", "downSkin":"downSkin", "overSkin":"overSkin", "upSkin":"upSkin"};

        protected static const SWATCH_STYLES:Object={"disabledSkin":"swatchSkin", "downSkin":"swatchSkin", "overSkin":"swatchSkin", "upSkin":"swatchSkin"};

        public var textField:flash.text.TextField;

        protected var customColors:Array;

        protected var colorHash:Object;

        protected var paletteBG:flash.display.DisplayObject;

        protected var selectedSwatch:flash.display.Sprite;

        protected var _selectedColor:uint;

        protected var rollOverColor:int=-1;

        protected var _editable:Boolean=true;

        protected var isOpen:Boolean=false;

        protected var doOpen:Boolean=false;

        protected var swatchButton:fl.controls.BaseButton;

        protected var colorWell:flash.display.DisplayObject;

        protected var swatchSelectedSkin:flash.display.DisplayObject;

        protected var palette:flash.display.Sprite;

        protected var textFieldBG:flash.display.DisplayObject;

        protected var swatches:flash.display.Sprite;

        protected var swatchMap:Array;

        protected var currRowIndex:int;

        protected var currColIndex:int;

        internal static var defaultStyles:Object;

        protected var _showTextField:Boolean=true;

        public static var defaultColors:Array;
    }
}


//      class ComboBox
package fl.controls 
{
    import fl.controls.listClasses.*;
    import fl.core.*;
    import fl.data.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.text.*;
    import flash.ui.*;
    
    public class ComboBox extends fl.core.UIComponent implements fl.managers.IFocusManagerComponent
    {
        public function ComboBox()
        {
            super();
            return;
        }

        protected function onEnter(arg1:fl.events.ComponentEvent):void
        {
            arg1.stopPropagation();
            return;
        }

        protected function onToggleListVisibility(arg1:flash.events.MouseEvent):void
        {
            arg1.stopPropagation();
            dispatchEvent(arg1);
            if (isOpen) 
            {
                close();
            }
            else 
            {
                open();
                focusManager.form.addEventListener(flash.events.MouseEvent.MOUSE_UP, onListItemUp, false, 0, true);
            }
            return;
        }

        protected function onListItemUp(arg1:flash.events.MouseEvent):void
        {
            focusManager.form.removeEventListener(flash.events.MouseEvent.MOUSE_UP, onListItemUp);
            if (!(arg1.target is fl.controls.listClasses.ICellRenderer) || !list.contains(arg1.target as flash.display.DisplayObject)) 
            {
                return;
            }
            editableValue = null;
            var loc1:*=selectedIndex;
            selectedIndex = arg1.target.listData.index;
            if (loc1 != selectedIndex) 
            {
                dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
            }
            close();
            return;
        }

        protected function onListChange(arg1:flash.events.Event):void
        {
            editableValue = null;
            dispatchEvent(arg1);
            invalidate(fl.core.InvalidationType.SELECTED);
            if (isKeyDown) 
            {
                return;
            }
            close();
            return;
        }

        protected function onStageClick(arg1:flash.events.MouseEvent):void
        {
            if (!isOpen) 
            {
                return;
            }
            if (!contains(arg1.target as flash.display.DisplayObject) && !list.contains(arg1.target as flash.display.DisplayObject)) 
            {
                if (highlightedCell != -1) 
                {
                    selectedIndex = highlightedCell;
                    dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
                }
                close();
            }
            return;
        }

        protected function passEvent(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            return;
        }

        internal function addCloseListener(arg1:flash.events.Event):*
        {
            removeEventListener(flash.events.Event.ENTER_FRAME, addCloseListener);
            if (!isOpen) 
            {
                return;
            }
            focusManager.form.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, onStageClick, false, 0, true);
            return;
        }

        protected function onTextInput(arg1:flash.events.Event):void
        {
            arg1.stopPropagation();
            if (!_editable) 
            {
                return;
            }
            editableValue = inputField.text;
            selectedIndex = -1;
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
            return;
        }

        protected function calculateAvailableHeight():Number
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            return list.height - loc1 * 2;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            isKeyDown = true;
            if (arg1.ctrlKey) 
            {
                var loc5:*=arg1.keyCode;
                switch (loc5) 
                {
                    case flash.ui.Keyboard.UP:
                    {
                        if (highlightedCell > -1) 
                        {
                            selectedIndex = highlightedCell;
                            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
                        }
                        close();
                        break;
                    }
                    case flash.ui.Keyboard.DOWN:
                    {
                        open();
                        break;
                    }
                }
                return;
            }
            arg1.stopPropagation();
            var loc1:*=Math.max(calculateAvailableHeight() / list.rowHeight << 0, 1);
            var loc2:*=selectedIndex;
            var loc3:*=highlightedCell != -1 ? highlightedCell : selectedIndex;
            var loc4:*=-1;
            loc5 = arg1.keyCode;
            switch (loc5) 
            {
                case flash.ui.Keyboard.SPACE:
                {
                    if (isOpen) 
                    {
                        close();
                    }
                    else 
                    {
                        open();
                    }
                    return;
                }
                case flash.ui.Keyboard.ESCAPE:
                {
                    if (isOpen) 
                    {
                        if (highlightedCell > -1) 
                        {
                            selectedIndex = selectedIndex;
                        }
                        close();
                    }
                    return;
                }
                case flash.ui.Keyboard.UP:
                {
                    loc4 = Math.max(0, (loc3 - 1));
                    break;
                }
                case flash.ui.Keyboard.DOWN:
                {
                    loc4 = Math.min((length - 1), loc3 + 1);
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    loc4 = Math.max(loc3 - loc1, 0);
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    loc4 = Math.min(loc3 + loc1, (length - 1));
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    loc4 = 0;
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    loc4 = (length - 1);
                    break;
                }
                case flash.ui.Keyboard.ENTER:
                {
                    if (_editable && highlightedCell == -1) 
                    {
                        editableValue = inputField.text;
                        selectedIndex = -1;
                    }
                    else if (isOpen && highlightedCell > -1) 
                    {
                        editableValue = null;
                        selectedIndex = highlightedCell;
                        dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
                    }
                    dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.ENTER));
                    close();
                    return;
                }
                default:
                {
                    if (editable) 
                    {
                        break;
                    }
                    loc4 = list.getNextIndexAtLetter(String.fromCharCode(arg1.keyCode), loc3);
                    break;
                }
            }
            if (loc4 > -1) 
            {
                if (isOpen) 
                {
                    highlightCell(loc4);
                    inputField.text = list.itemToLabel(getItemAt(loc4));
                }
                else 
                {
                    highlightCell();
                    selectedIndex = loc4;
                    dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
                }
            }
            return;
        }

        public function get selectedIndex():int
        {
            return list.selectedIndex;
        }

        protected function highlightCell(arg1:int=-1):void
        {
            var loc1:*=null;
            if (highlightedCell > -1) 
            {
                loc1 = list.itemToCellRenderer(getItemAt(highlightedCell));
                if (loc1 != null) 
                {
                    loc1.setMouseState("up");
                }
            }
            if (arg1 == -1) 
            {
                return;
            }
            list.scrollToIndex(arg1);
            list.drawNow();
            loc1 = list.itemToCellRenderer(getItemAt(arg1));
            if (loc1 != null) 
            {
                loc1.setMouseState("over");
                highlightedCell = arg1;
            }
            return;
        }

        protected override function keyUpHandler(arg1:flash.events.KeyboardEvent):void
        {
            isKeyDown = false;
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.ComboBox.createAccessibilityImplementation != null) 
            {
                fl.controls.ComboBox.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.List.getStyleDefinition());
        }

        public function get editable():Boolean
        {
            return _editable;
        }

        public function set editable(arg1:Boolean):void
        {
            _editable = arg1;
            drawTextField();
            return;
        }

        public function get rowCount():uint
        {
            return _rowCount;
        }

        public function set rowCount(arg1:uint):void
        {
            _rowCount = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get restrict():String
        {
            return inputField.restrict;
        }

        public function set restrict(arg1:String):void
        {
            if (componentInspectorSetting && arg1 == "") 
            {
                arg1 = null;
            }
            if (!_editable) 
            {
                return;
            }
            inputField.restrict = arg1;
            return;
        }

        
        {
            defaultStyles = {"upSkin":"ComboBox_upSkin", "downSkin":"ComboBox_downSkin", "overSkin":"ComboBox_overSkin", "disabledSkin":"ComboBox_disabledSkin", "focusRectSkin":null, "focusRectPadding":null, "textFormat":null, "disabledTextFormat":null, "textPadding":3, "buttonWidth":24, "disabledAlpha":null, "listSkin":null};
        }

        public function set selectedIndex(arg1:int):void
        {
            list.selectedIndex = arg1;
            highlightCell();
            invalidate(fl.core.InvalidationType.SELECTED);
            return;
        }

        public function get text():String
        {
            return inputField.text;
        }

        public function set text(arg1:String):void
        {
            if (!editable) 
            {
                return;
            }
            inputField.text = arg1;
            return;
        }

        public function get labelField():String
        {
            return list.labelField;
        }

        public function set labelField(arg1:String):void
        {
            list.labelField = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get labelFunction():Function
        {
            return list.labelFunction;
        }

        public function set labelFunction(arg1:Function):void
        {
            list.labelFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function itemToLabel(arg1:Object):String
        {
            if (arg1 == null) 
            {
                return "";
            }
            return list.itemToLabel(arg1);
        }

        public function get selectedItem():Object
        {
            return list.selectedItem;
        }

        public function set selectedItem(arg1:Object):void
        {
            list.selectedItem = arg1;
            invalidate(fl.core.InvalidationType.SELECTED);
            return;
        }

        public function get dropdown():fl.controls.List
        {
            return list;
        }

        public function get length():int
        {
            return list.length;
        }

        public function get textField():fl.controls.TextInput
        {
            return inputField;
        }

        public function get value():String
        {
            var loc1:*=null;
            if (editableValue != null) 
            {
                return editableValue;
            }
            loc1 = selectedItem;
            if (!_editable && !(loc1.data == null)) 
            {
                return loc1.data;
            }
            return itemToLabel(loc1);
        }

        public function get dataProvider():fl.data.DataProvider
        {
            return list.dataProvider;
        }

        public function set dataProvider(arg1:fl.data.DataProvider):void
        {
            arg1.addEventListener(fl.events.DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
            list.dataProvider = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get dropdownWidth():Number
        {
            return list.width;
        }

        public function set dropdownWidth(arg1:Number):void
        {
            _dropdownWidth = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function addItem(arg1:Object):void
        {
            list.addItem(arg1);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get prompt():String
        {
            return _prompt;
        }

        public function set prompt(arg1:String):void
        {
            if (arg1 != "") 
            {
                _prompt = arg1;
            }
            else 
            {
                _prompt = null;
            }
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get imeMode():String
        {
            return inputField.imeMode;
        }

        public function set imeMode(arg1:String):void
        {
            inputField.imeMode = arg1;
            return;
        }

        public function addItemAt(arg1:Object, arg2:uint):void
        {
            list.addItemAt(arg1, arg2);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function removeAll():void
        {
            list.removeAll();
            inputField.text = "";
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function removeItem(arg1:Object):Object
        {
            return list.removeItem(arg1);
        }

        public function removeItemAt(arg1:uint):void
        {
            list.removeItemAt(arg1);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function getItemAt(arg1:uint):Object
        {
            return list.getItemAt(arg1);
        }

        public function replaceItemAt(arg1:Object, arg2:uint):Object
        {
            return list.replaceItemAt(arg1, arg2);
        }

        public function sortItems(... rest):*
        {
            return list.sortItems.apply(list, rest);
        }

        public function sortItemsOn(arg1:String, arg2:Object=null):*
        {
            return list.sortItemsOn(arg1, arg2);
        }

        public function open():void
        {
            currentIndex = selectedIndex;
            if (isOpen || length == 0) 
            {
                return;
            }
            dispatchEvent(new flash.events.Event(flash.events.Event.OPEN));
            isOpen = true;
            addEventListener(flash.events.Event.ENTER_FRAME, addCloseListener, false, 0, true);
            positionList();
            list.scrollToSelected();
            focusManager.form.addChild(list);
            return;
        }

        public function close():void
        {
            highlightCell();
            highlightedCell = -1;
            if (!isOpen) 
            {
                return;
            }
            dispatchEvent(new flash.events.Event(flash.events.Event.CLOSE));
            var loc1:*=focusManager.form;
            loc1.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, onStageClick);
            isOpen = false;
            loc1.removeChild(list);
            return;
        }

        public function get selectedLabel():String
        {
            if (editableValue != null) 
            {
                return editableValue;
            }
            if (selectedIndex == -1) 
            {
                return null;
            }
            return itemToLabel(selectedItem);
        }

        protected override function configUI():void
        {
            super.configUI();
            background = new fl.controls.BaseButton();
            background.focusEnabled = false;
            copyStylesToChild(background, BACKGROUND_STYLES);
            background.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, onToggleListVisibility, false, 0, true);
            addChild(background);
            inputField = new fl.controls.TextInput();
            inputField.focusTarget = this as fl.managers.IFocusManagerComponent;
            inputField.focusEnabled = false;
            inputField.addEventListener(flash.events.Event.CHANGE, onTextInput, false, 0, true);
            addChild(inputField);
            list = new fl.controls.List();
            list.focusEnabled = false;
            copyStylesToChild(list, LIST_STYLES);
            list.addEventListener(flash.events.Event.CHANGE, onListChange, false, 0, true);
            list.addEventListener(fl.events.ListEvent.ITEM_CLICK, onListChange, false, 0, true);
            list.addEventListener(fl.events.ListEvent.ITEM_ROLL_OUT, passEvent, false, 0, true);
            list.addEventListener(fl.events.ListEvent.ITEM_ROLL_OVER, passEvent, false, 0, true);
            list.verticalScrollBar.addEventListener(flash.events.Event.SCROLL, passEvent, false, 0, true);
            return;
        }

        protected override function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            super.focusInHandler(arg1);
            if (editable) 
            {
                stage.focus = inputField.textField;
            }
            return;
        }

        protected override function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            isKeyDown = false;
            if (isOpen) 
            {
                if (!arg1.relatedObject || !list.contains(arg1.relatedObject)) 
                {
                    if (!(highlightedCell == -1) && !(highlightedCell == selectedIndex)) 
                    {
                        selectedIndex = highlightedCell;
                        dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
                    }
                    close();
                }
            }
            super.focusOutHandler(arg1);
            return;
        }

        protected function handleDataChange(arg1:fl.events.DataChangeEvent):void
        {
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected override function draw():void
        {
            var loc1:*=selectedIndex;
            if (loc1 == -1 && (!(prompt == null) || editable || length == 0)) 
            {
                loc1 = Math.max(-1, Math.min(loc1, (length - 1)));
            }
            else 
            {
                editableValue = null;
                loc1 = Math.max(0, Math.min(loc1, (length - 1)));
            }
            if (list.selectedIndex != loc1) 
            {
                list.selectedIndex = loc1;
                invalidate(fl.core.InvalidationType.SELECTED, false);
            }
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                setEmbedFonts();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.DATA, fl.core.InvalidationType.STATE)) 
            {
                drawTextFormat();
                drawLayout();
                invalidate(fl.core.InvalidationType.DATA);
            }
            if (isInvalid(fl.core.InvalidationType.DATA)) 
            {
                drawList();
                invalidate(fl.core.InvalidationType.SELECTED, true);
            }
            if (isInvalid(fl.core.InvalidationType.SELECTED)) 
            {
                if (loc1 == -1 && !(editableValue == null)) 
                {
                    inputField.text = editableValue;
                }
                else if (loc1 > -1) 
                {
                    if (length > 0) 
                    {
                        inputField.horizontalScrollPosition = 0;
                        inputField.text = itemToLabel(list.selectedItem);
                    }
                }
                else if (loc1 == -1 && !(_prompt == null)) 
                {
                    showPrompt();
                }
                else 
                {
                    inputField.text = "";
                }
                if (editable && selectedIndex > -1 && stage.focus == inputField.textField) 
                {
                    inputField.setSelection(0, inputField.length);
                }
            }
            drawTextField();
            super.draw();
            return;
        }

        protected function setEmbedFonts():void
        {
            var loc1:*=getStyleValue("embedFonts");
            if (loc1 != null) 
            {
                inputField.textField.embedFonts = loc1;
            }
            return;
        }

        protected function showPrompt():void
        {
            inputField.text = _prompt;
            return;
        }

        protected function setStyles():void
        {
            copyStylesToChild(background, BACKGROUND_STYLES);
            copyStylesToChild(list, LIST_STYLES);
            return;
        }

        protected function drawLayout():void
        {
            var loc1:*=getStyleValue("buttonWidth") as Number;
            var loc2:*=getStyleValue("textPadding") as Number;
            background.setSize(width, height);
            var loc3:*;
            inputField.y = loc3 = loc2;
            inputField.x = loc3;
            inputField.setSize(width - loc1 - loc2, height - loc2);
            list.width = isNaN(_dropdownWidth) ? width : _dropdownWidth;
            background.enabled = enabled;
            background.drawNow();
            return;
        }

        protected function drawTextFormat():void
        {
            var loc1:*=getStyleValue(_enabled ? "textFormat" : "disabledTextFormat") as flash.text.TextFormat;
            if (loc1 == null) 
            {
                loc1 = new flash.text.TextFormat();
            }
            inputField.textField.defaultTextFormat = loc1;
            inputField.textField.setTextFormat(loc1);
            setEmbedFonts();
            return;
        }

        protected function drawList():void
        {
            list.rowCount = Math.max(0, Math.min(_rowCount, list.dataProvider.length));
            return;
        }

        protected function positionList():void
        {
            var p:flash.geom.Point;
            var myForm:flash.display.DisplayObjectContainer;
            var theStageHeight:Number;

            var loc1:*;
            myForm = null;
            theStageHeight = NaN;
            p = localToGlobal(new flash.geom.Point(0, 0));
            myForm = focusManager.form;
            p = myForm.globalToLocal(p);
            list.x = p.x;
            try 
            {
                theStageHeight = stage.stageHeight;
            }
            catch (se:SecurityError)
            {
                theStageHeight = myForm.height;
            }
            if (p.y + height + list.height > theStageHeight) 
            {
                list.y = p.y - list.height;
            }
            else 
            {
                list.y = p.y + height;
            }
            return;
        }

        protected function drawTextField():void
        {
            inputField.setStyle("upSkin", "");
            inputField.setStyle("disabledSkin", "");
            inputField.enabled = enabled;
            inputField.editable = _editable;
            inputField.textField.selectable = enabled && _editable;
            var loc1:*;
            inputField.mouseChildren = loc1 = enabled && _editable;
            inputField.mouseEnabled = loc1;
            inputField.focusEnabled = false;
            if (_editable) 
            {
                inputField.addEventListener(flash.events.FocusEvent.FOCUS_IN, onInputFieldFocus, false, 0, true);
                inputField.addEventListener(flash.events.FocusEvent.FOCUS_OUT, onInputFieldFocusOut, false, 0, true);
            }
            else 
            {
                inputField.removeEventListener(flash.events.FocusEvent.FOCUS_IN, onInputFieldFocus);
                inputField.removeEventListener(flash.events.FocusEvent.FOCUS_OUT, onInputFieldFocusOut);
            }
            return;
        }

        protected function onInputFieldFocus(arg1:flash.events.FocusEvent):void
        {
            inputField.addEventListener(fl.events.ComponentEvent.ENTER, onEnter, false, 0, true);
            close();
            return;
        }

        protected function onInputFieldFocusOut(arg1:flash.events.FocusEvent):void
        {
            inputField.removeEventListener(fl.events.ComponentEvent.ENTER, onEnter);
            selectedIndex = selectedIndex;
            return;
        }

        protected static const BACKGROUND_STYLES:Object={"overSkin":"overSkin", "downSkin":"downSkin", "upSkin":"upSkin", "disabledSkin":"disabledSkin", "repeatInterval":"repeatInterval"};

        protected static const LIST_STYLES:Object={"upSkin":"comboListUpSkin", "overSkin":"comboListOverSkin", "downSkin":"comobListDownSkin", "disabledSkin":"comboListDisabledSkin", "downArrowDisabledSkin":"downArrowDisabledSkin", "downArrowDownSkin":"downArrowDownSkin", "downArrowOverSkin":"downArrowOverSkin", "downArrowUpSkin":"downArrowUpSkin", "upArrowDisabledSkin":"upArrowDisabledSkin", "upArrowDownSkin":"upArrowDownSkin", "upArrowOverSkin":"upArrowOverSkin", "upArrowUpSkin":"upArrowUpSkin", "thumbDisabledSkin":"thumbDisabledSkin", "thumbDownSkin":"thumbDownSkin", "thumbOverSkin":"thumbOverSkin", "thumbUpSkin":"thumbUpSkin", "thumbIcon":"thumbIcon", "trackDisabledSkin":"trackDisabledSkin", "trackDownSkin":"trackDownSkin", "trackOverSkin":"trackOverSkin", "trackUpSkin":"trackUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval", "textFormat":"textFormat", "disabledAlpha":"disabledAlpha", "skin":"listSkin"};

        protected var inputField:fl.controls.TextInput;

        protected var background:fl.controls.BaseButton;

        protected var list:fl.controls.List;

        protected var _rowCount:uint=5;

        protected var _editable:Boolean=false;

        protected var isOpen:Boolean=false;

        protected var highlightedCell:int=-1;

        protected var editableValue:String;

        protected var _prompt:String;

        protected var isKeyDown:Boolean=false;

        protected var listOverIndex:uint;

        protected var _dropdownWidth:Number;

        protected var _labels:Array;

        internal var collectionItemImport:fl.data.SimpleCollectionItem;

        protected var currentIndex:int;

        internal static var defaultStyles:Object;

        public static var createAccessibilityImplementation:Function;
    }
}


//      class DataGrid
package fl.controls 
{
    import fl.controls.dataGridClasses.*;
    import fl.controls.listClasses.*;
    import fl.core.*;
    import fl.data.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.ui.*;
    import flash.utils.*;
    
    public class DataGrid extends fl.controls.SelectableList implements fl.managers.IFocusManagerComponent
    {
        public function DataGrid()
        {
            super();
            if (_columns == null) 
            {
                _columns = [];
            }
            _horizontalScrollPolicy = fl.controls.ScrollPolicy.OFF;
            activeCellRenderersMap = new flash.utils.Dictionary(true);
            availableCellRenderersMap = new flash.utils.Dictionary(true);
            addEventListener(fl.events.DataGridEvent.ITEM_EDIT_BEGINNING, itemEditorItemEditBeginningHandler, false, -50);
            addEventListener(fl.events.DataGridEvent.ITEM_EDIT_BEGIN, itemEditorItemEditBeginHandler, false, -50);
            addEventListener(fl.events.DataGridEvent.ITEM_EDIT_END, itemEditorItemEditEndHandler, false, -50);
            addEventListener(flash.events.MouseEvent.MOUSE_DOWN, mouseDownHandler);
            addEventListener(flash.events.MouseEvent.MOUSE_UP, mouseUpHandler);
            return;
        }

        protected function handleHeaderResizeDown(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.currentTarget as flash.display.Sprite;
            var loc2:*=dragHandlesMap[loc1];
            var loc3:*=getColumnAt(loc2);
            columnStretchIndex = loc2;
            columnStretchStartX = arg1.stageX;
            columnStretchStartWidth = loc3.width;
            var loc4:*;
            (loc4 = focusManager.form).addEventListener(flash.events.MouseEvent.MOUSE_MOVE, handleHeaderResizeMove, false, 0, true);
            loc4.addEventListener(flash.events.MouseEvent.MOUSE_UP, handleHeaderResizeUp, false, 0, true);
            return;
        }

        protected function handleHeaderResizeMove(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.stageX - columnStretchStartX;
            var loc2:*=columnStretchStartWidth + loc1;
            resizeColumn(columnStretchIndex, loc2);
            return;
        }

        protected function handleHeaderResizeUp(arg1:flash.events.MouseEvent):void
        {
            var loc3:*=null;
            var loc1:*=arg1.currentTarget as flash.display.Sprite;
            var loc2:*=_columns[columnStretchIndex] as fl.controls.dataGridClasses.DataGridColumn;
            var loc4:*=0;
            while (loc4 < header.numChildren) 
            {
                if ((loc3 = header.getChildAt(loc4) as fl.controls.dataGridClasses.HeaderRenderer) && loc3.column == columnStretchIndex) 
                {
                    break;
                }
                ++loc4;
            }
            var loc5:*=new fl.events.DataGridEvent(fl.events.DataGridEvent.COLUMN_STRETCH, false, true, columnStretchIndex, -1, loc3, loc2 ? loc2.dataField : null);
            dispatchEvent(loc5);
            columnStretchIndex = -1;
            showColumnStretchCursor(false);
            var loc6:*;
            (loc6 = focusManager.form).removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, handleHeaderResizeMove, false);
            loc6.removeEventListener(flash.events.MouseEvent.MOUSE_UP, handleHeaderResizeUp, false);
            return;
        }

        protected function showColumnStretchCursor(arg1:Boolean=true):void
        {
            var loc2:*=null;
            if (columnStretchCursor == null) 
            {
                columnStretchCursor = getDisplayObjectInstance(getStyleValue("columnStretchCursorSkin")) as flash.display.Sprite;
                columnStretchCursor.mouseEnabled = false;
            }
            var loc1:*=focusManager.form;
            if (arg1) 
            {
                flash.ui.Mouse.hide();
                loc1.addChild(columnStretchCursor);
                loc1.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, positionColumnStretchCursor, false, 0, true);
                loc2 = loc1.globalToLocal(new flash.geom.Point(stage.mouseX, stage.mouseY));
                columnStretchCursor.x = loc2.x;
                columnStretchCursor.y = loc2.y;
            }
            else 
            {
                loc1.removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, positionColumnStretchCursor, false);
                if (loc1.contains(columnStretchCursor)) 
                {
                    loc1.removeChild(columnStretchCursor);
                }
                flash.ui.Mouse.show();
            }
            return;
        }

        protected function positionColumnStretchCursor(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=focusManager.form;
            var loc2:*=loc1.globalToLocal(new flash.geom.Point(arg1.stageX, arg1.stageY));
            columnStretchCursor.x = loc2.x;
            columnStretchCursor.y = loc2.y;
            return;
        }

        protected function setEditedItemPosition(arg1:Object):void
        {
            editedItemPositionChanged = true;
            proposedEditedItemPosition = arg1;
            if (arg1 && !(arg1.rowIndex == selectedIndex)) 
            {
                selectedIndex = arg1.rowIndex;
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected function commitEditedItemPosition(arg1:Object):void
        {
            var loc3:*=null;
            var loc4:*=0;
            if (!enabled || !editable) 
            {
                return;
            }
            if (itemEditorInstance && arg1 && itemEditorInstance is fl.managers.IFocusManagerComponent && _editedItemPosition.rowIndex == arg1.rowIndex && _editedItemPosition.columnIndex == arg1.columnIndex) 
            {
                fl.managers.IFocusManagerComponent(itemEditorInstance).setFocus();
                return;
            }
            if (itemEditorInstance) 
            {
                if (arg1) 
                {
                    if (!editedItemPosition || arg1.rowIndex == editedItemPosition.rowIndex) 
                    {
                        loc3 = fl.events.DataGridEventReason.NEW_COLUMN;
                    }
                    else 
                    {
                        loc3 = fl.events.DataGridEventReason.NEW_ROW;
                    }
                }
                else 
                {
                    loc3 = fl.events.DataGridEventReason.OTHER;
                }
                if (!endEdit(loc3) && !(loc3 == fl.events.DataGridEventReason.OTHER)) 
                {
                    return;
                }
            }
            _editedItemPosition = arg1;
            if (!arg1) 
            {
                return;
            }
            actualRowIndex = arg1.rowIndex;
            actualColIndex = arg1.columnIndex;
            if (displayableColumns.length != _columns.length) 
            {
                loc4 = 0;
                while (loc4 < displayableColumns.length) 
                {
                    if (displayableColumns[loc4].colNum >= actualColIndex) 
                    {
                        actualColIndex = displayableColumns[loc4].colNum;
                        break;
                    }
                    ++loc4;
                }
                if (loc4 == displayableColumns.length) 
                {
                    actualColIndex = 0;
                }
            }
            scrollToPosition(actualRowIndex, actualColIndex);
            var loc1:*=getCellRendererAt(actualRowIndex, actualColIndex);
            var loc2:*=new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_EDIT_BEGIN, false, true, actualColIndex, actualRowIndex, loc1);
            dispatchEvent(loc2);
            if (editedItemPositionChanged) 
            {
                editedItemPositionChanged = false;
                commitEditedItemPosition(proposedEditedItemPosition);
                proposedEditedItemPosition = undefined;
            }
            if (!itemEditorInstance) 
            {
                commitEditedItemPosition(null);
            }
            return;
        }

        protected function itemEditorItemEditBeginningHandler(arg1:fl.events.DataGridEvent):void
        {
            if (arg1.isDefaultPrevented()) 
            {
                if (!itemEditorInstance) 
                {
                    _editedItemPosition = null;
                    editable = false;
                    setFocus();
                    editable = true;
                }
            }
            else 
            {
                setEditedItemPosition({"columnIndex":arg1.columnIndex, "rowIndex":uint(arg1.rowIndex)});
            }
            return;
        }

        protected function itemEditorItemEditBeginHandler(arg1:fl.events.DataGridEvent):void
        {
            var loc1:*=null;
            addEventListener(flash.events.Event.DEACTIVATE, deactivateHandler, false, 0, true);
            if (!arg1.isDefaultPrevented()) 
            {
                createItemEditor(arg1.columnIndex, uint(arg1.rowIndex));
                fl.controls.listClasses.ICellRenderer(itemEditorInstance).listData = fl.controls.listClasses.ICellRenderer(editedItemRenderer).listData;
                fl.controls.listClasses.ICellRenderer(itemEditorInstance).data = editedItemRenderer.data;
                itemEditorInstance.imeMode = columns[arg1.columnIndex].imeMode != null ? columns[arg1.columnIndex].imeMode : _imeMode;
                loc1 = focusManager;
                if (itemEditorInstance is fl.managers.IFocusManagerComponent) 
                {
                    loc1.setFocus(flash.display.InteractiveObject(itemEditorInstance));
                }
                loc1.defaultButtonEnabled = false;
                arg1 = new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_FOCUS_IN, false, false, _editedItemPosition.columnIndex, _editedItemPosition.rowIndex, itemEditorInstance);
                dispatchEvent(arg1);
            }
            return;
        }

        protected function itemEditorItemEditEndHandler(arg1:fl.events.DataGridEvent):void
        {
            var loc1:*=false;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            if (arg1.isDefaultPrevented()) 
            {
                if (arg1.reason != fl.events.DataGridEventReason.OTHER) 
                {
                    if (itemEditorInstance && _editedItemPosition) 
                    {
                        if (selectedIndex != _editedItemPosition.rowIndex) 
                        {
                            selectedIndex = _editedItemPosition.rowIndex;
                        }
                        loc7 = focusManager;
                        if (itemEditorInstance is fl.managers.IFocusManagerComponent) 
                        {
                            loc7.setFocus(flash.display.InteractiveObject(itemEditorInstance));
                        }
                    }
                }
            }
            else 
            {
                loc1 = false;
                if (itemEditorInstance && !(arg1.reason == fl.events.DataGridEventReason.CANCELLED)) 
                {
                    loc2 = itemEditorInstance[_columns[arg1.columnIndex].editorDataField];
                    loc3 = _columns[arg1.columnIndex].dataField;
                    loc4 = arg1.itemRenderer.data;
                    loc5 = "";
                    var loc8:*=0;
                    var loc9:*=flash.utils.describeType(loc4).variable;
                    for each (loc6 in loc9) 
                    {
                        if (loc3 != loc6.@name.toString()) 
                        {
                            continue;
                        }
                        loc5 = loc6.@type.toString();
                        break;
                    }
                    loc8 = loc5;
                    switch (loc8) 
                    {
                        case "String":
                        {
                            if (!(loc2 is String)) 
                            {
                                loc2 = loc2.toString();
                            }
                            break;
                        }
                        case "uint":
                        {
                            if (!(loc2 is uint)) 
                            {
                                loc2 = uint(loc2);
                            }
                            break;
                        }
                        case "int":
                        {
                            if (!(loc2 is int)) 
                            {
                                loc2 = int(loc2);
                            }
                            break;
                        }
                        case "Number":
                        {
                            if (!(loc2 is Number)) 
                            {
                                loc2 = Number(loc2);
                            }
                            break;
                        }
                    }
                    if (loc4[loc3] != loc2) 
                    {
                        loc1 = true;
                        loc4[loc3] = loc2;
                    }
                    arg1.itemRenderer.data = loc4;
                }
            }
            if (arg1.reason == fl.events.DataGridEventReason.OTHER || !arg1.isDefaultPrevented()) 
            {
                destroyItemEditor();
            }
            return;
        }

        protected override function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            var loc1:*=false;
            var loc2:*=null;
            if (arg1.target != this) 
            {
                return;
            }
            if (losingFocus) 
            {
                losingFocus = false;
                return;
            }
            setIMEMode(true);
            super.focusInHandler(arg1);
            if (editable && !isPressed) 
            {
                loc1 = !(editedItemPosition == null);
                if (!_editedItemPosition) 
                {
                    _editedItemPosition = {"rowIndex":0, "columnIndex":0};
                    while (_editedItemPosition.columnIndex < _columns.length) 
                    {
                        loc2 = _columns[_editedItemPosition.columnIndex] as fl.controls.dataGridClasses.DataGridColumn;
                        if (loc2.editable && loc2.visible) 
                        {
                            loc1 = true;
                        }
                        var loc3:*;
                        var loc4:*=((loc3 = _editedItemPosition).columnIndex + 1);
                        loc3.columnIndex = loc4;
                    }
                }
                if (loc1) 
                {
                    setEditedItemPosition(_editedItemPosition);
                }
            }
            if (editable) 
            {
                addEventListener(flash.events.FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
                addEventListener(flash.events.MouseEvent.MOUSE_DOWN, mouseFocusChangeHandler);
            }
            return;
        }

        protected override function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            setIMEMode(false);
            if (arg1.target == this) 
            {
                super.focusOutHandler(arg1);
            }
            if (arg1.relatedObject == this && itemRendererContains(itemEditorInstance, flash.display.DisplayObject(arg1.target))) 
            {
                return;
            }
            if (arg1.relatedObject == null && itemRendererContains(editedItemRenderer, flash.display.DisplayObject(arg1.target))) 
            {
                return;
            }
            if (arg1.relatedObject == null && itemRendererContains(itemEditorInstance, flash.display.DisplayObject(arg1.target))) 
            {
                return;
            }
            if (itemEditorInstance && (!arg1.relatedObject || !itemRendererContains(itemEditorInstance, arg1.relatedObject))) 
            {
                endEdit(fl.events.DataGridEventReason.OTHER);
                removeEventListener(flash.events.FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
                removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, mouseFocusChangeHandler);
            }
            return;
        }

        protected function editorMouseDownHandler(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (!itemRendererContains(itemEditorInstance, flash.display.DisplayObject(arg1.target))) 
            {
                if (arg1.target is fl.controls.listClasses.ICellRenderer && contains(flash.display.DisplayObject(arg1.target))) 
                {
                    loc1 = arg1.target as fl.controls.listClasses.ICellRenderer;
                    loc2 = loc1.listData.row;
                    if (_editedItemPosition.rowIndex != loc2) 
                    {
                        endEdit(fl.events.DataGridEventReason.NEW_ROW);
                    }
                    else 
                    {
                        endEdit(fl.events.DataGridEventReason.NEW_COLUMN);
                    }
                }
                else 
                {
                    endEdit(fl.events.DataGridEventReason.OTHER);
                }
            }
            return;
        }

        protected function editorKeyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (arg1.keyCode != flash.ui.Keyboard.ESCAPE) 
            {
                if (arg1.ctrlKey && arg1.charCode == 46) 
                {
                    endEdit(fl.events.DataGridEventReason.CANCELLED);
                }
                else if (arg1.charCode == flash.ui.Keyboard.ENTER && !(arg1.keyCode == 229)) 
                {
                    if (endEdit(fl.events.DataGridEventReason.NEW_ROW)) 
                    {
                        findNextEnterItemRenderer(arg1);
                    }
                }
            }
            else 
            {
                endEdit(fl.events.DataGridEventReason.CANCELLED);
            }
            return;
        }

        protected function findNextItemRenderer(arg1:Boolean):Boolean
        {
            var loc6:*=null;
            var loc7:*=null;
            if (!_editedItemPosition) 
            {
                return false;
            }
            if (proposedEditedItemPosition !== undefined) 
            {
                return false;
            }
            var loc1:*=_editedItemPosition.rowIndex;
            var loc2:*=_editedItemPosition.columnIndex;
            var loc3:*=false;
            var loc4:*=arg1 ? -1 : 1;
            var loc5:*=(length - 1);
            while (!loc3) 
            {
                loc2 = loc2 + loc4;
                if (loc2 < 0 || loc2 >= _columns.length) 
                {
                    loc2 = loc2 < 0 ? (_columns.length - 1) : 0;
                    loc1 = loc1 + loc4;
                    if (loc1 < 0 || loc1 > loc5) 
                    {
                        setEditedItemPosition(null);
                        losingFocus = true;
                        setFocus();
                        return false;
                    }
                }
                if (!(_columns[loc2].editable && _columns[loc2].visible)) 
                {
                    continue;
                }
                loc3 = true;
                if (loc1 != _editedItemPosition.rowIndex) 
                {
                    loc6 = fl.events.DataGridEventReason.NEW_ROW;
                }
                else 
                {
                    loc6 = fl.events.DataGridEventReason.NEW_COLUMN;
                }
                if (!(!itemEditorInstance || endEdit(loc6))) 
                {
                    continue;
                }
                (loc7 = new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_EDIT_BEGINNING, false, true, loc2, loc1)).dataField = _columns[loc2].dataField;
                dispatchEvent(loc7);
            }
            return loc3;
        }

        protected function findNextEnterItemRenderer(arg1:flash.events.KeyboardEvent):void
        {
            if (proposedEditedItemPosition !== undefined) 
            {
                return;
            }
            var loc1:*=_editedItemPosition.rowIndex;
            var loc2:*=_editedItemPosition.columnIndex;
            var loc3:*;
            if ((loc3 = _editedItemPosition.rowIndex + (arg1.shiftKey ? -1 : 1)) >= 0 && loc3 < length) 
            {
                loc1 = loc3;
            }
            var loc4:*;
            (loc4 = new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_EDIT_BEGINNING, false, true, loc2, loc1)).dataField = _columns[loc2].dataField;
            dispatchEvent(loc4);
            return;
        }

        public function removeAllColumns():void
        {
            if (_columns.length > 0) 
            {
                removeCellRenderers();
                _columns = [];
                invalidate(fl.core.InvalidationType.SIZE);
                columnsInvalid = true;
            }
            return;
        }

        protected function mouseFocusChangeHandler(arg1:flash.events.MouseEvent):void
        {
            if (itemEditorInstance && !arg1.isDefaultPrevented() && itemRendererContains(itemEditorInstance, flash.display.DisplayObject(arg1.target))) 
            {
                arg1.preventDefault();
            }
            return;
        }

        protected function keyFocusChangeHandler(arg1:flash.events.FocusEvent):void
        {
            if (arg1.keyCode == flash.ui.Keyboard.TAB && !arg1.isDefaultPrevented() && findNextItemRenderer(arg1.shiftKey)) 
            {
                arg1.preventDefault();
            }
            return;
        }

        internal function itemEditorFocusOutHandler(arg1:flash.events.FocusEvent):void
        {
            if (arg1.relatedObject && contains(arg1.relatedObject)) 
            {
                return;
            }
            if (!arg1.relatedObject) 
            {
                return;
            }
            if (itemEditorInstance) 
            {
                endEdit(fl.events.DataGridEventReason.OTHER);
            }
            return;
        }

        protected function deactivateHandler(arg1:flash.events.Event):void
        {
            if (itemEditorInstance) 
            {
                endEdit(fl.events.DataGridEventReason.OTHER);
                losingFocus = true;
                setFocus();
            }
            return;
        }

        protected function mouseDownHandler(arg1:flash.events.MouseEvent):void
        {
            if (!enabled || !selectable) 
            {
                return;
            }
            isPressed = true;
            return;
        }

        protected function mouseUpHandler(arg1:flash.events.MouseEvent):void
        {
            if (!enabled || !selectable) 
            {
                return;
            }
            isPressed = false;
            return;
        }

        protected override function handleCellRendererClick(arg1:flash.events.MouseEvent):void
        {
            var loc2:*=null;
            var loc3:*=null;
            super.handleCellRendererClick(arg1);
            var loc1:*=arg1.currentTarget as fl.controls.listClasses.ICellRenderer;
            if (loc1 && loc1.data && !(loc1 == itemEditorInstance)) 
            {
                loc2 = _columns[loc1.listData.column] as fl.controls.dataGridClasses.DataGridColumn;
                if (editable && loc2 && loc2.editable) 
                {
                    loc3 = new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_EDIT_BEGINNING, false, true, loc1.listData.column, loc1.listData.row, loc1, loc2.dataField);
                    dispatchEvent(loc3);
                }
            }
            return;
        }

        public function destroyItemEditor():void
        {
            var loc1:*=null;
            if (itemEditorInstance) 
            {
                flash.display.DisplayObject(itemEditorInstance).removeEventListener(flash.events.KeyboardEvent.KEY_DOWN, editorKeyDownHandler);
                focusManager.form.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, editorMouseDownHandler, true);
                loc1 = new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_FOCUS_OUT, false, false, _editedItemPosition.columnIndex, _editedItemPosition.rowIndex, itemEditorInstance);
                dispatchEvent(loc1);
                if (itemEditorInstance && itemEditorInstance is fl.core.UIComponent) 
                {
                    fl.core.UIComponent(itemEditorInstance).drawFocus(false);
                }
                list.removeChild(flash.display.DisplayObject(itemEditorInstance));
                flash.display.DisplayObject(editedItemRenderer).visible = true;
                itemEditorInstance = null;
            }
            return;
        }

        protected function endEdit(arg1:String):Boolean
        {
            if (!editedItemRenderer) 
            {
                return true;
            }
            var loc1:*=new fl.events.DataGridEvent(fl.events.DataGridEvent.ITEM_EDIT_END, false, true, editedItemPosition.columnIndex, editedItemPosition.rowIndex, editedItemRenderer, _columns[editedItemPosition.columnIndex].dataField, arg1);
            dispatchEvent(loc1);
            return !loc1.isDefaultPrevented();
        }

        public function getCellRendererAt(arg1:uint, arg2:uint):fl.controls.listClasses.ICellRenderer
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc1:*=_columns[arg2] as fl.controls.dataGridClasses.DataGridColumn;
            if (loc1 != null) 
            {
                if ((loc2 = activeCellRenderersMap[loc1] as Array) != null) 
                {
                    loc3 = 0;
                    while (loc3 < loc2.length) 
                    {
                        if ((loc4 = loc2[loc3] as fl.controls.listClasses.ICellRenderer).listData.row == arg1) 
                        {
                            return loc4;
                        }
                        ++loc3;
                    }
                }
            }
            return null;
        }

        protected function itemRendererContains(arg1:Object, arg2:flash.display.DisplayObject):Boolean
        {
            if (!arg2 || !arg1 || !(arg1 is flash.display.DisplayObjectContainer)) 
            {
                return false;
            }
            return flash.display.DisplayObjectContainer(arg1).contains(arg2);
        }

        protected override function handleDataChange(arg1:fl.events.DataChangeEvent):void
        {
            super.handleDataChange(arg1);
            if (_columns == null) 
            {
                _columns = [];
            }
            if (_columns.length == 0) 
            {
                createColumnsFromDataProvider();
            }
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (!selectable || itemEditorInstance) 
            {
                return;
            }
            var loc1:*=arg1.keyCode;
            switch (loc1) 
            {
                case flash.ui.Keyboard.UP:
                case flash.ui.Keyboard.DOWN:
                case flash.ui.Keyboard.END:
                case flash.ui.Keyboard.HOME:
                case flash.ui.Keyboard.PAGE_UP:
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    moveSelectionVertically(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                case flash.ui.Keyboard.RIGHT:
                {
                    moveSelectionHorizontally(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    break;
                }
                case flash.ui.Keyboard.SPACE:
                {
                    if (caretIndex == -1) 
                    {
                        caretIndex = 0;
                    }
                    scrollToIndex(caretIndex);
                    doKeySelection(caretIndex, arg1.shiftKey, arg1.ctrlKey);
                    break;
                }
                default:
                {
                    break;
                }
            }
            arg1.stopPropagation();
            return;
        }

        protected override function moveSelectionHorizontally(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            return;
        }

        protected override function moveSelectionVertically(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            var loc1:*=Math.max(Math.floor(calculateAvailableHeight() / rowHeight), 1);
            var loc2:*=-1;
            var loc3:*=0;
            var loc4:*=arg1;
            switch (loc4) 
            {
                case flash.ui.Keyboard.UP:
                {
                    if (caretIndex > 0) 
                    {
                        loc2 = (caretIndex - 1);
                    }
                    break;
                }
                case flash.ui.Keyboard.DOWN:
                {
                    if (caretIndex < (length - 1)) 
                    {
                        loc2 = caretIndex + 1;
                    }
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    if (caretIndex > 0) 
                    {
                        loc2 = Math.max(caretIndex - loc1, 0);
                    }
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    if (caretIndex < (length - 1)) 
                    {
                        loc2 = Math.min(caretIndex + loc1, (length - 1));
                    }
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    if (caretIndex > 0) 
                    {
                        loc2 = 0;
                    }
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    if (caretIndex < (length - 1)) 
                    {
                        loc2 = (length - 1);
                    }
                    break;
                }
            }
            if (loc2 >= 0) 
            {
                doKeySelection(loc2, arg2, arg3);
                scrollToSelected();
            }
            return;
        }

        public override function scrollToIndex(arg1:int):void
        {
            var loc3:*=NaN;
            drawNow();
            var loc1:*=(Math.floor((_verticalScrollPosition + availableHeight) / rowHeight) - 1);
            var loc2:*=Math.ceil(_verticalScrollPosition / rowHeight);
            if (arg1 < loc2) 
            {
                verticalScrollPosition = arg1 * rowHeight;
            }
            else if (arg1 >= loc1) 
            {
                loc3 = _horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && hScrollBar ? 15 : 0;
                verticalScrollPosition = (arg1 + 1) * rowHeight - availableHeight + loc3 + (showHeaders ? headerHeight : 0);
            }
            return;
        }

        protected function scrollToPosition(arg1:int, arg2:int):void
        {
            var loc3:*=0;
            var loc6:*=null;
            var loc1:*=verticalScrollPosition;
            var loc2:*=horizontalScrollPosition;
            scrollToIndex(arg1);
            var loc4:*=0;
            var loc5:*=_columns[arg2] as fl.controls.dataGridClasses.DataGridColumn;
            loc3 = 0;
            while (loc3 < displayableColumns.length) 
            {
                if ((loc6 = displayableColumns[loc3] as fl.controls.dataGridClasses.DataGridColumn) == loc5) 
                {
                    break;
                }
                else 
                {
                    loc4 = loc4 + loc6.width;
                }
                ++loc3;
            }
            if (horizontalScrollPosition > loc4) 
            {
                horizontalScrollPosition = loc4;
            }
            else if (horizontalScrollPosition + availableWidth < loc4 + loc5.width) 
            {
                horizontalScrollPosition = -(availableWidth - (loc4 + loc5.width));
            }
            if (!(loc1 == verticalScrollPosition) || !(loc2 == horizontalScrollPosition)) 
            {
                drawNow();
            }
            return;
        }

        public override function set dataProvider(arg1:fl.data.DataProvider):void
        {
            super.dataProvider = arg1;
            if (_columns == null) 
            {
                _columns = [];
            }
            if (_columns.length == 0) 
            {
                createColumnsFromDataProvider();
            }
            removeCellRenderers();
            return;
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            header.mouseChildren = _enabled;
            return;
        }

        public override function setSize(arg1:Number, arg2:Number):void
        {
            super.setSize(arg1, arg2);
            columnsInvalid = true;
            return;
        }

        public override function get horizontalScrollPolicy():String
        {
            return _horizontalScrollPolicy;
        }

        public override function set horizontalScrollPolicy(arg1:String):void
        {
            super.horizontalScrollPolicy = arg1;
            columnsInvalid = true;
            return;
        }

        public function get columns():Array
        {
            return _columns.slice(0);
        }

        public function set columns(arg1:Array):void
        {
            removeCellRenderers();
            _columns = [];
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                addColumn(arg1[loc1]);
                ++loc1;
            }
            return;
        }

        public function get minColumnWidth():Number
        {
            return _minColumnWidth;
        }

        public function set minColumnWidth(arg1:Number):void
        {
            _minColumnWidth = arg1;
            columnsInvalid = true;
            minColumnWidthInvalid = true;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get labelFunction():Function
        {
            return _labelFunction;
        }

        public function set labelFunction(arg1:Function):void
        {
            if (_labelFunction == arg1) 
            {
                return;
            }
            _labelFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public override function get rowCount():uint
        {
            return Math.ceil(calculateAvailableHeight() / rowHeight);
        }

        public function set rowCount(arg1:uint):void
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && hScrollBar ? 15 : 0;
            height = rowHeight * arg1 + 2 * loc1 + loc2 + (showHeaders ? headerHeight : 0);
            return;
        }

        public function get rowHeight():Number
        {
            return _rowHeight;
        }

        public function set rowHeight(arg1:Number):void
        {
            _rowHeight = Math.max(0, arg1);
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get headerHeight():Number
        {
            return _headerHeight;
        }

        public function set headerHeight(arg1:Number):void
        {
            maxHeaderHeight = arg1;
            _headerHeight = Math.max(0, arg1);
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get showHeaders():Boolean
        {
            return _showHeaders;
        }

        public function set showHeaders(arg1:Boolean):void
        {
            _showHeaders = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get sortIndex():int
        {
            return _sortIndex;
        }

        public function get sortDescending():Boolean
        {
            return _sortDescending;
        }

        public function get imeMode():String
        {
            return _imeMode;
        }

        public function set imeMode(arg1:String):void
        {
            _imeMode = arg1;
            return;
        }

        protected function doKeySelection(arg1:int, arg2:Boolean, arg3:Boolean):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=false;
            if (arg2) 
            {
                loc3 = [];
                loc4 = lastCaretIndex;
                loc5 = arg1;
                if (loc4 == -1) 
                {
                    loc4 = caretIndex == -1 ? arg1 : caretIndex;
                }
                if (loc4 > loc5) 
                {
                    loc5 = loc4;
                    loc4 = arg1;
                }
                loc2 = loc4;
                while (loc2 <= loc5) 
                {
                    loc3.push(loc2);
                    ++loc2;
                }
                selectedIndices = loc3;
                caretIndex = arg1;
                loc1 = true;
            }
            else if (arg3) 
            {
                caretIndex = arg1;
            }
            else 
            {
                selectedIndex = arg1;
                var loc6:*;
                lastCaretIndex = loc6 = arg1;
                caretIndex = loc6;
                loc1 = true;
            }
            if (loc1) 
            {
                dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.DataGrid.createAccessibilityImplementation != null) 
            {
                fl.controls.DataGrid.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.SelectableList.getStyleDefinition(), fl.controls.ScrollBar.getStyleDefinition());
        }

        
        {
            defaultStyles = {"headerUpSkin":"HeaderRenderer_upSkin", "headerDownSkin":"HeaderRenderer_downSkin", "headerOverSkin":"HeaderRenderer_overSkin", "headerDisabledSkin":"HeaderRenderer_disabledSkin", "headerSortArrowDescSkin":"HeaderSortArrow_descIcon", "headerSortArrowAscSkin":"HeaderSortArrow_ascIcon", "columnStretchCursorSkin":"ColumnStretch_cursor", "columnDividerSkin":null, "headerTextFormat":null, "headerDisabledTextFormat":null, "headerTextPadding":5, "headerRenderer":fl.controls.dataGridClasses.HeaderRenderer, "focusRectSkin":null, "focusRectPadding":null, "skin":"DataGrid_skin"};
        }

        public function get editedItemRenderer():fl.controls.listClasses.ICellRenderer
        {
            if (!itemEditorInstance) 
            {
                return null;
            }
            return getCellRendererAt(actualRowIndex, actualColIndex);
        }

        public function get editedItemPosition():Object
        {
            if (_editedItemPosition) 
            {
                return {"rowIndex":_editedItemPosition.rowIndex, "columnIndex":_editedItemPosition.columnIndex};
            }
            return _editedItemPosition;
        }

        public function set editedItemPosition(arg1:Object):void
        {
            var loc1:*={"rowIndex":arg1.rowIndex, "columnIndex":arg1.columnIndex};
            setEditedItemPosition(loc1);
            return;
        }

        protected function calculateAvailableHeight():Number
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0;
            return height - loc1 * 2 - loc2 - (showHeaders ? headerHeight : 0);
        }

        public function addColumn(arg1:*):fl.controls.dataGridClasses.DataGridColumn
        {
            return addColumnAt(arg1, _columns.length);
        }

        public function addColumnAt(arg1:*, arg2:uint):fl.controls.dataGridClasses.DataGridColumn
        {
            var loc1:*=null;
            var loc3:*=0;
            if (arg2 < _columns.length) 
            {
                _columns.splice(arg2, 0, "");
                loc3 = arg2 + 1;
                while (loc3 < _columns.length) 
                {
                    loc1 = _columns[loc3] as fl.controls.dataGridClasses.DataGridColumn;
                    loc1.colNum = loc3;
                    ++loc3;
                }
            }
            var loc2:*;
            if (!((loc2 = arg1) is fl.controls.dataGridClasses.DataGridColumn)) 
            {
                if (loc2 is String) 
                {
                    loc2 = new fl.controls.dataGridClasses.DataGridColumn(loc2);
                }
                else 
                {
                    loc2 = new fl.controls.dataGridClasses.DataGridColumn();
                }
            }
            loc1 = loc2 as fl.controls.dataGridClasses.DataGridColumn;
            loc1.owner = this;
            loc1.colNum = arg2;
            _columns[arg2] = loc1;
            invalidate(fl.core.InvalidationType.SIZE);
            columnsInvalid = true;
            return loc1;
        }

        public function removeColumnAt(arg1:uint):fl.controls.dataGridClasses.DataGridColumn
        {
            var loc2:*=0;
            var loc1:*=_columns[arg1] as fl.controls.dataGridClasses.DataGridColumn;
            if (loc1 != null) 
            {
                removeCellRenderersByColumn(loc1);
                _columns.splice(arg1, 1);
                loc2 = arg1;
                while (loc2 < _columns.length) 
                {
                    loc1 = _columns[loc2] as fl.controls.dataGridClasses.DataGridColumn;
                    if (loc1) 
                    {
                        loc1.colNum = loc2;
                    }
                    ++loc2;
                }
                invalidate(fl.core.InvalidationType.SIZE);
                columnsInvalid = true;
            }
            return loc1;
        }

        public function createItemEditor(arg1:uint, arg2:uint):void
        {
            var loc4:*=0;
            if (displayableColumns.length != _columns.length) 
            {
                loc4 = 0;
                while (loc4 < displayableColumns.length) 
                {
                    if (displayableColumns[loc4].colNum >= arg1) 
                    {
                        arg1 = displayableColumns[loc4].colNum;
                        break;
                    }
                    ++loc4;
                }
                if (loc4 == displayableColumns.length) 
                {
                    arg1 = 0;
                }
            }
            var loc1:*=_columns[arg1] as fl.controls.dataGridClasses.DataGridColumn;
            var loc2:*=getCellRendererAt(arg2, arg1);
            if (!itemEditorInstance) 
            {
                itemEditorInstance = getDisplayObjectInstance(loc1.itemEditor);
                itemEditorInstance.tabEnabled = false;
                list.addChild(flash.display.DisplayObject(itemEditorInstance));
            }
            list.setChildIndex(flash.display.DisplayObject(itemEditorInstance), (list.numChildren - 1));
            var loc3:*=loc2 as flash.display.Sprite;
            itemEditorInstance.visible = true;
            itemEditorInstance.move(loc3.x, loc3.y);
            itemEditorInstance.setSize(loc1.width, rowHeight);
            itemEditorInstance.drawNow();
            flash.display.DisplayObject(itemEditorInstance).addEventListener(flash.events.FocusEvent.FOCUS_OUT, itemEditorFocusOutHandler);
            loc3.visible = false;
            flash.display.DisplayObject(itemEditorInstance).addEventListener(flash.events.KeyboardEvent.KEY_DOWN, editorKeyDownHandler);
            focusManager.form.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, editorMouseDownHandler, true, 0, true);
            return;
        }

        public function getColumnAt(arg1:uint):fl.controls.dataGridClasses.DataGridColumn
        {
            return _columns[arg1] as fl.controls.dataGridClasses.DataGridColumn;
        }

        public function getColumnIndex(arg1:String):int
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < _columns.length) 
            {
                loc2 = _columns[loc1] as fl.controls.dataGridClasses.DataGridColumn;
                if (loc2.dataField == arg1) 
                {
                    return loc1;
                }
                ++loc1;
            }
            return -1;
        }

        public function getColumnCount():uint
        {
            return _columns.length;
        }

        public function spaceColumnsEqually():void
        {
            var loc1:*=NaN;
            var loc2:*=0;
            var loc3:*=null;
            drawNow();
            if (displayableColumns.length > 0) 
            {
                loc1 = availableWidth / displayableColumns.length;
                loc2 = 0;
                while (loc2 < displayableColumns.length) 
                {
                    loc3 = displayableColumns[loc2] as fl.controls.dataGridClasses.DataGridColumn;
                    loc3.width = loc1;
                    ++loc2;
                }
                invalidate(fl.core.InvalidationType.SIZE);
                columnsInvalid = true;
            }
            return;
        }

        public function editField(arg1:uint, arg2:String, arg3:Object):void
        {
            var loc1:*;
            (loc1 = getItemAt(arg1))[arg2] = arg3;
            replaceItemAt(loc1, arg1);
            return;
        }

        public override function itemToCellRenderer(arg1:Object):fl.controls.listClasses.ICellRenderer
        {
            return null;
        }

        protected override function configUI():void
        {
            useFixedHorizontalScrolling = false;
            super.configUI();
            headerMask = new flash.display.Sprite();
            var loc1:*=headerMask.graphics;
            loc1.beginFill(0, 0.3);
            loc1.drawRect(0, 0, 100, 100);
            loc1.endFill();
            headerMask.visible = false;
            addChild(headerMask);
            header = new flash.display.Sprite();
            addChild(header);
            header.mask = headerMask;
            _horizontalScrollPolicy = fl.controls.ScrollPolicy.OFF;
            _verticalScrollPolicy = fl.controls.ScrollPolicy.AUTO;
            return;
        }

        protected override function draw():void
        {
            var loc1:*=!(contentHeight == rowHeight * length);
            contentHeight = rowHeight * length;
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")) 
                {
                    invalidate(fl.core.InvalidationType.SIZE, false);
                }
                if (!(_cellRenderer == getStyleValue("cellRenderer")) || !(_headerRenderer == getStyleValue("headerRenderer"))) 
                {
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                    _headerRenderer = getStyleValue("headerRenderer");
                }
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                columnsInvalid = true;
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STATE) || loc1) 
            {
                drawLayout();
                drawDisabledOverlay();
            }
            if (isInvalid(fl.core.InvalidationType.RENDERER_STYLES)) 
            {
                updateRendererStyles();
            }
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.SIZE, fl.core.InvalidationType.DATA, fl.core.InvalidationType.SCROLL, fl.core.InvalidationType.SELECTED)) 
            {
                drawList();
            }
            updateChildren();
            validate();
            return;
        }

        protected override function drawLayout():void
        {
            vOffset = showHeaders ? headerHeight : 0;
            super.drawLayout();
            contentScrollRect = listHolder.scrollRect;
            if (showHeaders) 
            {
                headerHeight = maxHeaderHeight;
                if (Math.floor(availableHeight - headerHeight) <= 0) 
                {
                    _headerHeight = availableHeight;
                }
                list.y = headerHeight;
                contentScrollRect = listHolder.scrollRect;
                contentScrollRect.y = contentPadding + headerHeight;
                contentScrollRect.height = availableHeight - headerHeight;
                listHolder.y = contentPadding + headerHeight;
                headerMask.x = contentPadding;
                headerMask.y = contentPadding;
                headerMask.width = availableWidth;
                headerMask.height = headerHeight;
            }
            else 
            {
                contentScrollRect.y = contentPadding;
                listHolder.y = 0;
            }
            listHolder.scrollRect = contentScrollRect;
            return;
        }

        protected override function drawList():void
        {
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=0;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc13:*=null;
            var loc14:*=null;
            var loc18:*=NaN;
            var loc19:*=null;
            var loc20:*=null;
            var loc21:*=null;
            var loc22:*=null;
            var loc23:*=null;
            var loc24:*=null;
            var loc25:*=null;
            var loc26:*=null;
            var loc27:*=false;
            var loc28:*=null;
            if (showHeaders) 
            {
                header.visible = true;
                header.x = contentPadding - _horizontalScrollPosition;
                header.y = contentPadding;
                listHolder.y = contentPadding + headerHeight;
                loc18 = Math.floor(availableHeight - headerHeight);
                _verticalScrollBar.setScrollProperties(loc18, 0, contentHeight - loc18, _verticalScrollBar.pageScrollSize);
            }
            else 
            {
                header.visible = false;
                listHolder.y = contentPadding;
            }
            listHolder.x = contentPadding;
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.x = _horizontalScrollPosition;
            contentScrollRect.y = vOffset + Math.floor(_verticalScrollPosition) % rowHeight;
            listHolder.scrollRect = contentScrollRect;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var loc1:*=Math.min(Math.max((length - 1), 0), Math.floor(_verticalScrollPosition / rowHeight));
            var loc2:*=Math.min(Math.max((length - 1), 0), loc1 + rowCount + 1);
            var loc10:*=list.hitTestPoint(stage.mouseX, stage.mouseY);
            calculateColumnSizes();
            var loc29:*;
            renderedItems = loc29 = new flash.utils.Dictionary(true);
            var loc11:*=loc29;
            if (length > 0) 
            {
                loc5 = loc1;
                while (loc5 <= loc2) 
                {
                    loc11[_dataProvider.getItemAt(loc5)] = true;
                    ++loc5;
                }
            }
            loc3 = 0;
            var loc12:*=visibleColumns[0] as fl.controls.dataGridClasses.DataGridColumn;
            loc5 = 0;
            while (loc5 < displayableColumns.length) 
            {
                if ((loc19 = displayableColumns[loc5] as fl.controls.dataGridClasses.DataGridColumn) == loc12) 
                {
                    break;
                }
                else 
                {
                    loc3 = loc3 + loc19.width;
                }
                ++loc5;
            }
            while (header.numChildren > 0) 
            {
                header.removeChildAt(0);
            }
            dragHandlesMap = new flash.utils.Dictionary(true);
            var loc15:*=[];
            var loc16:*=visibleColumns.length;
            var loc17:*=0;
            while (loc17 < loc16) 
            {
                loc9 = visibleColumns[loc17] as fl.controls.dataGridClasses.DataGridColumn;
                loc15.push(loc9.colNum);
                if (showHeaders) 
                {
                    loc23 = loc9.headerRenderer == null ? _headerRenderer : loc9.headerRenderer;
                    if ((loc24 = getDisplayObjectInstance(loc23) as fl.controls.dataGridClasses.HeaderRenderer) != null) 
                    {
                        loc24.addEventListener(flash.events.MouseEvent.CLICK, handleHeaderRendererClick, false, 0, true);
                        loc24.x = loc3;
                        loc24.y = 0;
                        loc24.setSize(loc9.width, headerHeight);
                        loc24.column = loc9.colNum;
                        loc24.label = loc9.headerText;
                        header.addChildAt(loc24, loc17);
                        copyStylesToChild(loc24, HEADER_STYLES);
                        if (sortIndex == -1 && lastSortIndex == -1 || !(loc9.colNum == sortIndex)) 
                        {
                            loc24.setStyle("icon", null);
                        }
                        else 
                        {
                            loc24.setStyle("icon", sortDescending ? getStyleValue("headerSortArrowAscSkin") : getStyleValue("headerSortArrowDescSkin"));
                        }
                        if (loc17 < (loc16 - 1) && resizableColumns && loc9.resizable) 
                        {
                            (loc26 = (loc25 = new flash.display.Sprite()).graphics).beginFill(0, 0);
                            loc26.drawRect(0, 0, 3, headerHeight);
                            loc26.endFill();
                            loc25.x = loc3 + loc9.width - 2;
                            loc25.y = 0;
                            loc25.alpha = 0;
                            loc25.addEventListener(flash.events.MouseEvent.MOUSE_OVER, handleHeaderResizeOver, false, 0, true);
                            loc25.addEventListener(flash.events.MouseEvent.MOUSE_OUT, handleHeaderResizeOut, false, 0, true);
                            loc25.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, handleHeaderResizeDown, false, 0, true);
                            header.addChild(loc25);
                            dragHandlesMap[loc25] = loc9.colNum;
                        }
                        if (loc17 == (loc16 - 1) && _horizontalScrollPosition == 0 && availableWidth > loc3 + loc9.width) 
                        {
                            loc4 = Math.floor(availableWidth - loc3);
                            loc24.setSize(loc4, headerHeight);
                        }
                        else 
                        {
                            loc4 = loc9.width;
                        }
                        loc24.drawNow();
                    }
                }
                loc20 = loc9.cellRenderer == null ? _cellRenderer : loc9.cellRenderer;
                loc21 = availableCellRenderersMap[loc9];
                if ((loc8 = activeCellRenderersMap[loc9]) == null) 
                {
                    loc8 = loc29 = [];
                    activeCellRenderersMap[loc9] = loc29;
                }
                if (loc21 == null) 
                {
                    loc21 = loc29 = [];
                    availableCellRenderersMap[loc9] = loc29;
                }
                loc22 = new flash.utils.Dictionary(true);
                while (loc8.length > 0) 
                {
                    loc6 = (loc7 = loc8.pop()).data;
                    if (loc11[loc6] == null || invalidItems[loc6] == true) 
                    {
                        loc21.push(loc7);
                    }
                    else 
                    {
                        loc22[loc6] = loc7;
                        invalidItems[loc6] = true;
                    }
                    list.removeChild(loc7 as flash.display.DisplayObject);
                }
                if (length > 0) 
                {
                    loc5 = loc1;
                    while (loc5 <= loc2) 
                    {
                        loc27 = false;
                        loc6 = _dataProvider.getItemAt(loc5);
                        if (loc22[loc6] == null) 
                        {
                            if (loc21.length > 0) 
                            {
                                loc7 = loc21.pop() as fl.controls.listClasses.ICellRenderer;
                            }
                            else if ((loc13 = (loc7 = getDisplayObjectInstance(loc20) as fl.controls.listClasses.ICellRenderer) as flash.display.Sprite) != null) 
                            {
                                loc13.addEventListener(flash.events.MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                                loc13.addEventListener(flash.events.MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                                loc13.addEventListener(flash.events.MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                                loc13.addEventListener(flash.events.Event.CHANGE, handleCellRendererChange, false, 0, true);
                                loc13.doubleClickEnabled = true;
                                loc13.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                                if (loc13["setStyle"] != null) 
                                {
                                    loc29 = 0;
                                    var loc30:*=rendererStyles;
                                    for (loc28 in loc30) 
                                    {
                                        var loc31:*;
                                        (loc31 = loc13)["setStyle"](loc28, rendererStyles[loc28]);
                                    }
                                }
                            }
                        }
                        else 
                        {
                            loc27 = true;
                            loc7 = loc22[loc6];
                            delete loc22[loc6];
                        }
                        list.addChild(loc7 as flash.display.Sprite);
                        loc8.push(loc7);
                        loc7.x = loc3;
                        loc7.y = rowHeight * (loc5 - loc1);
                        loc7.setSize(loc17 != (loc16 - 1) ? loc9.width : loc4, rowHeight);
                        if (!loc27) 
                        {
                            loc7.data = loc6;
                        }
                        loc7.listData = new fl.controls.listClasses.ListData(columnItemToLabel(loc9.colNum, loc6), null, this, loc5, loc5, loc9.colNum);
                        if (loc10 && isHovered(loc7)) 
                        {
                            loc7.setMouseState("over");
                            currentHoveredRow = loc5;
                        }
                        else 
                        {
                            loc7.setMouseState("up");
                        }
                        loc7.selected = !(_selectedIndices.indexOf(loc5) == -1);
                        if (loc7 is fl.core.UIComponent) 
                        {
                            (loc14 = loc7 as fl.core.UIComponent).drawNow();
                        }
                        ++loc5;
                    }
                }
                loc3 = loc3 + loc9.width;
                ++loc17;
            }
            loc5 = 0;
            while (loc5 < _columns.length) 
            {
                if (loc15.indexOf(loc5) == -1) 
                {
                    removeCellRenderersByColumn(_columns[loc5] as fl.controls.dataGridClasses.DataGridColumn);
                }
                ++loc5;
            }
            if (editedItemPositionChanged) 
            {
                editedItemPositionChanged = false;
                commitEditedItemPosition(proposedEditedItemPosition);
                proposedEditedItemPosition = undefined;
            }
            invalidItems = new flash.utils.Dictionary(true);
            return;
        }

        protected override function updateRendererStyles():void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=null;
            var loc1:*=[];
            var loc6:*=0;
            var loc7:*=availableCellRenderersMap;
            for (loc2 in loc7) 
            {
                loc1 = loc1.concat(availableCellRenderersMap[loc2]);
            }
            loc6 = 0;
            loc7 = activeCellRenderersMap;
            for (loc2 in loc7) 
            {
                loc1 = loc1.concat(activeCellRenderersMap[loc2]);
            }
            loc3 = loc1.length;
            loc4 = 0;
            while (loc4 < loc3) 
            {
                if (loc1[loc4]["setStyle"] != null) 
                {
                    loc6 = 0;
                    loc7 = updatedRendererStyles;
                    for (loc5 in loc7) 
                    {
                        loc1[loc4].setStyle(loc5, updatedRendererStyles[loc5]);
                    }
                    loc1[loc4].drawNow();
                }
                ++loc4;
            }
            updatedRendererStyles = {};
            return;
        }

        protected function removeCellRenderers():void
        {
            var loc1:*=0;
            while (loc1 < _columns.length) 
            {
                removeCellRenderersByColumn(_columns[loc1] as fl.controls.dataGridClasses.DataGridColumn);
                ++loc1;
            }
            return;
        }

        protected function removeCellRenderersByColumn(arg1:fl.controls.dataGridClasses.DataGridColumn):void
        {
            if (arg1 == null) 
            {
                return;
            }
            var loc1:*=activeCellRenderersMap[arg1];
            if (loc1 != null) 
            {
                while (loc1.length > 0) 
                {
                    list.removeChild(loc1.pop() as flash.display.DisplayObject);
                }
            }
            return;
        }

        protected override function handleCellRendererMouseEvent(arg1:flash.events.MouseEvent):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=arg1.target as fl.controls.listClasses.ICellRenderer;
            if (loc1) 
            {
                loc2 = loc1.listData.row;
                if (arg1.type != flash.events.MouseEvent.ROLL_OVER) 
                {
                    if (arg1.type == flash.events.MouseEvent.ROLL_OUT) 
                    {
                        loc3 = "up";
                    }
                }
                else 
                {
                    loc3 = "over";
                }
                if (loc3) 
                {
                    loc4 = 0;
                    while (loc4 < visibleColumns.length) 
                    {
                        loc5 = visibleColumns[loc4] as fl.controls.dataGridClasses.DataGridColumn;
                        if (loc6 = getCellRendererAt(loc2, loc5.colNum)) 
                        {
                            loc6.setMouseState(loc3);
                        }
                        if (loc2 != currentHoveredRow) 
                        {
                            if (loc6 = getCellRendererAt(currentHoveredRow, loc5.colNum)) 
                            {
                                loc6.setMouseState("up");
                            }
                        }
                        ++loc4;
                    }
                }
            }
            super.handleCellRendererMouseEvent(arg1);
            return;
        }

        protected function isHovered(arg1:fl.controls.listClasses.ICellRenderer):Boolean
        {
            var loc1:*=Math.min(Math.max((length - 1), 0), Math.floor(_verticalScrollPosition / rowHeight));
            var loc2:*=(arg1.listData.row - loc1) * rowHeight;
            var loc3:*;
            return (loc3 = list.globalToLocal(new flash.geom.Point(0, stage.mouseY))).y > loc2 && loc3.y < loc2 + rowHeight;
        }

        protected override function setHorizontalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            if (arg1 == _horizontalScrollPosition) 
            {
                return;
            }
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.x = arg1;
            listHolder.scrollRect = contentScrollRect;
            list.x = 0;
            header.x = -arg1;
            super.setHorizontalScrollPosition(arg1, true);
            invalidate(fl.core.InvalidationType.SCROLL);
            columnsInvalid = true;
            return;
        }

        protected override function setVerticalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            if (itemEditorInstance) 
            {
                endEdit(fl.events.DataGridEventReason.OTHER);
            }
            invalidate(fl.core.InvalidationType.SCROLL);
            super.setVerticalScrollPosition(arg1, true);
            return;
        }

        public function columnItemToLabel(arg1:uint, arg2:Object):String
        {
            var loc1:*=_columns[arg1] as fl.controls.dataGridClasses.DataGridColumn;
            if (loc1 != null) 
            {
                return loc1.itemToLabel(arg2);
            }
            return " ";
        }

        protected function calculateColumnSizes():void
        {
            var loc1:*=NaN;
            var loc2:*=0;
            var loc3:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=NaN;
            var loc8:*=0;
            var loc9:*=NaN;
            var loc10:*=0;
            var loc11:*=NaN;
            var loc12:*=NaN;
            var loc13:*=NaN;
            var loc14:*=NaN;
            var loc4:*=0;
            if (_columns.length == 0) 
            {
                visibleColumns = [];
                displayableColumns = [];
                return;
            }
            if (columnsInvalid) 
            {
                columnsInvalid = false;
                visibleColumns = [];
                if (minColumnWidthInvalid) 
                {
                    loc2 = _columns.length;
                    loc3 = 0;
                    while (loc3 < loc2) 
                    {
                        _columns[loc3].minWidth = minColumnWidth;
                        ++loc3;
                    }
                    minColumnWidthInvalid = false;
                }
                displayableColumns = null;
                loc2 = _columns.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (displayableColumns && _columns[loc3].visible) 
                    {
                        displayableColumns.push(_columns[loc3]);
                    }
                    else if (!displayableColumns && !_columns[loc3].visible) 
                    {
                        displayableColumns = new Array(loc3);
                        loc8 = 0;
                        while (loc8 < loc3) 
                        {
                            displayableColumns[loc8] = _columns[loc8];
                            ++loc8;
                        }
                    }
                    ++loc3;
                }
                if (!displayableColumns) 
                {
                    displayableColumns = _columns;
                }
                if (horizontalScrollPolicy != fl.controls.ScrollPolicy.OFF) 
                {
                    loc2 = displayableColumns.length;
                    loc9 = 0;
                    loc3 = 0;
                    while (loc3 < loc2) 
                    {
                        loc5 = displayableColumns[loc3] as fl.controls.dataGridClasses.DataGridColumn;
                        if (loc9 + loc5.width > _horizontalScrollPosition && loc9 < _horizontalScrollPosition + availableWidth) 
                        {
                            visibleColumns.push(loc5);
                        }
                        loc9 = loc9 + loc5.width;
                        ++loc3;
                    }
                }
                else 
                {
                    loc2 = displayableColumns.length;
                    loc3 = 0;
                    while (loc3 < loc2) 
                    {
                        visibleColumns.push(displayableColumns[loc3]);
                        ++loc3;
                    }
                }
            }
            if (horizontalScrollPolicy == fl.controls.ScrollPolicy.OFF) 
            {
                loc10 = 0;
                loc11 = 0;
                loc2 = visibleColumns.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if ((loc5 = visibleColumns[loc3] as fl.controls.dataGridClasses.DataGridColumn).resizable) 
                    {
                        if (isNaN(loc5.explicitWidth)) 
                        {
                            ++loc10;
                            loc11 = loc11 + loc5.minWidth;
                        }
                        else 
                        {
                            loc11 = loc11 + loc5.width;
                        }
                    }
                    else 
                    {
                        loc11 = loc11 + loc5.width;
                    }
                    loc4 = loc4 + loc5.width;
                    ++loc3;
                }
                loc13 = availableWidth;
                if (availableWidth > loc11 && loc10) 
                {
                    loc2 = visibleColumns.length;
                    loc3 = 0;
                    while (loc3 < loc2) 
                    {
                        if ((loc5 = visibleColumns[loc3] as fl.controls.dataGridClasses.DataGridColumn).resizable && isNaN(loc5.explicitWidth)) 
                        {
                            loc6 = loc5;
                            if (loc4 > availableWidth) 
                            {
                                loc12 = (loc6.width - loc6.minWidth) / (loc4 - loc11);
                            }
                            else 
                            {
                                loc12 = loc6.width / loc4;
                            }
                            loc7 = loc6.width - (loc4 - availableWidth) * loc12;
                            loc14 = loc5.minWidth;
                            loc5.setWidth(Math.max(loc7, loc14));
                        }
                        loc13 = loc13 - loc5.width;
                        ++loc3;
                    }
                    if (loc13 && loc6) 
                    {
                        loc6.setWidth(loc6.width + loc13);
                    }
                }
                else 
                {
                    loc2 = visibleColumns.length;
                    loc3 = 0;
                    while (loc3 < loc2) 
                    {
                        loc12 = (loc6 = visibleColumns[loc3] as fl.controls.dataGridClasses.DataGridColumn).width / loc4;
                        loc7 = availableWidth * loc12;
                        loc6.setWidth(loc7);
                        loc6.explicitWidth = NaN;
                        loc13 = loc13 - loc7;
                        ++loc3;
                    }
                    if (loc13 && loc6) 
                    {
                        loc6.setWidth(loc6.width + loc13);
                    }
                }
            }
            return;
        }

        protected override function calculateContentWidth():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=null;
            if (_columns.length == 0) 
            {
                contentWidth = 0;
                return;
            }
            if (minColumnWidthInvalid) 
            {
                loc1 = _columns.length;
                loc2 = 0;
                while (loc2 < loc1) 
                {
                    loc3 = _columns[loc2] as fl.controls.dataGridClasses.DataGridColumn;
                    loc3.minWidth = minColumnWidth;
                    ++loc2;
                }
                minColumnWidthInvalid = false;
            }
            if (horizontalScrollPolicy != fl.controls.ScrollPolicy.OFF) 
            {
                contentWidth = 0;
                loc1 = _columns.length;
                loc2 = 0;
                while (loc2 < loc1) 
                {
                    loc3 = _columns[loc2] as fl.controls.dataGridClasses.DataGridColumn;
                    if (loc3.visible) 
                    {
                        contentWidth = contentWidth + loc3.width;
                    }
                    ++loc2;
                }
                if (!isNaN(_horizontalScrollPosition) && _horizontalScrollPosition + availableWidth > contentWidth) 
                {
                    setHorizontalScrollPosition(contentWidth - availableWidth);
                }
            }
            else 
            {
                contentWidth = availableWidth;
            }
            return;
        }

        protected function handleHeaderRendererClick(arg1:flash.events.MouseEvent):void
        {
            var loc4:*=0;
            var loc5:*=null;
            if (!_enabled) 
            {
                return;
            }
            var loc1:*=arg1.currentTarget as fl.controls.dataGridClasses.HeaderRenderer;
            var loc2:*=loc1.column;
            var loc3:*=_columns[loc2] as fl.controls.dataGridClasses.DataGridColumn;
            if (sortableColumns && loc3.sortable) 
            {
                loc4 = _sortIndex;
                _sortIndex = loc2;
                loc5 = new fl.events.DataGridEvent(fl.events.DataGridEvent.HEADER_RELEASE, false, true, loc2, -1, loc1, loc3 ? loc3.dataField : null);
                if (!dispatchEvent(loc5) || !_selectable) 
                {
                    _sortIndex = lastSortIndex;
                    return;
                }
                lastSortIndex = loc4;
                sortByColumn(loc2);
                invalidate(fl.core.InvalidationType.DATA);
            }
            return;
        }

        public function resizeColumn(arg1:int, arg2:Number):void
        {
            var loc2:*=0;
            var loc3:*=NaN;
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=NaN;
            if (_columns.length == 0) 
            {
                return;
            }
            var loc1:*=_columns[arg1] as fl.controls.dataGridClasses.DataGridColumn;
            if (!loc1) 
            {
                return;
            }
            if (!visibleColumns || visibleColumns.length == 0) 
            {
                loc1.setWidth(arg2);
                return;
            }
            if (arg2 < loc1.minWidth) 
            {
                arg2 = loc1.minWidth;
            }
            if (_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO) 
            {
                loc1.setWidth(arg2);
                loc1.explicitWidth = arg2;
            }
            else if ((loc2 = getVisibleColumnIndex(loc1)) == -1) 
            {
                loc1.setWidth(arg2);
                loc1.explicitWidth = arg2;
            }
            else 
            {
                loc3 = 0;
                loc4 = visibleColumns.length;
                loc7 = loc2 + 1;
                while (loc7 < loc4) 
                {
                    if ((loc5 = visibleColumns[loc7] as fl.controls.dataGridClasses.DataGridColumn) && loc5.resizable) 
                    {
                        loc3 = loc3 + loc5.width;
                    }
                    ++loc7;
                }
                loc9 = loc1.width - arg2 + loc3;
                if (loc3) 
                {
                    loc1.setWidth(arg2);
                    loc1.explicitWidth = arg2;
                }
                loc10 = 0;
                loc7 = loc2 + 1;
                while (loc7 < loc4) 
                {
                    if ((loc5 = visibleColumns[loc7] as fl.controls.dataGridClasses.DataGridColumn).resizable) 
                    {
                        if ((loc8 = loc5.width * loc9 / loc3) < loc5.minWidth) 
                        {
                            loc8 = loc5.minWidth;
                        }
                        loc5.setWidth(loc8);
                        loc10 = loc10 + loc5.width;
                        loc6 = loc5;
                    }
                    ++loc7;
                }
                if (loc10 > loc9) 
                {
                    if ((loc8 = loc1.width - loc10 + loc9) < loc1.minWidth) 
                    {
                        loc8 = loc1.minWidth;
                    }
                    loc1.setWidth(loc8);
                }
                else if (loc6) 
                {
                    loc6.setWidth(loc6.width - loc10 + loc9);
                }
            }
            columnsInvalid = true;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        protected function sortByColumn(arg1:int):void
        {
            var loc1:*=columns[arg1] as fl.controls.dataGridClasses.DataGridColumn;
            if (!enabled || !loc1 || !loc1.sortable) 
            {
                return;
            }
            var loc2:*=loc1.sortDescending;
            var loc3:*=loc1.sortOptions;
            if (loc2) 
            {
                loc3 = loc3 | Array.DESCENDING;
            }
            else 
            {
                loc3 = loc3 & ~Array.DESCENDING;
            }
            if (loc1.sortCompareFunction == null) 
            {
                sortItemsOn(loc1.dataField, loc3);
            }
            else 
            {
                sortItems(loc1.sortCompareFunction, loc3);
            }
            var loc4:*;
            loc1.sortDescending = loc4 = !loc2;
            _sortDescending = loc4;
            if (lastSortIndex >= 0 && !(lastSortIndex == sortIndex)) 
            {
                loc1 = columns[lastSortIndex] as fl.controls.dataGridClasses.DataGridColumn;
                if (loc1 != null) 
                {
                    loc1.sortDescending = false;
                }
            }
            return;
        }

        protected function createColumnsFromDataProvider():void
        {
            var loc1:*=null;
            var loc2:*=null;
            _columns = [];
            if (length > 0) 
            {
                loc1 = _dataProvider.getItemAt(0);
                var loc3:*=0;
                var loc4:*=loc1;
                for (loc2 in loc4) 
                {
                    addColumn(loc2);
                }
            }
            return;
        }

        protected function getVisibleColumnIndex(arg1:fl.controls.dataGridClasses.DataGridColumn):int
        {
            var loc1:*=0;
            while (loc1 < visibleColumns.length) 
            {
                if (arg1 == visibleColumns[loc1]) 
                {
                    return loc1;
                }
                ++loc1;
            }
            return -1;
        }

        protected function handleHeaderResizeOver(arg1:flash.events.MouseEvent):void
        {
            if (columnStretchIndex == -1) 
            {
                showColumnStretchCursor();
            }
            return;
        }

        protected function handleHeaderResizeOut(arg1:flash.events.MouseEvent):void
        {
            if (columnStretchIndex == -1) 
            {
                showColumnStretchCursor(false);
            }
            return;
        }

        protected static const HEADER_STYLES:Object={"disabledSkin":"headerDisabledSkin", "downSkin":"headerDownSkin", "overSkin":"headerOverSkin", "upSkin":"headerUpSkin", "textFormat":"headerTextFormat", "disabledTextFormat":"headerDisabledTextFormat", "textPadding":"headerTextPadding"};

        protected var _headerHeight:Number=25;

        protected var _showHeaders:Boolean=true;

        protected var _columns:Array;

        protected var _minColumnWidth:Number;

        protected var header:flash.display.Sprite;

        protected var headerMask:flash.display.Sprite;

        protected var headerSortArrow:flash.display.Sprite;

        protected var _cellRenderer:Object;

        protected var _headerRenderer:Object;

        protected var _labelFunction:Function;

        protected var visibleColumns:Array;

        protected var displayableColumns:Array;

        protected var columnsInvalid:Boolean=true;

        protected var minColumnWidthInvalid:Boolean=false;

        protected var activeCellRenderersMap:flash.utils.Dictionary;

        protected var dragHandlesMap:flash.utils.Dictionary;

        protected var columnStretchIndex:Number=-1;

        protected var columnStretchStartX:Number;

        protected var columnStretchStartWidth:Number;

        protected var columnStretchCursor:flash.display.Sprite;

        protected var _sortIndex:int=-1;

        protected var lastSortIndex:int=-1;

        protected var _sortDescending:Boolean=false;

        protected var _editedItemPosition:Object;

        protected var editedItemPositionChanged:Boolean=false;

        protected var proposedEditedItemPosition:*;

        protected var actualRowIndex:int;

        protected var actualColIndex:int;

        protected var isPressed:Boolean=false;

        protected var losingFocus:Boolean=false;

        protected var maxHeaderHeight:Number=25;

        protected var currentHoveredRow:int=-1;

        public var editable:Boolean=false;

        public var resizableColumns:Boolean=true;

        public var sortableColumns:Boolean=true;

        public var itemEditorInstance:Object;

        protected var availableCellRenderersMap:flash.utils.Dictionary;

        protected var _rowHeight:Number=20;

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//      class Label
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import flash.text.*;
    
    public class Label extends fl.core.UIComponent
    {
        public function Label()
        {
            super();
            text = defaultLabel;
            actualWidth = _width;
            actualHeight = _height;
            return;
        }

        public function get text():String
        {
            return textField.text;
        }

        public function set text(arg1:String):void
        {
            if (arg1 == text) 
            {
                return;
            }
            if (componentInspectorSetting && arg1 == defaultLabel) 
            {
                return;
            }
            _html = false;
            textField.text = arg1;
            if (textField.autoSize != flash.text.TextFieldAutoSize.NONE) 
            {
                invalidate(fl.core.InvalidationType.SIZE);
            }
            return;
        }

        public function get htmlText():String
        {
            return textField.htmlText;
        }

        public function set htmlText(arg1:String):void
        {
            if (arg1 == htmlText) 
            {
                return;
            }
            if (componentInspectorSetting && arg1 == "") 
            {
                return;
            }
            _html = true;
            _savedHTML = arg1;
            textField.htmlText = arg1;
            if (textField.autoSize != flash.text.TextFieldAutoSize.NONE) 
            {
                invalidate(fl.core.InvalidationType.SIZE);
            }
            return;
        }

        public function get condenseWhite():Boolean
        {
            return textField.condenseWhite;
        }

        public function set condenseWhite(arg1:Boolean):void
        {
            textField.condenseWhite = arg1;
            if (textField.autoSize != flash.text.TextFieldAutoSize.NONE) 
            {
                invalidate(fl.core.InvalidationType.SIZE);
            }
            return;
        }

        public function get selectable():Boolean
        {
            return textField.selectable;
        }

        public function set selectable(arg1:Boolean):void
        {
            textField.selectable = arg1;
            return;
        }

        public function get wordWrap():Boolean
        {
            return textField.wordWrap;
        }

        public function set wordWrap(arg1:Boolean):void
        {
            textField.wordWrap = arg1;
            if (textField.autoSize != flash.text.TextFieldAutoSize.NONE) 
            {
                invalidate(fl.core.InvalidationType.SIZE);
            }
            return;
        }

        public function get autoSize():String
        {
            return textField.autoSize;
        }

        public function set autoSize(arg1:String):void
        {
            textField.autoSize = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public override function get width():Number
        {
            if (!(textField.autoSize == flash.text.TextFieldAutoSize.NONE) && !wordWrap) 
            {
                return _width;
            }
            return actualWidth;
        }

        public override function set width(arg1:Number):void
        {
            actualWidth = arg1;
            super.width = arg1;
            return;
        }

        public override function get height():Number
        {
            if (!(textField.autoSize == flash.text.TextFieldAutoSize.NONE) && wordWrap) 
            {
                return _height;
            }
            return actualHeight;
        }

        public override function setSize(arg1:Number, arg2:Number):void
        {
            actualWidth = arg1;
            actualHeight = arg2;
            super.setSize(arg1, arg2);
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            textField = new flash.text.TextField();
            addChild(textField);
            textField.type = flash.text.TextFieldType.DYNAMIC;
            textField.selectable = false;
            textField.wordWrap = false;
            return;
        }

        protected override function draw():void
        {
            var loc1:*=null;
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                drawTextFormat();
                loc1 = getStyleValue("embedFonts");
                if (loc1 != null) 
                {
                    textField.embedFonts = loc1;
                }
                if (textField.autoSize != flash.text.TextFieldAutoSize.NONE) 
                {
                    invalidate(fl.core.InvalidationType.SIZE, false);
                }
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
            }
            super.draw();
            return;
        }

        protected function drawTextFormat():void
        {
            var loc2:*=null;
            var loc1:*=getStyleValue("textFormat") as flash.text.TextFormat;
            if (loc1 == null) 
            {
                loc2 = fl.core.UIComponent.getStyleDefinition();
                loc1 = enabled ? loc2.defaultTextFormat as flash.text.TextFormat : loc2.defaultDisabledTextFormat as flash.text.TextFormat;
            }
            textField.defaultTextFormat = loc1;
            textField.setTextFormat(loc1);
            if (_html && !(_savedHTML == null)) 
            {
                htmlText = _savedHTML;
            }
            return;
        }

        protected function drawLayout():void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc1:*=false;
            textField.width = width;
            textField.height = height;
            if (textField.autoSize == flash.text.TextFieldAutoSize.NONE) 
            {
                textField.width = actualWidth;
                textField.height = actualHeight;
                textField.x = 0;
            }
            else 
            {
                loc2 = textField.width;
                loc3 = textField.height;
                loc1 = !(_width == loc2) || !(_height == loc3);
                _width = loc2;
                _height = loc3;
                var loc4:*=textField.autoSize;
                switch (loc4) 
                {
                    case flash.text.TextFieldAutoSize.CENTER:
                    {
                        textField.x = actualWidth / 2 - textField.width / 2;
                        break;
                    }
                    case flash.text.TextFieldAutoSize.LEFT:
                    {
                        textField.x = 0;
                        break;
                    }
                    case flash.text.TextFieldAutoSize.RIGHT:
                    {
                        textField.x = -(textField.width - actualWidth);
                        break;
                    }
                }
            }
            if (loc1) 
            {
                dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.RESIZE, true));
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"textFormat":null, "embedFonts":false};
        }

        public var textField:flash.text.TextField;

        protected var actualWidth:Number;

        protected var actualHeight:Number;

        protected var defaultLabel:String="Label";

        protected var _savedHTML:String;

        protected var _html:Boolean=false;

        internal static var defaultStyles:Object;
    }
}


//      class LabelButton
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.ui.*;
    
    public class LabelButton extends fl.controls.BaseButton implements fl.managers.IFocusManagerComponent
    {
        public function LabelButton()
        {
            super();
            return;
        }

        public function get label():String
        {
            return _label;
        }

        public function set label(arg1:String):void
        {
            _label = arg1;
            if (textField.text != _label) 
            {
                textField.text = _label;
                dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.LABEL_CHANGE));
            }
            invalidate(fl.core.InvalidationType.SIZE);
            invalidate(fl.core.InvalidationType.STYLES);
            return;
        }

        public function get labelPlacement():String
        {
            return _labelPlacement;
        }

        public function set labelPlacement(arg1:String):void
        {
            _labelPlacement = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get toggle():Boolean
        {
            return _toggle;
        }

        public function set toggle(arg1:Boolean):void
        {
            if (!arg1 && super.selected) 
            {
                selected = false;
            }
            _toggle = arg1;
            if (_toggle) 
            {
                addEventListener(flash.events.MouseEvent.CLICK, toggleSelected, false, 0, true);
            }
            else 
            {
                removeEventListener(flash.events.MouseEvent.CLICK, toggleSelected);
            }
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        protected function toggleSelected(arg1:flash.events.MouseEvent):void
        {
            selected = !selected;
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE, true));
            return;
        }

        public override function get selected():Boolean
        {
            return _toggle ? _selected : false;
        }

        public override function set selected(arg1:Boolean):void
        {
            _selected = arg1;
            if (_toggle) 
            {
                invalidate(fl.core.InvalidationType.STATE);
            }
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            textField = new flash.text.TextField();
            textField.type = flash.text.TextFieldType.DYNAMIC;
            textField.selectable = false;
            addChild(textField);
            return;
        }

        protected override function draw():void
        {
            if (textField.text != _label) 
            {
                label = _label;
            }
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                drawBackground();
                drawIcon();
                drawTextFormat();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STYLES)) 
            {
                if (isFocused && focusManager.showFocusIndicator) 
                {
                    drawFocus(true);
                }
            }
            validate();
            return;
        }

        protected function drawIcon():void
        {
            var loc1:*=icon;
            var loc2:*=enabled ? mouseState : "disabled";
            if (selected) 
            {
                loc2 = "selected" + loc2.substr(0, 1).toUpperCase() + loc2.substr(1);
            }
            loc2 = loc2 + "Icon";
            var loc3:*=getStyleValue(loc2);
            if (loc3 == null) 
            {
                loc3 = getStyleValue("icon");
            }
            if (loc3 != null) 
            {
                icon = getDisplayObjectInstance(loc3);
            }
            if (icon != null) 
            {
                addChildAt(icon, 1);
            }
            if (!(loc1 == null) && !(loc1 == icon)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected function drawTextFormat():void
        {
            var loc1:*=fl.core.UIComponent.getStyleDefinition();
            var loc2:*=enabled ? loc1.defaultTextFormat as flash.text.TextFormat : loc1.defaultDisabledTextFormat as flash.text.TextFormat;
            textField.setTextFormat(loc2);
            var loc3:*=getStyleValue(enabled ? "textFormat" : "disabledTextFormat") as flash.text.TextFormat;
            if (loc3 == null) 
            {
                loc3 = loc2;
            }
            else 
            {
                textField.setTextFormat(loc3);
            }
            textField.defaultTextFormat = loc3;
            setEmbedFont();
            return;
        }

        protected function setEmbedFont():*
        {
            var loc1:*=getStyleValue("embedFonts");
            if (loc1 != null) 
            {
                textField.embedFonts = loc1;
            }
            return;
        }

        protected override function drawLayout():void
        {
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc1:*=Number(getStyleValue("textPadding"));
            var loc2:*=icon == null && mode == "center" ? fl.controls.ButtonLabelPlacement.TOP : _labelPlacement;
            textField.height = textField.textHeight + 4;
            var loc3:*=textField.textWidth + 4;
            var loc4:*=textField.textHeight + 4;
            var loc5:*=icon != null ? icon.width + loc1 : 0;
            var loc6:*=icon != null ? icon.height + loc1 : 0;
            textField.visible = label.length > 0;
            if (icon != null) 
            {
                icon.x = Math.round((width - icon.width) / 2);
                icon.y = Math.round((height - icon.height) / 2);
            }
            if (textField.visible != false) 
            {
                if (loc2 == fl.controls.ButtonLabelPlacement.BOTTOM || loc2 == fl.controls.ButtonLabelPlacement.TOP) 
                {
                    loc7 = Math.max(0, Math.min(loc3, width - 2 * loc1));
                    if (height - 2 > loc4) 
                    {
                        loc8 = loc4;
                    }
                    else 
                    {
                        loc8 = height - 2;
                    }
                    var loc9:*;
                    loc3 = loc9 = loc7;
                    textField.width = loc9;
                    loc4 = loc9 = loc8;
                    textField.height = loc9;
                    textField.x = Math.round((width - loc3) / 2);
                    textField.y = Math.round((height - textField.height - loc6) / 2 + (loc2 != fl.controls.ButtonLabelPlacement.BOTTOM ? 0 : loc6));
                    if (icon != null) 
                    {
                        icon.y = Math.round(loc2 != fl.controls.ButtonLabelPlacement.BOTTOM ? textField.y + textField.height + loc1 : textField.y - loc6);
                    }
                }
                else 
                {
                    loc7 = Math.max(0, Math.min(loc3, width - loc5 - 2 * loc1));
                    loc3 = loc9 = loc7;
                    textField.width = loc9;
                    textField.x = Math.round((width - loc3 - loc5) / 2 + (loc2 == fl.controls.ButtonLabelPlacement.LEFT ? 0 : loc5));
                    textField.y = Math.round((height - textField.height) / 2);
                    if (icon != null) 
                    {
                        icon.x = Math.round(loc2 == fl.controls.ButtonLabelPlacement.LEFT ? textField.x + loc3 + loc1 : textField.x - loc5);
                    }
                }
            }
            else 
            {
                textField.width = 0;
                textField.height = 0;
            }
            super.drawLayout();
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (!enabled) 
            {
                return;
            }
            if (arg1.keyCode == flash.ui.Keyboard.SPACE) 
            {
                if (oldMouseState == null) 
                {
                    oldMouseState = mouseState;
                }
                setMouseState("down");
                startPress();
            }
            return;
        }

        protected override function keyUpHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (!enabled) 
            {
                return;
            }
            if (arg1.keyCode == flash.ui.Keyboard.SPACE) 
            {
                setMouseState(oldMouseState);
                oldMouseState = null;
                endPress();
                dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.CLICK));
            }
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.LabelButton.createAccessibilityImplementation != null) 
            {
                fl.controls.LabelButton.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.BaseButton.getStyleDefinition());
        }

        
        {
            defaultStyles = {"icon":null, "upIcon":null, "downIcon":null, "overIcon":null, "disabledIcon":null, "selectedDisabledIcon":null, "selectedUpIcon":null, "selectedDownIcon":null, "selectedOverIcon":null, "textFormat":null, "disabledTextFormat":null, "textPadding":5, "embedFonts":false};
        }

        public var textField:flash.text.TextField;

        protected var _labelPlacement:String="right";

        protected var _toggle:Boolean=false;

        protected var icon:flash.display.DisplayObject;

        protected var oldMouseState:String;

        protected var _label:String="Label";

        protected var mode:String="center";

        internal static var defaultStyles:Object;

        public static var createAccessibilityImplementation:Function;
    }
}


//      class List
package fl.controls 
{
    import fl.controls.listClasses.*;
    import fl.core.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.ui.*;
    import flash.utils.*;
    
    public class List extends fl.controls.SelectableList implements fl.managers.IFocusManagerComponent
    {
        public function List()
        {
            super();
            return;
        }

        protected override function moveSelectionVertically(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            var loc1:*=Math.max(Math.floor(calculateAvailableHeight() / rowHeight), 1);
            var loc2:*=-1;
            var loc3:*=0;
            var loc4:*=arg1;
            switch (loc4) 
            {
                case flash.ui.Keyboard.UP:
                {
                    if (caretIndex > 0) 
                    {
                        loc2 = (caretIndex - 1);
                    }
                    break;
                }
                case flash.ui.Keyboard.DOWN:
                {
                    if (caretIndex < (length - 1)) 
                    {
                        loc2 = caretIndex + 1;
                    }
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    if (caretIndex > 0) 
                    {
                        loc2 = Math.max(caretIndex - loc1, 0);
                    }
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    if (caretIndex < (length - 1)) 
                    {
                        loc2 = Math.min(caretIndex + loc1, (length - 1));
                    }
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    if (caretIndex > 0) 
                    {
                        loc2 = 0;
                    }
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    if (caretIndex < (length - 1)) 
                    {
                        loc2 = (length - 1);
                    }
                    break;
                }
            }
            if (loc2 >= 0) 
            {
                doKeySelection(loc2, arg2, arg3);
                scrollToSelected();
            }
            return;
        }

        protected function doKeySelection(arg1:int, arg2:Boolean, arg3:Boolean):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=false;
            if (arg2) 
            {
                loc3 = [];
                loc4 = lastCaretIndex;
                loc5 = arg1;
                if (loc4 == -1) 
                {
                    loc4 = caretIndex == -1 ? arg1 : caretIndex;
                }
                if (loc4 > loc5) 
                {
                    loc5 = loc4;
                    loc4 = arg1;
                }
                loc2 = loc4;
                while (loc2 <= loc5) 
                {
                    loc3.push(loc2);
                    ++loc2;
                }
                selectedIndices = loc3;
                caretIndex = arg1;
                loc1 = true;
            }
            else 
            {
                selectedIndex = arg1;
                var loc6:*;
                lastCaretIndex = loc6 = arg1;
                caretIndex = loc6;
                loc1 = true;
            }
            if (loc1) 
            {
                dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public override function itemToLabel(arg1:Object):String
        {
            if (_labelFunction != null) 
            {
                return String(_labelFunction(arg1));
            }
            return arg1[_labelField] == null ? "" : String(arg1[_labelField]);
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.List.createAccessibilityImplementation != null) 
            {
                fl.controls.List.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.SelectableList.getStyleDefinition());
        }

        
        {
            defaultStyles = {"focusRectSkin":null, "focusRectPadding":null};
        }

        public function get labelField():String
        {
            return _labelField;
        }

        public function set labelField(arg1:String):void
        {
            if (arg1 == _labelField) 
            {
                return;
            }
            _labelField = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get labelFunction():Function
        {
            return _labelFunction;
        }

        public function set labelFunction(arg1:Function):void
        {
            if (_labelFunction == arg1) 
            {
                return;
            }
            _labelFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get iconField():String
        {
            return _iconField;
        }

        public function set iconField(arg1:String):void
        {
            if (arg1 == _iconField) 
            {
                return;
            }
            _iconField = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get iconFunction():Function
        {
            return _iconFunction;
        }

        public function set iconFunction(arg1:Function):void
        {
            if (_iconFunction == arg1) 
            {
                return;
            }
            _iconFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public override function get rowCount():uint
        {
            return Math.ceil(calculateAvailableHeight() / rowHeight);
        }

        public function set rowCount(arg1:uint):void
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0;
            height = rowHeight * arg1 + 2 * loc1 + loc2;
            return;
        }

        public function get rowHeight():Number
        {
            return _rowHeight;
        }

        public function set rowHeight(arg1:Number):void
        {
            _rowHeight = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public override function scrollToIndex(arg1:int):void
        {
            drawNow();
            var loc1:*=(Math.floor((_verticalScrollPosition + availableHeight) / rowHeight) - 1);
            var loc2:*=Math.ceil(_verticalScrollPosition / rowHeight);
            if (arg1 < loc2) 
            {
                verticalScrollPosition = arg1 * rowHeight;
            }
            else if (arg1 > loc1) 
            {
                verticalScrollPosition = (arg1 + 1) * rowHeight - availableHeight;
            }
            return;
        }

        protected override function configUI():void
        {
            useFixedHorizontalScrolling = true;
            _horizontalScrollPolicy = fl.controls.ScrollPolicy.AUTO;
            _verticalScrollPolicy = fl.controls.ScrollPolicy.AUTO;
            super.configUI();
            return;
        }

        protected function calculateAvailableHeight():Number
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            return height - loc1 * 2 - (_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0);
        }

        protected override function setHorizontalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            list.x = -arg1;
            super.setHorizontalScrollPosition(arg1, true);
            return;
        }

        protected override function setVerticalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            invalidate(fl.core.InvalidationType.SCROLL);
            super.setVerticalScrollPosition(arg1, true);
            return;
        }

        protected override function draw():void
        {
            var loc1:*=!(contentHeight == rowHeight * length);
            contentHeight = rowHeight * length;
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")) 
                {
                    invalidate(fl.core.InvalidationType.SIZE, false);
                }
                if (_cellRenderer != getStyleValue("cellRenderer")) 
                {
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                }
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STATE) || loc1) 
            {
                drawLayout();
            }
            if (isInvalid(fl.core.InvalidationType.RENDERER_STYLES)) 
            {
                updateRendererStyles();
            }
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.SIZE, fl.core.InvalidationType.DATA, fl.core.InvalidationType.SCROLL, fl.core.InvalidationType.SELECTED)) 
            {
                drawList();
            }
            updateChildren();
            validate();
            return;
        }

        protected override function drawList():void
        {
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc9:*=false;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*;
            listHolder.y = loc14 = contentPadding;
            listHolder.x = loc14;
            var loc1:*=listHolder.scrollRect;
            loc1.x = _horizontalScrollPosition;
            loc1.y = Math.floor(_verticalScrollPosition) % rowHeight;
            listHolder.scrollRect = loc1;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var loc2:*=Math.floor(_verticalScrollPosition / rowHeight);
            var loc3:*=Math.min(length, loc2 + rowCount + 1);
            renderedItems = loc14 = new flash.utils.Dictionary(true);
            var loc7:*=loc14;
            loc4 = loc2;
            while (loc4 < loc3) 
            {
                loc7[_dataProvider.getItemAt(loc4)] = true;
                ++loc4;
            }
            var loc8:*=new flash.utils.Dictionary(true);
            while (activeCellRenderers.length > 0) 
            {
                loc5 = (loc6 = activeCellRenderers.pop() as fl.controls.listClasses.ICellRenderer).data;
                if (loc7[loc5] == null || invalidItems[loc5] == true) 
                {
                    availableCellRenderers.push(loc6);
                }
                else 
                {
                    loc8[loc5] = loc6;
                    invalidItems[loc5] = true;
                }
                list.removeChild(loc6 as flash.display.DisplayObject);
            }
            invalidItems = new flash.utils.Dictionary(true);
            loc4 = loc2;
            while (loc4 < loc3) 
            {
                loc9 = false;
                loc5 = _dataProvider.getItemAt(loc4);
                if (loc8[loc5] == null) 
                {
                    if (availableCellRenderers.length > 0) 
                    {
                        loc6 = availableCellRenderers.pop() as fl.controls.listClasses.ICellRenderer;
                    }
                    else if ((loc12 = (loc6 = getDisplayObjectInstance(getStyleValue("cellRenderer")) as fl.controls.listClasses.ICellRenderer) as flash.display.Sprite) != null) 
                    {
                        loc12.addEventListener(flash.events.MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                        loc12.addEventListener(flash.events.MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                        loc12.addEventListener(flash.events.MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                        loc12.addEventListener(flash.events.Event.CHANGE, handleCellRendererChange, false, 0, true);
                        loc12.doubleClickEnabled = true;
                        loc12.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                        if (loc12.hasOwnProperty("setStyle")) 
                        {
                            loc14 = 0;
                            var loc15:*=rendererStyles;
                            for (loc13 in loc15) 
                            {
                                var loc16:*;
                                (loc16 = loc12)["setStyle"](loc13, rendererStyles[loc13]);
                            }
                        }
                    }
                }
                else 
                {
                    loc9 = true;
                    loc6 = loc8[loc5];
                    delete loc8[loc5];
                }
                list.addChild(loc6 as flash.display.Sprite);
                activeCellRenderers.push(loc6);
                loc6.y = rowHeight * (loc4 - loc2);
                loc6.setSize(availableWidth + _maxHorizontalScrollPosition, rowHeight);
                loc10 = itemToLabel(loc5);
                loc11 = null;
                if (_iconFunction == null) 
                {
                    if (_iconField != null) 
                    {
                        loc11 = loc5[_iconField];
                    }
                }
                else 
                {
                    loc11 = _iconFunction(loc5);
                }
                if (!loc9) 
                {
                    loc6.data = loc5;
                }
                loc6.listData = new fl.controls.listClasses.ListData(loc10, loc11, this, loc4, loc4, 0);
                loc6.selected = !(_selectedIndices.indexOf(loc4) == -1);
                if (loc6 is fl.core.UIComponent) 
                {
                    (loc6 as fl.core.UIComponent).drawNow();
                }
                ++loc4;
            }
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc1:*=0;
            if (!selectable) 
            {
                return;
            }
            var loc2:*=arg1.keyCode;
            switch (loc2) 
            {
                case flash.ui.Keyboard.UP:
                case flash.ui.Keyboard.DOWN:
                case flash.ui.Keyboard.END:
                case flash.ui.Keyboard.HOME:
                case flash.ui.Keyboard.PAGE_UP:
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    moveSelectionVertically(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                case flash.ui.Keyboard.RIGHT:
                {
                    moveSelectionHorizontally(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    break;
                }
                case flash.ui.Keyboard.SPACE:
                {
                    if (caretIndex == -1) 
                    {
                        caretIndex = 0;
                    }
                    doKeySelection(caretIndex, arg1.shiftKey, arg1.ctrlKey);
                    scrollToSelected();
                    break;
                }
                default:
                {
                    loc1 = getNextIndexAtLetter(String.fromCharCode(arg1.keyCode), selectedIndex);
                    if (loc1 > -1) 
                    {
                        selectedIndex = loc1;
                        scrollToSelected();
                    }
                    break;
                }
            }
            arg1.stopPropagation();
            return;
        }

        protected override function moveSelectionHorizontally(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            return;
        }

        protected var _rowHeight:Number=20;

        protected var _cellRenderer:Object;

        protected var _labelField:String="label";

        protected var _labelFunction:Function;

        protected var _iconField:String="icon";

        protected var _iconFunction:Function;

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//      class NumericStepper
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.ui.*;
    
    public class NumericStepper extends fl.core.UIComponent implements fl.managers.IFocusManagerComponent
    {
        public function NumericStepper()
        {
            super();
            setStyles();
            stepSize = _stepSize;
            return;
        }

        protected override function isOurFocus(arg1:flash.display.DisplayObject):Boolean
        {
            return arg1 == inputField || super.isOurFocus(arg1);
        }

        protected function setStyles():void
        {
            copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
            copyStylesToChild(upArrow, UP_ARROW_STYLES);
            copyStylesToChild(inputField, TEXT_INPUT_STYLES);
            return;
        }

        protected function inRange(arg1:Number):Boolean
        {
            return arg1 >= _minimum && arg1 <= _maximum;
        }

        protected function inStep(arg1:Number):Boolean
        {
            return (arg1 - _minimum) % _stepSize == 0;
        }

        public override function set enabled(arg1:Boolean):void
        {
            if (arg1 == enabled) 
            {
                return;
            }
            super.enabled = arg1;
            var loc1:*;
            inputField.enabled = loc1 = arg1;
            downArrow.enabled = loc1 = loc1;
            upArrow.enabled = loc1;
            return;
        }

        protected function getValidValue(arg1:Number):Number
        {
            if (isNaN(arg1)) 
            {
                return _value;
            }
            var loc1:*=Number((_stepSize * Math.round(arg1 / _stepSize)).toFixed(_precision));
            if (loc1 > maximum) 
            {
                return maximum;
            }
            if (loc1 < minimum) 
            {
                return minimum;
            }
            return loc1;
        }

        protected function getPrecision():Number
        {
            var loc1:*=_stepSize.toString();
            if (loc1.indexOf(".") == -1) 
            {
                return 0;
            }
            return loc1.split(".").pop().length;
        }

        
        {
            defaultStyles = {"downArrowDisabledSkin":"NumericStepperDownArrow_disabledSkin", "downArrowDownSkin":"NumericStepperDownArrow_downSkin", "downArrowOverSkin":"NumericStepperDownArrow_overSkin", "downArrowUpSkin":"NumericStepperDownArrow_upSkin", "upArrowDisabledSkin":"NumericStepperUpArrow_disabledSkin", "upArrowDownSkin":"NumericStepperUpArrow_downSkin", "upArrowOverSkin":"NumericStepperUpArrow_overSkin", "upArrowUpSkin":"NumericStepperUpArrow_upSkin", "upSkin":"TextInput_upSkin", "disabledSkin":"TextInput_disabledSkin", "focusRect":null, "focusRectSkin":null, "focusRectPadding":null, "repeatDelay":500, "repeatInterval":35, "embedFonts":false};
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        public function get maximum():Number
        {
            return _maximum;
        }

        public function set maximum(arg1:Number):void
        {
            _maximum = arg1;
            if (_value > _maximum) 
            {
                setValue(_maximum, false);
            }
            return;
        }

        public function get minimum():Number
        {
            return _minimum;
        }

        public function set minimum(arg1:Number):void
        {
            _minimum = arg1;
            if (_value < _minimum) 
            {
                setValue(_minimum, false);
            }
            return;
        }

        public function get nextValue():Number
        {
            var loc1:*=_value + _stepSize;
            return inRange(loc1) ? loc1 : _value;
        }

        public function get previousValue():Number
        {
            var loc1:*=_value - _stepSize;
            return inRange(loc1) ? loc1 : _value;
        }

        public function get stepSize():Number
        {
            return _stepSize;
        }

        public function set stepSize(arg1:Number):void
        {
            _stepSize = arg1;
            _precision = getPrecision();
            setValue(_value);
            return;
        }

        public function get value():Number
        {
            return _value;
        }

        public function set value(arg1:Number):void
        {
            setValue(arg1, false);
            return;
        }

        public function get textField():fl.controls.TextInput
        {
            return inputField;
        }

        public function get imeMode():String
        {
            return inputField.imeMode;
        }

        public function set imeMode(arg1:String):void
        {
            inputField.imeMode = arg1;
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            upArrow = new fl.controls.BaseButton();
            copyStylesToChild(upArrow, UP_ARROW_STYLES);
            upArrow.autoRepeat = true;
            upArrow.setSize(21, 12);
            upArrow.focusEnabled = false;
            addChild(upArrow);
            downArrow = new fl.controls.BaseButton();
            copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
            downArrow.autoRepeat = true;
            downArrow.setSize(21, 12);
            downArrow.focusEnabled = false;
            addChild(downArrow);
            inputField = new fl.controls.TextInput();
            copyStylesToChild(inputField, TEXT_INPUT_STYLES);
            inputField.restrict = "0-9\\-\\.\\,";
            inputField.text = _value.toString();
            inputField.setSize(21, 24);
            inputField.focusTarget = this as fl.managers.IFocusManagerComponent;
            inputField.focusEnabled = false;
            inputField.addEventListener(flash.events.FocusEvent.FOCUS_IN, passEvent);
            inputField.addEventListener(flash.events.FocusEvent.FOCUS_OUT, passEvent);
            addChild(inputField);
            inputField.addEventListener(flash.events.Event.CHANGE, onTextChange, false, 0, true);
            upArrow.addEventListener(fl.events.ComponentEvent.BUTTON_DOWN, stepperPressHandler, false, 0, true);
            downArrow.addEventListener(fl.events.ComponentEvent.BUTTON_DOWN, stepperPressHandler, false, 0, true);
            return;
        }

        protected function setValue(arg1:Number, arg2:Boolean=true):void
        {
            if (arg1 == _value) 
            {
                return;
            }
            var loc1:*=_value;
            _value = getValidValue(arg1);
            inputField.text = _value.toString();
            if (arg2) 
            {
                dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE, true));
            }
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (!enabled) 
            {
                return;
            }
            arg1.stopImmediatePropagation();
            var loc1:*=Number(inputField.text);
            var loc2:*=arg1.keyCode;
            switch (loc2) 
            {
                case flash.ui.Keyboard.END:
                {
                    setValue(maximum);
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    setValue(minimum);
                    break;
                }
                case flash.ui.Keyboard.UP:
                {
                    setValue(nextValue);
                    break;
                }
                case flash.ui.Keyboard.DOWN:
                {
                    setValue(previousValue);
                    break;
                }
                case flash.ui.Keyboard.ENTER:
                {
                    setValue(loc1);
                    break;
                }
            }
            return;
        }

        protected function stepperPressHandler(arg1:fl.events.ComponentEvent):void
        {
            setValue(Number(inputField.text), false);
            var loc1:*=arg1.currentTarget;
            switch (loc1) 
            {
                case upArrow:
                {
                    setValue(nextValue);
                    break;
                }
                case downArrow:
                {
                    setValue(previousValue);
                }
            }
            inputField.setFocus();
            inputField.textField.setSelection(0, 0);
            return;
        }

        public override function drawFocus(arg1:Boolean):void
        {
            var loc1:*=NaN;
            super.drawFocus(arg1);
            if (arg1) 
            {
                loc1 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.width = width + loc1 * 2;
                uiFocusRect.height = height + loc1 * 2;
            }
            return;
        }

        protected override function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            if (arg1.eventPhase == 3) 
            {
                setValue(Number(inputField.text));
            }
            super.focusOutHandler(arg1);
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                setStyles();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
            }
            if (isFocused && focusManager.showFocusIndicator) 
            {
                drawFocus(true);
            }
            validate();
            return;
        }

        protected function drawLayout():void
        {
            var loc1:*=NaN;
            loc1 = width - upArrow.width;
            var loc2:*=height / 2;
            inputField.setSize(loc1, height);
            upArrow.height = loc2;
            downArrow.height = Math.floor(loc2);
            downArrow.move(loc1, loc2);
            upArrow.move(loc1, 0);
            downArrow.drawNow();
            upArrow.drawNow();
            inputField.drawNow();
            return;
        }

        protected function onTextChange(arg1:flash.events.Event):void
        {
            arg1.stopImmediatePropagation();
            return;
        }

        protected function passEvent(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            return;
        }

        public override function setFocus():void
        {
            if (stage) 
            {
                stage.focus = inputField.textField;
            }
            return;
        }

        protected static const DOWN_ARROW_STYLES:Object={"disabledSkin":"downArrowDisabledSkin", "downSkin":"downArrowDownSkin", "overSkin":"downArrowOverSkin", "upSkin":"downArrowUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        protected static const UP_ARROW_STYLES:Object={"disabledSkin":"upArrowDisabledSkin", "downSkin":"upArrowDownSkin", "overSkin":"upArrowOverSkin", "upSkin":"upArrowUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        protected static const TEXT_INPUT_STYLES:Object={"upSkin":"upSkin", "disabledSkin":"disabledSkin", "textPadding":"textPadding", "textFormat":"textFormat", "disabledTextFormat":"disabledTextFormat", "embedFonts":"embedFonts"};

        protected var inputField:fl.controls.TextInput;

        protected var upArrow:fl.controls.BaseButton;

        protected var downArrow:fl.controls.BaseButton;

        protected var _maximum:Number=10;

        protected var _value:Number=1;

        protected var _stepSize:Number=1;

        protected var _precision:Number;

        protected var _minimum:Number=0;

        internal static var defaultStyles:Object;
    }
}


//      class ProgressBar
package fl.controls 
{
    import fl.controls.progressBarClasses.*;
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    
    public class ProgressBar extends fl.core.UIComponent
    {
        public function ProgressBar()
        {
            super();
            return;
        }

        protected function pollSource(arg1:flash.events.Event):void
        {
            if (_source == null) 
            {
                return;
            }
            _setProgress(_source.bytesLoaded, _source.bytesTotal, true);
            if (_maximum > 0 && _maximum == _value) 
            {
                removeEventListener(flash.events.Event.ENTER_FRAME, pollSource);
                dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
            }
            return;
        }

        protected function handleProgress(arg1:flash.events.ProgressEvent):void
        {
            _setProgress(arg1.bytesLoaded, arg1.bytesTotal, true);
            return;
        }

        protected function handleComplete(arg1:flash.events.Event):void
        {
            _setProgress(_maximum, _maximum, true);
            dispatchEvent(arg1);
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                drawTrack();
                drawBars();
                invalidate(fl.core.InvalidationType.STATE, false);
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.STATE)) 
            {
                indeterminateBar.visible = _indeterminate;
                determinateBar.visible = !_indeterminate;
                invalidate(fl.core.InvalidationType.DATA, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
                invalidate(fl.core.InvalidationType.DATA, false);
            }
            if (isInvalid(fl.core.InvalidationType.DATA) && !_indeterminate) 
            {
                drawDeterminateBar();
            }
            super.draw();
            return;
        }

        public function set sourceName(arg1:String):void
        {
            if (!componentInspectorSetting) 
            {
                return;
            }
            if (arg1 == "") 
            {
                return;
            }
            var loc1:*=parent.getChildByName(arg1) as flash.display.DisplayObject;
            if (loc1 == null) 
            {
                throw new Error("Source clip \'" + arg1 + "\' not found on parent.");
            }
            source = loc1;
            return;
        }

        protected function drawTrack():void
        {
            var loc1:*=track;
            track = getDisplayObjectInstance(getStyleValue("trackSkin"));
            addChildAt(track, 0);
            if (!(loc1 == null) && !(loc1 == track)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected function drawBars():void
        {
            var loc1:*=determinateBar;
            var loc2:*=indeterminateBar;
            determinateBar = getDisplayObjectInstance(getStyleValue("barSkin"));
            addChild(determinateBar);
            indeterminateBar = getDisplayObjectInstance(getStyleValue("indeterminateBar")) as fl.core.UIComponent;
            indeterminateBar.setStyle("indeterminateSkin", getStyleValue("indeterminateSkin"));
            addChild(indeterminateBar);
            if (!(loc1 == null) && !(loc1 == determinateBar)) 
            {
                removeChild(loc1);
            }
            if (!(loc2 == null) && !(loc2 == determinateBar)) 
            {
                removeChild(loc2);
            }
            return;
        }

        protected function drawLayout():void
        {
            var loc1:*=Number(getStyleValue("barPadding"));
            track.width = width;
            track.height = height;
            indeterminateBar.setSize(width - loc1 * 2, height - loc1 * 2);
            indeterminateBar.move(loc1, loc1);
            indeterminateBar.drawNow();
            determinateBar.height = height - loc1 * 2;
            determinateBar.y = loc1;
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"trackSkin":"ProgressBar_trackSkin", "barSkin":"ProgressBar_barSkin", "indeterminateSkin":"ProgressBar_indeterminateSkin", "indeterminateBar":fl.controls.progressBarClasses.IndeterminateBar, "barPadding":0};
        }

        public function get direction():String
        {
            return _direction;
        }

        public function set direction(arg1:String):void
        {
            _direction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get indeterminate():Boolean
        {
            return _indeterminate;
        }

        public function set indeterminate(arg1:Boolean):void
        {
            if (!(_mode == fl.controls.ProgressBarMode.MANUAL) || _indeterminate == arg1) 
            {
                return;
            }
            setIndeterminate(arg1);
            return;
        }

        public function get minimum():Number
        {
            return _minimum;
        }

        public function set minimum(arg1:Number):void
        {
            if (_mode != fl.controls.ProgressBarMode.MANUAL) 
            {
                return;
            }
            _minimum = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get maximum():Number
        {
            return _maximum;
        }

        public function set maximum(arg1:Number):void
        {
            setProgress(_value, arg1);
            return;
        }

        public function get value():Number
        {
            return _value;
        }

        public function set value(arg1:Number):void
        {
            setProgress(arg1, _maximum);
            return;
        }

        public function setProgress(arg1:Number, arg2:Number):void
        {
            if (_mode != fl.controls.ProgressBarMode.MANUAL) 
            {
                return;
            }
            _setProgress(arg1, arg2);
            return;
        }

        protected function drawDeterminateBar():void
        {
            var loc1:*=percentComplete / 100;
            var loc2:*=Number(getStyleValue("barPadding"));
            determinateBar.width = Math.round((width - loc2 * 2) * loc1);
            determinateBar.x = _direction != fl.controls.ProgressBarDirection.LEFT ? loc2 : width - loc2 - determinateBar.width;
            return;
        }

        public function get source():Object
        {
            return _source;
        }

        public function set source(arg1:Object):void
        {
            if (_source == arg1) 
            {
                return;
            }
            if (_mode != fl.controls.ProgressBarMode.MANUAL) 
            {
                resetProgress();
            }
            _source = arg1;
            if (_source == null) 
            {
                return;
            }
            if (_mode != fl.controls.ProgressBarMode.EVENT) 
            {
                if (_mode == fl.controls.ProgressBarMode.POLLED) 
                {
                    addEventListener(flash.events.Event.ENTER_FRAME, pollSource, false, 0, true);
                }
            }
            else 
            {
                setupSourceEvents();
            }
            return;
        }

        public function get percentComplete():Number
        {
            return _maximum <= _minimum || _value <= _minimum ? 0 : Math.max(0, Math.min(100, (_value - _minimum) / (_maximum - _minimum) * 100));
        }

        public function get mode():String
        {
            return _mode;
        }

        public function set mode(arg1:String):void
        {
            if (_mode == arg1) 
            {
                return;
            }
            resetProgress();
            _mode = arg1;
            if (arg1 == fl.controls.ProgressBarMode.EVENT && !(_source == null)) 
            {
                setupSourceEvents();
            }
            else if (arg1 == fl.controls.ProgressBarMode.POLLED) 
            {
                addEventListener(flash.events.Event.ENTER_FRAME, pollSource, false, 0, true);
            }
            setIndeterminate(!(_mode == fl.controls.ProgressBarMode.MANUAL));
            return;
        }

        public function reset():void
        {
            _setProgress(0, 0);
            var loc1:*=_source;
            _source = null;
            source = loc1;
            return;
        }

        protected function _setProgress(arg1:Number, arg2:Number, arg3:Boolean=false):void
        {
            if (arg1 == _value && arg2 == _maximum) 
            {
                return;
            }
            _value = arg1;
            _maximum = arg2;
            if (!(_value == _loaded) && arg3) 
            {
                dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.PROGRESS, false, false, _value, _maximum));
                _loaded = _value;
            }
            if (_mode != fl.controls.ProgressBarMode.MANUAL) 
            {
                setIndeterminate(arg2 == 0);
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected function setIndeterminate(arg1:Boolean):void
        {
            if (_indeterminate == arg1) 
            {
                return;
            }
            _indeterminate = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        protected function resetProgress():void
        {
            if (_mode == fl.controls.ProgressBarMode.EVENT && !(_source == null)) 
            {
                cleanupSourceEvents();
            }
            else if (_mode != fl.controls.ProgressBarMode.POLLED) 
            {
                if (_source != null) 
                {
                    _source = null;
                }
            }
            else 
            {
                removeEventListener(flash.events.Event.ENTER_FRAME, pollSource);
            }
            var loc1:*;
            _value = loc1 = 0;
            _maximum = loc1 = loc1;
            _minimum = loc1;
            return;
        }

        protected function setupSourceEvents():void
        {
            _source.addEventListener(flash.events.ProgressEvent.PROGRESS, handleProgress, false, 0, true);
            _source.addEventListener(flash.events.Event.COMPLETE, handleComplete, false, 0, true);
            return;
        }

        protected function cleanupSourceEvents():void
        {
            _source.removeEventListener(flash.events.ProgressEvent.PROGRESS, handleProgress);
            _source.removeEventListener(flash.events.Event.COMPLETE, handleComplete);
            return;
        }

        protected var track:flash.display.DisplayObject;

        protected var determinateBar:flash.display.DisplayObject;

        protected var indeterminateBar:fl.core.UIComponent;

        protected var _direction:String="right";

        protected var _mode:String="event";

        protected var _minimum:Number=0;

        protected var _maximum:Number=0;

        protected var _value:Number=0;

        protected var _source:Object;

        protected var _loaded:Number;

        protected var _indeterminate:Boolean=true;

        internal static var defaultStyles:Object;
    }
}


//      class ProgressBarDirection
package fl.controls 
{
    public class ProgressBarDirection extends Object
    {
        public function ProgressBarDirection()
        {
            super();
            return;
        }

        public static const RIGHT:String="right";

        public static const LEFT:String="left";
    }
}


//      class ProgressBarMode
package fl.controls 
{
    public class ProgressBarMode extends Object
    {
        public function ProgressBarMode()
        {
            super();
            return;
        }

        public static const MANUAL:String="manual";

        public static const EVENT:String="event";

        public static const POLLED:String="polled";
    }
}


//      class RadioButton
package fl.controls 
{
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.ui.*;
    
    public class RadioButton extends fl.controls.LabelButton implements fl.managers.IFocusManagerGroup
    {
        public function RadioButton()
        {
            super();
            mode = "border";
            groupName = defaultGroupName;
            return;
        }

        internal function setThis():void
        {
            var loc1:*=_group;
            if (loc1 == null) 
            {
                super.selected = true;
            }
            else if (loc1.selection != this) 
            {
                loc1.selection = this;
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"icon":null, "upIcon":"RadioButton_upIcon", "downIcon":"RadioButton_downIcon", "overIcon":"RadioButton_overIcon", "disabledIcon":"RadioButton_disabledIcon", "selectedDisabledIcon":"RadioButton_selectedDisabledIcon", "selectedUpIcon":"RadioButton_selectedUpIcon", "selectedDownIcon":"RadioButton_selectedDownIcon", "selectedOverIcon":"RadioButton_selectedOverIcon", "focusRectSkin":null, "focusRectPadding":null, "textFormat":null, "disabledTextFormat":null, "embedFonts":null, "textPadding":5};
        }

        public override function get toggle():Boolean
        {
            return true;
        }

        public override function set toggle(arg1:Boolean):void
        {
            throw new Error("Warning: You cannot change a RadioButtons toggle.");
        }

        public override function get autoRepeat():Boolean
        {
            return false;
        }

        public override function set autoRepeat(arg1:Boolean):void
        {
            return;
        }

        public override function get selected():Boolean
        {
            return super.selected;
        }

        public override function set selected(arg1:Boolean):void
        {
            if (arg1 == false || selected) 
            {
                return;
            }
            if (_group == null) 
            {
                super.selected = arg1;
            }
            else 
            {
                _group.selection = this;
            }
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            super.toggle = true;
            var loc1:*=new flash.display.Shape();
            var loc2:*=loc1.graphics;
            loc2.beginFill(0, 0);
            loc2.drawRect(0, 0, 100, 100);
            loc2.endFill();
            background = loc1 as flash.display.DisplayObject;
            addChildAt(background, 0);
            addEventListener(flash.events.MouseEvent.CLICK, handleClick, false, 0, true);
            return;
        }

        protected override function drawLayout():void
        {
            super.drawLayout();
            var loc1:*=Number(getStyleValue("textPadding"));
            var loc2:*=_labelPlacement;
            switch (loc2) 
            {
                case fl.controls.ButtonLabelPlacement.RIGHT:
                {
                    icon.x = loc1;
                    textField.x = icon.x + (icon.width + loc1);
                    background.width = textField.x + textField.width + loc1;
                    background.height = Math.max(textField.height, icon.height) + loc1 * 2;
                    break;
                }
                case fl.controls.ButtonLabelPlacement.LEFT:
                {
                    icon.x = width - icon.width - loc1;
                    textField.x = width - icon.width - loc1 * 2 - textField.width;
                    background.width = textField.width + icon.width + loc1 * 3;
                    background.height = Math.max(textField.height, icon.height) + loc1 * 2;
                    break;
                }
                case fl.controls.ButtonLabelPlacement.TOP:
                case fl.controls.ButtonLabelPlacement.BOTTOM:
                {
                    background.width = Math.max(textField.width, icon.width) + loc1 * 2;
                    background.height = textField.height + icon.height + loc1 * 3;
                    break;
                }
            }
            background.x = Math.min(icon.x - loc1, textField.x - loc1);
            background.y = Math.min(icon.y - loc1, textField.y - loc1);
            return;
        }

        public function get groupName():String
        {
            return _group != null ? _group.name : null;
        }

        public function set groupName(arg1:String):void
        {
            if (_group != null) 
            {
                _group.removeRadioButton(this);
                _group.removeEventListener(flash.events.Event.CHANGE, handleChange);
            }
            _group = arg1 != null ? fl.controls.RadioButtonGroup.getGroup(arg1) : null;
            if (_group != null) 
            {
                _group.addRadioButton(this);
                _group.addEventListener(flash.events.Event.CHANGE, handleChange, false, 0, true);
            }
            return;
        }

        public function get group():fl.controls.RadioButtonGroup
        {
            return _group;
        }

        public function set group(arg1:fl.controls.RadioButtonGroup):void
        {
            groupName = arg1.name;
            return;
        }

        public function get value():Object
        {
            return _value;
        }

        public function set value(arg1:Object):void
        {
            _value = arg1;
            return;
        }

        public override function drawFocus(arg1:Boolean):void
        {
            var loc1:*=NaN;
            super.drawFocus(arg1);
            if (arg1) 
            {
                loc1 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = background.x - loc1;
                uiFocusRect.y = background.y - loc1;
                uiFocusRect.width = background.width + loc1 * 2;
                uiFocusRect.height = background.height + loc1 * 2;
            }
            return;
        }

        protected function handleChange(arg1:flash.events.Event):void
        {
            super.selected = _group.selection == this;
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE, true));
            return;
        }

        protected function handleClick(arg1:flash.events.MouseEvent):void
        {
            if (_group == null) 
            {
                return;
            }
            _group.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.CLICK, true));
            return;
        }

        protected override function draw():void
        {
            super.draw();
            return;
        }

        protected override function drawBackground():void
        {
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.RadioButton.createAccessibilityImplementation != null) 
            {
                fl.controls.RadioButton.createAccessibilityImplementation(this);
            }
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc1:*=arg1.keyCode;
            switch (loc1) 
            {
                case flash.ui.Keyboard.DOWN:
                {
                    setNext(!arg1.ctrlKey);
                    arg1.stopPropagation();
                    break;
                }
                case flash.ui.Keyboard.UP:
                {
                    setPrev(!arg1.ctrlKey);
                    arg1.stopPropagation();
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                {
                    setPrev(!arg1.ctrlKey);
                    arg1.stopPropagation();
                    break;
                }
                case flash.ui.Keyboard.RIGHT:
                {
                    setNext(!arg1.ctrlKey);
                    arg1.stopPropagation();
                    break;
                }
                case flash.ui.Keyboard.SPACE:
                {
                    setThis();
                    _toggle = false;
                }
                default:
                {
                    super.keyDownHandler(arg1);
                    break;
                }
            }
            return;
        }

        protected override function keyUpHandler(arg1:flash.events.KeyboardEvent):void
        {
            super.keyUpHandler(arg1);
            if (arg1.keyCode == flash.ui.Keyboard.SPACE && !_toggle) 
            {
                _toggle = true;
            }
            return;
        }

        internal function setPrev(arg1:Boolean=true):void
        {
            var loc5:*=null;
            var loc1:*=_group;
            if (loc1 == null) 
            {
                return;
            }
            var loc2:*=focusManager;
            if (loc2) 
            {
                loc2.showFocusIndicator = true;
            }
            var loc3:*;
            var loc4:*=loc3 = loc1.getRadioButtonIndex(this);
            if (loc3 != -1) 
            {
                do 
                {
                    loc4 = --loc4 != -1 ? loc4 : (loc1.numRadioButtons - 1);
                    if ((loc5 = loc1.getRadioButtonAt(loc4)) && loc5.enabled) 
                    {
                        if (arg1) 
                        {
                            loc1.selection = loc5;
                        }
                        loc5.setFocus();
                        return;
                    }
                    if (arg1 && !(loc1.getRadioButtonAt(loc4) == loc1.selection)) 
                    {
                        loc1.selection = this;
                    }
                    this.drawFocus(true);
                }
                while (loc4 != loc3);
            }
            return;
        }

        internal function setNext(arg1:Boolean=true):void
        {
            var loc6:*=null;
            var loc1:*=_group;
            if (loc1 == null) 
            {
                return;
            }
            var loc2:*=focusManager;
            if (loc2) 
            {
                loc2.showFocusIndicator = true;
            }
            var loc3:*=loc1.getRadioButtonIndex(this);
            var loc4:*=loc1.numRadioButtons;
            var loc5:*=loc3;
            if (loc3 != -1) 
            {
                do 
                {
                    ++loc5;
                    loc5 = loc5 > (loc1.numRadioButtons - 1) ? 0 : loc5;
                    if ((loc6 = loc1.getRadioButtonAt(loc5)) && loc6.enabled) 
                    {
                        if (arg1) 
                        {
                            loc1.selection = loc6;
                        }
                        loc6.setFocus();
                        return;
                    }
                    if (arg1 && !(loc1.getRadioButtonAt(loc5) == loc1.selection)) 
                    {
                        loc1.selection = this;
                    }
                    this.drawFocus(true);
                }
                while (loc5 != loc3);
            }
            return;
        }

        protected var _value:Object;

        protected var _group:fl.controls.RadioButtonGroup;

        protected var defaultGroupName:String="RadioButtonGroup";

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//      class RadioButtonGroup
package fl.controls 
{
    import flash.events.*;
    
    public class RadioButtonGroup extends flash.events.EventDispatcher
    {
        public function RadioButtonGroup(arg1:String)
        {
            super();
            _name = arg1;
            radioButtons = [];
            registerGroup(this);
            return;
        }

        public function get name():String
        {
            return _name;
        }

        public function addRadioButton(arg1:fl.controls.RadioButton):void
        {
            if (arg1.groupName != name) 
            {
                arg1.groupName = name;
                return;
            }
            radioButtons.push(arg1);
            if (arg1.selected) 
            {
                selection = arg1;
            }
            return;
        }

        public function removeRadioButton(arg1:fl.controls.RadioButton):void
        {
            var loc1:*=getRadioButtonIndex(arg1);
            if (loc1 != -1) 
            {
                radioButtons.splice(loc1, 1);
            }
            if (_selection == arg1) 
            {
                _selection = null;
            }
            return;
        }

        public function get selection():fl.controls.RadioButton
        {
            return _selection;
        }

        public function set selection(arg1:fl.controls.RadioButton):void
        {
            if (_selection == arg1 || arg1 == null || getRadioButtonIndex(arg1) == -1) 
            {
                return;
            }
            _selection = arg1;
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE, true));
            return;
        }

        public function get selectedData():Object
        {
            var loc1:*=_selection;
            return loc1 != null ? loc1.value : null;
        }

        public function set selectedData(arg1:Object):void
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < radioButtons.length) 
            {
                loc2 = radioButtons[loc1] as fl.controls.RadioButton;
                if (loc2.value == arg1) 
                {
                    selection = loc2;
                    return;
                }
                ++loc1;
            }
            return;
        }

        public function getRadioButtonIndex(arg1:fl.controls.RadioButton):int
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < radioButtons.length) 
            {
                loc2 = radioButtons[loc1] as fl.controls.RadioButton;
                if (loc2 == arg1) 
                {
                    return loc1;
                }
                ++loc1;
            }
            return -1;
        }

        public function getRadioButtonAt(arg1:int):fl.controls.RadioButton
        {
            return fl.controls.RadioButton(radioButtons[arg1]);
        }

        public function get numRadioButtons():int
        {
            return radioButtons.length;
        }

        public static function getGroup(arg1:String):fl.controls.RadioButtonGroup
        {
            if (groups == null) 
            {
                groups = {};
            }
            var loc1:*=groups[arg1] as fl.controls.RadioButtonGroup;
            if (loc1 == null) 
            {
                loc1 = new RadioButtonGroup(arg1);
                var loc2:*;
                var loc3:*;
                if (++groupCount % 20 == 0) 
                {
                    cleanUpGroups();
                }
            }
            return loc1;
        }

        internal static function registerGroup(arg1:fl.controls.RadioButtonGroup):void
        {
            if (groups == null) 
            {
                groups = {};
            }
            groups[arg1.name] = arg1;
            return;
        }

        internal static function cleanUpGroups():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=groups;
            for (loc1 in loc4) 
            {
                loc2 = groups[loc1] as fl.controls.RadioButtonGroup;
                if (loc2.radioButtons.length != 0) 
                {
                    continue;
                }
                delete groups[loc1];
            }
            return;
        }

        
        {
            groupCount = 0;
        }

        protected var _name:String;

        protected var radioButtons:Array;

        protected var _selection:fl.controls.RadioButton;

        internal static var groups:Object;

        internal static var groupCount:uint=0;
    }
}


//      class ScrollBar
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    
    public class ScrollBar extends fl.core.UIComponent
    {
        public function ScrollBar()
        {
            super();
            setStyles();
            focusEnabled = false;
            return;
        }

        public function get direction():String
        {
            return _direction;
        }

        public function set direction(arg1:String):void
        {
            if (_direction == arg1) 
            {
                return;
            }
            _direction = arg1;
            if (isLivePreview) 
            {
                return;
            }
            setScaleY(1);
            var loc1:*=_direction == fl.controls.ScrollBarDirection.HORIZONTAL;
            if (loc1 && componentInspectorSetting) 
            {
                if (rotation == 90) 
                {
                    return;
                }
                setScaleX(-1);
                rotation = -90;
            }
            if (!componentInspectorSetting) 
            {
                if (loc1 && rotation == 0) 
                {
                    rotation = -90;
                    setScaleX(-1);
                }
                else if (!loc1 && rotation == -90) 
                {
                    rotation = 0;
                    setScaleX(1);
                }
            }
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            track = new fl.controls.BaseButton();
            track.move(0, 14);
            track.useHandCursor = false;
            track.autoRepeat = true;
            track.focusEnabled = false;
            addChild(track);
            thumb = new fl.controls.LabelButton();
            thumb.label = "";
            thumb.setSize(WIDTH, 15);
            thumb.move(0, 15);
            thumb.focusEnabled = false;
            addChild(thumb);
            downArrow = new fl.controls.BaseButton();
            downArrow.setSize(WIDTH, 14);
            downArrow.autoRepeat = true;
            downArrow.focusEnabled = false;
            addChild(downArrow);
            upArrow = new fl.controls.BaseButton();
            upArrow.setSize(WIDTH, 14);
            upArrow.move(0, 0);
            upArrow.autoRepeat = true;
            upArrow.focusEnabled = false;
            addChild(upArrow);
            upArrow.addEventListener(fl.events.ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            downArrow.addEventListener(fl.events.ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            track.addEventListener(fl.events.ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            thumb.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
            enabled = false;
            return;
        }

        protected override function draw():void
        {
            var loc1:*=NaN;
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                loc1 = super.height;
                downArrow.move(0, Math.max(upArrow.height, loc1 - downArrow.height));
                track.setSize(WIDTH, Math.max(0, loc1 - (downArrow.height + upArrow.height)));
                updateThumb();
            }
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                setStyles();
            }
            downArrow.drawNow();
            upArrow.drawNow();
            track.drawNow();
            thumb.drawNow();
            validate();
            return;
        }

        protected function scrollPressHandler(arg1:fl.events.ComponentEvent):void
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            arg1.stopImmediatePropagation();
            if (arg1.currentTarget != upArrow) 
            {
                if (arg1.currentTarget != downArrow) 
                {
                    loc1 = track.mouseY / track.height * (_maxScrollPosition - _minScrollPosition) + _minScrollPosition;
                    loc2 = pageScrollSize != 0 ? pageScrollSize : pageSize;
                    if (_scrollPosition < loc1) 
                    {
                        setScrollPosition(Math.min(loc1, _scrollPosition + loc2));
                    }
                    else if (_scrollPosition > loc1) 
                    {
                        setScrollPosition(Math.max(loc1, _scrollPosition - loc2));
                    }
                }
                else 
                {
                    setScrollPosition(_scrollPosition + _lineScrollSize);
                }
            }
            else 
            {
                setScrollPosition(_scrollPosition - _lineScrollSize);
            }
            return;
        }

        public function set maxScrollPosition(arg1:Number):void
        {
            setScrollProperties(_pageSize, _minScrollPosition, arg1);
            return;
        }

        protected function thumbPressHandler(arg1:flash.events.MouseEvent):void
        {
            inDrag = true;
            thumbScrollOffset = mouseY - thumb.y;
            thumb.mouseStateLocked = true;
            mouseChildren = false;
            var loc1:*=focusManager.form;
            loc1.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, handleThumbDrag, false, 0, true);
            loc1.addEventListener(flash.events.MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
            return;
        }

        protected function handleThumbDrag(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=Math.max(0, Math.min(track.height - thumb.height, mouseY - track.y - thumbScrollOffset));
            setScrollPosition(loc1 / (track.height - thumb.height) * (_maxScrollPosition - _minScrollPosition) + _minScrollPosition);
            return;
        }

        protected function thumbReleaseHandler(arg1:flash.events.MouseEvent):void
        {
            inDrag = false;
            mouseChildren = true;
            thumb.mouseStateLocked = false;
            var loc1:*=focusManager.form;
            loc1.removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, handleThumbDrag);
            loc1.removeEventListener(flash.events.MouseEvent.MOUSE_UP, thumbReleaseHandler);
            return;
        }

        public function setScrollPosition(arg1:Number, arg2:Boolean=true):void
        {
            var loc1:*=scrollPosition;
            _scrollPosition = Math.max(_minScrollPosition, Math.min(_maxScrollPosition, arg1));
            if (loc1 == _scrollPosition) 
            {
                return;
            }
            if (arg2) 
            {
                dispatchEvent(new fl.events.ScrollEvent(_direction, scrollPosition - loc1, scrollPosition));
            }
            updateThumb();
            return;
        }

        protected function setStyles():void
        {
            copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
            copyStylesToChild(thumb, THUMB_STYLES);
            copyStylesToChild(track, TRACK_STYLES);
            copyStylesToChild(upArrow, UP_ARROW_STYLES);
            return;
        }

        protected function updateThumb():void
        {
            var loc1:*=_maxScrollPosition - _minScrollPosition + _pageSize;
            if (track.height <= 12 || _maxScrollPosition <= _minScrollPosition || loc1 == 0 || isNaN(loc1)) 
            {
                thumb.height = 12;
                thumb.visible = false;
            }
            else 
            {
                thumb.height = Math.max(13, _pageSize / loc1 * track.height);
                thumb.y = track.y + (track.height - thumb.height) * (_scrollPosition - _minScrollPosition) / (_maxScrollPosition - _minScrollPosition);
                thumb.visible = enabled;
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        public override function setSize(arg1:Number, arg2:Number):void
        {
            if (_direction != fl.controls.ScrollBarDirection.HORIZONTAL) 
            {
                super.setSize(arg1, arg2);
            }
            else 
            {
                super.setSize(arg2, arg1);
            }
            return;
        }

        public override function get width():Number
        {
            return _direction != fl.controls.ScrollBarDirection.HORIZONTAL ? super.width : super.height;
        }

        public override function get height():Number
        {
            return _direction != fl.controls.ScrollBarDirection.HORIZONTAL ? super.height : super.width;
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            var loc1:*;
            upArrow.enabled = loc1 = enabled && _maxScrollPosition > _minScrollPosition;
            thumb.enabled = loc1 = loc1;
            track.enabled = loc1 = loc1;
            downArrow.enabled = loc1;
            updateThumb();
            return;
        }

        public function setScrollProperties(arg1:Number, arg2:Number, arg3:Number, arg4:Number=0):void
        {
            this.pageSize = arg1;
            _minScrollPosition = arg2;
            _maxScrollPosition = arg3;
            if (arg4 >= 0) 
            {
                _pageScrollSize = arg4;
            }
            enabled = _maxScrollPosition > _minScrollPosition;
            setScrollPosition(_scrollPosition, false);
            updateThumb();
            return;
        }

        public function get scrollPosition():Number
        {
            return _scrollPosition;
        }

        public function set scrollPosition(arg1:Number):void
        {
            setScrollPosition(arg1, true);
            return;
        }

        public function get minScrollPosition():Number
        {
            return _minScrollPosition;
        }

        public function set minScrollPosition(arg1:Number):void
        {
            setScrollProperties(_pageSize, arg1, _maxScrollPosition);
            return;
        }

        public function get maxScrollPosition():Number
        {
            return _maxScrollPosition;
        }

        
        {
            defaultStyles = {"downArrowDisabledSkin":"ScrollArrowDown_disabledSkin", "downArrowDownSkin":"ScrollArrowDown_downSkin", "downArrowOverSkin":"ScrollArrowDown_overSkin", "downArrowUpSkin":"ScrollArrowDown_upSkin", "thumbDisabledSkin":"ScrollThumb_upSkin", "thumbDownSkin":"ScrollThumb_downSkin", "thumbOverSkin":"ScrollThumb_overSkin", "thumbUpSkin":"ScrollThumb_upSkin", "trackDisabledSkin":"ScrollTrack_skin", "trackDownSkin":"ScrollTrack_skin", "trackOverSkin":"ScrollTrack_skin", "trackUpSkin":"ScrollTrack_skin", "upArrowDisabledSkin":"ScrollArrowUp_disabledSkin", "upArrowDownSkin":"ScrollArrowUp_downSkin", "upArrowOverSkin":"ScrollArrowUp_overSkin", "upArrowUpSkin":"ScrollArrowUp_upSkin", "thumbIcon":"ScrollBar_thumbIcon", "repeatDelay":500, "repeatInterval":35};
        }

        public function get pageSize():Number
        {
            return _pageSize;
        }

        public function set pageSize(arg1:Number):void
        {
            if (arg1 > 0) 
            {
                _pageSize = arg1;
            }
            return;
        }

        public function get pageScrollSize():Number
        {
            return _pageScrollSize != 0 ? _pageScrollSize : _pageSize;
        }

        public function set pageScrollSize(arg1:Number):void
        {
            if (arg1 >= 0) 
            {
                _pageScrollSize = arg1;
            }
            return;
        }

        public function get lineScrollSize():Number
        {
            return _lineScrollSize;
        }

        public function set lineScrollSize(arg1:Number):void
        {
            if (arg1 > 0) 
            {
                _lineScrollSize = arg1;
            }
            return;
        }

        public static const WIDTH:Number=15;

        protected static const DOWN_ARROW_STYLES:Object={"disabledSkin":"downArrowDisabledSkin", "downSkin":"downArrowDownSkin", "overSkin":"downArrowOverSkin", "upSkin":"downArrowUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        protected static const THUMB_STYLES:Object={"disabledSkin":"thumbDisabledSkin", "downSkin":"thumbDownSkin", "overSkin":"thumbOverSkin", "upSkin":"thumbUpSkin", "icon":"thumbIcon", "textPadding":0};

        protected static const TRACK_STYLES:Object={"disabledSkin":"trackDisabledSkin", "downSkin":"trackDownSkin", "overSkin":"trackOverSkin", "upSkin":"trackUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        protected static const UP_ARROW_STYLES:Object={"disabledSkin":"upArrowDisabledSkin", "downSkin":"upArrowDownSkin", "overSkin":"upArrowOverSkin", "upSkin":"upArrowUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        internal var _pageSize:Number=10;

        internal var _pageScrollSize:Number=0;

        internal var _lineScrollSize:Number=1;

        internal var _minScrollPosition:Number=0;

        internal var _maxScrollPosition:Number=0;

        internal var _direction:String="vertical";

        internal var thumbScrollOffset:Number;

        protected var inDrag:Boolean=false;

        protected var upArrow:fl.controls.BaseButton;

        protected var downArrow:fl.controls.BaseButton;

        protected var thumb:fl.controls.LabelButton;

        protected var track:fl.controls.BaseButton;

        internal var _scrollPosition:Number=0;

        internal static var defaultStyles:Object;
    }
}


//      class ScrollBarDirection
package fl.controls 
{
    public class ScrollBarDirection extends Object
    {
        public function ScrollBarDirection()
        {
            super();
            return;
        }

        public static const VERTICAL:String="vertical";

        public static const HORIZONTAL:String="horizontal";
    }
}


//      class ScrollPolicy
package fl.controls 
{
    public class ScrollPolicy extends Object
    {
        public function ScrollPolicy()
        {
            super();
            return;
        }

        public static const ON:String="on";

        public static const AUTO:String="auto";

        public static const OFF:String="off";
    }
}


//      class SelectableList
package fl.controls 
{
    import fl.containers.*;
    import fl.controls.listClasses.*;
    import fl.core.*;
    import fl.data.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.ui.*;
    import flash.utils.*;
    
    public class SelectableList extends fl.containers.BaseScrollPane implements fl.managers.IFocusManagerComponent
    {
        public function SelectableList()
        {
            super();
            activeCellRenderers = [];
            availableCellRenderers = [];
            invalidItems = new flash.utils.Dictionary(true);
            renderedItems = new flash.utils.Dictionary(true);
            _selectedIndices = [];
            if (dataProvider == null) 
            {
                dataProvider = new fl.data.DataProvider();
            }
            verticalScrollPolicy = fl.controls.ScrollPolicy.AUTO;
            rendererStyles = {};
            updatedRendererStyles = {};
            return;
        }

        protected function handleDataChange(arg1:fl.events.DataChangeEvent):void
        {
            var loc4:*=0;
            var loc1:*=arg1.startIndex;
            var loc2:*=arg1.endIndex;
            var loc3:*;
            if ((loc3 = arg1.changeType) != fl.events.DataChangeType.INVALIDATE_ALL) 
            {
                if (loc3 != fl.events.DataChangeType.INVALIDATE) 
                {
                    if (loc3 != fl.events.DataChangeType.ADD) 
                    {
                        if (loc3 != fl.events.DataChangeType.REMOVE) 
                        {
                            if (loc3 != fl.events.DataChangeType.REMOVE_ALL) 
                            {
                                if (loc3 != fl.events.DataChangeType.REPLACE) 
                                {
                                    selectedItems = preChangeItems;
                                    preChangeItems = null;
                                }
                            }
                            else 
                            {
                                clearSelection();
                            }
                        }
                        else 
                        {
                            loc4 = 0;
                            while (loc4 < _selectedIndices.length) 
                            {
                                if (_selectedIndices[loc4] >= loc1) 
                                {
                                    if (_selectedIndices[loc4] <= loc2) 
                                    {
                                        delete _selectedIndices[loc4];
                                    }
                                    else 
                                    {
                                        _selectedIndices[loc4] = _selectedIndices[loc4] - (loc1 - loc2 + 1);
                                    }
                                }
                                ++loc4;
                            }
                        }
                    }
                    else 
                    {
                        loc4 = 0;
                        while (loc4 < _selectedIndices.length) 
                        {
                            if (_selectedIndices[loc4] >= loc1) 
                            {
                                _selectedIndices[loc4] = _selectedIndices[loc4] + (loc1 - loc2);
                            }
                            ++loc4;
                        }
                    }
                }
                else 
                {
                    loc4 = 0;
                    while (loc4 < arg1.items.length) 
                    {
                        invalidateItem(arg1.items[loc4]);
                        ++loc4;
                    }
                }
            }
            else 
            {
                clearSelection();
                invalidateList();
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected function handleCellRendererMouseEvent(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=arg1.target as fl.controls.listClasses.ICellRenderer;
            var loc2:*=arg1.type != flash.events.MouseEvent.ROLL_OVER ? fl.events.ListEvent.ITEM_ROLL_OUT : fl.events.ListEvent.ITEM_ROLL_OVER;
            dispatchEvent(new fl.events.ListEvent(loc2, false, false, loc1.listData.column, loc1.listData.row, loc1.listData.index, loc1.data));
            return;
        }

        protected function handleCellRendererClick(arg1:flash.events.MouseEvent):void
        {
            var loc4:*=0;
            var loc5:*=0;
            if (!_enabled) 
            {
                return;
            }
            var loc1:*=arg1.currentTarget as fl.controls.listClasses.ICellRenderer;
            var loc2:*=loc1.listData.index;
            if (!dispatchEvent(new fl.events.ListEvent(fl.events.ListEvent.ITEM_CLICK, false, true, loc1.listData.column, loc1.listData.row, loc2, loc1.data)) || !_selectable) 
            {
                return;
            }
            var loc3:*=selectedIndices.indexOf(loc2);
            if (_allowMultipleSelection) 
            {
                if (arg1.shiftKey) 
                {
                    loc5 = _selectedIndices.length > 0 ? _selectedIndices[0] : loc2;
                    _selectedIndices = [];
                    if (loc5 > loc2) 
                    {
                        loc4 = loc5;
                        while (loc4 >= loc2) 
                        {
                            _selectedIndices.push(loc4);
                            --loc4;
                        }
                    }
                    else 
                    {
                        loc4 = loc5;
                        while (loc4 <= loc2) 
                        {
                            _selectedIndices.push(loc4);
                            ++loc4;
                        }
                    }
                    caretIndex = loc2;
                }
                else if (arg1.ctrlKey) 
                {
                    if (loc3 == -1) 
                    {
                        loc1.selected = true;
                        _selectedIndices.push(loc2);
                    }
                    else 
                    {
                        loc1.selected = false;
                        _selectedIndices.splice(loc3, 1);
                    }
                    caretIndex = loc2;
                }
                else 
                {
                    _selectedIndices = [loc2];
                    caretIndex = loc6 = loc2;
                    lastCaretIndex = loc6;
                }
            }
            else 
            {
                if (loc3 != -1) 
                {
                    return;
                }
                loc1.selected = true;
                _selectedIndices = [loc2];
                var loc6:*;
                caretIndex = loc6 = loc2;
                lastCaretIndex = loc6;
            }
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected function handleCellRendererChange(arg1:flash.events.Event):void
        {
            var loc1:*=arg1.currentTarget as fl.controls.listClasses.ICellRenderer;
            var loc2:*=loc1.listData.index;
            _dataProvider.invalidateItemAt(loc2);
            return;
        }

        protected function handleCellRendererDoubleClick(arg1:flash.events.MouseEvent):void
        {
            if (!_enabled) 
            {
                return;
            }
            var loc1:*=arg1.currentTarget as fl.controls.listClasses.ICellRenderer;
            var loc2:*=loc1.listData.index;
            dispatchEvent(new fl.events.ListEvent(fl.events.ListEvent.ITEM_DOUBLE_CLICK, false, true, loc1.listData.column, loc1.listData.row, loc2, loc1.data));
            return;
        }

        protected override function setHorizontalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            if (arg1 == _horizontalScrollPosition) 
            {
                return;
            }
            var loc1:*=arg1 - _horizontalScrollPosition;
            _horizontalScrollPosition = arg1;
            if (arg2) 
            {
                dispatchEvent(new fl.events.ScrollEvent(fl.controls.ScrollBarDirection.HORIZONTAL, loc1, arg1));
            }
            return;
        }

        protected override function setVerticalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            if (arg1 == _verticalScrollPosition) 
            {
                return;
            }
            var loc1:*=arg1 - _verticalScrollPosition;
            _verticalScrollPosition = arg1;
            if (arg2) 
            {
                dispatchEvent(new fl.events.ScrollEvent(fl.controls.ScrollBarDirection.VERTICAL, loc1, arg1));
            }
            return;
        }

        protected override function draw():void
        {
            super.draw();
            return;
        }

        protected override function drawLayout():void
        {
            super.drawLayout();
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            listHolder.scrollRect = contentScrollRect;
            return;
        }

        public function get dataProvider():fl.data.DataProvider
        {
            return _dataProvider;
        }

        protected function updateRendererStyles():void
        {
            var loc4:*=null;
            var loc1:*=availableCellRenderers.concat(activeCellRenderers);
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                if (loc1[loc3].setStyle != null) 
                {
                    var loc5:*=0;
                    var loc6:*=updatedRendererStyles;
                    for (loc4 in loc6) 
                    {
                        loc1[loc3].setStyle(loc4, updatedRendererStyles[loc4]);
                    }
                    loc1[loc3].drawNow();
                }
                ++loc3;
            }
            updatedRendererStyles = {};
            return;
        }

        protected function drawList():void
        {
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (!selectable) 
            {
                return;
            }
            var loc1:*=arg1.keyCode;
            switch (loc1) 
            {
                case flash.ui.Keyboard.UP:
                case flash.ui.Keyboard.DOWN:
                case flash.ui.Keyboard.END:
                case flash.ui.Keyboard.HOME:
                case flash.ui.Keyboard.PAGE_UP:
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    moveSelectionVertically(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    arg1.stopPropagation();
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                case flash.ui.Keyboard.RIGHT:
                {
                    moveSelectionHorizontally(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    arg1.stopPropagation();
                    break;
                }
            }
            return;
        }

        protected function moveSelectionHorizontally(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            return;
        }

        protected function moveSelectionVertically(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.SelectableList.createAccessibilityImplementation != null) 
            {
                fl.controls.SelectableList.createAccessibilityImplementation(this);
            }
            return;
        }

        protected function onPreChange(arg1:fl.events.DataChangeEvent):void
        {
            var loc1:*=arg1.changeType;
            switch (loc1) 
            {
                case fl.events.DataChangeType.REMOVE:
                case fl.events.DataChangeType.ADD:
                case fl.events.DataChangeType.INVALIDATE:
                case fl.events.DataChangeType.REMOVE_ALL:
                case fl.events.DataChangeType.REPLACE:
                case fl.events.DataChangeType.INVALIDATE_ALL:
                {
                    break;
                }
                default:
                {
                    preChangeItems = selectedItems;
                    break;
                }
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.containers.BaseScrollPane.getStyleDefinition());
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            list.mouseChildren = _enabled;
            return;
        }

        
        {
            defaultStyles = {"skin":"List_skin", "cellRenderer":fl.controls.listClasses.CellRenderer, "contentPadding":null, "disabledAlpha":null};
        }

        public function set dataProvider(arg1:fl.data.DataProvider):void
        {
            if (_dataProvider != null) 
            {
                _dataProvider.removeEventListener(fl.events.DataChangeEvent.DATA_CHANGE, handleDataChange);
                _dataProvider.removeEventListener(fl.events.DataChangeEvent.PRE_DATA_CHANGE, onPreChange);
            }
            _dataProvider = arg1;
            _dataProvider.addEventListener(fl.events.DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
            _dataProvider.addEventListener(fl.events.DataChangeEvent.PRE_DATA_CHANGE, onPreChange, false, 0, true);
            clearSelection();
            invalidateList();
            return;
        }

        public override function get maxHorizontalScrollPosition():Number
        {
            return _maxHorizontalScrollPosition;
        }

        public function set maxHorizontalScrollPosition(arg1:Number):void
        {
            _maxHorizontalScrollPosition = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get length():uint
        {
            return _dataProvider.length;
        }

        public function get allowMultipleSelection():Boolean
        {
            return _allowMultipleSelection;
        }

        public function set allowMultipleSelection(arg1:Boolean):void
        {
            if (arg1 == _allowMultipleSelection) 
            {
                return;
            }
            _allowMultipleSelection = arg1;
            if (!arg1 && _selectedIndices.length > 1) 
            {
                _selectedIndices = [_selectedIndices.pop()];
                invalidate(fl.core.InvalidationType.DATA);
            }
            return;
        }

        public function get selectable():Boolean
        {
            return _selectable;
        }

        public function set selectable(arg1:Boolean):void
        {
            if (arg1 == _selectable) 
            {
                return;
            }
            if (!arg1) 
            {
                selectedIndices = [];
            }
            _selectable = arg1;
            return;
        }

        public function get selectedIndex():int
        {
            return _selectedIndices.length != 0 ? _selectedIndices[(_selectedIndices.length - 1)] : -1;
        }

        public function set selectedIndex(arg1:int):void
        {
            selectedIndices = arg1 != -1 ? [arg1] : null;
            return;
        }

        public function get selectedIndices():Array
        {
            return _selectedIndices.concat();
        }

        public function set selectedIndices(arg1:Array):void
        {
            if (!_selectable) 
            {
                return;
            }
            _selectedIndices = arg1 != null ? arg1.concat() : [];
            invalidate(fl.core.InvalidationType.SELECTED);
            return;
        }

        public function get selectedItem():Object
        {
            return _selectedIndices.length != 0 ? _dataProvider.getItemAt(selectedIndex) : null;
        }

        public function set selectedItem(arg1:Object):void
        {
            var loc1:*=_dataProvider.getItemIndex(arg1);
            selectedIndex = loc1;
            return;
        }

        public function get selectedItems():Array
        {
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < _selectedIndices.length) 
            {
                loc1.push(_dataProvider.getItemAt(_selectedIndices[loc2]));
                ++loc2;
            }
            return loc1;
        }

        public function set selectedItems(arg1:Array):void
        {
            var loc3:*=0;
            if (arg1 == null) 
            {
                selectedIndices = null;
                return;
            }
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                if ((loc3 = _dataProvider.getItemIndex(arg1[loc2])) != -1) 
                {
                    loc1.push(loc3);
                }
                ++loc2;
            }
            selectedIndices = loc1;
            return;
        }

        public function get rowCount():uint
        {
            return 0;
        }

        public function clearSelection():void
        {
            selectedIndex = -1;
            return;
        }

        public function itemToCellRenderer(arg1:Object):fl.controls.listClasses.ICellRenderer
        {
            var loc1:*=undefined;
            var loc2:*=null;
            if (arg1 != null) 
            {
                var loc3:*=0;
                var loc4:*=activeCellRenderers;
                for (loc1 in loc4) 
                {
                    loc2 = activeCellRenderers[loc1] as fl.controls.listClasses.ICellRenderer;
                    if (loc2.data != arg1) 
                    {
                        continue;
                    }
                    return loc2;
                }
            }
            return null;
        }

        public function addItem(arg1:Object):void
        {
            _dataProvider.addItem(arg1);
            invalidateList();
            return;
        }

        public function addItemAt(arg1:Object, arg2:uint):void
        {
            _dataProvider.addItemAt(arg1, arg2);
            invalidateList();
            return;
        }

        public function removeAll():void
        {
            _dataProvider.removeAll();
            return;
        }

        public function getItemAt(arg1:uint):Object
        {
            return _dataProvider.getItemAt(arg1);
        }

        public function removeItem(arg1:Object):Object
        {
            return _dataProvider.removeItem(arg1);
        }

        public function removeItemAt(arg1:uint):Object
        {
            return _dataProvider.removeItemAt(arg1);
        }

        public function replaceItemAt(arg1:Object, arg2:uint):Object
        {
            return _dataProvider.replaceItemAt(arg1, arg2);
        }

        public function invalidateList():void
        {
            _invalidateList();
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function invalidateItem(arg1:Object):void
        {
            if (renderedItems[arg1] == null) 
            {
                return;
            }
            invalidItems[arg1] = true;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function invalidateItemAt(arg1:uint):void
        {
            var loc1:*=_dataProvider.getItemAt(arg1);
            if (loc1 != null) 
            {
                invalidateItem(loc1);
            }
            return;
        }

        public function sortItems(... rest):*
        {
            return _dataProvider.sort.apply(_dataProvider, rest);
        }

        public function sortItemsOn(arg1:String, arg2:Object=null):*
        {
            return _dataProvider.sortOn(arg1, arg2);
        }

        public function isItemSelected(arg1:Object):Boolean
        {
            return selectedItems.indexOf(arg1) > -1;
        }

        public function scrollToSelected():void
        {
            scrollToIndex(selectedIndex);
            return;
        }

        public function scrollToIndex(arg1:int):void
        {
            return;
        }

        public function getNextIndexAtLetter(arg1:String, arg2:int=-1):int
        {
            var loc3:*=NaN;
            var loc4:*=null;
            var loc5:*=null;
            if (length == 0) 
            {
                return -1;
            }
            arg1 = arg1.toUpperCase();
            var loc1:*=(length - 1);
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                if ((loc3 = arg2 + 1 + loc2) > (length - 1)) 
                {
                    loc3 = loc3 - length;
                }
                if ((loc4 = getItemAt(loc3)) == null) 
                {
                    break;
                }
                if ((loc5 = itemToLabel(loc4)) != null) 
                {
                    if (loc5.charAt(0).toUpperCase() == arg1) 
                    {
                        return loc3;
                    }
                }
                ++loc2;
            }
            return -1;
        }

        public function itemToLabel(arg1:Object):String
        {
            return arg1["label"];
        }

        public function setRendererStyle(arg1:String, arg2:Object, arg3:uint=0):void
        {
            if (rendererStyles[arg1] == arg2) 
            {
                return;
            }
            updatedRendererStyles[arg1] = arg2;
            rendererStyles[arg1] = arg2;
            invalidate(fl.core.InvalidationType.RENDERER_STYLES);
            return;
        }

        public function getRendererStyle(arg1:String, arg2:int=-1):Object
        {
            return rendererStyles[arg1];
        }

        public function clearRendererStyle(arg1:String, arg2:int=-1):void
        {
            delete rendererStyles[arg1];
            updatedRendererStyles[arg1] = null;
            invalidate(fl.core.InvalidationType.RENDERER_STYLES);
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            listHolder = new flash.display.Sprite();
            addChild(listHolder);
            listHolder.scrollRect = contentScrollRect;
            list = new flash.display.Sprite();
            listHolder.addChild(list);
            return;
        }

        protected function _invalidateList():void
        {
            availableCellRenderers = [];
            while (activeCellRenderers.length > 0) 
            {
                list.removeChild(activeCellRenderers.pop() as flash.display.DisplayObject);
            }
            return;
        }

        protected var listHolder:flash.display.Sprite;

        protected var list:flash.display.Sprite;

        protected var _dataProvider:fl.data.DataProvider;

        protected var activeCellRenderers:Array;

        protected var availableCellRenderers:Array;

        protected var renderedItems:flash.utils.Dictionary;

        protected var invalidItems:flash.utils.Dictionary;

        protected var _horizontalScrollPosition:Number;

        protected var _verticalScrollPosition:Number;

        protected var _selectable:Boolean=true;

        protected var _selectedIndices:Array;

        protected var caretIndex:int=-1;

        protected var lastCaretIndex:int=-1;

        protected var preChangeItems:Array;

        internal var collectionItemImport:fl.data.SimpleCollectionItem;

        protected var rendererStyles:Object;

        protected var updatedRendererStyles:Object;

        protected var _allowMultipleSelection:Boolean=false;

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//      class Slider
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.ui.*;
    
    public class Slider extends fl.core.UIComponent implements fl.managers.IFocusManagerComponent
    {
        public function Slider()
        {
            _direction = fl.controls.SliderDirection.HORIZONTAL;
            super();
            setStyles();
            return;
        }

        protected function calculateValue(arg1:Number, arg2:String, arg3:String, arg4:int=undefined):void
        {
            var loc1:*=arg1 / _width * (maximum - minimum);
            if (_direction != fl.controls.SliderDirection.VERTICAL) 
            {
                loc1 = minimum + loc1;
            }
            else 
            {
                loc1 = maximum - loc1;
            }
            doSetValue(loc1, arg2, arg3, arg4);
            return;
        }

        protected function doDrag(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=_width / snapInterval;
            var loc2:*=track.mouseX;
            calculateValue(loc2, fl.events.InteractionInputType.MOUSE, fl.events.SliderEventClickTarget.THUMB);
            dispatchEvent(new fl.events.SliderEvent(fl.events.SliderEvent.THUMB_DRAG, value, fl.events.SliderEventClickTarget.THUMB, fl.events.InteractionInputType.MOUSE));
            return;
        }

        protected function thumbPressHandler(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=focusManager.form;
            loc1.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, doDrag, false, 0, true);
            loc1.addEventListener(flash.events.MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
            dispatchEvent(new fl.events.SliderEvent(fl.events.SliderEvent.THUMB_PRESS, value, fl.events.SliderEventClickTarget.THUMB, fl.events.InteractionInputType.MOUSE));
            return;
        }

        protected function thumbReleaseHandler(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=focusManager.form;
            loc1.removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, doDrag);
            loc1.removeEventListener(flash.events.MouseEvent.MOUSE_UP, thumbReleaseHandler);
            dispatchEvent(new fl.events.SliderEvent(fl.events.SliderEvent.THUMB_RELEASE, value, fl.events.SliderEventClickTarget.THUMB, fl.events.InteractionInputType.MOUSE));
            dispatchEvent(new fl.events.SliderEvent(fl.events.SliderEvent.CHANGE, value, fl.events.SliderEventClickTarget.THUMB, fl.events.InteractionInputType.MOUSE));
            return;
        }

        protected function onTrackClick(arg1:flash.events.MouseEvent):void
        {
            calculateValue(track.mouseX, fl.events.InteractionInputType.MOUSE, fl.events.SliderEventClickTarget.TRACK);
            if (!liveDragging) 
            {
                dispatchEvent(new fl.events.SliderEvent(fl.events.SliderEvent.CHANGE, value, fl.events.SliderEventClickTarget.TRACK, fl.events.InteractionInputType.MOUSE));
            }
            return;
        }

        public function set direction(arg1:String):void
        {
            _direction = arg1;
            var loc1:*=_direction == fl.controls.SliderDirection.VERTICAL;
            if (isLivePreview) 
            {
                if (loc1) 
                {
                    setScaleY(-1);
                    y = track.height;
                }
                else 
                {
                    setScaleY(1);
                    y = 0;
                }
                positionThumb();
                return;
            }
            if (loc1 && componentInspectorSetting) 
            {
                if (rotation % 90 == 0) 
                {
                    setScaleY(-1);
                }
            }
            if (!componentInspectorSetting) 
            {
                rotation = loc1 ? 90 : 0;
            }
            return;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc2:*=NaN;
            if (!enabled) 
            {
                return;
            }
            var loc1:*=snapInterval > 0 ? snapInterval : 1;
            var loc3:*=direction == fl.controls.SliderDirection.HORIZONTAL;
            if (arg1.keyCode == flash.ui.Keyboard.DOWN && !loc3 || arg1.keyCode == flash.ui.Keyboard.LEFT && loc3) 
            {
                loc2 = value - loc1;
            }
            else if (arg1.keyCode == flash.ui.Keyboard.UP && !loc3 || arg1.keyCode == flash.ui.Keyboard.RIGHT && loc3) 
            {
                loc2 = value + loc1;
            }
            else if (arg1.keyCode == flash.ui.Keyboard.PAGE_DOWN && !loc3 || arg1.keyCode == flash.ui.Keyboard.HOME && loc3) 
            {
                loc2 = minimum;
            }
            else if (arg1.keyCode == flash.ui.Keyboard.PAGE_UP && !loc3 || arg1.keyCode == flash.ui.Keyboard.END && loc3) 
            {
                loc2 = maximum;
            }
            if (!isNaN(loc2)) 
            {
                arg1.stopPropagation();
                doSetValue(loc2, fl.events.InteractionInputType.KEYBOARD, null, arg1.keyCode);
            }
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            thumb = new fl.controls.BaseButton();
            thumb.setSize(13, 13);
            thumb.autoRepeat = false;
            addChild(thumb);
            thumb.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
            track = new fl.controls.BaseButton();
            track.move(0, 0);
            track.setSize(80, 4);
            track.autoRepeat = false;
            track.useHandCursor = false;
            track.addEventListener(flash.events.MouseEvent.CLICK, onTrackClick, false, 0, true);
            addChildAt(track, 0);
            return;
        }

        protected function getPrecision(arg1:Number):Number
        {
            var loc1:*=arg1.toString();
            if (loc1.indexOf(".") == -1) 
            {
                return 0;
            }
            return loc1.split(".").pop().length;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        public function get direction():String
        {
            return _direction;
        }

        
        {
            defaultStyles = {"thumbUpSkin":"SliderThumb_upSkin", "thumbOverSkin":"SliderThumb_overSkin", "thumbDownSkin":"SliderThumb_downSkin", "thumbDisabledSkin":"SliderThumb_disabledSkin", "sliderTrackSkin":"SliderTrack_skin", "sliderTrackDisabledSkin":"SliderTrack_disabledSkin", "tickSkin":"SliderTick_skin", "focusRectSkin":null, "focusRectPadding":null};
        }

        public function get minimum():Number
        {
            return _minimum;
        }

        public function set minimum(arg1:Number):void
        {
            _minimum = arg1;
            this.value = Math.max(arg1, this.value);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get maximum():Number
        {
            return _maximum;
        }

        public function set maximum(arg1:Number):void
        {
            _maximum = arg1;
            this.value = Math.min(arg1, this.value);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get tickInterval():Number
        {
            return _tickInterval;
        }

        public function set tickInterval(arg1:Number):void
        {
            _tickInterval = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get snapInterval():Number
        {
            return _snapInterval;
        }

        public function set snapInterval(arg1:Number):void
        {
            _snapInterval = arg1;
            return;
        }

        public function set liveDragging(arg1:Boolean):void
        {
            _liveDragging = arg1;
            return;
        }

        public function get liveDragging():Boolean
        {
            return _liveDragging;
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public override function set enabled(arg1:Boolean):void
        {
            if (enabled == arg1) 
            {
                return;
            }
            super.enabled = arg1;
            var loc1:*;
            thumb.enabled = loc1 = arg1;
            track.enabled = loc1;
            return;
        }

        public override function setSize(arg1:Number, arg2:Number):void
        {
            if (_direction == fl.controls.SliderDirection.VERTICAL && !isLivePreview) 
            {
                super.setSize(arg2, arg1);
            }
            else 
            {
                super.setSize(arg1, arg2);
            }
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get value():Number
        {
            return _value;
        }

        public function set value(arg1:Number):void
        {
            doSetValue(arg1);
            return;
        }

        protected function doSetValue(arg1:Number, arg2:String=null, arg3:String=null, arg4:int=undefined):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=NaN;
            var loc1:*=_value;
            if (!(_snapInterval == 0) && !(_snapInterval == 1)) 
            {
                loc2 = Math.pow(10, getPrecision(snapInterval));
                loc3 = _snapInterval * loc2;
                loc4 = Math.round(arg1 * loc2);
                arg1 = (loc5 = Math.round(loc4 / loc3) * loc3) / loc2;
                _value = Math.max(minimum, Math.min(maximum, arg1));
            }
            else 
            {
                _value = Math.max(minimum, Math.min(maximum, Math.round(arg1)));
            }
            if (!(loc1 == _value) && (liveDragging && !(arg3 == null) || arg2 == fl.events.InteractionInputType.KEYBOARD)) 
            {
                dispatchEvent(new fl.events.SliderEvent(fl.events.SliderEvent.CHANGE, value, arg3, arg2, arg4));
            }
            positionThumb();
            return;
        }

        protected function setStyles():void
        {
            copyStylesToChild(thumb, THUMB_STYLES);
            copyStylesToChild(track, TRACK_STYLES);
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                track.setSize(_width, track.height);
                track.drawNow();
                thumb.drawNow();
            }
            if (tickInterval > 0) 
            {
                drawTicks();
            }
            else 
            {
                clearTicks();
            }
            positionThumb();
            super.draw();
            return;
        }

        protected function positionThumb():void
        {
            thumb.x = (_direction != fl.controls.SliderDirection.VERTICAL ? value - minimum : maximum - value) / (maximum - minimum) * _width;
            return;
        }

        protected function drawTicks():void
        {
            var loc5:*=null;
            clearTicks();
            tickContainer = new flash.display.Sprite();
            var loc1:*=maximum < 1 ? tickInterval / 100 : tickInterval;
            var loc2:*=(maximum - minimum) / loc1;
            var loc3:*=_width / loc2;
            var loc4:*=0;
            while (loc4 <= loc2) 
            {
                (loc5 = getDisplayObjectInstance(getStyleValue("tickSkin"))).x = loc3 * loc4;
                loc5.y = track.y - loc5.height - 2;
                tickContainer.addChild(loc5);
                ++loc4;
            }
            addChild(tickContainer);
            return;
        }

        protected function clearTicks():void
        {
            if (!tickContainer || !tickContainer.parent) 
            {
                return;
            }
            removeChild(tickContainer);
            return;
        }

        protected static const TRACK_STYLES:Object={"upSkin":"sliderTrackSkin", "overSkin":"sliderTrackSkin", "downSkin":"sliderTrackSkin", "disabledSkin":"sliderTrackDisabledSkin"};

        protected static const THUMB_STYLES:Object={"upSkin":"thumbUpSkin", "overSkin":"thumbOverSkin", "downSkin":"thumbDownSkin", "disabledSkin":"thumbDisabledSkin"};

        protected static const TICK_STYLES:Object={"upSkin":"tickSkin"};

        protected var _direction:String;

        protected var _minimum:Number=0;

        protected var _maximum:Number=10;

        protected var _value:Number=0;

        protected var _tickInterval:Number=0;

        protected var _liveDragging:Boolean=false;

        protected var tickContainer:flash.display.Sprite;

        protected var thumb:fl.controls.BaseButton;

        protected var track:fl.controls.BaseButton;

        protected var _snapInterval:Number=0;

        protected static var defaultStyles:Object;
    }
}


//      class SliderDirection
package fl.controls 
{
    public class SliderDirection extends Object
    {
        public function SliderDirection()
        {
            super();
            return;
        }

        
        {
            HORIZONTAL = "horizontal";
            VERTICAL = "vertical";
        }

        public static var HORIZONTAL:String="horizontal";

        public static var VERTICAL:String="vertical";
    }
}


//      class TextArea
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.system.*;
    import flash.text.*;
    import flash.ui.*;
    
    public class TextArea extends fl.core.UIComponent implements fl.managers.IFocusManagerComponent
    {
        public function TextArea()
        {
            super();
            return;
        }

        protected function drawLayout():void
        {
            var loc1:*=Number(getStyleValue("textPadding"));
            var loc6:*;
            textField.y = loc6 = loc1;
            textField.x = loc6;
            background.width = width;
            background.height = height;
            var loc2:*=height;
            var loc3:*=needVScroll();
            var loc4:*=width - (loc3 ? _verticalScrollBar.width : 0);
            var loc5:*;
            if (loc5 = needHScroll()) 
            {
                loc2 = loc2 - _horizontalScrollBar.height;
            }
            setTextSize(loc4, loc2, loc1);
            if (loc5 && !loc3 && needVScroll()) 
            {
                loc3 = true;
                loc4 = loc4 - _verticalScrollBar.width;
                setTextSize(loc4, loc2, loc1);
            }
            if (loc3) 
            {
                _verticalScrollBar.visible = true;
                _verticalScrollBar.x = width - _verticalScrollBar.width;
                _verticalScrollBar.height = loc2;
                _verticalScrollBar.visible = true;
                _verticalScrollBar.enabled = enabled;
            }
            else 
            {
                _verticalScrollBar.visible = false;
            }
            if (loc5) 
            {
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.y = height - _horizontalScrollBar.height;
                _horizontalScrollBar.width = loc4;
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.enabled = enabled;
            }
            else 
            {
                _horizontalScrollBar.visible = false;
            }
            updateScrollBars();
            addEventListener(flash.events.Event.ENTER_FRAME, delayedLayoutUpdate, false, 0, true);
            return;
        }

        protected function delayedLayoutUpdate(arg1:flash.events.Event):void
        {
            if (textHasChanged) 
            {
                textHasChanged = false;
                drawLayout();
                return;
            }
            removeEventListener(flash.events.Event.ENTER_FRAME, delayedLayoutUpdate);
            return;
        }

        protected function updateScrollBars():*
        {
            _horizontalScrollBar.update();
            _verticalScrollBar.update();
            _verticalScrollBar.enabled = enabled;
            _horizontalScrollBar.enabled = enabled;
            _horizontalScrollBar.drawNow();
            _verticalScrollBar.drawNow();
            return;
        }

        protected function needVScroll():Boolean
        {
            if (_verticalScrollPolicy == fl.controls.ScrollPolicy.OFF) 
            {
                return false;
            }
            if (_verticalScrollPolicy == fl.controls.ScrollPolicy.ON) 
            {
                return true;
            }
            return textField.maxScrollV > 1;
        }

        protected function needHScroll():Boolean
        {
            if (_horizontalScrollPolicy == fl.controls.ScrollPolicy.OFF) 
            {
                return false;
            }
            if (_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON) 
            {
                return true;
            }
            return textField.maxScrollH > 0;
        }

        protected function setTextSize(arg1:Number, arg2:Number, arg3:Number):void
        {
            var loc1:*=arg1 - arg3 * 2;
            var loc2:*=arg2 - arg3 * 2;
            if (loc1 != textField.width) 
            {
                textField.width = loc1;
            }
            if (loc2 != textField.height) 
            {
                textField.height = loc2;
            }
            return;
        }

        protected override function isOurFocus(arg1:flash.display.DisplayObject):Boolean
        {
            return arg1 == textField || super.isOurFocus(arg1);
        }

        protected override function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            setIMEMode(true);
            if (arg1.target == this) 
            {
                stage.focus = textField;
            }
            var loc1:*=focusManager;
            if (loc1) 
            {
                if (editable) 
                {
                    loc1.showFocusIndicator = true;
                }
                loc1.defaultButtonEnabled = false;
            }
            super.focusInHandler(arg1);
            if (editable) 
            {
                setIMEMode(true);
            }
            return;
        }

        protected override function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            var loc1:*=focusManager;
            if (loc1) 
            {
                loc1.defaultButtonEnabled = true;
            }
            setSelection(0, 0);
            super.focusOutHandler(arg1);
            if (editable) 
            {
                setIMEMode(false);
            }
            return;
        }

        public function get condenseWhite():Boolean
        {
            return textField.condenseWhite;
        }

        public static function getStyleDefinition():Object
        {
            return fl.core.UIComponent.mergeStyles(defaultStyles, fl.controls.ScrollBar.getStyleDefinition());
        }

        public function get horizontalScrollBar():fl.controls.UIScrollBar
        {
            return _horizontalScrollBar;
        }

        public function get verticalScrollBar():fl.controls.UIScrollBar
        {
            return _verticalScrollBar;
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            mouseChildren = enabled;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get text():String
        {
            return textField.text;
        }

        public function set text(arg1:String):void
        {
            if (componentInspectorSetting && arg1 == "") 
            {
                return;
            }
            textField.text = arg1;
            _html = false;
            invalidate(fl.core.InvalidationType.DATA);
            invalidate(fl.core.InvalidationType.STYLES);
            textHasChanged = true;
            return;
        }

        public function get htmlText():String
        {
            return textField.htmlText;
        }

        public function set htmlText(arg1:String):void
        {
            if (componentInspectorSetting && arg1 == "") 
            {
                return;
            }
            if (arg1 == "") 
            {
                text = "";
                return;
            }
            _html = true;
            _savedHTML = arg1;
            textField.htmlText = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            invalidate(fl.core.InvalidationType.STYLES);
            textHasChanged = true;
            return;
        }

        
        {
            defaultStyles = {"upSkin":"TextArea_upSkin", "disabledSkin":"TextArea_disabledSkin", "focusRectSkin":null, "focusRectPadding":null, "textFormat":null, "disabledTextFormat":null, "textPadding":3, "embedFonts":false};
        }

        public function set condenseWhite(arg1:Boolean):void
        {
            textField.condenseWhite = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get horizontalScrollPolicy():String
        {
            return _horizontalScrollPolicy;
        }

        public function set horizontalScrollPolicy(arg1:String):void
        {
            _horizontalScrollPolicy = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get verticalScrollPolicy():String
        {
            return _verticalScrollPolicy;
        }

        public function set verticalScrollPolicy(arg1:String):void
        {
            _verticalScrollPolicy = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get horizontalScrollPosition():Number
        {
            return textField.scrollH;
        }

        public function set horizontalScrollPosition(arg1:Number):void
        {
            drawNow();
            textField.scrollH = arg1;
            return;
        }

        public function get verticalScrollPosition():Number
        {
            return textField.scrollV;
        }

        public function set verticalScrollPosition(arg1:Number):void
        {
            drawNow();
            textField.scrollV = arg1;
            return;
        }

        public function get textWidth():Number
        {
            drawNow();
            return textField.textWidth;
        }

        public function get textHeight():Number
        {
            drawNow();
            return textField.textHeight;
        }

        public function get length():Number
        {
            return textField.text.length;
        }

        public function get restrict():String
        {
            return textField.restrict;
        }

        public function set restrict(arg1:String):void
        {
            if (componentInspectorSetting && arg1 == "") 
            {
                arg1 = null;
            }
            textField.restrict = arg1;
            return;
        }

        public function get maxChars():int
        {
            return textField.maxChars;
        }

        public function set maxChars(arg1:int):void
        {
            textField.maxChars = arg1;
            return;
        }

        public function get maxHorizontalScrollPosition():int
        {
            return textField.maxScrollH;
        }

        public function get maxVerticalScrollPosition():int
        {
            return textField.maxScrollV;
        }

        public function get wordWrap():Boolean
        {
            return _wordWrap;
        }

        public function set wordWrap(arg1:Boolean):void
        {
            _wordWrap = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get selectionBeginIndex():int
        {
            return textField.selectionBeginIndex;
        }

        public function get selectionEndIndex():int
        {
            return textField.selectionEndIndex;
        }

        public function get displayAsPassword():Boolean
        {
            return textField.displayAsPassword;
        }

        public function set displayAsPassword(arg1:Boolean):void
        {
            textField.displayAsPassword = arg1;
            return;
        }

        public function get editable():Boolean
        {
            return _editable;
        }

        public function set editable(arg1:Boolean):void
        {
            _editable = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function get imeMode():String
        {
            return flash.system.IME.conversionMode;
        }

        public function set imeMode(arg1:String):void
        {
            _imeMode = arg1;
            return;
        }

        public function get alwaysShowSelection():Boolean
        {
            return textField.alwaysShowSelection;
        }

        public function set alwaysShowSelection(arg1:Boolean):void
        {
            textField.alwaysShowSelection = arg1;
            return;
        }

        public override function drawFocus(arg1:Boolean):void
        {
            if (focusTarget != null) 
            {
                focusTarget.drawFocus(arg1);
                return;
            }
            super.drawFocus(arg1);
            return;
        }

        public function getLineMetrics(arg1:int):flash.text.TextLineMetrics
        {
            return textField.getLineMetrics(arg1);
        }

        public function setSelection(arg1:int, arg2:int):void
        {
            textField.setSelection(arg1, arg2);
            return;
        }

        public function appendText(arg1:String):void
        {
            textField.appendText(arg1);
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            tabChildren = true;
            textField = new flash.text.TextField();
            addChild(textField);
            updateTextFieldType();
            _verticalScrollBar = new fl.controls.UIScrollBar();
            _verticalScrollBar.name = "V";
            _verticalScrollBar.visible = false;
            _verticalScrollBar.focusEnabled = false;
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            _verticalScrollBar.addEventListener(fl.events.ScrollEvent.SCROLL, handleScroll, false, 0, true);
            addChild(_verticalScrollBar);
            _horizontalScrollBar = new fl.controls.UIScrollBar();
            _horizontalScrollBar.name = "H";
            _horizontalScrollBar.visible = false;
            _horizontalScrollBar.focusEnabled = false;
            _horizontalScrollBar.direction = fl.controls.ScrollBarDirection.HORIZONTAL;
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            _horizontalScrollBar.addEventListener(fl.events.ScrollEvent.SCROLL, handleScroll, false, 0, true);
            addChild(_horizontalScrollBar);
            textField.addEventListener(flash.events.TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
            textField.addEventListener(flash.events.Event.CHANGE, handleChange, false, 0, true);
            textField.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
            _horizontalScrollBar.scrollTarget = textField;
            _verticalScrollBar.scrollTarget = textField;
            addEventListener(flash.events.MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
            return;
        }

        protected function updateTextFieldType():void
        {
            textField.type = enabled && _editable ? flash.text.TextFieldType.INPUT : flash.text.TextFieldType.DYNAMIC;
            textField.selectable = enabled;
            textField.wordWrap = _wordWrap;
            textField.multiline = true;
            return;
        }

        protected function handleKeyDown(arg1:flash.events.KeyboardEvent):void
        {
            if (arg1.keyCode == flash.ui.Keyboard.ENTER) 
            {
                dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.ENTER, true));
            }
            return;
        }

        protected function handleChange(arg1:flash.events.Event):void
        {
            arg1.stopPropagation();
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE, true));
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected function handleTextInput(arg1:flash.events.TextEvent):void
        {
            arg1.stopPropagation();
            dispatchEvent(new flash.events.TextEvent(flash.events.TextEvent.TEXT_INPUT, true, false, arg1.text));
            return;
        }

        protected function handleScroll(arg1:fl.events.ScrollEvent):void
        {
            dispatchEvent(arg1);
            return;
        }

        protected function handleWheel(arg1:flash.events.MouseEvent):void
        {
            if (!enabled || !_verticalScrollBar.visible) 
            {
                return;
            }
            _verticalScrollBar.scrollPosition = _verticalScrollBar.scrollPosition - arg1.delta * _verticalScrollBar.lineScrollSize;
            dispatchEvent(new fl.events.ScrollEvent(fl.controls.ScrollBarDirection.VERTICAL, arg1.delta * _verticalScrollBar.lineScrollSize, _verticalScrollBar.scrollPosition));
            return;
        }

        protected function setEmbedFont():*
        {
            var loc1:*=getStyleValue("embedFonts");
            if (loc1 != null) 
            {
                textField.embedFonts = loc1;
            }
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.STATE)) 
            {
                updateTextFieldType();
            }
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                setEmbedFont();
            }
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                drawTextFormat();
                drawBackground();
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.DATA)) 
            {
                drawLayout();
            }
            super.draw();
            return;
        }

        protected function setStyles():void
        {
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            return;
        }

        protected function drawTextFormat():void
        {
            var loc1:*=fl.core.UIComponent.getStyleDefinition();
            var loc2:*=enabled ? loc1.defaultTextFormat as flash.text.TextFormat : loc1.defaultDisabledTextFormat as flash.text.TextFormat;
            textField.setTextFormat(loc2);
            var loc3:*=getStyleValue(enabled ? "textFormat" : "disabledTextFormat") as flash.text.TextFormat;
            if (loc3 == null) 
            {
                loc3 = loc2;
            }
            else 
            {
                textField.setTextFormat(loc3);
            }
            textField.defaultTextFormat = loc3;
            setEmbedFont();
            if (_html) 
            {
                textField.htmlText = _savedHTML;
            }
            return;
        }

        protected function drawBackground():void
        {
            var loc1:*=background;
            var loc2:*=enabled ? "upSkin" : "disabledSkin";
            background = getDisplayObjectInstance(getStyleValue(loc2));
            if (background != null) 
            {
                addChildAt(background, 0);
            }
            if (!(loc1 == null) && !(loc1 == background) && contains(loc1)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected static const SCROLL_BAR_STYLES:Object={"downArrowDisabledSkin":"downArrowDisabledSkin", "downArrowDownSkin":"downArrowDownSkin", "downArrowOverSkin":"downArrowOverSkin", "downArrowUpSkin":"downArrowUpSkin", "upArrowDisabledSkin":"upArrowDisabledSkin", "upArrowDownSkin":"upArrowDownSkin", "upArrowOverSkin":"upArrowOverSkin", "upArrowUpSkin":"upArrowUpSkin", "thumbDisabledSkin":"thumbDisabledSkin", "thumbDownSkin":"thumbDownSkin", "thumbOverSkin":"thumbOverSkin", "thumbUpSkin":"thumbUpSkin", "thumbIcon":"thumbIcon", "trackDisabledSkin":"trackDisabledSkin", "trackDownSkin":"trackDownSkin", "trackOverSkin":"trackOverSkin", "trackUpSkin":"trackUpSkin", "repeatDelay":"repeatDelay", "repeatInterval":"repeatInterval"};

        public var textField:flash.text.TextField;

        protected var _editable:Boolean=true;

        protected var _wordWrap:Boolean=true;

        protected var _horizontalScrollPolicy:String="auto";

        protected var _verticalScrollPolicy:String="auto";

        protected var _horizontalScrollBar:fl.controls.UIScrollBar;

        protected var _verticalScrollBar:fl.controls.UIScrollBar;

        protected var background:flash.display.DisplayObject;

        protected var _html:Boolean=false;

        protected var textHasChanged:Boolean=false;

        protected var _savedHTML:String;

        internal static var defaultStyles:Object;

        public static var createAccessibilityImplementation:Function;
    }
}


//      class TextInput
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.ui.*;
    
    public class TextInput extends fl.core.UIComponent implements fl.managers.IFocusManagerComponent
    {
        public function TextInput()
        {
            super();
            return;
        }

        protected override function isOurFocus(arg1:flash.display.DisplayObject):Boolean
        {
            return arg1 == textField || super.isOurFocus(arg1);
        }

        protected override function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            if (arg1.target == this) 
            {
                stage.focus = textField;
            }
            var loc1:*=focusManager;
            if (editable && loc1) 
            {
                loc1.showFocusIndicator = true;
                if (textField.selectable && textField.selectionBeginIndex == textField.selectionBeginIndex) 
                {
                    setSelection(0, textField.length);
                }
            }
            super.focusInHandler(arg1);
            if (editable) 
            {
                setIMEMode(true);
            }
            return;
        }

        protected override function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            super.focusOutHandler(arg1);
            if (editable) 
            {
                setIMEMode(false);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        
        {
            defaultStyles = {"upSkin":"TextInput_upSkin", "disabledSkin":"TextInput_disabledSkin", "focusRectSkin":null, "focusRectPadding":null, "textFormat":null, "disabledTextFormat":null, "textPadding":0, "embedFonts":false};
        }

        public function get text():String
        {
            return textField.text;
        }

        public function set text(arg1:String):void
        {
            textField.text = arg1;
            _html = false;
            invalidate(fl.core.InvalidationType.DATA);
            invalidate(fl.core.InvalidationType.STYLES);
            return;
        }

        public override function get enabled():Boolean
        {
            return super.enabled;
        }

        public override function set enabled(arg1:Boolean):void
        {
            super.enabled = arg1;
            updateTextFieldType();
            return;
        }

        public function get imeMode():String
        {
            return _imeMode;
        }

        public function set imeMode(arg1:String):void
        {
            _imeMode = arg1;
            return;
        }

        public function get alwaysShowSelection():Boolean
        {
            return textField.alwaysShowSelection;
        }

        public function set alwaysShowSelection(arg1:Boolean):void
        {
            textField.alwaysShowSelection = arg1;
            return;
        }

        public override function drawFocus(arg1:Boolean):void
        {
            if (focusTarget != null) 
            {
                focusTarget.drawFocus(arg1);
                return;
            }
            super.drawFocus(arg1);
            return;
        }

        public function get editable():Boolean
        {
            return _editable;
        }

        public function set editable(arg1:Boolean):void
        {
            _editable = arg1;
            updateTextFieldType();
            return;
        }

        public function get horizontalScrollPosition():int
        {
            return textField.scrollH;
        }

        public function set horizontalScrollPosition(arg1:int):void
        {
            textField.scrollH = arg1;
            return;
        }

        public function get maxHorizontalScrollPosition():int
        {
            return textField.maxScrollH;
        }

        public function get length():int
        {
            return textField.length;
        }

        public function get maxChars():int
        {
            return textField.maxChars;
        }

        public function set maxChars(arg1:int):void
        {
            textField.maxChars = arg1;
            return;
        }

        public function get displayAsPassword():Boolean
        {
            return textField.displayAsPassword;
        }

        public function set displayAsPassword(arg1:Boolean):void
        {
            textField.displayAsPassword = arg1;
            return;
        }

        public function get restrict():String
        {
            return textField.restrict;
        }

        public function set restrict(arg1:String):void
        {
            if (componentInspectorSetting && arg1 == "") 
            {
                arg1 = null;
            }
            textField.restrict = arg1;
            return;
        }

        public function get selectionBeginIndex():int
        {
            return textField.selectionBeginIndex;
        }

        public function get selectionEndIndex():int
        {
            return textField.selectionEndIndex;
        }

        public function get condenseWhite():Boolean
        {
            return textField.condenseWhite;
        }

        public function set condenseWhite(arg1:Boolean):void
        {
            textField.condenseWhite = arg1;
            return;
        }

        public function get htmlText():String
        {
            return textField.htmlText;
        }

        public function set htmlText(arg1:String):void
        {
            if (arg1 == "") 
            {
                text = "";
                return;
            }
            _html = true;
            _savedHTML = arg1;
            textField.htmlText = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            invalidate(fl.core.InvalidationType.STYLES);
            return;
        }

        public function get textHeight():Number
        {
            return textField.textHeight;
        }

        public function get textWidth():Number
        {
            return textField.textWidth;
        }

        public function setSelection(arg1:int, arg2:int):void
        {
            textField.setSelection(arg1, arg2);
            return;
        }

        public function getLineMetrics(arg1:int):flash.text.TextLineMetrics
        {
            return textField.getLineMetrics(arg1);
        }

        public function appendText(arg1:String):void
        {
            textField.appendText(arg1);
            return;
        }

        protected function updateTextFieldType():void
        {
            textField.type = enabled && editable ? flash.text.TextFieldType.INPUT : flash.text.TextFieldType.DYNAMIC;
            textField.selectable = enabled;
            return;
        }

        protected function handleKeyDown(arg1:flash.events.KeyboardEvent):void
        {
            if (arg1.keyCode == flash.ui.Keyboard.ENTER) 
            {
                dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.ENTER, true));
            }
            return;
        }

        protected function handleChange(arg1:flash.events.Event):void
        {
            arg1.stopPropagation();
            dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE, true));
            return;
        }

        protected function handleTextInput(arg1:flash.events.TextEvent):void
        {
            arg1.stopPropagation();
            dispatchEvent(new flash.events.TextEvent(flash.events.TextEvent.TEXT_INPUT, true, false, arg1.text));
            return;
        }

        protected function setEmbedFont():*
        {
            var loc1:*=getStyleValue("embedFonts");
            if (loc1 != null) 
            {
                textField.embedFonts = loc1;
            }
            return;
        }

        protected override function draw():void
        {
            var loc1:*=null;
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.STATE)) 
            {
                drawTextFormat();
                drawBackground();
                loc1 = getStyleValue("embedFonts");
                if (loc1 != null) 
                {
                    textField.embedFonts = loc1;
                }
                invalidate(fl.core.InvalidationType.SIZE, false);
            }
            if (isInvalid(fl.core.InvalidationType.SIZE)) 
            {
                drawLayout();
            }
            super.draw();
            return;
        }

        protected function drawBackground():void
        {
            var loc1:*=background;
            var loc2:*=enabled ? "upSkin" : "disabledSkin";
            background = getDisplayObjectInstance(getStyleValue(loc2));
            if (background == null) 
            {
                return;
            }
            addChildAt(background, 0);
            if (!(loc1 == null) && !(loc1 == background) && contains(loc1)) 
            {
                removeChild(loc1);
            }
            return;
        }

        protected function drawTextFormat():void
        {
            var loc1:*=fl.core.UIComponent.getStyleDefinition();
            var loc2:*=enabled ? loc1.defaultTextFormat as flash.text.TextFormat : loc1.defaultDisabledTextFormat as flash.text.TextFormat;
            textField.setTextFormat(loc2);
            var loc3:*=getStyleValue(enabled ? "textFormat" : "disabledTextFormat") as flash.text.TextFormat;
            if (loc3 == null) 
            {
                loc3 = loc2;
            }
            else 
            {
                textField.setTextFormat(loc3);
            }
            textField.defaultTextFormat = loc3;
            setEmbedFont();
            if (_html) 
            {
                textField.htmlText = _savedHTML;
            }
            return;
        }

        protected function drawLayout():void
        {
            var loc1:*=Number(getStyleValue("textPadding"));
            if (background != null) 
            {
                background.width = width;
                background.height = height;
            }
            textField.width = width - 2 * loc1;
            textField.height = height - 2 * loc1;
            var loc2:*;
            textField.y = loc2 = loc1;
            textField.x = loc2;
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            tabChildren = true;
            textField = new flash.text.TextField();
            addChild(textField);
            updateTextFieldType();
            textField.addEventListener(flash.events.TextEvent.TEXT_INPUT, handleTextInput, false, 0, true);
            textField.addEventListener(flash.events.Event.CHANGE, handleChange, false, 0, true);
            textField.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, handleKeyDown, false, 0, true);
            return;
        }

        public override function setFocus():void
        {
            stage.focus = textField;
            return;
        }

        public var textField:flash.text.TextField;

        protected var _editable:Boolean=true;

        protected var background:flash.display.DisplayObject;

        protected var _html:Boolean=false;

        protected var _savedHTML:String;

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//      class TileList
package fl.controls 
{
    import fl.controls.listClasses.*;
    import fl.core.*;
    import fl.data.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.ui.*;
    import flash.utils.*;
    
    public class TileList extends fl.controls.SelectableList implements fl.managers.IFocusManagerComponent
    {
        public function TileList()
        {
            super();
            return;
        }

        public override function set maxHorizontalScrollPosition(arg1:Number):void
        {
            return;
        }

        protected override function configUI():void
        {
            super.configUI();
            _horizontalScrollPolicy = scrollPolicy;
            _verticalScrollPolicy = fl.controls.ScrollPolicy.OFF;
            return;
        }

        protected override function setHorizontalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            invalidate(fl.core.InvalidationType.SCROLL);
            super.setHorizontalScrollPosition(arg1, true);
            return;
        }

        protected override function setVerticalScrollPosition(arg1:Number, arg2:Boolean=false):void
        {
            invalidate(fl.core.InvalidationType.SCROLL);
            super.setVerticalScrollPosition(arg1, true);
            return;
        }

        protected override function draw():void
        {
            if (direction != fl.controls.ScrollBarDirection.VERTICAL) 
            {
                if (__columnCount > 0) 
                {
                    columnCount = __columnCount;
                }
                if (__rowCount > 0) 
                {
                    rowCount = __rowCount;
                }
            }
            else 
            {
                if (__rowCount > 0) 
                {
                    rowCount = __rowCount;
                }
                if (__columnCount > 0) 
                {
                    columnCount = __columnCount;
                }
            }
            var loc1:*=!(oldLength == length);
            oldLength = length;
            if (isInvalid(fl.core.InvalidationType.STYLES)) 
            {
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")) 
                {
                    invalidate(fl.core.InvalidationType.SIZE, false);
                }
                if (_cellRenderer != getStyleValue("cellRenderer")) 
                {
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                }
            }
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STATE) || loc1) 
            {
                drawLayout();
            }
            if (isInvalid(fl.core.InvalidationType.RENDERER_STYLES)) 
            {
                updateRendererStyles();
            }
            if (isInvalid(fl.core.InvalidationType.STYLES, fl.core.InvalidationType.SIZE, fl.core.InvalidationType.DATA, fl.core.InvalidationType.SCROLL, fl.core.InvalidationType.SELECTED)) 
            {
                drawList();
                _maxHorizontalScrollPosition = Math.max(0, contentWidth - availableWidth);
            }
            updateChildren();
            validate();
            return;
        }

        protected override function drawLayout():void
        {
            var loc1:*=0;
            var loc2:*=0;
            _horizontalScrollPolicy = _scrollDirection != fl.controls.ScrollBarDirection.HORIZONTAL ? fl.controls.ScrollPolicy.OFF : _scrollPolicy;
            _verticalScrollPolicy = _scrollDirection == fl.controls.ScrollBarDirection.HORIZONTAL ? fl.controls.ScrollPolicy.OFF : _scrollPolicy;
            if (_scrollDirection != fl.controls.ScrollBarDirection.HORIZONTAL) 
            {
                loc2 = columnCount;
                contentWidth = loc2 * _columnWidth;
                contentHeight = _rowHeight * Math.ceil(length / loc2);
            }
            else 
            {
                loc1 = rowCount;
                contentHeight = loc1 * _rowHeight;
                contentWidth = _columnWidth * Math.ceil(length / loc1);
            }
            super.drawLayout();
            return;
        }

        protected override function drawList():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            var loc11:*=0;
            var loc12:*=0;
            var loc15:*=null;
            var loc16:*=0;
            var loc17:*=0;
            var loc18:*=0;
            var loc19:*=0;
            var loc20:*=false;
            var loc21:*=null;
            var loc22:*=null;
            var loc23:*=null;
            var loc24:*=null;
            var loc25:*=null;
            var loc26:*=null;
            var loc5:*=rowCount;
            var loc6:*=columnCount;
            var loc7:*=columnWidth;
            var loc8:*=rowHeight;
            var loc9:*=0;
            var loc10:*=0;
            var loc27:*;
            listHolder.y = loc27 = contentPadding;
            listHolder.x = loc27;
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.x = Math.floor(_horizontalScrollPosition) % loc7;
            contentScrollRect.y = Math.floor(_verticalScrollPosition) % loc8;
            listHolder.scrollRect = contentScrollRect;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var loc13:*=[];
            if (_scrollDirection != fl.controls.ScrollBarDirection.HORIZONTAL) 
            {
                ++loc5;
                loc10 = _verticalScrollPosition / loc8 << 0;
                loc18 = Math.floor(loc10 * loc6);
                loc19 = Math.min(length, loc18 + loc5 * loc6);
                loc1 = loc18;
                while (loc1 < loc19) 
                {
                    loc13.push(loc1);
                    ++loc1;
                }
            }
            else 
            {
                loc16 = availableWidth / loc7 << 0;
                loc17 = Math.max(loc16, Math.ceil(length / loc5));
                loc9 = _horizontalScrollPosition / loc7 << 0;
                loc6 = Math.max(loc16, Math.min(loc17 - loc9, loc6 + 1));
                loc12 = 0;
                while (loc12 < loc5) 
                {
                    loc11 = 0;
                    while (loc11 < loc6) 
                    {
                        loc2 = loc12 * loc17 + loc9 + loc11;
                        if (loc2 >= length) 
                        {
                            break;
                        }
                        loc13.push(loc2);
                        ++loc11;
                    }
                    ++loc12;
                }
            }
            renderedItems = loc27 = new flash.utils.Dictionary(true);
            var loc14:*=loc27;
            loc27 = 0;
            var loc28:*=loc13;
            for each (loc2 in loc28) 
            {
                loc14[_dataProvider.getItemAt(loc2)] = true;
            }
            loc15 = new flash.utils.Dictionary(true);
            while (activeCellRenderers.length > 0) 
            {
                loc3 = (loc4 = activeCellRenderers.pop()).data;
                if (loc14[loc3] == null || invalidItems[loc3] == true) 
                {
                    availableCellRenderers.push(loc4);
                }
                else 
                {
                    loc15[loc3] = loc4;
                    invalidItems[loc3] = true;
                }
                list.removeChild(loc4 as flash.display.DisplayObject);
            }
            invalidItems = new flash.utils.Dictionary(true);
            loc1 = 0;
            loc27 = 0;
            loc28 = loc13;
            for each (loc2 in loc28) 
            {
                loc11 = loc1 % loc6;
                loc12 = loc1 / loc6 << 0;
                loc20 = false;
                loc3 = _dataProvider.getItemAt(loc2);
                if (loc15[loc3] == null) 
                {
                    if (availableCellRenderers.length > 0) 
                    {
                        loc4 = availableCellRenderers.pop() as fl.controls.listClasses.ICellRenderer;
                    }
                    else if ((loc24 = (loc4 = getDisplayObjectInstance(getStyleValue("cellRenderer")) as fl.controls.listClasses.ICellRenderer) as flash.display.Sprite) != null) 
                    {
                        loc24.addEventListener(flash.events.MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                        loc24.addEventListener(flash.events.MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                        loc24.addEventListener(flash.events.MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                        loc24.addEventListener(flash.events.Event.CHANGE, handleCellRendererChange, false, 0, true);
                        loc24.doubleClickEnabled = true;
                        loc24.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                        if (loc24["setStyle"] != null) 
                        {
                            var loc29:*=0;
                            var loc30:*=rendererStyles;
                            for (loc25 in loc30) 
                            {
                                var loc31:*;
                                (loc31 = loc24)["setStyle"](loc25, rendererStyles[loc25]);
                            }
                        }
                    }
                }
                else 
                {
                    loc20 = true;
                    loc4 = loc15[loc3];
                    delete loc15[loc3];
                }
                list.addChild(loc4 as flash.display.Sprite);
                activeCellRenderers.push(loc4);
                loc4.y = loc8 * loc12;
                loc4.x = loc7 * loc11;
                loc4.setSize(columnWidth, rowHeight);
                loc21 = itemToLabel(loc3);
                loc22 = null;
                if (_iconFunction == null) 
                {
                    if (_iconField != null) 
                    {
                        loc22 = loc3[_iconField];
                    }
                }
                else 
                {
                    loc22 = _iconFunction(loc3);
                }
                loc23 = null;
                if (_sourceFunction == null) 
                {
                    if (_sourceField != null) 
                    {
                        loc23 = loc3[_sourceField];
                    }
                }
                else 
                {
                    loc23 = _sourceFunction(loc3);
                }
                if (!loc20) 
                {
                    loc4.data = loc3;
                }
                loc4.listData = new fl.controls.listClasses.TileListData(loc21, loc22, loc23, this, loc2, loc10 + loc12, loc9 + loc11) as fl.controls.listClasses.ListData;
                loc4.selected = !(_selectedIndices.indexOf(loc2) == -1);
                if (loc4 is fl.core.UIComponent) 
                {
                    (loc26 = loc4 as fl.core.UIComponent).drawNow();
                }
                ++loc1;
            }
            return;
        }

        public override function get dataProvider():fl.data.DataProvider
        {
            return super.dataProvider;
        }

        protected override function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            var loc1:*=0;
            arg1.stopPropagation();
            if (!selectable) 
            {
                return;
            }
            var loc2:*=arg1.keyCode;
            switch (loc2) 
            {
                case flash.ui.Keyboard.UP:
                case flash.ui.Keyboard.DOWN:
                {
                    moveSelectionVertically(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                case flash.ui.Keyboard.PAGE_DOWN:
                case flash.ui.Keyboard.END:
                case flash.ui.Keyboard.HOME:
                {
                    if (_scrollDirection != fl.controls.ScrollBarDirection.HORIZONTAL) 
                    {
                        moveSelectionVertically(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    }
                    else 
                    {
                        moveSelectionHorizontally(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    }
                    break;
                }
                case flash.ui.Keyboard.LEFT:
                case flash.ui.Keyboard.RIGHT:
                {
                    moveSelectionHorizontally(arg1.keyCode, arg1.shiftKey && _allowMultipleSelection, arg1.ctrlKey && _allowMultipleSelection);
                    break;
                }
                default:
                {
                    loc1 = getNextIndexAtLetter(String.fromCharCode(arg1.keyCode), selectedIndex);
                    if (loc1 > -1) 
                    {
                        selectedIndex = loc1;
                        scrollToSelected();
                    }
                    break;
                }
            }
            return;
        }

        protected function calculateAvailableHeight():Number
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            return height - loc1 * 2 - (_horizontalScrollPolicy == fl.controls.ScrollPolicy.ON || _horizontalScrollPolicy == fl.controls.ScrollPolicy.AUTO && _maxHorizontalScrollPosition > 0 ? 15 : 0);
        }

        protected override function moveSelectionVertically(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=Math.max(1, Math.max(contentHeight, availableHeight) / _rowHeight << 0);
            var loc2:*=Math.ceil(Math.max(columnCount * rowCount, length) / loc1);
            var loc3:*=Math.ceil(length / loc2);
            var loc6:*=arg1;
            switch (loc6) 
            {
                case flash.ui.Keyboard.UP:
                {
                    loc4 = selectedIndex - loc2;
                    break;
                }
                case flash.ui.Keyboard.DOWN:
                {
                    loc4 = selectedIndex + loc2;
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    loc4 = 0;
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    loc4 = (length - 1);
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    if ((loc5 = selectedIndex + loc2 * (loc3 - 1)) >= length) 
                    {
                        loc5 = loc5 - loc2;
                    }
                    loc4 = Math.min((length - 1), loc5);
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    if ((loc5 = selectedIndex - loc2 * (loc3 - 1)) < 0) 
                    {
                        loc5 = loc5 + loc2;
                    }
                    loc4 = Math.max(0, loc5);
                    break;
                }
            }
            doKeySelection(loc4, arg2, arg3);
            scrollToSelected();
            return;
        }

        protected override function moveSelectionHorizontally(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=undefined;
            loc1 = Math.ceil(Math.max(rowCount * columnCount, length) / rowCount);
            var loc5:*=arg1;
            switch (loc5) 
            {
                case flash.ui.Keyboard.LEFT:
                {
                    loc2 = Math.max(0, (selectedIndex - 1));
                    break;
                }
                case flash.ui.Keyboard.RIGHT:
                {
                    loc2 = Math.min((length - 1), selectedIndex + 1);
                    break;
                }
                case flash.ui.Keyboard.HOME:
                {
                    loc2 = 0;
                    break;
                }
                case flash.ui.Keyboard.END:
                {
                    loc2 = (length - 1);
                    break;
                }
                case flash.ui.Keyboard.PAGE_UP:
                {
                    loc3 = selectedIndex - selectedIndex % loc1;
                    loc2 = Math.max(0, Math.max(loc3, selectedIndex - columnCount));
                    break;
                }
                case flash.ui.Keyboard.PAGE_DOWN:
                {
                    loc4 = (selectedIndex - selectedIndex % loc1 + loc1 - 1);
                    loc2 = Math.min((length - 1), Math.min(loc4, selectedIndex + loc1));
                    break;
                }
            }
            doKeySelection(loc2, arg2, arg3);
            scrollToSelected();
            return;
        }

        protected function doKeySelection(arg1:uint, arg2:Boolean, arg3:Boolean):void
        {
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=selectedIndices;
            var loc2:*=false;
            if (!(arg1 < 0 || arg1 > (length - 1))) 
            {
                if (arg2 && loc1.length > 0 && !(arg1 == loc1[0])) 
                {
                    loc3 = loc1[0];
                    loc1 = [];
                    if (arg1 < loc3) 
                    {
                        loc4 = loc3;
                        while (loc4 >= arg1) 
                        {
                            loc1.push(loc4);
                            --loc4;
                        }
                    }
                    else 
                    {
                        loc4 = loc3;
                        while (loc4 <= arg1) 
                        {
                            loc1.push(loc4);
                            ++loc4;
                        }
                    }
                    loc2 = true;
                }
                else 
                {
                    loc1 = [arg1];
                    caretIndex = arg1;
                    loc2 = true;
                }
            }
            selectedIndices = loc1;
            if (loc2) 
            {
                dispatchEvent(new flash.events.Event(flash.events.Event.CHANGE));
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        protected override function initializeAccessibility():void
        {
            if (fl.controls.TileList.createAccessibilityImplementation != null) 
            {
                fl.controls.TileList.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return mergeStyles(defaultStyles, fl.controls.SelectableList.getStyleDefinition(), fl.controls.ScrollBar.getStyleDefinition());
        }

        
        {
            defaultStyles = {"cellRenderer":fl.controls.listClasses.ImageCell, "focusRectSkin":null, "focusRectPadding":null, "skin":"TileList_skin"};
        }

        public override function set dataProvider(arg1:fl.data.DataProvider):void
        {
            super.dataProvider = arg1;
            return;
        }

        public function get labelField():String
        {
            return _labelField;
        }

        public function set labelField(arg1:String):void
        {
            if (arg1 == _labelField) 
            {
                return;
            }
            _labelField = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get labelFunction():Function
        {
            return _labelFunction;
        }

        public function set labelFunction(arg1:Function):void
        {
            if (_labelFunction == arg1) 
            {
                return;
            }
            _labelFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get iconField():String
        {
            return _iconField;
        }

        public function set iconField(arg1:String):void
        {
            if (arg1 == _iconField) 
            {
                return;
            }
            _iconField = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get iconFunction():Function
        {
            return _iconFunction;
        }

        public function set iconFunction(arg1:Function):void
        {
            if (_iconFunction == arg1) 
            {
                return;
            }
            _iconFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get sourceField():String
        {
            return _sourceField;
        }

        public function set sourceField(arg1:String):void
        {
            _sourceField = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get sourceFunction():Function
        {
            return _sourceFunction;
        }

        public function set sourceFunction(arg1:Function):void
        {
            _sourceFunction = arg1;
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public override function get rowCount():uint
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=Math.max(1, (_width - 2 * loc1) / _columnWidth << 0);
            var loc3:*=Math.max(1, (_height - 2 * loc1) / _rowHeight << 0);
            if (_scrollDirection != fl.controls.ScrollBarDirection.HORIZONTAL) 
            {
                loc3 = Math.max(1, Math.ceil((_height - 2 * loc1) / _rowHeight));
            }
            else if (_scrollPolicy == fl.controls.ScrollPolicy.ON || _scrollPolicy == fl.controls.ScrollPolicy.AUTO && length > loc2 * loc3) 
            {
                loc3 = Math.max(1, (_height - 2 * loc1 - 15) / _rowHeight << 0);
            }
            return loc3;
        }

        public function set rowCount(arg1:uint):void
        {
            if (arg1 == 0) 
            {
                return;
            }
            if (componentInspectorSetting) 
            {
                __rowCount = arg1;
                return;
            }
            __rowCount = 0;
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=Math.ceil(length / arg1) > width / columnWidth >> 0 && _scrollPolicy == fl.controls.ScrollPolicy.AUTO || _scrollPolicy == fl.controls.ScrollPolicy.ON;
            height = rowHeight * arg1 + 2 * loc1 + (_scrollDirection == fl.controls.ScrollBarDirection.HORIZONTAL && loc2 ? fl.controls.ScrollBar.WIDTH : 0);
            return;
        }

        public function get rowHeight():Number
        {
            return _rowHeight;
        }

        public function set rowHeight(arg1:Number):void
        {
            if (_rowHeight == arg1) 
            {
                return;
            }
            _rowHeight = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get columnCount():uint
        {
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=Math.max(1, (_width - 2 * loc1) / _columnWidth << 0);
            var loc3:*=Math.max(1, (_height - 2 * loc1) / _rowHeight << 0);
            if (_scrollDirection == fl.controls.ScrollBarDirection.HORIZONTAL) 
            {
                loc2 = Math.max(1, Math.ceil((_width - 2 * loc1) / _columnWidth));
            }
            else if (_scrollPolicy == fl.controls.ScrollPolicy.ON || _scrollPolicy == fl.controls.ScrollPolicy.AUTO && length > loc2 * loc3) 
            {
                loc2 = Math.max(1, (_width - 2 * loc1 - 15) / _columnWidth << 0);
            }
            return loc2;
        }

        public function set columnCount(arg1:uint):void
        {
            if (arg1 == 0) 
            {
                return;
            }
            if (componentInspectorSetting) 
            {
                __columnCount = arg1;
                return;
            }
            __columnCount = 0;
            var loc1:*=Number(getStyleValue("contentPadding"));
            var loc2:*=Math.ceil(length / arg1) > height / rowHeight >> 0 && _scrollPolicy == fl.controls.ScrollPolicy.AUTO || _scrollPolicy == fl.controls.ScrollPolicy.ON;
            width = columnWidth * arg1 + 2 * loc1 + (_scrollDirection == fl.controls.ScrollBarDirection.VERTICAL && loc2 ? 15 : 0);
            return;
        }

        public function get columnWidth():Number
        {
            return _columnWidth;
        }

        public function set columnWidth(arg1:Number):void
        {
            if (_columnWidth == arg1) 
            {
                return;
            }
            _columnWidth = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get innerWidth():Number
        {
            drawNow();
            var loc1:*=getStyleValue("contentPadding") as Number;
            return width - loc1 * 2 - (_verticalScrollBar.visible ? _verticalScrollBar.width : 0);
        }

        public function get innerHeight():Number
        {
            drawNow();
            var loc1:*=getStyleValue("contentPadding") as Number;
            return height - loc1 * 2 - (_horizontalScrollBar.visible ? _horizontalScrollBar.height : 0);
        }

        public function get direction():String
        {
            return _scrollDirection;
        }

        public function set direction(arg1:String):void
        {
            if (_scrollDirection == arg1) 
            {
                return;
            }
            _scrollDirection = arg1;
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public function get scrollPolicy():String
        {
            return _scrollPolicy;
        }

        public function set scrollPolicy(arg1:String):void
        {
            if (!componentInspectorSetting && _scrollPolicy == arg1) 
            {
                return;
            }
            _scrollPolicy = arg1;
            if (direction != fl.controls.ScrollBarDirection.HORIZONTAL) 
            {
                _verticalScrollPolicy = arg1;
                _horizontalScrollPolicy = fl.controls.ScrollPolicy.OFF;
            }
            else 
            {
                _horizontalScrollPolicy = arg1;
                _verticalScrollPolicy = fl.controls.ScrollPolicy.OFF;
            }
            invalidate(fl.core.InvalidationType.SIZE);
            return;
        }

        public override function scrollToIndex(arg1:int):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            drawNow();
            var loc1:*=Math.max(1, contentWidth / _columnWidth << 0);
            if (_scrollDirection != fl.controls.ScrollBarDirection.VERTICAL) 
            {
                if (columnWidth > availableWidth) 
                {
                    return;
                }
                if ((loc3 = arg1 % loc1 * columnWidth) < horizontalScrollPosition) 
                {
                    horizontalScrollPosition = loc3;
                }
                else if (loc3 > horizontalScrollPosition + availableWidth - columnWidth) 
                {
                    horizontalScrollPosition = loc3 + columnWidth - availableWidth;
                }
            }
            else 
            {
                if (rowHeight > availableHeight) 
                {
                    return;
                }
                loc2 = (arg1 / loc1 >> 0) * rowHeight;
                if (loc2 < verticalScrollPosition) 
                {
                    verticalScrollPosition = loc2;
                }
                else if (loc2 > verticalScrollPosition + availableHeight - rowHeight) 
                {
                    verticalScrollPosition = loc2 + rowHeight - availableHeight;
                }
            }
            return;
        }

        public override function itemToLabel(arg1:Object):String
        {
            if (_labelFunction != null) 
            {
                return String(_labelFunction(arg1));
            }
            if (arg1[_labelField] == null) 
            {
                return "";
            }
            return String(arg1[_labelField]);
        }

        public override function get verticalScrollPolicy():String
        {
            return null;
        }

        public override function set verticalScrollPolicy(arg1:String):void
        {
            return;
        }

        public override function get horizontalScrollPolicy():String
        {
            return null;
        }

        public override function set horizontalScrollPolicy(arg1:String):void
        {
            return;
        }

        public override function get maxHorizontalScrollPosition():Number
        {
            drawNow();
            return _maxHorizontalScrollPosition;
        }

        protected var _rowHeight:Number=50;

        protected var _columnWidth:Number=50;

        protected var _scrollDirection:String="horizontal";

        protected var _scrollPolicy:String="auto";

        protected var _cellRenderer:Object;

        protected var oldLength:uint=0;

        protected var _labelField:String="label";

        protected var _iconField:String="icon";

        protected var _iconFunction:Function;

        protected var _sourceField:String="source";

        protected var _sourceFunction:Function;

        protected var __rowCount:uint=0;

        protected var __columnCount:uint=0;

        internal var collectionItemImport:fl.data.TileListCollectionItem;

        protected var _labelFunction:Function;

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//      class UIScrollBar
package fl.controls 
{
    import fl.core.*;
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    
    public class UIScrollBar extends fl.controls.ScrollBar
    {
        public function UIScrollBar()
        {
            super();
            return;
        }

        public override function set minScrollPosition(arg1:Number):void
        {
            super.minScrollPosition = arg1 < 0 ? 0 : arg1;
            return;
        }

        public override function set maxScrollPosition(arg1:Number):void
        {
            var loc1:*=arg1;
            if (_scrollTarget != null) 
            {
                loc1 = Math.min(loc1, _scrollTarget[_targetMaxScrollProperty]);
            }
            super.maxScrollPosition = loc1;
            return;
        }

        public function get scrollTarget():flash.display.DisplayObject
        {
            return _scrollTarget;
        }

        public function set scrollTarget(arg1:flash.display.DisplayObject):void
        {
            var target:flash.display.DisplayObject;
            var blockProg:String;
            var textDir:String;
            var hasPixelVS:Boolean;
            var scrollHoriz:Boolean;
            var rot:Number;

            var loc1:*;
            target = arg1;
            if (_scrollTarget != null) 
            {
                _scrollTarget.removeEventListener(flash.events.Event.CHANGE, handleTargetChange, false);
                _scrollTarget.removeEventListener(flash.events.TextEvent.TEXT_INPUT, handleTargetChange, false);
                _scrollTarget.removeEventListener(flash.events.Event.SCROLL, handleTargetScroll, false);
            }
            _scrollTarget = target;
            blockProg = null;
            textDir = null;
            hasPixelVS = false;
            if (_scrollTarget != null) 
            {
                try 
                {
                    if (_scrollTarget.hasOwnProperty("blockProgression")) 
                    {
                        blockProg = _scrollTarget["blockProgression"];
                    }
                    if (_scrollTarget.hasOwnProperty("direction")) 
                    {
                        textDir = _scrollTarget["direction"];
                    }
                    if (_scrollTarget.hasOwnProperty("pixelScrollV")) 
                    {
                        hasPixelVS = true;
                    }
                }
                catch (e:Error)
                {
                    blockProg = null;
                    textDir = null;
                }
            }
            scrollHoriz = this.direction == fl.controls.ScrollBarDirection.HORIZONTAL;
            rot = Math.abs(this.rotation);
            if (scrollHoriz && (blockProg == "rl" || textDir == "rtl")) 
            {
                if (getScaleY() > 0 && rotation == 90) 
                {
                    x = x + width;
                }
                setScaleY(-1);
            }
            else if (!scrollHoriz && blockProg == "rl" && textDir == "rtl") 
            {
                if (getScaleY() > 0 && !(rotation == 90)) 
                {
                    y = y + height;
                }
                setScaleY(-1);
            }
            else 
            {
                if (getScaleY() < 0) 
                {
                    if (scrollHoriz) 
                    {
                        if (rotation == 90) 
                        {
                            x = x - width;
                        }
                    }
                    else if (rotation != 90) 
                    {
                        y = y - height;
                    }
                }
                setScaleY(1);
            }
            setTargetScrollProperties(scrollHoriz, blockProg, hasPixelVS);
            if (_scrollTarget != null) 
            {
                _scrollTarget.addEventListener(flash.events.Event.CHANGE, handleTargetChange, false, 0, true);
                _scrollTarget.addEventListener(flash.events.TextEvent.TEXT_INPUT, handleTargetChange, false, 0, true);
                _scrollTarget.addEventListener(flash.events.Event.SCROLL, handleTargetScroll, false, 0, true);
            }
            invalidate(fl.core.InvalidationType.DATA);
            return;
        }

        public function get scrollTargetName():String
        {
            return _scrollTarget.name;
        }

        public function set scrollTargetName(arg1:String):void
        {
            var target:String;

            var loc1:*;
            target = arg1;
            try 
            {
                scrollTarget = parent.getChildByName(target);
            }
            catch (error:Error)
            {
                throw new Error("ScrollTarget not found, or is not a valid target");
            }
            return;
        }

        public override function get direction():String
        {
            return super.direction;
        }

        public override function set direction(arg1:String):void
        {
            var loc1:*=null;
            if (isLivePreview) 
            {
                return;
            }
            if (!componentInspectorSetting && !(_scrollTarget == null)) 
            {
                loc1 = _scrollTarget;
                scrollTarget = null;
            }
            super.direction = arg1;
            if (loc1 == null) 
            {
                updateScrollTargetProperties();
            }
            else 
            {
                scrollTarget = loc1;
            }
            return;
        }

        public function update():void
        {
            inEdit = true;
            updateScrollTargetProperties();
            inEdit = false;
            return;
        }

        protected override function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.DATA)) 
            {
                updateScrollTargetProperties();
            }
            super.draw();
            return;
        }

        protected function updateScrollTargetProperties():void
        {
            var blockProg:String;
            var hasPixelVS:Boolean;
            var pageSize:Number;
            var minScroll:Number;
            var local_tlf_internal:*="http://ns.adobe.com/textLayout/internal/2008";
            var minScrollVValue:*;

            var loc1:*;
            blockProg = null;
            hasPixelVS = false;
            pageSize = NaN;
            minScroll = NaN;
            minScrollVValue = undefined;
            if (_scrollTarget != null) 
            {
                blockProg = null;
                hasPixelVS = false;
                try 
                {
                    if (_scrollTarget.hasOwnProperty("blockProgression")) 
                    {
                        blockProg = _scrollTarget["blockProgression"];
                    }
                    if (_scrollTarget.hasOwnProperty("pixelScrollV")) 
                    {
                        hasPixelVS = true;
                    }
                }
                catch (e1:Error)
                {
                };
                setTargetScrollProperties(this.direction == fl.controls.ScrollBarDirection.HORIZONTAL, blockProg, hasPixelVS);
                if (_targetScrollProperty != "scrollH") 
                {
                    try 
                    {
                        if (blockProg == null) 
                        {
                            minScroll = 1;
                        }
                        else 
                        {
                            minScrollVValue = _scrollTarget["pixelMinScrollV"];
                            if (minScrollVValue is int) 
                            {
                                minScroll = minScrollVValue;
                            }
                            else 
                            {
                                minScroll = 1;
                            }
                        }
                    }
                    catch (e3:Error)
                    {
                        minScroll = 1;
                    }
                    pageSize = 10;
                }
                else 
                {
                    minScroll = 0;
                    try 
                    {
                        if (_scrollTarget.hasOwnProperty("controller") && _scrollTarget["controller"].hasOwnProperty("compositionWidth")) 
                        {
                            pageSize = _scrollTarget["controller"]["compositionWidth"];
                        }
                        else 
                        {
                            pageSize = _scrollTarget.width;
                        }
                    }
                    catch (e2:Error)
                    {
                        pageSize = _scrollTarget.width;
                    }
                }
                setScrollProperties(pageSize, minScroll, scrollTarget[_targetMaxScrollProperty]);
                scrollPosition = _scrollTarget[_targetScrollProperty];
            }
            else 
            {
                setScrollProperties(pageSize, minScrollPosition, maxScrollPosition);
                scrollPosition = 0;
            }
            return;
        }

        public override function setScrollProperties(arg1:Number, arg2:Number, arg3:Number, arg4:Number=0):void
        {
            var loc1:*=arg3;
            var loc2:*=arg2 < 0 ? 0 : arg2;
            if (_scrollTarget != null) 
            {
                loc1 = Math.min(arg3, _scrollTarget[_targetMaxScrollProperty]);
            }
            super.setScrollProperties(arg1, loc2, loc1, arg4);
            return;
        }

        public override function setScrollPosition(arg1:Number, arg2:Boolean=true):void
        {
            super.setScrollPosition(arg1, arg2);
            if (!_scrollTarget) 
            {
                inScroll = false;
                return;
            }
            updateTargetScroll();
            return;
        }

        protected function updateTargetScroll(arg1:fl.events.ScrollEvent=null):void
        {
            if (inEdit) 
            {
                return;
            }
            _scrollTarget[_targetScrollProperty] = scrollPosition;
            return;
        }

        protected function handleTargetChange(arg1:flash.events.Event):void
        {
            inEdit = true;
            setScrollPosition(_scrollTarget[_targetScrollProperty], true);
            updateScrollTargetProperties();
            inEdit = false;
            return;
        }

        protected function handleTargetScroll(arg1:flash.events.Event):void
        {
            if (inDrag) 
            {
                return;
            }
            if (!enabled) 
            {
                return;
            }
            inEdit = true;
            updateScrollTargetProperties();
            scrollPosition = _scrollTarget[_targetScrollProperty];
            inEdit = false;
            return;
        }

        internal function setTargetScrollProperties(arg1:Boolean, arg2:String, arg3:Boolean=false):void
        {
            if (arg2 != "rl") 
            {
                if (arg1) 
                {
                    _targetScrollProperty = "scrollH";
                    _targetMaxScrollProperty = "maxScrollH";
                }
                else 
                {
                    _targetScrollProperty = arg3 ? "pixelScrollV" : "scrollV";
                    _targetMaxScrollProperty = arg3 ? "pixelMaxScrollV" : "maxScrollV";
                }
            }
            else if (arg1) 
            {
                _targetScrollProperty = arg3 ? "pixelScrollV" : "scrollV";
                _targetMaxScrollProperty = arg3 ? "pixelMaxScrollV" : "maxScrollV";
            }
            else 
            {
                _targetScrollProperty = "scrollH";
                _targetMaxScrollProperty = "maxScrollH";
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return fl.core.UIComponent.mergeStyles(defaultStyles, fl.controls.ScrollBar.getStyleDefinition());
        }

        
        {
            defaultStyles = {};
        }

        protected var _scrollTarget:flash.display.DisplayObject;

        protected var inEdit:Boolean=false;

        protected var inScroll:Boolean=false;

        protected var _targetScrollProperty:String;

        protected var _targetMaxScrollProperty:String;

        internal static var defaultStyles:Object;
    }
}


//    package core
//      class ComponentShim
package fl.core 
{
    import flash.display.*;
    
    public dynamic class ComponentShim extends flash.display.MovieClip
    {
        public function ComponentShim()
        {
            super();
            return;
        }
    }
}


//      class InvalidationType
package fl.core 
{
    public class InvalidationType extends Object
    {
        public function InvalidationType()
        {
            super();
            return;
        }

        public static const ALL:String="all";

        public static const SIZE:String="size";

        public static const STYLES:String="styles";

        public static const RENDERER_STYLES:String="rendererStyles";

        public static const STATE:String="state";

        public static const DATA:String="data";

        public static const SCROLL:String="scroll";

        public static const SELECTED:String="selected";
    }
}


//      class UIComponent
package fl.core 
{
    import fl.events.*;
    import fl.managers.*;
    import flash.display.*;
    import flash.events.*;
    import flash.system.*;
    import flash.text.*;
    import flash.utils.*;
    
    public class UIComponent extends flash.display.Sprite
    {
        public function UIComponent()
        {
            super();
            instanceStyles = {};
            sharedStyles = {};
            invalidHash = {};
            callLaterMethods = new flash.utils.Dictionary();
            fl.managers.StyleManager.registerInstance(this);
            configUI();
            invalidate(fl.core.InvalidationType.ALL);
            tabEnabled = this is fl.managers.IFocusManagerComponent;
            focusRect = false;
            if (tabEnabled) 
            {
                addEventListener(flash.events.FocusEvent.FOCUS_IN, focusInHandler);
                addEventListener(flash.events.FocusEvent.FOCUS_OUT, focusOutHandler);
                addEventListener(flash.events.KeyboardEvent.KEY_DOWN, keyDownHandler);
                addEventListener(flash.events.KeyboardEvent.KEY_UP, keyUpHandler);
            }
            initializeFocusManager();
            addEventListener(flash.events.Event.ENTER_FRAME, hookAccessibility, false, 0, true);
            return;
        }

        protected function configUI():void
        {
            isLivePreview = checkLivePreview();
            var loc1:*=rotation;
            rotation = 0;
            var loc2:*=super.width;
            var loc3:*=super.height;
            var loc4:*;
            super.scaleY = loc4 = 1;
            super.scaleX = loc4;
            setSize(loc2, loc3);
            move(super.x, super.y);
            rotation = loc1;
            startWidth = loc2;
            startHeight = loc3;
            if (numChildren > 0) 
            {
                removeChildAt(0);
            }
            return;
        }

        protected function checkLivePreview():Boolean
        {
            var className:String;

            var loc1:*;
            className = null;
            if (parent == null) 
            {
                return false;
            }
            try 
            {
                className = flash.utils.getQualifiedClassName(parent);
            }
            catch (e:Error)
            {
            };
            return className == "fl.livepreview::LivePreviewParent";
        }

        protected function isInvalid(arg1:String, ... rest):Boolean
        {
            if (invalidHash[arg1] || invalidHash[fl.core.InvalidationType.ALL]) 
            {
                return true;
            }
            while (rest.length > 0) 
            {
                if (!invalidHash[rest.pop()]) 
                {
                    continue;
                }
                return true;
            }
            return false;
        }

        protected function validate():void
        {
            invalidHash = {};
            return;
        }

        protected function draw():void
        {
            if (isInvalid(fl.core.InvalidationType.SIZE, fl.core.InvalidationType.STYLES)) 
            {
                if (isFocused && focusManager.showFocusIndicator) 
                {
                    drawFocus(true);
                }
            }
            validate();
            return;
        }

        protected function getDisplayObjectInstance(arg1:Object):flash.display.DisplayObject
        {
            var skin:Object;
            var classDef:Object;

            var loc1:*;
            skin = arg1;
            classDef = null;
            if (skin is Class) 
            {
                return new skin() as flash.display.DisplayObject;
            }
            if (skin is flash.display.DisplayObject) 
            {
                (skin as flash.display.DisplayObject).x = 0;
                (skin as flash.display.DisplayObject).y = 0;
                return skin as flash.display.DisplayObject;
            }
            try 
            {
                classDef = flash.utils.getDefinitionByName(skin.toString());
            }
            catch (e:Error)
            {
                try 
                {
                    classDef = loaderInfo.applicationDomain.getDefinition(skin.toString()) as Object;
                }
                catch (e:Error)
                {
                };
            }
            if (classDef == null) 
            {
                return null;
            }
            return new classDef() as flash.display.DisplayObject;
        }

        protected function getStyleValue(arg1:String):Object
        {
            return instanceStyles[arg1] != null ? instanceStyles[arg1] : sharedStyles[arg1];
        }

        protected function copyStylesToChild(arg1:fl.core.UIComponent, arg2:Object):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=arg2;
            for (loc1 in loc3) 
            {
                arg1.setStyle(loc1, getStyleValue(arg2[loc1]));
            }
            return;
        }

        protected function callLater(arg1:Function):void
        {
            var fn:Function;

            var loc1:*;
            fn = arg1;
            if (inCallLaterPhase) 
            {
                return;
            }
            callLaterMethods[fn] = true;
            if (stage == null) 
            {
                addEventListener(flash.events.Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
            }
            else 
            {
                try 
                {
                    stage.addEventListener(flash.events.Event.RENDER, callLaterDispatcher, false, 0, true);
                    stage.invalidate();
                }
                catch (se:SecurityError)
                {
                    addEventListener(flash.events.Event.ENTER_FRAME, callLaterDispatcher, false, 0, true);
                }
            }
            return;
        }

        internal function callLaterDispatcher(arg1:flash.events.Event):void
        {
            var event:flash.events.Event;
            var methods:flash.utils.Dictionary;
            var method:Object;

            var loc1:*;
            method = null;
            event = arg1;
            if (event.type == flash.events.Event.ADDED_TO_STAGE) 
            {
                try 
                {
                    removeEventListener(flash.events.Event.ADDED_TO_STAGE, callLaterDispatcher);
                    stage.addEventListener(flash.events.Event.RENDER, callLaterDispatcher, false, 0, true);
                    stage.invalidate();
                    return;
                }
                catch (se1:SecurityError)
                {
                    addEventListener(flash.events.Event.ENTER_FRAME, callLaterDispatcher, false, 0, true);
                }
            }
            event.target.removeEventListener(flash.events.Event.RENDER, callLaterDispatcher);
            event.target.removeEventListener(flash.events.Event.ENTER_FRAME, callLaterDispatcher);
            try 
            {
                if (stage == null) 
                {
                    addEventListener(flash.events.Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
                    return;
                }
            }
            catch (se2:SecurityError)
            {
            };
            inCallLaterPhase = true;
            methods = callLaterMethods;
            loc2 = 0;
            var loc3:*=methods;
            for (method in loc3) 
            {
                method();
                delete methods[method];
            }
            inCallLaterPhase = false;
            return;
        }

        internal function initializeFocusManager():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (stage != null) 
            {
                createFocusManager();
                loc1 = focusManager;
                if (loc1 != null) 
                {
                    loc2 = focusManagerUsers[loc1];
                    if (loc2 == null) 
                    {
                        loc2 = new flash.utils.Dictionary(true);
                        focusManagerUsers[loc1] = loc2;
                    }
                    loc2[this] = true;
                }
            }
            else 
            {
                addEventListener(flash.events.Event.ADDED_TO_STAGE, addedHandler, false, 0, true);
            }
            addEventListener(flash.events.Event.REMOVED_FROM_STAGE, removedHandler);
            return;
        }

        protected function getScaleY():Number
        {
            return super.scaleY;
        }

        internal function addedHandler(arg1:flash.events.Event):void
        {
            removeEventListener(flash.events.Event.ADDED_TO_STAGE, addedHandler);
            initializeFocusManager();
            return;
        }

        internal function removedHandler(arg1:flash.events.Event):void
        {
            var loc2:*=null;
            var loc3:*=false;
            var loc4:*=undefined;
            var loc5:*=undefined;
            var loc6:*=null;
            removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, removedHandler);
            addEventListener(flash.events.Event.ADDED_TO_STAGE, addedHandler);
            var loc1:*=focusManager;
            if (loc1 != null) 
            {
                loc2 = focusManagerUsers[loc1];
                if (loc2 != null) 
                {
                    delete loc2[this];
                    loc3 = true;
                    var loc7:*=0;
                    var loc8:*=loc2;
                    for (loc4 in loc8) 
                    {
                        loc3 = false;
                        break;
                    }
                    if (loc3) 
                    {
                        delete focusManagerUsers[loc1];
                        loc2 = null;
                    }
                }
                if (loc2 == null) 
                {
                    loc1.deactivate();
                    loc7 = 0;
                    loc8 = focusManagers;
                    for (loc5 in loc8) 
                    {
                        loc6 = focusManagers[loc5];
                        if (loc1 != loc6) 
                        {
                            continue;
                        }
                        delete focusManagers[loc5];
                    }
                }
            }
            return;
        }

        protected function createFocusManager():void
        {
            var stageAccessOK:Boolean;
            var myTopLevel:flash.display.DisplayObjectContainer;

            var loc1:*;
            stageAccessOK = true;
            try 
            {
                stage.getChildAt(0);
            }
            catch (se:SecurityError)
            {
                stageAccessOK = false;
            }
            myTopLevel = null;
            if (stageAccessOK) 
            {
                myTopLevel = stage;
            }
            else 
            {
                myTopLevel = this;
                try 
                {
                    while (myTopLevel.parent != null) 
                    {
                        myTopLevel = myTopLevel.parent;
                    }
                }
                catch (se:SecurityError)
                {
                };
            }
            if (focusManagers[myTopLevel] == null) 
            {
                focusManagers[myTopLevel] = new fl.managers.FocusManager(myTopLevel);
            }
            return;
        }

        protected function isOurFocus(arg1:flash.display.DisplayObject):Boolean
        {
            return arg1 == this;
        }

        protected function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            var loc1:*=null;
            if (isOurFocus(arg1.target as flash.display.DisplayObject)) 
            {
                loc1 = focusManager;
                if (loc1 && loc1.showFocusIndicator) 
                {
                    drawFocus(true);
                    isFocused = true;
                }
            }
            return;
        }

        protected function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            return;
        }

        protected function keyUpHandler(arg1:flash.events.KeyboardEvent):void
        {
            return;
        }

        protected function hookAccessibility(arg1:flash.events.Event):void
        {
            removeEventListener(flash.events.Event.ENTER_FRAME, hookAccessibility);
            initializeAccessibility();
            return;
        }

        protected function initializeAccessibility():void
        {
            if (fl.core.UIComponent.createAccessibilityImplementation != null) 
            {
                fl.core.UIComponent.createAccessibilityImplementation(this);
            }
            return;
        }

        public static function getStyleDefinition():Object
        {
            return defaultStyles;
        }

        public static function mergeStyles(... rest):Object
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*={};
            var loc2:*=rest.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = rest[loc3];
                var loc6:*=0;
                var loc7:*=loc4;
                for (loc5 in loc7) 
                {
                    if (loc1[loc5] != null) 
                    {
                        continue;
                    }
                    loc1[loc5] = rest[loc3][loc5];
                }
                ++loc3;
            }
            return loc1;
        }

        
        {
            inCallLaterPhase = false;
            defaultStyles = {"focusRectSkin":"focusRectSkin", "focusRectPadding":2, "textFormat":new flash.text.TextFormat("_sans", 11, 0, false, false, false, "", "", flash.text.TextFormatAlign.LEFT, 0, 0, 0, 0), "disabledTextFormat":new flash.text.TextFormat("_sans", 11, 10066329, false, false, false, "", "", flash.text.TextFormatAlign.LEFT, 0, 0, 0, 0), "defaultTextFormat":new flash.text.TextFormat("_sans", 11, 0, false, false, false, "", "", flash.text.TextFormatAlign.LEFT, 0, 0, 0, 0), "defaultDisabledTextFormat":new flash.text.TextFormat("_sans", 11, 10066329, false, false, false, "", "", flash.text.TextFormatAlign.LEFT, 0, 0, 0, 0)};
            focusManagers = new flash.utils.Dictionary(true);
            focusManagerUsers = new flash.utils.Dictionary(true);
        }

        public function get componentInspectorSetting():Boolean
        {
            return _inspector;
        }

        public function set componentInspectorSetting(arg1:Boolean):void
        {
            _inspector = arg1;
            if (_inspector) 
            {
                beforeComponentParameters();
            }
            else 
            {
                afterComponentParameters();
            }
            return;
        }

        protected function beforeComponentParameters():void
        {
            return;
        }

        protected function afterComponentParameters():void
        {
            return;
        }

        public function get enabled():Boolean
        {
            return _enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            if (arg1 == _enabled) 
            {
                return;
            }
            _enabled = arg1;
            invalidate(fl.core.InvalidationType.STATE);
            return;
        }

        public function setSize(arg1:Number, arg2:Number):void
        {
            _width = arg1;
            _height = arg2;
            invalidate(fl.core.InvalidationType.SIZE);
            dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.RESIZE, false));
            return;
        }

        public override function get width():Number
        {
            return _width;
        }

        public override function set width(arg1:Number):void
        {
            if (_width == arg1) 
            {
                return;
            }
            setSize(arg1, height);
            return;
        }

        public override function get height():Number
        {
            return _height;
        }

        public override function set height(arg1:Number):void
        {
            if (_height == arg1) 
            {
                return;
            }
            setSize(width, arg1);
            return;
        }

        public function setStyle(arg1:String, arg2:Object):void
        {
            if (instanceStyles[arg1] === arg2 && !(arg2 is flash.text.TextFormat)) 
            {
                return;
            }
            instanceStyles[arg1] = arg2;
            invalidate(fl.core.InvalidationType.STYLES);
            return;
        }

        public function clearStyle(arg1:String):void
        {
            setStyle(arg1, null);
            return;
        }

        public function getStyle(arg1:String):Object
        {
            return instanceStyles[arg1];
        }

        public function move(arg1:Number, arg2:Number):void
        {
            _x = arg1;
            _y = arg2;
            super.x = Math.round(arg1);
            super.y = Math.round(arg2);
            dispatchEvent(new fl.events.ComponentEvent(fl.events.ComponentEvent.MOVE));
            return;
        }

        public override function get x():Number
        {
            return isNaN(_x) ? super.x : _x;
        }

        public override function set x(arg1:Number):void
        {
            move(arg1, _y);
            return;
        }

        public override function get y():Number
        {
            return isNaN(_y) ? super.y : _y;
        }

        public override function set y(arg1:Number):void
        {
            move(_x, arg1);
            return;
        }

        public override function get scaleX():Number
        {
            return width / startWidth;
        }

        public override function set scaleX(arg1:Number):void
        {
            setSize(startWidth * arg1, height);
            return;
        }

        public override function get scaleY():Number
        {
            return height / startHeight;
        }

        public override function set scaleY(arg1:Number):void
        {
            setSize(width, startHeight * arg1);
            return;
        }

        protected function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            if (isOurFocus(arg1.target as flash.display.DisplayObject)) 
            {
                drawFocus(false);
                isFocused = false;
            }
            return;
        }

        protected function setScaleY(arg1:Number):void
        {
            super.scaleY = arg1;
            return;
        }

        protected function getScaleX():Number
        {
            return super.scaleX;
        }

        protected function setScaleX(arg1:Number):void
        {
            super.scaleX = arg1;
            return;
        }

        public override function get visible():Boolean
        {
            return super.visible;
        }

        public override function set visible(arg1:Boolean):void
        {
            if (super.visible == arg1) 
            {
                return;
            }
            super.visible = arg1;
            var loc1:*=arg1 ? fl.events.ComponentEvent.SHOW : fl.events.ComponentEvent.HIDE;
            dispatchEvent(new fl.events.ComponentEvent(loc1, true));
            return;
        }

        public function validateNow():void
        {
            invalidate(fl.core.InvalidationType.ALL, false);
            draw();
            return;
        }

        public function invalidate(arg1:String="all", arg2:Boolean=true):void
        {
            invalidHash[arg1] = true;
            if (arg2) 
            {
                this.callLater(draw);
            }
            return;
        }

        public function setSharedStyle(arg1:String, arg2:Object):void
        {
            if (sharedStyles[arg1] === arg2 && !(arg2 is flash.text.TextFormat)) 
            {
                return;
            }
            sharedStyles[arg1] = arg2;
            if (instanceStyles[arg1] == null) 
            {
                invalidate(fl.core.InvalidationType.STYLES);
            }
            return;
        }

        public function get focusEnabled():Boolean
        {
            return _focusEnabled;
        }

        public function set focusEnabled(arg1:Boolean):void
        {
            _focusEnabled = arg1;
            return;
        }

        public function get mouseFocusEnabled():Boolean
        {
            return _mouseFocusEnabled;
        }

        public function set mouseFocusEnabled(arg1:Boolean):void
        {
            _mouseFocusEnabled = arg1;
            return;
        }

        public function get focusManager():fl.managers.IFocusManager
        {
            var o:flash.display.DisplayObject;

            var loc1:*;
            o = this;
            while (o) 
            {
                if (fl.core.UIComponent.focusManagers[o] != null) 
                {
                    return fl.managers.IFocusManager(fl.core.UIComponent.focusManagers[o]);
                }
            }
            return null;
        }

        public function set focusManager(arg1:fl.managers.IFocusManager):void
        {
            fl.core.UIComponent.focusManagers[this] = arg1;
            return;
        }

        public function drawFocus(arg1:Boolean):void
        {
            var loc1:*=NaN;
            isFocused = arg1;
            if (!(uiFocusRect == null) && contains(uiFocusRect)) 
            {
                removeChild(uiFocusRect);
                uiFocusRect = null;
            }
            if (arg1) 
            {
                uiFocusRect = getDisplayObjectInstance(getStyleValue("focusRectSkin")) as flash.display.Sprite;
                if (uiFocusRect == null) 
                {
                    return;
                }
                loc1 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = -loc1;
                uiFocusRect.y = -loc1;
                uiFocusRect.width = width + loc1 * 2;
                uiFocusRect.height = height + loc1 * 2;
                addChildAt(uiFocusRect, 0);
            }
            return;
        }

        public function setFocus():void
        {
            if (stage) 
            {
                stage.focus = this;
            }
            return;
        }

        public function getFocus():flash.display.InteractiveObject
        {
            if (stage) 
            {
                return stage.focus;
            }
            return null;
        }

        protected function setIMEMode(arg1:Boolean):*
        {
            var enabled:Boolean;

            var loc1:*;
            enabled = arg1;
            if (_imeMode != null) 
            {
                if (enabled) 
                {
                    flash.system.IME.enabled = true;
                    _oldIMEMode = flash.system.IME.conversionMode;
                    try 
                    {
                        if (!errorCaught && !(flash.system.IME.conversionMode == flash.system.IMEConversionMode.UNKNOWN)) 
                        {
                            flash.system.IME.conversionMode = _imeMode;
                        }
                        errorCaught = false;
                    }
                    catch (e:Error)
                    {
                        errorCaught = true;
                        throw new Error("IME mode not supported: " + _imeMode);
                    }
                }
                else 
                {
                    if (!(flash.system.IME.conversionMode == flash.system.IMEConversionMode.UNKNOWN) && !(_oldIMEMode == flash.system.IMEConversionMode.UNKNOWN)) 
                    {
                        flash.system.IME.conversionMode = _oldIMEMode;
                    }
                    flash.system.IME.enabled = false;
                }
            }
            return;
        }

        public function drawNow():void
        {
            draw();
            return;
        }

        public const version:String="3.0.3.1";

        public var focusTarget:fl.managers.IFocusManagerComponent;

        protected var isLivePreview:Boolean=false;

        internal var tempText:flash.text.TextField;

        protected var instanceStyles:Object;

        protected var sharedStyles:Object;

        protected var callLaterMethods:flash.utils.Dictionary;

        protected var invalidateFlag:Boolean=false;

        protected var _enabled:Boolean=true;

        protected var invalidHash:Object;

        protected var uiFocusRect:flash.display.DisplayObject;

        internal var _focusEnabled:Boolean=true;

        internal var _mouseFocusEnabled:Boolean=true;

        protected var _width:Number;

        protected var _height:Number;

        protected var _x:Number;

        protected var _y:Number;

        protected var startWidth:Number;

        protected var startHeight:Number;

        protected var _imeMode:String=null;

        protected var _oldIMEMode:String=null;

        protected var errorCaught:Boolean=false;

        protected var _inspector:Boolean=false;

        internal static var focusManagers:flash.utils.Dictionary;

        internal static var focusManagerUsers:flash.utils.Dictionary;

        protected var isFocused:Boolean=false;

        public static var inCallLaterPhase:Boolean=false;

        public static var createAccessibilityImplementation:Function;

        internal static var defaultStyles:Object;
    }
}


//    package data
//      class DataProvider
package fl.data 
{
    import fl.events.*;
    import flash.events.*;
    
    public class DataProvider extends flash.events.EventDispatcher
    {
        public function DataProvider(arg1:Object=null)
        {
            super();
            if (arg1 != null) 
            {
                data = getDataFromObject(arg1);
            }
            else 
            {
                data = [];
            }
            return;
        }

        public function get length():uint
        {
            return data.length;
        }

        public function invalidateItemAt(arg1:int):void
        {
            checkIndex(arg1, (data.length - 1));
            dispatchChangeEvent(fl.events.DataChangeType.INVALIDATE, [data[arg1]], arg1, arg1);
            return;
        }

        public function invalidateItem(arg1:Object):void
        {
            var loc1:*=getItemIndex(arg1);
            if (loc1 == -1) 
            {
                return;
            }
            invalidateItemAt(loc1);
            return;
        }

        public function invalidate():void
        {
            dispatchEvent(new fl.events.DataChangeEvent(fl.events.DataChangeEvent.DATA_CHANGE, fl.events.DataChangeType.INVALIDATE_ALL, data.concat(), 0, data.length));
            return;
        }

        public function addItemAt(arg1:Object, arg2:uint):void
        {
            checkIndex(arg2, data.length);
            dispatchPreChangeEvent(fl.events.DataChangeType.ADD, [arg1], arg2, arg2);
            data.splice(arg2, 0, arg1);
            dispatchChangeEvent(fl.events.DataChangeType.ADD, [arg1], arg2, arg2);
            return;
        }

        public function addItem(arg1:Object):void
        {
            dispatchPreChangeEvent(fl.events.DataChangeType.ADD, [arg1], (data.length - 1), (data.length - 1));
            data.push(arg1);
            dispatchChangeEvent(fl.events.DataChangeType.ADD, [arg1], (data.length - 1), (data.length - 1));
            return;
        }

        public function addItemsAt(arg1:Object, arg2:uint):void
        {
            checkIndex(arg2, data.length);
            var loc1:*=getDataFromObject(arg1);
            dispatchPreChangeEvent(fl.events.DataChangeType.ADD, loc1, arg2, (arg2 + loc1.length - 1));
            data.splice.apply(data, [arg2, 0].concat(loc1));
            dispatchChangeEvent(fl.events.DataChangeType.ADD, loc1, arg2, (arg2 + loc1.length - 1));
            return;
        }

        public function addItems(arg1:Object):void
        {
            addItemsAt(arg1, data.length);
            return;
        }

        public function concat(arg1:Object):void
        {
            addItems(arg1);
            return;
        }

        public function merge(arg1:Object):void
        {
            var loc5:*=null;
            var loc1:*=getDataFromObject(arg1);
            var loc2:*=loc1.length;
            var loc3:*=data.length;
            dispatchPreChangeEvent(fl.events.DataChangeType.ADD, data.slice(loc3, data.length), loc3, (this.data.length - 1));
            var loc4:*=0;
            while (loc4 < loc2) 
            {
                loc5 = loc1[loc4];
                if (getItemIndex(loc5) == -1) 
                {
                    data.push(loc5);
                }
                ++loc4;
            }
            if (data.length > loc3) 
            {
                dispatchChangeEvent(fl.events.DataChangeType.ADD, data.slice(loc3, data.length), loc3, (this.data.length - 1));
            }
            else 
            {
                dispatchChangeEvent(fl.events.DataChangeType.ADD, [], -1, -1);
            }
            return;
        }

        public function getItemAt(arg1:uint):Object
        {
            checkIndex(arg1, (data.length - 1));
            return data[arg1];
        }

        public function getItemIndex(arg1:Object):int
        {
            return data.indexOf(arg1);
        }

        public function removeItemAt(arg1:uint):Object
        {
            checkIndex(arg1, (data.length - 1));
            dispatchPreChangeEvent(fl.events.DataChangeType.REMOVE, data.slice(arg1, arg1 + 1), arg1, arg1);
            var loc1:*=data.splice(arg1, 1);
            dispatchChangeEvent(fl.events.DataChangeType.REMOVE, loc1, arg1, arg1);
            return loc1[0];
        }

        public function removeItem(arg1:Object):Object
        {
            var loc1:*=getItemIndex(arg1);
            if (loc1 != -1) 
            {
                return removeItemAt(loc1);
            }
            return null;
        }

        public function removeAll():void
        {
            var loc1:*=data.concat();
            dispatchPreChangeEvent(fl.events.DataChangeType.REMOVE_ALL, loc1, 0, loc1.length);
            data = [];
            dispatchChangeEvent(fl.events.DataChangeType.REMOVE_ALL, loc1, 0, loc1.length);
            return;
        }

        public function replaceItem(arg1:Object, arg2:Object):Object
        {
            var loc1:*=getItemIndex(arg2);
            if (loc1 != -1) 
            {
                return replaceItemAt(arg1, loc1);
            }
            return null;
        }

        public function replaceItemAt(arg1:Object, arg2:uint):Object
        {
            checkIndex(arg2, (data.length - 1));
            var loc1:*=[data[arg2]];
            dispatchPreChangeEvent(fl.events.DataChangeType.REPLACE, loc1, arg2, arg2);
            data[arg2] = arg1;
            dispatchChangeEvent(fl.events.DataChangeType.REPLACE, loc1, arg2, arg2);
            return loc1[0];
        }

        public function sort(... rest):*
        {
            dispatchPreChangeEvent(fl.events.DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            var loc1:*=data.sort.apply(data, rest);
            dispatchChangeEvent(fl.events.DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            return loc1;
        }

        public function sortOn(arg1:Object, arg2:Object=null):*
        {
            dispatchPreChangeEvent(fl.events.DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            var loc1:*=data.sortOn(arg1, arg2);
            dispatchChangeEvent(fl.events.DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            return loc1;
        }

        public function clone():fl.data.DataProvider
        {
            return new fl.data.DataProvider(data);
        }

        public function toArray():Array
        {
            return data.concat();
        }

        public override function toString():String
        {
            return "DataProvider [" + data.join(" , ") + "]";
        }

        protected function getDataFromObject(arg1:Object):Array
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=null;
            var loc11:*=null;
            if (arg1 is Array) 
            {
                loc2 = arg1 as Array;
                if (loc2.length > 0) 
                {
                    if (loc2[0] is String || loc2[0] is Number) 
                    {
                        loc1 = [];
                        loc3 = 0;
                        while (loc3 < loc2.length) 
                        {
                            loc4 = {"label":String(loc2[loc3]), "data":loc2[loc3]};
                            loc1.push(loc4);
                            ++loc3;
                        }
                        return loc1;
                    }
                }
                return arg1.concat();
            }
            if (arg1 is fl.data.DataProvider) 
            {
                return arg1.toArray();
            }
            if (arg1 is XML) 
            {
                loc5 = arg1 as XML;
                loc1 = [];
                loc6 = loc5.*;
                var loc12:*=0;
                var loc13:*=loc6;
                for each (loc7 in loc13) 
                {
                    arg1 = {};
                    loc8 = loc7.attributes();
                    var loc14:*=0;
                    var loc15:*=loc8;
                    for each (loc9 in loc15) 
                    {
                        arg1[loc9.localName()] = loc9.toString();
                    }
                    loc10 = loc7.*;
                    loc14 = 0;
                    loc15 = loc10;
                    for each (loc11 in loc15) 
                    {
                        if (!loc11.hasSimpleContent()) 
                        {
                            continue;
                        }
                        arg1[loc11.localName()] = loc11.toString();
                    }
                    loc1.push(arg1);
                }
                return loc1;
            }
            throw new TypeError("Error: Type Coercion failed: cannot convert " + arg1 + " to Array or DataProvider.");
        }

        protected function checkIndex(arg1:int, arg2:int):void
        {
            if (arg1 > arg2 || arg1 < 0) 
            {
                throw new RangeError("DataProvider index (" + arg1 + ") is not in acceptable range (0 - " + arg2 + ")");
            }
            return;
        }

        protected function dispatchChangeEvent(arg1:String, arg2:Array, arg3:int, arg4:int):void
        {
            dispatchEvent(new fl.events.DataChangeEvent(fl.events.DataChangeEvent.DATA_CHANGE, arg1, arg2, arg3, arg4));
            return;
        }

        protected function dispatchPreChangeEvent(arg1:String, arg2:Array, arg3:int, arg4:int):void
        {
            dispatchEvent(new fl.events.DataChangeEvent(fl.events.DataChangeEvent.PRE_DATA_CHANGE, arg1, arg2, arg3, arg4));
            return;
        }

        protected var data:Array;
    }
}


//      class SimpleCollectionItem
package fl.data 
{
    public dynamic class SimpleCollectionItem extends Object
    {
        public function SimpleCollectionItem()
        {
            super();
            return;
        }

        public function toString():String
        {
            return "[SimpleCollectionItem: " + label + "," + data + "]";
        }

        public var label:String;

        public var data:String;
    }
}


//      class TileListCollectionItem
package fl.data 
{
    public dynamic class TileListCollectionItem extends Object
    {
        public function TileListCollectionItem()
        {
            super();
            return;
        }

        public function toString():String
        {
            return "[TileListCollectionItem: " + label + "," + source + "]";
        }

        public var label:String;

        public var source:String;
    }
}


//    package display
//      class ProLoader
package fl.display 
{
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    
    public class ProLoader extends flash.display.Sprite
    {
        public function ProLoader()
        {
            super();
            this._loader = new flash.display.Loader();
            this._loader.contentLoaderInfo.sharedEvents.addEventListener(fl.events.ProLoaderRSLPreloaderSandboxEvent.PROLOADER_RSLPRELOADER_SANDBOX, this.handleProLoaderRSLPreloaderSandboxEvent, false, 0, true);
            super.addChild(this._loader);
            this._realContentLoader = null;
            this._cli = new fl.display.ProLoaderInfo(this);
            this._loading = false;
            this._hasRequestedContentParentProp = false;
            return;
        }

        internal function handleProLoaderRSLPreloaderSandboxEvent(arg1:Object):void
        {
            var e:Object;
            var content:flash.display.DisplayObjectContainer;

            var loc1:*;
            content = null;
            e = arg1;
            if (e.loaderInfo == null) 
            {
                if (!(e.shape == null) && flash.utils.getQualifiedClassName(e.shape) == "flash.display::Shape") 
                {
                    try 
                    {
                        content = e.shape.parent;
                        if (content != null) 
                        {
                            content.removeChild(e.shape);
                            if (super.numChildren < 2) 
                            {
                                super.addChild(content);
                            }
                        }
                    }
                    catch (se:SecurityError)
                    {
                    };
                }
            }
            else 
            {
                try 
                {
                    this._realContentLoader = e.loaderInfo.loader;
                }
                catch (se:SecurityError)
                {
                    _realContentLoader = null;
                }
                this._cli.realContentLoaderInfo = e.loaderInfo;
            }
            return;
        }

        function loadDoneCallback(arg1:flash.display.DisplayObject):Boolean
        {
            var d:flash.display.DisplayObject;
            var p:flash.display.DisplayObjectContainer;

            var loc1:*;
            p = null;
            d = arg1;
            if (!this._loading) 
            {
                this._loader.unload();
                return false;
            }
            this._loading = false;
            if (d != null) 
            {
                try 
                {
                    if (this._cli.realContentLoaderInfo != null) 
                    {
                        if (this._hasRequestedContentParentProp) 
                        {
                            if (d.parent == this) 
                            {
                                while (super.numChildren > 2) 
                                {
                                    super.removeChildAt(1);
                                }
                            }
                        }
                        else 
                        {
                            super.addChild(d);
                        }
                    }
                    else if (d.loaderInfo.loader == this._loader) 
                    {
                        if (!this._hasRequestedContentParentProp || this._cli._lcRequestedContentParentSet && !(d.parent == this)) 
                        {
                            super.addChild(d);
                        }
                    }
                    else 
                    {
                        this._realContentLoader = d.loaderInfo.loader;
                        this._cli.realContentLoaderInfo = this._realContentLoader.contentLoaderInfo;
                        if (this._hasRequestedContentParentProp) 
                        {
                            p = this._loader.content.parent as flash.display.DisplayObjectContainer;
                            if (p == this || p == null) 
                            {
                                while (super.numChildren > 1) 
                                {
                                    super.removeChildAt(1);
                                }
                                super.addChild(d);
                            }
                            else 
                            {
                                p.addChildAt(d, p.getChildIndex(this._loader.content));
                                p.removeChild(this._loader.content);
                            }
                        }
                        else 
                        {
                            super.addChild(d);
                        }
                    }
                }
                catch (se:SecurityError)
                {
                };
            }
            return true;
        }

        public function get realLoader():flash.display.Loader
        {
            return this._loader.contentLoaderInfo.loader;
        }

        public function get realContentLoader():flash.display.Loader
        {
            return this._realContentLoader != null ? this._realContentLoader.contentLoaderInfo.loader : null;
        }

        public function get content():flash.display.DisplayObject
        {
            if (super.numChildren > 1) 
            {
                return super.getChildAt(1);
            }
            if (this._realContentLoader) 
            {
                return this._realContentLoader.content;
            }
            return this._loader.content;
        }

        public function get contentLoaderInfo():fl.display.ProLoaderInfo
        {
            return this._cli;
        }

        public function close():void
        {
            var loc1:*;
            if (this._loading) 
            {
                this._loading = false;
                try 
                {
                    this._loader.close();
                }
                catch (err:Error)
                {
                };
            }
            else 
            {
                this._loader.close();
            }
            return;
        }

        public function load(arg1:flash.net.URLRequest, arg2:flash.system.LoaderContext=null):void
        {
            var loc1:*=null;
            while (super.numChildren > 1) 
            {
                super.removeChildAt(1);
            }
            this._realContentLoader = null;
            this._hasRequestedContentParentProp = false;
            this._cli.reset();
            if (arg2 == null) 
            {
                arg2 = new flash.system.LoaderContext();
            }
            if (arg2.hasOwnProperty("requestedContentParent")) 
            {
                this._hasRequestedContentParentProp = true;
                loc1 = arg2["requestedContentParent"];
                if (loc1 == null) 
                {
                    arg2["requestedContentParent"] = this;
                    this._cli._lcRequestedContentParentSet = true;
                }
            }
            this._loader.load(arg1, arg2);
            this._loading = true;
            return;
        }

        public function loadBytes(arg1:flash.utils.ByteArray, arg2:flash.system.LoaderContext=null):void
        {
            var loc1:*=null;
            while (super.numChildren > 1) 
            {
                super.removeChildAt(1);
            }
            this._realContentLoader = null;
            this._hasRequestedContentParentProp = false;
            this._cli.reset();
            if (arg2 == null) 
            {
                arg2 = new flash.system.LoaderContext();
            }
            if (arg2.hasOwnProperty("requestedContentParent")) 
            {
                this._hasRequestedContentParentProp = true;
                loc1 = arg2["requestedContentParent"];
                if (loc1 == null) 
                {
                    arg2["requestedContentParent"] = this;
                    this._cli._lcRequestedContentParentSet = true;
                }
            }
            this._loader.loadBytes(arg1, arg2);
            this._loading = true;
            return;
        }

        public function loadFilePromise(arg1:Object, arg2:flash.system.LoaderContext=null):void
        {
            var loc1:*=null;
            while (super.numChildren > 1) 
            {
                super.removeChildAt(1);
            }
            this._realContentLoader = null;
            this._hasRequestedContentParentProp = false;
            this._cli.reset();
            if (arg2 == null) 
            {
                arg2 = new flash.system.LoaderContext();
            }
            if (arg2.hasOwnProperty("requestedContentParent")) 
            {
                this._hasRequestedContentParentProp = true;
                loc1 = arg2["requestedContentParent"];
                if (loc1 == null) 
                {
                    arg2["requestedContentParent"] = this;
                    this._cli._lcRequestedContentParentSet = true;
                }
            }
            var loc2:*;
            (loc2 = this._loader)["loadFilePromise"](arg1, arg2);
            this._loading = true;
            return;
        }

        public function unload():void
        {
            if (!this._loading) 
            {
                while (super.numChildren > 1) 
                {
                    super.removeChildAt(1);
                }
                this._loader.unload();
            }
            return;
        }

        public function unloadAndStop(arg1:Boolean=true):void
        {
            if (!this._loading) 
            {
                while (super.numChildren > 1) 
                {
                    super.removeChildAt(1);
                }
                var loc1:*;
                (loc1 = this._loader)["unloadAndStop"](arg1);
            }
            return;
        }

        public override function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            if (!(this._realContentLoader == null) && this._realContentLoader.content == arg1 || this._loader.content == arg1) 
            {
                return super.addChild(arg1);
            }
            throw new Error("Error #2069: The ProLoader class does not implement this method.");
        }

        public override function addChildAt(arg1:flash.display.DisplayObject, arg2:int):flash.display.DisplayObject
        {
            throw new Error("Error #2069: The ProLoader class does not implement this method.");
        }

        public override function removeChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            throw new Error("Error #2069: The ProLoader class does not implement this method.");
        }

        public override function removeChildAt(arg1:int):flash.display.DisplayObject
        {
            throw new Error("Error #2069: The ProLoader class does not implement this method.");
        }

        public override function setChildIndex(arg1:flash.display.DisplayObject, arg2:int):void
        {
            throw new Error("Error #2069: The ProLoader class does not implement this method.");
        }

        public override function get numChildren():int
        {
            return (super.numChildren - 1);
        }

        public override function getChildAt(arg1:int):flash.display.DisplayObject
        {
            if (arg1 >= 0) 
            {
                ++arg1;
            }
            return super.getChildAt(arg1);
        }

        public override function getChildIndex(arg1:flash.display.DisplayObject):int
        {
            return (super.getChildIndex(arg1) - 1);
        }

        public function get uncaughtErrorEvents():flash.events.EventDispatcher
        {
            return this._loader["uncaughtErrorEvents"];
        }

        internal var _cli:fl.display.ProLoaderInfo;

        internal var _loader:flash.display.Loader;

        internal var _realContentLoader:flash.display.Loader;

        internal var _loading:Boolean;

        internal var _hasRequestedContentParentProp:Boolean;
    }
}


//      class ProLoaderInfo
package fl.display 
{
    import flash.display.*;
    import flash.errors.*;
    import flash.events.*;
    import flash.system.*;
    import flash.utils.*;
    
    public class ProLoaderInfo extends flash.events.EventDispatcher
    {
        public function ProLoaderInfo(arg1:fl.display.ProLoader)
        {
            super();
            this._realContentLI = null;
            this._lcRequestedContentParentSet = false;
            this._rslPreloaderLoaded = false;
            this._doneProgressStalling = false;
            this._numAdded = 0;
            this._proLoader = arg1;
            this._realLI = arg1.realLoader.contentLoaderInfo;
            this._realLI.addEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.handleAsyncErrorEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.Event.COMPLETE, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.Event.INIT, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.Event.OPEN, this.handleLoaderInfoEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgressEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.handleSecurityErrorEvent, false, 0, true);
            this._realLI.addEventListener(flash.events.Event.UNLOAD, this.handleLoaderInfoEvent, false, 0, true);
            return;
        }

        internal function handleLoaderInfoEvent(arg1:flash.events.Event):void
        {
            var e:flash.events.Event;
            var theContent:flash.display.DisplayObject;
            var theName:String;
            var rslPreloader:Object;

            var loc1:*;
            theContent = null;
            theName = null;
            rslPreloader = null;
            e = arg1;
            var loc2:*=e.type;
            switch (loc2) 
            {
                case flash.events.HTTPStatusEvent.HTTP_STATUS:
                case flash.events.IOErrorEvent.IO_ERROR:
                case flash.events.Event.OPEN:
                case flash.events.Event.UNLOAD:
                {
                    super.dispatchEvent(e);
                    break;
                }
                case flash.events.Event.INIT:
                {
                    if (!this._rslPreloaderLoaded) 
                    {
                        try 
                        {
                            theContent = this._realLI.content;
                            theName = flash.utils.getQualifiedClassName(theContent);
                            if (theName.substr(-13) == "__Preloader__") 
                            {
                                rslPreloader = theContent["__rslPreloader"];
                                if (rslPreloader != null) 
                                {
                                    theName = flash.utils.getQualifiedClassName(rslPreloader);
                                    if (theName == "fl.rsl::RSLPreloader") 
                                    {
                                        this._rslPreloaderLoaded = true;
                                        this._numAdded = 0;
                                        theContent.addEventListener(flash.events.Event.ADDED, this.handleAddedEvent, false, 0, true);
                                    }
                                }
                            }
                        }
                        catch (err:Error)
                        {
                            _rslPreloaderLoaded = false;
                        }
                    }
                    if (!this._rslPreloaderLoaded) 
                    {
                        this._proLoader.loadDoneCallback(theContent);
                        if (!this._doneProgressStalling && this._realLI.bytesLoaded >= this._realLI.bytesTotal) 
                        {
                            this._doneProgressStalling = true;
                            super.dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.PROGRESS, false, false, this._realLI.bytesLoaded, this._realLI.bytesTotal));
                        }
                        super.dispatchEvent(e);
                    }
                    break;
                }
                case flash.events.Event.COMPLETE:
                {
                    if (!this._rslPreloaderLoaded) 
                    {
                        super.dispatchEvent(e);
                    }
                    break;
                }
            }
            return;
        }

        internal function handleProgressEvent(arg1:flash.events.ProgressEvent):void
        {
            if (this._doneProgressStalling || arg1.bytesLoaded < arg1.bytesTotal) 
            {
                super.dispatchEvent(arg1);
            }
            return;
        }

        internal function handleSecurityErrorEvent(arg1:flash.events.SecurityErrorEvent):void
        {
            if (!this._lcRequestedContentParentSet || !(arg1.errorID == 2047)) 
            {
                super.dispatchEvent(arg1);
            }
            return;
        }

        internal function handleAddedEvent(arg1:flash.events.Event):void
        {
            var loc1:*=arg1.target as flash.display.DisplayObject;
            var loc2:*=arg1.currentTarget as flash.display.DisplayObjectContainer;
            if (!(loc1 == null) && !(loc2 == null) && loc1.parent == loc2) 
            {
                var loc3:*;
                var loc4:*=((loc3 = this)._numAdded + 1);
                loc3._numAdded = loc4;
            }
            if (this._numAdded > 1) 
            {
                arg1.currentTarget.removeEventListener(flash.events.Event.ADDED, this.handleAddedEvent);
                if (this._proLoader.loadDoneCallback(loc1)) 
                {
                    if (!this._doneProgressStalling && this._realLI.bytesLoaded >= this._realLI.bytesTotal) 
                    {
                        this._doneProgressStalling = true;
                        super.dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.PROGRESS, false, false, this._realLI.bytesLoaded, this._realLI.bytesTotal));
                    }
                    super.dispatchEvent(new flash.events.Event(flash.events.Event.INIT, false, false));
                    super.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE, false, false));
                }
            }
            return;
        }

        public function get applicationDomain():flash.system.ApplicationDomain
        {
            return this._realLI.applicationDomain;
        }

        function set realContentLoaderInfo(arg1:flash.display.LoaderInfo):void
        {
            var value:flash.display.LoaderInfo;
            var obj:Object;

            var loc1:*;
            obj = null;
            value = arg1;
            this._realContentLI = value;
            this._realContentLI.addEventListener(flash.events.Event.COMPLETE, this.handleRealContentEvent, false, 0, true);
            this._realContentLI.addEventListener(flash.events.Event.INIT, this.handleRealContentEvent, false, 0, true);
            this._realContentLI.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.handleLoaderInfoEvent, false, 0, true);
            this._realContentLI.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.handleSecurityErrorEvent, false, 0, true);
            this._rslPreloaderLoaded = true;
            if (this._realContentLI.hasOwnProperty("childSandboxBridge")) 
            {
                try 
                {
                    obj = this._realLI["childSandboxBridge"];
                    if (obj != null) 
                    {
                        this._realContentLI["childSandboxBridge"] = obj;
                    }
                }
                catch (se:SecurityError)
                {
                };
                try 
                {
                    obj = this._realLI["parentSandboxBridge"];
                    if (obj != null) 
                    {
                        this._realContentLI["parentSandboxBridge"] = obj;
                    }
                }
                catch (se:SecurityError)
                {
                };
            }
            return;
        }

        function get realContentLoaderInfo():flash.display.LoaderInfo
        {
            return this._realContentLI;
        }

        function reset():void
        {
            this._realContentLI = null;
            this._rslPreloaderLoaded = false;
            this._doneProgressStalling = false;
            this._lcRequestedContentParentSet = false;
            return;
        }

        public function get actionScriptVersion():uint
        {
            return this._realLI.actionScriptVersion;
        }

        internal function handleRealContentEvent(arg1:flash.events.Event):void
        {
            var e:flash.events.Event;
            var d:flash.display.DisplayObject;

            var loc1:*;
            d = null;
            e = arg1;
            if (e.type == flash.events.Event.INIT) 
            {
                try 
                {
                    d = this._realContentLI.content;
                }
                catch (se:SecurityError)
                {
                    d = null;
                }
                this._proLoader.loadDoneCallback(d);
                if (!this._doneProgressStalling && this._realLI.bytesLoaded >= this._realLI.bytesTotal) 
                {
                    this._doneProgressStalling = true;
                    super.dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.PROGRESS, false, false, this._realLI.bytesLoaded, this._realLI.bytesTotal));
                }
            }
            super.dispatchEvent(e);
            return;
        }

        public function get bytes():flash.utils.ByteArray
        {
            return this._realLI.bytes;
        }

        public function get bytesLoaded():uint
        {
            if (this._realLI.bytesLoaded >= this._realLI.bytesTotal && this._proLoader.content == null) 
            {
                return (this._realLI.bytesTotal - 1);
            }
            return this._realLI.bytesLoaded;
        }

        public function get bytesTotal():uint
        {
            return this._realLI.bytesTotal;
        }

        public function get childAllowsParent():Boolean
        {
            return this._realLI.childAllowsParent;
        }

        public function get childSandboxBridge():Object
        {
            if (this._realContentLI != null) 
            {
                return this._realContentLI["childSandboxBridge"];
            }
            return this._realLI["childSandboxBridge"];
        }

        public function set childSandboxBridge(arg1:Object):void
        {
            if (this._realContentLI == null) 
            {
                this._realLI["childSandboxBridge"] = arg1;
            }
            else 
            {
                this._realContentLI["childSandboxBridge"] = arg1;
            }
            return;
        }

        public function get content():flash.display.DisplayObject
        {
            return this._proLoader.content;
        }

        public function get contentType():String
        {
            return this._realLI.contentType;
        }

        public function get frameRate():Number
        {
            return this._realLI.frameRate;
        }

        public function get height():int
        {
            return this._realLI.height;
        }

        public function get isURLInaccessible():Boolean
        {
            return this._realLI.isURLInaccessible;
        }

        public function get loader():fl.display.ProLoader
        {
            return this._proLoader;
        }

        public function get loaderURL():String
        {
            return this._realLI.loaderURL;
        }

        public function get parameters():Object
        {
            return this._realLI.parameters;
        }

        public function get parentAllowsChild():Boolean
        {
            return this._realLI.parentAllowsChild;
        }

        public function get parentSandboxBridge():Object
        {
            if (this._realContentLI != null) 
            {
                return this._realContentLI["parentSandboxBridge"];
            }
            return this._realLI["parentSandboxBridge"];
        }

        public function set parentSandboxBridge(arg1:Object):*
        {
            if (this._realContentLI == null) 
            {
                this._realLI["parentSandboxBridge"] = arg1;
            }
            else 
            {
                this._realContentLI["parentSandboxBridge"] = arg1;
            }
            return;
        }

        public function get sameDomain():Boolean
        {
            return this._realLI.sameDomain;
        }

        public function get sharedEvents():flash.events.EventDispatcher
        {
            if (this._realContentLI != null) 
            {
                return this._realContentLI.sharedEvents;
            }
            return this._realLI.sharedEvents;
        }

        public function get swfVersion():uint
        {
            return this._realLI.swfVersion;
        }

        public function get url():String
        {
            return this._realLI.url;
        }

        public function get width():int
        {
            return this._realLI.width;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            Error.throwError(flash.errors.IllegalOperationError, 2118);
            return false;
        }

        internal function handleAsyncErrorEvent(arg1:flash.events.AsyncErrorEvent):void
        {
            if (!this._lcRequestedContentParentSet) 
            {
                super.dispatchEvent(arg1);
            }
            return;
        }

        internal var _proLoader:fl.display.ProLoader;

        internal var _realLI:flash.display.LoaderInfo;

        internal var _realContentLI:flash.display.LoaderInfo;

        internal var _rslPreloaderLoaded:Boolean;

        internal var _numAdded:int;

        var _lcRequestedContentParentSet:Boolean;

        internal var _doneProgressStalling:Boolean;
    }
}


//    package events
//      class ColorPickerEvent
package fl.events 
{
    import flash.events.*;
    
    public class ColorPickerEvent extends flash.events.Event
    {
        public function ColorPickerEvent(arg1:String, arg2:uint)
        {
            super(arg1, true);
            _color = arg2;
            return;
        }

        public function get color():uint
        {
            return _color;
        }

        public override function toString():String
        {
            return formatToString("ColorPickerEvent", "type", "bubbles", "cancelable", "color");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.ColorPickerEvent(type, color);
        }

        public static const ITEM_ROLL_OUT:String="itemRollOut";

        public static const ITEM_ROLL_OVER:String="itemRollOver";

        public static const ENTER:String="enter";

        public static const CHANGE:String="change";

        protected var _color:uint;
    }
}


//      class ComponentEvent
package fl.events 
{
    import flash.events.*;
    
    public class ComponentEvent extends flash.events.Event
    {
        public function ComponentEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function toString():String
        {
            return formatToString("ComponentEvent", "type", "bubbles", "cancelable");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.ComponentEvent(type, bubbles, cancelable);
        }

        public static const BUTTON_DOWN:String="buttonDown";

        public static const LABEL_CHANGE:String="labelChange";

        public static const HIDE:String="hide";

        public static const SHOW:String="show";

        public static const RESIZE:String="resize";

        public static const MOVE:String="move";

        public static const ENTER:String="enter";
    }
}


//      class DataChangeEvent
package fl.events 
{
    import flash.events.*;
    
    public class DataChangeEvent extends flash.events.Event
    {
        public function DataChangeEvent(arg1:String, arg2:String, arg3:Array, arg4:int=-1, arg5:int=-1)
        {
            super(arg1);
            _changeType = arg2;
            _startIndex = arg4;
            _items = arg3;
            _endIndex = arg5 != -1 ? arg5 : _startIndex;
            return;
        }

        public function get changeType():String
        {
            return _changeType;
        }

        public function get items():Array
        {
            return _items;
        }

        public function get startIndex():uint
        {
            return _startIndex;
        }

        public function get endIndex():uint
        {
            return _endIndex;
        }

        public override function toString():String
        {
            return formatToString("DataChangeEvent", "type", "changeType", "startIndex", "endIndex", "bubbles", "cancelable");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.DataChangeEvent(type, _changeType, _items, _startIndex, _endIndex);
        }

        public static const DATA_CHANGE:String="dataChange";

        public static const PRE_DATA_CHANGE:String="preDataChange";

        protected var _startIndex:uint;

        protected var _endIndex:uint;

        protected var _changeType:String;

        protected var _items:Array;
    }
}


//      class DataChangeType
package fl.events 
{
    public class DataChangeType extends Object
    {
        public function DataChangeType()
        {
            super();
            return;
        }

        public static const CHANGE:String="change";

        public static const INVALIDATE:String="invalidate";

        public static const INVALIDATE_ALL:String="invalidateAll";

        public static const ADD:String="add";

        public static const REMOVE:String="remove";

        public static const REMOVE_ALL:String="removeAll";

        public static const REPLACE:String="replace";

        public static const SORT:String="sort";
    }
}


//      class DataGridEvent
package fl.events 
{
    import flash.events.*;
    
    public class DataGridEvent extends fl.events.ListEvent
    {
        public function DataGridEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false, arg4:int=-1, arg5:int=-1, arg6:Object=null, arg7:String=null, arg8:String=null)
        {
            super(arg1, arg2, arg3, arg4, arg5);
            _itemRenderer = arg6;
            _dataField = arg7;
            _reason = arg8;
            return;
        }

        public function get itemRenderer():Object
        {
            return _itemRenderer;
        }

        public function get dataField():String
        {
            return _dataField;
        }

        public function set dataField(arg1:String):void
        {
            _dataField = arg1;
            return;
        }

        public function get reason():String
        {
            return _reason;
        }

        public override function toString():String
        {
            return formatToString("DataGridEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "itemRenderer", "dataField", "reason");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.DataGridEvent(type, bubbles, cancelable, columnIndex, int(rowIndex), _itemRenderer, _dataField, _reason);
        }

        public static const COLUMN_STRETCH:String="columnStretch";

        public static const HEADER_RELEASE:String="headerRelease";

        public static const ITEM_EDIT_BEGINNING:String="itemEditBeginning";

        public static const ITEM_EDIT_BEGIN:String="itemEditBegin";

        public static const ITEM_EDIT_END:String="itemEditEnd";

        public static const ITEM_FOCUS_IN:String="itemFocusIn";

        public static const ITEM_FOCUS_OUT:String="itemFocusOut";

        protected var _dataField:String;

        protected var _itemRenderer:Object;

        protected var _reason:String;
    }
}


//      class DataGridEventReason
package fl.events 
{
    public final class DataGridEventReason extends Object
    {
        public function DataGridEventReason()
        {
            super();
            return;
        }

        public static const CANCELLED:String="cancelled";

        public static const OTHER:String="other";

        public static const NEW_COLUMN:String="newColumn";

        public static const NEW_ROW:String="newRow";
    }
}


//      class InteractionInputType
package fl.events 
{
    public class InteractionInputType extends Object
    {
        public function InteractionInputType()
        {
            super();
            return;
        }

        public static const MOUSE:String="mouse";

        public static const KEYBOARD:String="keyboard";
    }
}


//      class ListEvent
package fl.events 
{
    import flash.events.*;
    
    public class ListEvent extends flash.events.Event
    {
        public function ListEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false, arg4:int=-1, arg5:int=-1, arg6:int=-1, arg7:Object=null)
        {
            super(arg1, arg2, arg3);
            _rowIndex = arg5;
            _columnIndex = arg4;
            _index = arg6;
            _item = arg7;
            return;
        }

        public function get rowIndex():Object
        {
            return _rowIndex;
        }

        public function get columnIndex():int
        {
            return _columnIndex;
        }

        public function get index():int
        {
            return _index;
        }

        public function get item():Object
        {
            return _item;
        }

        public override function toString():String
        {
            return formatToString("ListEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "index", "item");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.ListEvent(type, bubbles, cancelable, _columnIndex, _rowIndex);
        }

        public static const ITEM_ROLL_OUT:String="itemRollOut";

        public static const ITEM_ROLL_OVER:String="itemRollOver";

        public static const ITEM_CLICK:String="itemClick";

        public static const ITEM_DOUBLE_CLICK:String="itemDoubleClick";

        protected var _rowIndex:int;

        protected var _columnIndex:int;

        protected var _index:int;

        protected var _item:Object;
    }
}


//      class ProLoaderRSLPreloaderSandboxEvent
package fl.events 
{
    import flash.display.*;
    import flash.events.*;
    
    public class ProLoaderRSLPreloaderSandboxEvent extends flash.events.Event
    {
        public function ProLoaderRSLPreloaderSandboxEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false, arg4:flash.display.LoaderInfo=null, arg5:flash.display.Shape=null)
        {
            super(arg1, arg2, arg3);
            this.loaderInfo = arg4;
            this.shape = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.ProLoaderRSLPreloaderSandboxEvent(type, bubbles, cancelable, this.loaderInfo, this.shape);
        }

        public override function toString():String
        {
            return formatToString("ProLoaderRSLPreloaderSandboxEvent", "type", "bubbles", "cancelable", "eventPhase", "loaderInfo", "shape");
        }

        public static const PROLOADER_RSLPRELOADER_SANDBOX:String="__proLoaderRSLPreloaderSandbox";

        public var loaderInfo:flash.display.LoaderInfo;

        public var shape:flash.display.Shape;
    }
}


//      class RSLErrorEvent
package fl.events 
{
    import flash.events.*;
    
    public class RSLErrorEvent extends flash.events.ErrorEvent
    {
        public function RSLErrorEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false, arg4:int=0, arg5:int=0, arg6:int=0, arg7:Array=null)
        {
            super(arg1, arg2, arg3);
            this._rslsLoaded = arg4;
            this._rslsFailed = arg5;
            this._rslsTotal = arg6;
            this._failedURLs = arg7;
            return;
        }

        public function get rslsLoaded():int
        {
            return this._rslsLoaded;
        }

        public function get rslsFailed():int
        {
            return this._rslsFailed;
        }

        public function get rslsTotal():int
        {
            return this._rslsTotal;
        }

        public function get failedURLs():Array
        {
            return this._failedURLs;
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.RSLErrorEvent(type, bubbles, cancelable, this.rslsLoaded, this.rslsFailed, this.rslsTotal, this.failedURLs);
        }

        public static const RSL_LOAD_FAILED:String="rslLoadFailed";

        internal var _rslsLoaded:int;

        internal var _rslsFailed:int;

        internal var _rslsTotal:int;

        internal var _failedURLs:Array;
    }
}


//      class RSLEvent
package fl.events 
{
    import flash.events.*;
    
    public class RSLEvent extends flash.events.Event
    {
        public function RSLEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false, arg4:int=0, arg5:int=0, arg6:int=0, arg7:int=0, arg8:int=0)
        {
            super(arg1, arg2, arg3);
            this._rslsLoaded = arg4;
            this._rslsFailed = arg5;
            this._rslsTotal = arg6;
            this._bytesLoaded = arg7;
            this._bytesTotal = arg8;
            return;
        }

        public function get rslsLoaded():int
        {
            return this._rslsLoaded;
        }

        public function get rslsFailed():int
        {
            return this._rslsFailed;
        }

        public function get rslsTotal():int
        {
            return this._rslsTotal;
        }

        public function get bytesLoaded():int
        {
            return this._bytesLoaded;
        }

        public function get bytesTotal():int
        {
            return this._bytesTotal;
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.RSLEvent(type, bubbles, cancelable, this.rslsLoaded, this.rslsFailed, this.rslsTotal, this.bytesLoaded, this.bytesTotal);
        }

        public static const RSL_LOAD_COMPLETE:String="rslLoadComplete";

        public static const RSL_PROGRESS:String="rslProgress";

        internal var _rslsLoaded:int;

        internal var _rslsFailed:int;

        internal var _rslsTotal:int;

        internal var _bytesLoaded:int;

        internal var _bytesTotal:int;
    }
}


//      class ScrollEvent
package fl.events 
{
    import flash.events.*;
    
    public class ScrollEvent extends flash.events.Event
    {
        public function ScrollEvent(arg1:String, arg2:Number, arg3:Number)
        {
            super(fl.events.ScrollEvent.SCROLL, false, false);
            _direction = arg1;
            _delta = arg2;
            _position = arg3;
            return;
        }

        public function get direction():String
        {
            return _direction;
        }

        public function get delta():Number
        {
            return _delta;
        }

        public function get position():Number
        {
            return _position;
        }

        public override function toString():String
        {
            return formatToString("ScrollEvent", "type", "bubbles", "cancelable", "direction", "delta", "position");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.ScrollEvent(_direction, _delta, _position);
        }

        public static const SCROLL:String="scroll";

        internal var _direction:String;

        internal var _delta:Number;

        internal var _position:Number;
    }
}


//      class SliderEvent
package fl.events 
{
    import flash.events.*;
    
    public class SliderEvent extends flash.events.Event
    {
        public function SliderEvent(arg1:String, arg2:Number, arg3:String, arg4:String, arg5:int=0)
        {
            _value = arg2;
            _keyCode = arg5;
            _triggerEvent = arg4;
            _clickTarget = arg3;
            super(arg1);
            return;
        }

        public function get value():Number
        {
            return _value;
        }

        public function get keyCode():Number
        {
            return _keyCode;
        }

        public function get triggerEvent():String
        {
            return _triggerEvent;
        }

        public function get clickTarget():String
        {
            return _clickTarget;
        }

        public override function toString():String
        {
            return formatToString("SliderEvent", "type", "value", "bubbles", "cancelable", "keyCode", "triggerEvent", "clickTarget");
        }

        public override function clone():flash.events.Event
        {
            return new fl.events.SliderEvent(type, _value, _clickTarget, _triggerEvent, _keyCode);
        }

        public static const CHANGE:String="change";

        public static const THUMB_DRAG:String="thumbDrag";

        public static const THUMB_PRESS:String="thumbPress";

        public static const THUMB_RELEASE:String="thumbRelease";

        protected var _triggerEvent:String;

        protected var _value:Number;

        protected var _keyCode:Number;

        protected var _clickTarget:String;
    }
}


//      class SliderEventClickTarget
package fl.events 
{
    public class SliderEventClickTarget extends Object
    {
        public function SliderEventClickTarget()
        {
            super();
            return;
        }

        public static const THUMB:String="thumb";

        public static const TRACK:String="track";
    }
}


//    package lang
//      class Locale
package fl.lang 
{
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    import flash.xml.*;
    
    public class Locale extends flash.events.EventDispatcher
    {
        public function Locale()
        {
            super();
            return;
        }

        public static function setString(arg1:String, arg2:String, arg3:String):void
        {
            var loc1:*;
            if (loc1 = stringMapList[arg2]) 
            {
                loc1[arg1] = arg3;
            }
            else 
            {
                (loc1 = new Object())[arg1] = arg3;
                stringMapList[arg2] = loc1;
            }
            return;
        }

        public static function initialize():void
        {
            var loc1:*=xmlLang;
            if (xmlMap[xmlLang] == undefined) 
            {
                loc1 = defaultLang;
            }
            currentXMLMapIndex = 0;
            loadXML(loc1);
            return;
        }

        public static function loadLanguageXML(arg1:String, arg2:Function=null):void
        {
            var loc1:*=arg1 != "" ? arg1 : flash.system.Capabilities.language;
            if (xmlMap[loc1] == undefined) 
            {
                loc1 = defaultLang;
            }
            if (arg2 != null) 
            {
                callback = arg2;
            }
            if (stringMapList[arg1] != undefined) 
            {
                stringMap = stringMapList[loc1];
                if (callback != null) 
                {
                    callback(true);
                }
            }
            else 
            {
                loadXML(loc1);
            }
            currentLang = loc1;
            return;
        }

        internal static function loadXML(arg1:String):*
        {
            var loc1:*=xmlMap[arg1][0];
            var loc2:*=new flash.net.URLLoader(new flash.net.URLRequest(loc1));
            loc2.addEventListener("complete", onXMLLoad);
            return;
        }

        public static function setDefaultLang(arg1:String):void
        {
            defaultLang = arg1;
            return;
        }

        internal static function onXMLLoad(arg1:flash.events.Event):*
        {
            _xmlLoaded = true;
            var loc1:*=arg1.target as flash.net.URLLoader;
            var loc2:*=loc1.data;
            xmlDoc = new flash.xml.XMLDocument();
            xmlDoc.ignoreWhite = true;
            xmlDoc.parseXML(loc2);
            stringMap = new Object();
            parseStringsXML(xmlDoc);
            if (stringMapList[currentLang] == undefined) 
            {
                stringMapList[currentLang] = stringMap;
            }
            if (autoReplacement) 
            {
                assignDelayedInstances();
            }
            if (callback != null) 
            {
                callback(true);
            }
            return;
        }

        internal static function parseStringsXML(arg1:flash.xml.XMLDocument):void
        {
            if (arg1.childNodes.length > 0 && arg1.childNodes[0].nodeName == "xliff") 
            {
                parseXLiff(arg1.childNodes[0]);
            }
            return;
        }

        internal static function parseXLiff(arg1:flash.xml.XMLNode):void
        {
            if (arg1.childNodes.length > 0 && arg1.childNodes[0].nodeName == "file") 
            {
                parseFile(arg1.childNodes[0]);
            }
            return;
        }

        internal static function parseFile(arg1:flash.xml.XMLNode):void
        {
            if (arg1.childNodes.length > 1 && arg1.childNodes[1].nodeName == "body") 
            {
                parseBody(arg1.childNodes[1]);
            }
            return;
        }

        internal static function parseTransUnit(arg1:flash.xml.XMLNode):void
        {
            var loc2:*=null;
            var loc1:*=arg1.attributes.resname;
            if (loc1.length > 0 && arg1.childNodes.length > 0 && arg1.childNodes[0].nodeName == "source") 
            {
                loc2 = parseSource(arg1.childNodes[0]);
                if (loc2.length > 0) 
                {
                    stringMap[loc1] = loc2;
                }
            }
            return;
        }

        internal static function parseSource(arg1:flash.xml.XMLNode):String
        {
            if (arg1.childNodes.length > 0) 
            {
                return arg1.childNodes[0].nodeValue;
            }
            return "";
        }

        internal static function assignDelayedInstances():void
        {
            var loc1:*=undefined;
            var loc2:*=undefined;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=false;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=delayedInstanceDict;
            for (loc1 in loc10) 
            {
                loc1.text = loadString(delayedInstanceDict[loc1]);
            }
            loc9 = 0;
            loc10 = delayedInstanceParentDict;
            for (loc1 in loc10) 
            {
                loc3 = flash.display.DisplayObjectContainer(loc1);
                loc4 = delayedInstanceParentDict[loc1];
                var loc11:*=0;
                var loc12:*=loc4;
                for (loc2 in loc12) 
                {
                    loc6 = String(loc2);
                    if ((loc7 = loc3.hasOwnProperty(loc6) ? loc3[loc6] as flash.display.DisplayObject : null) == null) 
                    {
                        loc7 = loc3.getChildByName(loc6);
                    }
                    if (loc7 == null) 
                    {
                        loc3.addEventListener(flash.events.Event.ADDED, addedListener);
                        continue;
                    }
                    loc8 = loc4[loc2];
                    if (loc7.hasOwnProperty("text")) 
                    {
                        loc7["text"] = loadString(loc8);
                    }
                    delete loc4[loc2];
                }
                loc5 = true;
                loc11 = 0;
                loc12 = loc4;
                for (loc2 in loc12) 
                {
                    loc5 = false;
                    break;
                }
                if (!loc5) 
                {
                    continue;
                }
                loc3.removeEventListener(flash.events.Event.ADDED, addedListener);
                delete delayedInstanceParentDict[loc1];
            }
            return;
        }

        internal static function addedListener(arg1:flash.events.Event):void
        {
            var loc6:*=undefined;
            var loc1:*=arg1.currentTarget as flash.display.DisplayObjectContainer;
            if (loc1 == null) 
            {
                return;
            }
            var loc2:*=arg1.target as flash.display.DisplayObject;
            if (loc2 == null || !(loc2.parent == loc1)) 
            {
                return;
            }
            var loc3:*;
            if ((loc3 = delayedInstanceParentDict[loc1]) == null) 
            {
                return;
            }
            var loc4:*;
            if ((loc4 = loc3[loc2.name]) == null) 
            {
                return;
            }
            if (loc2.hasOwnProperty("text")) 
            {
                loc2["text"] = loadString(loc4);
            }
            delete loc3[loc2.name];
            var loc5:*=true;
            var loc7:*=0;
            var loc8:*=loc3;
            for (loc6 in loc8) 
            {
                loc5 = false;
                break;
            }
            if (loc5) 
            {
                loc1.removeEventListener(flash.events.Event.ADDED, addedListener);
                delete delayedInstanceParentDict[loc6];
            }
            return;
        }

        
        {
            xmlLang = flash.system.Capabilities.language;
            xmlMap = new Object();
            stringMap = new Object();
            delayedInstanceDict = new flash.utils.Dictionary(true);
            delayedInstanceParentDict = new flash.utils.Dictionary(true);
            currentXMLMapIndex = -1;
            autoReplacement = true;
            stringMapList = new Object();
            _xmlLoaded = false;
        }

        public static function get autoReplace():Boolean
        {
            return autoReplacement;
        }

        public static function set autoReplace(arg1:Boolean):void
        {
            autoReplacement = arg1;
            return;
        }

        public static function get languageCodeArray():Array
        {
            var loc2:*=null;
            var loc1:*=new Array();
            var loc3:*=0;
            var loc4:*=xmlMap;
            for (loc2 in loc4) 
            {
                if (!loc2) 
                {
                    continue;
                }
                loc1.push(loc2);
            }
            return loc1;
        }

        public static function get stringIDArray():Array
        {
            var loc2:*=null;
            var loc1:*=new Array();
            var loc3:*=0;
            var loc4:*=stringMap;
            for (loc2 in loc4) 
            {
                if (loc2 == "") 
                {
                    continue;
                }
                loc1.push(loc2);
            }
            return loc1;
        }

        public static function setFlaName(arg1:String):void
        {
            flaName = arg1;
            return;
        }

        public static function getDefaultLang():String
        {
            return defaultLang;
        }

        internal static function parseBody(arg1:flash.xml.XMLNode):void
        {
            var loc1:*=0;
            while (loc1 < arg1.childNodes.length) 
            {
                if (arg1.childNodes[loc1].nodeName == "trans-unit") 
                {
                    parseTransUnit(arg1.childNodes[loc1]);
                }
                ++loc1;
            }
            return;
        }

        public static function addXMLPath(arg1:String, arg2:String):void
        {
            if (xmlMap[arg1] == undefined) 
            {
                xmlMap[arg1] = new Array();
            }
            xmlMap[arg1].push(arg2);
            return;
        }

        public static function addDelayedInstance(arg1:Object, arg2:String):*
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (arg1.hasOwnProperty("text")) 
            {
                delayedInstanceDict[arg1] = arg2;
            }
            else if (arg1.hasOwnProperty("parent") && arg1.parent is flash.display.DisplayObjectContainer && arg1.hasOwnProperty("instanceName")) 
            {
                loc1 = flash.display.DisplayObjectContainer(arg1.parent);
                if ((loc2 = loc1.hasOwnProperty(arg1.instanceName) ? loc1[arg1.instanceName] as flash.display.DisplayObject : null) == null) 
                {
                    loc2 = loc1.getChildByName(arg1.instanceName);
                }
                if (loc2 != null) 
                {
                    if (_xmlLoaded) 
                    {
                        if (loc2.hasOwnProperty("text")) 
                        {
                            loc2["text"] = loadString(arg2);
                        }
                    }
                    else 
                    {
                        delayedInstanceDict[loc2] = arg2;
                    }
                }
                else 
                {
                    if ((loc3 = delayedInstanceParentDict[loc1]) == null) 
                    {
                        var loc4:*;
                        delayedInstanceParentDict[loc1] = loc4 = new flash.utils.Dictionary(false);
                        loc3 = loc4;
                    }
                    loc3[arg1.instanceName] = arg2;
                    if (_xmlLoaded) 
                    {
                        loc1.addEventListener(flash.events.Event.ADDED, addedListener);
                    }
                }
            }
            return;
        }

        public static function checkXMLStatus():Boolean
        {
            return _xmlLoaded;
        }

        public static function setLoadCallback(arg1:Function):*
        {
            callback = arg1;
            return;
        }

        public static function loadString(arg1:String):String
        {
            return stringMap[arg1];
        }

        public static function loadStringEx(arg1:String, arg2:String):String
        {
            var loc1:*=stringMapList[arg2];
            if (loc1) 
            {
                return loc1[arg1];
            }
            return "";
        }

        internal static var flaName:String;

        internal static var defaultLang:String;

        internal static var xmlLang:String;

        internal static var xmlMap:Object;

        internal static var stringMap:Object;

        internal static var delayedInstanceDict:flash.utils.Dictionary;

        internal static var delayedInstanceParentDict:flash.utils.Dictionary;

        internal static var currentXMLMapIndex:Number=-1;

        internal static var callback:Function;

        internal static var autoReplacement:Boolean=true;

        internal static var currentLang:String;

        internal static var stringMapList:Object;

        internal static var _xmlLoaded:Boolean=false;

        internal static var xmlDoc:flash.xml.XMLDocument;
    }
}


//    package livepreview
//      class LivePreviewParent
package fl.livepreview 
{
    import flash.display.*;
    import flash.external.*;
    import flash.utils.*;
    
    public class LivePreviewParent extends flash.display.MovieClip
    {
        public function LivePreviewParent()
        {
            var loc1:*;
            super();
            try 
            {
                stage.align = flash.display.StageAlign.TOP_LEFT;
                stage.scaleMode = flash.display.StageScaleMode.NO_SCALE;
                this.myInstance = getChildAt(0);
                this.onResize(stage.width, stage.height);
                if (flash.external.ExternalInterface.available) 
                {
                    flash.external.ExternalInterface.addCallback("onResize", this.onResize);
                    flash.external.ExternalInterface.addCallback("onUpdate", this.onUpdate);
                }
            }
            catch (e:*)
            {
            };
            return;
        }

        public function onResize(arg1:Number, arg2:Number):void
        {
            var width:Number;
            var height:Number;
            var setSizeFn:Function;

            var loc1:*;
            width = arg1;
            height = arg2;
            setSizeFn = null;
            try 
            {
                setSizeFn = this.myInstance["setSize"];
            }
            catch (e:Error)
            {
                setSizeFn = null;
            }
            if (setSizeFn == null) 
            {
                this.myInstance.width = width;
                this.myInstance.height = height;
            }
            else 
            {
                setSizeFn(width, height);
            }
            return;
        }

        public function onUpdate(... rest):void
        {
            var updateArray:Array;
            var i:int;
            var name:String;
            var value:*;

            var loc1:*;
            name = null;
            value = undefined;
            updateArray = rest;
            i = 0;
            while (i + 1 < updateArray.length) 
            {
                try 
                {
                    name = String(updateArray[i]);
                    value = updateArray[i + 1];
                    if (typeof value == "object" && value.__treatAsCollectionSpecialSauce__) 
                    {
                        this.updateCollection(value, name);
                    }
                    else 
                    {
                        this.myInstance[name] = value;
                    }
                }
                catch (e:Error)
                {
                };
                i = i + 2;
            }
            return;
        }

        internal function updateCollection(arg1:Object, arg2:String):void
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=undefined;
            var loc1:*=Class(flash.utils.getDefinitionByName(arg1.collectionClass));
            var loc2:*=Class(flash.utils.getDefinitionByName(arg1.collectionItemClass));
            var loc3:*=new loc1();
            var loc4:*=0;
            while (loc4 < arg1.collectionArray.length) 
            {
                loc5 = new loc2();
                loc6 = arg1.collectionArray[loc4];
                var loc8:*=0;
                var loc9:*=loc6;
                for (loc7 in loc9) 
                {
                    loc5[loc7] = loc6[loc7];
                }
                loc3.addItem(loc5);
                ++loc4;
            }
            this.myInstance[arg2] = loc3 as loc1;
            return;
        }

        public var myInstance:flash.display.DisplayObject;
    }
}


//    package managers
//      class FocusManager
package fl.managers 
{
    import fl.controls.*;
    import fl.core.*;
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.ui.*;
    import flash.utils.*;
    
    public class FocusManager extends Object implements fl.managers.IFocusManager
    {
        public function FocusManager(arg1:flash.display.DisplayObjectContainer)
        {
            super();
            focusableObjects = new flash.utils.Dictionary(true);
            if (arg1 != null) 
            {
                _form = arg1;
                activate();
            }
            return;
        }

        public function get nextTabIndex():int
        {
            return 0;
        }

        public function get showFocusIndicator():Boolean
        {
            return _showFocusIndicator;
        }

        public function set showFocusIndicator(arg1:Boolean):void
        {
            _showFocusIndicator = arg1;
            return;
        }

        public function get form():flash.display.DisplayObjectContainer
        {
            return _form;
        }

        public function set form(arg1:flash.display.DisplayObjectContainer):void
        {
            _form = arg1;
            return;
        }

        public function getFocus():flash.display.InteractiveObject
        {
            var loc1:*=form.stage.focus;
            return findFocusManagerComponent(loc1);
        }

        internal function addFocusables(arg1:flash.display.DisplayObject, arg2:Boolean=false):void
        {
            var o:flash.display.DisplayObject;
            var skipTopLevel:Boolean=false;
            var focusable:fl.managers.IFocusManagerComponent;
            var io:flash.display.InteractiveObject;
            var doc:flash.display.DisplayObjectContainer;
            var docParent:flash.display.DisplayObjectContainer;
            var i:int;
            var child:flash.display.DisplayObject;

            var loc1:*;
            focusable = null;
            io = null;
            doc = null;
            docParent = null;
            i = 0;
            child = null;
            o = arg1;
            skipTopLevel = arg2;
            if (!skipTopLevel) 
            {
                if (o is fl.managers.IFocusManagerComponent) 
                {
                    focusable = fl.managers.IFocusManagerComponent(o);
                    if (focusable.focusEnabled) 
                    {
                        if (focusable.tabEnabled && isTabVisible(o)) 
                        {
                            focusableObjects[o] = true;
                            calculateCandidates = true;
                        }
                        o.addEventListener(flash.events.Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true);
                        o.addEventListener(flash.events.Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false, 0, true);
                    }
                }
                else if (o is flash.display.InteractiveObject) 
                {
                    io = o as flash.display.InteractiveObject;
                    if (io && io.tabEnabled && findFocusManagerComponent(io) == io) 
                    {
                        focusableObjects[io] = true;
                        calculateCandidates = true;
                    }
                    io.addEventListener(flash.events.Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true);
                    io.addEventListener(flash.events.Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false, 0, true);
                }
            }
            if (o is flash.display.DisplayObjectContainer) 
            {
                doc = flash.display.DisplayObjectContainer(o);
                o.addEventListener(flash.events.Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler, false, 0, true);
                docParent = null;
                try 
                {
                    docParent = doc.parent;
                }
                catch (se:SecurityError)
                {
                    docParent = null;
                }
                if (doc is flash.display.Stage || docParent is flash.display.Stage || doc.tabChildren) 
                {
                    i = 0;
                    while (i < doc.numChildren) 
                    {
                        try 
                        {
                            child = doc.getChildAt(i);
                            if (child != null) 
                            {
                                addFocusables(doc.getChildAt(i));
                            }
                        }
                        catch (error:SecurityError)
                        {
                        };
                        ++i;
                    }
                }
            }
            return;
        }

        public function setFocus(arg1:flash.display.InteractiveObject):void
        {
            if (arg1 is fl.managers.IFocusManagerComponent) 
            {
                fl.managers.IFocusManagerComponent(arg1).setFocus();
            }
            else 
            {
                form.stage.focus = arg1;
            }
            return;
        }

        public function showFocus():void
        {
            return;
        }

        public function hideFocus():void
        {
            return;
        }

        public function findFocusManagerComponent(arg1:flash.display.InteractiveObject):flash.display.InteractiveObject
        {
            var component:flash.display.InteractiveObject;
            var p:flash.display.InteractiveObject;

            var loc1:*;
            component = arg1;
            p = component;
            try 
            {
                while (component) 
                {
                    if (component is fl.managers.IFocusManagerComponent && fl.managers.IFocusManagerComponent(component).focusEnabled) 
                    {
                        return component;
                    }
                    component = component.parent;
                }
            }
            catch (se:SecurityError)
            {
            };
            return p;
        }

        internal function addedHandler(arg1:flash.events.Event):void
        {
            var loc1:*=flash.display.DisplayObject(arg1.target);
            if (loc1.stage) 
            {
                addFocusables(flash.display.DisplayObject(arg1.target));
            }
            return;
        }

        internal function removedHandler(arg1:flash.events.Event):void
        {
            var loc1:*=0;
            var loc3:*=null;
            var loc2:*=flash.display.DisplayObject(arg1.target);
            if (loc2 is fl.managers.IFocusManagerComponent && focusableObjects[loc2] == true) 
            {
                if (loc2 == lastFocus) 
                {
                    fl.managers.IFocusManagerComponent(lastFocus).drawFocus(false);
                    lastFocus = null;
                }
                loc2.removeEventListener(flash.events.Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false);
                delete focusableObjects[loc2];
                calculateCandidates = true;
            }
            else if (loc2 is flash.display.InteractiveObject && focusableObjects[loc2] == true) 
            {
                if (loc3 = loc2 as flash.display.InteractiveObject) 
                {
                    if (loc3 == lastFocus) 
                    {
                        lastFocus = null;
                    }
                    delete focusableObjects[loc3];
                    calculateCandidates = true;
                }
                loc2.addEventListener(flash.events.Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false, 0, true);
            }
            removeFocusables(loc2);
            return;
        }

        internal function getTopLevelFocusTarget(arg1:flash.display.InteractiveObject):flash.display.InteractiveObject
        {
            var o:flash.display.InteractiveObject;

            var loc1:*;
            o = arg1;
            try 
            {
                while (o != flash.display.InteractiveObject(form)) 
                {
                    if (o is fl.managers.IFocusManagerComponent && fl.managers.IFocusManagerComponent(o).focusEnabled && fl.managers.IFocusManagerComponent(o).mouseFocusEnabled && fl.core.UIComponent(o).enabled) 
                    {
                        return o;
                    }
                    o = o.parent;
                    if (o != null) 
                    {
                        continue;
                    }
                }
            }
            catch (se:SecurityError)
            {
            };
            return null;
        }

        internal function removeFocusables(arg1:flash.display.DisplayObject):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg1 is flash.display.DisplayObjectContainer) 
            {
                arg1.removeEventListener(flash.events.Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler, false);
                arg1.removeEventListener(flash.events.Event.TAB_INDEX_CHANGE, tabIndexChangeHandler, false);
                var loc3:*=0;
                var loc4:*=focusableObjects;
                for (loc1 in loc4) 
                {
                    loc2 = flash.display.DisplayObject(loc1);
                    if (!flash.display.DisplayObjectContainer(arg1).contains(loc2)) 
                    {
                        continue;
                    }
                    if (loc2 == lastFocus) 
                    {
                        lastFocus = null;
                    }
                    loc2.removeEventListener(flash.events.Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler, false);
                    delete focusableObjects[loc1];
                    calculateCandidates = true;
                }
            }
            return;
        }

        internal function isTabVisible(arg1:flash.display.DisplayObject):Boolean
        {
            var o:flash.display.DisplayObject;
            var p:flash.display.DisplayObjectContainer;

            var loc1:*;
            p = null;
            o = arg1;
            try 
            {
                p = o.parent;
                while (p && !(p is flash.display.Stage) && !(p.parent && p.parent is flash.display.Stage)) 
                {
                    if (!p.tabChildren) 
                    {
                        return false;
                    }
                    p = p.parent;
                }
            }
            catch (se:SecurityError)
            {
            };
            return true;
        }

        internal function isValidFocusCandidate(arg1:flash.display.DisplayObject, arg2:String):Boolean
        {
            var loc1:*=null;
            if (!isEnabledAndVisible(arg1)) 
            {
                return false;
            }
            if (arg1 is fl.managers.IFocusManagerGroup) 
            {
                loc1 = fl.managers.IFocusManagerGroup(arg1);
                if (arg2 == loc1.groupName) 
                {
                    return false;
                }
            }
            return true;
        }

        internal function isEnabledAndVisible(arg1:flash.display.DisplayObject):Boolean
        {
            var o:flash.display.DisplayObject;
            var formParent:flash.display.DisplayObjectContainer;
            var tf:flash.text.TextField;
            var sb:flash.display.SimpleButton;

            var loc1:*;
            formParent = null;
            tf = null;
            sb = null;
            o = arg1;
            try 
            {
                formParent = flash.display.DisplayObject(form).parent;
                while (o != formParent) 
                {
                    if (o is fl.core.UIComponent) 
                    {
                        if (!fl.core.UIComponent(o).enabled) 
                        {
                            return false;
                        }
                    }
                    else if (o is flash.text.TextField) 
                    {
                        tf = flash.text.TextField(o);
                        if (tf.type == flash.text.TextFieldType.DYNAMIC || !tf.selectable) 
                        {
                            return false;
                        }
                    }
                    else if (o is flash.display.SimpleButton) 
                    {
                        sb = flash.display.SimpleButton(o);
                        if (!sb.enabled) 
                        {
                            return false;
                        }
                    }
                    if (!o.visible) 
                    {
                        return false;
                    }
                    o = o.parent;
                }
            }
            catch (se:SecurityError)
            {
            };
            return true;
        }

        internal function tabEnabledChangeHandler(arg1:flash.events.Event):void
        {
            calculateCandidates = true;
            var loc1:*=flash.display.InteractiveObject(arg1.target);
            var loc2:*=focusableObjects[loc1] == true;
            if (loc1.tabEnabled) 
            {
                if (!loc2 && isTabVisible(loc1)) 
                {
                    if (!(loc1 is fl.managers.IFocusManagerComponent)) 
                    {
                        loc1.focusRect = false;
                    }
                    focusableObjects[loc1] = true;
                }
            }
            else if (loc2) 
            {
                delete focusableObjects[loc1];
            }
            return;
        }

        internal function tabIndexChangeHandler(arg1:flash.events.Event):void
        {
            calculateCandidates = true;
            return;
        }

        internal function tabChildrenChangeHandler(arg1:flash.events.Event):void
        {
            if (arg1.target != arg1.currentTarget) 
            {
                return;
            }
            calculateCandidates = true;
            var loc1:*=flash.display.DisplayObjectContainer(arg1.target);
            if (loc1.tabChildren) 
            {
                addFocusables(loc1, true);
            }
            else 
            {
                removeFocusables(loc1);
            }
            return;
        }

        public function activate():void
        {
            var loc1:*;
            if (activated) 
            {
                return;
            }
            addFocusables(form);
            form.addEventListener(flash.events.Event.ADDED, addedHandler, false, 0, true);
            form.addEventListener(flash.events.Event.REMOVED, removedHandler, false, 0, true);
            try 
            {
                form.stage.addEventListener(flash.events.FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
                form.stage.addEventListener(flash.events.FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
                form.stage.addEventListener(flash.events.Event.ACTIVATE, activateHandler, false, 0, true);
                form.stage.addEventListener(flash.events.Event.DEACTIVATE, deactivateHandler, false, 0, true);
            }
            catch (se:SecurityError)
            {
                form.addEventListener(flash.events.FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
                form.addEventListener(flash.events.FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
                form.addEventListener(flash.events.Event.ACTIVATE, activateHandler, false, 0, true);
                form.addEventListener(flash.events.Event.DEACTIVATE, deactivateHandler, false, 0, true);
            }
            form.addEventListener(flash.events.FocusEvent.FOCUS_IN, focusInHandler, true, 0, true);
            form.addEventListener(flash.events.FocusEvent.FOCUS_OUT, focusOutHandler, true, 0, true);
            form.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
            form.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, keyDownHandler, true, 0, true);
            activated = true;
            if (lastFocus) 
            {
                setFocus(lastFocus);
            }
            return;
        }

        public function deactivate():void
        {
            var loc1:*;
            if (!activated) 
            {
                return;
            }
            focusableObjects = new flash.utils.Dictionary(true);
            focusableCandidates = null;
            lastFocus = null;
            defButton = null;
            form.removeEventListener(flash.events.Event.ADDED, addedHandler, false);
            form.removeEventListener(flash.events.Event.REMOVED, removedHandler, false);
            try 
            {
                form.stage.removeEventListener(flash.events.FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false);
                form.stage.removeEventListener(flash.events.FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false);
                form.stage.removeEventListener(flash.events.Event.ACTIVATE, activateHandler, false);
                form.stage.removeEventListener(flash.events.Event.DEACTIVATE, deactivateHandler, false);
            }
            catch (se:SecurityError)
            {
            };
            form.removeEventListener(flash.events.FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false);
            form.removeEventListener(flash.events.FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false);
            form.removeEventListener(flash.events.Event.ACTIVATE, activateHandler, false);
            form.removeEventListener(flash.events.Event.DEACTIVATE, deactivateHandler, false);
            form.removeEventListener(flash.events.FocusEvent.FOCUS_IN, focusInHandler, true);
            form.removeEventListener(flash.events.FocusEvent.FOCUS_OUT, focusOutHandler, true);
            form.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, mouseDownHandler, false);
            form.removeEventListener(flash.events.KeyboardEvent.KEY_DOWN, keyDownHandler, true);
            activated = false;
            return;
        }

        internal function focusInHandler(arg1:flash.events.FocusEvent):void
        {
            var loc2:*=null;
            if (!activated) 
            {
                return;
            }
            var loc1:*=flash.display.InteractiveObject(arg1.target);
            if (form.contains(loc1)) 
            {
                lastFocus = findFocusManagerComponent(flash.display.InteractiveObject(loc1));
                if (lastFocus is fl.controls.Button) 
                {
                    loc2 = fl.controls.Button(lastFocus);
                    if (defButton) 
                    {
                        defButton.emphasized = false;
                        defButton = loc2;
                        loc2.emphasized = true;
                    }
                }
                else if (defButton && !(defButton == _defaultButton)) 
                {
                    defButton.emphasized = false;
                    defButton = _defaultButton;
                    _defaultButton.emphasized = true;
                }
            }
            return;
        }

        internal function focusOutHandler(arg1:flash.events.FocusEvent):void
        {
            if (!activated) 
            {
                return;
            }
            var loc1:*=arg1.target as flash.display.InteractiveObject;
            return;
        }

        internal function activateHandler(arg1:flash.events.Event):void
        {
            if (!activated) 
            {
                return;
            }
            var loc1:*=flash.display.InteractiveObject(arg1.target);
            if (lastFocus) 
            {
                if (lastFocus is fl.managers.IFocusManagerComponent) 
                {
                    fl.managers.IFocusManagerComponent(lastFocus).setFocus();
                }
                else 
                {
                    form.stage.focus = lastFocus;
                }
            }
            lastAction = "ACTIVATE";
            return;
        }

        internal function deactivateHandler(arg1:flash.events.Event):void
        {
            if (!activated) 
            {
                return;
            }
            var loc1:*=flash.display.InteractiveObject(arg1.target);
            return;
        }

        internal function mouseFocusChangeHandler(arg1:flash.events.FocusEvent):void
        {
            if (!activated) 
            {
                return;
            }
            if (arg1.relatedObject is flash.text.TextField) 
            {
                return;
            }
            arg1.preventDefault();
            return;
        }

        internal function keyFocusChangeHandler(arg1:flash.events.FocusEvent):void
        {
            if (!activated) 
            {
                return;
            }
            showFocusIndicator = true;
            if ((arg1.keyCode == flash.ui.Keyboard.TAB || arg1.keyCode == 0) && !arg1.isDefaultPrevented()) 
            {
                setFocusToNextObject(arg1);
                arg1.preventDefault();
            }
            return;
        }

        internal function keyDownHandler(arg1:flash.events.KeyboardEvent):void
        {
            if (!activated) 
            {
                return;
            }
            if (arg1.keyCode == flash.ui.Keyboard.TAB) 
            {
                lastAction = "KEY";
                if (calculateCandidates) 
                {
                    sortFocusableObjects();
                    calculateCandidates = false;
                }
            }
            if (defaultButtonEnabled && arg1.keyCode == flash.ui.Keyboard.ENTER && defaultButton && defButton.enabled) 
            {
                sendDefaultButtonEvent();
            }
            return;
        }

        internal function mouseDownHandler(arg1:flash.events.MouseEvent):void
        {
            if (!activated) 
            {
                return;
            }
            if (arg1.isDefaultPrevented()) 
            {
                return;
            }
            var loc1:*=getTopLevelFocusTarget(flash.display.InteractiveObject(arg1.target));
            if (!loc1) 
            {
                return;
            }
            showFocusIndicator = false;
            if ((!(loc1 == lastFocus) || lastAction == "ACTIVATE") && !(loc1 is flash.text.TextField)) 
            {
                setFocus(loc1);
            }
            lastAction = "MOUSEDOWN";
            return;
        }

        public function get defaultButton():fl.controls.Button
        {
            return _defaultButton;
        }

        public function set defaultButton(arg1:fl.controls.Button):void
        {
            var loc1:*=arg1 ? fl.controls.Button(arg1) : null;
            if (loc1 != _defaultButton) 
            {
                if (_defaultButton) 
                {
                    _defaultButton.emphasized = false;
                }
                if (defButton) 
                {
                    defButton.emphasized = false;
                }
                _defaultButton = loc1;
                defButton = loc1;
                if (loc1) 
                {
                    loc1.emphasized = true;
                }
            }
            return;
        }

        public function sendDefaultButtonEvent():void
        {
            defButton.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.CLICK));
            return;
        }

        internal function setFocusToNextObject(arg1:flash.events.FocusEvent):void
        {
            if (!hasFocusableObjects()) 
            {
                return;
            }
            var loc1:*=getNextFocusManagerComponent(arg1.shiftKey);
            if (loc1) 
            {
                setFocus(loc1);
            }
            return;
        }

        internal function hasFocusableObjects():Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=focusableObjects;
            for (loc1 in loc3) 
            {
                return true;
            }
            return false;
        }

        public function getNextFocusManagerComponent(arg1:Boolean=false):flash.display.InteractiveObject
        {
            var loc7:*=null;
            if (!hasFocusableObjects()) 
            {
                return null;
            }
            if (calculateCandidates) 
            {
                sortFocusableObjects();
                calculateCandidates = false;
            }
            var loc1:*=form.stage.focus;
            loc1 = flash.display.DisplayObject(findFocusManagerComponent(flash.display.InteractiveObject(loc1)));
            var loc2:*="";
            if (loc1 is fl.managers.IFocusManagerGroup) 
            {
                loc2 = (loc7 = fl.managers.IFocusManagerGroup(loc1)).groupName;
            }
            var loc3:*=getIndexOfFocusedObject(loc1);
            var loc4:*=false;
            var loc5:*=loc3;
            if (loc3 == -1) 
            {
                if (arg1) 
                {
                    loc3 = focusableCandidates.length;
                }
                loc4 = true;
            }
            var loc6:*=getIndexOfNextObject(loc3, arg1, loc4, loc2);
            return findFocusManagerComponent(focusableCandidates[loc6]);
        }

        internal function getIndexOfFocusedObject(arg1:flash.display.DisplayObject):int
        {
            var loc1:*=focusableCandidates.length;
            var loc2:*=0;
            loc2 = 0;
            while (loc2 < loc1) 
            {
                if (focusableCandidates[loc2] == arg1) 
                {
                    return loc2;
                }
                ++loc2;
            }
            return -1;
        }

        internal function getIndexOfNextObject(arg1:int, arg2:Boolean, arg3:Boolean, arg4:String):int
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=null;
            var loc7:*=null;
            var loc1:*=focusableCandidates.length;
            var loc2:*=arg1;
            for (;;) 
            {
                if (arg2) 
                {
                    --arg1;
                }
                else 
                {
                    ++arg1;
                }
                if (arg3) 
                {
                    if (arg2 && arg1 < 0) 
                    {
                        break;
                    }
                    if (!arg2 && arg1 == loc1) 
                    {
                        break;
                    }
                }
                else 
                {
                    arg1 = (arg1 + loc1) % loc1;
                    if (loc2 == arg1) 
                    {
                        break;
                    }
                }
                if (!isValidFocusCandidate(focusableCandidates[arg1], arg4)) 
                {
                    continue;
                }
                if ((loc3 = flash.display.DisplayObject(findFocusManagerComponent(focusableCandidates[arg1]))) is fl.managers.IFocusManagerGroup) 
                {
                    loc4 = fl.managers.IFocusManagerGroup(loc3);
                    loc5 = 0;
                    while (loc5 < focusableCandidates.length) 
                    {
                        if ((loc6 = focusableCandidates[loc5]) is fl.managers.IFocusManagerGroup) 
                        {
                            if ((loc7 = fl.managers.IFocusManagerGroup(loc6)).groupName == loc4.groupName && loc7.selected) 
                            {
                                arg1 = loc5;
                            }
                        }
                        ++loc5;
                    }
                }
                return arg1;
            }
            return arg1;
        }

        internal function sortFocusableObjects():void
        {
            var loc1:*=null;
            var loc2:*=null;
            focusableCandidates = [];
            var loc3:*=0;
            var loc4:*=focusableObjects;
            for (loc1 in loc4) 
            {
                loc2 = flash.display.InteractiveObject(loc1);
                if (loc2.tabIndex && !isNaN(Number(loc2.tabIndex)) && loc2.tabIndex > 0) 
                {
                    sortFocusableObjectsTabIndex();
                    return;
                }
                focusableCandidates.push(loc2);
            }
            focusableCandidates.sort(sortByDepth);
            return;
        }

        internal function sortFocusableObjectsTabIndex():void
        {
            var loc1:*=null;
            var loc2:*=null;
            focusableCandidates = [];
            var loc3:*=0;
            var loc4:*=focusableObjects;
            for (loc1 in loc4) 
            {
                loc2 = flash.display.InteractiveObject(loc1);
                if (!(loc2.tabIndex && !isNaN(Number(loc2.tabIndex)))) 
                {
                    continue;
                }
                focusableCandidates.push(loc2);
            }
            focusableCandidates.sort(sortByTabIndex);
            return;
        }

        internal function sortByDepth(arg1:flash.display.InteractiveObject, arg2:flash.display.InteractiveObject):Number
        {
            var aa:flash.display.InteractiveObject;
            var bb:flash.display.InteractiveObject;
            var val1:String;
            var val2:String;
            var index:int;
            var tmp:String;
            var tmp2:String;
            var zeros:String;
            var a:flash.display.DisplayObject;
            var b:flash.display.DisplayObject;

            var loc1:*;
            index = 0;
            tmp = null;
            tmp2 = null;
            aa = arg1;
            bb = arg2;
            val1 = "";
            val2 = "";
            zeros = "0000";
            a = flash.display.DisplayObject(aa);
            b = flash.display.DisplayObject(bb);
            try 
            {
                while (!(a == flash.display.DisplayObject(form)) && a.parent) 
                {
                    index = getChildIndex(a.parent, a);
                    tmp = index.toString(16);
                    if (tmp.length < 4) 
                    {
                        tmp2 = zeros.substring(0, 4 - tmp.length) + tmp;
                    }
                    val1 = tmp2 + val1;
                    a = a.parent;
                }
            }
            catch (se1:SecurityError)
            {
            };
            try 
            {
                while (!(b == flash.display.DisplayObject(form)) && b.parent) 
                {
                    index = getChildIndex(b.parent, b);
                    tmp = index.toString(16);
                    if (tmp.length < 4) 
                    {
                        tmp2 = zeros.substring(0, 4 - tmp.length) + tmp;
                    }
                    val2 = tmp2 + val2;
                    b = b.parent;
                }
            }
            catch (se2:SecurityError)
            {
            };
            return val1 > val2 ? 1 : val1 < val2 ? -1 : 0;
        }

        internal function getChildIndex(arg1:flash.display.DisplayObjectContainer, arg2:flash.display.DisplayObject):int
        {
            return arg1.getChildIndex(arg2);
        }

        internal function sortByTabIndex(arg1:flash.display.InteractiveObject, arg2:flash.display.InteractiveObject):int
        {
            return arg1.tabIndex > arg2.tabIndex ? 1 : arg1.tabIndex < arg2.tabIndex ? -1 : sortByDepth(arg1, arg2);
        }

        public function get defaultButtonEnabled():Boolean
        {
            return _defaultButtonEnabled;
        }

        public function set defaultButtonEnabled(arg1:Boolean):void
        {
            _defaultButtonEnabled = arg1;
            return;
        }

        internal var _form:flash.display.DisplayObjectContainer;

        internal var focusableObjects:flash.utils.Dictionary;

        internal var focusableCandidates:Array;

        internal var activated:Boolean=false;

        internal var calculateCandidates:Boolean=true;

        internal var lastFocus:flash.display.InteractiveObject;

        internal var lastAction:String;

        internal var defButton:fl.controls.Button;

        internal var _defaultButton:fl.controls.Button;

        internal var _defaultButtonEnabled:Boolean=true;

        internal var _showFocusIndicator:Boolean=true;
    }
}


//      class IFocusManager
package fl.managers 
{
    import fl.controls.*;
    import flash.display.*;
    
    public interface IFocusManager
    {
        function get defaultButton():fl.controls.Button;

        function set defaultButton(arg1:fl.controls.Button):void;

        function get defaultButtonEnabled():Boolean;

        function set defaultButtonEnabled(arg1:Boolean):void;

        function get nextTabIndex():int;

        function get showFocusIndicator():Boolean;

        function set showFocusIndicator(arg1:Boolean):void;

        function getFocus():flash.display.InteractiveObject;

        function setFocus(arg1:flash.display.InteractiveObject):void;

        function showFocus():void;

        function hideFocus():void;

        function activate():void;

        function deactivate():void;

        function findFocusManagerComponent(arg1:flash.display.InteractiveObject):flash.display.InteractiveObject;

        function getNextFocusManagerComponent(arg1:Boolean=false):flash.display.InteractiveObject;

        function get form():flash.display.DisplayObjectContainer;

        function set form(arg1:flash.display.DisplayObjectContainer):void;
    }
}


//      class IFocusManagerComponent
package fl.managers 
{
    public interface IFocusManagerComponent
    {
        function get focusEnabled():Boolean;

        function set focusEnabled(arg1:Boolean):void;

        function get mouseFocusEnabled():Boolean;

        function get tabEnabled():Boolean;

        function get tabIndex():int;

        function setFocus():void;

        function drawFocus(arg1:Boolean):void;
    }
}


//      class IFocusManagerGroup
package fl.managers 
{
    public interface IFocusManagerGroup
    {
        function get groupName():String;

        function set groupName(arg1:String):void;

        function get selected():Boolean;

        function set selected(arg1:Boolean):void;
    }
}


//      class StyleManager
package fl.managers 
{
    import fl.core.*;
    import flash.text.*;
    import flash.utils.*;
    
    public class StyleManager extends Object
    {
        public function StyleManager()
        {
            super();
            styleToClassesHash = {};
            classToInstancesDict = new flash.utils.Dictionary(true);
            classToStylesDict = new flash.utils.Dictionary(true);
            classToDefaultStylesDict = new flash.utils.Dictionary(true);
            globalStyles = fl.core.UIComponent.getStyleDefinition();
            return;
        }

        internal static function getInstance():*
        {
            if (_instance == null) 
            {
                _instance = new StyleManager();
            }
            return _instance;
        }

        public static function registerInstance(arg1:fl.core.UIComponent):void
        {
            var instance:fl.core.UIComponent;
            var inst:fl.managers.StyleManager;
            var classDef:Class;
            var target:Class;
            var defaultStyles:Object;
            var styleToClasses:Object;
            var n:String;

            var loc1:*;
            target = null;
            defaultStyles = null;
            styleToClasses = null;
            n = null;
            instance = arg1;
            inst = getInstance();
            classDef = getClassDef(instance);
            if (classDef == null) 
            {
                return;
            }
            if (inst.classToInstancesDict[classDef] == null) 
            {
                inst.classToInstancesDict[classDef] = new flash.utils.Dictionary(true);
                target = classDef;
                while (defaultStyles == null) 
                {
                    if (target["getStyleDefinition"] != null) 
                    {
                        var loc2:*;
                        defaultStyles = (loc2 = target)["getStyleDefinition"]();
                        break;
                    }
                }
                styleToClasses = inst.styleToClassesHash;
                loc2 = 0;
                var loc3:*=defaultStyles;
                for (n in loc3) 
                {
                    if (styleToClasses[n] == null) 
                    {
                        styleToClasses[n] = new flash.utils.Dictionary(true);
                    }
                    styleToClasses[n][classDef] = true;
                }
                inst.classToDefaultStylesDict[classDef] = defaultStyles;
                if (inst.classToStylesDict[classDef] == null) 
                {
                    inst.classToStylesDict[classDef] = {};
                }
            }
            inst.classToInstancesDict[classDef][instance] = true;
            setSharedStyles(instance);
            return;
        }

        internal static function setSharedStyles(arg1:fl.core.UIComponent):void
        {
            var loc4:*=null;
            var loc1:*=getInstance();
            var loc2:*=getClassDef(arg1);
            var loc3:*=loc1.classToDefaultStylesDict[loc2];
            var loc5:*=0;
            var loc6:*=loc3;
            for (loc4 in loc6) 
            {
                arg1.setSharedStyle(loc4, getSharedStyle(arg1, loc4));
            }
            return;
        }

        internal static function getSharedStyle(arg1:fl.core.UIComponent, arg2:String):Object
        {
            var loc1:*=getClassDef(arg1);
            var loc2:*;
            var loc3:*;
            if ((loc3 = (loc2 = getInstance()).classToStylesDict[loc1][arg2]) != null) 
            {
                return loc3;
            }
            if ((loc3 = loc2.globalStyles[arg2]) != null) 
            {
                return loc3;
            }
            return loc2.classToDefaultStylesDict[loc1][arg2];
        }

        public static function getComponentStyle(arg1:Object, arg2:String):Object
        {
            var loc1:*=getClassDef(arg1);
            var loc2:*;
            return (loc2 = getInstance().classToStylesDict[loc1]) != null ? loc2[arg2] : null;
        }

        public static function clearComponentStyle(arg1:Object, arg2:String):void
        {
            var loc1:*=getClassDef(arg1);
            var loc2:*;
            if (!((loc2 = getInstance().classToStylesDict[loc1]) == null) && !(loc2[arg2] == null)) 
            {
                delete loc2[arg2];
                invalidateComponentStyle(loc1, arg2);
            }
            return;
        }

        public static function setComponentStyle(arg1:Object, arg2:String, arg3:Object):void
        {
            var loc1:*=getClassDef(arg1);
            var loc2:*;
            if ((loc2 = getInstance().classToStylesDict[loc1]) == null) 
            {
                var loc3:*;
                getInstance().classToStylesDict[loc1] = loc3 = {};
                loc2 = loc3;
            }
            if (loc2 == arg3) 
            {
                return;
            }
            loc2[arg2] = arg3;
            invalidateComponentStyle(loc1, arg2);
            return;
        }

        internal static function getClassDef(arg1:Object):Class
        {
            var component:Object;

            var loc1:*;
            component = arg1;
            if (component is Class) 
            {
                return component as Class;
            }
            try 
            {
                return flash.utils.getDefinitionByName(flash.utils.getQualifiedClassName(component)) as Class;
            }
            catch (e:Error)
            {
                if (component is fl.core.UIComponent) 
                {
                    try 
                    {
                        return component.loaderInfo.applicationDomain.getDefinition(flash.utils.getQualifiedClassName(component)) as Class;
                    }
                    catch (e:Error)
                    {
                    };
                }
            }
            return null;
        }

        internal static function invalidateStyle(arg1:String):void
        {
            var loc2:*=null;
            var loc1:*=getInstance().styleToClassesHash[arg1];
            if (loc1 == null) 
            {
                return;
            }
            var loc3:*=0;
            var loc4:*=loc1;
            for (loc2 in loc4) 
            {
                invalidateComponentStyle(Class(loc2), arg1);
            }
            return;
        }

        internal static function invalidateComponentStyle(arg1:Class, arg2:String):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=getInstance().classToInstancesDict[arg1];
            if (loc1 == null) 
            {
                return;
            }
            var loc4:*=0;
            var loc5:*=loc1;
            for (loc2 in loc5) 
            {
                if ((loc3 = loc2 as fl.core.UIComponent) == null) 
                {
                    continue;
                }
                loc3.setSharedStyle(arg2, getSharedStyle(loc3, arg2));
            }
            return;
        }

        public static function setStyle(arg1:String, arg2:Object):void
        {
            var loc1:*=getInstance().globalStyles;
            if (loc1[arg1] === arg2 && !(arg2 is flash.text.TextFormat)) 
            {
                return;
            }
            loc1[arg1] = arg2;
            invalidateStyle(arg1);
            return;
        }

        public static function clearStyle(arg1:String):void
        {
            setStyle(arg1, null);
            return;
        }

        public static function getStyle(arg1:String):Object
        {
            return getInstance().globalStyles[arg1];
        }

        internal var styleToClassesHash:Object;

        internal var classToInstancesDict:flash.utils.Dictionary;

        internal var classToStylesDict:flash.utils.Dictionary;

        internal var classToDefaultStylesDict:flash.utils.Dictionary;

        internal var globalStyles:Object;

        internal static var _instance:fl.managers.StyleManager;
    }
}


//    package motion
//      package easing
//        class Back
package fl.motion.easing 
{
    public class Back extends Object
    {
        public function Back()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0):Number
        {
            if (!arg5) 
            {
                arg5 = 1.70158;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * ((arg5 + 1) * arg1 - arg5) + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0):Number
        {
            if (!arg5) 
            {
                arg5 = 1.70158;
            }
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * ((arg5 + 1) * arg1 + arg5) + 1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0):Number
        {
            if (!arg5) 
            {
                arg5 = 1.70158;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                arg5 = loc1 = arg5 * 1.525;
                return arg3 / 2 * arg1 * arg1 * ((loc1 + 1) * arg1 - arg5) + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            arg5 = loc1 = arg5 * 1.525;
            return arg3 / 2 * (loc1 * arg1 * ((loc1 + 1) * arg1 + arg5) + 2) + arg2;
        }
    }
}


//        class Bounce
package fl.motion.easing 
{
    public class Bounce extends Object
    {
        public function Bounce()
        {
            super();
            return;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            if (loc1 < 1 / 2.75) 
            {
                return arg3 * 7.5625 * arg1 * arg1 + arg2;
            }
            if (arg1 < 2 / 2.75) 
            {
                arg1 = loc1 = arg1 - 1.5 / 2.75;
                return arg3 * (7.5625 * loc1 * arg1 + 0.75) + arg2;
            }
            if (arg1 < 2.5 / 2.75) 
            {
                arg1 = loc1 = arg1 - 2.25 / 2.75;
                return arg3 * (7.5625 * loc1 * arg1 + 0.9375) + arg2;
            }
            arg1 = loc1 = arg1 - 2.625 / 2.75;
            return arg3 * (7.5625 * loc1 * arg1 + 0.984375) + arg2;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 - easeOut(arg4 - arg1, 0, arg3, arg4) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeIn(arg1 * 2, 0, arg3, arg4) * 0.5 + arg2;
            }
            return easeOut(arg1 * 2 - arg4, 0, arg3, arg4) * 0.5 + arg3 * 0.5 + arg2;
        }
    }
}


//        class Circular
package fl.motion.easing 
{
    public class Circular extends Object
    {
        public function Circular()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return (-arg3) * (Math.sqrt(1 - loc1 * arg1) - 1) + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * Math.sqrt(1 - loc1 * arg1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return (-arg3) / 2 * (Math.sqrt(1 - arg1 * arg1) - 1) + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (Math.sqrt(1 - loc1 * arg1) + 1) + arg2;
        }
    }
}


//        class Cubic
package fl.motion.easing 
{
    public class Cubic extends Object
    {
        public function Cubic()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * arg1 + 1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (loc1 * arg1 * arg1 + 2) + arg2;
        }
    }
}


//        class Elastic
package fl.motion.easing 
{
    public class Elastic extends Object
    {
        public function Elastic()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0, arg6:Number=0):Number
        {
            var loc1:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc2:*;
            arg1 = loc2 = arg1 / arg4;
            if (loc2 == 1) 
            {
                return arg2 + arg3;
            }
            if (!arg6) 
            {
                arg6 = arg4 * 0.3;
            }
            if (!arg5 || arg5 < Math.abs(arg3)) 
            {
                arg5 = arg3;
                loc1 = arg6 / 4;
            }
            else 
            {
                loc1 = arg6 / (2 * Math.PI) * Math.asin(arg3 / arg5);
            }
            --arg1;
            return -arg5 * Math.pow(2, 10 * loc2) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0, arg6:Number=0):Number
        {
            var loc1:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc2:*;
            arg1 = loc2 = arg1 / arg4;
            if (loc2 == 1) 
            {
                return arg2 + arg3;
            }
            if (!arg6) 
            {
                arg6 = arg4 * 0.3;
            }
            if (!arg5 || arg5 < Math.abs(arg3)) 
            {
                arg5 = arg3;
                loc1 = arg6 / 4;
            }
            else 
            {
                loc1 = arg6 / (2 * Math.PI) * Math.asin(arg3 / arg5);
            }
            return arg5 * Math.pow(2, -10 * arg1) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) + arg3 + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0, arg6:Number=0):Number
        {
            var loc1:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc2:*;
            arg1 = loc2 = arg1 / (arg4 / 2);
            if (loc2 == 2) 
            {
                return arg2 + arg3;
            }
            if (!arg6) 
            {
                arg6 = arg4 * 0.3 * 1.5;
            }
            if (!arg5 || arg5 < Math.abs(arg3)) 
            {
                arg5 = arg3;
                loc1 = arg6 / 4;
            }
            else 
            {
                loc1 = arg6 / (2 * Math.PI) * Math.asin(arg3 / arg5);
            }
            if (arg1 < 1) 
            {
                --arg1;
                return -0.5 * arg5 * Math.pow(2, 10 * loc2) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) + arg2;
            }
            --arg1;
            return arg5 * Math.pow(2, -10 * loc2) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) * 0.5 + arg3 + arg2;
        }
    }
}


//        class Exponential
package fl.motion.easing 
{
    public class Exponential extends Object
    {
        public function Exponential()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg1 != 0 ? arg3 * Math.pow(2, 10 * (arg1 / arg4 - 1)) + arg2 : arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg1 != arg4 ? arg3 * (-Math.pow(2, -10 * arg1 / arg4) + 1) + arg2 : arg2 + arg3;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg1 == 0) 
            {
                return arg2;
            }
            if (arg1 == arg4) 
            {
                return arg2 + arg3;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * Math.pow(2, 10 * (arg1 - 1)) + arg2;
            }
            return arg3 / 2 * (-Math.pow(2, -10 * --arg1) + 2) + arg2;
        }
    }
}


//        class Linear
package fl.motion.easing 
{
    public class Linear extends Object
    {
        public function Linear()
        {
            super();
            return;
        }

        public static function easeNone(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }
    }
}


//        class Quadratic
package fl.motion.easing 
{
    public class Quadratic extends Object
    {
        public function Quadratic()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return (-arg3) * loc1 * (arg1 - 2) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 + arg2;
            }
            return (-arg3) / 2 * (--arg1 * (arg1 - 2) - 1) + arg2;
        }
    }
}


//        class Quartic
package fl.motion.easing 
{
    public class Quartic extends Object
    {
        public function Quartic()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 * arg1 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return (-arg3) * (loc1 * arg1 * arg1 * arg1 - 1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return (-arg3) / 2 * (loc1 * arg1 * arg1 * arg1 - 2) + arg2;
        }
    }
}


//        class Quintic
package fl.motion.easing 
{
    public class Quintic extends Object
    {
        public function Quintic()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 * arg1 * arg1 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * arg1 * arg1 * arg1 + 1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (loc1 * arg1 * arg1 * arg1 * arg1 + 2) + arg2;
        }
    }
}


//        class Sine
package fl.motion.easing 
{
    public class Sine extends Object
    {
        public function Sine()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return (-arg3) * Math.cos(arg1 / arg4 * Math.PI / 2) + arg3 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * Math.sin(arg1 / arg4 * Math.PI / 2) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return (-arg3) / 2 * (Math.cos(Math.PI * arg1 / arg4) - 1) + arg2;
        }
    }
}


//      class AdjustColor
package fl.motion 
{
    public class AdjustColor extends Object
    {
        public function AdjustColor()
        {
            super();
            return;
        }

        public function set brightness(arg1:Number):void
        {
            if (this.m_brightnessMatrix == null) 
            {
                this.m_brightnessMatrix = new fl.motion.ColorMatrix();
            }
            if (arg1 != 0) 
            {
                this.m_brightnessMatrix.SetBrightnessMatrix(arg1);
            }
            return;
        }

        public function set contrast(arg1:Number):void
        {
            var loc1:*=arg1;
            if (arg1 != 0) 
            {
                if (arg1 > 0) 
                {
                    loc1 = s_arrayOfDeltaIndex[int(arg1)] * 127 + 127;
                }
                else 
                {
                    loc1 = arg1 / 100 * 127 + 127;
                }
            }
            else 
            {
                loc1 = 127;
            }
            if (this.m_contrastMatrix == null) 
            {
                this.m_contrastMatrix = new fl.motion.ColorMatrix();
            }
            this.m_contrastMatrix.SetContrastMatrix(loc1);
            return;
        }

        public function set saturation(arg1:Number):void
        {
            var loc1:*=arg1;
            if (arg1 != 0) 
            {
                if (arg1 > 0) 
                {
                    loc1 = 1 + 3 * arg1 / 100;
                }
                else 
                {
                    loc1 = arg1 / 100 + 1;
                }
            }
            else 
            {
                loc1 = 1;
            }
            if (this.m_saturationMatrix == null) 
            {
                this.m_saturationMatrix = new fl.motion.ColorMatrix();
            }
            this.m_saturationMatrix.SetSaturationMatrix(loc1);
            return;
        }

        public function set hue(arg1:Number):void
        {
            if (this.m_hueMatrix == null) 
            {
                this.m_hueMatrix = new fl.motion.ColorMatrix();
            }
            if (arg1 != 0) 
            {
                this.m_hueMatrix.SetHueMatrix(arg1 * Math.PI / 180);
            }
            return;
        }

        public function AllValuesAreSet():Boolean
        {
            return this.m_brightnessMatrix && this.m_contrastMatrix && this.m_saturationMatrix && this.m_hueMatrix;
        }

        public function CalculateFinalFlatArray():Array
        {
            if (this.CalculateFinalMatrix()) 
            {
                return this.m_finalMatrix.GetFlatArray();
            }
            return null;
        }

        internal function CalculateFinalMatrix():Boolean
        {
            if (!this.AllValuesAreSet()) 
            {
                return false;
            }
            this.m_finalMatrix = new fl.motion.ColorMatrix();
            this.m_finalMatrix.Multiply(this.m_brightnessMatrix);
            this.m_finalMatrix.Multiply(this.m_contrastMatrix);
            this.m_finalMatrix.Multiply(this.m_saturationMatrix);
            this.m_finalMatrix.Multiply(this.m_hueMatrix);
            return true;
        }

        
        {
            s_arrayOfDeltaIndex = [0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.56, 0.59, 0.62, 0.65, 0.68, 0.71, 0.74, 0.77, 0.8, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10];
        }

        internal var m_brightnessMatrix:fl.motion.ColorMatrix;

        internal var m_contrastMatrix:fl.motion.ColorMatrix;

        internal var m_saturationMatrix:fl.motion.ColorMatrix;

        internal var m_hueMatrix:fl.motion.ColorMatrix;

        internal var m_finalMatrix:fl.motion.ColorMatrix;

        internal static var s_arrayOfDeltaIndex:Array;
    }
}


//      class Animator
package fl.motion 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Animator extends fl.motion.AnimatorBase
    {
        public function Animator(arg1:XML=null, arg2:flash.display.DisplayObject=null)
        {
            this.motion = new fl.motion.Motion(arg1);
            super(arg1, arg2);
            return;
        }

        public override function set motion(arg1:fl.motion.MotionBase):void
        {
            super.motion = arg1;
            var loc1:*=arg1 as fl.motion.Motion;
            if (loc1 && loc1.source && loc1.source.transformationPoint) 
            {
                this.transformationPoint = loc1.source.transformationPoint.clone();
            }
            return;
        }

        protected override function setTargetState():void
        {
            this.targetState.scaleX = this._target.scaleX;
            this.targetState.scaleY = this._target.scaleY;
            this.targetState.skewX = fl.motion.MatrixTransformer.getSkewX(this._target.transform.matrix);
            this.targetState.skewY = fl.motion.MatrixTransformer.getSkewY(this._target.transform.matrix);
            this.targetState.bounds = this._target.getBounds(this._target);
            this.initTransformPointInternal(this._target.transform.matrix);
            this.targetState.z = 0;
            var loc1:*;
            this.targetState.rotationY = loc1 = 0;
            this.targetState.rotationX = loc1;
            return;
        }

        internal function initTransformPointInternal(arg1:flash.geom.Matrix):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc1:*=this.targetState.bounds;
            if (this.transformationPoint) 
            {
                loc2 = this.transformationPoint.x * loc1.width + loc1.left;
                loc3 = this.transformationPoint.y * loc1.height + loc1.top;
                this.targetState.transformPointInternal = new flash.geom.Point(loc2, loc3);
                loc4 = arg1.transformPoint(this.targetState.transformPointInternal);
                this.targetState.x = loc4.x;
                this.targetState.y = loc4.y;
            }
            else 
            {
                this.targetState.transformPointInternal = new flash.geom.Point(0, 0);
                this.targetState.x = this._target.x;
                this.targetState.y = this._target.y;
            }
            return;
        }

        protected override function setTimeClassic(arg1:int, arg2:fl.motion.MotionBase, arg3:fl.motion.KeyframeBase):Boolean
        {
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=null;
            var loc11:*=false;
            var loc12:*=null;
            var loc13:*=NaN;
            var loc14:*=NaN;
            var loc15:*=NaN;
            var loc16:*=NaN;
            var loc17:*=NaN;
            var loc18:*=null;
            var loc19:*=NaN;
            var loc1:*;
            if (!(loc1 = arg2 as fl.motion.Motion)) 
            {
                return false;
            }
            var loc2:*;
            if (loc2 = loc1.getMatrix(arg1)) 
            {
                if (!motionArray || !_lastMatrixApplied || !matricesEqual(loc2, _lastMatrixApplied)) 
                {
                    this._target.transform.matrix = loc2;
                    _lastMatrixApplied = loc2;
                }
            }
            else 
            {
                if (motionArray && !(loc1 == _lastMotionUsed)) 
                {
                    this.transformationPoint = loc1.motion_internal::transformationPoint ? loc1.motion_internal::transformationPoint : new flash.geom.Point(0.5, 0.5);
                    this.initTransformPointInternal(loc1.motion_internal::initialMatrix);
                    _lastMotionUsed = loc1;
                }
                loc3 = loc1.getValue(arg1, fl.motion.Tweenables.X);
                loc4 = loc1.getValue(arg1, fl.motion.Tweenables.Y);
                loc5 = new flash.geom.Point(loc3, loc4);
                if (this.positionMatrix) 
                {
                    loc5 = this.positionMatrix.transformPoint(loc5);
                }
                loc5.x = loc5.x + this.targetState.x;
                loc5.y = loc5.y + this.targetState.y;
                loc6 = loc1.getValue(arg1, fl.motion.Tweenables.SCALE_X) * this.targetState.scaleX;
                loc7 = loc1.getValue(arg1, fl.motion.Tweenables.SCALE_Y) * this.targetState.scaleY;
                loc8 = 0;
                loc9 = 0;
                if (this.orientToPath) 
                {
                    loc15 = loc1.getValue(arg1 + 1, fl.motion.Tweenables.X);
                    loc16 = loc1.getValue(arg1 + 1, fl.motion.Tweenables.Y);
                    loc17 = Math.atan2(loc16 - loc4, loc15 - loc3) * 180 / Math.PI;
                    if (!isNaN(loc17)) 
                    {
                        loc8 = loc17 + this.targetState.skewX;
                        loc9 = loc17 + this.targetState.skewY;
                    }
                }
                else 
                {
                    loc8 = loc1.getValue(arg1, fl.motion.Tweenables.SKEW_X) + this.targetState.skewX;
                    loc9 = loc1.getValue(arg1, fl.motion.Tweenables.SKEW_Y) + this.targetState.skewY;
                }
                loc10 = new flash.geom.Matrix(loc6 * Math.cos(loc9 * Math.PI / 180), loc6 * Math.sin(loc9 * Math.PI / 180), (-loc7) * Math.sin(loc8 * Math.PI / 180), loc7 * Math.cos(loc8 * Math.PI / 180), 0, 0);
                loc11 = false;
                if (loc1.useRotationConcat(arg1)) 
                {
                    loc18 = new flash.geom.Matrix();
                    loc19 = loc1.getValue(arg1, fl.motion.Tweenables.ROTATION_CONCAT);
                    loc18.rotate(loc19);
                    loc10.concat(loc18);
                    loc11 = true;
                }
                loc10.tx = loc5.x;
                loc10.ty = loc5.y;
                loc12 = loc10.transformPoint(this.targetState.transformPointInternal);
                loc13 = loc10.tx - loc12.x;
                loc14 = loc10.ty - loc12.y;
                loc10.tx = loc10.tx + loc13;
                loc10.ty = loc10.ty + loc14;
                if (!motionArray || !_lastMatrixApplied || !matricesEqual(loc10, _lastMatrixApplied)) 
                {
                    if (!loc11) 
                    {
                        this._target.rotation = loc9;
                    }
                    this._target.transform.matrix = loc10;
                    if (loc11 && this._target.scaleX == 0 && this._target.scaleY == 0) 
                    {
                        this._target.scaleX = loc6;
                        this._target.scaleY = loc7;
                    }
                    _lastMatrixApplied = loc10;
                }
            }
            if (!(_lastCacheAsBitmapApplied == arg3.cacheAsBitmap) || !_cacheAsBitmapHasBeenApplied) 
            {
                this._target.cacheAsBitmap = arg3.cacheAsBitmap;
                _cacheAsBitmapHasBeenApplied = true;
                _lastCacheAsBitmapApplied = arg3.cacheAsBitmap;
            }
            return true;
        }

        public static function fromXMLString(arg1:String, arg2:flash.display.DisplayObject=null):fl.motion.Animator
        {
            return new Animator(new XML(arg1), arg2);
        }

        public static function matricesEqual(arg1:flash.geom.Matrix, arg2:flash.geom.Matrix):Boolean
        {
            return arg1.a == arg2.a && arg1.b == arg2.b && arg1.c == arg2.c && arg1.d == arg2.d && arg1.tx == arg2.tx && arg1.ty == arg2.ty;
        }
    }
}


//      class Animator3D
package fl.motion 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.geom.*;
    
    public class Animator3D extends fl.motion.AnimatorBase
    {
        public function Animator3D(arg1:XML=null, arg2:flash.display.DisplayObject=null)
        {
            super(arg1, arg2);
            this.transformationPoint = new flash.geom.Point(0, 0);
            this._initialPosition = null;
            this._initialMatrixOfTarget = null;
            this._isAnimator3D = true;
            return;
        }

        public override function set initialPosition(arg1:Array):void
        {
            if (arg1.length == 3) 
            {
                this._initialPosition = new flash.geom.Vector3D();
                this._initialPosition.x = arg1[0];
                this._initialPosition.y = arg1[1];
                this._initialPosition.z = arg1[2];
            }
            return;
        }

        protected override function setTargetState():void
        {
            if (!motionArray && !(this._target.transform.matrix == null)) 
            {
                this._initialMatrixOfTarget = convertMatrixToMatrix3D(this._target.transform.matrix);
            }
            return;
        }

        protected override function setTime3D(arg1:int, arg2:fl.motion.MotionBase):Boolean
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=NaN;
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=null;
            var loc11:*=null;
            var loc1:*=arg2.getMatrix3D(arg1) as flash.geom.Matrix3D;
            if (motionArray && !(arg2 == _lastMotionUsed)) 
            {
                this.transformationPoint = arg2.motion_internal::transformationPoint ? arg2.motion_internal::transformationPoint : new flash.geom.Point(0, 0);
                if (arg2.motion_internal::initialPosition) 
                {
                    this.initialPosition = arg2.motion_internal::initialPosition;
                }
                else 
                {
                    this._initialPosition = null;
                }
                _lastMotionUsed = arg2;
            }
            if (loc1) 
            {
                if (!motionArray || !_lastMatrix3DApplied || !matrices3DEqual(loc1, flash.geom.Matrix3D(_lastMatrix3DApplied))) 
                {
                    loc2 = loc1.clone();
                    if (this._initialMatrixOfTarget) 
                    {
                        loc2.append(this._initialMatrixOfTarget);
                    }
                    this._target.transform.matrix3D = loc2;
                    _lastMatrix3DApplied = loc1;
                }
                return true;
            }
            if (arg2.is3D) 
            {
                loc3 = new flash.geom.Matrix3D();
                loc4 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_X) * Math.PI / 180;
                loc5 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_Y) * Math.PI / 180;
                loc6 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_CONCAT) * Math.PI / 180;
                loc3.prepend(fl.motion.MatrixTransformer3D.rotateAboutAxis(loc6, fl.motion.MatrixTransformer3D.AXIS_Z));
                loc3.prepend(fl.motion.MatrixTransformer3D.rotateAboutAxis(loc5, fl.motion.MatrixTransformer3D.AXIS_Y));
                loc3.prepend(fl.motion.MatrixTransformer3D.rotateAboutAxis(loc4, fl.motion.MatrixTransformer3D.AXIS_X));
                loc7 = arg2.getValue(arg1, fl.motion.Tweenables.X);
                loc8 = arg2.getValue(arg1, fl.motion.Tweenables.Y);
                loc9 = arg2.getValue(arg1, fl.motion.Tweenables.Z);
                if (!(getSign(loc7) == 0) || !(getSign(loc8) == 0) || !(getSign(loc9) == 0)) 
                {
                    loc3.appendTranslation(loc7, loc8, loc9);
                }
                loc3.prependTranslation(-this.transformationPoint.x, -this.transformationPoint.y, -this.transformationPointZ);
                if (this._initialPosition) 
                {
                    loc3.appendTranslation(this._initialPosition.x, this._initialPosition.y, this._initialPosition.z);
                }
                loc10 = this.getScaleSkewMatrix(arg2, arg1, this.transformationPoint.x, this.transformationPoint.y);
                loc11 = convertMatrixToMatrix3D(loc10);
                loc3.prepend(loc11);
                if (this._initialMatrixOfTarget) 
                {
                    loc3.append(this._initialMatrixOfTarget);
                }
                if (!motionArray || !_lastMatrix3DApplied || !matrices3DEqual(loc3, flash.geom.Matrix3D(_lastMatrix3DApplied))) 
                {
                    this._target.transform.matrix3D = loc3;
                    _lastMatrix3DApplied = loc3;
                }
            }
            return false;
        }

        protected override function removeChildTarget(arg1:flash.display.MovieClip, arg2:flash.display.DisplayObject, arg3:String):void
        {
            super.removeChildTarget(arg1, arg2, arg3);
            if (arg2.transform.matrix3D != null) 
            {
                arg2.transform.matrix = IDENTITY_MATRIX;
            }
            return;
        }

        internal function getScaleSkewMatrix(arg1:fl.motion.MotionBase, arg2:int, arg3:Number, arg4:Number):flash.geom.Matrix
        {
            var loc1:*=arg1.getValue(arg2, fl.motion.Tweenables.SCALE_X);
            var loc2:*=arg1.getValue(arg2, fl.motion.Tweenables.SCALE_Y);
            var loc3:*=arg1.getValue(arg2, fl.motion.Tweenables.SKEW_X);
            var loc4:*=arg1.getValue(arg2, fl.motion.Tweenables.SKEW_Y);
            var loc5:*;
            (loc5 = new flash.geom.Matrix()).translate(-arg3, -arg4);
            var loc6:*;
            (loc6 = new flash.geom.Matrix()).scale(loc1, loc2);
            loc5.concat(loc6);
            var loc7:*;
            (loc7 = new flash.geom.Matrix()).a = Math.cos(loc4 * Math.PI / 180);
            loc7.b = Math.sin(loc4 * Math.PI / 180);
            loc7.c = -Math.sin(loc3 * Math.PI / 180);
            loc7.d = Math.cos(loc3 * Math.PI / 180);
            loc5.concat(loc7);
            loc5.translate(arg3, arg4);
            return loc5;
        }

        protected static function getSign(arg1:Number):int
        {
            return arg1 < -EPSILON ? -1 : arg1 > EPSILON ? 1 : 0;
        }

        protected static function convertMatrixToMatrix3D(arg1:flash.geom.Matrix):flash.geom.Matrix3D
        {
            var loc1:*=new Vector.<Number>(16);
            loc1[0] = arg1.a;
            loc1[1] = arg1.b;
            loc1[2] = 0;
            loc1[3] = 0;
            loc1[4] = arg1.c;
            loc1[5] = arg1.d;
            loc1[6] = 0;
            loc1[7] = 0;
            loc1[8] = 0;
            loc1[9] = 0;
            loc1[10] = 1;
            loc1[11] = 0;
            loc1[12] = arg1.tx;
            loc1[13] = arg1.ty;
            loc1[14] = 0;
            loc1[15] = 1;
            return new flash.geom.Matrix3D(loc1);
        }

        protected static function matrices3DEqual(arg1:flash.geom.Matrix3D, arg2:flash.geom.Matrix3D):Boolean
        {
            var loc1:*=arg1.rawData;
            var loc2:*=arg2.rawData;
            if (loc1 == null || !(loc1.length == 16) || loc2 == null || !(loc2.length == 16)) 
            {
                return false;
            }
            var loc3:*=0;
            while (loc3 < 16) 
            {
                if (loc1[loc3] != loc2[loc3]) 
                {
                    return false;
                }
                ++loc3;
            }
            return true;
        }

        
        {
            IDENTITY_MATRIX = new flash.geom.Matrix();
        }

        protected static const EPSILON:Number=1e-008;

        internal var _initialPosition:flash.geom.Vector3D;

        internal var _initialMatrixOfTarget:flash.geom.Matrix3D;

        internal static var IDENTITY_MATRIX:flash.geom.Matrix;
    }
}


//      class AnimatorBase
package fl.motion 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    
    public class AnimatorBase extends flash.events.EventDispatcher
    {
        public function AnimatorBase(arg1:XML=null, arg2:flash.display.DisplayObject=null)
        {
            super();
            this.target = arg2;
            this._isAnimator3D = false;
            this.transformationPoint = new flash.geom.Point(0.5, 0.5);
            this.transformationPointZ = 0;
            this._sceneName = "";
            this._toRemove = new Array();
            this._lastFrameHandled = -1;
            this._lastSceneHandled = null;
            this._registeredParent = false;
            return;
        }

        public function set placeholderName(arg1:String):void
        {
            this._placeholderName = arg1;
            return;
        }

        public function get instanceFactoryClass():Class
        {
            return this._instanceFactoryClass;
        }

        public function set instanceFactoryClass(arg1:Class):void
        {
            var f:Class;

            var loc1:*;
            f = arg1;
            if (f == this._instanceFactoryClass) 
            {
                return;
            }
            this._instanceFactoryClass = f;
            try 
            {
                this.instanceFactory = (loc2 = this._instanceFactoryClass)["getSingleton"]();
            }
            catch (e:Error)
            {
                instanceFactory = null;
            }
            return;
        }

        public function useCurrentFrame(arg1:Boolean, arg2:int):void
        {
            this._useCurrentFrame = arg1;
            if (!this.motionArray) 
            {
                this._spanStart = arg2;
            }
            return;
        }

        public function get usingCurrentFrame():Boolean
        {
            return this._useCurrentFrame;
        }

        public function get spanStart():int
        {
            return this._spanStart;
        }

        public function get spanEnd():int
        {
            if (this._spanEnd >= 0) 
            {
                return this._spanEnd;
            }
            if (this._motion && this._motion.duration > 0) 
            {
                return (this._spanStart + this._motion.duration - 1);
            }
            return this._spanStart;
        }

        public function get sceneName():String
        {
            return this._sceneName;
        }

        public function set sceneName(arg1:String):void
        {
            this._sceneName = arg1;
            return;
        }

        internal function handleEnterFrame(arg1:flash.events.Event):void
        {
            var loc1:*=null;
            if (this._registeredParent) 
            {
                loc1 = this._targetParent as flash.display.MovieClip;
                if (loc1 == null) 
                {
                    return;
                }
                if (!this.usingCurrentFrame || !(loc1.currentFrame == this._lastFrameHandled) || !(loc1.currentScene.name == this._lastSceneHandled) || this.target == null && !(this.instanceFactoryClass == null)) 
                {
                    processCurrentFrame(loc1, this, false);
                }
                this.removeChildren();
                this._lastFrameHandled = loc1.currentFrame;
                this._lastSceneHandled = loc1.currentScene.name;
            }
            else 
            {
                this.nextFrame();
            }
            return;
        }

        internal function removeChildren():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=0;
            while (loc1 < this._toRemove.length) 
            {
                loc2 = this._toRemove[loc1];
                if (loc2.target == this._target || !(loc2.target.parent == this._targetParent)) 
                {
                    this._toRemove.splice(loc1, 1);
                    continue;
                }
                loc3 = flash.display.MovieClip(this._targetParent);
                if (loc2.currentFrame == loc3.currentFrame && (loc3.scenes.length <= 1 || loc2.currentSceneName == loc3.currentScene.name)) 
                {
                    ++loc1;
                    continue;
                }
                this.removeChildTarget(loc3, loc2.target, loc2.target.name);
                this._toRemove.splice(loc1, 1);
            }
            return;
        }

        public function set targetParent(arg1:flash.display.DisplayObjectContainer):void
        {
            this._targetParent = arg1;
            return;
        }

        protected function removeChildTarget(arg1:flash.display.MovieClip, arg2:flash.display.DisplayObject, arg3:String):void
        {
            arg1.removeChild(arg2);
            if (arg1.hasOwnProperty(arg3) && arg1[arg3] == arg2) 
            {
                arg1[arg3] = null;
            }
            this._lastColorTransformApplied = null;
            this._filtersApplied = false;
            this._lastBlendModeApplied = null;
            this._cacheAsBitmapHasBeenApplied = false;
            this._lastMatrixApplied = null;
            this._lastMatrix3DApplied = null;
            return;
        }

        public function get frameEvent():String
        {
            return this._frameEvent;
        }

        public function get motion():fl.motion.MotionBase
        {
            return this._motion;
        }

        public function set motion(arg1:fl.motion.MotionBase):void
        {
            this._motion = arg1;
            if (arg1) 
            {
                if (this.motionArray) 
                {
                    var loc1:*;
                    this._spanEnd = loc1 = -1;
                    this._spanStart = loc1;
                }
                this.motionArray = null;
            }
            return;
        }

        public function get motionArray():Array
        {
            return this._motionArray;
        }

        public function set motionArray(arg1:Array):void
        {
            var loc1:*=0;
            this._motionArray = arg1 && arg1.length > 0 ? arg1 : null;
            if (this._motionArray) 
            {
                this.motion = null;
                this._spanStart = this._motionArray[0].motion_internal::spanStart;
                this._spanEnd = (this._spanStart - 1);
                loc1 = 0;
                while (loc1 < this._motionArray.length) 
                {
                    this._spanEnd = this._spanEnd + this._motionArray[loc1].duration;
                    ++loc1;
                }
            }
            return;
        }

        public function set frameEvent(arg1:String):void
        {
            this._frameEvent = arg1;
            return;
        }

        public function get targetState3D():Array
        {
            return this._targetState3D;
        }

        public function set targetState3D(arg1:Array):void
        {
            this._targetState3D = arg1;
            return;
        }

        public function nextFrame(arg1:Boolean=false, arg2:Boolean=true):void
        {
            if (this.motionArray && this.time >= this.spanEnd || !this.motionArray && this.time >= (this.motion.duration - 1)) 
            {
                this.handleLastFrame(arg1, arg2);
            }
            else 
            {
                var loc1:*;
                var loc2:*=((loc1 = this).time + 1);
                loc1.time = loc2;
            }
            return;
        }

        public function play(arg1:int=-1, arg2:Boolean=true):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (!this._isPlaying) 
            {
                if (this._target == null && this._targetParent && !(this._targetName == "")) 
                {
                    loc1 = this._targetParent.hasOwnProperty(this._targetName) ? this._targetParent[this._targetName] : this._targetParent.getChildByName(this._targetName);
                    if (!(this.instanceFactory == null)) 
                    {
                        this.instanceFactory == null;
                        var loc4:*;
                    }
                    if (this.instanceFactory == null) 
                    {
                        this.target = loc1;
                    }
                    if (!this.target) 
                    {
                        loc1 = this._targetParent.getChildByName(this._targetName);
                        if (this.instanceFactory == null || (loc4 = this.instanceFactory)["isTargetForFrame"](loc1, arg1, this.sceneName)) 
                        {
                            this.target = loc1;
                        }
                        if (!this.target && this._placeholderName && this.instanceFactory) 
                        {
                            if (loc2 = (loc4 = this.instanceFactory)["getInstance"](this._targetParent, this._targetName, arg1, this.sceneName)) 
                            {
                                loc2.name = this._targetName;
                                this._targetParent[this._targetName] = loc2;
                                if (!(loc3 = this._targetParent[this._placeholderName])) 
                                {
                                    loc3 = this._targetParent.getChildByName(this._placeholderName);
                                }
                                if (loc3) 
                                {
                                    this._targetParent.addChildAt(loc2, this._targetParent.getChildIndex(loc3) + 1);
                                }
                                else 
                                {
                                    this._targetParent.addChild(loc2);
                                }
                                this.target = loc2;
                            }
                        }
                    }
                }
                if (arg2) 
                {
                    enterFrameBeacon.addEventListener(this.frameEvent, this.handleEnterFrame, false, 0, true);
                }
                if (!this.target) 
                {
                    return;
                }
                this._isPlaying = true;
            }
            this.playCount = 0;
            if (arg1 > -1) 
            {
                this.time = arg1;
            }
            else 
            {
                this.rewind();
            }
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_START));
            return;
        }

        public function end(arg1:Boolean=false, arg2:Boolean=true, arg3:Boolean=false):void
        {
            var loc1:*=null;
            if (arg2) 
            {
                enterFrameBeacon.removeEventListener(this.frameEvent, this.handleEnterFrame);
            }
            this._isPlaying = false;
            this.playCount = 0;
            if (this.autoRewind) 
            {
                this.rewind();
            }
            else if (this.motion && !(this.time == (this.motion.duration - 1))) 
            {
                this.time = (this.motion.duration - 1);
            }
            else if (this.motionArray && !(this.time == this._spanEnd)) 
            {
                this.time = this._spanEnd;
            }
            if (arg1) 
            {
                if (this._targetParent && !(this._targetName == "")) 
                {
                    if (this._target && this.instanceFactory && this._targetParent is flash.display.MovieClip && this._targetParent == this._target.parent) 
                    {
                        if (arg3) 
                        {
                            this.removeChildTarget(flash.display.MovieClip(this._targetParent), this._target, this._targetName);
                        }
                        else 
                        {
                            loc1 = flash.display.MovieClip(this._targetParent);
                            this._toRemove.push({"target":this._target, "currentFrame":loc1.currentFrame, "currentSceneName":loc1.currentScene.name});
                        }
                    }
                    this._target = null;
                }
                this._lastRenderedTime = -1;
                this._time = -1;
            }
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_END));
            return;
        }

        public function stop():void
        {
            enterFrameBeacon.removeEventListener(this.frameEvent, this.handleEnterFrame);
            this._isPlaying = false;
            this.playCount = 0;
            this.rewind();
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_END));
            return;
        }

        public function get isPlaying():Boolean
        {
            return this._isPlaying;
        }

        public function pause():void
        {
            enterFrameBeacon.removeEventListener(this.frameEvent, this.handleEnterFrame);
            this._isPlaying = false;
            return;
        }

        public function resume():void
        {
            enterFrameBeacon.addEventListener(this.frameEvent, this.handleEnterFrame, false, 0, true);
            this._isPlaying = true;
            return;
        }

        public function get target():flash.display.DisplayObject
        {
            return this._target;
        }

        public function set target(arg1:flash.display.DisplayObject):void
        {
            if (!arg1) 
            {
                return;
            }
            this._target = arg1;
            if (arg1 != this._lastTarget) 
            {
                this._lastColorTransformApplied = null;
                this._filtersApplied = false;
                this._lastBlendModeApplied = null;
                this._cacheAsBitmapHasBeenApplied = false;
                this._lastMatrixApplied = null;
                this._lastMatrix3DApplied = null;
                this._toRemove = new Array();
            }
            this._lastTarget = arg1;
            var loc1:*=false;
            if (this.targetParent && !(this.targetName == "")) 
            {
                if (this.targetStateOriginal) 
                {
                    this.targetState = this.targetStateOriginal;
                    return;
                }
                loc1 = true;
            }
            this.targetState = {};
            this.setTargetState();
            if (loc1) 
            {
                this.targetStateOriginal = this.targetState;
            }
            return;
        }

        protected function setTargetState():void
        {
            return;
        }

        public function set initialPosition(arg1:Array):void
        {
            return;
        }

        public function startFrameEvents():void
        {
            enterFrameBeacon.addEventListener(this.frameEvent, this.handleEnterFrame, false, 0, true);
            return;
        }

        internal function placeholderButtonEnterFrameHandler(arg1:flash.events.Event):void
        {
            var loc2:*=null;
            if (this._targetParentBtn == null || this.instanceFactory == null) 
            {
                this._target.removeEventListener(this.frameEvent, this.placeholderButtonEnterFrameHandler);
                return;
            }
            var loc3:*;
            var loc1:*=(loc3 = this.instanceFactory)["getInstance"](this._targetParentBtn, this._targetName, this._spanStart);
            if (loc1 == null) 
            {
                return;
            }
            this._target.removeEventListener(this.frameEvent, this.placeholderButtonEnterFrameHandler);
            if (this._target.parent == null || flash.display.DisplayObject(this._target.parent) == this._targetParentBtn) 
            {
                loc3 = this._spanStart;
                switch (loc3) 
                {
                    case 1:
                    {
                        this._targetParentBtn.overState = loc1;
                        break;
                    }
                    case 2:
                    {
                        this._targetParentBtn.downState = loc1;
                        break;
                    }
                    case 3:
                    {
                        this._targetParentBtn.hitTestState = loc1;
                        break;
                    }
                    default:
                    {
                        this._targetParentBtn.upState = loc1;
                        break;
                    }
                }
            }
            else 
            {
                loc2 = this._target.parent as flash.display.DisplayObjectContainer;
                if (loc2 != null) 
                {
                    loc2.addChildAt(loc1, loc2.getChildIndex(this._target) + 1);
                    loc2.removeChild(this._target);
                }
            }
            this.target = loc1;
            this.time = 0;
            return;
        }

        internal function placeholderSpriteEnterFrameHandler(arg1:flash.events.Event):void
        {
            if (this._targetParent == null || this.instanceFactory == null) 
            {
                this._target.removeEventListener(this.frameEvent, this.placeholderSpriteEnterFrameHandler);
                return;
            }
            var loc2:*;
            var loc1:*=(loc2 = this.instanceFactory)["getInstance"](this._targetParent, this._targetName, 0);
            if (loc1 == null) 
            {
                return;
            }
            loc1.name = this._targetName;
            this._targetParent[this._targetName] = loc1;
            this._target.removeEventListener(this.frameEvent, this.placeholderSpriteEnterFrameHandler);
            this._targetParent[this._placeholderName] = null;
            this._targetParent.addChildAt(loc1, this._targetParent.getChildIndex(this._target) + 1);
            this._targetParent.removeChild(this._target);
            this.target = loc1;
            this.time = 0;
            return;
        }

        public function get time():int
        {
            return this._time;
        }

        public function set time(arg1:int):void
        {
            var loc2:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            if (arg1 == this._time) 
            {
                return;
            }
            if (this._placeholderName) 
            {
                if (!(loc5 = this._targetParent[this._placeholderName])) 
                {
                    loc5 = this._targetParent.getChildByName(this._placeholderName);
                }
                if (loc5 && loc5.parent == this._targetParent && this._target.parent == this._targetParent) 
                {
                    this._targetParent.addChildAt(this._target, this._targetParent.getChildIndex(loc5) + 1);
                }
            }
            var loc1:*=this.motion;
            if (loc1) 
            {
                if (arg1 > (loc1.duration - 1)) 
                {
                    arg1 = (loc1.duration - 1);
                }
                else if (arg1 < 0) 
                {
                    arg1 = 0;
                }
                this._time = arg1;
            }
            else 
            {
                loc2 = this.motionArray;
                if (arg1 <= this._spanStart) 
                {
                    loc1 = loc2[0];
                    arg1 = this._spanStart;
                }
                else if (arg1 >= this._spanEnd) 
                {
                    loc1 = loc2[(loc2.length - 1)];
                    arg1 = this._spanEnd;
                }
                else 
                {
                    loc6 = 0;
                    while (loc6 < loc2.length) 
                    {
                        loc1 = loc2[loc6];
                        if (!(arg1 <= (loc1.motion_internal::spanStart + loc1.duration - 1))) 
                        {
                        };
                        ++loc6;
                    }
                }
                this._time = arg1;
                arg1 = arg1 - loc1.motion_internal::spanStart;
            }
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.TIME_CHANGE));
            var loc3:*;
            var loc4:*;
            if (loc4 = (loc3 = loc1.getCurrentKeyframe(arg1)).index == this._lastRenderedTime && (!loc2 || this._lastRenderedMotion == loc1) && !loc3.tweensLength) 
            {
                return;
            }
            if (loc3.blank) 
            {
                this._target.visible = false;
            }
            else 
            {
                if (this._isAnimator3D) 
                {
                    this._lastMatrixApplied = null;
                    this.setTime3D(arg1, loc1);
                }
                else 
                {
                    this._lastMatrix3DApplied = null;
                    this.setTimeClassic(arg1, loc1, loc3);
                }
                loc7 = loc1.getColorTransform(arg1);
                if (loc2) 
                {
                    if (!loc7 && this._lastColorTransformApplied) 
                    {
                        loc7 = new flash.geom.ColorTransform();
                    }
                    if (loc7 && (!this._lastColorTransformApplied || !colorTransformsEqual(loc7, this._lastColorTransformApplied))) 
                    {
                        this._target.transform.colorTransform = loc7;
                        this._lastColorTransformApplied = loc7;
                    }
                }
                else if (loc7) 
                {
                    this._target.transform.colorTransform = loc7;
                }
                loc8 = loc1.getFilters(arg1);
                if (loc2 && !loc8 && this._filtersApplied) 
                {
                    this._target.filters = null;
                    this._filtersApplied = false;
                }
                else if (loc8) 
                {
                    this._target.filters = loc8;
                    this._filtersApplied = true;
                }
                if (!loc2 || !(this._lastBlendModeApplied == loc3.blendMode)) 
                {
                    this._target.blendMode = loc3.blendMode;
                    this._lastBlendModeApplied = loc3.blendMode;
                }
            }
            this._lastRenderedTime = arg1;
            this._lastRenderedMotion = loc1;
            this.dispatchEvent(new fl.motion.MotionEvent(fl.motion.MotionEvent.MOTION_UPDATE));
            return;
        }

        protected function setTime3D(arg1:int, arg2:fl.motion.MotionBase):Boolean
        {
            return false;
        }

        protected function setTimeClassic(arg1:int, arg2:fl.motion.MotionBase, arg3:fl.motion.KeyframeBase):Boolean
        {
            return false;
        }

        internal function handleLastFrame(arg1:Boolean=false, arg2:Boolean=true):void
        {
            var loc1:*;
            var loc2:*=((loc1 = this).playCount + 1);
            loc1.playCount = loc2;
            if (this.repeatCount == 0 || this.playCount < this.repeatCount) 
            {
                this.rewind();
            }
            else 
            {
                this.end(arg1, arg2, false);
            }
            return;
        }

        protected static function colorTransformsEqual(arg1:flash.geom.ColorTransform, arg2:flash.geom.ColorTransform):Boolean
        {
            return arg1.alphaMultiplier == arg2.alphaMultiplier && arg1.alphaOffset == arg2.alphaOffset && arg1.blueMultiplier == arg2.blueMultiplier && arg1.blueOffset == arg2.blueOffset && arg1.greenMultiplier == arg2.greenMultiplier && arg1.greenOffset == arg2.greenOffset && arg1.redMultiplier == arg2.redMultiplier && arg1.redOffset == arg2.redOffset;
        }

        public static function registerParentFrameHandler(arg1:flash.display.MovieClip, arg2:fl.motion.AnimatorBase, arg3:int, arg4:int=0, arg5:Boolean=false):void
        {
            arg2._registeredParent = true;
            if (arg3 == -1) 
            {
                arg3 = (arg1.currentFrame - 1);
            }
            if (arg5) 
            {
                arg2.useCurrentFrame(true, arg3);
            }
            else 
            {
                arg2.repeatCount = arg4;
            }
            return;
        }

        public static function processCurrentFrame(arg1:flash.display.MovieClip, arg2:fl.motion.AnimatorBase, arg3:Boolean, arg4:Boolean=false):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (arg2 && arg1) 
            {
                if (arg2.usingCurrentFrame) 
                {
                    loc1 = (arg1.currentFrame - 1);
                    if (arg1.scenes.length > 1) 
                    {
                        if (arg1.currentScene.name != arg2.sceneName) 
                        {
                            loc1 = -1;
                        }
                    }
                    if (loc1 >= arg2.spanStart && loc1 <= arg2.spanEnd) 
                    {
                        loc2 = arg2.motionArray ? loc1 : loc1 - arg2.spanStart;
                        if (arg2.isPlaying) 
                        {
                            if (!arg4) 
                            {
                                if (loc1 != arg2.spanEnd) 
                                {
                                    arg2.time = loc2;
                                }
                                else 
                                {
                                    arg2.handleLastFrame(true, false);
                                }
                            }
                        }
                        else 
                        {
                            arg2.play(loc2, arg3);
                        }
                    }
                    else if (arg2.isPlaying && !arg4) 
                    {
                        arg2.end(true, false, true);
                    }
                    else if (!arg2.isPlaying && arg4) 
                    {
                        arg2.startFrameEvents();
                    }
                }
                else if (arg2.targetParent && (arg2.targetParent.hasOwnProperty(arg2.targetName) && arg2.targetParent[arg2.targetName] == null || arg2.targetParent.getChildByName(arg2.targetName) == null)) 
                {
                    if (arg2.isPlaying) 
                    {
                        arg2.end(true, false);
                    }
                    else if (arg4) 
                    {
                        arg2.startFrameEvents();
                    }
                }
                else if (arg2.isPlaying) 
                {
                    if (!arg4) 
                    {
                        arg2.nextFrame(false, false);
                    }
                }
                else if (arg4) 
                {
                    arg2.play(0, arg3);
                }
            }
            return;
        }

        public static function registerButtonState(arg1:flash.display.SimpleButton, arg2:fl.motion.AnimatorBase, arg3:int, arg4:int=-1, arg5:String=null, arg6:String=null, arg7:Class=null):void
        {
            var targetParentBtn:flash.display.SimpleButton;
            var anim:fl.motion.AnimatorBase;
            var stateFrame:int;
            var zIndex:int=-1;
            var targetName:String=null;
            var placeholderName:String=null;
            var instanceFactoryClass:Class=null;
            var target:flash.display.DisplayObject;
            var newTarget:flash.display.DisplayObject;
            var container:flash.display.DisplayObjectContainer;

            var loc1:*;
            newTarget = null;
            container = null;
            targetParentBtn = arg1;
            anim = arg2;
            stateFrame = arg3;
            zIndex = arg4;
            targetName = arg5;
            placeholderName = arg6;
            instanceFactoryClass = arg7;
            target = targetParentBtn.upState;
            var loc2:*=stateFrame;
            switch (loc2) 
            {
                case 1:
                {
                    target = targetParentBtn.overState;
                    break;
                }
                case 2:
                {
                    target = targetParentBtn.downState;
                    break;
                }
                case 3:
                {
                    target = targetParentBtn.hitTestState;
                    break;
                }
            }
            if (!target) 
            {
                return;
            }
            if (zIndex >= 0) 
            {
                try 
                {
                    container = flash.display.DisplayObjectContainer(target);
                    newTarget = container.getChildAt(zIndex);
                }
                catch (e:Error)
                {
                    newTarget = null;
                }
                if (newTarget != null) 
                {
                    target = newTarget;
                }
            }
            anim.target = target;
            if (!(placeholderName == null) && !(instanceFactoryClass == null)) 
            {
                anim.targetParentButton = targetParentBtn;
                anim.targetName = targetName;
                anim.instanceFactoryClass = instanceFactoryClass;
                anim.useCurrentFrame(true, stateFrame);
                anim.target.addEventListener(anim.frameEvent, anim.placeholderButtonEnterFrameHandler, false, 0, true);
                anim.placeholderButtonEnterFrameHandler(null);
            }
            else 
            {
                anim.time = 0;
            }
            return;
        }

        public static function registerSpriteParent(arg1:flash.display.Sprite, arg2:fl.motion.AnimatorBase, arg3:String, arg4:String=null, arg5:Class=null):void
        {
            var loc1:*=null;
            if (arg1 == null || arg2 == null || arg3 == null) 
            {
                return;
            }
            if (!(arg4 == null) && !(arg5 == null)) 
            {
                if ((loc1 = arg1[arg4]) == null) 
                {
                    loc1 = arg1.getChildByName(arg4);
                }
                arg2.target = loc1;
                arg2.targetParent = arg1;
                arg2.targetName = arg3;
                arg2.placeholderName = arg4;
                arg2.instanceFactoryClass = arg5;
                arg2.useCurrentFrame(true, 0);
                arg2.target.addEventListener(arg2.frameEvent, arg2.placeholderSpriteEnterFrameHandler, false, 0, true);
                arg2.placeholderSpriteEnterFrameHandler(null);
            }
            else 
            {
                if ((loc1 = arg1[arg3]) == null) 
                {
                    loc1 = arg1.getChildByName(arg3);
                }
                arg2.target = loc1;
                arg2.time = 0;
            }
            return;
        }

        
        {
            enterFrameBeacon = new flash.display.MovieClip();
        }

        public function get targetParent():flash.display.DisplayObjectContainer
        {
            return this._targetParent;
        }

        public function rewind():void
        {
            this.time = this.motionArray ? this._spanStart : 0;
            return;
        }

        public function get targetParentButton():flash.display.SimpleButton
        {
            return this._targetParentBtn;
        }

        public function set targetParentButton(arg1:flash.display.SimpleButton):*
        {
            this._targetParentBtn = arg1;
            return;
        }

        public function get targetName():String
        {
            return this._targetName;
        }

        public function set targetName(arg1:String):void
        {
            this._targetName = arg1;
            return;
        }

        public function get placeholderName():String
        {
            return this._placeholderName;
        }

        internal var _motion:fl.motion.MotionBase;

        internal var _motionArray:Array;

        protected var _lastMotionUsed:fl.motion.MotionBase;

        protected var _lastColorTransformApplied:flash.geom.ColorTransform;

        protected var _filtersApplied:Boolean;

        protected var _lastBlendModeApplied:String;

        protected var _cacheAsBitmapHasBeenApplied:Boolean;

        protected var _lastCacheAsBitmapApplied:Boolean;

        protected var _lastMatrixApplied:flash.geom.Matrix;

        protected var _lastMatrix3DApplied:Object;

        protected var _toRemove:Array;

        protected var _lastSceneHandled:String;

        protected var _registeredParent:Boolean;

        public var orientToPath:Boolean=false;

        public var transformationPoint:flash.geom.Point;

        public var transformationPointZ:int;

        public var autoRewind:Boolean=false;

        public var positionMatrix:flash.geom.Matrix;

        public var repeatCount:int=1;

        internal var _isPlaying:Boolean=false;

        protected var _target:flash.display.DisplayObject;

        protected var _lastTarget:flash.display.DisplayObject;

        internal var _lastRenderedTime:int=-1;

        internal var _lastRenderedMotion:fl.motion.MotionBase=null;

        internal var _time:int=-1;

        internal var _targetParent:flash.display.DisplayObjectContainer=null;

        internal var _targetParentBtn:flash.display.SimpleButton=null;

        internal var _targetName:String="";

        internal var targetStateOriginal:Object=null;

        internal var _placeholderName:String=null;

        internal var _instanceFactoryClass:Class=null;

        internal var instanceFactory:Object=null;

        internal var _useCurrentFrame:Boolean=false;

        internal var playCount:int=0;

        protected var targetState:Object;

        internal var _spanStart:int=-1;

        internal var _targetState3D:Array=null;

        internal var _sceneName:String="";

        internal var _spanEnd:int=-1;

        protected var _isAnimator3D:Boolean;

        protected var _lastFrameHandled:int;

        internal static var enterFrameBeacon:flash.display.MovieClip;

        internal var _frameEvent:String="enterFrame";
    }
}


//      class AnimatorFactory
package fl.motion 
{
    public class AnimatorFactory extends fl.motion.AnimatorFactoryBase
    {
        public function AnimatorFactory(arg1:fl.motion.MotionBase, arg2:Array=null)
        {
            super(arg1, arg2);
            return;
        }

        protected override function getNewAnimator():fl.motion.AnimatorBase
        {
            return new fl.motion.Animator(null, null);
        }
    }
}


//      class AnimatorFactory3D
package fl.motion 
{
    public class AnimatorFactory3D extends fl.motion.AnimatorFactoryBase
    {
        public function AnimatorFactory3D(arg1:fl.motion.MotionBase, arg2:Array=null)
        {
            super(arg1, arg2);
            this._is3D = true;
            return;
        }

        protected override function getNewAnimator():fl.motion.AnimatorBase
        {
            return new fl.motion.Animator3D(null, null);
        }
    }
}


//      class AnimatorFactoryBase
package fl.motion 
{
    import flash.display.*;
    import flash.geom.*;
    import flash.utils.*;
    
    public class AnimatorFactoryBase extends Object
    {
        public function AnimatorFactoryBase(arg1:fl.motion.MotionBase, arg2:Array=null)
        {
            super();
            this._motion = arg1;
            this._motionArray = arg2;
            this._animators = new flash.utils.Dictionary(true);
            this._transformationPoint = new flash.geom.Point(0.5, 0.5);
            this._transformationPointZ = 0;
            this._is3D = false;
            this._sceneName = "";
            return;
        }

        public function get motion():fl.motion.MotionBase
        {
            return this._motion;
        }

        public function addTarget(arg1:flash.display.DisplayObject, arg2:int=0, arg3:Boolean=true, arg4:int=-1, arg5:Boolean=false):fl.motion.AnimatorBase
        {
            if (arg1) 
            {
                return this.addTargetInfo(arg1.parent, arg1.name, arg2, arg3, arg4, arg5);
            }
            return null;
        }

        protected function getNewAnimator():fl.motion.AnimatorBase
        {
            return null;
        }

        public function addTargetInfo(arg1:flash.display.DisplayObject, arg2:String, arg3:int=0, arg4:Boolean=true, arg5:int=-1, arg6:Boolean=false, arg7:Array=null, arg8:int=-1, arg9:String=null, arg10:Class=null):fl.motion.AnimatorBase
        {
            var loc4:*=null;
            if (!(arg1 is flash.display.DisplayObjectContainer) && !(arg1 is flash.display.SimpleButton)) 
            {
                return null;
            }
            var loc1:*;
            if (!(loc1 = this._animators[arg1])) 
            {
                loc1 = new flash.utils.Dictionary();
                this._animators[arg1] = loc1;
            }
            var loc2:*=loc1[arg2];
            var loc3:*=false;
            if (!loc2) 
            {
                loc2 = this.getNewAnimator();
                if ((loc4 = flash.utils.getDefinitionByName("flash.events.Event") as Class).hasOwnProperty("FRAME_CONSTRUCTED")) 
                {
                    loc2.frameEvent = "frameConstructed";
                }
                loc1[arg2] = loc2;
                loc3 = true;
            }
            loc2.motion = this._motion;
            loc2.motionArray = this._motionArray;
            loc2.transformationPoint = this._transformationPoint;
            loc2.transformationPointZ = this._transformationPointZ;
            loc2.sceneName = this._sceneName;
            if (loc3) 
            {
                if (arg1 is flash.display.MovieClip) 
                {
                    fl.motion.AnimatorBase.registerParentFrameHandler(arg1 as flash.display.MovieClip, loc2, arg5, arg3, arg6);
                }
            }
            if (arg1 is flash.display.MovieClip) 
            {
                loc2.targetParent = flash.display.MovieClip(arg1);
                loc2.targetName = arg2;
                loc2.placeholderName = arg9;
                loc2.instanceFactoryClass = arg10;
            }
            else if (arg1 is flash.display.SimpleButton) 
            {
                fl.motion.AnimatorBase.registerButtonState(arg1 as flash.display.SimpleButton, loc2, arg5, arg8, arg2, arg9, arg10);
            }
            else if (arg1 is flash.display.Sprite) 
            {
                fl.motion.AnimatorBase.registerSpriteParent(arg1 as flash.display.Sprite, loc2, arg2, arg9, arg10);
            }
            if (arg7) 
            {
                loc2.initialPosition = arg7;
            }
            if (arg4) 
            {
                fl.motion.AnimatorBase.processCurrentFrame(arg1 as flash.display.MovieClip, loc2, true, true);
            }
            return loc2;
        }

        public function set transformationPoint(arg1:flash.geom.Point):void
        {
            this._transformationPoint = arg1;
            return;
        }

        public function set transformationPointZ(arg1:int):void
        {
            this._transformationPointZ = arg1;
            return;
        }

        public function set sceneName(arg1:String):void
        {
            this._sceneName = arg1;
            return;
        }

        internal var _motion:fl.motion.MotionBase;

        internal var _motionArray:Array;

        internal var _animators:flash.utils.Dictionary;

        protected var _transformationPoint:flash.geom.Point;

        protected var _transformationPointZ:int;

        protected var _is3D:Boolean;

        protected var _sceneName:String;
    }
}


//      class AnimatorFactoryUniversal
package fl.motion 
{
    public class AnimatorFactoryUniversal extends fl.motion.AnimatorFactoryBase
    {
        public function AnimatorFactoryUniversal(arg1:fl.motion.MotionBase, arg2:Array)
        {
            super(arg1, arg2);
            return;
        }

        protected override function getNewAnimator():fl.motion.AnimatorBase
        {
            return new fl.motion.AnimatorUniversal();
        }
    }
}


//      class AnimatorUniversal
package fl.motion 
{
    import flash.geom.*;
    
    public class AnimatorUniversal extends fl.motion.Animator3D
    {
        public function AnimatorUniversal()
        {
            super(null, null);
            this._isAnimator3D = false;
            return;
        }

        protected override function setTargetState():void
        {
            super.setTargetState();
            this.targetState.scaleX = this._target.scaleX;
            this.targetState.scaleY = this._target.scaleY;
            this.targetState.skewX = fl.motion.MatrixTransformer.getSkewX(this._target.transform.matrix);
            this.targetState.skewY = fl.motion.MatrixTransformer.getSkewY(this._target.transform.matrix);
            this.targetState.bounds = this._target.getBounds(this._target);
            this.initTransformPointInternal(this._target.transform.matrix);
            this.targetState.z = 0;
            var loc1:*;
            this.targetState.rotationY = loc1 = 0;
            this.targetState.rotationX = loc1;
            return;
        }

        internal function initTransformPointInternal(arg1:flash.geom.Matrix):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc1:*=this.targetState.bounds;
            if (this.transformationPoint) 
            {
                loc2 = this.transformationPoint.x * loc1.width + loc1.left;
                loc3 = this.transformationPoint.y * loc1.height + loc1.top;
                this.targetState.transformPointInternal = new flash.geom.Point(loc2, loc3);
                loc4 = arg1.transformPoint(this.targetState.transformPointInternal);
                this.targetState.x = loc4.x;
                this.targetState.y = loc4.y;
            }
            else 
            {
                this.targetState.transformPointInternal = new flash.geom.Point(0, 0);
                this.targetState.x = this._target.x;
                this.targetState.y = this._target.y;
            }
            return;
        }

        protected override function setTimeClassic(arg1:int, arg2:fl.motion.MotionBase, arg3:fl.motion.KeyframeBase):Boolean
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=null;
            var loc10:*=false;
            var loc11:*=null;
            var loc12:*=NaN;
            var loc13:*=NaN;
            var loc14:*=NaN;
            var loc15:*=NaN;
            var loc16:*=NaN;
            var loc17:*=null;
            var loc18:*=NaN;
            if (arg2.is3D) 
            {
                return setTime3D(arg1, arg2);
            }
            var loc1:*;
            if (loc1 = arg2.getMatrix(arg1)) 
            {
                if (!motionArray || !_lastMatrixApplied || !fl.motion.Animator.matricesEqual(loc1, _lastMatrixApplied)) 
                {
                    this._target.transform.matrix = loc1;
                    _lastMatrixApplied = loc1;
                }
            }
            else 
            {
                if (motionArray && !(arg2 == _lastMotionUsed)) 
                {
                    this.transformationPoint = arg2.motion_internal::transformationPoint ? arg2.motion_internal::transformationPoint : new flash.geom.Point(0.5, 0.5);
                    this.initTransformPointInternal(arg2.motion_internal::initialMatrix);
                    _lastMotionUsed = arg2;
                }
                loc2 = arg2.getValue(arg1, fl.motion.Tweenables.X);
                loc3 = arg2.getValue(arg1, fl.motion.Tweenables.Y);
                loc4 = new flash.geom.Point(loc2, loc3);
                if (this.positionMatrix) 
                {
                    loc4 = this.positionMatrix.transformPoint(loc4);
                }
                loc4.x = loc4.x + this.targetState.x;
                loc4.y = loc4.y + this.targetState.y;
                loc5 = arg2.getValue(arg1, fl.motion.Tweenables.SCALE_X) * this.targetState.scaleX;
                loc6 = arg2.getValue(arg1, fl.motion.Tweenables.SCALE_Y) * this.targetState.scaleY;
                loc7 = 0;
                loc8 = 0;
                if (this.orientToPath) 
                {
                    loc14 = arg2.getValue(arg1 + 1, fl.motion.Tweenables.X);
                    loc15 = arg2.getValue(arg1 + 1, fl.motion.Tweenables.Y);
                    loc16 = Math.atan2(loc15 - loc3, loc14 - loc2) * 180 / Math.PI;
                    if (!isNaN(loc16)) 
                    {
                        loc7 = loc16 + this.targetState.skewX;
                        loc8 = loc16 + this.targetState.skewY;
                    }
                }
                else 
                {
                    loc7 = arg2.getValue(arg1, fl.motion.Tweenables.SKEW_X) + this.targetState.skewX;
                    loc8 = arg2.getValue(arg1, fl.motion.Tweenables.SKEW_Y) + this.targetState.skewY;
                }
                loc9 = new flash.geom.Matrix(loc5 * Math.cos(loc8 * Math.PI / 180), loc5 * Math.sin(loc8 * Math.PI / 180), (-loc6) * Math.sin(loc7 * Math.PI / 180), loc6 * Math.cos(loc7 * Math.PI / 180), 0, 0);
                loc10 = false;
                if (arg2.useRotationConcat(arg1)) 
                {
                    loc17 = new flash.geom.Matrix();
                    loc18 = arg2.getValue(arg1, fl.motion.Tweenables.ROTATION_CONCAT);
                    loc17.rotate(loc18);
                    loc9.concat(loc17);
                    loc10 = true;
                }
                loc9.tx = loc4.x;
                loc9.ty = loc4.y;
                loc11 = loc9.transformPoint(this.targetState.transformPointInternal);
                loc12 = loc9.tx - loc11.x;
                loc13 = loc9.ty - loc11.y;
                loc9.tx = loc9.tx + loc12;
                loc9.ty = loc9.ty + loc13;
                if (!motionArray || !_lastMatrixApplied || !fl.motion.Animator.matricesEqual(loc9, _lastMatrixApplied)) 
                {
                    if (!loc10) 
                    {
                        this._target.rotation = loc8;
                    }
                    this._target.transform.matrix = loc9;
                    if (loc10 && this._target.scaleX == 0 && this._target.scaleY == 0) 
                    {
                        this._target.scaleX = loc5;
                        this._target.scaleY = loc6;
                    }
                    _lastMatrixApplied = loc9;
                }
            }
            if (!(_lastCacheAsBitmapApplied == arg3.cacheAsBitmap) || !_cacheAsBitmapHasBeenApplied) 
            {
                this._target.cacheAsBitmap = arg3.cacheAsBitmap;
                _cacheAsBitmapHasBeenApplied = true;
                _lastCacheAsBitmapApplied = arg3.cacheAsBitmap;
            }
            return true;
        }
    }
}


//      class BezierEase
package fl.motion 
{
    import flash.geom.*;
    
    public class BezierEase extends Object implements fl.motion.ITween
    {
        public function BezierEase(arg1:XML=null)
        {
            super();
            this.points = [];
            this.parseXML(arg1);
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.BezierEase
        {
            var loc2:*=null;
            if (!arg1) 
            {
                return this;
            }
            if (arg1.@target.length()) 
            {
                this.target = arg1.@target;
            }
            var loc1:*=arg1.elements();
            var loc3:*=0;
            var loc4:*=loc1;
            for each (loc2 in loc4) 
            {
                this.points.push(new flash.geom.Point(Number(loc2.@x), Number(loc2.@y)));
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg4 <= 0) 
            {
                return NaN;
            }
            var loc1:*;
            if ((loc1 = arg1 / arg4) <= 0) 
            {
                return arg2;
            }
            if (loc1 >= 1) 
            {
                return arg2 + arg3;
            }
            this.firstNode = new flash.geom.Point(0, arg2);
            this.lastNode = new flash.geom.Point(1, arg2 + arg3);
            var loc2:*;
            (loc2 = [this.firstNode].concat(this.points)).push(this.lastNode);
            var loc3:*;
            return loc3 = fl.motion.CustomEase.getYForPercent(loc1, loc2);
        }

        public var points:Array;

        internal var firstNode:flash.geom.Point;

        internal var lastNode:flash.geom.Point;

        internal var _target:String="";
    }
}


//      class BezierSegment
package fl.motion 
{
    import flash.geom.*;
    
    public class BezierSegment extends Object
    {
        public function BezierSegment(arg1:flash.geom.Point, arg2:flash.geom.Point, arg3:flash.geom.Point, arg4:flash.geom.Point)
        {
            super();
            this.a = arg1;
            this.b = arg2;
            this.c = arg3;
            this.d = arg4;
            return;
        }

        public function getValue(arg1:Number):flash.geom.Point
        {
            var loc1:*=this.a.x;
            var loc2:*=(arg1 * arg1 * (this.d.x - loc1) + 3 * (1 - arg1) * (arg1 * (this.c.x - loc1) + (1 - arg1) * (this.b.x - loc1))) * arg1 + loc1;
            var loc3:*=this.a.y;
            var loc4:*=(arg1 * arg1 * (this.d.y - loc3) + 3 * (1 - arg1) * (arg1 * (this.c.y - loc3) + (1 - arg1) * (this.b.y - loc3))) * arg1 + loc3;
            return new flash.geom.Point(loc2, loc4);
        }

        public function getYForX(arg1:Number, arg2:Array=null):Number
        {
            var loc4:*=NaN;
            if (this.a.x < this.d.x) 
            {
                if (arg1 <= this.a.x + 1e-016) 
                {
                    return this.a.y;
                }
                if (arg1 >= this.d.x - 1e-016) 
                {
                    return this.d.y;
                }
            }
            else 
            {
                if (arg1 >= this.a.x + 1e-016) 
                {
                    return this.a.y;
                }
                if (arg1 <= this.d.x - 1e-016) 
                {
                    return this.d.y;
                }
            }
            if (!arg2) 
            {
                arg2 = getCubicCoefficients(this.a.x, this.b.x, this.c.x, this.d.x);
            }
            var loc1:*=getCubicRoots(arg2[0], arg2[1], arg2[2], arg2[3] - arg1);
            var loc2:*=NaN;
            if (loc1.length != 0) 
            {
                if (loc1.length != 1) 
                {
                    var loc5:*=0;
                    var loc6:*=loc1;
                    for each (loc4 in loc6) 
                    {
                        if (!(0 <= loc4 && loc4 <= 1)) 
                        {
                            continue;
                        }
                        loc2 = loc4;
                        break;
                    }
                }
                else 
                {
                    loc2 = loc1[0];
                }
            }
            else 
            {
                loc2 = 0;
            }
            if (isNaN(loc2)) 
            {
                return NaN;
            }
            var loc3:*;
            return loc3 = getSingleValue(loc2, this.a.y, this.b.y, this.c.y, this.d.y);
        }

        public static function getSingleValue(arg1:Number, arg2:Number=0, arg3:Number=0, arg4:Number=0, arg5:Number=0):Number
        {
            return (arg1 * arg1 * (arg5 - arg2) + 3 * (1 - arg1) * (arg1 * (arg4 - arg2) + (1 - arg1) * (arg3 - arg2))) * arg1 + arg2;
        }

        public static function getCubicCoefficients(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Array
        {
            return [-arg1 + 3 * arg2 - 3 * arg3 + arg4, 3 * arg1 - 6 * arg2 + 3 * arg3, -3 * arg1 + 3 * arg2, arg1];
        }

        public static function getCubicRoots(arg1:Number=0, arg2:Number=0, arg3:Number=0, arg4:Number=0):Array
        {
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=NaN;
            var loc11:*=0;
            var loc12:*=NaN;
            if (!arg1) 
            {
                return fl.motion.BezierSegment.getQuadraticRoots(arg2, arg3, arg4);
            }
            if (arg1 != 1) 
            {
                arg2 = arg2 / arg1;
                arg3 = arg3 / arg1;
                arg4 = arg4 / arg1;
            }
            var loc1:*=(arg2 * arg2 - 3 * arg3) / 9;
            var loc2:*=loc1 * loc1 * loc1;
            var loc3:*=(2 * arg2 * arg2 * arg2 - 9 * arg2 * arg3 + 27 * arg4) / 54;
            var loc4:*;
            if ((loc4 = loc2 - loc3 * loc3) >= 0) 
            {
                if (!loc1) 
                {
                    return [0];
                }
                loc5 = Math.acos(loc3 / Math.sqrt(loc2));
                loc6 = Math.sqrt(loc1);
                loc7 = -2 * loc6 * Math.cos(loc5 / 3) - arg2 / 3;
                loc8 = -2 * loc6 * Math.cos((loc5 + 2 * Math.PI) / 3) - arg2 / 3;
                loc9 = -2 * loc6 * Math.cos((loc5 + 4 * Math.PI) / 3) - arg2 / 3;
                return [loc7, loc8, loc9];
            }
            loc10 = Math.pow(Math.sqrt(-loc4) + Math.abs(loc3), 1 / 3);
            return [loc12 = (-(loc11 = loc3 > 0 ? 1 : loc3 < 0 ? -1 : 0)) * (loc10 + loc1 / loc10) - arg2 / 3];
        }

        public static function getQuadraticRoots(arg1:Number, arg2:Number, arg3:Number):Array
        {
            var loc4:*=NaN;
            var loc1:*=[];
            if (!arg1) 
            {
                if (!arg2) 
                {
                    return [];
                }
                loc1[0] = (-arg3) / arg2;
                return loc1;
            }
            var loc2:*;
            var loc3:*;
            if ((loc3 = (loc2 = arg2 * arg2 - 4 * arg1 * arg3) > 0 ? 1 : loc2 < 0 ? -1 : 0) < 0) 
            {
                return [];
            }
            if (loc3) 
            {
                var loc5:*;
                loc1[1] = loc5 = (-arg2) / (2 * arg1);
                loc1[0] = loc5;
                loc4 = Math.sqrt(loc2) / (2 * arg1);
                loc1[0] = loc1[0] - loc4;
                loc1[1] = loc1[1] + loc4;
            }
            else 
            {
                loc1[0] = (-arg2) / (2 * arg1);
            }
            return loc1;
        }

        public var a:flash.geom.Point;

        public var b:flash.geom.Point;

        public var c:flash.geom.Point;

        public var d:flash.geom.Point;
    }
}


//      class Color
package fl.motion 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Color extends flash.geom.ColorTransform
    {
        public function Color(arg1:Number=1, arg2:Number=1, arg3:Number=1, arg4:Number=1, arg5:Number=0, arg6:Number=0, arg7:Number=0, arg8:Number=0)
        {
            super(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return;
        }

        public function get brightness():Number
        {
            return this.redOffset ? 1 - this.redMultiplier : (this.redMultiplier - 1);
        }

        public function set brightness(arg1:Number):void
        {
            if (arg1 > 1) 
            {
                arg1 = 1;
            }
            else if (arg1 < -1) 
            {
                arg1 = -1;
            }
            var loc1:*=1 - Math.abs(arg1);
            var loc2:*=0;
            if (arg1 > 0) 
            {
                loc2 = arg1 * 255;
            }
            var loc3:*;
            this.blueMultiplier = loc3 = loc1;
            this.greenMultiplier = loc3 = loc3;
            this.redMultiplier = loc3;
            this.blueOffset = loc3 = loc2;
            this.greenOffset = loc3 = loc3;
            this.redOffset = loc3;
            return;
        }

        public function setTint(arg1:uint, arg2:Number):void
        {
            this._tintColor = arg1;
            this._tintMultiplier = arg2;
            var loc4:*;
            this.blueMultiplier = loc4 = 1 - arg2;
            this.greenMultiplier = loc4 = loc4;
            this.redMultiplier = loc4;
            var loc1:*=arg1 >> 16 & 255;
            var loc2:*=arg1 >> 8 & 255;
            var loc3:*=arg1 & 255;
            this.redOffset = Math.round(loc1 * arg2);
            this.greenOffset = Math.round(loc2 * arg2);
            this.blueOffset = Math.round(loc3 * arg2);
            return;
        }

        public function get tintColor():uint
        {
            return this._tintColor;
        }

        public function set tintColor(arg1:uint):void
        {
            this.setTint(arg1, this.tintMultiplier);
            return;
        }

        internal function deriveTintColor():uint
        {
            var loc1:*=1 / this.tintMultiplier;
            var loc2:*=Math.round(this.redOffset * loc1);
            var loc3:*=Math.round(this.greenOffset * loc1);
            var loc4:*=Math.round(this.blueOffset * loc1);
            var loc5:*;
            return loc5 = loc2 << 16 | loc3 << 8 | loc4;
        }

        public function get tintMultiplier():Number
        {
            return this._tintMultiplier;
        }

        public function set tintMultiplier(arg1:Number):void
        {
            this.setTint(this.tintColor, arg1);
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.Color
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            if (!arg1) 
            {
                return this;
            }
            var loc1:*=arg1.elements()[0];
            if (!loc1) 
            {
                return this;
            }
            var loc5:*=0;
            var loc6:*=loc1.attributes();
            for each (loc2 in loc6) 
            {
                if ((loc3 = loc2.localName()) == "tintColor") 
                {
                    loc4 = Number(loc2.toString()) as uint;
                    this.tintColor = loc4;
                    continue;
                }
                this[loc3] = Number(loc2.toString());
            }
            return this;
        }

        public static function fromXML(arg1:XML):fl.motion.Color
        {
            return Color(new Color().parseXML(arg1));
        }

        public static function interpolateTransform(arg1:flash.geom.ColorTransform, arg2:flash.geom.ColorTransform, arg3:Number):flash.geom.ColorTransform
        {
            var loc1:*=1 - arg3;
            var loc2:*;
            return loc2 = new flash.geom.ColorTransform(arg1.redMultiplier * loc1 + arg2.redMultiplier * arg3, arg1.greenMultiplier * loc1 + arg2.greenMultiplier * arg3, arg1.blueMultiplier * loc1 + arg2.blueMultiplier * arg3, arg1.alphaMultiplier * loc1 + arg2.alphaMultiplier * arg3, arg1.redOffset * loc1 + arg2.redOffset * arg3, arg1.greenOffset * loc1 + arg2.greenOffset * arg3, arg1.blueOffset * loc1 + arg2.blueOffset * arg3, arg1.alphaOffset * loc1 + arg2.alphaOffset * arg3);
        }

        public static function interpolateColor(arg1:uint, arg2:uint, arg3:Number):uint
        {
            var loc1:*=1 - arg3;
            var loc2:*=arg1 >> 24 & 255;
            var loc3:*=arg1 >> 16 & 255;
            var loc4:*=arg1 >> 8 & 255;
            var loc5:*=arg1 & 255;
            var loc6:*=arg2 >> 24 & 255;
            var loc7:*=arg2 >> 16 & 255;
            var loc8:*=arg2 >> 8 & 255;
            var loc9:*=arg2 & 255;
            var loc10:*=loc2 * loc1 + loc6 * arg3;
            var loc11:*=loc3 * loc1 + loc7 * arg3;
            var loc12:*=loc4 * loc1 + loc8 * arg3;
            var loc13:*=loc5 * loc1 + loc9 * arg3;
            var loc14:*;
            return loc14 = loc10 << 24 | loc11 << 16 | loc12 << 8 | loc13;
        }

        internal var _tintColor:Number=0;

        internal var _tintMultiplier:Number=0;
    }
}


//      class ColorMatrix
package fl.motion 
{
    public class ColorMatrix extends fl.motion.DynamicMatrix
    {
        public function ColorMatrix()
        {
            super(5, 5);
            LoadIdentity();
            return;
        }

        public function SetBrightnessMatrix(arg1:Number):void
        {
            if (!m_matrix) 
            {
                return;
            }
            m_matrix[0][4] = arg1;
            m_matrix[1][4] = arg1;
            m_matrix[2][4] = arg1;
            return;
        }

        public function SetContrastMatrix(arg1:Number):void
        {
            if (!m_matrix) 
            {
                return;
            }
            var loc1:*=0.5 * (127 - arg1);
            arg1 = arg1 / 127;
            m_matrix[0][0] = arg1;
            m_matrix[1][1] = arg1;
            m_matrix[2][2] = arg1;
            m_matrix[0][4] = loc1;
            m_matrix[1][4] = loc1;
            m_matrix[2][4] = loc1;
            return;
        }

        public function SetSaturationMatrix(arg1:Number):void
        {
            if (!m_matrix) 
            {
                return;
            }
            var loc1:*=1 - arg1;
            var loc2:*=loc1 * LUMINANCER;
            m_matrix[0][0] = loc2 + arg1;
            m_matrix[1][0] = loc2;
            m_matrix[2][0] = loc2;
            loc2 = loc1 * LUMINANCEG;
            m_matrix[0][1] = loc2;
            m_matrix[1][1] = loc2 + arg1;
            m_matrix[2][1] = loc2;
            loc2 = loc1 * LUMINANCEB;
            m_matrix[0][2] = loc2;
            m_matrix[1][2] = loc2;
            m_matrix[2][2] = loc2 + arg1;
            return;
        }

        public function SetHueMatrix(arg1:Number):void
        {
            var loc10:*=0;
            if (!m_matrix) 
            {
                return;
            }
            LoadIdentity();
            var loc1:*=new fl.motion.DynamicMatrix(3, 3);
            var loc2:*=new fl.motion.DynamicMatrix(3, 3);
            var loc3:*=new fl.motion.DynamicMatrix(3, 3);
            var loc4:*=Math.cos(arg1);
            var loc5:*=Math.sin(arg1);
            var loc6:*=0.213;
            var loc7:*=0.715;
            var loc8:*=0.072;
            loc1.SetValue(0, 0, loc6);
            loc1.SetValue(1, 0, loc6);
            loc1.SetValue(2, 0, loc6);
            loc1.SetValue(0, 1, loc7);
            loc1.SetValue(1, 1, loc7);
            loc1.SetValue(2, 1, loc7);
            loc1.SetValue(0, 2, loc8);
            loc1.SetValue(1, 2, loc8);
            loc1.SetValue(2, 2, loc8);
            loc2.SetValue(0, 0, 1 - loc6);
            loc2.SetValue(1, 0, -loc6);
            loc2.SetValue(2, 0, -loc6);
            loc2.SetValue(0, 1, -loc7);
            loc2.SetValue(1, 1, 1 - loc7);
            loc2.SetValue(2, 1, -loc7);
            loc2.SetValue(0, 2, -loc8);
            loc2.SetValue(1, 2, -loc8);
            loc2.SetValue(2, 2, 1 - loc8);
            loc2.MultiplyNumber(loc4);
            loc3.SetValue(0, 0, -loc6);
            loc3.SetValue(1, 0, 0.143);
            loc3.SetValue(2, 0, -(1 - loc6));
            loc3.SetValue(0, 1, -loc7);
            loc3.SetValue(1, 1, 0.14);
            loc3.SetValue(2, 1, loc7);
            loc3.SetValue(0, 2, 1 - loc8);
            loc3.SetValue(1, 2, -0.283);
            loc3.SetValue(2, 2, loc8);
            loc3.MultiplyNumber(loc5);
            loc1.Add(loc2);
            loc1.Add(loc3);
            var loc9:*=0;
            while (loc9 < 3) 
            {
                loc10 = 0;
                while (loc10 < 3) 
                {
                    m_matrix[loc9][loc10] = loc1.GetValue(loc9, loc10);
                    ++loc10;
                }
                ++loc9;
            }
            return;
        }

        public function GetFlatArray():Array
        {
            var loc4:*=0;
            if (!m_matrix) 
            {
                return null;
            }
            var loc1:*=new Array();
            var loc2:*=0;
            var loc3:*=0;
            while (loc3 < 4) 
            {
                loc4 = 0;
                while (loc4 < 5) 
                {
                    loc1[loc2] = m_matrix[loc3][loc4];
                    ++loc2;
                    ++loc4;
                }
                ++loc3;
            }
            return loc1;
        }

        protected static const LUMINANCER:Number=0.3086;

        protected static const LUMINANCEG:Number=0.6094;

        protected static const LUMINANCEB:Number=0.082;
    }
}


class XFormData extends Object
{
    public function XFormData()
    {
        super();
        return;
    }

    public var ox:Number;

    public var oy:Number;

    public var oz:Number;
}

//      class CustomEase
package fl.motion 
{
    import flash.geom.*;
    
    public class CustomEase extends Object implements fl.motion.ITween
    {
        public function CustomEase(arg1:XML=null)
        {
            super();
            this.points = [];
            this.parseXML(arg1);
            this.firstNode = new flash.geom.Point(0, 0);
            this.lastNode = new flash.geom.Point(1, 1);
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.CustomEase
        {
            var loc2:*=null;
            if (!arg1) 
            {
                return this;
            }
            if (arg1.@target.length()) 
            {
                this.target = arg1.@target;
            }
            var loc1:*=arg1.elements();
            var loc3:*=0;
            var loc4:*=loc1;
            for each (loc2 in loc4) 
            {
                this.points.push(new flash.geom.Point(Number(loc2.@x), Number(loc2.@y)));
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg4 <= 0) 
            {
                return NaN;
            }
            var loc1:*;
            if ((loc1 = arg1 / arg4) <= 0) 
            {
                return arg2;
            }
            if (loc1 >= 1) 
            {
                return arg2 + arg3;
            }
            var loc2:*;
            (loc2 = [this.firstNode].concat(this.points)).push(this.lastNode);
            var loc3:*=getYForPercent(loc1, loc2);
            return arg2 + loc3 * arg3;
        }

        static function getYForPercent(arg1:Number, arg2:Array):Number
        {
            var loc6:*=0;
            var loc7:*=null;
            var loc1:*=new fl.motion.BezierSegment(arg2[0], arg2[1], arg2[2], arg2[3]);
            var loc2:*=[loc1];
            var loc3:*=3;
            while (loc3 < arg2.length - 3) 
            {
                loc2.push(new fl.motion.BezierSegment(arg2[loc3], arg2[loc3 + 1], arg2[loc3 + 2], arg2[loc3 + 3]));
                loc3 = loc3 + 3;
            }
            var loc4:*=loc1;
            if (arg2.length >= 5) 
            {
                loc6 = 0;
                while (loc6 < loc2.length) 
                {
                    if ((loc7 = loc2[loc6]).a.x <= arg1 && arg1 <= loc7.d.x) 
                    {
                        loc4 = loc7;
                    }
                    ++loc6;
                }
            }
            var loc5:*;
            return loc5 = loc4.getYForX(arg1);
        }

        public var points:Array;

        internal var firstNode:flash.geom.Point;

        internal var lastNode:flash.geom.Point;

        internal var _target:String="";
    }
}


//      class DynamicMatrix
package fl.motion 
{
    public class DynamicMatrix extends Object
    {
        public function DynamicMatrix(arg1:int, arg2:int)
        {
            super();
            this.Create(arg1, arg2);
            return;
        }

        protected function Create(arg1:int, arg2:int):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (arg1 > 0 && arg2 > 0) 
            {
                this.m_width = arg1;
                this.m_height = arg2;
                this.m_matrix = new Array(arg2);
                loc1 = 0;
                while (loc1 < arg2) 
                {
                    this.m_matrix[loc1] = new Array(arg1);
                    loc2 = 0;
                    while (loc2 < arg2) 
                    {
                        this.m_matrix[loc1][loc2] = 0;
                        ++loc2;
                    }
                    ++loc1;
                }
            }
            return;
        }

        protected function Destroy():void
        {
            this.m_matrix = null;
            return;
        }

        public function GetWidth():Number
        {
            return this.m_width;
        }

        public function GetHeight():Number
        {
            return this.m_height;
        }

        public function GetValue(arg1:int, arg2:int):Number
        {
            var loc1:*=0;
            if (arg1 >= 0 && arg1 < this.m_height && arg2 >= 0 && arg2 <= this.m_width) 
            {
                loc1 = this.m_matrix[arg1][arg2];
            }
            return loc1;
        }

        public function SetValue(arg1:int, arg2:int, arg3:Number):void
        {
            if (arg1 >= 0 && arg1 < this.m_height && arg2 >= 0 && arg2 <= this.m_width) 
            {
                this.m_matrix[arg1][arg2] = arg3;
            }
            return;
        }

        public function LoadIdentity():void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (this.m_matrix) 
            {
                loc1 = 0;
                while (loc1 < this.m_height) 
                {
                    loc2 = 0;
                    while (loc2 < this.m_width) 
                    {
                        if (loc1 != loc2) 
                        {
                            this.m_matrix[loc1][loc2] = 0;
                        }
                        else 
                        {
                            this.m_matrix[loc1][loc2] = 1;
                        }
                        ++loc2;
                    }
                    ++loc1;
                }
            }
            return;
        }

        public function LoadZeros():void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (this.m_matrix) 
            {
                loc1 = 0;
                while (loc1 < this.m_height) 
                {
                    loc2 = 0;
                    while (loc2 < this.m_width) 
                    {
                        this.m_matrix[loc1][loc2] = 0;
                        ++loc2;
                    }
                    ++loc1;
                }
            }
            return;
        }

        public function Multiply(arg1:fl.motion.DynamicMatrix, arg2:int=0):Boolean
        {
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=NaN;
            var loc7:*=0;
            var loc8:*=0;
            if (!this.m_matrix || !arg1) 
            {
                return false;
            }
            var loc1:*=arg1.GetHeight();
            var loc2:*=arg1.GetWidth();
            if (arg2 != MATRIX_ORDER_APPEND) 
            {
                if (this.m_height != loc2) 
                {
                    return false;
                }
                loc3 = new fl.motion.DynamicMatrix(this.m_width, loc1);
                loc4 = 0;
                while (loc4 < loc1) 
                {
                    loc5 = 0;
                    while (loc5 < this.m_width) 
                    {
                        loc6 = 0;
                        loc7 = 0;
                        loc8 = 0;
                        while (loc7 < Math.max(loc1, this.m_height) && loc8 < Math.max(loc2, this.m_width)) 
                        {
                            loc6 = loc6 + this.m_matrix[loc7][loc5] * arg1.GetValue(loc4, loc8);
                            ++loc7;
                            ++loc8;
                        }
                        loc3.SetValue(loc4, loc5, loc6);
                        ++loc5;
                    }
                    ++loc4;
                }
                this.Destroy();
                this.Create(this.m_width, loc1);
                loc4 = 0;
                while (loc4 < loc1) 
                {
                    loc5 = 0;
                    while (loc5 < this.m_width) 
                    {
                        this.m_matrix[loc4][loc5] = loc3.GetValue(loc4, loc5);
                        ++loc5;
                    }
                    ++loc4;
                }
            }
            else 
            {
                if (this.m_width != loc1) 
                {
                    return false;
                }
                loc3 = new fl.motion.DynamicMatrix(loc2, this.m_height);
                loc4 = 0;
                while (loc4 < this.m_height) 
                {
                    loc5 = 0;
                    while (loc5 < loc2) 
                    {
                        loc6 = 0;
                        loc7 = 0;
                        loc8 = 0;
                        while (loc7 < Math.max(this.m_height, loc1) && loc8 < Math.max(this.m_width, loc2)) 
                        {
                            loc6 = loc6 + arg1.GetValue(loc7, loc5) * this.m_matrix[loc4][loc8];
                            ++loc7;
                            ++loc8;
                        }
                        loc3.SetValue(loc4, loc5, loc6);
                        ++loc5;
                    }
                    ++loc4;
                }
                this.Destroy();
                this.Create(loc2, this.m_height);
                loc4 = 0;
                while (loc4 < loc1) 
                {
                    loc5 = 0;
                    while (loc5 < this.m_width) 
                    {
                        this.m_matrix[loc4][loc5] = loc3.GetValue(loc4, loc5);
                        ++loc5;
                    }
                    ++loc4;
                }
            }
            return true;
        }

        public function MultiplyNumber(arg1:Number):Boolean
        {
            var loc2:*=0;
            var loc3:*=NaN;
            if (!this.m_matrix) 
            {
                return false;
            }
            var loc1:*=0;
            while (loc1 < this.m_height) 
            {
                loc2 = 0;
                while (loc2 < this.m_width) 
                {
                    loc3 = 0;
                    loc3 = this.m_matrix[loc1][loc2] * arg1;
                    this.m_matrix[loc1][loc2] = loc3;
                    ++loc2;
                }
                ++loc1;
            }
            return true;
        }

        public function Add(arg1:fl.motion.DynamicMatrix):Boolean
        {
            var loc4:*=0;
            var loc5:*=NaN;
            if (!this.m_matrix || !arg1) 
            {
                return false;
            }
            var loc1:*=arg1.GetHeight();
            var loc2:*=arg1.GetWidth();
            if (!(this.m_width == loc2) || !(this.m_height == loc1)) 
            {
                return false;
            }
            var loc3:*=0;
            while (loc3 < this.m_height) 
            {
                loc4 = 0;
                while (loc4 < this.m_width) 
                {
                    loc5 = 0;
                    loc5 = this.m_matrix[loc3][loc4] + arg1.GetValue(loc3, loc4);
                    this.m_matrix[loc3][loc4] = loc5;
                    ++loc4;
                }
                ++loc3;
            }
            return true;
        }

        public static const MATRIX_ORDER_PREPEND:int=0;

        public static const MATRIX_ORDER_APPEND:int=1;

        protected var m_width:int;

        protected var m_height:int;

        protected var m_matrix:Array;
    }
}


//      class FunctionEase
package fl.motion 
{
    import flash.utils.*;
    
    public class FunctionEase extends Object implements fl.motion.ITween
    {
        public function FunctionEase(arg1:XML=null)
        {
            super();
            this.parseXML(arg1);
            return;
        }

        public function get functionName():String
        {
            return this._functionName;
        }

        public function set functionName(arg1:String):void
        {
            var loc1:*=arg1.split(".");
            var loc2:*=loc1.pop();
            var loc3:*=loc1.join(".");
            var loc4:*;
            if ((loc4 = flash.utils.getDefinitionByName(loc3) as Class)[loc2] is Function) 
            {
                this.easingFunction = loc4[loc2];
                this._functionName = arg1;
            }
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.FunctionEase
        {
            if (!arg1) 
            {
                return this;
            }
            if (arg1.@functionName.length()) 
            {
                this.functionName = arg1.@functionName;
            }
            if (arg1.@target.length()) 
            {
                this.target = arg1.@target;
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*=null;
            if (this.parameters is Array) 
            {
                loc1 = [arg1, arg2, arg3, arg4].concat(this.parameters);
                return this.easingFunction.apply(null, loc1);
            }
            return this.easingFunction(arg1, arg2, arg3, arg4);
        }

        internal var _functionName:String="";

        public var easingFunction:Function=null;

        public var parameters:Array=null;

        internal var _target:String="";
    }
}


//      class ITween
package fl.motion 
{
    public interface ITween
    {
        function get target():String;

        function set target(arg1:String):void;

        function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number;
    }
}


//      class Keyframe
package fl.motion 
{
    import flash.filters.*;
    import flash.utils.*;
    
    public class Keyframe extends fl.motion.KeyframeBase
    {
        public function Keyframe(arg1:XML=null)
        {
            super(arg1);
            this.tweens = [];
            this.parseXML(arg1);
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.KeyframeBase
        {
            var xml:XML=null;
            var indexString:String;
            var indexValue:int;
            var tweenableNames:Array;
            var tweenableName:String;
            var elements:XMLList;
            var filtersArray:Array;
            var child:XML;
            var attribute:XML;
            var attributeValue:String;
            var name:String;
            var tweenChildren:XMLList;
            var tweenChild:XML;
            var tweenName:String;
            var filtersChildren:XMLList;
            var filterXML:XML;
            var filterName:String;
            var filterClassName:String;
            var filterClass:Object;
            var filterInstance:flash.filters.BitmapFilter;
            var filterTypeInfo:XML;
            var accessorList:XMLList;
            var ratios:Array;
            var attrib:XML;
            var attribName:String;
            var accessor:XML;
            var attribType:String;
            var attribValue:String;
            var uintValue:uint;
            var valuesArray:Array;

            var loc1:*;
            tweenableName = null;
            elements = null;
            filtersArray = null;
            child = null;
            attribute = null;
            attributeValue = null;
            name = null;
            tweenChildren = null;
            tweenChild = null;
            tweenName = null;
            filtersChildren = null;
            filterXML = null;
            filterName = null;
            filterClassName = null;
            filterClass = null;
            filterInstance = null;
            filterTypeInfo = null;
            accessorList = null;
            ratios = null;
            attrib = null;
            attribName = null;
            accessor = null;
            attribType = null;
            attribValue = null;
            uintValue = 0;
            valuesArray = null;
            xml = arg1;
            if (!xml) 
            {
                return this;
            }
            indexString = xml.@index.toXMLString();
            indexValue = parseInt(indexString);
            if (indexString) 
            {
                this.index = indexValue;
            }
            else 
            {
                throw new Error("<Keyframe> is missing the required attribute \"index\".");
            }
            if (xml.@label.length()) 
            {
                this.label = xml.@label;
            }
            if (xml.@tweenScale.length()) 
            {
                this.tweenScale = xml.@tweenScale.toString() == "true";
            }
            if (xml.@tweenSnap.length()) 
            {
                this.tweenSnap = xml.@tweenSnap.toString() == "true";
            }
            if (xml.@tweenSync.length()) 
            {
                this.tweenSync = xml.@tweenSync.toString() == "true";
            }
            if (xml.@blendMode.length()) 
            {
                this.blendMode = xml.@blendMode;
            }
            if (xml.@cacheAsBitmap.length()) 
            {
                this.cacheAsBitmap = xml.@cacheAsBitmap.toString() == "true";
            }
            if (xml.@rotateDirection.length()) 
            {
                this.rotateDirection = xml.@rotateDirection;
            }
            if (xml.@rotateTimes.length()) 
            {
                this.rotateTimes = parseInt(xml.@rotateTimes);
            }
            if (xml.@orientToPath.length()) 
            {
                this.orientToPath = xml.@orientToPath.toString() == "true";
            }
            if (xml.@blank.length()) 
            {
                this.blank = xml.@blank.toString() == "true";
            }
            tweenableNames = ["x", "y", "scaleX", "scaleY", "rotation", "skewX", "skewY"];
            var loc2:*=0;
            var loc3:*=tweenableNames;
            for each (tweenableName in loc3) 
            {
                attribute = xml.attribute(tweenableName)[0];
                if (!attribute) 
                {
                    continue;
                }
                attributeValue = attribute.toString();
                if (!attributeValue) 
                {
                    continue;
                }
                this[tweenableName] = Number(attributeValue);
            }
            elements = xml.elements();
            filtersArray = [];
            loc2 = 0;
            loc3 = elements;
            for each (child in loc3) 
            {
                name = child.localName();
                if (name != "tweens") 
                {
                    if (name != "filters") 
                    {
                        if (name == "color") 
                        {
                            this.color = fl.motion.Color.fromXML(child);
                        }
                    }
                    else 
                    {
                        filtersChildren = child.elements();
                        loc4 = 0;
                        loc5 = filtersChildren;
                        for each (filterXML in loc5) 
                        {
                            filterName = filterXML.localName();
                            filterClassName = "flash.filters." + filterName;
                            if (filterName == "AdjustColorFilter") 
                            {
                                continue;
                            }
                            filterClass = flash.utils.getDefinitionByName(filterClassName);
                            filterInstance = new filterClass();
                            filterTypeInfo = flash.utils.describeType(filterInstance);
                            accessorList = filterTypeInfo.accessor;
                            ratios = [];
                            var loc6:*=0;
                            var loc7:*=filterXML.attributes();
                            for each (attrib in loc7) 
                            {
                                attribName = attrib.localName();
                                var loc9:*=0;
                                var loc10:*=accessorList;
                                var loc8:*=new XMLList("");
                                for each (var loc11:* in loc10) 
                                {
                                    var loc12:*;
                                    with (loc12 = loc11) 
                                    {
                                        if (@name == attribName) 
                                        {
                                            loc8[loc9] = loc11;
                                        }
                                    }
                                }
                                accessor = loc8[0];
                                attribType = accessor.@type;
                                attribValue = attrib.toString();
                                if (attribType == "int") 
                                {
                                    filterInstance[attribName] = parseInt(attribValue);
                                    continue;
                                }
                                if (attribType == "uint") 
                                {
                                    filterInstance[attribName] = parseInt(attribValue) as uint;
                                    uintValue = parseInt(attribValue) as uint;
                                    continue;
                                }
                                if (attribType == "Number") 
                                {
                                    filterInstance[attribName] = Number(attribValue);
                                    continue;
                                }
                                if (attribType == "Boolean") 
                                {
                                    filterInstance[attribName] = attribValue == "true";
                                    continue;
                                }
                                if (attribType == "Array") 
                                {
                                    attribValue = attribValue.substring(1, (attribValue.length - 1));
                                    valuesArray = null;
                                    if (attribName == "ratios" || attribName == "colors") 
                                    {
                                        valuesArray = splitUint(attribValue);
                                    }
                                    else if (attribName == "alphas") 
                                    {
                                        valuesArray = splitNumber(attribValue);
                                    }
                                    if (attribName != "ratios") 
                                    {
                                        if (valuesArray) 
                                        {
                                            filterInstance[attribName] = valuesArray;
                                        }
                                    }
                                    else 
                                    {
                                        ratios = valuesArray;
                                    }
                                    continue;
                                }
                                if (attribType != "String") 
                                {
                                    continue;
                                }
                                filterInstance[attribName] = attribValue;
                            }
                            if (ratios.length) 
                            {
                                filterInstance["ratios"] = ratios;
                            }
                            filtersArray.push(filterInstance);
                        }
                    }
                }
                else 
                {
                    tweenChildren = child.elements();
                    var loc4:*=0;
                    var loc5:*=tweenChildren;
                    for each (tweenChild in loc5) 
                    {
                        tweenName = tweenChild.localName();
                        if (tweenName == "SimpleEase") 
                        {
                            this.tweens.push(new fl.motion.SimpleEase(tweenChild));
                            continue;
                        }
                        if (tweenName == "CustomEase") 
                        {
                            this.tweens.push(new fl.motion.CustomEase(tweenChild));
                            continue;
                        }
                        if (tweenName == "BezierEase") 
                        {
                            this.tweens.push(new fl.motion.BezierEase(tweenChild));
                            continue;
                        }
                        if (tweenName != "FunctionEase") 
                        {
                            continue;
                        }
                        this.tweens.push(new fl.motion.FunctionEase(tweenChild));
                    }
                }
                this.filters = filtersArray;
            }
            return this;
        }

        public function getTween(arg1:String=""):fl.motion.ITween
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this.tweens;
            for each (loc1 in loc3) 
            {
                if (!(loc1.target == arg1 || loc1.target == "rotation" && (arg1 == "skewX" || arg1 == "skewY") || loc1.target == "position" && (arg1 == "x" || arg1 == "y") || loc1.target == "scale" && (arg1 == "scaleX" || arg1 == "scaleY"))) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        protected override function hasTween():Boolean
        {
            return !(this.getTween() == null);
        }

        public override function get tweensLength():int
        {
            return this.tweens.length;
        }

        internal static function splitNumber(arg1:String):Array
        {
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length) 
            {
                loc1[loc2] = Number(loc1[loc2]);
                ++loc2;
            }
            return loc1;
        }

        internal static function splitUint(arg1:String):Array
        {
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length) 
            {
                loc1[loc2] = parseInt(loc1[loc2]) as uint;
                ++loc2;
            }
            return loc1;
        }

        internal static function splitInt(arg1:String):Array
        {
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length) 
            {
                loc1[loc2] = parseInt(loc1[loc2]) as int;
                ++loc2;
            }
            return loc1;
        }

        public var tweens:Array;

        public var tweenScale:Boolean=true;

        public var tweenSnap:Boolean=false;

        public var tweenSync:Boolean=false;
    }
}


//      class KeyframeBase
package fl.motion 
{
    import flash.display.*;
    import flash.filters.*;
    import flash.geom.*;
    import flash.utils.*;
    
    public class KeyframeBase extends Object
    {
        public function KeyframeBase(arg1:XML=null)
        {
            this.blendMode = flash.display.BlendMode.NORMAL;
            super();
            this.filters = [];
            this.adjustColorObjects = new flash.utils.Dictionary();
            return;
        }

        public function get tweensLength():int
        {
            return 0;
        }

        public function get index():int
        {
            return this._index;
        }

        public function set index(arg1:int):void
        {
            this._index = arg1 < 0 ? 0 : arg1;
            if (this._index == 0) 
            {
                this.setDefaults();
            }
            return;
        }

        internal function setDefaults():void
        {
            if (isNaN(this.x)) 
            {
                this.x = 0;
            }
            if (isNaN(this.y)) 
            {
                this.y = 0;
            }
            if (isNaN(this.z)) 
            {
                this.z = 0;
            }
            if (isNaN(this.scaleX)) 
            {
                this.scaleX = 1;
            }
            if (isNaN(this.scaleY)) 
            {
                this.scaleY = 1;
            }
            if (isNaN(this.skewX)) 
            {
                this.skewX = 0;
            }
            if (isNaN(this.skewY)) 
            {
                this.skewY = 0;
            }
            if (isNaN(this.rotationConcat)) 
            {
                this.rotationConcat = 0;
            }
            if (!this.color) 
            {
                this.color = new fl.motion.Color();
            }
            return;
        }

        public function getValue(arg1:String):Number
        {
            return Number(this[arg1]);
        }

        public function setValue(arg1:String, arg2:Number):void
        {
            this[arg1] = arg2;
            return;
        }

        protected function hasTween():Boolean
        {
            return false;
        }

        public function affectsTweenable(arg1:String=""):Boolean
        {
            return !arg1 || !isNaN(this[arg1]) || arg1 == "color" && this.color || arg1 == "filters" && this.filters.length || arg1 == "matrix3D" && this.matrix3D || arg1 == "matrix" && this.matrix || this.blank || this.hasTween();
        }

        public function setAdjustColorProperty(arg1:int, arg2:String, arg3:*):void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (arg1 >= this.filters.length) 
            {
                return;
            }
            var loc1:*;
            if ((loc1 = this.adjustColorObjects[arg1]) == null) 
            {
                loc1 = new fl.motion.AdjustColor();
                this.adjustColorObjects[arg1] = loc1;
            }
            var loc4:*=arg2;
            switch (loc4) 
            {
                case "adjustColorBrightness":
                {
                    loc1.brightness = arg3;
                    break;
                }
                case "adjustColorContrast":
                {
                    loc1.contrast = arg3;
                    break;
                }
                case "adjustColorSaturation":
                {
                    loc1.saturation = arg3;
                    break;
                }
                case "adjustColorHue":
                {
                    loc1.hue = arg3;
                    break;
                }
            }
            if (loc1.AllValuesAreSet()) 
            {
                if (loc2 = this.filters[arg1] as flash.filters.ColorMatrixFilter) 
                {
                    if (loc3 = loc1.CalculateFinalFlatArray()) 
                    {
                        loc2.matrix = loc3;
                    }
                }
            }
            return;
        }

        public function get rotation():Number
        {
            return this.skewY;
        }

        public function set rotation(arg1:Number):void
        {
            if (isNaN(this.skewX) || isNaN(this.skewY)) 
            {
                this.skewX = arg1;
            }
            else 
            {
                this.skewX = this.skewX + (arg1 - this.skewY);
            }
            this.skewY = arg1;
            return;
        }

        internal var _index:int=-1;

        public var x:Number=NaN;

        public var y:Number=NaN;

        public var scaleX:Number=NaN;

        public var scaleY:Number=NaN;

        public var skewX:Number=NaN;

        public var skewY:Number=NaN;

        public var rotationConcat:Number=NaN;

        public var useRotationConcat:Boolean=false;

        public var filters:Array;

        public var color:fl.motion.Color;

        public var label:String="";

        public var loop:String;

        public var firstFrame:String;

        public var matrix:flash.geom.Matrix=null;

        public var z:Number=NaN;

        public var rotationX:Number=NaN;

        public var rotationY:Number=NaN;

        public var adjustColorObjects:flash.utils.Dictionary=null;

        public var blendMode:String;

        public var rotateDirection:String="auto";

        public var rotateTimes:uint=0;

        public var orientToPath:Boolean=false;

        public var blank:Boolean=false;

        public var matrix3D:Object=null;

        public var cacheAsBitmap:Boolean=false;
    }
}


//      class MatrixTransformer
package fl.motion 
{
    import flash.geom.*;
    
    public class MatrixTransformer extends Object
    {
        public function MatrixTransformer()
        {
            super();
            return;
        }

        public static function getScaleX(arg1:flash.geom.Matrix):Number
        {
            return Math.sqrt(arg1.a * arg1.a + arg1.b * arg1.b);
        }

        public static function setScaleX(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc1:*=getScaleX(arg1);
            if (loc1) 
            {
                loc2 = arg2 / loc1;
                arg1.a = arg1.a * loc2;
                arg1.b = arg1.b * loc2;
            }
            else 
            {
                loc3 = getSkewYRadians(arg1);
                arg1.a = Math.cos(loc3) * arg2;
                arg1.b = Math.sin(loc3) * arg2;
            }
            return;
        }

        public static function getScaleY(arg1:flash.geom.Matrix):Number
        {
            return Math.sqrt(arg1.c * arg1.c + arg1.d * arg1.d);
        }

        public static function setScaleY(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc1:*=getScaleY(arg1);
            if (loc1) 
            {
                loc2 = arg2 / loc1;
                arg1.c = arg1.c * loc2;
                arg1.d = arg1.d * loc2;
            }
            else 
            {
                loc3 = getSkewXRadians(arg1);
                arg1.c = (-Math.sin(loc3)) * arg2;
                arg1.d = Math.cos(loc3) * arg2;
            }
            return;
        }

        public static function getSkewXRadians(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(-arg1.c, arg1.d);
        }

        public static function setSkewXRadians(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc1:*=getScaleY(arg1);
            arg1.c = (-loc1) * Math.sin(arg2);
            arg1.d = loc1 * Math.cos(arg2);
            return;
        }

        public static function getSkewYRadians(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(arg1.b, arg1.a);
        }

        public static function setSkewYRadians(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc1:*=getScaleX(arg1);
            arg1.a = loc1 * Math.cos(arg2);
            arg1.b = loc1 * Math.sin(arg2);
            return;
        }

        public static function getSkewX(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(-arg1.c, arg1.d) * 180 / Math.PI;
        }

        public static function setSkewX(arg1:flash.geom.Matrix, arg2:Number):void
        {
            setSkewXRadians(arg1, arg2 * Math.PI / 180);
            return;
        }

        public static function getSkewY(arg1:flash.geom.Matrix):Number
        {
            return Math.atan2(arg1.b, arg1.a) * 180 / Math.PI;
        }

        public static function setSkewY(arg1:flash.geom.Matrix, arg2:Number):void
        {
            setSkewYRadians(arg1, arg2 * Math.PI / 180);
            return;
        }

        public static function getRotationRadians(arg1:flash.geom.Matrix):Number
        {
            return getSkewYRadians(arg1);
        }

        public static function setRotationRadians(arg1:flash.geom.Matrix, arg2:Number):void
        {
            var loc1:*=getRotationRadians(arg1);
            var loc2:*=getSkewXRadians(arg1);
            setSkewXRadians(arg1, loc2 + arg2 - loc1);
            setSkewYRadians(arg1, arg2);
            return;
        }

        public static function getRotation(arg1:flash.geom.Matrix):Number
        {
            return getRotationRadians(arg1) * 180 / Math.PI;
        }

        public static function setRotation(arg1:flash.geom.Matrix, arg2:Number):void
        {
            setRotationRadians(arg1, arg2 * Math.PI / 180);
            return;
        }

        public static function rotateAroundInternalPoint(arg1:flash.geom.Matrix, arg2:Number, arg3:Number, arg4:Number):void
        {
            var loc1:*=new flash.geom.Point(arg2, arg3);
            loc1 = arg1.transformPoint(loc1);
            arg1.tx = arg1.tx - loc1.x;
            arg1.ty = arg1.ty - loc1.y;
            arg1.rotate(arg4 * Math.PI / 180);
            arg1.tx = arg1.tx + loc1.x;
            arg1.ty = arg1.ty + loc1.y;
            return;
        }

        public static function rotateAroundExternalPoint(arg1:flash.geom.Matrix, arg2:Number, arg3:Number, arg4:Number):void
        {
            arg1.tx = arg1.tx - arg2;
            arg1.ty = arg1.ty - arg3;
            arg1.rotate(arg4 * Math.PI / 180);
            arg1.tx = arg1.tx + arg2;
            arg1.ty = arg1.ty + arg3;
            return;
        }

        public static function matchInternalPointWithExternal(arg1:flash.geom.Matrix, arg2:flash.geom.Point, arg3:flash.geom.Point):void
        {
            var loc1:*=arg1.transformPoint(arg2);
            var loc2:*=arg3.x - loc1.x;
            var loc3:*=arg3.y - loc1.y;
            arg1.tx = arg1.tx + loc2;
            arg1.ty = arg1.ty + loc3;
            return;
        }
    }
}


//      class MatrixTransformer3D
package fl.motion 
{
    import __AS3__.vec.*;
    import flash.geom.*;
    
    public class MatrixTransformer3D extends Object
    {
        public function MatrixTransformer3D()
        {
            super();
            return;
        }

        public static function rotateAboutAxis(arg1:Number, arg2:int):flash.geom.Matrix3D
        {
            var loc1:*=Math.cos(arg1);
            var loc2:*=Math.sin(arg1);
            var loc3:*=new Vector.<Number>();
            var loc4:*=arg2;
            switch (loc4) 
            {
                case AXIS_X:
                {
                    loc3[0] = 1;
                    loc3[1] = 0;
                    loc3[2] = 0;
                    loc3[3] = 0;
                    loc3[4] = 0;
                    loc3[5] = loc1;
                    loc3[6] = loc2;
                    loc3[7] = 0;
                    loc3[8] = 0;
                    loc3[9] = -loc2;
                    loc3[10] = loc1;
                    loc3[11] = 0;
                    loc3[12] = 0;
                    loc3[13] = 0;
                    loc3[14] = 0;
                    loc3[15] = 1;
                    break;
                }
                case AXIS_Y:
                {
                    loc3[0] = loc1;
                    loc3[1] = 0;
                    loc3[2] = -loc2;
                    loc3[3] = 0;
                    loc3[4] = 0;
                    loc3[5] = 1;
                    loc3[6] = 0;
                    loc3[7] = 0;
                    loc3[8] = loc2;
                    loc3[9] = 0;
                    loc3[10] = loc1;
                    loc3[11] = 0;
                    loc3[12] = 0;
                    loc3[13] = 0;
                    loc3[14] = 0;
                    loc3[15] = 1;
                    break;
                }
                case AXIS_Z:
                {
                    loc3[0] = loc1;
                    loc3[1] = loc2;
                    loc3[2] = 0;
                    loc3[3] = 0;
                    loc3[4] = -loc2;
                    loc3[5] = loc1;
                    loc3[6] = 0;
                    loc3[7] = 0;
                    loc3[8] = 0;
                    loc3[9] = 0;
                    loc3[10] = 1;
                    loc3[11] = 0;
                    loc3[12] = 0;
                    loc3[13] = 0;
                    loc3[14] = 0;
                    loc3[15] = 1;
                    break;
                }
            }
            return new flash.geom.Matrix3D(loc3);
        }

        public static function getVector(arg1:flash.geom.Matrix3D, arg2:int):flash.geom.Vector3D
        {
            var loc1:*=arg2;
            switch (loc1) 
            {
                case 0:
                {
                    return new flash.geom.Vector3D(arg1.rawData[0], arg1.rawData[1], arg1.rawData[2], arg1.rawData[3]);
                }
                case 1:
                {
                    return new flash.geom.Vector3D(arg1.rawData[4], arg1.rawData[5], arg1.rawData[6], arg1.rawData[7]);
                }
                case 2:
                {
                    return new flash.geom.Vector3D(arg1.rawData[8], arg1.rawData[9], arg1.rawData[10], arg1.rawData[11]);
                }
                case 3:
                {
                    return new flash.geom.Vector3D(arg1.rawData[12], arg1.rawData[13], arg1.rawData[14], arg1.rawData[15]);
                }
            }
            return new flash.geom.Vector3D(0, 0, 0, 0);
        }

        public static function getMatrix3D(arg1:flash.geom.Vector3D, arg2:flash.geom.Vector3D, arg3:flash.geom.Vector3D, arg4:flash.geom.Vector3D):flash.geom.Matrix3D
        {
            var loc1:*;
            (loc1 = new Vector.<Number>())[0] = arg1.x;
            loc1[1] = arg1.y;
            loc1[2] = arg1.z;
            loc1[3] = arg1.w;
            loc1[4] = arg2.x;
            loc1[5] = arg2.y;
            loc1[6] = arg2.z;
            loc1[7] = arg2.w;
            loc1[8] = arg3.x;
            loc1[9] = arg3.y;
            loc1[10] = arg3.z;
            loc1[11] = arg3.w;
            loc1[12] = arg4.x;
            loc1[13] = arg4.y;
            loc1[14] = arg4.z;
            loc1[15] = arg4.w;
            return new flash.geom.Matrix3D(loc1);
        }

        public static function rotateAxis(arg1:flash.geom.Matrix3D, arg2:Number, arg3:int):flash.geom.Matrix3D
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=new flash.geom.Matrix3D();
            var loc2:*=getVector(arg1, arg3);
            loc1.prependRotation(arg2 * 180 / Math.PI, loc2);
            var loc3:*=0;
            while (loc3 < 3) 
            {
                if (loc3 != arg3) 
                {
                    loc4 = getVector(arg1, loc3);
                    loc5 = new Array(3);
                    loc6 = 0;
                    while (loc6 < 3) 
                    {
                        loc8 = getVector(loc1, loc6);
                        loc5[loc6] = loc4.dotProduct(loc8);
                        ++loc6;
                    }
                    loc4.x = loc5[0];
                    loc4.y = loc5[1];
                    loc4.z = loc5[2];
                    loc4.w = 0;
                    loc4 = normalizeVector(loc4);
                    (loc7 = Vector.<Number>(getRawDataVector(arg1)))[loc3 * 4] = loc4.x;
                    loc7[loc3 * 4 + 1] = loc4.y;
                    loc7[loc3 * 4 + 2] = loc4.z;
                    loc7[loc3 * 4 + 3] = loc4.w;
                    arg1 = new flash.geom.Matrix3D(Vector.<Number>(loc7));
                }
                ++loc3;
            }
            return arg1;
        }

        public static function normalizeVector(arg1:flash.geom.Vector3D):flash.geom.Vector3D
        {
            var loc1:*=1 / arg1.length;
            var loc2:*=new flash.geom.Vector3D();
            loc2.x = arg1.x * loc1;
            loc2.y = arg1.y * loc1;
            loc2.z = arg1.z * loc1;
            loc2.w = arg1.w;
            return loc2;
        }

        public static function getRawDataVector(arg1:flash.geom.Matrix3D):__AS3__.vec.Vector.<Number>
        {
            var loc1:*=new Vector.<Number>();
            loc1[0] = arg1.rawData[0];
            loc1[1] = arg1.rawData[1];
            loc1[2] = arg1.rawData[2];
            loc1[3] = arg1.rawData[3];
            loc1[4] = arg1.rawData[4];
            loc1[5] = arg1.rawData[5];
            loc1[6] = arg1.rawData[6];
            loc1[7] = arg1.rawData[7];
            loc1[8] = arg1.rawData[8];
            loc1[9] = arg1.rawData[9];
            loc1[10] = arg1.rawData[10];
            loc1[11] = arg1.rawData[11];
            loc1[12] = arg1.rawData[12];
            loc1[13] = arg1.rawData[13];
            loc1[14] = arg1.rawData[14];
            loc1[15] = arg1.rawData[15];
            return loc1;
        }

        public static const AXIS_X:int=0;

        public static const AXIS_Y:int=1;

        public static const AXIS_Z:int=2;
    }
}


//      class Motion
package fl.motion 
{
    import flash.filters.*;
    import flash.geom.*;
    import flash.utils.*;
    
    public class Motion extends fl.motion.MotionBase
    {
        public function Motion(arg1:XML=null)
        {
            var loc1:*=null;
            super();
            this.keyframes = [];
            this.parseXML(arg1);
            if (!this.source) 
            {
                this.source = new fl.motion.Source();
            }
            if (this.duration == 0) 
            {
                loc1 = this.getNewKeyframe() as fl.motion.Keyframe;
                loc1.index = 0;
                this.addKeyframe(loc1);
            }
            return;
        }

        public function get keyframesCompact():Array
        {
            var loc1:*=null;
            this._keyframesCompact = [];
            var loc2:*=0;
            var loc3:*=this.keyframes;
            for each (loc1 in loc3) 
            {
                if (!loc1) 
                {
                    continue;
                }
                this._keyframesCompact.push(loc1);
            }
            return this._keyframesCompact;
        }

        public function set keyframesCompact(arg1:Array):void
        {
            var loc1:*=null;
            this._keyframesCompact = arg1.concat();
            this.keyframes = [];
            var loc2:*=0;
            var loc3:*=this._keyframesCompact;
            for each (loc1 in loc3) 
            {
                this.addKeyframe(loc1);
            }
            return;
        }

        public override function getColorTransform(arg1:int):flash.geom.ColorTransform
        {
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "color") as fl.motion.Keyframe;
            if (!loc2 || !loc2.color) 
            {
                return null;
            }
            var loc3:*=loc2.color;
            var loc4:*=arg1 - loc2.index;
            var loc5:*=loc2.getTween("color") || loc2.getTween("alpha") || loc2.getTween();
            if (loc4 == 0 || !loc5) 
            {
                loc1 = loc3;
            }
            else if (loc5) 
            {
                if (!(loc6 = this.getNextKeyframe(arg1, "color") as fl.motion.Keyframe) || !loc6.color) 
                {
                    loc1 = loc3;
                }
                else 
                {
                    loc7 = loc6.color;
                    loc8 = loc6.index - loc2.index;
                    loc9 = loc5.getValue(loc4, 0, 1, loc8);
                    loc1 = fl.motion.Color.interpolateTransform(loc3, loc7, loc9);
                }
            }
            return loc1;
        }

        public override function getFilters(arg1:Number):Array
        {
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "filters") as fl.motion.Keyframe;
            if (!loc2 || loc2.filters && !loc2.filters.length) 
            {
                return [];
            }
            var loc3:*=loc2.filters;
            var loc4:*=arg1 - loc2.index;
            var loc5:*=loc2.getTween("filters") || loc2.getTween();
            if (loc4 == 0 || !loc5) 
            {
                loc1 = loc3;
            }
            else if (loc5) 
            {
                if (!(loc6 = this.getNextKeyframe(arg1, "filters") as fl.motion.Keyframe) || !loc6.filters.length) 
                {
                    loc1 = loc3;
                }
                else 
                {
                    loc7 = loc6.filters;
                    loc8 = loc6.index - loc2.index;
                    loc9 = loc5.getValue(loc4, 0, 1, loc8);
                    loc1 = interpolateFilters(loc3, loc7, loc9);
                }
            }
            return loc1;
        }

        protected override function findTweenedValue(arg1:Number, arg2:String, arg3:fl.motion.KeyframeBase, arg4:Number, arg5:Number):Number
        {
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc1:*;
            if (!(loc1 = arg3 as fl.motion.Keyframe)) 
            {
                return NaN;
            }
            var loc2:*;
            if (!(loc2 = loc1.getTween(arg2) || loc1.getTween()) || !loc1.tweenScale && (arg2 == fl.motion.Tweenables.SCALE_X || arg2 == fl.motion.Tweenables.SCALE_Y) || loc1.rotateDirection == fl.motion.RotateDirection.NONE && (arg2 == fl.motion.Tweenables.ROTATION || arg2 == fl.motion.Tweenables.SKEW_X || arg2 == fl.motion.Tweenables.SKEW_Y)) 
            {
                return arg5;
            }
            var loc3:*=arg2;
            if (loc2.target == "") 
            {
                loc3 = "";
            }
            var loc4:*;
            if (!(loc4 = this.getNextKeyframe(arg1, loc3) as fl.motion.Keyframe) || loc4.blank) 
            {
                return arg5;
            }
            loc5 = loc4.getValue(arg2);
            if (isNaN(loc5)) 
            {
                loc5 = arg5;
            }
            loc6 = loc5 - arg5;
            if (arg2 == fl.motion.Tweenables.SKEW_X || arg2 == fl.motion.Tweenables.SKEW_Y || arg2 == fl.motion.Tweenables.ROTATION) 
            {
                if (loc1.rotateDirection != fl.motion.RotateDirection.AUTO) 
                {
                    if (loc1.rotateDirection != fl.motion.RotateDirection.CW) 
                    {
                        if (loc6 > 0) 
                        {
                            loc6 = loc6 % 360 - 360;
                        }
                        loc6 = loc6 - loc1.rotateTimes * 360;
                    }
                    else 
                    {
                        if (loc6 < 0) 
                        {
                            loc6 = loc6 % 360 + 360;
                        }
                        loc6 = loc6 + loc1.rotateTimes * 360;
                    }
                }
                else if ((loc6 = loc6 % 360) > 180) 
                {
                    loc6 = loc6 - 360;
                }
                else if (loc6 < -180) 
                {
                    loc6 = loc6 + 360;
                }
            }
            loc7 = loc4.index - loc1.index;
            return loc2.getValue(arg4, arg5, loc6, loc7);
        }

        internal function parseXML(arg1:XML):fl.motion.Motion
        {
            var loc3:*=null;
            var loc4:*=null;
            if (!arg1) 
            {
                return this;
            }
            if (arg1.@duration.length()) 
            {
                this.duration = parseInt(arg1.@duration);
            }
            var loc1:*=arg1.elements();
            var loc2:*=0;
            while (loc2 < loc1.length()) 
            {
                if ((loc3 = loc1[loc2]).localName() != "source") 
                {
                    if (loc3.localName() == "Keyframe") 
                    {
                        this.addKeyframe(this.getNewKeyframe(loc3));
                    }
                }
                else 
                {
                    loc4 = loc3.children()[0];
                    this.source = new fl.motion.Source(loc4);
                }
                ++loc2;
            }
            return this;
        }

        protected override function getNewKeyframe(arg1:XML=null):fl.motion.KeyframeBase
        {
            return new fl.motion.Keyframe(arg1);
        }

        public static function fromXMLString(arg1:String):fl.motion.Motion
        {
            var loc1:*=new XML(arg1);
            return new Motion(loc1);
        }

        public static function interpolateFilters(arg1:Array, arg2:Array, arg3:Number):Array
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            if (arg1.length != arg2.length) 
            {
                return null;
            }
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc3 = arg1[loc2];
                loc4 = arg2[loc2];
                if (loc5 = interpolateFilter(loc3, loc4, arg3)) 
                {
                    loc1.push(loc5);
                }
                ++loc2;
            }
            return loc1;
        }

        public static function interpolateFilter(arg1:flash.filters.BitmapFilter, arg2:flash.filters.BitmapFilter, arg3:Number):flash.filters.BitmapFilter
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=0;
            var loc9:*=0;
            var loc10:*=0;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*=0;
            var loc15:*=0;
            var loc16:*=0;
            var loc17:*=0;
            var loc18:*=0;
            var loc19:*=NaN;
            var loc20:*=0;
            var loc21:*=NaN;
            var loc22:*=0;
            var loc23:*=NaN;
            var loc24:*=0;
            var loc25:*=NaN;
            var loc26:*=0;
            var loc27:*=0;
            var loc28:*=NaN;
            if (!arg2 || !(arg1["constructor"] == arg2["constructor"])) 
            {
                return arg1;
            }
            if (arg3 > 1) 
            {
                arg3 = 1;
            }
            else if (arg3 < 0) 
            {
                arg3 = 0;
            }
            var loc1:*=1 - arg3;
            var loc2:*=arg1.clone();
            var loc3:*;
            var loc4:*=(loc3 = getTypeInfo(arg1)).accessor;
            var loc29:*=0;
            var loc30:*=loc4;
            label459: for each (loc5 in loc30) 
            {
                loc6 = loc5.@name.toString();
                if ((loc7 = loc5.@type) == "Number" || loc7 == "int") 
                {
                    loc2[loc6] = arg1[loc6] * loc1 + arg2[loc6] * arg3;
                    continue;
                }
                if (loc7 != "uint") 
                {
                    continue;
                }
                var loc31:*=loc6;
                switch (loc31) 
                {
                    case "color":
                    case "highlightColor":
                    case "shadowColor":
                    {
                        loc8 = arg1[loc6];
                        loc9 = arg2[loc6];
                        loc10 = fl.motion.Color.interpolateColor(loc8, loc9, arg3);
                        loc2[loc6] = loc10;
                        continue label459;
                    }
                    default:
                    {
                        loc2[loc6] = arg1[loc6] * loc1 + arg2[loc6] * arg3;
                        continue label459;
                    }
                }
            }
            if (arg1 is flash.filters.GradientGlowFilter || arg1 is flash.filters.GradientBevelFilter) 
            {
                loc11 = [];
                loc12 = [];
                loc13 = [];
                loc14 = arg1["ratios"].length;
                loc15 = arg2["ratios"].length;
                loc16 = Math.max(loc14, loc15);
                loc17 = 0;
                while (loc17 < loc16) 
                {
                    loc18 = Math.min(loc17, (loc14 - 1));
                    loc19 = arg1["ratios"][loc18];
                    loc20 = arg1["colors"][loc18];
                    loc21 = arg1["alphas"][loc18];
                    loc22 = Math.min(loc17, (loc15 - 1));
                    loc23 = arg2["ratios"][loc22];
                    loc24 = arg2["colors"][loc22];
                    loc25 = arg2["alphas"][loc22];
                    loc26 = loc19 * loc1 + loc23 * arg3;
                    loc27 = fl.motion.Color.interpolateColor(loc20, loc24, arg3);
                    loc28 = loc21 * loc1 + loc25 * arg3;
                    loc11[loc17] = loc26;
                    loc12[loc17] = loc27;
                    loc13[loc17] = loc28;
                    ++loc17;
                }
                loc2["colors"] = loc12;
                loc2["alphas"] = loc13;
                loc2["ratios"] = loc11;
            }
            return loc2;
        }

        internal static function getTypeInfo(arg1:*):XML
        {
            var loc1:*="";
            if (arg1 is String) 
            {
                loc1 = arg1;
            }
            else 
            {
                loc1 = flash.utils.getQualifiedClassName(arg1);
            }
            if (loc1 in typeCache) 
            {
                return typeCache[loc1];
            }
            if (arg1 is String) 
            {
                arg1 = flash.utils.getDefinitionByName(arg1);
            }
            var loc2:*;
            typeCache[loc1] = loc2 = flash.utils.describeType(arg1);
            return loc2;
        }

        
        {
            typeCache = {};
        }

        public var source:fl.motion.Source;

        internal var _keyframesCompact:Array;

        internal static var typeCache:Object;
    }
}


//      class MotionBase
package fl.motion 
{
    import flash.filters.*;
    import flash.geom.*;
    import flash.utils.*;
    
    use namespace motion_internal;
    
    public class MotionBase extends Object
    {
        public function MotionBase(arg1:XML=null)
        {
            var loc1:*=null;
            super();
            this.keyframes = [];
            if (this.duration == 0) 
            {
                loc1 = this.getNewKeyframe();
                loc1.index = 0;
                this.addKeyframe(loc1);
            }
            this._overrideScale = false;
            this._overrideSkew = false;
            this._overrideRotate = false;
            return;
        }

        public function getFilters(arg1:Number):Array
        {
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "filters");
            if (!loc2 || loc2.filters && !loc2.filters.length) 
            {
                return [];
            }
            var loc3:*=loc2.filters;
            var loc4:*;
            if ((loc4 = arg1 - loc2.index) == 0) 
            {
                loc1 = loc3;
            }
            return loc1;
        }

        protected function findTweenedValue(arg1:Number, arg2:String, arg3:fl.motion.KeyframeBase, arg4:Number, arg5:Number):Number
        {
            return NaN;
        }

        motion_internal function set spanStart(arg1:int):void
        {
            this._spanStart = arg1;
            return;
        }

        motion_internal function get spanStart():int
        {
            return this._spanStart;
        }

        motion_internal function get transformationPointZ():int
        {
            return this._transformationPointZ;
        }

        motion_internal function set transformationPoint(arg1:flash.geom.Point):void
        {
            this._transformationPoint = arg1;
            return;
        }

        motion_internal function get transformationPoint():flash.geom.Point
        {
            return this._transformationPoint;
        }

        public function getValue(arg1:Number, arg2:String):Number
        {
            var loc1:*=NaN;
            var loc2:*;
            if (!(loc2 = this.getCurrentKeyframe(arg1, arg2)) || loc2.blank) 
            {
                return NaN;
            }
            var loc3:*=loc2.getValue(arg2);
            if (isNaN(loc3) && loc2.index > 0) 
            {
                loc3 = this.getValue((loc2.index - 1), arg2);
            }
            if (isNaN(loc3)) 
            {
                return NaN;
            }
            var loc4:*;
            if ((loc4 = arg1 - loc2.index) == 0) 
            {
                return loc3;
            }
            loc1 = this.findTweenedValue(arg1, arg2, loc2, loc4, loc3);
            return loc1;
        }

        motion_internal function set transformationPointZ(arg1:int):void
        {
            this._transformationPointZ = arg1;
            return;
        }

        public function addKeyframe(arg1:fl.motion.KeyframeBase):void
        {
            this.keyframes[arg1.index] = arg1;
            if (this.duration < this.keyframes.length) 
            {
                this.duration = this.keyframes.length;
            }
            return;
        }

        public function addPropertyArray(arg1:String, arg2:Array, arg3:int=-1, arg4:int=-1):void
        {
            var loc6:*=null;
            var loc7:*=undefined;
            var loc8:*=0;
            var loc9:*=undefined;
            var loc1:*=arg2.length;
            var loc2:*=null;
            var loc3:*=true;
            var loc4:*=0;
            if (loc1 > 0) 
            {
                if (arg2[0] is Number) 
                {
                    loc3 = false;
                    if (arg2[0] is Number) 
                    {
                        loc4 = Number(arg2[0]);
                    }
                }
            }
            if (this.duration < loc1) 
            {
                this.duration = loc1;
            }
            if (arg3 == -1 || arg4 == -1) 
            {
                arg3 = 0;
                arg4 = this.duration;
            }
            var loc5:*=arg3;
            while (loc5 < arg4) 
            {
                if ((loc6 = fl.motion.KeyframeBase(this.keyframes[loc5])) == null) 
                {
                    (loc6 = this.getNewKeyframe()).index = loc5;
                    this.addKeyframe(loc6);
                }
                if (loc6.filters && loc6.filters.length == 0) 
                {
                    loc6.filters = null;
                }
                loc7 = loc2;
                if ((loc8 = loc5 - arg3) < arg2.length) 
                {
                    if (arg2[loc8] || !loc3) 
                    {
                        loc7 = arg2[loc8];
                    }
                }
                var loc10:*=arg1;
                switch (loc10) 
                {
                    case "blendMode":
                    case "matrix3D":
                    case "matrix":
                    {
                        loc6[arg1] = loc7;
                        break;
                    }
                    case "rotationConcat":
                    {
                        loc6.useRotationConcat = true;
                        if (!this._overrideRotate && !loc3) 
                        {
                            loc6.setValue(arg1, (loc7 - loc4) * Math.PI / 180);
                        }
                        else 
                        {
                            loc6.setValue(arg1, loc7 * Math.PI / 180);
                        }
                        break;
                    }
                    case "brightness":
                    case "tintMultiplier":
                    case "tintColor":
                    case "alphaMultiplier":
                    case "alphaOffset":
                    case "redMultiplier":
                    case "redOffset":
                    case "greenMultiplier":
                    case "greenOffset":
                    case "blueMultiplier":
                    case "blueOffset":
                    {
                        if (loc6.color == null) 
                        {
                            loc6.color = new fl.motion.Color();
                        }
                        loc6.color[arg1] = loc7;
                        break;
                    }
                    case "rotationZ":
                    {
                        loc6.useRotationConcat = true;
                        this._is3D = true;
                        if (!this._overrideRotate && !loc3) 
                        {
                            loc6.setValue("rotationConcat", loc7 - loc4);
                        }
                        else 
                        {
                            loc6.setValue("rotationConcat", loc7);
                        }
                        break;
                    }
                    case "rotationX":
                    case "rotationY":
                    case "z":
                    {
                        this._is3D = true;
                    }
                    default:
                    {
                        loc9 = loc7;
                        if (!loc3) 
                        {
                            loc10 = arg1;
                            switch (loc10) 
                            {
                                case "scaleX":
                                case "scaleY":
                                {
                                    if (!this._overrideScale) 
                                    {
                                        if (loc4 != 0) 
                                        {
                                            loc9 = loc7 / loc4;
                                        }
                                        else 
                                        {
                                            loc9 = loc7 + 1;
                                        }
                                    }
                                    break;
                                }
                                case "skewX":
                                case "skewY":
                                {
                                    if (!this._overrideSkew) 
                                    {
                                        loc9 = loc7 - loc4;
                                    }
                                    break;
                                }
                                case "rotationX":
                                case "rotationY":
                                {
                                    if (!this._overrideRotate) 
                                    {
                                        loc9 = loc7 - loc4;
                                    }
                                    break;
                                }
                            }
                        }
                        loc6.setValue(arg1, loc9);
                        break;
                    }
                }
                loc2 = loc7;
                ++loc5;
            }
            return;
        }

        motion_internal function set initialPosition(arg1:Array):void
        {
            this._initialPosition = arg1;
            return;
        }

        motion_internal function get initialPosition():Array
        {
            return this._initialPosition;
        }

        public function initFilters(arg1:Array, arg2:Array, arg3:int=-1, arg4:int=-1):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            if (arg3 == -1 || arg4 == -1) 
            {
                arg3 = 0;
                arg4 = this.duration;
            }
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                loc2 = flash.utils.getDefinitionByName(arg1[loc1]) as Class;
                loc3 = arg3;
                while (loc3 < arg4) 
                {
                    if ((loc4 = fl.motion.KeyframeBase(this.keyframes[loc3])) == null) 
                    {
                        (loc4 = this.getNewKeyframe()).index = loc3;
                        this.addKeyframe(loc4);
                    }
                    if (loc4 && loc4.filters == null) 
                    {
                        loc4.filters = new Array();
                    }
                    if (loc4 && loc4.filters) 
                    {
                        loc5 = null;
                        var loc7:*=arg1[loc1];
                        switch (loc7) 
                        {
                            case "flash.filters.GradientBevelFilter":
                            case "flash.filters.GradientGlowFilter":
                            {
                                loc6 = arg2[loc1];
                                loc5 = flash.filters.BitmapFilter(new loc2(4, 45, new Array(loc6), new Array(loc6), new Array(loc6)));
                                break;
                            }
                            default:
                            {
                                loc5 = flash.filters.BitmapFilter(new loc2());
                                break;
                            }
                        }
                        if (loc5) 
                        {
                            loc4.filters.push(loc5);
                        }
                    }
                    ++loc3;
                }
                ++loc1;
            }
            return;
        }

        motion_internal function set initialMatrix(arg1:flash.geom.Matrix):void
        {
            this._initialMatrix = arg1;
            return;
        }

        motion_internal function get initialMatrix():flash.geom.Matrix
        {
            return this._initialMatrix;
        }

        public function addFilterPropertyArray(arg1:int, arg2:String, arg3:Array, arg4:int=-1, arg5:int=-1):void
        {
            var loc5:*=null;
            var loc6:*=undefined;
            var loc7:*=0;
            var loc1:*=arg3.length;
            var loc2:*=null;
            var loc3:*=true;
            if (loc1 > 0) 
            {
                if (arg3[0] is Number) 
                {
                    loc3 = false;
                }
            }
            if (this.duration < loc1) 
            {
                this.duration = loc1;
            }
            if (arg4 == -1 || arg5 == -1) 
            {
                arg4 = 0;
                arg5 = this.duration;
            }
            var loc4:*=arg4;
            while (loc4 < arg5) 
            {
                if ((loc5 = fl.motion.KeyframeBase(this.keyframes[loc4])) == null) 
                {
                    (loc5 = this.getNewKeyframe()).index = loc4;
                    this.addKeyframe(loc5);
                }
                loc6 = loc2;
                if ((loc7 = loc4 - arg4) < arg3.length) 
                {
                    if (arg3[loc7] || !loc3) 
                    {
                        loc6 = arg3[loc7];
                    }
                }
                var loc8:*=arg2;
                switch (loc8) 
                {
                    case "adjustColorBrightness":
                    case "adjustColorContrast":
                    case "adjustColorSaturation":
                    case "adjustColorHue":
                    {
                        loc5.setAdjustColorProperty(arg1, arg2, loc6);
                        break;
                    }
                    default:
                    {
                        if (arg1 < loc5.filters.length) 
                        {
                            loc5.filters[arg1][arg2] = loc6;
                        }
                        break;
                    }
                }
                loc2 = loc6;
                ++loc4;
            }
            return;
        }

        public function get duration():int
        {
            if (this._duration < this.keyframes.length) 
            {
                this._duration = this.keyframes.length;
            }
            return this._duration;
        }

        public function set duration(arg1:int):void
        {
            if (arg1 < this.keyframes.length) 
            {
                arg1 = this.keyframes.length;
            }
            this._duration = arg1;
            return;
        }

        protected function getNewKeyframe(arg1:XML=null):fl.motion.KeyframeBase
        {
            return new fl.motion.KeyframeBase(arg1);
        }

        public function get is3D():Boolean
        {
            return this._is3D;
        }

        public function set is3D(arg1:Boolean):void
        {
            this._is3D = arg1;
            return;
        }

        public function overrideTargetTransform(arg1:Boolean=true, arg2:Boolean=true, arg3:Boolean=true):void
        {
            this._overrideScale = arg1;
            this._overrideSkew = arg2;
            this._overrideRotate = arg3;
            return;
        }

        internal function indexOutOfRange(arg1:int):Boolean
        {
            return isNaN(arg1) || arg1 < 0 || arg1 > (this.duration - 1);
        }

        public function getCurrentKeyframe(arg1:int, arg2:String=""):fl.motion.KeyframeBase
        {
            var loc2:*=null;
            if (isNaN(arg1) || arg1 < 0 || arg1 > (this.duration - 1)) 
            {
                return null;
            }
            var loc1:*=arg1;
            while (loc1 > 0) 
            {
                if ((loc2 = this.keyframes[loc1]) && loc2.affectsTweenable(arg2)) 
                {
                    return loc2;
                }
                --loc1;
            }
            return this.keyframes[0];
        }

        public function getNextKeyframe(arg1:int, arg2:String=""):fl.motion.KeyframeBase
        {
            var loc2:*=null;
            if (isNaN(arg1) || arg1 < 0 || arg1 > (this.duration - 1)) 
            {
                return null;
            }
            var loc1:*=arg1 + 1;
            while (loc1 < this.keyframes.length) 
            {
                if ((loc2 = this.keyframes[loc1]) && loc2.affectsTweenable(arg2)) 
                {
                    return loc2;
                }
                ++loc1;
            }
            return null;
        }

        public function setValue(arg1:int, arg2:String, arg3:Number):void
        {
            if (arg1 == 0) 
            {
                return;
            }
            var loc1:*;
            if (!(loc1 = this.keyframes[arg1])) 
            {
                (loc1 = this.getNewKeyframe()).index = arg1;
                this.addKeyframe(loc1);
            }
            loc1.setValue(arg2, arg3);
            return;
        }

        public function getColorTransform(arg1:int):flash.geom.ColorTransform
        {
            var loc1:*=null;
            var loc2:*=this.getCurrentKeyframe(arg1, "color");
            if (!loc2 || !loc2.color) 
            {
                return null;
            }
            var loc3:*=loc2.color;
            var loc4:*;
            if ((loc4 = arg1 - loc2.index) == 0) 
            {
                loc1 = loc3;
            }
            return loc1;
        }

        public function getMatrix3D(arg1:int):Object
        {
            var loc1:*=this.getCurrentKeyframe(arg1, "matrix3D");
            return loc1 ? loc1.matrix3D : null;
        }

        public function getMatrix(arg1:int):flash.geom.Matrix
        {
            var loc1:*=this.getCurrentKeyframe(arg1, "matrix");
            return loc1 ? loc1.matrix : null;
        }

        public function useRotationConcat(arg1:int):Boolean
        {
            var loc1:*=this.getCurrentKeyframe(arg1, "rotationConcat");
            return loc1 ? loc1.useRotationConcat : false;
        }

        public var keyframes:Array;

        internal var _spanStart:int;

        internal var _transformationPointZ:int;

        internal var _transformationPoint:flash.geom.Point;

        internal var _initialPosition:Array;

        internal var _initialMatrix:flash.geom.Matrix;

        internal var _duration:int=0;

        internal var _is3D:Boolean=false;

        internal var _overrideRotate:Boolean;

        internal var _overrideScale:Boolean;

        internal var _overrideSkew:Boolean;
    }
}


//      class MotionEvent
package fl.motion 
{
    import flash.events.*;
    
    public class MotionEvent extends flash.events.Event
    {
        public function MotionEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new fl.motion.MotionEvent(this.type, this.bubbles, this.cancelable);
        }

        public static const MOTION_START:String="motionStart";

        public static const MOTION_END:String="motionEnd";

        public static const MOTION_UPDATE:String="motionUpdate";

        public static const TIME_CHANGE:String="timeChange";
    }
}


//      class RotateDirection
package fl.motion 
{
    public class RotateDirection extends Object
    {
        public function RotateDirection()
        {
            super();
            return;
        }

        public static const AUTO:String="auto";

        public static const NONE:String="none";

        public static const CW:String="cw";

        public static const CCW:String="ccw";
    }
}


//      class SimpleEase
package fl.motion 
{
    public class SimpleEase extends Object implements fl.motion.ITween
    {
        public function SimpleEase(arg1:XML=null)
        {
            super();
            this.parseXML(arg1);
            return;
        }

        public function get ease():Number
        {
            return this._ease;
        }

        public function set ease(arg1:Number):void
        {
            this._ease = arg1 > 1 ? 1 : arg1 < -1 ? -1 : isNaN(arg1) ? 0 : arg1;
            return;
        }

        public function get target():String
        {
            return this._target;
        }

        public function set target(arg1:String):void
        {
            this._target = arg1;
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.SimpleEase
        {
            if (arg1) 
            {
                if (arg1.@ease.length()) 
                {
                    this.ease = Number(arg1.@ease);
                }
                if (arg1.@target.length()) 
                {
                    this.target = arg1.@target;
                }
            }
            return this;
        }

        public function getValue(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return easeQuadPercent(arg1, arg2, arg3, arg4, this.ease);
        }

        public static function easeQuadPercent(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number):Number
        {
            if (arg4 <= 0) 
            {
                return NaN;
            }
            if (arg1 <= 0) 
            {
                return arg2;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            if (loc1 >= 1) 
            {
                return arg2 + arg3;
            }
            if (!arg5) 
            {
                return arg3 * arg1 + arg2;
            }
            if (arg5 > 1) 
            {
                arg5 = 1;
            }
            else if (arg5 < -1) 
            {
                arg5 = -1;
            }
            if (arg5 < 0) 
            {
                return arg3 * arg1 * (arg1 * (-arg5) + (1 + arg5)) + arg2;
            }
            return arg3 * arg1 * ((2 - arg1) * arg5 + (1 - arg5)) + arg2;
        }

        public static function easeNone(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg4 <= 0) 
            {
                return NaN;
            }
            if (arg1 <= 0) 
            {
                return arg2;
            }
            if (arg1 >= arg4) 
            {
                return arg2 + arg3;
            }
            return arg3 * arg1 / arg4 + arg2;
        }

        internal var _ease:Number=0;

        internal var _target:String="";
    }
}


//      class Source
package fl.motion 
{
    import flash.geom.*;
    
    public class Source extends Object
    {
        public function Source(arg1:XML=null)
        {
            super();
            this.parseXML(arg1);
            return;
        }

        internal function parseXML(arg1:XML=null):fl.motion.Source
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (!arg1) 
            {
                return this;
            }
            if (arg1.@instanceName) 
            {
                this.instanceName = String(arg1.@instanceName);
            }
            if (arg1.@symbolName) 
            {
                this.symbolName = String(arg1.@symbolName);
            }
            if (arg1.@linkageID) 
            {
                this.linkageID = String(arg1.@linkageID);
            }
            if (!isNaN(arg1.@frameRate)) 
            {
                this.frameRate = Number(arg1.@frameRate);
            }
            var loc1:*=arg1.elements();
            var loc5:*=0;
            var loc6:*=loc1;
            for each (loc2 in loc6) 
            {
                if (loc2.localName() == "transformationPoint") 
                {
                    loc3 = loc2.children()[0];
                    this.transformationPoint = new flash.geom.Point(Number(loc3.@x), Number(loc3.@y));
                    continue;
                }
                if (loc2.localName() != "dimensions") 
                {
                    continue;
                }
                loc4 = loc2.children()[0];
                this.dimensions = new flash.geom.Rectangle(Number(loc4.@left), Number(loc4.@top), Number(loc4.@width), Number(loc4.@height));
            }
            return this;
        }

        public var frameRate:Number=NaN;

        public var elementType:String="";

        public var symbolName:String="";

        public var instanceName:String="";

        public var linkageID:String="";

        public var x:Number=0;

        public var y:Number=0;

        public var scaleX:Number=1;

        public var scaleY:Number=1;

        public var skewX:Number=0;

        public var skewY:Number=0;

        public var rotation:Number=0;

        public var transformationPoint:flash.geom.Point;

        public var dimensions:flash.geom.Rectangle;
    }
}


//      class Tweenables
package fl.motion 
{
    public class Tweenables extends Object
    {
        public function Tweenables()
        {
            super();
            return;
        }

        public static const X:String="x";

        public static const Y:String="y";

        public static const Z:String="z";

        public static const SCALE_X:String="scaleX";

        public static const SCALE_Y:String="scaleY";

        public static const SKEW_X:String="skewX";

        public static const SKEW_Y:String="skewY";

        public static const ROTATION:String="rotation";

        public static const ROTATION_X:String="rotationX";

        public static const ROTATION_Y:String="rotationY";

        public static const ROTATION_CONCAT:String="rotationConcat";
    }
}


//      namespace motion_internal
package fl.motion 
{
    public namespace motion_internal="http://www.adobe.com/2009/flash/motion/internal";
}


//    package rsl
//      class RSLInfo
package fl.rsl 
{
    import flash.display.*;
    import flash.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    
    public class RSLInfo extends flash.events.EventDispatcher
    {
        public function RSLInfo()
        {
            super();
            this._index = -1;
            this._rslURLs = new Array();
            this._policyFileURLs = new Array();
            return;
        }

        public function get loader():flash.display.Loader
        {
            return this._loader;
        }

        public function get policyFileURLs():Array
        {
            return this._policyFileURLs;
        }

        public function get rslURLs():Array
        {
            return this._rslURLs;
        }

        public function get currentAttemptIndex():int
        {
            return this._index;
        }

        public function get complete():Boolean
        {
            return this._complete;
        }

        public function get failed():Boolean
        {
            return this._failed;
        }

        public function get bytesLoaded():int
        {
            return this._urlLoader != null ? this._urlLoader.bytesLoaded : 0;
        }

        public function get bytesTotal():int
        {
            return this._urlLoader != null ? this._urlLoader.bytesTotal : 0;
        }

        public function addEntry(arg1:String, arg2:String=null):void
        {
            this._rslURLs.push(arg1);
            this.policyFileURLs.push(arg2);
            return;
        }

        public function load():void
        {
            var req:flash.net.URLRequest;
            var colonIndex:int;
            var protocol:String;

            var loc1:*;
            req = null;
            colonIndex = 0;
            protocol = null;
            req = this.getNextRequest();
            if (req == null) 
            {
                this._failed = true;
                dispatchEvent(new flash.events.IOErrorEvent(flash.events.IOErrorEvent.IO_ERROR));
            }
            while (req != null) 
            {
                try 
                {
                    if (flash.system.Security.sandboxType == flash.system.Security.LOCAL_WITH_FILE) 
                    {
                        colonIndex = req.url.indexOf(":");
                        if (colonIndex >= 0) 
                        {
                            protocol = req.url.substring(0, colonIndex);
                            if (protocol != "file") 
                            {
                                req = this.getNextRequest();
                                continue;
                            }
                        }
                    }
                    if (this._urlLoader == null) 
                    {
                        this._urlLoader = new flash.net.URLLoader();
                        this._urlLoader.dataFormat = flash.net.URLLoaderDataFormat.BINARY;
                        this._urlLoader.addEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
                        this._urlLoader.addEventListener(flash.events.Event.COMPLETE, this.urlLoaderComplete);
                        this._urlLoader.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.urlLoaderError);
                        this._urlLoader.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.urlLoaderError);
                    }
                    this._urlLoader.load(req);
                }
                catch (se:SecurityError)
                {
                    req = getNextRequest();
                    if (req == null) 
                    {
                        _failed = true;
                    }
                    dispatchEvent(new flash.events.SecurityErrorEvent(flash.events.SecurityErrorEvent.SECURITY_ERROR, false, false, se.message));
                    continue;
                }
                break;
            }
            if (req == null) 
            {
                if (this._loader != null) 
                {
                    this._loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, this.loaderComplete);
                    this._loader.contentLoaderInfo.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loaderError);
                }
                if (this._urlLoader != null) 
                {
                    this._urlLoader.removeEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
                    this._urlLoader.removeEventListener(flash.events.Event.COMPLETE, this.urlLoaderComplete);
                    this._urlLoader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.urlLoaderError);
                    this._urlLoader.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.urlLoaderError);
                }
            }
            return;
        }

        protected function getNextRequest():flash.net.URLRequest
        {
            var loc3:*;
            var loc4:*=((loc3 = this)._index + 1);
            loc3._index = loc4;
            if (this._index >= this.rslURLs.length) 
            {
                return null;
            }
            var loc1:*=new flash.net.URLRequest();
            loc1.url = this._rslURLs[this._index];
            var loc2:*=this._policyFileURLs[this._index];
            if (!(loc2 == null) && loc2.length > 0 && !(flash.system.Security.sandboxType == flash.system.Security.LOCAL_WITH_FILE)) 
            {
                flash.system.Security.loadPolicyFile(loc2);
            }
            return loc1;
        }

        protected function handleProgress(arg1:flash.events.ProgressEvent):*
        {
            dispatchEvent(arg1);
            return;
        }

        protected function urlLoaderComplete(arg1:flash.events.Event):void
        {
            var e:flash.events.Event;
            var lc:flash.system.LoaderContext;

            var loc1:*;
            lc = null;
            e = arg1;
            this._urlLoader.removeEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
            this._urlLoader.removeEventListener(flash.events.Event.COMPLETE, this.urlLoaderComplete);
            this._urlLoader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.urlLoaderError);
            this._urlLoader.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.urlLoaderError);
            if (this._loader == null) 
            {
                this._loader = new flash.display.Loader();
                this._loader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, this.loaderComplete);
                this._loader.contentLoaderInfo.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loaderError);
            }
            try 
            {
                lc = new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain);
                if (lc.hasOwnProperty("allowLoadBytesCodeExecution")) 
                {
                    lc["allowLoadBytesCodeExecution"] = true;
                }
                this._loader.loadBytes(flash.utils.ByteArray(this._urlLoader.data), lc);
            }
            catch (se:SecurityError)
            {
                _failed = _index + 1 >= rslURLs.length;
                dispatchEvent(new flash.events.SecurityErrorEvent(flash.events.SecurityErrorEvent.SECURITY_ERROR, false, false, se.message));
                loaderError(null);
            }
            return;
        }

        protected function urlLoaderError(arg1:flash.events.ErrorEvent):void
        {
            this._failed = this._index + 1 >= this.rslURLs.length;
            dispatchEvent(arg1);
            if (this._failed) 
            {
                this._urlLoader.removeEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
                this._urlLoader.removeEventListener(flash.events.Event.COMPLETE, this.urlLoaderComplete);
                this._urlLoader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.urlLoaderError);
                this._urlLoader.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.urlLoaderError);
            }
            else 
            {
                this.load();
            }
            return;
        }

        protected function loaderComplete(arg1:flash.events.Event):void
        {
            this._loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, this.loaderComplete);
            this._loader.contentLoaderInfo.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loaderError);
            this._complete = true;
            dispatchEvent(arg1);
            return;
        }

        protected function loaderError(arg1:flash.events.IOErrorEvent):void
        {
            this._failed = this._index + 1 >= this.rslURLs.length;
            dispatchEvent(arg1);
            if (this._failed) 
            {
                this._loader.contentLoaderInfo.removeEventListener(flash.events.Event.COMPLETE, this.loaderComplete);
                this._loader.contentLoaderInfo.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loaderError);
            }
            else 
            {
                this.load();
            }
            return;
        }

        protected var _rslURLs:Array;

        protected var _policyFileURLs:Array;

        protected var _index:int;

        protected var _urlLoader:flash.net.URLLoader;

        protected var _loader:flash.display.Loader;

        protected var _failed:Boolean;

        protected var _complete:Boolean;
    }
}


//      class RSLPreloader
package fl.rsl 
{
    import fl.events.*;
    import flash.display.*;
    import flash.events.*;
    import flash.system.*;
    import flash.utils.*;
    
    public class RSLPreloader extends flash.events.EventDispatcher
    {
        public function RSLPreloader(arg1:flash.display.MovieClip=null)
        {
            super();
            this.mainTimeline = arg1;
            this._rslInfoList = new Array();
            this.loaderList = new Array();
            this.debugWaitStart = -1;
            return;
        }

        public function set debugWaitTime(arg1:int):void
        {
            this._debugWaitTime = arg1;
            return;
        }

        public function get debugWaitTime():int
        {
            return this._debugWaitTime;
        }

        public function get numRSLInfos():int
        {
            return this._rslInfoList.length;
        }

        public function getRSLInfoAt(arg1:int):fl.rsl.RSLInfo
        {
            return this._rslInfoList[arg1];
        }

        public function addRSLInfo(arg1:fl.rsl.RSLInfo):void
        {
            this._rslInfoList.push(arg1);
            return;
        }

        public function start(arg1:Class=null, arg2:String=null):void
        {
            var preloaderAnimClass:Class=null;
            var contentClassName:String=null;
            var loaderBytes:flash.utils.ByteArray;
            var lc:flash.system.LoaderContext;

            var loc1:*;
            loaderBytes = null;
            lc = null;
            preloaderAnimClass = arg1;
            contentClassName = arg2;
            this.contentClassName = contentClassName;
            try 
            {
                if (!(this.mainTimeline == null) && !(preloaderAnimClass == null)) 
                {
                    loaderBytes = new preloaderAnimClass() as flash.utils.ByteArray;
                }
            }
            catch (e:Error)
            {
            };
            if (loaderBytes != null) 
            {
                this.loaderAnim = new flash.display.Loader();
                this.mainTimeline.addChild(this.loaderAnim);
                this.loaderAnim.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, this.loaderAnimLoaded);
                this.loaderAnim.contentLoaderInfo.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loaderAnimError);
                lc = new flash.system.LoaderContext(false, new flash.system.ApplicationDomain());
                if (lc.hasOwnProperty("allowLoadBytesCodeExecution")) 
                {
                    lc["allowLoadBytesCodeExecution"] = true;
                }
                this.loaderAnim.loadBytes(loaderBytes, lc);
            }
            else 
            {
                this.loadRSLFiles();
            }
            return;
        }

        public function loadContent():void
        {
            var loc1:*=Class(this.mainTimeline.loaderInfo.applicationDomain.getDefinition(this.contentClassName));
            var loc2:*=flash.utils.ByteArray(new loc1());
            this.contentLoader = new flash.display.Loader();
            this.mainTimeline.addChild(this.contentLoader);
            this.contentLoader.contentLoaderInfo.addEventListener(flash.events.Event.COMPLETE, this.contentComplete);
            var loc3:*=new flash.system.LoaderContext(false, this.mainTimeline.loaderInfo.applicationDomain);
            if (loc3.hasOwnProperty("allowLoadBytesCodeExecution")) 
            {
                loc3["allowLoadBytesCodeExecution"] = true;
            }
            this.contentLoader.loadBytes(loc2, loc3);
            return;
        }

        protected function loaderAnimLoaded(arg1:flash.events.Event):void
        {
            var e:flash.events.Event;
            var fn:Function;

            var loc1:*;
            fn = null;
            e = arg1;
            try 
            {
                fn = this.loaderAnim.content["setRSLPreloader"] as Function;
                if (fn != null) 
                {
                    fn(this);
                }
            }
            catch (e:Error)
            {
            };
            this.loadRSLFiles();
            return;
        }

        protected function loaderAnimError(arg1:flash.events.IOErrorEvent):void
        {
            var e:flash.events.IOErrorEvent;

            var loc1:*;
            e = arg1;
            try 
            {
                this.mainTimeline.removeChild(this.loaderAnim);
            }
            catch (e:Error)
            {
            };
            this.loaderAnim = null;
            this.loadRSLFiles();
            return;
        }

        protected function loadRSLFiles(arg1:flash.events.Event=null):void
        {
            var loc2:*=null;
            if (this._debugWaitTime > 0) 
            {
                if (this.debugWaitStart < 0) 
                {
                    this.debugWaitStart = flash.utils.getTimer();
                    this.enterFrameClip = this.mainTimeline != null ? this.mainTimeline : new flash.display.MovieClip();
                    this.enterFrameClip.addEventListener(flash.events.Event.ENTER_FRAME, this.loadRSLFiles);
                    return;
                }
                if (flash.utils.getTimer() - this.debugWaitStart < this._debugWaitTime) 
                {
                    return;
                }
                this.enterFrameClip.removeEventListener(flash.events.Event.ENTER_FRAME, this.loadRSLFiles);
                this.enterFrameClip = null;
            }
            var loc1:*=0;
            while (loc1 < this._rslInfoList.length) 
            {
                loc2 = this._rslInfoList[loc1];
                loc2.addEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
                loc2.addEventListener(flash.events.Event.COMPLETE, this.loadComplete);
                loc2.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loadFailed);
                loc2.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.loadFailed);
                this._rslInfoList[loc1].load();
                ++loc1;
            }
            return;
        }

        protected function loadComplete(arg1:flash.events.Event):void
        {
            var loc1:*=arg1.target as fl.rsl.RSLInfo;
            if (loc1 == null) 
            {
                return;
            }
            arg1.target.removeEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
            arg1.target.removeEventListener(flash.events.Event.COMPLETE, this.loadComplete);
            arg1.target.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loadFailed);
            arg1.target.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.loadFailed);
            var loc2:*;
            var loc3:*=((loc2 = this).numRSLComplete + 1);
            loc2.numRSLComplete = loc3;
            this.loaderList.push(loc1.loader);
            if (this.numRSLComplete + this.numRSLFailed >= this._rslInfoList.length) 
            {
                this.finish();
            }
            return;
        }

        protected function loadFailed(arg1:flash.events.ErrorEvent):void
        {
            var loc1:*=arg1.target as fl.rsl.RSLInfo;
            if (loc1 == null) 
            {
                return;
            }
            if (loc1.failed) 
            {
                arg1.target.removeEventListener(flash.events.ProgressEvent.PROGRESS, this.handleProgress);
                arg1.target.removeEventListener(flash.events.Event.COMPLETE, this.loadComplete);
                arg1.target.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.loadFailed);
                arg1.target.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.loadFailed);
                this.failedURLs = this.failedURLs != null ? this.failedURLs.concat(loc1.rslURLs) : loc1.rslURLs;
                var loc2:*;
                var loc3:*=((loc2 = this).numRSLFailed + 1);
                loc2.numRSLFailed = loc3;
                if (this.numRSLComplete + this.numRSLFailed >= this._rslInfoList.length) 
                {
                    this.finish();
                }
            }
            return;
        }

        protected function handleProgress(arg1:flash.events.ProgressEvent):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc4:*=null;
            var loc3:*=0;
            while (loc3 < this._rslInfoList.length) 
            {
                if (!(loc4 = this._rslInfoList[loc3]).failed) 
                {
                    loc1 = loc1 + loc4.bytesLoaded;
                    loc2 = loc2 + loc4.bytesTotal;
                }
                ++loc3;
            }
            if (loc2 > 0) 
            {
                dispatchEvent(new fl.events.RSLEvent(fl.events.RSLEvent.RSL_PROGRESS, false, false, this.numRSLComplete, this.numRSLFailed, this._rslInfoList.length, loc1, loc2));
            }
            return;
        }

        protected function finish():void
        {
            var calledFn:Boolean;
            var fn:Function;

            var loc1:*;
            calledFn = false;
            fn = null;
            try 
            {
                if (this.loaderAnim != null) 
                {
                    if (this.numRSLFailed > 0) 
                    {
                        fn = this.loaderAnim.content["handleRSLError"] as Function;
                        if (fn != null) 
                        {
                            fn(this.completeCallback, this.numRSLComplete, this.numRSLFailed, this.failedURLs);
                            calledFn = true;
                        }
                    }
                    else 
                    {
                        fn = this.loaderAnim.content["handleRSLComplete"] as Function;
                        if (fn != null) 
                        {
                            fn(this.completeCallback);
                            calledFn = true;
                        }
                    }
                }
            }
            catch (e:Error)
            {
                calledFn = false;
            }
            if (!calledFn) 
            {
                this.completeCallback();
            }
            return;
        }

        protected function completeCallback():void
        {
            if (this.mainTimeline == null || this.contentClassName == null) 
            {
                if (this.numRSLFailed > 0) 
                {
                    dispatchEvent(new fl.events.RSLErrorEvent(fl.events.RSLErrorEvent.RSL_LOAD_FAILED, false, false, this.numRSLComplete, this.numRSLFailed, this._rslInfoList.length, this.failedURLs));
                }
                else 
                {
                    dispatchEvent(new fl.events.RSLEvent(fl.events.RSLEvent.RSL_LOAD_COMPLETE, false, false, this.numRSLComplete, this.numRSLFailed, this._rslInfoList.length));
                }
            }
            else 
            {
                this.mainTimeline.play();
            }
            return;
        }

        protected function contentComplete(arg1:flash.events.Event):void
        {
            var e:flash.events.Event;
            var myStage:flash.display.Stage;

            var loc1:*;
            myStage = null;
            e = arg1;
            if (this.loaderAnim != null) 
            {
                try 
                {
                    this.mainTimeline.removeChild(this.mainTimeline.getChildAt(0));
                }
                catch (e:Error)
                {
                };
                try 
                {
                    this.mainTimeline.removeChild(this.loaderAnim);
                }
                catch (e:Error)
                {
                };
                if (this.loaderAnim.hasOwnProperty("unloadAndStop")) 
                {
                    this.loaderAnim.unloadAndStop(true);
                }
                else 
                {
                    this.loaderAnim.unload();
                }
            }
            this.contentLoader.content["__rslLoaders"] = this.loaderList;
            try 
            {
                myStage = this.mainTimeline.parent as flash.display.Stage;
            }
            catch (se:SecurityError)
            {
                myStage = null;
            }
            if (myStage != null) 
            {
                myStage.addChildAt(this.contentLoader.content, myStage.getChildIndex(this.mainTimeline));
                try 
                {
                    myStage.removeChild(this.mainTimeline);
                }
                catch (e:Error)
                {
                };
            }
            else 
            {
                this.mainTimeline.addChild(this.contentLoader.content);
            }
            try 
            {
                if (this.mainTimeline["__rslPreloader"] == this) 
                {
                    this.mainTimeline["__rslPreloader"] = null;
                }
            }
            catch (e:Error)
            {
            };
            return;
        }

        protected var mainTimeline:flash.display.MovieClip;

        protected var contentClassName:String;

        protected var loaderAnim:flash.display.Loader;

        protected var contentLoader:flash.display.Loader;

        protected var _rslInfoList:Array;

        protected var loaderList:Array;

        protected var numRSLComplete:int;

        protected var numRSLFailed:int;

        protected var failedURLs:Array;

        protected var enterFrameClip:flash.display.MovieClip;

        protected var _debugWaitTime:int;

        protected var debugWaitStart:int;
    }
}


//      class SWZInfo
package fl.rsl 
{
    import flash.net.*;
    
    public class SWZInfo extends fl.rsl.RSLInfo
    {
        public function SWZInfo(arg1:String)
        {
            super();
            this._digest = arg1;
            return;
        }

        public function get digest():String
        {
            return this._digest;
        }

        protected override function getNextRequest():flash.net.URLRequest
        {
            var loc1:*=super.getNextRequest();
            if (!(loc1 == null) && !(this._digest == null) && this._digest.length > 0 && !(loc1.url.substr(-4).toLowerCase() == ".swf") && loc1.hasOwnProperty("digest")) 
            {
                loc1.digest = this._digest;
            }
            return loc1;
        }

        protected var _digest:String;
    }
}


//    package transitions
//      package easing
//        class Back
package fl.transitions.easing 
{
    public class Back extends Object
    {
        public function Back()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0):Number
        {
            if (!arg5) 
            {
                arg5 = 1.70158;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * ((arg5 + 1) * arg1 - arg5) + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0):Number
        {
            if (!arg5) 
            {
                arg5 = 1.70158;
            }
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * ((arg5 + 1) * arg1 + arg5) + 1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0):Number
        {
            if (!arg5) 
            {
                arg5 = 1.70158;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                arg5 = loc1 = arg5 * 1.525;
                return arg3 / 2 * arg1 * arg1 * ((loc1 + 1) * arg1 - arg5) + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            arg5 = loc1 = arg5 * 1.525;
            return arg3 / 2 * (loc1 * arg1 * ((loc1 + 1) * arg1 + arg5) + 2) + arg2;
        }
    }
}


//        class Bounce
package fl.transitions.easing 
{
    public class Bounce extends Object
    {
        public function Bounce()
        {
            super();
            return;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            if (loc1 < 1 / 2.75) 
            {
                return arg3 * 7.5625 * arg1 * arg1 + arg2;
            }
            if (arg1 < 2 / 2.75) 
            {
                arg1 = loc1 = arg1 - 1.5 / 2.75;
                return arg3 * (7.5625 * loc1 * arg1 + 0.75) + arg2;
            }
            if (arg1 < 2.5 / 2.75) 
            {
                arg1 = loc1 = arg1 - 2.25 / 2.75;
                return arg3 * (7.5625 * loc1 * arg1 + 0.9375) + arg2;
            }
            arg1 = loc1 = arg1 - 2.625 / 2.75;
            return arg3 * (7.5625 * loc1 * arg1 + 0.984375) + arg2;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 - easeOut(arg4 - arg1, 0, arg3, arg4) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeIn(arg1 * 2, 0, arg3, arg4) * 0.5 + arg2;
            }
            return easeOut(arg1 * 2 - arg4, 0, arg3, arg4) * 0.5 + arg3 * 0.5 + arg2;
        }
    }
}


//        class Elastic
package fl.transitions.easing 
{
    public class Elastic extends Object
    {
        public function Elastic()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0, arg6:Number=0):Number
        {
            var loc1:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc2:*;
            arg1 = loc2 = arg1 / arg4;
            if (loc2 == 1) 
            {
                return arg2 + arg3;
            }
            if (!arg6) 
            {
                arg6 = arg4 * 0.3;
            }
            if (!arg5 || arg5 < Math.abs(arg3)) 
            {
                arg5 = arg3;
                loc1 = arg6 / 4;
            }
            else 
            {
                loc1 = arg6 / (2 * Math.PI) * Math.asin(arg3 / arg5);
            }
            --arg1;
            return -arg5 * Math.pow(2, 10 * loc2) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0, arg6:Number=0):Number
        {
            var loc1:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc2:*;
            arg1 = loc2 = arg1 / arg4;
            if (loc2 == 1) 
            {
                return arg2 + arg3;
            }
            if (!arg6) 
            {
                arg6 = arg4 * 0.3;
            }
            if (!arg5 || arg5 < Math.abs(arg3)) 
            {
                arg5 = arg3;
                loc1 = arg6 / 4;
            }
            else 
            {
                loc1 = arg6 / (2 * Math.PI) * Math.asin(arg3 / arg5);
            }
            return arg5 * Math.pow(2, -10 * arg1) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) + arg3 + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number=0, arg6:Number=0):Number
        {
            var loc1:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc2:*;
            arg1 = loc2 = arg1 / (arg4 / 2);
            if (loc2 == 2) 
            {
                return arg2 + arg3;
            }
            if (!arg6) 
            {
                arg6 = arg4 * 0.3 * 1.5;
            }
            if (!arg5 || arg5 < Math.abs(arg3)) 
            {
                arg5 = arg3;
                loc1 = arg6 / 4;
            }
            else 
            {
                loc1 = arg6 / (2 * Math.PI) * Math.asin(arg3 / arg5);
            }
            if (arg1 < 1) 
            {
                --arg1;
                return -0.5 * arg5 * Math.pow(2, 10 * loc2) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) + arg2;
            }
            --arg1;
            return arg5 * Math.pow(2, -10 * loc2) * Math.sin((arg1 * arg4 - loc1) * 2 * Math.PI / arg6) * 0.5 + arg3 + arg2;
        }
    }
}


//        class None
package fl.transitions.easing 
{
    public class None extends Object
    {
        public function None()
        {
            super();
            return;
        }

        public static function easeNone(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }
    }
}


//        class Regular
package fl.transitions.easing 
{
    public class Regular extends Object
    {
        public function Regular()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return (-arg3) * loc1 * (arg1 - 2) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 + arg2;
            }
            return (-arg3) / 2 * (--arg1 * (arg1 - 2) - 1) + arg2;
        }
    }
}


//        class Strong
package fl.transitions.easing 
{
    public class Strong extends Object
    {
        public function Strong()
        {
            super();
            return;
        }

        public static function easeIn(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 * arg1 * arg1 + arg2;
        }

        public static function easeOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * arg1 * arg1 * arg1 + 1) + arg2;
        }

        public static function easeInOut(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (loc1 * arg1 * arg1 * arg1 * arg1 + 2) + arg2;
        }
    }
}


//      class Blinds
package fl.transitions 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Blinds extends fl.transitions.Transition
    {
        public function Blinds(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            this._dimension = arg2.dimension ? 1 : 0;
            if (arg2.numStrips) 
            {
                this._numStrips = arg2.numStrips;
            }
            this._initMask();
            return;
        }

        public override function get type():Class
        {
            return Blinds;
        }

        public override function start():void
        {
            this._content.mask = this._mask;
            super.start();
            return;
        }

        public override function cleanUp():void
        {
            this._content.removeChild(this._mask);
            this._content.mask = null;
            super.cleanUp();
            return;
        }

        protected function _initMask():void
        {
            this._mask = new flash.display.MovieClip();
            this._mask.visible = false;
            this._content.addChild(this._mask);
            this._innerMask = new flash.display.MovieClip();
            this._mask.addChild(this._innerMask);
            var loc2:*;
            this._innerMask.y = loc2 = 50;
            this._innerMask.x = loc2;
            if (this._dimension) 
            {
                this._innerMask.rotation = -90;
            }
            this._innerMask.graphics.beginFill(16711680);
            this.drawBox(this._innerMask, 0, 0, 100, 100);
            this._innerMask.graphics.endFill();
            var loc1:*=this._innerBounds;
            this._mask.x = loc1.left;
            this._mask.y = loc1.top;
            this._mask.width = loc1.width;
            this._mask.height = loc1.height;
            return;
        }

        protected override function _render(arg1:Number):void
        {
            var loc1:*=100 / this._numStrips;
            var loc2:*=arg1 * loc1;
            var loc3:*;
            (loc3 = this._innerMask).graphics.clear();
            var loc4:*=this._numStrips;
            loc3.graphics.beginFill(16711680);
            while (loc4--) 
            {
                this.drawBox(loc3, -50, loc4 * loc1 - 50, 100, loc2);
            }
            loc3.graphics.endFill();
            return;
        }

        protected var _numStrips:uint=10;

        protected var _dimension:uint=0;

        protected var _mask:flash.display.MovieClip;

        protected var _innerMask:flash.display.MovieClip;
    }
}


//      class Fade
package fl.transitions 
{
    import flash.display.*;
    
    public class Fade extends fl.transitions.Transition
    {
        public function Fade(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            this._alphaFinal = this.manager.contentAppearance.alpha;
            return;
        }

        public override function get type():Class
        {
            return Fade;
        }

        protected override function _render(arg1:Number):void
        {
            this._content.alpha = this._alphaFinal * arg1;
            return;
        }

        protected var _alphaFinal:Number;
    }
}


//      class Fly
package fl.transitions 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Fly extends fl.transitions.Transition
    {
        public function Fly(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            var loc4:*=null;
            var loc5:*=null;
            super(arg1, arg2, arg3);
            if (arg2.startPoint) 
            {
                this._startPoint = arg2.startPoint;
            }
            this._xFinal = this.manager.contentAppearance.x;
            this._yFinal = this.manager.contentAppearance.y;
            var loc1:*;
            var loc2:*=(loc1 = arg1.stage).scaleMode;
            loc1.scaleMode = flash.display.StageScaleMode.SHOW_ALL;
            var loc6:*;
            this._stagePoints = loc6 = {};
            var loc3:*;
            (loc3 = loc6)[1] = new flash.geom.Point(0, 0);
            loc3[2] = new flash.geom.Point(0, 0);
            loc3[3] = new flash.geom.Point(loc1.stageWidth, 0);
            loc3[4] = new flash.geom.Point(0, 0);
            loc3[5] = new flash.geom.Point(loc1.stageWidth / 2, loc1.stageHeight / 2);
            loc3[6] = new flash.geom.Point(loc1.stageWidth, 0);
            loc3[7] = new flash.geom.Point(0, loc1.stageHeight);
            loc3[8] = new flash.geom.Point(0, loc1.stageHeight);
            loc3[9] = new flash.geom.Point(loc1.stageWidth, loc1.stageHeight);
            loc6 = 0;
            var loc7:*=loc3;
            for (loc4 in loc7) 
            {
                this._content.parent.globalToLocal(loc3[loc4]);
            }
            loc5 = this._innerBounds;
            loc3[1].x = loc3[1].x - loc5.right;
            loc3[1].y = loc3[1].y - loc5.bottom;
            loc3[2].x = this.manager.contentAppearance.x;
            loc3[2].y = loc3[2].y - loc5.bottom;
            loc3[3].x = loc3[3].x - loc5.left;
            loc3[3].y = loc3[3].y - loc5.bottom;
            loc3[4].x = loc3[4].x - loc5.right;
            loc3[4].y = this.manager.contentAppearance.y;
            loc3[5].x = loc3[5].x - (loc5.right + loc5.left) / 2;
            loc3[5].y = loc3[5].y - (loc5.bottom + loc5.top) / 2;
            loc3[6].x = loc3[6].x - loc5.left;
            loc3[6].y = this.manager.contentAppearance.y;
            loc3[7].x = loc3[7].x - loc5.right;
            loc3[7].y = loc3[7].y - loc5.top;
            loc3[8].x = this.manager.contentAppearance.x;
            loc3[8].y = loc3[8].y - loc5.top;
            loc3[9].x = loc3[9].x - loc5.left;
            loc3[9].y = loc3[9].y - loc5.top;
            this._xInitial = this._stagePoints[this._startPoint].x;
            this._yInitial = this._stagePoints[this._startPoint].y;
            loc1.scaleMode = loc2;
            return;
        }

        public override function get type():Class
        {
            return Fly;
        }

        protected override function _render(arg1:Number):void
        {
            this._content.x = this._xFinal + (this._xInitial - this._xFinal) * (1 - arg1);
            this._content.y = this._yFinal + (this._yInitial - this._yFinal) * (1 - arg1);
            return;
        }

        public var className:String="Fly";

        protected var _startPoint:Number=4;

        protected var _xFinal:Number;

        protected var _yFinal:Number;

        protected var _xInitial:Number;

        protected var _yInitial:Number;

        protected var _stagePoints:Object;
    }
}


//      class Iris
package fl.transitions 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Iris extends fl.transitions.Transition
    {
        public function Iris(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            if (arg2.startPoint) 
            {
                this._startPoint = arg2.startPoint;
            }
            if (arg2.shape) 
            {
                this._shape = arg2.shape;
            }
            this._maxDimension = Math.max(this._width, this._height);
            this._minDimension = Math.min(this._width, this._height);
            if (this._startPoint % 2) 
            {
                this._cornerMode = true;
            }
            if (this._shape != SQUARE) 
            {
                if (this._shape == CIRCLE) 
                {
                    this._renderFunction = this._renderCircle;
                }
            }
            else if (this._cornerMode) 
            {
                this._renderFunction = this._renderSquareCorner;
            }
            else 
            {
                this._renderFunction = this._renderSquareEdge;
            }
            this._initMask();
            return;
        }

        public override function get type():Class
        {
            return Iris;
        }

        public override function start():void
        {
            this._content.mask = this._mask;
            super.start();
            return;
        }

        public override function cleanUp():void
        {
            this._content.removeChild(this._mask);
            this._content.mask = null;
            super.cleanUp();
            return;
        }

        protected function _initMask():void
        {
            var loc3:*;
            this._mask = loc3 = new flash.display.MovieClip();
            var loc1:*=loc3;
            loc1.visible = false;
            this._content.addChild(loc1);
            var loc2:*=this._innerBounds;
            loc3 = this._startPoint;
            switch (loc3) 
            {
                case 1:
                {
                    loc1.x = loc2.left;
                    loc1.y = loc2.top;
                    break;
                }
                case 4:
                {
                    loc1.x = loc2.left;
                    loc1.y = (loc2.top + loc2.bottom) * 0.5;
                    break;
                }
                case 3:
                {
                    loc1.rotation = 90;
                    loc1.x = loc2.right;
                    loc1.y = loc2.top;
                    break;
                }
                case 2:
                {
                    loc1.rotation = 90;
                    loc1.x = (loc2.left + loc2.right) * 0.5;
                    loc1.y = loc2.top;
                    break;
                }
                case 9:
                {
                    loc1.rotation = 180;
                    loc1.x = loc2.right;
                    loc1.y = loc2.bottom;
                    break;
                }
                case 6:
                {
                    loc1.rotation = 180;
                    loc1.x = loc2.right;
                    loc1.y = (loc2.top + loc2.bottom) * 0.5;
                    break;
                }
                case 7:
                {
                    loc1.rotation = -90;
                    loc1.x = loc2.left;
                    loc1.y = loc2.bottom;
                    break;
                }
                case 8:
                {
                    loc1.rotation = -90;
                    loc1.x = (loc2.left + loc2.right) * 0.5;
                    loc1.y = loc2.bottom;
                    break;
                }
                case 5:
                {
                    loc1.x = (loc2.left + loc2.right) * 0.5;
                    loc1.y = (loc2.top + loc2.bottom) * 0.5;
                    break;
                }
            }
            return;
        }

        protected override function _render(arg1:Number):void
        {
            this._renderFunction(arg1);
            return;
        }

        protected function _renderCircle(arg1:Number):void
        {
            var loc1:*=this._mask;
            loc1.graphics.clear();
            loc1.graphics.beginFill(16711680);
            var loc2:*=0;
            if (this._startPoint != 5) 
            {
                if (this._cornerMode) 
                {
                    loc2 = Math.sqrt(this._width * this._width + this._height * this._height);
                    this._drawQuarterCircle(loc1, arg1 * loc2);
                }
                else 
                {
                    if (this._startPoint == 4 || this._startPoint == 6) 
                    {
                        loc2 = Math.sqrt(this._width * this._width + 0.25 * this._height * this._height);
                    }
                    else if (this._startPoint == 2 || this._startPoint == 8) 
                    {
                        loc2 = Math.sqrt(0.25 * this._width * this._width + this._height * this._height);
                    }
                    this._drawHalfCircle(loc1, arg1 * loc2);
                }
            }
            else 
            {
                loc2 = 0.5 * Math.sqrt(this._width * this._width + this._height * this._height);
                this.drawCircle(loc1, 0, 0, arg1 * loc2);
            }
            loc1.graphics.endFill();
            return;
        }

        protected function _drawQuarterCircle(arg1:flash.display.MovieClip, arg2:Number):void
        {
            var loc1:*=0;
            var loc2:*=0;
            arg1.graphics.lineTo(arg2, 0);
            arg1.graphics.curveTo(arg2 + loc1, Math.tan(Math.PI / 8) * arg2 + loc2, Math.sin(Math.PI / 4) * arg2 + loc1, Math.sin(Math.PI / 4) * arg2 + loc2);
            arg1.graphics.curveTo(Math.tan(Math.PI / 8) * arg2 + loc1, arg2 + loc2, loc1, arg2 + loc2);
            return;
        }

        protected function _drawHalfCircle(arg1:flash.display.MovieClip, arg2:Number):void
        {
            var loc1:*=0;
            var loc2:*=0;
            arg1.graphics.lineTo(0, -arg2);
            arg1.graphics.curveTo(Math.tan(Math.PI / 8) * arg2 + loc1, -arg2 + loc2, Math.sin(Math.PI / 4) * arg2 + loc1, (-Math.sin(Math.PI / 4)) * arg2 + loc2);
            arg1.graphics.curveTo(arg2 + loc1, (-Math.tan(Math.PI / 8)) * arg2 + loc2, arg2 + loc1, loc2);
            arg1.graphics.curveTo(arg2 + loc1, Math.tan(Math.PI / 8) * arg2 + loc2, Math.sin(Math.PI / 4) * arg2 + loc1, Math.sin(Math.PI / 4) * arg2 + loc2);
            arg1.graphics.curveTo(Math.tan(Math.PI / 8) * arg2 + loc1, arg2 + loc2, loc1, arg2 + loc2);
            arg1.graphics.lineTo(0, 0);
            return;
        }

        protected function _renderSquareEdge(arg1:Number):void
        {
            var loc1:*=this._mask;
            loc1.graphics.clear();
            loc1.graphics.beginFill(16711680);
            var loc2:*=this._startPoint;
            var loc3:*=arg1 * this._width;
            var loc4:*=arg1 * this._height;
            var loc5:*=arg1 * this._maxDimension;
            if (loc2 == 4 || loc2 == 6) 
            {
                this.drawBox(loc1, 0, -0.5 * loc4, loc3, loc4);
            }
            else if (this._height < this._width) 
            {
                this.drawBox(loc1, 0, -0.5 * loc5, loc4, loc3);
            }
            else 
            {
                this.drawBox(loc1, 0, -0.5 * loc5, loc5, loc5);
            }
            loc1.graphics.endFill();
            return;
        }

        protected function _renderSquareCorner(arg1:Number):void
        {
            var loc1:*=this._mask;
            loc1.graphics.clear();
            loc1.graphics.beginFill(16711680);
            var loc2:*=this._startPoint;
            var loc3:*=arg1 * this._width;
            var loc4:*=arg1 * this._height;
            if (loc2 != 5) 
            {
                if (loc2 == 3 || loc2 == 7) 
                {
                    this.drawBox(loc1, 0, 0, loc4, loc3);
                }
                else 
                {
                    this.drawBox(loc1, 0, 0, loc3, loc4);
                }
            }
            else 
            {
                this.drawBox(loc1, -0.5 * loc3, -0.5 * loc4, loc3, loc4);
            }
            loc1.graphics.endFill();
            return;
        }

        public static const SQUARE:String="SQUARE";

        public static const CIRCLE:String="CIRCLE";

        protected var _mask:flash.display.MovieClip;

        protected var _startPoint:uint=5;

        protected var _cornerMode:Boolean=false;

        protected var _shape:String="SQUARE";

        protected var _maxDimension:Number=NaN;

        protected var _minDimension:Number=NaN;

        protected var _renderFunction:Function;
    }
}


//      class Photo
package fl.transitions 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Photo extends fl.transitions.Transition
    {
        public function Photo(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            this._alphaFinal = this.manager.contentAppearance.alpha;
            this._colorControl = new flash.geom.ColorTransform();
            return;
        }

        public override function get type():Class
        {
            return Photo;
        }

        protected override function _render(arg1:Number):void
        {
            var loc1:*=0.8;
            var loc2:*=0.9;
            var loc3:*={};
            var loc4:*=0;
            if (arg1 <= loc1) 
            {
                this._colorControl.alphaMultiplier = this._alphaFinal * arg1 / loc1;
            }
            else 
            {
                this._colorControl.alphaMultiplier = this._alphaFinal;
                if (arg1 <= loc2) 
                {
                    loc4 = (arg1 - loc1) / (loc2 - loc1) * 256;
                }
                else 
                {
                    loc4 = (1 - (arg1 - loc2) / (1 - loc2)) * 256;
                }
            }
            var loc5:*;
            loc3.bb = loc5 = loc4;
            loc3.gb = loc5 = loc5;
            loc3.rb = loc5;
            this._colorControl.blueOffset = loc5 = loc4;
            this._colorControl.greenOffset = loc5 = loc5;
            this._colorControl.redOffset = loc5;
            this._content.transform.colorTransform = this._colorControl;
            return;
        }

        protected var _alphaFinal:Number=1;

        protected var _colorControl:flash.geom.ColorTransform;
    }
}


//      class PixelDissolve
package fl.transitions 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class PixelDissolve extends fl.transitions.Transition
    {
        public function PixelDissolve(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            var loc2:*=0;
            super(arg1, arg2, arg3);
            if (arg2.xSections) 
            {
                this._xSections = arg2.xSections;
            }
            if (arg2.ySections) 
            {
                this._ySections = arg2.ySections;
            }
            this._numSections = this._xSections * this._ySections;
            this._indices = new Array();
            var loc1:*=this._ySections;
            while (loc1--) 
            {
                loc2 = this._xSections;
                while (loc2--) 
                {
                    this._indices[loc1 * this._xSections + loc2] = {"x":loc2, "y":loc1};
                }
            }
            this._shuffleArray(this._indices);
            this._initMask();
            return;
        }

        public override function get type():Class
        {
            return PixelDissolve;
        }

        public override function start():void
        {
            this._content.mask = this._mask;
            super.start();
            return;
        }

        public override function cleanUp():void
        {
            this._content.removeChild(this._mask);
            this._content.mask = null;
            super.cleanUp();
            return;
        }

        protected function _initMask():void
        {
            this._mask = new flash.display.MovieClip();
            this._mask.visible = false;
            this._content.addChild(this._mask);
            this._innerMask = new flash.display.MovieClip();
            this._mask.addChild(this._innerMask);
            this._innerMask.graphics.beginFill(16711680);
            this.drawBox(this._innerMask, 0, 0, 100, 100);
            this._innerMask.graphics.endFill();
            var loc1:*=this._innerBounds;
            this._mask.x = loc1.left;
            this._mask.y = loc1.top;
            this._mask.width = loc1.right - loc1.left;
            this._mask.height = loc1.bottom - loc1.top;
            return;
        }

        protected function _shuffleArray(arg1:Array):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc1:*=(arg1.length - 1);
            while (loc1 > 0) 
            {
                loc2 = Math.floor(Math.random() * (loc1 + 1));
                if (loc2 != loc1) 
                {
                    loc3 = arg1[loc1];
                    arg1[loc1] = arg1[loc2];
                    arg1[loc2] = loc3;
                }
                --loc1;
            }
            return;
        }

        protected override function _render(arg1:Number):void
        {
            if (arg1 < 0) 
            {
                arg1 = 0;
            }
            if (arg1 > 1) 
            {
                arg1 = 1;
            }
            var loc1:*=100 / this._xSections;
            var loc2:*=100 / this._ySections;
            var loc3:*=this._indices;
            var loc4:*;
            (loc4 = this._innerMask).graphics.clear();
            loc4.graphics.beginFill(16711680);
            var loc5:*=Math.floor(arg1 * this._numSections);
            while (loc5--) 
            {
                this.drawBox(loc4, loc3[loc5].x * loc1, loc3[loc5].y * loc2, loc1, loc2);
            }
            loc4.graphics.endFill();
            return;
        }

        protected var _xSections:Number=10;

        protected var _ySections:Number=10;

        protected var _numSections:uint=1;

        protected var _indices:Array;

        protected var _mask:flash.display.MovieClip;

        protected var _innerMask:flash.display.MovieClip;
    }
}


//      class Rotate
package fl.transitions 
{
    import flash.display.*;
    
    public class Rotate extends fl.transitions.Transition
    {
        public function Rotate(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            if (isNaN(this._rotationFinal)) 
            {
                this._rotationFinal = this.manager.contentAppearance.rotation;
            }
            if (arg2.degrees) 
            {
                this._degrees = arg2.degrees;
            }
            if (arg2.ccw ^ this.direction) 
            {
                this._degrees = this._degrees * -1;
            }
            return;
        }

        public override function get type():Class
        {
            return Rotate;
        }

        protected override function _render(arg1:Number):void
        {
            this._content.rotation = this._rotationFinal - this._degrees * (1 - arg1);
            return;
        }

        protected var _rotationFinal:Number=NaN;

        protected var _degrees:Number=360;
    }
}


//      class Squeeze
package fl.transitions 
{
    import flash.display.*;
    
    public class Squeeze extends fl.transitions.Transition
    {
        public function Squeeze(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            if (arg2.dimension) 
            {
                this._scaleProp = "scaleY";
                this._scaleFinal = this.manager.contentAppearance.scaleY;
            }
            else 
            {
                this._scaleProp = "scaleX";
                this._scaleFinal = this.manager.contentAppearance.scaleX;
            }
            return;
        }

        public override function get type():Class
        {
            return Squeeze;
        }

        protected override function _render(arg1:Number):void
        {
            if (arg1 <= 0) 
            {
                arg1 = 0;
            }
            this._content[this._scaleProp] = arg1 * this._scaleFinal;
            return;
        }

        protected var _scaleProp:String="scaleX";

        protected var _scaleFinal:Number=1;
    }
}


//      class Transition
package fl.transitions 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    
    public class Transition extends flash.events.EventDispatcher
    {
        public function Transition(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super();
            this.content = arg1;
            this.direction = arg2.direction;
            this.duration = arg2.duration;
            this.easing = arg2.easing;
            this.manager = arg3;
            this._innerBounds = this.manager._innerBounds;
            this._outerBounds = this.manager._outerBounds;
            this._width = this.manager._width;
            this._height = this.manager._height;
            this._resetTween();
            return;
        }

        public function get type():Class
        {
            return fl.transitions.Transition;
        }

        public function set easing(arg1:Function):void
        {
            this._easing = arg1;
            if (this._twn) 
            {
                this._twn.func = arg1;
            }
            return;
        }

        public function set progress(arg1:Number):void
        {
            if (this._progress == arg1) 
            {
                return;
            }
            this._progress = arg1;
            if (this._direction) 
            {
                this._render(1 - arg1);
            }
            else 
            {
                this._render(arg1);
            }
            this.dispatchEvent(new flash.events.Event("transitionProgress"));
            return;
        }

        public function get progress():Number
        {
            return this._progress;
        }

        public function start():void
        {
            this.content.visible = true;
            this._twn.start();
            return;
        }

        public function stop():void
        {
            this._twn.fforward();
            this._twn.stop();
            return;
        }

        public function cleanUp():void
        {
            this.removeEventListener("transitionInDone", this._manager.transitionInDone);
            this.removeEventListener("transitionOutDone", this._manager.transitionOutDone);
            this.stop();
            return;
        }

        public function drawBox(arg1:flash.display.MovieClip, arg2:Number, arg3:Number, arg4:Number, arg5:Number):void
        {
            arg1.graphics.moveTo(arg2, arg3);
            arg1.graphics.lineTo(arg2 + arg4, arg3);
            arg1.graphics.lineTo(arg2 + arg4, arg3 + arg5);
            arg1.graphics.lineTo(arg2, arg3 + arg5);
            arg1.graphics.lineTo(arg2, arg3);
            return;
        }

        public function drawCircle(arg1:flash.display.MovieClip, arg2:Number, arg3:Number, arg4:Number):void
        {
            arg1.graphics.moveTo(arg2 + arg4, arg3);
            arg1.graphics.curveTo(arg4 + arg2, Math.tan(Math.PI / 8) * arg4 + arg3, Math.sin(Math.PI / 4) * arg4 + arg2, Math.sin(Math.PI / 4) * arg4 + arg3);
            arg1.graphics.curveTo(Math.tan(Math.PI / 8) * arg4 + arg2, arg4 + arg3, arg2, arg4 + arg3);
            arg1.graphics.curveTo((-Math.tan(Math.PI / 8)) * arg4 + arg2, arg4 + arg3, (-Math.sin(Math.PI / 4)) * arg4 + arg2, Math.sin(Math.PI / 4) * arg4 + arg3);
            arg1.graphics.curveTo(-arg4 + arg2, Math.tan(Math.PI / 8) * arg4 + arg3, -arg4 + arg2, arg3);
            arg1.graphics.curveTo(-arg4 + arg2, (-Math.tan(Math.PI / 8)) * arg4 + arg3, (-Math.sin(Math.PI / 4)) * arg4 + arg2, (-Math.sin(Math.PI / 4)) * arg4 + arg3);
            arg1.graphics.curveTo((-Math.tan(Math.PI / 8)) * arg4 + arg2, -arg4 + arg3, arg2, -arg4 + arg3);
            arg1.graphics.curveTo(Math.tan(Math.PI / 8) * arg4 + arg2, -arg4 + arg3, Math.sin(Math.PI / 4) * arg4 + arg2, (-Math.sin(Math.PI / 4)) * arg4 + arg3);
            arg1.graphics.curveTo(arg4 + arg2, (-Math.tan(Math.PI / 8)) * arg4 + arg3, arg4 + arg2, arg3);
            return;
        }

        protected function _render(arg1:Number):void
        {
            return;
        }

        internal function _resetTween():void
        {
            if (this._twn) 
            {
                this._twn.stop();
                this._twn.removeEventListener(fl.transitions.TweenEvent.MOTION_FINISH, this.onMotionFinished);
            }
            this._twn = new fl.transitions.Tween(this, "", this.easing, 0, 1, this.duration, true);
            this._twn.stop();
            this._twn.prop = "progress";
            this._twn.addEventListener(fl.transitions.TweenEvent.MOTION_FINISH, this.onMotionFinished, false, 0, true);
            return;
        }

        internal function _noEase(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public function onMotionFinished(arg1:Object):void
        {
            if (this.direction != fl.transitions.Transition.OUT) 
            {
                this.dispatchEvent(new flash.events.Event("transitionInDone"));
            }
            else 
            {
                this.dispatchEvent(new flash.events.Event("transitionOutDone"));
            }
            return;
        }

        public function set manager(arg1:fl.transitions.TransitionManager):void
        {
            if (this._manager) 
            {
                this.removeEventListener("transitionInDone", this._manager.transitionInDone);
                this.removeEventListener("transitionOutDone", this._manager.transitionOutDone);
            }
            this._manager = arg1;
            this.addEventListener("transitionInDone", this._manager.transitionInDone);
            this.addEventListener("transitionOutDone", this._manager.transitionOutDone);
            return;
        }

        public function get manager():fl.transitions.TransitionManager
        {
            return this._manager;
        }

        public function set content(arg1:flash.display.MovieClip):void
        {
            if (arg1) 
            {
                this._content = arg1;
                if (this._twn) 
                {
                    this._twn.obj = arg1;
                }
            }
            return;
        }

        public function get content():flash.display.MovieClip
        {
            return this._content;
        }

        public function get direction():Number
        {
            return this._direction;
        }

        public function set direction(arg1:Number):void
        {
            this._direction = arg1 ? 1 : 0;
            return;
        }

        public function get duration():Number
        {
            return this._duration;
        }

        public function set duration(arg1:Number):void
        {
            if (arg1) 
            {
                this._duration = arg1;
                if (this._twn) 
                {
                    this._twn.duration = arg1;
                }
            }
            return;
        }

        public function get easing():Function
        {
            return this._easing;
        }

        public static const IN:uint=0;

        public static const OUT:uint=1;

        public var ID:int;

        protected var _content:flash.display.MovieClip;

        protected var _manager:fl.transitions.TransitionManager;

        protected var _direction:uint=0;

        protected var _duration:Number=2;

        protected var _easing:Function;

        protected var _progress:Number;

        protected var _innerBounds:flash.geom.Rectangle;

        protected var _outerBounds:flash.geom.Rectangle;

        protected var _width:Number=NaN;

        protected var _height:Number=NaN;

        protected var _twn:fl.transitions.Tween;
    }
}


//      class TransitionManager
package fl.transitions 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    
    public class TransitionManager extends flash.events.EventDispatcher
    {
        public function TransitionManager(arg1:flash.display.MovieClip)
        {
            this.type = fl.transitions.TransitionManager;
            this._visualPropList = {"x":null, "y":null, "scaleX":null, "scaleY":null, "alpha":null, "rotation":null};
            super();
            this.content = arg1;
            this._transitions = {};
            return;
        }

        public function get content():flash.display.MovieClip
        {
            return this._content;
        }

        public function set content(arg1:flash.display.MovieClip):void
        {
            this._content = arg1;
            this.saveContentAppearance();
            return;
        }

        public function get transitionsList():Object
        {
            return this._transitions;
        }

        public function get numTransitions():Number
        {
            var loc2:*=null;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._transitions;
            for each (loc2 in loc4) 
            {
                ++loc1;
            }
            return loc1;
        }

        public function get numInTransitions():Number
        {
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=this._transitions;
            var loc4:*=0;
            var loc5:*=loc2;
            for each (loc3 in loc5) 
            {
                if (loc3.direction) 
                {
                    continue;
                }
                ++loc1;
            }
            return loc1;
        }

        public function get numOutTransitions():Number
        {
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=this._transitions;
            var loc4:*=0;
            var loc5:*=loc2;
            for each (loc3 in loc5) 
            {
                if (!loc3.direction) 
                {
                    continue;
                }
                ++loc1;
            }
            return loc1;
        }

        public function get contentAppearance():Object
        {
            return this._contentAppearance;
        }

        public function startTransition(arg1:Object):fl.transitions.Transition
        {
            this.removeTransition(this.findTransition(arg1));
            var loc1:*=arg1.type;
            var loc2:*=new loc1(this._content, arg1, this);
            this.addTransition(loc2);
            loc2.start();
            return loc2;
        }

        public function addTransition(arg1:fl.transitions.Transition):fl.transitions.Transition
        {
            var loc1:*;
            var loc2:*;
            arg1.ID = loc1.IDCount = loc2 = ((loc1 = fl.transitions.TransitionManager).IDCount + 1);
            this._transitions[arg1.ID] = arg1;
            return arg1;
        }

        public function removeTransition(arg1:fl.transitions.Transition):Boolean
        {
            if (!arg1 || !this._transitions || !this._transitions[arg1.ID]) 
            {
                return false;
            }
            arg1.cleanUp();
            return delete this._transitions[arg1.ID];
        }

        public function findTransition(arg1:Object):fl.transitions.Transition
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._transitions;
            for each (loc1 in loc3) 
            {
                if (loc1.type != arg1.type) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public function removeAllTransitions():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._transitions;
            for each (loc1 in loc3) 
            {
                loc1.cleanUp();
                this.removeTransition(loc1);
            }
            return;
        }

        public function saveContentAppearance():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=this._content;
            if (!this._contentAppearance) 
            {
                var loc4:*;
                this._contentAppearance = loc4 = {};
                loc2 = loc4;
                loc4 = 0;
                var loc5:*=this._visualPropList;
                for (loc3 in loc5) 
                {
                    loc2[loc3] = loc1[loc3];
                }
                loc2.colorTransform = loc1.transform.colorTransform;
            }
            this._innerBounds = loc1.getBounds(loc1);
            this._outerBounds = loc1.getBounds(loc1.parent);
            this._width = loc1.width;
            this._height = loc1.height;
            return;
        }

        public function restoreContentAppearance():void
        {
            var loc3:*=null;
            var loc1:*=this._content;
            var loc2:*=this._contentAppearance;
            var loc4:*=0;
            var loc5:*=this._visualPropList;
            for (loc3 in loc5) 
            {
                loc1[loc3] = loc2[loc3];
            }
            loc1.transform.colorTransform = loc2.colorTransform;
            return;
        }

        function transitionInDone(arg1:Object):void
        {
            var loc1:*=false;
            this.removeTransition(arg1.target);
            if (this.numInTransitions == 0) 
            {
                loc1 = this._content.visible;
                if (this._triggerEvent == "hide" || this._triggerEvent == "hideChild") 
                {
                    this._content.visible = false;
                }
                if (loc1) 
                {
                    this.dispatchEvent(new flash.events.Event("allTransitionsInDone"));
                }
            }
            return;
        }

        function transitionOutDone(arg1:Object):void
        {
            var loc1:*=false;
            this.removeTransition(arg1.target);
            if (this.numOutTransitions == 0) 
            {
                this.restoreContentAppearance();
                loc1 = this._content.visible;
                if (loc1 && (this._triggerEvent == "hide" || this._triggerEvent == "hideChild")) 
                {
                    this._content.visible = false;
                }
                if (loc1) 
                {
                    this.dispatchEvent(new flash.events.Event("allTransitionsOutDone"));
                }
            }
            return;
        }

        public static function start(arg1:flash.display.MovieClip, arg2:Object):fl.transitions.Transition
        {
            if (!arg1.__transitionManager) 
            {
                arg1.__transitionManager = new TransitionManager(arg1);
            }
            if (arg2.direction != 1) 
            {
                arg1.__transitionManager._triggerEvent = "reveal";
            }
            else 
            {
                arg1.__transitionManager._triggerEvent = "hide";
            }
            return arg1.__transitionManager.startTransition(arg2);
        }

        
        {
            IDCount = 0;
        }

        public var type:Object;

        public var className:String="TransitionManager";

        internal var _content:flash.display.MovieClip;

        internal var _transitions:Object;

        public var _innerBounds:flash.geom.Rectangle;

        public var _outerBounds:flash.geom.Rectangle;

        public var _width:Number=NaN;

        public var _height:Number=NaN;

        internal var _contentAppearance:Object;

        internal var _visualPropList:Object;

        internal var _triggerEvent:String;

        internal static var IDCount:int=0;
    }
}


//      class Tween
package fl.transitions 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    
    public class Tween extends flash.events.EventDispatcher
    {
        public function Tween(arg1:Object, arg2:String, arg3:Function, arg4:Number, arg5:Number, arg6:Number, arg7:Boolean=false)
        {
            this.func = function (arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
            {
                return arg3 * arg1 / arg4 + arg2;
            }
            super();
            if (!arguments.length) 
            {
                return;
            }
            this.obj = arg1;
            this.prop = arg2;
            this.begin = arg4;
            this.position = arg4;
            this.duration = arg6;
            this.useSeconds = arg7;
            if (arg3 is Function) 
            {
                this.func = arg3;
            }
            this.finish = arg5;
            this._timer = new flash.utils.Timer(100);
            this.start();
            return;
        }

        public function get finish():Number
        {
            return this.begin + this.change;
        }

        public function continueTo(arg1:Number, arg2:Number):void
        {
            this.begin = this.position;
            this.finish = arg1;
            if (!isNaN(arg2)) 
            {
                this.duration = arg2;
            }
            this.start();
            return;
        }

        public function yoyo():void
        {
            this.continueTo(this.begin, this.time);
            return;
        }

        protected function startEnterFrame():void
        {
            var loc1:*=NaN;
            if (isNaN(this._fps)) 
            {
                _mc.addEventListener(flash.events.Event.ENTER_FRAME, this.onEnterFrame, false, 0, true);
            }
            else 
            {
                loc1 = 1000 / this._fps;
                this._timer.delay = loc1;
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.timerHandler, false, 0, true);
                this._timer.start();
            }
            this.isPlaying = true;
            return;
        }

        protected function stopEnterFrame():void
        {
            if (isNaN(this._fps)) 
            {
                _mc.removeEventListener(flash.events.Event.ENTER_FRAME, this.onEnterFrame);
            }
            else 
            {
                this._timer.stop();
            }
            this.isPlaying = false;
            return;
        }

        public function set finish(arg1:Number):void
        {
            this.change = arg1 - this.begin;
            return;
        }

        public function start():void
        {
            this.rewind();
            this.startEnterFrame();
            this.dispatchEvent(new fl.transitions.TweenEvent(fl.transitions.TweenEvent.MOTION_START, this._time, this._position));
            return;
        }

        public function stop():void
        {
            this.stopEnterFrame();
            this.dispatchEvent(new fl.transitions.TweenEvent(fl.transitions.TweenEvent.MOTION_STOP, this._time, this._position));
            return;
        }

        public function resume():void
        {
            this.fixTime();
            this.startEnterFrame();
            this.dispatchEvent(new fl.transitions.TweenEvent(fl.transitions.TweenEvent.MOTION_RESUME, this._time, this._position));
            return;
        }

        public function rewind(arg1:Number=0):void
        {
            this._time = arg1;
            this.fixTime();
            this.update();
            return;
        }

        public function fforward():void
        {
            this.time = this._duration;
            this.fixTime();
            return;
        }

        public function nextFrame():void
        {
            if (this.useSeconds) 
            {
                this.time = (flash.utils.getTimer() - this._startTime) / 1000;
            }
            else 
            {
                this.time = this._time + 1;
            }
            return;
        }

        protected function timerHandler(arg1:flash.events.TimerEvent):void
        {
            this.nextFrame();
            arg1.updateAfterEvent();
            return;
        }

        public function prevFrame():void
        {
            if (!this.useSeconds) 
            {
                this.time = (this._time - 1);
            }
            return;
        }

        internal function fixTime():void
        {
            if (this.useSeconds) 
            {
                this._startTime = flash.utils.getTimer() - this._time * 1000;
            }
            return;
        }

        internal function update():void
        {
            this.setPosition(this.getPosition(this._time));
            return;
        }

        
        {
            _mc = new flash.display.MovieClip();
        }

        public function set FPS(arg1:Number):void
        {
            var loc1:*=this.isPlaying;
            this.stopEnterFrame();
            this._fps = arg1;
            if (loc1) 
            {
                this.startEnterFrame();
            }
            return;
        }

        public function get time():Number
        {
            return this._time;
        }

        public function set time(arg1:Number):void
        {
            this.prevTime = this._time;
            if (arg1 > this.duration) 
            {
                if (this.looping) 
                {
                    this.rewind(arg1 - this._duration);
                    this.update();
                    this.dispatchEvent(new fl.transitions.TweenEvent(fl.transitions.TweenEvent.MOTION_LOOP, this._time, this._position));
                }
                else 
                {
                    if (this.useSeconds) 
                    {
                        this._time = this._duration;
                        this.update();
                    }
                    this.stop();
                    this.dispatchEvent(new fl.transitions.TweenEvent(fl.transitions.TweenEvent.MOTION_FINISH, this._time, this._position));
                }
            }
            else if (arg1 < 0) 
            {
                this.rewind();
                this.update();
            }
            else 
            {
                this._time = arg1;
                this.update();
            }
            return;
        }

        public function get duration():Number
        {
            return this._duration;
        }

        public function set duration(arg1:Number):void
        {
            this._duration = arg1 <= 0 ? Infinity : arg1;
            return;
        }

        public function get FPS():Number
        {
            return this._fps;
        }

        protected function onEnterFrame(arg1:flash.events.Event):void
        {
            this.nextFrame();
            return;
        }

        public function get position():Number
        {
            return this.getPosition(this._time);
        }

        public function set position(arg1:Number):void
        {
            this.setPosition(arg1);
            return;
        }

        public function getPosition(arg1:Number=NaN):Number
        {
            if (isNaN(arg1)) 
            {
                arg1 = this._time;
            }
            return this.func(arg1, this.begin, this.change, this._duration);
        }

        public function setPosition(arg1:Number):void
        {
            this.prevPos = this._position;
            if (this.prop.length) 
            {
                var loc1:*;
                this._position = loc1 = arg1;
                this.obj[this.prop] = loc1;
            }
            this.dispatchEvent(new fl.transitions.TweenEvent(fl.transitions.TweenEvent.MOTION_CHANGE, this._time, this._position));
            return;
        }

        public var isPlaying:Boolean=false;

        public var obj:Object=null;

        public var prop:String="";

        public var func:Function;

        public var begin:Number=NaN;

        public var useSeconds:Boolean=false;

        public var prevTime:Number=NaN;

        public var prevPos:Number=NaN;

        public var looping:Boolean=false;

        internal var _duration:Number=NaN;

        internal var _time:Number=NaN;

        internal var _fps:Number=NaN;

        internal var _position:Number=NaN;

        internal var _startTime:Number=NaN;

        internal var _intervalID:uint=0;

        internal var _finish:Number=NaN;

        public var change:Number=NaN;

        protected static var _mc:flash.display.MovieClip;

        internal var _timer:flash.utils.Timer=null;
    }
}


//      class TweenEvent
package fl.transitions 
{
    import flash.events.*;
    
    public class TweenEvent extends flash.events.Event
    {
        public function TweenEvent(arg1:String, arg2:Number, arg3:Number, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this.time = arg2;
            this.position = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new fl.transitions.TweenEvent(this.type, this.time, this.position, this.bubbles, this.cancelable);
        }

        public static const MOTION_START:String="motionStart";

        public static const MOTION_STOP:String="motionStop";

        public static const MOTION_FINISH:String="motionFinish";

        public static const MOTION_CHANGE:String="motionChange";

        public static const MOTION_RESUME:String="motionResume";

        public static const MOTION_LOOP:String="motionLoop";

        public var time:Number=NaN;

        public var position:Number=NaN;
    }
}


//      class Wipe
package fl.transitions 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class Wipe extends fl.transitions.Transition
    {
        public function Wipe(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            if (arg2.startPoint) 
            {
                this._startPoint = arg2.startPoint;
            }
            this._initMask();
            return;
        }

        public override function get type():Class
        {
            return Wipe;
        }

        public override function start():void
        {
            this._content.mask = this._mask;
            super.start();
            return;
        }

        public override function cleanUp():void
        {
            this._content.removeChild(this._mask);
            this._content.mask = null;
            super.cleanUp();
            return;
        }

        protected function _initMask():void
        {
            this._mask = new flash.display.MovieClip();
            this._mask.visible = false;
            this._content.addChild(this._mask);
            this._innerMask = new flash.display.MovieClip();
            this._mask.addChild(this._innerMask);
            var loc2:*;
            this._innerMask.y = loc2 = 50;
            this._innerMask.x = loc2;
            this._innerMask.graphics.beginFill(16711680);
            this.drawBox(this._innerMask, -50, -50, 100, 100);
            this._innerMask.graphics.endFill();
            loc2 = this._startPoint;
            switch (loc2) 
            {
                case 3:
                case 2:
                {
                    this._innerMask.rotation = 90;
                    break;
                }
                case 1:
                case 4:
                case 5:
                {
                    this._innerMask.rotation = 0;
                    break;
                }
                case 9:
                case 6:
                {
                    this._innerMask.rotation = 180;
                    break;
                }
                case 7:
                case 8:
                {
                    this._innerMask.rotation = -90;
                    break;
                }
            }
            if (this._startPoint % 2) 
            {
                this._cornerMode = true;
            }
            var loc1:*=this._innerBounds;
            this._mask.x = loc1.left;
            this._mask.y = loc1.top;
            this._mask.width = loc1.width;
            this._mask.height = loc1.height;
            return;
        }

        protected override function _render(arg1:Number):void
        {
            this._innerMask.graphics.clear();
            this._innerMask.graphics.beginFill(16711680);
            if (this._cornerMode) 
            {
                this._drawSlant(this._innerMask, arg1);
            }
            else 
            {
                this.drawBox(this._innerMask, -50, -50, arg1 * 100, 100);
            }
            this._innerMask.graphics.endFill();
            return;
        }

        protected function _drawSlant(arg1:flash.display.MovieClip, arg2:Number):void
        {
            arg1.graphics.moveTo(-50, -50);
            if (arg2 <= 0.5) 
            {
                arg1.graphics.lineTo(200 * (arg2 - 0.25), -50);
                arg1.graphics.lineTo(-50, 200 * (arg2 - 0.25));
            }
            else 
            {
                arg1.graphics.lineTo(50, -50);
                arg1.graphics.lineTo(50, 200 * (arg2 - 0.75));
                arg1.graphics.lineTo(200 * (arg2 - 0.75), 50);
                arg1.graphics.lineTo(-50, 50);
            }
            arg1.graphics.lineTo(-50, -50);
            return;
        }

        protected var _mask:flash.display.MovieClip;

        protected var _innerMask:flash.display.MovieClip;

        protected var _startPoint:uint=4;

        protected var _cornerMode:Boolean=false;
    }
}


//      class Zoom
package fl.transitions 
{
    import flash.display.*;
    
    public class Zoom extends fl.transitions.Transition
    {
        public function Zoom(arg1:flash.display.MovieClip, arg2:Object, arg3:fl.transitions.TransitionManager)
        {
            super(arg1, arg2, arg3);
            this._scaleXFinal = this.manager.contentAppearance.scaleX;
            this._scaleYFinal = this.manager.contentAppearance.scaleY;
            return;
        }

        public override function get type():Class
        {
            return Zoom;
        }

        protected override function _render(arg1:Number):void
        {
            if (arg1 < 0) 
            {
                arg1 = 0;
            }
            this._content.scaleX = arg1 * this._scaleXFinal;
            this._content.scaleY = arg1 * this._scaleYFinal;
            return;
        }

        protected var _scaleXFinal:Number=1;

        protected var _scaleYFinal:Number=1;
    }
}


//  package mgs
//    package aurora
//      package api
//        package enums
//          package multiplayer
//            class SocketIdentifiers
package mgs.aurora.api.enums.multiplayer 
{
    public class SocketIdentifiers extends Object
    {
        public function SocketIdentifiers()
        {
            super();
            return;
        }

        internal static const NAME:String="SocketIdentifiers";

        public static const MPV_LOBBY:String=NAME + "/mpv_lobby";

        public static const MPV_ROUTER:String=NAME + "/mpv_router";
    }
}


//          class BalanceDisplayType
package mgs.aurora.api.enums 
{
    public class BalanceDisplayType extends Object
    {
        public function BalanceDisplayType()
        {
            super();
            return;
        }

        public static const COINS:int=0;

        public static const CREDITS:int=1;

        public static const CURRENCY:int=2;
    }
}


//          class BrowserCacheLimits
package mgs.aurora.api.enums 
{
    public class BrowserCacheLimits extends Object
    {
        public function BrowserCacheLimits()
        {
            super();
            return;
        }

        public static const LIMIT_50:int=50;

        public static const LIMIT_250:int=250;

        public static const LIMIT_320:int=320;

        public static const LIMIT_350:int=350;

        public static const LIMIT_1024:int=1024;
    }
}


//          class ContentType
package mgs.aurora.api.enums 
{
    public class ContentType extends Object
    {
        public function ContentType()
        {
            super();
            return;
        }

        public static const SWF_CONTENT:int=0;

        public static const XML_CONTENT:int=1;

        public static const BIN_CONTENT:int=2;
    }
}


//          class ControlType
package mgs.aurora.api.enums 
{
    public class ControlType extends Object
    {
        public function ControlType()
        {
            super();
            return;
        }

        internal static const NAME:String="control/type";

        public static const BUTTON:String=NAME + "/button";

        public static const GRAPHIC:String=NAME + "/graphic";

        public static const CHECKBOX:String=NAME + "/checkbox";

        public static const RADIOBUTTON:String=NAME + "/radiobutton";

        public static const COMBOBOX:String=NAME + "/combobox";

        public static const TEXT:String=NAME + "/text";

        public static const INPUTTEXT:String=NAME + "/inputtext";
    }
}


//          class CurrencyFormat
package mgs.aurora.api.enums 
{
    public class CurrencyFormat extends Object
    {
        public function CurrencyFormat()
        {
            super();
            return;
        }

        public static const SYMBOL:int=0;

        public static const FULL:int=1;

        public static const SYMBOL_GENERIC:int=2;

        public static const FULL_GENERIC:int=3;
    }
}


//          class EngineBadgeTypes
package mgs.aurora.api.enums 
{
    public class EngineBadgeTypes extends Object
    {
        public function EngineBadgeTypes()
        {
            super();
            return;
        }

        public static const NONE:int=0;

        public static const MICROGAMING:int=1;
    }
}


//          class FocusType
package mgs.aurora.api.enums 
{
    public class FocusType extends Object
    {
        public function FocusType()
        {
            super();
            return;
        }

        public static const FOCUSED:int=1;

        public static const UNFOCUSED:int=0;

        public static const FOCUS_VALUE:String="focus";
    }
}


//          class PlatformType
package mgs.aurora.api.enums 
{
    public class PlatformType extends Object
    {
        public function PlatformType()
        {
            super();
            return;
        }

        internal static const NAME:String="platform";

        public static const VIPER:String=NAME + "/viper";

        public static const WEB:String=NAME + "/web";
    }
}


//          class PreloaderTextLabel
package mgs.aurora.api.enums 
{
    public class PreloaderTextLabel extends Object
    {
        public function PreloaderTextLabel()
        {
            super();
            return;
        }

        public static const LOADING:String="loading";

        public static const LOADING_PAYTABLE:String="loading_paytable";

        public static const LOADING_FEATURE:String="loading_feature";

        public static const LOADING_BONUS_FEATURE:String="loading_bonus_feature";
    }
}


//          class RegistrationLevel
package mgs.aurora.api.enums 
{
    public class RegistrationLevel extends Object
    {
        public function RegistrationLevel()
        {
            super();
            return;
        }

        public static const REAL:int=0;

        public static const GUEST:int=1;

        public static const NOT_REGISTERED:int=2;
    }
}


//          class SystemButtonTypes
package mgs.aurora.api.enums 
{
    public class SystemButtonTypes extends Object
    {
        public function SystemButtonTypes()
        {
            super();
            return;
        }

        internal static const NAME:String="systembuttontypes";

        public static const OPTIONS:String=NAME + "/options";

        public static const BANK:String=NAME + "/bank";

        public static const STATS:String=NAME + "/stats";

        public static const EXPERT:String=NAME + "/expert";

        public static const REGULAR:String=NAME + "/regular";

        public static const EXIT:String=NAME + "/exit";

        public static const HELP:String=NAME + "/help";

        public static const PLAYFORREAL:String=NAME + "/playforreal";

        public static const CONNECT:String=NAME + "/connect";

        public static const DISCONNECT:String=NAME + "/disconnect";
    }
}


//          class UserType
package mgs.aurora.api.enums 
{
    public class UserType extends Object
    {
        public function UserType()
        {
            super();
            return;
        }

        internal static const NAME:String="usertype";

        public static const REAL:String=NAME + "/real";

        public static const GUEST:String=NAME + "/guest";

        public static const PRACTICE:String=NAME + "/practice";

        public static const DEMO:String=NAME + "/demo";

        public static const FUN_BONUS:String=NAME + "/funBonus";
    }
}


//        package events
//          package multiplayer
//            class ApiMpfAliasEvent
package mgs.aurora.api.events.multiplayer 
{
    import flash.events.*;
    
    public class ApiMpfAliasEvent extends flash.events.Event
    {
        public function ApiMpfAliasEvent(arg1:String, arg2:String=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._aliasID = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.multiplayer.ApiMpfAliasEvent(type, this.aliasID, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiMpfAliasEvent", "aliasID", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get aliasID():String
        {
            return this._aliasID;
        }

        internal static const NAME:String="ApiMpfAliasEvent";

        public static const NEW_ALIAS_RECEIVED:String=NAME + "/types/new_alias_received";

        public static const ACTIVATION_CANCELLED:String=NAME + "/types/activation_cancelled";

        internal var _aliasID:String;
    }
}


//            class ApiMpfAvatarEvent
package mgs.aurora.api.events.multiplayer 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import mgs.aurora.api.interfaces.multiplayer.*;
    
    public class ApiMpfAvatarEvent extends flash.events.Event
    {
        public function ApiMpfAvatarEvent(arg1:String, arg2:*=null, arg3:mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata=null, arg4:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata>=null, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this._avatar = arg2;
            this._metadata = arg3;
            this._metadataList = arg4;
            if (arg3 == null && !(this._metadataList == null)) 
            {
                this._metadata = this._metadataList[0];
            }
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.multiplayer.ApiMpfAvatarEvent(type, this.avatar, this.metadata, this.metadataList, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiMpfAvatarEvent", "type", "avatar", "metadata", "metadataList", "bubbles", "cancelable", "eventPhase");
        }

        public function get avatar():*
        {
            return this._avatar;
        }

        public function get metadata():mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata
        {
            return this._metadata;
        }

        public function get metadataList():__AS3__.vec.Vector.<mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata>
        {
            return this._metadataList;
        }

        internal static const NAME:String="ApiMpfAvatarEvent";

        public static const AVATAR_RECEIVED:String=NAME + "/types/avatar_received";

        public static const AVATAR_METADATA_RECEIVED:String=NAME + "/types/avatar_metadata_received";

        internal var _avatar:*;

        internal var _metadata:mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata;

        internal var _metadataList:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata>;
    }
}


//            class ApiMpfPacketEvent
package mgs.aurora.api.events.multiplayer 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.multiplayer.*;
    
    public class ApiMpfPacketEvent extends flash.events.Event
    {
        public function ApiMpfPacketEvent(arg1:String, arg2:mgs.aurora.api.interfaces.multiplayer.IMPFPacketResponse, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._response = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.multiplayer.ApiMpfPacketEvent(type, this._response, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiMpfPacketEvent", "response", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get response():mgs.aurora.api.interfaces.multiplayer.IMPFPacketResponse
        {
            return this._response;
        }

        internal static const NAME:String="ApiMpfPacketEvent";

        public static const PACKET_RECEIVED:String=NAME + "/event/packet_received";

        internal var _response:mgs.aurora.api.interfaces.multiplayer.IMPFPacketResponse;
    }
}


//          class ApiBankingEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiBankingEvent extends flash.events.Event
    {
        public function ApiBankingEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiBankingEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiBankingEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="api_banking_event";

        public static const BALANCE_CHANGE:String=NAME + "/balance_change";

        public static const BALANCE_CHANGED_BY_SYSTEM:String=NAME + "/balance_changed_by_system";

        public static const BALANCE_CHANGED_BY_GAME:String=NAME + "/balance_changed_by_game";

        public static const BANK_OPEN:String=NAME + "/bank_open";

        public static const BANK_CLOSE:String=NAME + "/bank_close";
    }
}


//          class ApiChipSelectorEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiChipSelectorEvent extends flash.events.Event
    {
        public function ApiChipSelectorEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiChipSelectorEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiChipSelectorEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="api/chip_selector/event";

        public static const INC:String=NAME + "/inc";

        public static const DEC:String=NAME + "/dec";
    }
}


//          class ApiDialogueFocusEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    
    public class ApiDialogueFocusEvent extends flash.events.Event
    {
        public function ApiDialogueFocusEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.api.interfaces.dialogues.controls.IControl, arg5:flash.events.FocusEvent, arg6:Boolean=false, arg7:Boolean=false)
        {
            super(arg1, arg6, arg7);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            this.originalEvent = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiDialogueFocusEvent(type, this.diagId, this.diagType, this.control, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiDialogueFocusEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const FOCUS_IN:String=flash.events.FocusEvent.FOCUS_IN;

        public static const FOCUS_OUT:String=flash.events.FocusEvent.FOCUS_OUT;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.api.interfaces.dialogues.controls.IControl;

        public var originalEvent:flash.events.FocusEvent;
    }
}


//          class ApiDialogueHandlerEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiDialogueHandlerEvent extends flash.events.Event
    {
        public function ApiDialogueHandlerEvent(arg1:String, arg2:String, arg3:String=null, arg4:String=null)
        {
            super(arg1);
            this.id = arg2;
            this.diagId = arg3;
            this.diagType = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiDialogueHandlerEvent(type, this.id, this.diagId, this.diagType);
        }

        public override function toString():String
        {
            return formatToString("NewEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="apidialogues_handler/event";

        public static const DIALOGUE_CREATED:String=NAME + "/dialogue_created";

        public static const DIALOGUE_DISPLAYED:String=NAME + "/dialogue_displayed";

        public static const OTHER_DIALOGUE_DISPLAYED:String=NAME + "/other_dialogue_displayed";

        public static const REMOVING_DIALOGUE:String=NAME + "/removing_dialogue";

        public static const DIALOGUE_REMOVED:String=NAME + "/dialogue_removed";

        public static const OTHER_DIALOGUE_REMOVED:String=NAME + "/other_dialogue_removed";

        public static const ALL_DIALOGUES_REMOVED:String=NAME + "/all_dialogues_removed";

        public var id:String;

        public var diagId:String;

        public var diagType:String;
    }
}


//          class ApiDialogueKeyboardEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    
    public class ApiDialogueKeyboardEvent extends flash.events.Event
    {
        public function ApiDialogueKeyboardEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.api.interfaces.dialogues.controls.IControl, arg5:flash.events.KeyboardEvent, arg6:Boolean=false, arg7:Boolean=false)
        {
            super(arg1, arg6, arg7);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            this.originalEvent = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiDialogueKeyboardEvent(type, this.diagId, this.diagType, this.control, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueKeyboardEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const KEY_UP:String=flash.events.KeyboardEvent.KEY_UP;

        public static const KEY_DOWN:String=flash.events.KeyboardEvent.KEY_DOWN;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.api.interfaces.dialogues.controls.IControl;

        public var originalEvent:flash.events.KeyboardEvent;
    }
}


//          class ApiDialogueMouseEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    
    public class ApiDialogueMouseEvent extends flash.events.Event
    {
        public function ApiDialogueMouseEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.api.interfaces.dialogues.controls.IControl, arg5:flash.events.MouseEvent, arg6:Boolean=false, arg7:Boolean=false)
        {
            super(arg1, arg6, arg7);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            this.originalEvent = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiDialogueMouseEvent(type, this.diagId, this.diagType, this.control, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueMouseEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const MOUSE_UP:String=mgs.aurora.api.events.ApiMouseEvent.MOUSE_UP;

        public static const MOUSE_OUT:String=mgs.aurora.api.events.ApiMouseEvent.MOUSE_OUT;

        public static const ROLL_OUT:String=mgs.aurora.api.events.ApiMouseEvent.ROLL_OUT;

        public static const DOUBLE_CLICK:String=mgs.aurora.api.events.ApiMouseEvent.DOUBLE_CLICK;

        public static const CLICK:String=mgs.aurora.api.events.ApiMouseEvent.CLICK;

        public static const RIGHT_CLICK:String=mgs.aurora.api.events.ApiMouseEvent.RIGHT_CLICK;

        public static const MOUSE_DOWN:String=mgs.aurora.api.events.ApiMouseEvent.MOUSE_DOWN;

        public static const MOUSE_OVER:String=mgs.aurora.api.events.ApiMouseEvent.MOUSE_OVER;

        public static const ROLL_OVER:String=mgs.aurora.api.events.ApiMouseEvent.ROLL_OVER;

        public static const MOUSE_MOVE:String=mgs.aurora.api.events.ApiMouseEvent.MOUSE_MOVE;

        public static const MOUSE_WHEEL:String=mgs.aurora.api.events.ApiMouseEvent.MOUSE_WHEEL;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.api.interfaces.dialogues.controls.IControl;

        public var originalEvent:flash.events.MouseEvent;
    }
}


//          class ApiDialogueSelectionEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    
    public class ApiDialogueSelectionEvent extends flash.events.Event
    {
        public function ApiDialogueSelectionEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.api.interfaces.dialogues.controls.IControl, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiDialogueSelectionEvent(type, this.diagId, this.diagType, this.control, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueSelectionEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const SELECTED:String="api/dialogue/selected/event";

        public static const DESELECTED:String="api/dialogue/deselected/event";

        public static const SELECTION_CHANGE:String="api/dialogue/selectionChanged/event";

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.api.interfaces.dialogues.controls.IControl;
    }
}


//          class ApiDialogueTextEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    
    public class ApiDialogueTextEvent extends flash.events.Event
    {
        public function ApiDialogueTextEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.api.interfaces.dialogues.controls.IControl, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiDialogueTextEvent(type, this.diagId, this.diagType, this.control, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueTextEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const CHANGE:String=mgs.aurora.api.events.ApiTextEvent.CHANGE;

        public static const TEXT_INPUT:String=mgs.aurora.api.events.ApiTextEvent.TEXT_INPUT;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.api.interfaces.dialogues.controls.IControl;
    }
}


//          class ApiFileLoadEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.server.*;
    
    public class ApiFileLoadEvent extends flash.events.Event
    {
        public function ApiFileLoadEvent(arg1:String, arg2:mgs.aurora.api.interfaces.server.IFileResponse, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._response = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiFileLoadEvent(type, this._response, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiFileLoadEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get response():mgs.aurora.api.interfaces.server.IFileResponse
        {
            return this._response;
        }

        internal static const NAME:String="api_file_load_event";

        public static const COMPLETE:String=NAME + "/complete";

        internal var _response:mgs.aurora.api.interfaces.server.IFileResponse;
    }
}


//          class ApiFrameEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiFrameEvent extends flash.events.Event
    {
        public function ApiFrameEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiFrameEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiFrameEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="api_frame_event";

        public static const GAME_FRAME_LAYOUT_COMPLETE:String=NAME + "/game_layout_complete";

        public static const FRAME_SWITCHING_COMPLETE:String=NAME + "/frame_switching_complete";
    }
}


//          class ApiInteractionEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiInteractionEvent extends flash.events.Event
    {
        public function ApiInteractionEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._id = arg2;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiInteractionEvent(type, this._id, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiInteractionEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const MOUSE_NAME:String="api_mouse_event";

        internal static const KEYBOARD_NAME:String="api_keyboard_event";

        public static const KEY_UP:String=KEYBOARD_NAME + "/key_up";

        public static const KEY_DOWN:String=KEYBOARD_NAME + "/key_down";

        public static const MOUSE_UP:String=MOUSE_NAME + "/mouse_up";

        public static const MOUSE_OUT:String=MOUSE_NAME + "/mouse_out";

        public static const ROLL_OUT:String=MOUSE_NAME + "/roll_out";

        public static const DOUBLE_CLICK:String=MOUSE_NAME + "/double_click";

        public static const CLICK:String=MOUSE_NAME + "/click";

        public static const RIGHT_CLICK:String=MOUSE_NAME + "/right_click";

        public static const MOUSE_DOWN:String=MOUSE_NAME + "/mouse_down";

        public static const MOUSE_OVER:String=MOUSE_NAME + "/mouse_over";

        public static const ROLL_OVER:String=MOUSE_NAME + "/roll_over";

        public static const MOUSE_MOVE:String=MOUSE_NAME + "/mouse_move";

        public static const MOUSE_WHEEL:String=MOUSE_NAME + "/mouse_wheel";

        protected var _id:String;
    }
}


//          class ApiKeyboardEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiKeyboardEvent extends mgs.aurora.api.events.ApiInteractionEvent
    {
        public function ApiKeyboardEvent(arg1:String, arg2:String, arg3:flash.events.KeyboardEvent, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg2, arg4, arg5);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiKeyboardEvent(type, this._id, this._targetEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiKeyboardEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get originalEvent():flash.events.KeyboardEvent
        {
            return this._targetEvent;
        }

        public static const KEY_UP:String=mgs.aurora.api.events.ApiInteractionEvent.KEY_UP;

        public static const KEY_DOWN:String=mgs.aurora.api.events.ApiInteractionEvent.KEY_DOWN;

        internal var _targetEvent:flash.events.KeyboardEvent;
    }
}


//          class ApiMouseEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiMouseEvent extends mgs.aurora.api.events.ApiInteractionEvent
    {
        public function ApiMouseEvent(arg1:String, arg2:String, arg3:flash.events.MouseEvent, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg2, arg4, arg5);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiMouseEvent(type, _id, this._targetEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiMouseEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get originalEvent():flash.events.MouseEvent
        {
            return this._targetEvent;
        }

        public static const MOUSE_UP:String=mgs.aurora.api.events.ApiInteractionEvent.MOUSE_UP;

        public static const MOUSE_OUT:String=mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OUT;

        public static const ROLL_OUT:String=mgs.aurora.api.events.ApiInteractionEvent.ROLL_OUT;

        public static const DOUBLE_CLICK:String=mgs.aurora.api.events.ApiInteractionEvent.DOUBLE_CLICK;

        public static const CLICK:String=mgs.aurora.api.events.ApiInteractionEvent.CLICK;

        public static const RIGHT_CLICK:String=mgs.aurora.api.events.ApiInteractionEvent.RIGHT_CLICK;

        public static const MOUSE_DOWN:String=mgs.aurora.api.events.ApiInteractionEvent.MOUSE_DOWN;

        public static const MOUSE_OVER:String=mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OVER;

        public static const ROLL_OVER:String=mgs.aurora.api.events.ApiInteractionEvent.ROLL_OVER;

        public static const MOUSE_MOVE:String=mgs.aurora.api.events.ApiInteractionEvent.MOUSE_MOVE;

        public static const MOUSE_WHEEL:String=mgs.aurora.api.events.ApiInteractionEvent.MOUSE_WHEEL;

        internal var _targetEvent:flash.events.MouseEvent;
    }
}


//          class ApiPacketEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.server.*;
    
    public class ApiPacketEvent extends flash.events.Event
    {
        public function ApiPacketEvent(arg1:String, arg2:mgs.aurora.api.interfaces.server.IPacketResponse, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._response = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiPacketEvent(type, this._response, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiPacketEvent", "type", "response", "bubbles", "cancelable", "eventPhase");
        }

        public function get response():mgs.aurora.api.interfaces.server.IPacketResponse
        {
            return this._response;
        }

        internal static const NAME:String="api_packet_event";

        public static const RECEIVED:String=NAME + "/received";

        internal var _response:mgs.aurora.api.interfaces.server.IPacketResponse;
    }
}


//          class ApiSessionEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiSessionEvent extends flash.events.Event
    {
        public function ApiSessionEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiSessionEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiSessionEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="api_session_event";

        public static const LOGIN_SUCCESS:String=NAME + "/login_success";

        public static const LOGIN_FAILURE:String=NAME + "/login_failure";

        public static const LOGIN_ABORTED:String=NAME + "/login_aborted";

        public static const LOGGED_OUT:String=NAME + "/logged_out";
    }
}


//          class ApiSoundEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import flash.media.*;
    
    public class ApiSoundEvent extends flash.events.Event
    {
        public function ApiSoundEvent(arg1:String, arg2:String, arg3:String, arg4:flash.media.SoundChannel, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this._id = arg2;
            this._group = arg3;
            this._channel = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiSoundEvent(type, this.id, this.group, this.channel, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiSoundEvent", "type", "id", "group", "channel", "bubbles", "cancelable", "eventPhase");
        }

        public function get group():String
        {
            return this._group;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get channel():flash.media.SoundChannel
        {
            return this._channel;
        }

        internal static const NAME:String="api/sound/event";

        public static const COMPLETE:String=NAME + "/complete";

        public static const VOLUMEOVERTIME:String=NAME + "/volumeovertime";

        public static const PANOVERTIME:String=NAME + "/panovertime";

        public static const MUTE:String=NAME + "/mute";

        public static const VOLUME:String=NAME + "/volume";

        public static const STOPPED:String=NAME + "/stopped";

        internal var _group:String;

        internal var _id:String;

        internal var _channel:flash.media.SoundChannel;
    }
}


//          class ApiStatusEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    import flash.utils.*;
    
    public class ApiStatusEvent extends flash.events.Event
    {
        public function ApiStatusEvent(arg1:String, arg2:flash.utils.Dictionary=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiStatusEvent(type, this._data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiStatusEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():flash.utils.Dictionary
        {
            return this._data;
        }

        internal static const NAME:String="api_status_event";

        public static const MODULE_INIT:String=NAME + "/module_init";

        public static const MODULE_EXIT:String=NAME + "/module_exit";

        public static const SYSTEM_READY:String=NAME + "/system_ready";

        public static const SYSTEM_ERROR:String=NAME + "/system_error";

        public static const FOCUS_CHANGE:String=NAME + "/focus_change";

        internal var _data:flash.utils.Dictionary;
    }
}


//          class ApiTextEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiTextEvent extends flash.events.Event
    {
        public function ApiTextEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.id = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiTextEvent(type, this.id, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemTextEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="api/text/event";

        public static const CHANGE:String=NAME + "/change";

        public static const TEXT_INPUT:String=NAME + "/text_input";

        public var id:String;
    }
}


//          class ApiToolTipEvent
package mgs.aurora.api.events 
{
    import flash.events.*;
    
    public class ApiToolTipEvent extends flash.events.Event
    {
        public function ApiToolTipEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.api.events.ApiToolTipEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ApiToolTipEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="api_tooltip_event";

        public static const SHOWING:String=NAME + "/showing";

        public static const REMOVED:String=NAME + "/removed";
    }
}


//        package interfaces
//          package banking
//            class IBalanceDisplay
package mgs.aurora.api.interfaces.banking 
{
    public interface IBalanceDisplay
    {
        function get coinSize():uint;

        function set coinSize(arg1:uint):void;

        function get coinsBalance():Number;

        function get displayType():int;

        function set displayType(arg1:int):void;

        function get betValue():Number;

        function set betValue(arg1:Number):void;

        function get winValue():Number;

        function set winValue(arg1:Number):void;

        function getCreditsDisplayText(arg1:Number, arg2:Boolean=false, arg3:String=null, arg4:String=null):String;

        function formatToCurrency(arg1:Number, arg2:int=0, arg3:String=null, arg4:Boolean=false, arg5:String=null):String;

        function getCurrencyDisplay(arg1:int=0, arg2:String=null, arg3:Boolean=false):String;

        function getCurrencyISO():String;

        function setCurrencyISO(arg1:String):Boolean;

        function formatCoinsDisplay(arg1:Number):String;

        function formatUCSChipsSize(arg1:Number):String;
    }
}


//          package controls
//            class IButton
package mgs.aurora.api.interfaces.controls 
{
    public interface IButton extends mgs.aurora.api.interfaces.controls.IPositionalControl
    {
    }
}


//            class IControl
package mgs.aurora.api.interfaces.controls 
{
    import flash.events.*;
    
    public interface IControl extends flash.events.IEventDispatcher
    {
        function get id():String;

        function get type():String;

        function get enabled():Boolean;

        function set enabled(arg1:Boolean):void;

        function get visible():Boolean;

        function set visible(arg1:Boolean):void;
    }
}


//            class IControlGroup
package mgs.aurora.api.interfaces.controls 
{
    public interface IControlGroup extends mgs.aurora.api.interfaces.controls.IControlList
    {
        function linkToGroup(arg1:String):void;

        function unlinkFromGroup(arg1:String):void;
    }
}


//            class IControlList
package mgs.aurora.api.interfaces.controls 
{
    import flash.events.*;
    
    public interface IControlList extends flash.events.IEventDispatcher
    {
        function enableControls(arg1:String):void;

        function enableAllControls():void;

        function disableControls(arg1:String):void;

        function disableAllControls():void;

        function showControls(arg1:String):void;

        function showAllControls():void;

        function hideControls(arg1:String):void;

        function hideAllControls():void;

        function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl;

        function hasControls(arg1:String):Boolean;

        function get enabledList():String;

        function get disabledList():String;

        function get visibleList():String;

        function get hiddenList():String;
    }
}


//            class IControlManager
package mgs.aurora.api.interfaces.controls 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public interface IControlManager extends mgs.aurora.api.interfaces.controls.IControlList
    {
        function getGroup(arg1:String):mgs.aurora.api.interfaces.controls.IControlGroup;

        function createGroups(arg1:String):void;

        function removeGroups(arg1:String):void;

        function removeAllGroups():void;

        function hasGroups(arg1:String):Boolean;

        function linkControlsToGroups(arg1:String, arg2:String):void;

        function unlinkControlsFromGroups(arg1:String, arg2:String):void;

        function addControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void;

        function addControls(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void;

        function removeControls(arg1:String):void;

        function removeAllControls():void;

        function lockAllControls():void;

        function unlockAllControls():void;

        function changeControl(arg1:String, arg2:String, arg3:String=""):void;
    }
}


//            class ICustomControl
package mgs.aurora.api.interfaces.controls 
{
    import flash.display.*;
    
    public interface ICustomControl extends mgs.aurora.api.interfaces.controls.IControl
    {
        function addToContainer(arg1:flash.display.DisplayObjectContainer):void;

        function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void;

        function removeFromContainer():void;

        function get x():Number;

        function set x(arg1:Number):void;

        function get y():Number;

        function set y(arg1:Number):void;

        function get width():Number;

        function set width(arg1:Number):void;

        function get height():Number;

        function set height(arg1:Number):void;

        function get locked():Boolean;

        function set locked(arg1:Boolean):void;

        function get displayObject():flash.display.DisplayObject;

        function get text():String;

        function set text(arg1:String):void;
    }
}


//            class IGraphic
package mgs.aurora.api.interfaces.controls 
{
    public interface IGraphic extends mgs.aurora.api.interfaces.controls.IPositionalControl
    {
    }
}


//            class IPositionalControl
package mgs.aurora.api.interfaces.controls 
{
    public interface IPositionalControl extends mgs.aurora.api.interfaces.controls.IControl
    {
        function get x():Number;

        function set x(arg1:Number):void;

        function get y():Number;

        function set y(arg1:Number):void;
    }
}


//            class IText
package mgs.aurora.api.interfaces.controls 
{
    public interface IText extends mgs.aurora.api.interfaces.controls.IPositionalControl
    {
        function get text():String;

        function set text(arg1:String):void;

        function get color():uint;

        function set color(arg1:uint):void;

        function get bold():Boolean;

        function set bold(arg1:Boolean):void;

        function get italic():Boolean;

        function set italic(arg1:Boolean):void;

        function get underline():Boolean;

        function set underline(arg1:Boolean):void;
    }
}


//          package dialogues
//            package controls
//              class IButton
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IButton extends mgs.aurora.api.interfaces.dialogues.controls.IControl
    {
        function get tabIndex():int;

        function set tabIndex(arg1:int):void;

        function get textField():mgs.aurora.api.interfaces.dialogues.controls.IText;
    }
}


//              class IButtonList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IButtonList extends mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        function getButton(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IButton;

        function hasButtons(arg1:String):Boolean;
    }
}


//              class ICheckBox
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface ICheckBox extends mgs.aurora.api.interfaces.dialogues.controls.IButton
    {
        function get checked():Boolean;

        function set checked(arg1:Boolean):void;
    }
}


//              class ICheckBoxList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface ICheckBoxList extends mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        function getCheckBox(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.ICheckBox;

        function hasCheckBox(arg1:String):Boolean;
    }
}


//              class IComboBox
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IComboBox extends mgs.aurora.api.interfaces.dialogues.controls.IControl
    {
        function get editable():Boolean;

        function set editable(arg1:Boolean):void;

        function get selectedIndex():int;

        function set selectedIndex(arg1:int):void;

        function get selectedItem():Object;

        function get text():String;

        function set text(arg1:String):void;

        function get textField():mgs.aurora.api.interfaces.dialogues.controls.IInputText;

        function get numItems():int;

        function addItem(arg1:Object):void;

        function addItemAt(arg1:Object, arg2:uint):void;

        function close():void;

        function getItemAt(arg1:uint):Object;

        function open():void;

        function removeAll():void;

        function removeItem(arg1:Object):Object;

        function removeItemAt(arg1:uint):Object;

        function replaceItemAt(arg1:Object, arg2:uint):Object;
    }
}


//              class IComboBoxList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IComboBoxList extends mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        function getComboBox(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IComboBox;

        function hasComboBox(arg1:String):Boolean;
    }
}


//              class IControl
package mgs.aurora.api.interfaces.dialogues.controls 
{
    import flash.events.*;
    
    public interface IControl extends flash.events.IEventDispatcher
    {
        function get id():String;

        function get type():String;

        function get x():Number;

        function get y():Number;

        function get width():Number;

        function get height():Number;

        function get enabled():Boolean;

        function set enabled(arg1:Boolean):void;

        function get visible():Boolean;

        function set visible(arg1:Boolean):void;

        function get hitTest():Boolean;

        function get filters():Array;

        function set filters(arg1:Array):void;

        function get alpha():Number;

        function set alpha(arg1:Number):void;

        function move(arg1:Number, arg2:Number):void;

        function resize(arg1:Number, arg2:Number):void;
    }
}


//              class IControlList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    import flash.events.*;
    
    public interface IControlList extends flash.events.IEventDispatcher
    {
        function enable(arg1:String):void;

        function enableAll():void;

        function disable(arg1:String):void;

        function disableAll():void;

        function show(arg1:String):void;

        function showAll():void;

        function hide(arg1:String):void;

        function hideAll():void;

        function get enabledList():String;

        function get disabledList():String;

        function get visibleList():String;

        function get hiddenList():String;

        function get list():String;
    }
}


//              class IGraphic
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IGraphic extends mgs.aurora.api.interfaces.dialogues.controls.IControl
    {
        function get scaleX():Number;

        function set scaleX(arg1:Number):void;

        function get scaleY():Number;

        function set scaleY(arg1:Number):void;
    }
}


//              class IGraphicsList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IGraphicsList extends mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        function getGraphic(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.ITimelineGraphic;

        function hasGraphic(arg1:String):Boolean;
    }
}


//              class IInputText
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IInputText extends mgs.aurora.api.interfaces.dialogues.controls.IText
    {
        function setFocus():void;

        function setSelection(arg1:int, arg2:int):void;

        function get caretIndex():int;

        function get selectionBeginIndex():int;

        function get selectionEndIndex():int;
    }
}


//              class IRadioButton
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IRadioButton extends mgs.aurora.api.interfaces.dialogues.controls.IButton
    {
        function get selected():Boolean;

        function set selected(arg1:Boolean):void;
    }
}


//              class IRadioButtonList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface IRadioButtonList extends mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        function getRadioButton(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IRadioButton;

        function hasRadioButtons(arg1:String):Boolean;
    }
}


//              class IText
package mgs.aurora.api.interfaces.dialogues.controls 
{
    import flash.text.*;
    
    public interface IText extends mgs.aurora.api.interfaces.dialogues.controls.IControl
    {
        function get text():String;

        function set text(arg1:String):void;

        function get defaultTextFormat():flash.text.TextFormat;

        function set defaultTextFormat(arg1:flash.text.TextFormat):void;

        function get properties():mgs.aurora.api.interfaces.dialogues.controls.ITextFieldProperties;

        function getTextFormat(arg1:int=-1, arg2:int=-1):flash.text.TextFormat;

        function setTextFormat(arg1:flash.text.TextFormat, arg2:int=-1, arg3:int=-1):void;
    }
}


//              class ITextFieldProperties
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface ITextFieldProperties
    {
        function get displayAsPassword():Boolean;

        function set displayAsPassword(arg1:Boolean):void;

        function get maxChars():int;

        function set maxChars(arg1:int):void;

        function get restrict():String;

        function set restrict(arg1:String):void;
    }
}


//              class ITextList
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface ITextList extends mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        function getText(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IText;

        function getInputText(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IInputText;

        function hasText(arg1:String):Boolean;
    }
}


//              class ITimelineGraphic
package mgs.aurora.api.interfaces.dialogues.controls 
{
    public interface ITimelineGraphic extends mgs.aurora.api.interfaces.dialogues.controls.IGraphic
    {
        function gotoAndStop(arg1:Object):void;
    }
}


//            class IDialogue
package mgs.aurora.api.interfaces.dialogues 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    
    public interface IDialogue
    {
        function get controls():mgs.aurora.api.interfaces.dialogues.controls.IControlList;

        function get graphics():mgs.aurora.api.interfaces.dialogues.controls.IGraphicsList;

        function get buttons():mgs.aurora.api.interfaces.dialogues.controls.IButtonList;

        function get texts():mgs.aurora.api.interfaces.dialogues.controls.ITextList;

        function get checkBoxes():mgs.aurora.api.interfaces.dialogues.controls.ICheckBoxList;

        function get radioButtons():mgs.aurora.api.interfaces.dialogues.controls.IRadioButtonList;

        function get comboBoxes():mgs.aurora.api.interfaces.dialogues.controls.IComboBoxList;

        function get title():mgs.aurora.api.interfaces.dialogues.controls.IText;
    }
}


//          package frames
//            class IChipSelector
package mgs.aurora.api.interfaces.frames 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.interfaces.controls.*;
    
    public interface IChipSelector extends mgs.aurora.api.interfaces.controls.IControl
    {
        function get displayType():String;

        function set displayType(arg1:String):void;

        function get range():__AS3__.vec.Vector.<uint>;

        function set range(arg1:__AS3__.vec.Vector.<uint>):void;

        function get index():uint;

        function set index(arg1:uint):void;

        function get value():uint;

        function set value(arg1:uint):void;

        function set incAndDecButtonVisiblity(arg1:Boolean):void;

        function set incForciblyEnabled(arg1:Boolean):void;

        function set decForciblyEnabled(arg1:Boolean):void;
    }
}


//            class IFrame
package mgs.aurora.api.interfaces.frames 
{
    import flash.display.*;
    
    public interface IFrame
    {
        function get heading():mgs.aurora.api.interfaces.frames.IFrameHeading;

        function get controls():mgs.aurora.api.interfaces.frames.IFrameControls;

        function get chipSelector():mgs.aurora.api.interfaces.frames.IChipSelector;

        function get canvas():flash.display.Sprite;

        function addGameLayout(arg1:XML):void;
    }
}


//            class IFrameControls
package mgs.aurora.api.interfaces.frames 
{
    import mgs.aurora.api.interfaces.controls.*;
    
    public interface IFrameControls
    {
        function get buttons():mgs.aurora.api.interfaces.controls.IControlManager;

        function get graphics():mgs.aurora.api.interfaces.controls.IControlManager;

        function get texts():mgs.aurora.api.interfaces.controls.IControlManager;
    }
}


//            class IFrameHeading
package mgs.aurora.api.interfaces.frames 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.interfaces.controls.*;
    
    public interface IFrameHeading extends mgs.aurora.api.interfaces.controls.IText
    {
        function get alternatingText():__AS3__.vec.Vector.<String>;

        function get alternatingIntervalSize():int;

        function set alignText(arg1:String):void;

        function set backGroundVisible(arg1:Boolean):void;

        function set textVisible(arg1:Boolean):void;

        function alternateText(arg1:__AS3__.vec.Vector.<String>, arg2:int):void;

        function reset():void;

        function restoreTitleDisplay():void;

        function restoreTitleColour():void;
    }
}


//          package multiplayer
//            class IAvatarMetadata
package mgs.aurora.api.interfaces.multiplayer 
{
    public interface IAvatarMetadata
    {
        function get pokerUserAccountID():String;

        function get version():String;

        function get isRejected():String;

        function get imageName():String;
    }
}


//            class IMPFData
package mgs.aurora.api.interfaces.multiplayer 
{
    public interface IMPFData
    {
        function get status():String;

        function get alias():String;

        function get playerID():String;

        function get city():String;

        function get currencyISO():String;

        function get userID():String;

        function get uniqueConnectionID():String;

        function get systemGeneratedAlias():String;

        function get userType():String;

        function get clientType():String;

        function get casinoID():String;

        function get tournamentID():String;

        function get oneClickEnabled():Boolean;

        function get serviceID():String;
    }
}


//            class IMPFFileRequest
package mgs.aurora.api.interfaces.multiplayer 
{
    import mgs.aurora.api.interfaces.server.*;
    
    public interface IMPFFileRequest extends mgs.aurora.api.interfaces.server.IFileRequest
    {
        function setUrl(arg1:String):void;
    }
}


//            class IMPFPacketRequest
package mgs.aurora.api.interfaces.multiplayer 
{
    public interface IMPFPacketRequest
    {
        function get socketId():String;

        function get serviceId():uint;

        function get data():XML;
    }
}


//            class IMPFPacketResponse
package mgs.aurora.api.interfaces.multiplayer 
{
    public interface IMPFPacketResponse
    {
        function get response():XML;

        function get socketID():String;
    }
}


//          package profiling
//            class IActivityProfiling
package mgs.aurora.api.interfaces.profiling 
{
    public interface IActivityProfiling
    {
        function startActivityProfilingSession(arg1:int, arg2:int):void;

        function incrementActivityProfilingCounter(arg1:uint, arg2:int, arg3:int):void;

        function endActivityProfilingSession(arg1:int, arg2:int):void;
    }
}


//          package server
//            class IFileRequest
package mgs.aurora.api.interfaces.server 
{
    public interface IFileRequest
    {
        function get id():String;

        function set id(arg1:String):void;

        function get url():String;

        function set url(arg1:String):void;

        function get contentType():int;

        function set contentType(arg1:int):void;

        function get context():*;

        function set context(arg1:*):void;
    }
}


//            class IFileResponse
package mgs.aurora.api.interfaces.server 
{
    public interface IFileResponse
    {
        function get request():mgs.aurora.api.interfaces.server.IFileRequest;

        function get content():*;
    }
}


//            class IPacketRequest
package mgs.aurora.api.interfaces.server 
{
    public interface IPacketRequest
    {
        function get id():String;

        function get verb():String;

        function get packet():XML;

        function get mid():String;

        function get cid():String;

        function get resetSessionTimer():Boolean;

        function get packetAttributes():String;

        function get includeExternalOperatorInfo():Boolean;
    }
}


//            class IPacketResponse
package mgs.aurora.api.interfaces.server 
{
    public interface IPacketResponse
    {
        function get request():mgs.aurora.api.interfaces.server.IPacketRequest;

        function get packet():XML;
    }
}


//          package sounds
//            class ISoundGroup
package mgs.aurora.api.interfaces.sounds 
{
    import flash.events.*;
    import flash.media.*;
    
    public interface ISoundGroup extends flash.events.IEventDispatcher
    {
        function play(arg1:String, arg2:Number=0, arg3:int=0, arg4:flash.media.SoundTransform=null):void;

        function stop(arg1:String):void;

        function stopAll():void;

        function remove(arg1:Array):void;

        function removeAll():void;

        function setChannelVolume(arg1:Array, arg2:Number):void;

        function setChannelPan(arg1:Array, arg2:Number):void;

        function setChannelLeftToLeft(arg1:Array, arg2:Number):void;

        function setChannelLeftToRight(arg1:Array, arg2:Number):void;

        function setChannelRightToRight(arg1:Array, arg2:Number):void;

        function setChannelRightToLeft(arg1:Array, arg2:Number):void;

        function setChannelMute(arg1:Array, arg2:Boolean):void;

        function getChannelMute(arg1:Array):Boolean;

        function setChannelVolumeOverTime(arg1:Array, arg2:Number, arg3:Number, arg4:Number):void;

        function setChannelPanOverTime(arg1:Array, arg2:Number, arg3:Number, arg4:Number):void;

        function stopVolumeOverTime(arg1:String):void;

        function stopPanOverTime(arg1:String):void;

        function getChannel(arg1:String):flash.media.SoundChannel;

        function set mute(arg1:Boolean):void;

        function get mute():Boolean;

        function set volume(arg1:Number):void;

        function get volume():Number;
    }
}


//          package topBar
//            class IExtTopBar
package mgs.aurora.api.interfaces.topBar 
{
    import flash.events.*;
    
    public interface IExtTopBar extends flash.events.IEventDispatcher
    {
        function updateTopBar(arg1:XML, arg2:uint, arg3:uint, arg4:Number):void;

        function get topBarVisible():Boolean;
    }
}


//          package utility
//            class IStringUtility
package mgs.aurora.api.interfaces.utility 
{
    public interface IStringUtility
    {
        function mgsXmlFormatToHtml(arg1:String):String;

        function stringReplace(arg1:String, arg2:Object):String;
    }
}


//            class IUtility
package mgs.aurora.api.interfaces.utility 
{
    public interface IUtility
    {
        function get strings():mgs.aurora.api.interfaces.utility.IStringUtility;
    }
}


//          class IAuroraApi
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.topBar.*;
    import mgs.aurora.api.interfaces.utility.*;
    
    public interface IAuroraApi extends flash.events.IEventDispatcher
    {
        function get preloader():mgs.aurora.api.interfaces.IPreloader;

        function get banking():mgs.aurora.api.interfaces.IBanking;

        function get sounds():mgs.aurora.api.interfaces.ISounds;

        function get frame():mgs.aurora.api.interfaces.IFrames;

        function get server():mgs.aurora.api.interfaces.IServer;

        function get multiplayer():mgs.aurora.api.interfaces.IMultiplayer;

        function get session():mgs.aurora.api.interfaces.ISession;

        function get status():mgs.aurora.api.interfaces.IModuleStatus;

        function get storage():mgs.aurora.api.interfaces.ILocalStorage;

        function get help():mgs.aurora.api.interfaces.IHelp;

        function get rightClick():mgs.aurora.api.interfaces.IRightClick;

        function get localized():mgs.aurora.api.interfaces.ILocal;

        function get dialogues():mgs.aurora.api.interfaces.IDialogues;

        function get branding():mgs.aurora.api.interfaces.IBranding;

        function get utility():mgs.aurora.api.interfaces.utility.IUtility;

        function get moduleInformation():mgs.aurora.api.interfaces.IModuleInformation;

        function get profiling():mgs.aurora.api.interfaces.IProfiling;

        function get gameStrings():mgs.aurora.api.interfaces.IGameStrings;

        function get extTopBar():mgs.aurora.api.interfaces.topBar.IExtTopBar;
    }
}


//          class IBanking
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.banking.*;
    
    public interface IBanking extends flash.events.IEventDispatcher
    {
        function get balance():Number;

        function set balance(arg1:Number):void;

        function get countUpBalance():Number;

        function set countUpBalance(arg1:Number):void;

        function get isAvailable():Boolean;

        function insufficientFunds():void;

        function customInsufficientFunds(arg1:String=""):void;

        function get display():mgs.aurora.api.interfaces.banking.IBalanceDisplay;

        function getCurrencySymbol(arg1:String):String;

        function addToBalance(arg1:Number):void;

        function subtractFromBalance(arg1:Number):void;

        function updateBalance():void;

        function launch():void;
    }
}


//          class IBranding
package mgs.aurora.api.interfaces 
{
    public interface IBranding
    {
        function get engineBadge():int;
    }
}


//          class IDialogues
package mgs.aurora.api.interfaces 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.*;
    
    public interface IDialogues extends flash.events.IEventDispatcher
    {
        function create(arg1:String, arg2:String, arg3:flash.display.DisplayObjectContainer=null, arg4:XMLList=null, arg5:XMLList=null, arg6:flash.display.LoaderInfo=null, arg7:flash.display.LoaderInfo=null, arg8:flash.display.LoaderInfo=null):void;

        function remove(arg1:String):void;

        function removeAll():void;

        function dialogue(arg1:String):mgs.aurora.api.interfaces.dialogues.IDialogue;

        function set layoutConfig(arg1:XML):void;

        function get layoutConfig():XML;

        function set uiConfig(arg1:XML):void;

        function get uiConfig():XML;

        function set art(arg1:flash.display.LoaderInfo):void;

        function get art():flash.display.LoaderInfo;

        function set artLang(arg1:flash.display.LoaderInfo):void;

        function get artLang():flash.display.LoaderInfo;

        function set fonts(arg1:flash.display.LoaderInfo):void;

        function get fonts():flash.display.LoaderInfo;

        function get displayedList():String;

        function get numDisplayed():int;

        function get globalNumDisplayed():int;

        function showfaderMessage(arg1:String, arg2:Number):void;

        function showStartupDialogue():void;
    }
}


//          class IFrames
package mgs.aurora.api.interfaces 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.api.interfaces.frames.*;
    
    public interface IFrames extends flash.events.IEventDispatcher
    {
        function switchTo(arg1:String):void;

        function get tooltip():mgs.aurora.api.interfaces.IToolTip;

        function get currentFrame():mgs.aurora.api.interfaces.frames.IFrame;

        function set bonusBubbleTrigger(arg1:flash.display.InteractiveObject):void;

        function get bonusBubbleTrigger():flash.display.InteractiveObject;

        function set bonusBubbleCoordinates(arg1:flash.geom.Point):void;

        function get bonusBubbleCoordinates():flash.geom.Point;

        function allowSystemShortcuts(arg1:Boolean):void;

        function get userTypeLabel():String;
    }
}


//          class IGameStrings
package mgs.aurora.api.interfaces 
{
    import __AS3__.vec.*;
    
    public interface IGameStrings
    {
        function setMappings(arg1:XML):void;

        function setMultipleMappings(arg1:__AS3__.vec.Vector.<XML>):void;

        function getString(arg1:String):String;

        function replaceStringIds(arg1:XML, arg2:String, arg3:Object=null):XML;

        function replacePlaceholders(arg1:String, arg2:Object):String;
    }
}


//          class IHelp
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    
    public interface IHelp extends flash.events.IEventDispatcher
    {
        function launch(arg1:String=null):void;
    }
}


//          class ILocal
package mgs.aurora.api.interfaces 
{
    import __AS3__.vec.*;
    
    public interface ILocal
    {
        function getStringFromId(arg1:String):String;

        function registerStrings(arg1:__AS3__.vec.Vector.<XML>):void;

        function translateAttributeValues(arg1:XML, arg2:String):void;

        function getCurrencySymbol(arg1:String):String;

        function getAllString():XML;
    }
}


//          class ILocalStorage
package mgs.aurora.api.interfaces 
{
    public interface ILocalStorage
    {
        function saveData(arg1:String, arg2:String, arg3:*):String;

        function loadData(arg1:String, arg2:String):String;

        function saveDataEncrypted(arg1:String, arg2:String, arg3:String):String;

        function loadDataEncrypted(arg1:String, arg2:String):String;

        function get localDataPath():String;
    }
}


//          class IModuleInformation
package mgs.aurora.api.interfaces 
{
    import mgs.aurora.api.module.*;
    
    public interface IModuleInformation
    {
        function get gameSet():XMLList;

        function set activeModuleTraits(arg1:mgs.aurora.api.module.ModuleTraits):void;

        function get extraModuleData():mgs.aurora.api.module.ExtraModuleData;
    }
}


//          class IModuleStatus
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    import flash.utils.*;
    
    public interface IModuleStatus extends flash.events.IEventDispatcher
    {
        function get busy():Boolean;

        function set busy(arg1:Boolean):void;

        function get initialized():Boolean;

        function set initialized(arg1:Boolean):void;

        function get cleanedUp():Boolean;

        function set cleanedUp(arg1:Boolean):void;

        function get systemError():Boolean;

        function exit():void;

        function cancelExit():void;

        function fatalError(arg1:String):void;

        function loadNewModule(arg1:String, arg2:String="", arg3:String="", arg4:String=""):void;

        function get preformanceRating():Number;

        function get browserCacheLimit():flash.utils.Dictionary;

        function get browserCacheLimitValue():int;

        function get startupDialogueAllowed():Boolean;

        function set startupDialogueAllowed(arg1:Boolean):void;
    }
}


//          class IMultiplayer
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.multiplayer.*;
    
    public interface IMultiplayer extends flash.events.IEventDispatcher
    {
        function sendPacket(arg1:mgs.aurora.api.interfaces.multiplayer.IMPFPacketRequest):void;

        function launchAvatarUploadPage():void;

        function fetchAvatarMetaData(arg1:String=null):void;

        function loadAvatarImage(arg1:String):void;

        function cancelAvatarImage(arg1:String):void;

        function getMPFData():mgs.aurora.api.interfaces.multiplayer.IMPFData;

        function cancelNewAliasRequest():void;

        function requestNewAlias():void;

        function newAliasRequestCancelled():void;

        function getTournamentID():String;

        function setTouramentID(arg1:String):void;
    }
}


//          class IPreloader
package mgs.aurora.api.interfaces 
{
    public interface IPreloader
    {
        function get visible():Boolean;

        function set visible(arg1:Boolean):void;

        function get backgroundAlpha():Number;

        function set backgroundAlpha(arg1:Number):void;

        function create(arg1:int):void;

        function setTextLabel(arg1:String):void;

        function setFileCount(arg1:uint):void;
    }
}


//          class IProfiling
package mgs.aurora.api.interfaces 
{
    import mgs.aurora.api.interfaces.profiling.*;
    
    public interface IProfiling
    {
        function get activityProfiling():mgs.aurora.api.interfaces.profiling.IActivityProfiling;

        function sendStep(arg1:String, arg2:String):void;
    }
}


//          class IRightClick
package mgs.aurora.api.interfaces 
{
    import flash.display.*;
    
    public interface IRightClick
    {
        function addRightClick(arg1:flash.display.MovieClip):void;

        function removeRightClick(arg1:flash.display.MovieClip):void;
    }
}


//          class IServer
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.server.*;
    
    public interface IServer extends flash.events.IEventDispatcher
    {
        function get platform():String;

        function loadFile(arg1:mgs.aurora.api.interfaces.server.IFileRequest):void;

        function stopLoading():void;

        function sendPacket(arg1:mgs.aurora.api.interfaces.server.IPacketRequest):void;

        function trace(arg1:*, arg2:String=null, arg3:*=null, arg4:uint=1118481):void;
    }
}


//          class ISession
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    
    public interface ISession extends flash.events.IEventDispatcher
    {
        function get loggedIn():Boolean;

        function get userType():String;

        function get registrationLevel():int;

        function login(arg1:String=null, arg2:String=null):void;

        function logout():void;

        function get Alias():String;

        function get casinoLanguage():String;
    }
}


//          class ISounds
package mgs.aurora.api.interfaces 
{
    import flash.display.*;
    import flash.events.*;
    import flash.media.*;
    import mgs.aurora.api.interfaces.sounds.*;
    
    public interface ISounds extends flash.events.IEventDispatcher
    {
        function add(arg1:flash.display.LoaderInfo, arg2:Array, arg3:String):mgs.aurora.api.interfaces.sounds.ISoundGroup;

        function play(arg1:String, arg2:String, arg3:Number=0, arg4:int=0, arg5:flash.media.SoundTransform=null):void;

        function stop(arg1:String, arg2:String):void;

        function stopAll(arg1:String):void;

        function remove(arg1:Array, arg2:String):void;

        function removeAll(arg1:String):void;

        function setChannelVolume(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelPan(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelLeftToLeft(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelLeftToRight(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelRightToRight(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelRightToLeft(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelMute(arg1:Array, arg2:Boolean, arg3:String):void;

        function getChannelMute(arg1:Array, arg2:String):Boolean;

        function set mute(arg1:Boolean):void;

        function get mute():Boolean;

        function set globalVolume(arg1:Number):void;

        function get globalVolume():Number;

        function set globalPan(arg1:Number):void;

        function get globalPan():Number;

        function set globalLeftToLeft(arg1:Number):void;

        function get globalLeftToLeft():Number;

        function set globalLeftToRight(arg1:Number):void;

        function get globalLeftToRight():Number;

        function set globalRightToRight(arg1:Number):void;

        function get globalRightToRight():Number;

        function set globalRightToLeft(arg1:Number):void;

        function get globalRightToLeft():Number;

        function setChannelVolumeOverTime(arg1:Array, arg2:String, arg3:Number, arg4:Number, arg5:Number):void;

        function setChannelPanOverTime(arg1:Array, arg2:String, arg3:Number, arg4:Number, arg5:Number):void;

        function stopVolumeOverTime(arg1:String, arg2:String):void;

        function stopPanOverTime(arg1:String, arg2:String):void;

        function group(arg1:String):mgs.aurora.api.interfaces.sounds.ISoundGroup;

        function getChannel(arg1:String):flash.media.SoundChannel;
    }
}


//          class IToolTip
package mgs.aurora.api.interfaces 
{
    import flash.events.*;
    import flash.geom.*;
    
    public interface IToolTip extends flash.events.IEventDispatcher
    {
        function show(arg1:String, arg2:flash.geom.Point=null):void;

        function update(arg1:String):void;

        function remove():void;
    }
}


//        package module
//          class ExtraModuleData
package mgs.aurora.api.module 
{
    public class ExtraModuleData extends mgs.aurora.api.module.ModuleTraits
    {
        public function ExtraModuleData()
        {
            super();
            return;
        }

        public function get extraData():String
        {
            return this._extraData;
        }

        public function set extraData(arg1:String):void
        {
            this._extraData = arg1;
            return;
        }

        internal var _extraData:String;
    }
}


//          class ModuleTraits
package mgs.aurora.api.module 
{
    public dynamic class ModuleTraits extends Object
    {
        public function ModuleTraits()
        {
            super();
            return;
        }

        public function get moduleId():int
        {
            return this._moduleId;
        }

        public function set moduleId(arg1:int):void
        {
            this._moduleId = arg1;
            return;
        }

        public function get clientId():int
        {
            return this._clientId;
        }

        public function set clientId(arg1:int):void
        {
            this._clientId = arg1;
            return;
        }

        internal var _moduleId:int;

        internal var _clientId:int;
    }
}


//        package multiplayer
//          class MPFPacketRequest
package mgs.aurora.api.multiplayer 
{
    import mgs.aurora.api.interfaces.multiplayer.*;
    
    public class MPFPacketRequest extends Object implements mgs.aurora.api.interfaces.multiplayer.IMPFPacketRequest
    {
        public function MPFPacketRequest(arg1:String, arg2:uint, arg3:XML)
        {
            super();
            this._socketId = arg1;
            this._serviceId = arg2;
            this._data = arg3;
            return;
        }

        public function get socketId():String
        {
            return this._socketId;
        }

        public function get data():XML
        {
            return this._data;
        }

        public function get serviceId():uint
        {
            return this._serviceId;
        }

        internal var _socketId:String;

        internal var _data:XML;

        internal var _serviceId:uint;
    }
}


//        package server
//          class FileRequest
package mgs.aurora.api.server 
{
    import mgs.aurora.api.interfaces.server.*;
    
    public class FileRequest extends Object implements mgs.aurora.api.interfaces.server.IFileRequest
    {
        public function FileRequest(arg1:String, arg2:String, arg3:int, arg4:*=null)
        {
            super();
            this._id = arg1;
            this._url = arg2;
            this._contentType = arg3;
            this._context = arg4;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function set id(arg1:String):void
        {
            this._id = arg1;
            return;
        }

        public function get url():String
        {
            return this._url;
        }

        public function set url(arg1:String):void
        {
            this._url = arg1;
            return;
        }

        public function get contentType():int
        {
            return this._contentType;
        }

        public function set contentType(arg1:int):void
        {
            this._contentType = arg1;
            return;
        }

        public function get context():*
        {
            return this._context;
        }

        public function set context(arg1:*):void
        {
            this._context = arg1;
            return;
        }

        internal var _id:String;

        internal var _url:String;

        internal var _contentType:int;

        internal var _context:*;
    }
}


//          class PacketRequest
package mgs.aurora.api.server 
{
    import mgs.aurora.api.interfaces.server.*;
    
    public class PacketRequest extends Object implements mgs.aurora.api.interfaces.server.IPacketRequest
    {
        public function PacketRequest(arg1:String, arg2:String, arg3:XML, arg4:String, arg5:String, arg6:Boolean=true, arg7:String="", arg8:Boolean=false)
        {
            super();
            this._id = arg1;
            this._verb = arg2;
            this._packet = arg3;
            this._mid = arg4;
            this._cid = arg5;
            this._resetSessionTimer = arg6;
            this._packetAttributes = arg7;
            this._includeExternalOperatorInfo = arg8;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get verb():String
        {
            return this._verb;
        }

        public function get packet():XML
        {
            return this._packet;
        }

        public function get mid():String
        {
            return this._mid;
        }

        public function get cid():String
        {
            return this._cid;
        }

        public function get resetSessionTimer():Boolean
        {
            return this._resetSessionTimer;
        }

        public function get packetAttributes():String
        {
            return this._packetAttributes;
        }

        public function get includeExternalOperatorInfo():Boolean
        {
            return this._includeExternalOperatorInfo;
        }

        internal var _id:String;

        internal var _verb:String;

        internal var _packet:XML;

        internal var _mid:String;

        internal var _cid:String;

        internal var _resetSessionTimer:Boolean;

        internal var _packetAttributes:String;

        internal var _includeExternalOperatorInfo:Boolean;
    }
}


//        package ui
//          package controls
//            class SimpleFrameButton
package mgs.aurora.api.ui.controls 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    
    public class SimpleFrameButton extends Object implements mgs.aurora.api.interfaces.controls.ICustomControl
    {
        public function SimpleFrameButton(arg1:String, arg2:flash.display.MovieClip, arg3:__AS3__.vec.Vector.<uint>=null)
        {
            super();
            this._id = arg1;
            this._display = arg2;
            this._display.name = arg1;
            this._display.enabled = this._enabled;
            this._shortcutList = arg3;
            this._eventDispatcher = new flash.events.EventDispatcher();
            if (this._display.stage) 
            {
                this.init();
            }
            else 
            {
                this._display.addEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
                this._display.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.remove);
            }
            return;
        }

        internal function onMouseEventMouseOver(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.MOUSE_OVER, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventMouseOut(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.MOUSE_OUT, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventMouseMove(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.MOUSE_MOVE, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventMouseDown(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.MOUSE_DOWN, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventDoubleClick(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.DOUBLE_CLICK, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventClick(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.CLICK, this.id, arg1));
            }
            return;
        }

        public function get locked():Boolean
        {
            return this._locked;
        }

        internal function onMouseEventHandler(arg1:String):void
        {
            var loc1:*=false;
            var loc2:*=arg1;
            switch (loc2) 
            {
                case flash.events.MouseEvent.MOUSE_OUT:
                case flash.events.MouseEvent.ROLL_OUT:
                {
                    if (this.enabled) 
                    {
                        this._display.gotoAndStop(ACTIVE);
                    }
                    break;
                }
                case flash.events.KeyboardEvent.KEY_DOWN:
                case flash.events.MouseEvent.MOUSE_DOWN:
                {
                    if (this.enabled) 
                    {
                        this._display.gotoAndStop(DOWN);
                    }
                    break;
                }
                case flash.events.KeyboardEvent.KEY_UP:
                {
                    if (this._enabled && !(this._display.stage == null)) 
                    {
                        loc1 = this._display.hitTestPoint(this._display.stage.mouseX, this._display.stage.mouseY, true);
                        this._display.gotoAndStop(loc1 ? OVER : ACTIVE);
                    }
                    break;
                }
                case flash.events.MouseEvent.MOUSE_UP:
                case flash.events.MouseEvent.DOUBLE_CLICK:
                case flash.events.MouseEvent.CLICK:
                case flash.events.MouseEvent.MOUSE_OVER:
                case flash.events.MouseEvent.ROLL_OVER:
                {
                    if (this.enabled) 
                    {
                        this._display.gotoAndStop(OVER);
                    }
                    break;
                }
                case flash.events.MouseEvent.MOUSE_MOVE:
                case flash.events.MouseEvent.MOUSE_WHEEL:
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function init(arg1:flash.events.Event=null):void
        {
            this._display.addEventListener(flash.events.MouseEvent.CLICK, this.onMouseEventClick);
            this._display.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, this.onMouseEventDoubleClick);
            this._display.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onMouseEventMouseDown);
            this._display.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, this.onMouseEventMouseMove);
            this._display.addEventListener(flash.events.MouseEvent.MOUSE_OUT, this.onMouseEventMouseOut);
            this._display.addEventListener(flash.events.MouseEvent.MOUSE_OVER, this.onMouseEventMouseOver);
            this._display.addEventListener(flash.events.MouseEvent.MOUSE_UP, this.onMouseEventMouseUp);
            this._display.addEventListener(flash.events.MouseEvent.MOUSE_WHEEL, this.onMouseEventMouseWheel);
            this._display.addEventListener(flash.events.MouseEvent.ROLL_OUT, this.onMouseEventRollOut);
            this._display.addEventListener(flash.events.MouseEvent.ROLL_OVER, this.onMouseEventRollOver);
            this._display.stage.addEventListener(flash.events.KeyboardEvent.KEY_UP, this.onKeyUp, false, 0, true);
            this._display.stage.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, this.onKeyDown, false, 0, true);
            this._display.stage.addEventListener(flash.events.FocusEvent.FOCUS_OUT, this.onFocusOut, false, 0, true);
            return;
        }

        internal function onFocusOut(arg1:flash.events.FocusEvent):void
        {
            if (this.visible) 
            {
                this.onMouseEventHandler(flash.events.MouseEvent.MOUSE_OUT);
            }
            return;
        }

        internal function remove(arg1:flash.events.Event=null):void
        {
            this._display.removeEventListener(flash.events.MouseEvent.CLICK, this.onMouseEventClick);
            this._display.removeEventListener(flash.events.MouseEvent.DOUBLE_CLICK, this.onMouseEventDoubleClick);
            this._display.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onMouseEventMouseDown);
            this._display.removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, this.onMouseEventMouseMove);
            this._display.removeEventListener(flash.events.MouseEvent.MOUSE_OUT, this.onMouseEventMouseOut);
            this._display.removeEventListener(flash.events.MouseEvent.MOUSE_OVER, this.onMouseEventMouseOver);
            this._display.removeEventListener(flash.events.MouseEvent.MOUSE_UP, this.onMouseEventMouseUp);
            this._display.removeEventListener(flash.events.MouseEvent.MOUSE_WHEEL, this.onMouseEventMouseWheel);
            this._display.removeEventListener(flash.events.MouseEvent.ROLL_OUT, this.onMouseEventRollOut);
            this._display.removeEventListener(flash.events.MouseEvent.ROLL_OVER, this.onMouseEventRollOver);
            this._display.removeEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
            this._display.removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.remove);
            if (this._display.stage) 
            {
                this._display.stage.removeEventListener(flash.events.KeyboardEvent.KEY_UP, this.onKeyUp);
                this._display.stage.removeEventListener(flash.events.KeyboardEvent.KEY_DOWN, this.onKeyDown);
                this._display.stage.removeEventListener(flash.events.FocusEvent.FOCUS_OUT, this.onFocusOut);
            }
            return;
        }

        internal function dispose():void
        {
            this.remove();
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._display as flash.display.DisplayObject;
        }

        internal function shortCutList(arg1:uint):Boolean
        {
            if (this._shortcutList == null) 
            {
                return false;
            }
            var loc1:*=0;
            while (loc1 < this._shortcutList.length) 
            {
                if (arg1 == this._shortcutList[loc1]) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function set locked(arg1:Boolean):void
        {
            this._locked = arg1;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get enabled():Boolean
        {
            return this._enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._enabled = arg1;
            if (!this._visible) 
            {
                return;
            }
            this._display.enabled = arg1;
            var loc1:*=false;
            if (this._enabled && !(this._display.stage == null)) 
            {
                loc1 = this._display.hitTestPoint(this._display.stage.mouseX, this._display.stage.mouseY, true);
            }
            if (loc1) 
            {
                this._display.gotoAndStop(OVER);
            }
            else 
            {
                this._display.gotoAndStop(arg1 ? ACTIVE : INACTIVE);
            }
            return;
        }

        public function get visible():Boolean
        {
            return this._visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._visible = arg1;
            if (arg1) 
            {
                this.enabled = this._enabled;
            }
            else 
            {
                this._display.enabled = false;
                this._display.gotoAndStop(HIDDEN);
            }
            return;
        }

        public function get x():Number
        {
            return this._display.x;
        }

        public function set x(arg1:Number):void
        {
            this._display.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._display.y;
        }

        public function set y(arg1:Number):void
        {
            this._display.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._display.width;
        }

        public function set width(arg1:Number):void
        {
            this._display.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._display.height;
        }

        public function set height(arg1:Number):void
        {
            this._display.height = arg1;
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this._display);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            arg1.addChildAt(this._display, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this.dispose();
            this._display.parent.removeChild(this._display);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._eventDispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._eventDispatcher.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._eventDispatcher.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._eventDispatcher.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._eventDispatcher.willTrigger(arg1);
        }

        public function get text():String
        {
            return "";
        }

        public function set text(arg1:String):void
        {
            return;
        }

        internal function onKeyDown(arg1:flash.events.KeyboardEvent):void
        {
            if (this.locked || !this.shortCutList(arg1.keyCode)) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this._enabled) 
            {
                arg1.stopImmediatePropagation();
                this.dispatchEvent(new mgs.aurora.api.events.ApiKeyboardEvent(mgs.aurora.api.events.ApiKeyboardEvent.KEY_DOWN, this.id, arg1));
            }
            return;
        }

        internal function onKeyUp(arg1:flash.events.KeyboardEvent):void
        {
            if (this.locked || !this.shortCutList(arg1.keyCode)) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                arg1.stopImmediatePropagation();
                this.dispatchEvent(new mgs.aurora.api.events.ApiKeyboardEvent(mgs.aurora.api.events.ApiKeyboardEvent.KEY_UP, this.id, arg1));
            }
            return;
        }

        public function get type():String
        {
            return mgs.aurora.api.enums.ControlType.BUTTON;
        }

        internal function onMouseEventRollOver(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.ROLL_OVER, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventRollOut(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.ROLL_OUT, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventMouseWheel(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.MOUSE_WHEEL, this.id, arg1));
            }
            return;
        }

        internal function onMouseEventMouseUp(arg1:flash.events.MouseEvent):void
        {
            if (this.locked) 
            {
                return;
            }
            this.onMouseEventHandler(arg1.type);
            if (this.enabled) 
            {
                this.dispatchEvent(new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.MOUSE_UP, this.id, arg1));
            }
            return;
        }

        internal static const INACTIVE:String="Inactive";

        internal static const ACTIVE:String="Active";

        internal static const DOWN:String="Depressed";

        internal static const OVER:String="Over";

        internal static const HIDDEN:String="Hidden";

        internal var _id:String;

        internal var _display:flash.display.MovieClip;

        internal var _shortcutList:__AS3__.vec.Vector.<uint>;

        internal var _eventDispatcher:flash.events.EventDispatcher;

        internal var _locked:Boolean=false;

        internal var _shortcutEnabled:Boolean=false;

        internal var _visible:Boolean=true;

        internal var _enabled:Boolean=false;
    }
}


//      package common
//        package enums
//          package bonusBubble
//            class BonusBubbleConfigKeys
package mgs.aurora.common.enums.bonusBubble 
{
    public class BonusBubbleConfigKeys extends Object
    {
        public function BonusBubbleConfigKeys()
        {
            super();
            return;
        }

        internal static const NAME:String="bonus_bubble_config";

        public static const XMAN_MODULE:String=NAME + "/keys/xman_module";

        public static const SESSION_PROXY:String=NAME + "/keys/session_proxy";

        public static const CONFIG_XML:String=NAME + "/keys/config_xml";

        public static const CURRENCY_SUPPORTED:String=NAME + "/keys/currency_supported";

        public static const CURRENCY_XML:String=NAME + "/keys/currency_xml";

        public static const SHOW_HEADING:String=NAME + "/keys/show_heading";

        public static const SHOW_BONUS_VALUE:String=NAME + "/keys/show_bonus_value";

        public static const BONUS_TEXT:String=NAME + "/keys/bonus_text";

        public static const CASH_TEXT:String=NAME + "/keys/cash_text";

        public static const TITLE_TEXT:String=NAME + "/keys/title_text";

        public static const TOTAL_TEXT:String=NAME + "/keys/total_text";

        public static const STANDARD_CURRENCY_FORMAT:String=NAME + "/keys/standard_currency_format";

        public static const FUN_BONUS_MODULE:String=NAME + "/keys/fun_bonus_module";

        public static const FUN_BONUS_CONFIG:String=NAME + "/keys/fun_bonus_config";

        public static const XML_STRINGS:String=NAME + "/keys/xml_strings";
    }
}


//            class BonusBubbleTypes
package mgs.aurora.common.enums.bonusBubble 
{
    public class BonusBubbleTypes extends Object
    {
        public function BonusBubbleTypes()
        {
            super();
            return;
        }

        public static const ORIGINAL_WHITE_BUBBLE:String="0";

        public static const NEW_GREY_BUBBLE:String="1";

        public static const FULL_FUN_BONUS_BUBBLE:String="2";
    }
}


//          package configMapping
//            class SessionConfig
package mgs.aurora.common.enums.configMapping 
{
    public class SessionConfig extends Object
    {
        public function SessionConfig()
        {
            super();
            return;
        }

        public static const CLIENTTYPE:String="clienttype";

        public static const REGULATED_MARKET_ID:String="regulated_market_id";

        public static const EXTUSERTYPE:String="extusertype";

        public static const EXTAUTHTOKEN:String="extauthtoken";

        public static const EXTUSERNAME:String="extusername";

        public static const EXTPASSWORD:String="extpassword";

        public static const EXTSESSIONID:String="extsessionid";

        public static const USEGENAUTHLOGIN:String="usegenauthlogin";

        public static const IPADDRESS:String="ipaddress";

        public static const GAMEID:String="gameid";

        public static const OPERATORID:String="operatorid";

        public static const EXTERNALLOGIN:String="externallogin";

        public static const EXT_SESSION_TOKEN:String="extsessiontoken";

        public static const EXT_SESSION_USERID:String="extsessionuserid";

        public static const USERTYPE:String="usertype";

        public static const USERTYPE_SWITCH_TOKEN:String="usertype_switch_token";

        public static const USERTYPE_SWITCH:String="usertype_switch";

        public static const BALANCE:String="balance";

        public static const SESSIONID:String="sessionid";

        public static const SESSIONNUMBER:String="sessionnumber";

        public static const LAUNCH_IN_FUNMODE:String="launchInFunMode";

        public static const ID1:String="id1";

        public static const ID2:String="id2";

        public static const ID4:String="id4";

        public static const SUSERNAME:String="susername";

        public static const FBUSERNAME:String="fbusername";

        public static const SID3:String="sid3";

        public static const SRECALL:String="srecall";

        public static const PPUSERNAME:String="ppusername";

        public static const PPKEY:String="ppkey";

        public static const UPE:String="upe";

        public static const GGUSERNAME:String="ggusername";

        public static const GGPASSWORD:String="ggpassword";

        public static const GGRECALL:String="ggrecall";

        public static const HASCREDS:String="hascreds";

        public static const GGPRACTICEONLY:String="ggpracticeonly";

        public static const SINGLESIGNON:String="singlesignon";

        public static const INITIALIZER:String="initializer";

        public static const LOGGEDIN:String="loggedin";

        public static const LOGINTYPE:String="logintype";

        public static const SERVERID:String="serverid";

        public static const LANGUAGE:String="language";

        public static const BTAG:String="btag";

        public static const BTAG2:String="btag2";

        public static const BTAG3:String="btag3";

        public static const BTAG4:String="btag4";

        public static const BTAG5:String="btag5";

        public static const MUTESOUND:String="mutesound";

        public static const PCMGUID:String="pcmguid";

        public static const HELPCATAGORY:String="helpcategory";

        public static const EXTGAMELIST:String="extgamelist";

        public static const CURMID:String="curmid";

        public static const CURCID:String="curcid";

        public static const CURTOURNAMENTID:String="curTournamentid";

        public static const EXTGAMEID:String="extgameid";

        public static const FULLRETURNURL:String="fullreturnurl";

        public static const SAFERETURNURL:String="safereturnurl";

        public static const RETURNURL:String="return_url";

        public static const ENABLE_BONUS_BUBBLE:String="enable_bonus_bubble";

        public static const FUN_BONUS_TYPE:String="fun_bonus_type";

        public static const FUN_BONUS_OFFER_COUNT:String="fun_bonus_offer_count";

        public static const CURRENTUSERNAME:String="currentusername";

        public static const CURRENTPASSWORD:String="currentpassword";

        public static const SESSION_USERID:String="session_userid";

        public static const SESSION_AUTHENTICATION_TOKEN:String="sessionauthentication_token";

        public static const DEMO_PLAY:String="demoplay";

        public static const SHOW_AUTOLOGIN_CHECKBOX:String="showautologincheckbox";

        public static const EXT_AUTOLOGIN_CHECKBOX_VALUE:String="extautologincheckboxvalue";

        public static const AUTOLOGIN:String="autologin";

        public static const ALLOW_FORGOT_PASSWORD:String="allowforgotpwd";

        public static const ALLOW_REMEMBER_PASSWORD:String="allowrememberpassword";

        public static const SHOWREG_ON_LOGIN:String="showregonlogin";

        public static const GUESTPROMPT_FORREALPLAY:String="guestpromptforrealplay";

        public static const AUTOSHOW_REGDIAG:String="autoshowregdiag";

        public static const BYPASS_REGDIAG:String="bypassregdiag";

        public static const LOGIN_BY_SESSIONID:String="loginbysessionid";

        public static const DISABLEFCCOMPONENTS:String="disablefccomponents";

        public static const INFO_CASINONAME:String="casinoname";

        public static const INFO_REGCASINONAME:String="regcasinoname";

        public static const INFO_OLDREGCASINONAME:String="oldregcasinoname";

        public static const INFO_GAMINGGROUPNAME:String="gaminggroupname";

        public static const INFO_COMPANYNAME:String="companyname";

        public static const BASE_URL:String="baseurl";

        public static const CIP:String="cip";

        public static const HGAME:String="hgames";

        public static const HIDDENGAMES:String="hiddenGames";

        public static const MPF_USERID:String="mpf_userid";

        public static const SGI_LOGINTYPE:String="sgi_logintype";

        public static const DEMO_SERVERID:String="demoserverid";

        public static const REAL_SERVERID:String="realserverid";

        public static const WAIT_FOR_LOGGIN:String="wait_for_loggin";

        public static const ALLOW_MPF_TOKEN_LOGIN:String="allowtokenlogin";

        public static const IS_QUICK_REDIRECT:String="is_quick_redirect";

        public static const PARTICIPATION_CODE:String="participation_code";

        public static const MIGRATION_MUPID:String="migration_mupid";

        public static const MIGRATION_STATUS:String="migration_status";

        public static const MIGRATION_SERVER_ID:String="migration_server_id";

        public static const MIGRATION_SERVER_NAME:String="migration_server_name";

        public static const MIGRATION_OLD_SINGLE_SIGNON_NAME:String="migration_old_single_signon_name";

        public static const MIGRATION_EXTERNAL:String="migration_external";

        public static const XMAN_SESSION_STARTED:String="xman_session_started";

        public static const USER_ALIAS:String="user_alias";

        public static const NOTIFIER_ID:String="NotifierId";

        public static const NOTIFIER_TIMEOUT:String="NotifierTimeout";

        public static const CONSECUTIVE_BETS_ENABLED:String="consecutive_bets_enabled";

        public static const CONSECUTIVE_BETS_UPPER_LIMIT:String="consecutive_bets_upper_limit";

        public static const CONSECUTIVE_BETS_COUNT:String="consecutive_bets_count";

        public static const CUSTOM_HEADER_VALUE:String="customheadervalue";

        public static const ENABLE_CUSTOM_HEADER:String="enablecustomheader";

        public static const MPF_SERVICE_ID:String="mpf_service_id";

        public static const INGAME_GAME_LAUNCH:String="ingame_game_launch";

        public static const GAME_IS_PROGRESSIVE:String="game_is_progressive";
    }
}


//            class VPBConfig
package mgs.aurora.common.enums.configMapping 
{
    public class VPBConfig extends Object
    {
        public function VPBConfig()
        {
            super();
            return;
        }

        public static const NAME:String="VPBConfigKeys";

        public static const X_POS:String=NAME + "x";

        public static const Y_POS:String=NAME + "y";

        public static const INIT_MESSAGE_DELAY:String="initMessageDelay";

        public static const NUM_MESSAGES_REQUEST_DELAY:String="numMessagesRequestDelay";

        public static const NEXT_MESSAGE_DELAY:String="nextMessageDelay";

        public static const REMOVE_MESSAGE_DELAY:String="removeMessageDelay";

        public static const TITLE_FONT:String="titleFont";

        public static const TITLE_FONT_SIZE:String="titleSize";

        public static const TITLE_DATA_FONT:String="titleDataFont";

        public static const TITLE_DATA_FONT_SIZE:String="titleDataSize";

        public static const INSTRUCTION_URL_FONT:String="instructionFont";

        public static const INSTRUCTION_URL_FONT_SIZE:String="instructionSize";

        public static const VPB_SUPPORTED:String="supported";

        public static const FRAME_TYPE:String="frame_type";

        public static const FRAME_TYPES:String="frame_types";

        public static const ENABLED:String="enabled";

        public static const NUM_MESSAGES:String="num_messages";

        public static const XMAN:String="xman";

        public static const TWEEN_IN_DELAY:String="tweenInDelay";

        public static const TWEEN_OUT_DELAY:String="tweenOutDelay";
    }
}


//          package controls
//            class ControlType
package mgs.aurora.common.enums.controls 
{
    public class ControlType extends Object
    {
        public function ControlType()
        {
            super();
            return;
        }

        internal static const NAME:String="control/type";

        public static const TITLE:String=NAME + "/title";

        public static const BUTTON:String=NAME + "/button";

        public static const GRAPHIC:String=NAME + "/graphic";

        public static const CHECKBOX:String=NAME + "/checkbox";

        public static const RADIOBUTTON:String=NAME + "/radiobutton";

        public static const COMBOBOX:String=NAME + "/combobox";

        public static const TEXT:String=NAME + "/text";

        public static const INPUTTEXT:String=NAME + "/inputtext";
    }
}


//          package frame
//            class ButtonGroups
package mgs.aurora.common.enums.frame 
{
    public class ButtonGroups extends Object
    {
        public function ButtonGroups()
        {
            super();
            return;
        }

        public static const GAME_FRAME:String="GAME_FRAME";
    }
}


//            class ControlIdentifiers
package mgs.aurora.common.enums.frame 
{
    public class ControlIdentifiers extends Object
    {
        public function ControlIdentifiers()
        {
            super();
            return;
        }

        public static const QUICKMUTE:String="/frame/control/quickmute";

        public static const BALANCEBUTTON:String="/frame/control/balancebutton";
    }
}


//            class ExcludeMethodTypes
package mgs.aurora.common.enums.frame 
{
    public class ExcludeMethodTypes extends Object
    {
        public function ExcludeMethodTypes()
        {
            super();
            return;
        }

        internal static const NAME:String="ExcludeMethodTypes";

        public static const DISABLED:String=NAME + "/disabled";

        public static const ENABLED:String=NAME + "/enabled";

        public static const HIDDEN:String=NAME + "/hidden";
    }
}


//            class QuickMuteFrameLabels
package mgs.aurora.common.enums.frame 
{
    public class QuickMuteFrameLabels extends Object
    {
        public function QuickMuteFrameLabels()
        {
            super();
            return;
        }

        public static const ON:String="On";

        public static const OFF:String="Off";
    }
}


//            class SystemButtonTypes
package mgs.aurora.common.enums.frame 
{
    public class SystemButtonTypes extends Object
    {
        public function SystemButtonTypes()
        {
            super();
            return;
        }

        internal static const NAME:String="systembuttontypes";

        public static const OPTIONS:String=NAME + "/options";

        public static const BANK:String=NAME + "/bank";

        public static const STATS:String=NAME + "/stats";

        public static const EXPERT:String=NAME + "/expert";

        public static const REGULAR:String=NAME + "/regular";

        public static const EXIT:String=NAME + "/exit";

        public static const HELP:String=NAME + "/help";

        public static const PLAYFORREAL:String=NAME + "/playforreal";

        public static const CONNECT:String=NAME + "/connect";

        public static const DISCONNECT:String=NAME + "/disconnect";
    }
}


//          package genie
//            class GenieCasinoErrorTypes
package mgs.aurora.common.enums.genie 
{
    public class GenieCasinoErrorTypes extends Object
    {
        public function GenieCasinoErrorTypes()
        {
            super();
            return;
        }

        public static const SERVER:String="server";

        public static const XMAN:String="xman";

        public static const CLIENT:String="client";
    }
}


//            class GenieInternalErrorCodes
package mgs.aurora.common.enums.genie 
{
    public class GenieInternalErrorCodes extends Object
    {
        public function GenieInternalErrorCodes()
        {
            super();
            return;
        }

        public static const GENERAL_UNKNOWN:String="G1";

        public static const GENERAL_GAME_NOT_AVAILABLE:String="G2";

        public static const XMAN_PACKET_TIMEOUT:String="X1";

        public static const XMAN_INVALID_PACKET_REQUEST:String="X2";

        public static const XMAN_MISSING_SERVER_ID:String="X3";

        public static const XMAN_PACKET_MISMATCH_CORRECTION_FAIL:String="X4";

        public static const XMAN_DUPLICATE_PACKET_ID:String="X5";

        public static const XMAN_CUSTOM_HEADER_NOT_SUPPORTED:String="X6";

        public static const REGULATED_CLIENT_SERVER_MISMATCH:String="R1";

        public static const MPF_SOCKET_POLICY_ERROR:String="MPF1";

        public static const MPF_SOCKET_CONNECTION_ERROR:String="MPF2";

        public static const MPF_FORCED_LOGOUT:String="MPF3";

        public static const MPF_LOGIN_ERROR:String="MPF4";

        public static const MPF_CONNECTION_ERROR:String="MPF5";

        public static const CIP_MAX_LIMIT_ERROR:String="CIP1";

        public static const CIP_INVALID_REQUEST:String="CIP2";
    }
}


//          package magneto
//            class SocketIdentifiers
package mgs.aurora.common.enums.magneto 
{
    public class SocketIdentifiers extends Object
    {
        public function SocketIdentifiers()
        {
            super();
            return;
        }

        internal static const NAME:String="SocketIdentifiers";

        public static const MPV_LOBBY:String=NAME + "/mpv_lobby";

        public static const MPV_ROUTER:String=NAME + "/mpv_router";
    }
}


//          package mpf
//            class mpfConfigKeys
package mgs.aurora.common.enums.mpf 
{
    public class mpfConfigKeys extends Object
    {
        public function mpfConfigKeys()
        {
            super();
            return;
        }

        internal static const NAME:String="mpf_config";

        public static const CURRENCY_SUPPORTED:String=NAME + "/keys/currency_supported";

        public static const CURRENCY_XML:String=NAME + "/keys/currency_xml";

        public static const STANDARD_CURRENCY_FORMAT:String=NAME + "/keys/standard_currency_format";
    }
}


//          package raptorSession
//            class LoginType
package mgs.aurora.common.enums.raptorSession 
{
    public class LoginType extends Object
    {
        public function LoginType()
        {
            super();
            return;
        }

        public static const LEGACY:String="LEGACY";

        public static const UPE_INTERIM:String="UPE_I";

        public static const UPE_FULL:String="UPE_F";

        public static const SGI:String="SGI";

        public static const VANGUARD:String="VANGUARD";

        public static const MPP:String="MPP";
    }
}


//            class OlrTypes
package mgs.aurora.common.enums.raptorSession 
{
    public class OlrTypes extends Object
    {
        public function OlrTypes()
        {
            super();
            return;
        }

        public static const OLR_REAL:String="real";

        public static const OLR_GUEST:String="guest";
    }
}


//            class UserTypes
package mgs.aurora.common.enums.raptorSession 
{
    public class UserTypes extends Object
    {
        public function UserTypes()
        {
            super();
            return;
        }

        public static const REAL_USER:uint=0;

        public static const GUEST_USER:uint=1;

        public static const DEMO_USER:uint=5;

        public static const FUN_BONUS:uint=2;
    }
}


//          package sgi
//            class SGIConstants
package mgs.aurora.common.enums.sgi 
{
    public class SGIConstants extends Object
    {
        public function SGIConstants()
        {
            super();
            return;
        }

        public static const TOPBAR_HEIGHT:int=80;
    }
}


//          package vpb
//            class VPBActionNotificationParams
package mgs.aurora.common.enums.vpb 
{
    public class VPBActionNotificationParams extends Object
    {
        public function VPBActionNotificationParams()
        {
            super();
            return;
        }

        public static const NAME:String="VPBActionNotificationParams";

        public static const MESSAGE_TYPE:String=NAME + "/notes/message_type";

        public static const MODULE_ID:String=NAME + "/notes/module_id";

        public static const CLIENT_ID:String=NAME + "/notes/client_id";

        public static const POST_DATA:String=NAME + "/notes/post_data";

        public static const URL:String=NAME + "/notes/url";
    }
}


//            class VPBConfigKeys
package mgs.aurora.common.enums.vpb 
{
    public class VPBConfigKeys extends Object
    {
        public function VPBConfigKeys()
        {
            super();
            return;
        }

        public static const NAME:String="VPBConfigKeys";

        public static const X_POS:String=NAME + "/keys/x_pos";

        public static const Y_POS:String=NAME + "/keys/y_pos";

        public static const INIT_MESSAGE_DELAY:String=NAME + "/keys/init_message_delay";

        public static const NUM_MESSAGES_REQUEST_DELAY:String=NAME + "/keys/num_messages_request_delay";

        public static const NEXT_MESSAGE_DELAY:String=NAME + "/keys/next_message_delay";

        public static const REMOVE_MESSAGE_DELAY:String=NAME + "/keys/remove_message_delay";

        public static const TITLE_FONT:String=NAME + "/keys/title_font";

        public static const TITLE_FONT_SIZE:String=NAME + "/keys/title_font_size";

        public static const TITLE_DATA_FONT:String=NAME + "/keys/title_data_font";

        public static const TITLE_DATA_FONT_SIZE:String=NAME + "/keys/title_data_font_size";

        public static const INSTRUCTION_URL_FONT:String=NAME + "/keys/instruction_url_font";

        public static const INSTRUCTION_URL_FONT_SIZE:String=NAME + "/keys/instruction_url_font_size";

        public static const VPB_SUPPORTED:String=NAME + "/keys/vpb_supported";

        public static const FRAME_TYPE:String=NAME + "/keys/frame_type";

        public static const FRAME_TYPES:String=NAME + "/keys/frame_types";

        public static const ENABLED:String=NAME + "/keys/enabled";

        public static const NUM_MESSAGES:String=NAME + "/keys/num_messages";

        public static const XMAN:String=NAME + "/keys/xman";

        public static const TWEEN_IN_DELAY:Number=NAME + "/keys/tween_in_delay";

        public static const TWEEN_OUT_DELAY:Number=NAME + "/keys/tween_out_delay";
    }
}


//            class VPBErrorTypes
package mgs.aurora.common.enums.vpb 
{
    public class VPBErrorTypes extends Object
    {
        public function VPBErrorTypes()
        {
            super();
            return;
        }

        public static const NAME:String="VPBErrorTypes";

        public static const INVALID_CONFIG_DATA:String=NAME + "/error/invalid_config_data";

        public static const VPB_NOT_SUPPORTED:String=NAME + "/error/vpb_not_supported";

        public static const INVALID_FRAME_TYPE_SUPPLIED:String=NAME + "/error/invalid_frame_type_supplied";

        public static const INVALID_DIALOG_PARENT_SUPPLIED:String=NAME + "/error/invalid_dialog_parent_supplied";

        public static const INVALID_ART_SUPPLIED:String=NAME + "/error/invalid_art_supplied";

        public static const LAUNCHING_SAME_GAME:String=NAME + "/error/launching_same_game";
    }
}


//            class VPBMessageTypes
package mgs.aurora.common.enums.vpb 
{
    public class VPBMessageTypes extends Object
    {
        public function VPBMessageTypes()
        {
            super();
            return;
        }

        public static const LAUNCH_OLR:uint=0;

        public static const LAUNCH_GAME:uint=1;

        public static const SEND_EMAIL:uint=2;

        public static const LAUNCH_WEBECASH:uint=3;

        public static const DISPLAY_WELCOME_FANFARE:uint=4;

        public static const DISPLAY_BIRTHDAY_FANFARE:uint=5;

        public static const DISPLAY_BONUS_FANFARE:uint=6;

        public static const LAUNCH_WEBPAGE:uint=7;

        public static const POST_TO_WEBSERVER:uint=8;

        public static const LAUNCH_CHAT:uint=9;

        public static const POPUP_MESSAGE_ONLY:uint=10;

        public static const LAUNCH_PLAYCHECK:uint=11;

        public static const LAUNCH_CASHCHECK:uint=12;

        public static const LAUNCH_LOYALTY:uint=13;

        public static const LAUNCH_MY_ACCOUNT:uint=14;

        public static const SWITCH_REAL_TO_FUN:uint=15;

        public static const SWITCH_FUN_TO_REAL:uint=16;

        public static const LAUNCH_FUNBONUS_TUTORIAL:uint=17;

        public static const LAUNCH_FUNBONUS_TERMS_AND_CONDITIONS:uint=18;
    }
}


//            class VPBWebApps
package mgs.aurora.common.enums.vpb 
{
    public class VPBWebApps extends Object
    {
        public function VPBWebApps()
        {
            super();
            return;
        }

        public static const NAME:String="VPBWebApps";

        public static const PLAYCHECK:String="Playcheck";

        public static const CASHCHECK:String="CashCheck";

        public static const LOYALTY_MANAGER:String="Loyalty";

        public static const MY_ACCOUNT:String="MyAccountSite";
    }
}


//          class CasinoPlatforms
package mgs.aurora.common.enums 
{
    public class CasinoPlatforms extends Object
    {
        public function CasinoPlatforms()
        {
            super();
            return;
        }

        public static const VIPER:String="Viper";

        public static const AURORA:String="Aurora";

        public static const RUBY:String="Ruby";

        public static const T3:String="T3";
    }
}


//          class CommsErrorTypes
package mgs.aurora.common.enums 
{
    public class CommsErrorTypes extends Object
    {
        public function CommsErrorTypes()
        {
            super();
            return;
        }

        public static const NAME:String="CommsErrorTypes";

        public static const INVALID_CONFIG_DATA:String=NAME + "/errors/invalid_config_data";

        public static const INVALID_PACKET_REQUEST_DATA:String=NAME + "/error/invalid_packet_request_data";

        public static const DUPLICATE_PACKET_ID:String=NAME + "/error/duplicate_packet_id";

        public static const CONFIG_NOT_INITIALIZED:String=NAME + "/error/config_not_initialized";

        public static const NO_SERVER_ID_SUPPLIED:String=NAME + "/error/no_server_id_supplied";

        public static const PACKET_MISMATCH_CORRECTION_FAILED:String=NAME + "/error/packet_mismatch_correction_failed";
    }
}


//          class ContentType
package mgs.aurora.common.enums 
{
    public class ContentType extends Object
    {
        public function ContentType()
        {
            super();
            return;
        }

        internal static const NAME:String="content_type";

        public static const SWF_CONTENT:String=NAME + "/swf";

        public static const XML_CONTENT:String=NAME + "/xml";

        public static const BIN_CONTENT:String=NAME + "/bin";

        public static const ZIP_CONTENT:String=NAME + "/zip";
    }
}


//          class PreloaderConstants
package mgs.aurora.common.enums 
{
    public class PreloaderConstants extends Object
    {
        public function PreloaderConstants()
        {
            super();
            return;
        }

        public static const REAL_PLAY:String="realplay";

        public static const DEMO_PLAY:String="demoplay";
    }
}


//          class StageSizeConstants
package mgs.aurora.common.enums 
{
    public class StageSizeConstants extends Object
    {
        public function StageSizeConstants()
        {
            super();
            return;
        }

        public static const WIDESCREEN_HEIGHT:int=720;

        public static const WIDESCREEN_WIDTH:int=1280;

        public static const STANDARD_HEIGHT:int=768;

        public static const STANDARD_WIDTH:int=1024;

        public static const T3DEFAULTFRAME_HEIGHT:int=757;

        public static const T3MINIFRAME_HEIGHT:int=748;
    }
}


//          class StorageNames
package mgs.aurora.common.enums 
{
    public class StorageNames extends Object
    {
        public function StorageNames()
        {
            super();
            return;
        }

        public static const LOGIN_STORAGE:String="login";

        public static const LOGIN_REMEMBERPASSWORD:String="rememberpassword";

        public static const LOGIN_AUTOLOGIN:String="autologin";
    }
}


//          class XManConfigKeys
package mgs.aurora.common.enums 
{
    public class XManConfigKeys extends Object
    {
        public function XManConfigKeys()
        {
            super();
            return;
        }

        public static const NAME:String="XManConfigKeys";

        public static const SERVER_URL:String=NAME + "/keys/server_url";

        public static const SERVER_ID:String=NAME + "/keys/server_id";

        public static const PACKET_TIMEOUT:String=NAME + "/keys/packet_timeout";

        public static const SESSION_TIMEOUT:String=NAME + "/keys/session_timeout";

        public static const LANGUAGE:String=NAME + "/keys/language";

        public static const SESSION_ID:String=NAME + "/keys/session_id";
    }
}


//          class XManPacketParameterKeys
package mgs.aurora.common.enums 
{
    public class XManPacketParameterKeys extends Object
    {
        public function XManPacketParameterKeys()
        {
            super();
            return;
        }

        public static const NAME:String="PacketParameterKeys";

        public static const PKT_ATTRIBUTES:String=NAME + "/keys/pkt_attributes";

        public static const MODULE_ID:String=NAME + "/keys/module_id";

        public static const CLIENT_ID:String=NAME + "/keys/client_id";

        public static const SERVER_ID:String=NAME + "/keys/server_id";

        public static const VERB:String=NAME + "/keys/verb";

        public static const REQUEST:String=NAME + "/keys/request";

        public static const PACKET_ID:String=NAME + "/keys/packet_id";

        public static const RESET_SESSION_TIMER:String=NAME + "/keys/reset_session_timer";

        public static const EVENT_NAME:String=NAME + "/keys/event_name";

        public static const EXPECTED_RESPONSE_VERB:String=NAME + "/keys/expected_response_verb";

        public static const INCLUDE_EXT_OPERATOR_INFO:String=NAME + "/keys/include_ext_operator_info";

        public static const PACKET:String=NAME + "/keys/packet";
    }
}


//          class XManServerErrorCodes
package mgs.aurora.common.enums 
{
    public class XManServerErrorCodes extends Object
    {
        public function XManServerErrorCodes()
        {
            super();
            return;
        }

        public static const EC_LOGIN_LOCKED_OUT:String="101";

        public static const EC_LOGIN_COUNTRY_EXCLUDED:String="110";

        public static const EC_LOGIN_UNSUPPORTED_CURRENCY:String="114";

        public static const LOGIN_ATTEMPTS_EXCEEDED:String="150";

        public static const EC_GAME_GENERAL_GAME_NOT_AVAILABLE:String="504";

        public static const EC_GAME_GENERAL_INVALID_BET_LIMITS:String="523";

        public static const FUN_BONUS_EXPIRED:String="50110";

        public static const FUN_BONUS_OUT_OF_PLAYTIME:String="50111";

        public static const IT_LOGIN_ERROR:String="50113";
    }
}


//          class XmanTimerNames
package mgs.aurora.common.enums 
{
    public class XmanTimerNames extends Object
    {
        public function XmanTimerNames()
        {
            super();
            return;
        }

        public static const NAME:String="XmanTimerNames";

        public static const SESSION_TIMER:String=NAME + "/session_timer";

        public static const PACKET_TIMER:String=NAME + "/packet_timer";

        public static const PING_TIMER:String=NAME + "/ping_timer";
    }
}


//        package events
//          package banking
//            class BankingEvent
package mgs.aurora.common.events.banking 
{
    import flash.events.*;
    
    public class BankingEvent extends flash.events.Event
    {
        public function BankingEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.banking.BankingEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("BankingEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():Object
        {
            return this._data;
        }

        public function set data(arg1:Object):void
        {
            this._data = arg1;
            return;
        }

        public static const NAME:String="BankingEvent";

        public static const LAUNCH_BANKING:String=NAME + "/event_types/launch_banking";

        public static const BANKING_LAUNCHED:String=NAME + "/event_types/banking_launched";

        public static const BANKING_NOT_LAUNCHED:String=NAME + "/event_types/banking_not_launched";

        public static const BANK_RETURNED:String=NAME + "/event_types/bank_returned";

        public static const NO_CASH_PROMPT:String=NAME + "/event_types/no_cash_prompt";

        public static const FRAME_LAUNCH_BANK:String=NAME + "/event_types/frame_launch_bank";

        public static const BANKING_COMPLETE:String=NAME + "/event_types/banking_complete";

        public static const GENIE_CASINO_ERROR:String=NAME + "/event_types/genie_casino_error";

        internal var _data:Object;
    }
}


//          package comms
//            class PacketEvent
package mgs.aurora.common.events.comms 
{
    import flash.events.*;
    
    public class PacketEvent extends flash.events.Event
    {
        public function PacketEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.comms.PacketEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("PacketEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function switchType(arg1:String):mgs.aurora.common.events.comms.PacketEvent
        {
            var loc1:*=new mgs.aurora.common.events.comms.PacketEvent(arg1, bubbles, cancelable);
            loc1.clientID = this.clientID;
            loc1.moduleID = this.moduleID;
            loc1.packetID = this.packetID;
            loc1.packetAttributes = this.packetAttributes;
            loc1.serverID = this.serverID;
            loc1.verb = this.verb;
            loc1.request = this.request;
            loc1.response = this.response;
            loc1.resetSessionTimer = this.resetSessionTimer;
            return loc1;
        }

        public static const NAME:String="PacketEvent";

        public static const SEND_REQUEST_PACKET:String=NAME + "/event_types/send_request_packet";

        public static const RESPONSE_PACKET_RECEIVED:String=NAME + "/event_types/response_packet_received";

        public var clientID:String;

        public var moduleID:String;

        public var packetID:String;

        public var packetAttributes:String;

        public var serverID:String;

        public var verb:String;

        public var request:XML;

        public var response:XML;

        public var resetSessionTimer:Boolean;
    }
}


//            class XManEvent
package mgs.aurora.common.events.comms 
{
    import flash.events.*;
    
    public class XManEvent extends flash.events.Event
    {
        public function XManEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.comms.XManEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("XManEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const NAME:String="XManEvent";

        public static const SETUP_COMPLETE:String=NAME + "/event_types/setup_complete";

        public static const ERROR:String=NAME + "/event_types/error";

        public static const PACKET_SENT:String=NAME + "/event_types/packet_sent";

        public static const SESSION_TIMER_STOPPED:String=NAME + "/event_types/session_timer_stopped";

        public static const SESSION_TIMER_STARTED:String=NAME + "/event_types/session_timer_started";

        public static const SESSION_TIMEDOUT:String=NAME + "/event_types/session_timedout";

        public static const PACKET_TIMEDOUT:String=NAME + "/event_types/packet_timedout";

        public static const HEADER_NOT_SUPPORTED:String=NAME + "/event_types/header_not_supported";

        public var errorType:String;

        public var packetID:String;

        public var responsePacket:XML;
    }
}


//          package controlsBuilder
//            class ControlsBuilderEvent
package mgs.aurora.common.events.controlsBuilder 
{
    import flash.events.*;
    
    public class ControlsBuilderEvent extends flash.events.Event
    {
        public function ControlsBuilderEvent(arg1:String, arg2:Object=null)
        {
            super(arg1);
            this.data = arg2;
            return;
        }

        internal static const NAME:String="controls_builder";

        public static const CONTROLS_CREATED:String=NAME + "/controls_created";

        public var data:Object;
    }
}


//          package dialogues
//            class DialogueFocusEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class DialogueFocusEvent extends flash.events.Event
    {
        public function DialogueFocusEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.common.interfaces.controls.IControl, arg5:flash.events.FocusEvent, arg6:Boolean=false, arg7:Boolean=false)
        {
            super(arg1, arg6, arg7);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            this.originalEvent = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialogueFocusEvent(type, this.diagId, this.diagType, this.control, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueFocusEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const FOCUS_IN:String=flash.events.FocusEvent.FOCUS_IN;

        public static const FOCUS_OUT:String=flash.events.FocusEvent.FOCUS_OUT;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.common.interfaces.controls.IControl;

        public var originalEvent:flash.events.FocusEvent;
    }
}


//            class DialogueKeyboardEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class DialogueKeyboardEvent extends flash.events.Event
    {
        public function DialogueKeyboardEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.common.interfaces.controls.IControl, arg5:flash.events.KeyboardEvent, arg6:Boolean=false, arg7:Boolean=false)
        {
            super(arg1, arg6, arg7);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            this.originalEvent = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialogueKeyboardEvent(type, this.diagId, this.diagType, this.control, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueKeyboardEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const KEY_UP:String=flash.events.KeyboardEvent.KEY_UP;

        public static const KEY_DOWN:String=flash.events.KeyboardEvent.KEY_DOWN;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.common.interfaces.controls.IControl;

        public var originalEvent:flash.events.KeyboardEvent;
    }
}


//            class DialogueMouseEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class DialogueMouseEvent extends flash.events.Event
    {
        public function DialogueMouseEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.common.interfaces.controls.IControl, arg5:flash.events.MouseEvent, arg6:Boolean=false, arg7:Boolean=false)
        {
            super(arg1, arg6, arg7);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            this.originalEvent = arg5;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialogueMouseEvent(type, this.diagId, this.diagType, this.control, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueMouseEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const MOUSE_UP:String=flash.events.MouseEvent.MOUSE_UP;

        public static const MOUSE_OUT:String=flash.events.MouseEvent.MOUSE_OUT;

        public static const ROLL_OUT:String=flash.events.MouseEvent.ROLL_OUT;

        public static const DOUBLE_CLICK:String=flash.events.MouseEvent.DOUBLE_CLICK;

        public static const CLICK:String=flash.events.MouseEvent.CLICK;

        public static const RIGHT_CLICK:String="rightClick";

        public static const MOUSE_DOWN:String=flash.events.MouseEvent.MOUSE_DOWN;

        public static const MOUSE_OVER:String=flash.events.MouseEvent.MOUSE_OVER;

        public static const ROLL_OVER:String=flash.events.MouseEvent.ROLL_OVER;

        public static const MOUSE_MOVE:String=flash.events.MouseEvent.MOUSE_MOVE;

        public static const MOUSE_WHEEL:String=flash.events.MouseEvent.MOUSE_WHEEL;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.common.interfaces.controls.IControl;

        public var originalEvent:flash.events.MouseEvent;
    }
}


//            class DialogueSelectionEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class DialogueSelectionEvent extends flash.events.Event
    {
        public function DialogueSelectionEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.common.interfaces.controls.IControl, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialogueSelectionEvent(type, this.diagId, this.diagType, this.control, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueSelectionEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const SELECTED:String=mgs.aurora.common.events.SystemSelectionEvent.SELECTED;

        public static const DESELECTED:String=mgs.aurora.common.events.SystemSelectionEvent.DESELECTED;

        public static const SELECTION_CHANGE:String=mgs.aurora.common.events.SystemSelectionEvent.SELECTION_CHANGE;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.common.interfaces.controls.IControl;
    }
}


//            class DialoguesHandlerEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    
    public class DialoguesHandlerEvent extends flash.events.Event
    {
        public function DialoguesHandlerEvent(arg1:String, arg2:String, arg3:String=null, arg4:String=null)
        {
            super(arg1);
            this.id = arg2;
            this.diagId = arg3;
            this.diagType = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialoguesHandlerEvent(type, this.id, this.diagId, this.diagType);
        }

        public override function toString():String
        {
            return formatToString("NewEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="dialogues_handler/event";

        public static const DIALOGUE_CREATED:String=NAME + "/dialogue_created";

        public static const DIALOGUE_DISPLAYED:String=NAME + "/dialogue_displayed";

        public static const OTHER_DIALOGUE_DISPLAYED:String=NAME + "/other_dialogue_displayed";

        public static const REMOVING_DIALOGUE:String=NAME + "/removing_dialogue";

        public static const DIALOGUE_REMOVED:String=NAME + "/dialogue_removed";

        public static const OTHER_DIALOGUE_REMOVED:String=NAME + "/other_dialogue_removed";

        public static const ALL_DIALOGUES_REMOVED:String=NAME + "/all_dialogues_removed";

        public var id:String;

        public var diagId:String;

        public var diagType:String;
    }
}


//            class DialoguesModuleEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    
    public class DialoguesModuleEvent extends flash.events.Event
    {
        public function DialoguesModuleEvent(arg1:String, arg2:String, arg3:String, arg4:String)
        {
            super(arg1);
            this.diagId = arg2;
            this.diagType = arg3;
            this.handlerId = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialoguesModuleEvent(type, this.diagId, this.diagType, this.handlerId);
        }

        public override function toString():String
        {
            return formatToString("NewEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="dialogues_module/event";

        public static const DIALOGUE_CREATED:String=NAME + "/dialogue_created";

        public static const DIALOGUE_DISPLAYED:String=NAME + "/dialogue_displayed";

        public static const DIALOGUE_REMOVED:String=NAME + "/dialogue_removed";

        public var diagId:String;

        public var diagType:String;

        public var handlerId:String;
    }
}


//            class DialoguesTextEvent
package mgs.aurora.common.events.dialogues 
{
    import flash.events.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class DialoguesTextEvent extends flash.events.Event
    {
        public function DialoguesTextEvent(arg1:String, arg2:String, arg3:String, arg4:mgs.aurora.common.interfaces.controls.IControl, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this.diagId = arg2;
            this.diagType = arg3;
            this.control = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.dialogues.DialoguesTextEvent(type, this.diagId, this.diagType, this.control, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueTextEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const CHANGE:String=mgs.aurora.common.events.SystemTextEvent.CHANGE;

        public static const TEXT_INPUT:String=mgs.aurora.common.events.SystemTextEvent.TEXT_INPUT;

        public var diagId:String;

        public var diagType:String;

        public var control:mgs.aurora.common.interfaces.controls.IControl;
    }
}


//          package funBonus
//            class FunBonusEvents
package mgs.aurora.common.events.funBonus 
{
    public class FunBonusEvents extends Object
    {
        public function FunBonusEvents()
        {
            super();
            return;
        }

        public static const FB_SWITCH_USER:String="evt_fbswitch_panel";

        public static const FB_SHOW_TUTORIAL:String="evt_fbtutorial_panel";

        public static const FP_SHOW_TC:String="evt_fbtermsnconditions_vpb";

        public static const FB_CHANGE_BONUS_OFFER:String="evt_fbchangebonusoffer";

        public static const FB_CHANGE_BONUS_OFFER_ERROR:String="evt_fbchangebonusoffer_error";

        public static const FB_HIDE_BUBBLE:String="evt_exthidebb";
    }
}


//          package magneto
//            class MagnetoEvent
package mgs.aurora.common.events.magneto 
{
    import flash.events.*;
    
    public class MagnetoEvent extends flash.events.Event
    {
        public function MagnetoEvent(arg1:String, arg2:String, arg3:XML, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._socketId = arg2;
            this._data = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.magneto.MagnetoEvent(type, this.socketId, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MagnetoEvent", "type", "socketId", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get socketId():String
        {
            return this._socketId;
        }

        public function get data():XML
        {
            return this._data;
        }

        internal static const NAME:String="MagnetoEvent";

        public static const POLICY_ERROR:String=NAME + "/event/policy_error";

        public static const CONNECTED:String=NAME + "/event/connected";

        public static const CLOSED:String=NAME + "/event/closed";

        public static const ERROR:String=NAME + "/event/error";

        public static const DATA:String=NAME + "/event/data";

        internal var _socketId:String;

        internal var _data:XML;
    }
}


//          package marketManager
//            class MarketManagerEvent
package mgs.aurora.common.events.marketManager 
{
    import flash.events.*;
    
    public class MarketManagerEvent extends flash.events.Event
    {
        public function MarketManagerEvent(arg1:String, arg2:Object=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.marketManager.MarketManagerEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MarketManagerEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():Object
        {
            return this._data;
        }

        internal static const NAME:String="marketmanagerevent";

        public static const SYSTEM_LOADED:String=NAME + "/system_loaded";

        public static const SHOW_LOGIN_DIALOG:String=NAME + "/show_login_dialog";

        public static const SEND_LOGIN_REQUEST:String=NAME + "/send_login_request";

        public static const LOGIN_SUCCESSFULL:String=NAME + "/login_successfull";

        public static const LOAD_GAME_MODULE:String=NAME + "/load_game_module";

        public static const EXIT_GAME_MODULE:String=NAME + "/exit_game_module";

        public static const SWITCH_USER_TYPE:String=NAME + "/switch_user_type";

        public static const SHOW_ERROR_DIALOG:String=NAME + "/show_error_dialog";

        public static const INTERNAL_ERROR:String=NAME + "/show_internal_error";

        public static const CASINO_TIME_OUT:String=NAME + "/casino_time_out";

        public static const BANK_BUTTON_PRESSED:String=NAME + "/bank_button_pressed";

        public static const RETURN_FROM_BANK:String=NAME + "/return_from_bank";

        public static const HELP_BUTTON_PRESSED:String=NAME + "/help_button_pressed";

        public static const UPDATE_BONUS_BUBBLE_FEATURES:String=NAME + "/update_bonus_bubble_features";

        public static const EXIT_SYSTEM_REQUEST:String=NAME + "/exit_system_request";

        public static const UPDATE_XMAN_CONFIG:String=NAME + "/update_xman_config";

        public static const LAUNCH_EXTERNAL_SITE:String=NAME + "/launch_external_site";

        public static const LAUNCH_OLR:String=NAME + "/launch_olr";

        public static const BALANCE_UPDATED:String=NAME + "/balance_updated";

        public static const SET_EXTERNAL_LAUNCH_VARS:String=NAME + "/set_external_launch_vars";

        public static const ENABLE_VPB:String=NAME + "/enable_vpb";

        public static const DISABLE_VPB:String=NAME + "/disable_vpb";

        public static const START_XMAN_SESSION:String=NAME + "/start_xman_session";

        public static const GENIE_USER_DISCONNECT:String=NAME + "/genie_user_disconnect";

        public static const GENIE_CASINO_ERROR:String=NAME + "/genie_casino_error";

        public static const NOTIFY_GAME_BALANCE_CHANGE:String=NAME + "/notify_game_balance_change";

        internal var _data:Object;
    }
}


//          package multiplayer
//            class MPFAvatarEvent
package mgs.aurora.common.events.multiplayer 
{
    import __AS3__.vec.*;
    import flash.events.*;
    
    public class MPFAvatarEvent extends flash.events.Event
    {
        public function MPFAvatarEvent(arg1:String, arg2:*=null, arg3:__AS3__.vec.Vector.<mgs.aurora.common.vo.multiplayer.AvatarMetaData>=null, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this.avatar = arg2;
            this.avatarMetaData = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.multiplayer.MPFAvatarEvent(type, this.avatar, this.avatarMetaData, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MPFAvatarEvent", "avatar", "avatarMetaData", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="MPFAvatarEvent";

        public static const AVATAR_RECEIVED:String=NAME + "/types/avatar_received";

        public static const AVATAR_METADATA_RECEIVED:String=NAME + "/types/avatar_metadata_received";

        public var avatar:*;

        public var avatarMetaData:__AS3__.vec.Vector.<mgs.aurora.common.vo.multiplayer.AvatarMetaData>;
    }
}


//            class MPFConnectionEvent
package mgs.aurora.common.events.multiplayer 
{
    import flash.events.*;
    
    public class MPFConnectionEvent extends flash.events.Event
    {
        public function MPFConnectionEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.socketID = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.multiplayer.MPFConnectionEvent(type, this.socketID, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MPFConnectionEvent", "type", "socketID", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="MPFConnectionEvent";

        public static const ALL_SOCKETS_CONNECTED:String=NAME + "/event/sockets_connected";

        public static const SOCKET_CONNECTED:String=NAME + "/event/socket_connected";

        public var socketID:String;
    }
}


//            class MPFErrorEvent
package mgs.aurora.common.events.multiplayer 
{
    import flash.events.*;
    
    public class MPFErrorEvent extends flash.events.Event
    {
        public function MPFErrorEvent(arg1:String, arg2:flash.events.Event=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._error = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.multiplayer.MPFErrorEvent(type, this._error, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MPFErrorEvent", "error", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get error():flash.events.Event
        {
            return this._error;
        }

        internal static const NAME:String="MPFErrorEvent";

        public static const AVATAR_LOADING_ERROR:String=NAME + "/types/avatar_loading_error";

        internal var _error:flash.events.Event;
    }
}


//            class MPFLaunchEvent
package mgs.aurora.common.events.multiplayer 
{
    import flash.events.*;
    
    public class MPFLaunchEvent extends flash.events.Event
    {
        public function MPFLaunchEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._gameID = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.multiplayer.MPFLaunchEvent(type, this._gameID, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MPFLaunchEvent", "_gameID", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get gameID():String
        {
            return this._gameID;
        }

        internal static const NAME:String="MPFLaunchEvent";

        public static const LAUNCH_GAME:String=NAME + "/types/launch_game";

        internal var _gameID:String;
    }
}


//            class MPFNotificationEvent
package mgs.aurora.common.events.multiplayer 
{
    import flash.events.*;
    
    public class MPFNotificationEvent extends flash.events.Event
    {
        public function MPFNotificationEvent(arg1:String, arg2:String, arg3:XML, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._socketID = arg2;
            this._data = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.multiplayer.MPFNotificationEvent(type, this.socketID, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MPFNotificationEvent", "socketId", "data", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get socketID():String
        {
            return this._socketID;
        }

        public function get data():XML
        {
            return this._data;
        }

        internal static const NAME:String="MPFNotificationEvent";

        public static const TOURNAMENT_IN_PROGRESS:String=NAME + "/types/tournament_in_progress";

        public static const FORCE_LOGOUT:String=NAME + "/types/force_logout";

        internal var _socketID:String;

        internal var _data:XML;
    }
}


//            class MPFPacketEvent
package mgs.aurora.common.events.multiplayer 
{
    import flash.events.*;
    
    public class MPFPacketEvent extends flash.events.Event
    {
        public function MPFPacketEvent(arg1:String, arg2:String, arg3:XML, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._socketID = arg2;
            this._data = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.multiplayer.MPFPacketEvent(type, this._socketID, this._data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MPFPacketEvent", "socketId", "data", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get socketID():String
        {
            return this._socketID;
        }

        public function get data():XML
        {
            return this._data;
        }

        internal static const NAME:String="MPFPacketEvent";

        public static const PACKET_RECEIVED:String=NAME + "/event/packet_received";

        public static const LOGIN_SUCCESSFUL:String=NAME + "/event/login_successful";

        public static const LOGIN_ERROR:String=NAME + "/event/login_error";

        public static const REGISTRATION_SUCCESSFUL:String=NAME + "/event/registration_successful";

        public static const REGISTRATION_ERROR:String=NAME + "/event/registration_error";

        internal var _socketID:String;

        internal var _data:XML;
    }
}


//          package raptorSessions
//            class RaptorSessionEvent
package mgs.aurora.common.events.raptorSessions 
{
    import flash.events.*;
    
    public class RaptorSessionEvent extends flash.events.Event
    {
        public function RaptorSessionEvent(arg1:String, arg2:Object, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._dynamicData = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.raptorSessions.RaptorSessionEvent(type, this.dynamicData, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("RaptorSessionEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get dynamicData():Object
        {
            return this._dynamicData;
        }

        internal static const NAME:String="raptorsessionevent";

        public static const LOGIN_SUCCESSFULL:String=NAME + "/login_successfull";

        public static const CHANGE_PASSWORD_SUCCESSFULL:String=NAME + "/change_password_successfull";

        public static const ERROR:String=NAME + "/error";

        public static const LAUNCH_ORL:String=NAME + "/launch_olr";

        public static const LAUNCH_HELP:String=NAME + "/launch_help";

        public static const LAUNCH_MIGRATE:String=NAME + "/launch_migrate";

        public static const LAUNCH_FORGOTPASSWORD:String=NAME + "/launch_forgotPassword";

        public static const EXIT:String=NAME + "/exit";

        public static const SESSION_CREATED:String=NAME + "/session_created";

        public static const LOGOUT_SUCCESSFULL:String=NAME + "/logout_successfull";

        public static const LAUNCH_BRANDMIGRATION:String=NAME + "/launch_brandmigration";

        public static const LAUNCH_SWITCH_USER:String=NAME + "/launch_switch_user";

        public static const SWITCH_USER_CANCELLED:String=NAME + "/switch_user_cancelled";

        internal var _dynamicData:Object;
    }
}


//          package sgi
//            class SgiEvent
package mgs.aurora.common.events.sgi 
{
    import flash.events.*;
    
    public class SgiEvent extends flash.events.Event
    {
        public function SgiEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.sgi.SgiEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SgiEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const NAME:String="SgiEvent";

        public static const REAL_PLAY:String=NAME + "/types/real_play";

        public static const DEMO_PLAY:String=NAME + "/types/demo_play";

        public static const UILOADED:String=NAME + "/types/uiloaded";

        public static const PLAYFORREAL:String=NAME + "/types/playforreal";

        public static const SHOWABOUT:String=NAME + "/types/showabout";

        public static const HIDEABOUT:String=NAME + "/types/hideabout";

        public static const CHANGESOUND:String=NAME + "/types/changesound";
    }
}


//          package vpb
//            class VPBEvent
package mgs.aurora.common.events.vpb 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.interfaces.vpb.*;
    
    public class VPBEvent extends flash.events.Event
    {
        public function VPBEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.vpb.VPBEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("VPBEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const NAME:String="VPBEvent";

        public static const ACTION_NOTIFICATION:String=NAME + "/event_types/action_notification";

        public static const ERROR:String=NAME + "/event_types/error";

        public static const SETUP_COMPLETE:String=NAME + "/event_types/setup_complete";

        public static const IS_GAME_VALID:String=NAME + "/event_types/is_game_valid";

        public static const IS_WEB_APP_AVAILABLE:String=NAME + "/event_types/is_web_app_available";

        public static const UPDATE_BALANCE:String=NAME + "/event_types/update_balance";

        public static const REQUEST_WEB_APP_DETAILS:String=NAME + "/event_types/request_web_app_details";

        public static const DISPLAY_INVALID_GAME_MESSAGE:String=NAME + "/event_types/display_invalid_game_message";

        public static const SWITCH_USER_TYPE:String=NAME + "/event_types/switch_user_type";

        public var actionDetails:flash.utils.Dictionary;

        public var errorType:String;

        public var gameDetails:mgs.aurora.common.interfaces.vpb.IIsGameValidParameters;

        public var webAppName:String;

        public var value:Number;

        public var userType:String="";
    }
}


//          class PacketErrorEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class PacketErrorEvent extends flash.events.Event
    {
        public function PacketErrorEvent(arg1:String, arg2:XML=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.packet = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.PacketErrorEvent(type, this.packet, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("PacketErrorEvent", "type", "packet", "bubbles", "cancelable", "eventPhase");
        }

        public static const NAME:String="PacketErrorEvent";

        public static const FATAL:String=NAME + "/types/fatal";

        public static const HEADER_NOT_SUPPORTED:String=NAME + "/types/header_not_supported";

        public var packet:XML;
    }
}


//          class SystemChipSelectorEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemChipSelectorEvent extends flash.events.Event
    {
        public function SystemChipSelectorEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemChipSelectorEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemChipSelectorEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="system/chip_selector/event";

        public static const INC:String=NAME + "/inc";

        public static const DEC:String=NAME + "/dec";
    }
}


//          class SystemConfigEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemConfigEvent extends flash.events.Event
    {
        public function SystemConfigEvent(arg1:String, arg2:*, arg3:*, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._name = arg2;
            this._value = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemConfigEvent(type, this.name, this.value, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemConfigEvent", "type", "name", "value", "bubbles", "cancelable", "eventPhase");
        }

        public function get name():*
        {
            return this._name;
        }

        public function get value():*
        {
            return this._value;
        }

        internal static const NAME:String="/system/config/event";

        public static const VALUE_CHANGED:String=NAME + "/changed";

        internal var _name:*;

        internal var _value:*;
    }
}


//          class SystemFocusEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemFocusEvent extends flash.events.Event
    {
        public function SystemFocusEvent(arg1:String, arg2:String, arg3:flash.events.FocusEvent, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._id = arg2;
            this._targetEvent = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemFocusEvent(type, this._id, this._targetEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemFocusEvent", "type", "id", "targetEvent", "bubbles", "cancelable", "eventPhase");
        }

        public function get id():String
        {
            return this._id;
        }

        public function get originalEvent():flash.events.FocusEvent
        {
            return this._targetEvent;
        }

        public static const FOCUS_IN:String=flash.events.FocusEvent.FOCUS_IN;

        public static const FOCUS_OUT:String=flash.events.FocusEvent.FOCUS_OUT;

        internal var _id:String;

        internal var _targetEvent:flash.events.FocusEvent;
    }
}


//          class SystemFrameEvents
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemFrameEvents extends flash.events.Event
    {
        public function SystemFrameEvents(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemFrameEvents(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemFrameEvents", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="system/frame/event";

        public static const GAME_LAYOUT_COMPLETE:String=NAME + "/game_layout_complete";

        public static const GAME_LAYOUT_CLEARED:String=NAME + "/game_layout_cleared";

        public static const FRAME_SWITCH_COMPLETE:String=NAME + "/frame_switch_complete";
    }
}


//          class SystemInteractionEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemInteractionEvent extends flash.events.Event
    {
        public function SystemInteractionEvent(arg1:String, arg2:String, arg3:flash.events.Event, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._id = arg2;
            this._targetEvent = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemInteractionEvent(type, this._id, this._targetEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemInteractionEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get id():String
        {
            return this._id;
        }

        public function get originalEvent():flash.events.Event
        {
            return this._targetEvent;
        }

        public static const MOUSE_UP:String=flash.events.MouseEvent.MOUSE_UP;

        public static const MOUSE_OUT:String=flash.events.MouseEvent.MOUSE_OUT;

        public static const ROLL_OUT:String=flash.events.MouseEvent.ROLL_OUT;

        public static const DOUBLE_CLICK:String=flash.events.MouseEvent.DOUBLE_CLICK;

        public static const CLICK:String=flash.events.MouseEvent.CLICK;

        public static const RIGHT_CLICK:String="rightClick";

        public static const MOUSE_DOWN:String=flash.events.MouseEvent.MOUSE_DOWN;

        public static const MOUSE_OVER:String=flash.events.MouseEvent.MOUSE_OVER;

        public static const ROLL_OVER:String=flash.events.MouseEvent.ROLL_OVER;

        public static const MOUSE_MOVE:String=flash.events.MouseEvent.MOUSE_MOVE;

        public static const MOUSE_WHEEL:String=flash.events.MouseEvent.MOUSE_WHEEL;

        public static const KEY_UP:String=flash.events.KeyboardEvent.KEY_UP;

        public static const KEY_DOWN:String=flash.events.KeyboardEvent.KEY_DOWN;

        protected var _id:String;

        protected var _targetEvent:flash.events.Event;
    }
}


//          class SystemKeyboardEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemKeyboardEvent extends mgs.aurora.common.events.SystemInteractionEvent
    {
        public function SystemKeyboardEvent(arg1:String, arg2:String, arg3:flash.events.KeyboardEvent, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemKeyboardEvent(type, _id, _targetEvent as flash.events.KeyboardEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemKeyboardEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const KEY_UP:String=mgs.aurora.common.events.SystemInteractionEvent.KEY_UP;

        public static const KEY_DOWN:String=mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN;
    }
}


//          class SystemMouseEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemMouseEvent extends mgs.aurora.common.events.SystemInteractionEvent
    {
        public function SystemMouseEvent(arg1:String, arg2:String, arg3:flash.events.MouseEvent, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemMouseEvent(type, _id, _targetEvent as flash.events.MouseEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemMouseEvent", "type", "id", "targetEvent", "bubbles", "cancelable", "eventPhase");
        }

        public static const MOUSE_UP:String=mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP;

        public static const MOUSE_OUT:String=mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT;

        public static const ROLL_OUT:String=mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT;

        public static const DOUBLE_CLICK:String=mgs.aurora.common.events.SystemInteractionEvent.DOUBLE_CLICK;

        public static const CLICK:String=mgs.aurora.common.events.SystemInteractionEvent.CLICK;

        public static const RIGHT_CLICK:String=mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK;

        public static const MOUSE_DOWN:String=mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN;

        public static const MOUSE_OVER:String=mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER;

        public static const ROLL_OVER:String=mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER;

        public static const MOUSE_MOVE:String=mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE;

        public static const MOUSE_WHEEL:String=mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL;
    }
}


//          class SystemPreloaderEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemPreloaderEvent extends flash.events.Event
    {
        public function SystemPreloaderEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemPreloaderEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemPreloaderEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const NAME:String="SystemPreloaderEvent";

        public static const SHOW:String=NAME + "/show";

        public static const HIDE:String=NAME + "/hide";
    }
}


//          class SystemSelectionEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemSelectionEvent extends flash.events.Event
    {
        public function SystemSelectionEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.id = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemSelectionEvent(type, this.id, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemSelectionEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="system/selection/event";

        public static const SELECTED:String=NAME + "/selected";

        public static const DESELECTED:String=NAME + "/deselected";

        public static const SELECTION_CHANGE:String=NAME + "/selection_change";

        public var id:String;
    }
}


//          class SystemSharedObjectEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemSharedObjectEvent extends flash.events.Event
    {
        public function SystemSharedObjectEvent(arg1:String, arg2:String, arg3:String, arg4:*, arg5:String=null, arg6:Boolean=false, arg7:Boolean=false, arg8:Boolean=false)
        {
            super(arg1, arg7, arg8);
            this._keyName = arg3;
            this._keyValue = arg4;
            this._localPath = arg5;
            this._secure = arg6;
            this._storageName = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemSharedObjectEvent(type, this.storageName, this.keyName, this._keyValue, this.localPath, this.secure, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemSharedObjectEvent", "type", "storageName", "keyName", "keyValue", "localPath", "secure", "bubbles", "cancelable", "eventPhase");
        }

        public function get storageName():String
        {
            return this._storageName;
        }

        public function get keyName():String
        {
            return this._keyName;
        }

        public function get keyValue():*
        {
            return this._keyValue;
        }

        public function get localPath():String
        {
            return this._localPath;
        }

        public function get secure():Boolean
        {
            return this._secure;
        }

        internal static const NAME:String="system/sharedObject/event";

        public static const PENDING:String=NAME + "/pending";

        public static const SUCCESS:String=NAME + "/success";

        public static const FAILED:String=NAME + "/failed";

        internal var _storageName:String;

        internal var _keyName:String;

        internal var _keyValue:*;

        internal var _localPath:String;

        internal var _secure:Boolean;
    }
}


//          class SystemSoundEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    import flash.media.*;
    
    public class SystemSoundEvent extends flash.events.Event
    {
        public function SystemSoundEvent(arg1:String, arg2:String, arg3:String, arg4:flash.media.SoundChannel, arg5:Boolean=false, arg6:Boolean=false)
        {
            super(arg1, arg5, arg6);
            this._id = arg2;
            this._group = arg3;
            this._channel = arg4;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemSoundEvent(type, this.id, this.group, this.channel, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemSoundEvent", "type", "id", "group", "channel", "bubbles", "cancelable", "eventPhase");
        }

        public function get group():String
        {
            return this._group;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get channel():flash.media.SoundChannel
        {
            return this._channel;
        }

        internal static const NAME:String="api/sound/event";

        public static const COMPLETE:String=NAME + "/complete";

        public static const VOLUMEOVERTIME:String=NAME + "/volumeovertime";

        public static const PANOVERTIME:String=NAME + "/panovertime";

        public static const MUTE:String=NAME + "/mute";

        public static const VOLUME:String=NAME + "/volume";

        public static const STOPPED:String=NAME + "/stopped";

        internal var _group:String;

        internal var _id:String;

        internal var _channel:flash.media.SoundChannel;
    }
}


//          class SystemStoreEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemStoreEvent extends flash.events.Event
    {
        public function SystemStoreEvent(arg1:String, arg2:String, arg3:String, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._name = arg2;
            this._value = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemStoreEvent(type, this.name, this.value, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemStoreEvent", "type", "name", "value", "bubbles", "cancelable", "eventPhase");
        }

        public function get name():String
        {
            return this._name;
        }

        public function get value():String
        {
            return this._value;
        }

        public static const NAME:String="SystemStoreEvent";

        public static const STORENAMEVALUE:String=NAME + "/storenamevalue";

        internal var _name:String;

        internal var _value:String;
    }
}


//          class SystemTextEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemTextEvent extends flash.events.Event
    {
        public function SystemTextEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.id = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemTextEvent(type, this.id, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemTextEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="system/text/event";

        public static const CHANGE:String=NAME + "/change";

        public static const TEXT_INPUT:String=NAME + "/text_input";

        public var id:String;
    }
}


//          class SystemToolTipEvent
package mgs.aurora.common.events 
{
    import flash.events.*;
    
    public class SystemToolTipEvent extends flash.events.Event
    {
        public function SystemToolTipEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.common.events.SystemToolTipEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SystemToolTipEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="/system/tooltip/event";

        public static const SHOWING:String=NAME + "/showing";

        public static const REMOVED:String=NAME + "/removed";
    }
}


//        package interfaces
//          package banking
//            class IBanking
package mgs.aurora.common.interfaces.banking 
{
    import flash.events.*;
    import mgs.aurora.common.vo.banking.*;
    
    public interface IBanking extends flash.events.IEventDispatcher
    {
        function initialise(arg1:mgs.aurora.common.vo.banking.BankingDependencies):void;

        function refreshBalance():void;

        function setUserBalance(arg1:Number):void;

        function get balance():Number;

        function launchBank():void;

        function launchQuickBank():void;

        function promptForCash():void;

        function reset():void;

        function showRefreshDialogue():void;
    }
}


//          package bonusBubble
//            class IBonusBubble
package mgs.aurora.common.interfaces.bonusBubble 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    
    public interface IBonusBubble extends flash.events.IEventDispatcher
    {
        function setup(arg1:flash.utils.Dictionary):void;

        function reset():void;

        function setCreditsFormatting(arg1:Boolean, arg2:String=".", arg3:String=" "):void;

        function changeSettings(arg1:flash.utils.Dictionary):void;

        function get trigger():flash.display.InteractiveObject;

        function set trigger(arg1:flash.display.InteractiveObject):void;

        function get coordinates():flash.geom.Point;

        function set coordinates(arg1:flash.geom.Point):void;

        function get supported():Boolean;

        function get enabled():Boolean;

        function set enabled(arg1:Boolean):void;

        function get display():Boolean;

        function set display(arg1:Boolean):void;

        function show():void;
    }
}


//          package comms
//            class IXMan
package mgs.aurora.common.interfaces.comms 
{
    public interface IXMan extends mgs.aurora.common.interfaces.comms.IXManPacketSender
    {
        function setup(arg1:Object):void;

        function startSessionTimer():void;

        function stopSessionTimer():void;

        function stopPacketTimer():void;

        function clearPendingPacketQueue():void;

        function setClientLang(arg1:String):void;

        function setSessionID(arg1:String):void;

        function startPing():void;

        function stopPing():void;

        function setServerID(arg1:String):void;

        function updateTimerConfig(arg1:Object):void;
    }
}


//            class IXManPacketSender
package mgs.aurora.common.interfaces.comms 
{
    import flash.events.*;
    import flash.utils.*;
    
    public interface IXManPacketSender extends flash.events.IEventDispatcher
    {
        function sendPacket(arg1:flash.utils.Dictionary):void;
    }
}


//          package controls
//            class IAbstractControlList
package mgs.aurora.common.interfaces.controls 
{
    import flash.events.*;
    
    public interface IAbstractControlList extends flash.events.IEventDispatcher
    {
        function enable(arg1:String):void;

        function enableAll():void;

        function disable(arg1:String):void;

        function disableAll():void;

        function show(arg1:String):void;

        function showAll():void;

        function hide(arg1:String):void;

        function hideAll():void;

        function remove(arg1:String):void;

        function removeAll():void;

        function get enabledList():String;

        function get disabledList():String;

        function get visibleList():String;

        function get hiddenList():String;

        function get list():String;
    }
}


//            class IButton
package mgs.aurora.common.interfaces.controls 
{
    public interface IButton extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get tabIndex():int;

        function set tabIndex(arg1:int):void;

        function get textField():mgs.aurora.common.interfaces.controls.IText;

        function setState(arg1:String):void;
    }
}


//            class IButtonList
package mgs.aurora.common.interfaces.controls 
{
    public interface IButtonList extends mgs.aurora.common.interfaces.controls.IAbstractControlList
    {
        function getButton(arg1:String):mgs.aurora.common.interfaces.controls.IButton;

        function hasButtons(arg1:String):Boolean;
    }
}


//            class ICheckBox
package mgs.aurora.common.interfaces.controls 
{
    public interface ICheckBox extends mgs.aurora.common.interfaces.controls.IButton
    {
        function get checked():Boolean;

        function set checked(arg1:Boolean):void;
    }
}


//            class ICheckBoxList
package mgs.aurora.common.interfaces.controls 
{
    public interface ICheckBoxList extends mgs.aurora.common.interfaces.controls.IAbstractControlList
    {
        function getCheckBox(arg1:String):mgs.aurora.common.interfaces.controls.ICheckBox;

        function hasCheckBox(arg1:String):Boolean;
    }
}


//            class IClonable
package mgs.aurora.common.interfaces.controls 
{
    public interface IClonable
    {
        function clone(... rest):*;
    }
}


//            class IComboBox
package mgs.aurora.common.interfaces.controls 
{
    public interface IComboBox extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get editable():Boolean;

        function set editable(arg1:Boolean):void;

        function get selectedIndex():int;

        function set selectedIndex(arg1:int):void;

        function get selectedItem():Object;

        function get text():String;

        function set text(arg1:String):void;

        function get textField():mgs.aurora.common.interfaces.controls.IInputText;

        function get numItems():int;

        function addItem(arg1:Object):void;

        function addItemAt(arg1:Object, arg2:uint):void;

        function close():void;

        function getItemAt(arg1:uint):Object;

        function open():void;

        function removeAll():void;

        function removeItem(arg1:Object):Object;

        function removeItemAt(arg1:uint):Object;

        function replaceItemAt(arg1:Object, arg2:uint):Object;
    }
}


//            class IComboBoxList
package mgs.aurora.common.interfaces.controls 
{
    public interface IComboBoxList extends mgs.aurora.common.interfaces.controls.IControlList
    {
        function getComboBox(arg1:String):mgs.aurora.common.interfaces.controls.IComboBox;

        function hasComboBox(arg1:String):Boolean;
    }
}


//            class IControl
package mgs.aurora.common.interfaces.controls 
{
    import flash.display.*;
    import flash.events.*;
    
    public interface IControl extends flash.events.IEventDispatcher
    {
        function get id():String;

        function set id(arg1:String):void;

        function get type():String;

        function get x():Number;

        function set x(arg1:Number):void;

        function get y():Number;

        function set y(arg1:Number):void;

        function get width():Number;

        function set width(arg1:Number):void;

        function get height():Number;

        function set height(arg1:Number):void;

        function get enabled():Boolean;

        function set enabled(arg1:Boolean):void;

        function get visible():Boolean;

        function set visible(arg1:Boolean):void;

        function get hitTest():Boolean;

        function get interactiveObject():flash.display.InteractiveObject;

        function get filters():Array;

        function set filters(arg1:Array):void;

        function get alpha():Number;

        function set alpha(arg1:Number):void;

        function addToContainer(arg1:flash.display.DisplayObjectContainer):void;

        function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void;

        function removeFromContainer():void;

        function dispose():void;
    }
}


//            class IControlDimensions
package mgs.aurora.common.interfaces.controls 
{
    public interface IControlDimensions
    {
        function get x():Number;

        function get y():Number;

        function get width():Number;

        function get height():Number;

        function get minWidth():Number;

        function get maxWidth():Number;

        function get minHeight():Number;

        function get maxHeight():Number;
    }
}


//            class IControlGroup
package mgs.aurora.common.interfaces.controls 
{
    public interface IControlGroup extends mgs.aurora.common.interfaces.controls.IControlList
    {
        function linkToGroup(arg1:String):void;

        function unlinkFromGroup(arg1:String):void;
    }
}


//            class IControlList
package mgs.aurora.common.interfaces.controls 
{
    import flash.events.*;
    
    public interface IControlList extends flash.events.IEventDispatcher
    {
        function enableControls(arg1:String):void;

        function enableAllControls():void;

        function disableControls(arg1:String):void;

        function disableAllControls():void;

        function showControls(arg1:String):void;

        function showAllControls():void;

        function hideControls(arg1:String):void;

        function hideAllControls():void;

        function getControl(arg1:String):mgs.aurora.common.interfaces.controls.IControl;

        function hasControls(arg1:String):Boolean;

        function get enabledList():String;

        function get disabledList():String;

        function get visibleList():String;

        function get hiddenList():String;
    }
}


//            class IControlManager
package mgs.aurora.common.interfaces.controls 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public interface IControlManager extends mgs.aurora.common.interfaces.controls.IControlList
    {
        function getGroup(arg1:String):mgs.aurora.common.interfaces.controls.IControlGroup;

        function createGroups(arg1:String):void;

        function removeGroups(arg1:String):void;

        function removeAllGroups():void;

        function hasGroups(arg1:String):Boolean;

        function linkControlsToGroups(arg1:String, arg2:String):void;

        function unlinkControlsFromGroups(arg1:String, arg2:String):void;

        function addControl(arg1:mgs.aurora.common.interfaces.controls.ICustomControl, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void;

        function addControls(arg1:__AS3__.vec.Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void;

        function removeControls(arg1:String):void;

        function removeAllControls():void;

        function lockAllControls(arg1:Boolean=true):void;

        function unlockAllControls(arg1:Boolean=true):void;

        function changeControl(arg1:String, arg2:String, arg3:String=""):void;
    }
}


//            class ICustomControl
package mgs.aurora.common.interfaces.controls 
{
    public interface ICustomControl extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get locked():Boolean;

        function set locked(arg1:Boolean):void;

        function get text():String;

        function set text(arg1:String):void;
    }
}


//            class IGraphic
package mgs.aurora.common.interfaces.controls 
{
    public interface IGraphic extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get scaleX():Number;

        function set scaleX(arg1:Number):void;

        function get scaleY():Number;

        function set scaleY(arg1:Number):void;
    }
}


//            class IGraphicsList
package mgs.aurora.common.interfaces.controls 
{
    public interface IGraphicsList extends mgs.aurora.common.interfaces.controls.IControlList
    {
        function getGraphic(arg1:String):mgs.aurora.common.interfaces.controls.ITimelineGraphic;

        function hasGraphic(arg1:String):Boolean;
    }
}


//            class IInputText
package mgs.aurora.common.interfaces.controls 
{
    public interface IInputText extends mgs.aurora.common.interfaces.controls.IText
    {
        function setFocus():void;

        function setSelection(arg1:int, arg2:int):void;

        function get caretIndex():int;

        function get selectionBeginIndex():int;

        function get selectionEndIndex():int;
    }
}


//            class IList
package mgs.aurora.common.interfaces.controls 
{
    public interface IList extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get selectedIndex():int;

        function set selectedIndex(arg1:int):void;

        function get selectedItem():Object;

        function get numItems():int;

        function addItem(arg1:Object):void;

        function addItemAt(arg1:Object, arg2:uint):void;

        function getItemAt(arg1:uint):Object;

        function removeAll():void;

        function removeItem(arg1:Object):Object;

        function removeItemAt(arg1:uint):Object;

        function replaceItemAt(arg1:Object, arg2:uint):Object;
    }
}


//            class IRadioButton
package mgs.aurora.common.interfaces.controls 
{
    public interface IRadioButton extends mgs.aurora.common.interfaces.controls.IButton
    {
        function get selected():Boolean;

        function set selected(arg1:Boolean):void;

        function get group():mgs.aurora.common.interfaces.controls.IRadioButtonGroup;

        function set group(arg1:mgs.aurora.common.interfaces.controls.IRadioButtonGroup):void;
    }
}


//            class IRadioButtonGroup
package mgs.aurora.common.interfaces.controls 
{
    import flash.events.*;
    
    public interface IRadioButtonGroup extends flash.events.IEventDispatcher
    {
        function get id():String;

        function get selected():mgs.aurora.common.interfaces.controls.IRadioButton;

        function addRadioButton(arg1:mgs.aurora.common.interfaces.controls.IRadioButton):void;
    }
}


//            class IRadioButtonList
package mgs.aurora.common.interfaces.controls 
{
    public interface IRadioButtonList extends mgs.aurora.common.interfaces.controls.IAbstractControlList
    {
        function getRadioButton(arg1:String):mgs.aurora.common.interfaces.controls.IRadioButton;

        function hasRadioButtons(arg1:String):Boolean;
    }
}


//            class IStaticText
package mgs.aurora.common.interfaces.controls 
{
    public interface IStaticText extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get text():String;

        function set text(arg1:String):void;
    }
}


//            class IText
package mgs.aurora.common.interfaces.controls 
{
    import flash.text.*;
    
    public interface IText extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get text():String;

        function set text(arg1:String):void;

        function get defaultTextFormat():flash.text.TextFormat;

        function set defaultTextFormat(arg1:flash.text.TextFormat):void;

        function get properties():mgs.aurora.common.interfaces.controls.ITextFieldProperties;

        function getTextFormat(arg1:int=-1, arg2:int=-1):flash.text.TextFormat;

        function setTextFormat(arg1:flash.text.TextFormat, arg2:int=-1, arg3:int=-1):void;
    }
}


//            class ITextFieldProperties
package mgs.aurora.common.interfaces.controls 
{
    import flash.events.*;
    
    public interface ITextFieldProperties extends flash.events.IEventDispatcher
    {
        function get type():String;

        function set type(arg1:String):void;

        function get antiAliasType():String;

        function set antiAliasType(arg1:String):void;

        function get background():Boolean;

        function set background(arg1:Boolean):void;

        function get backgroundColor():uint;

        function set backgroundColor(arg1:uint):void;

        function get border():Boolean;

        function set border(arg1:Boolean):void;

        function get borderColor():uint;

        function set borderColor(arg1:uint):void;

        function get displayAsPassword():Boolean;

        function set displayAsPassword(arg1:Boolean):void;

        function get embedFonts():Boolean;

        function set embedFonts(arg1:Boolean):void;

        function get gridFitType():String;

        function set gridFitType(arg1:String):void;

        function get html():Boolean;

        function set html(arg1:Boolean):void;

        function get maxChars():int;

        function set maxChars(arg1:int):void;

        function get multiline():Boolean;

        function set multiline(arg1:Boolean):void;

        function get restrict():String;

        function set restrict(arg1:String):void;

        function get selectable():Boolean;

        function set selectable(arg1:Boolean):void;

        function get sharpness():Number;

        function set sharpness(arg1:Number):void;

        function get thickness():Number;

        function set thickness(arg1:Number):void;

        function get wordWrap():Boolean;

        function set wordWrap(arg1:Boolean):void;
    }
}


//            class ITextList
package mgs.aurora.common.interfaces.controls 
{
    public interface ITextList extends mgs.aurora.common.interfaces.controls.IAbstractControlList
    {
        function getText(arg1:String):mgs.aurora.common.interfaces.controls.IText;

        function getInputText(arg1:String):mgs.aurora.common.interfaces.controls.IInputText;

        function hasText(arg1:String):Boolean;
    }
}


//            class ITimelineGraphic
package mgs.aurora.common.interfaces.controls 
{
    import flash.display.*;
    
    public interface ITimelineGraphic extends mgs.aurora.common.interfaces.controls.IGraphic
    {
        function get display():flash.display.MovieClip;

        function gotoAndStop(arg1:Object):void;
    }
}


//          package currency
//            class ICurrency
package mgs.aurora.common.interfaces.currency 
{
    public interface ICurrency
    {
        function getFormatfromISOCode(arg1:String, arg2:int, arg3:Boolean):String;

        function getDefaultFormat():String;

        function getDisplaySysmbolFromISOCode(arg1:String, arg2:int):String;
    }
}


//          package dialogues
//            class IDialogue
package mgs.aurora.common.interfaces.dialogues 
{
    import mgs.aurora.common.interfaces.controls.*;
    
    public interface IDialogue extends mgs.aurora.common.interfaces.controls.IControl
    {
        function get controls():mgs.aurora.common.interfaces.controls.IControlList;

        function get buttons():mgs.aurora.common.interfaces.controls.IButtonList;

        function get graphics():mgs.aurora.common.interfaces.controls.IGraphicsList;

        function get texts():mgs.aurora.common.interfaces.controls.ITextList;

        function get checkBoxes():mgs.aurora.common.interfaces.controls.ICheckBoxList;

        function get radioButtons():mgs.aurora.common.interfaces.controls.IRadioButtonList;

        function get comboBoxes():mgs.aurora.common.interfaces.controls.IComboBoxList;

        function get title():mgs.aurora.common.interfaces.controls.IText;

        function addControl(arg1:mgs.aurora.common.interfaces.controls.IControl):void;

        function addBackground(arg1:mgs.aurora.common.interfaces.controls.IControl):void;
    }
}


//            class IDialoguesHandler
package mgs.aurora.common.interfaces.dialogues 
{
    import flash.display.*;
    import flash.events.*;
    
    public interface IDialoguesHandler extends flash.events.IEventDispatcher
    {
        function get id():String;

        function create(arg1:String, arg2:String, arg3:flash.display.DisplayObjectContainer=null, arg4:XMLList=null, arg5:XMLList=null, arg6:flash.display.LoaderInfo=null, arg7:flash.display.LoaderInfo=null, arg8:flash.display.LoaderInfo=null):void;

        function remove(arg1:String):void;

        function removeAll():void;

        function dialogue(arg1:String):mgs.aurora.common.interfaces.dialogues.IDialogue;

        function set layoutConfig(arg1:XML):void;

        function get layoutConfig():XML;

        function set uiConfig(arg1:XML):void;

        function get uiConfig():XML;

        function set art(arg1:flash.display.LoaderInfo):void;

        function get art():flash.display.LoaderInfo;

        function set artLang(arg1:flash.display.LoaderInfo):void;

        function get artLang():flash.display.LoaderInfo;

        function set fonts(arg1:flash.display.LoaderInfo):void;

        function get fonts():flash.display.LoaderInfo;

        function get displayedList():String;

        function get numDisplayed():int;

        function get globalNumDisplayed():int;
    }
}


//            class IDialoguesModule
package mgs.aurora.common.interfaces.dialogues 
{
    import flash.display.*;
    import flash.events.*;
    
    public interface IDialoguesModule extends flash.events.IEventDispatcher
    {
        function get displayCount():uint;

        function setStageResolution(arg1:Number, arg2:Number):void;

        function setLayoutConfig(arg1:XML):void;

        function setLayoutMappingConfig(arg1:XML):void;

        function setCustomLayoutConfig(arg1:XML):void;

        function removeCustomLayout():void;

        function setControlsConfig(arg1:XML):void;

        function setFonts(arg1:flash.display.LoaderInfo):void;

        function setArt(arg1:flash.display.LoaderInfo):void;

        function setArtLanguage(arg1:flash.display.LoaderInfo):void;

        function getNewHandler(arg1:String=null):mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        function getHandler(arg1:String):mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        function removeAllDialogues():void;
    }
}


//          package frames
//            package frame
//              package assets
//                class IBalanceButton
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public interface IBalanceButton extends mgs.aurora.common.interfaces.controls.ICustomControl
    {
        function get balanceButton():flash.display.InteractiveObject;

        function set balanceButton(arg1:flash.display.InteractiveObject):void;
    }
}


//                class IChipSelector
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import __AS3__.vec.*;
    import flash.events.*;
    
    public interface IChipSelector extends flash.events.IEventDispatcher
    {
        function get displayType():String;

        function set displayType(arg1:String):void;

        function get index():uint;

        function set index(arg1:uint):void;

        function get range():__AS3__.vec.Vector.<uint>;

        function set range(arg1:__AS3__.vec.Vector.<uint>):void;

        function get value():uint;

        function set value(arg1:uint):void;

        function set incAndDecButtonVisiblity(arg1:Boolean):void;

        function set incForciblyEnabled(arg1:Boolean):void;

        function set decForciblyEnabled(arg1:Boolean):void;
    }
}


//                class IClock
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    public interface IClock
    {
        function showTime():void;

        function hideTime():void;
    }
}


//                class ICredits
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import __AS3__.vec.*;
    
    public interface ICredits
    {
        function alternate(arg1:__AS3__.vec.Vector.<String>, arg2:int):void;

        function stopAlternate():void;

        function set word(arg1:String):void;

        function set value(arg1:String):void;
    }
}


//                class IExternalSites
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import flash.events.*;
    import mgs.aurora.common.interfaces.loader.*;
    
    public interface IExternalSites extends flash.events.IEventDispatcher
    {
        function configuration(arg1:XML, arg2:mgs.aurora.common.interfaces.loader.IDependenciesConfig):void;

        function dispose():void;
    }
}


//                class IFrameControls
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import mgs.aurora.common.interfaces.controls.*;
    
    public interface IFrameControls
    {
        function get buttons():mgs.aurora.common.interfaces.controls.IControlManager;

        function get graphics():mgs.aurora.common.interfaces.controls.IControlManager;

        function get texts():mgs.aurora.common.interfaces.controls.IControlManager;
    }
}


//                class IFrameHeading
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import __AS3__.vec.*;
    import flash.geom.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public interface IFrameHeading extends mgs.aurora.common.interfaces.controls.IText
    {
        function get alternatingIntervalSize():int;

        function get alternatingText():__AS3__.vec.Vector.<String>;

        function alternateText(arg1:__AS3__.vec.Vector.<String>, arg2:int):void;

        function reset():void;

        function restoreTitleDisplay():void;

        function restoreTitleColour():void;

        function set backGroundVisible(arg1:Boolean):void;

        function get backGroundVisible():Boolean;

        function movebackGround(arg1:flash.geom.Point):void;

        function set textVisible(arg1:Boolean):void;

        function get textVisible():Boolean;

        function moveText(arg1:flash.geom.Point):void;

        function set alignText(arg1:String):void;

        function get alignText():String;

        function systemAlternateText(arg1:__AS3__.vec.Vector.<String>, arg2:int):void;

        function get color():uint;

        function set color(arg1:uint):void;

        function get bold():Boolean;

        function set bold(arg1:Boolean):void;

        function get italic():Boolean;

        function set italic(arg1:Boolean):void;

        function get underline():Boolean;

        function set underline(arg1:Boolean):void;
    }
}


//                class IQuickMute
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import mgs.aurora.common.interfaces.controls.*;
    
    public interface IQuickMute extends mgs.aurora.common.interfaces.controls.ICustomControl
    {
        function on():void;

        function off():void;

        function get state():String;
    }
}


//                class IToolTip
package mgs.aurora.common.interfaces.frames.frame.assets 
{
    import flash.events.*;
    import flash.geom.*;
    
    public interface IToolTip extends flash.events.IEventDispatcher
    {
        function remove():void;

        function show(arg1:String, arg2:flash.geom.Point=null):void;

        function update(arg1:String):void;

        function configuration(arg1:XML):void;

        function dispose():void;
    }
}


//              class IFrame
package mgs.aurora.common.interfaces.frames.frame 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    
    public interface IFrame
    {
        function get canvas():flash.display.Sprite;

        function get chipSelector():mgs.aurora.common.interfaces.frames.frame.assets.IChipSelector;

        function get controls():mgs.aurora.common.interfaces.frames.frame.assets.IFrameControls;

        function get heading():mgs.aurora.common.interfaces.frames.frame.assets.IFrameHeading;

        function addGameLayout(arg1:XML):void;

        function gameLayoutComplete():void;

        function switchComplete():void;

        function addToContainer(arg1:flash.display.DisplayObjectContainer):void;

        function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void;

        function removeFromContainer():void;

        function get quickMute():mgs.aurora.common.interfaces.frames.frame.assets.IQuickMute;

        function get tooltip():mgs.aurora.common.interfaces.frames.frame.assets.IToolTip;

        function get assetHolder():flash.display.MovieClip;

        function get externalSitesManager():mgs.aurora.common.interfaces.frames.frame.assets.IExternalSites;

        function get infoTextBackGround():flash.display.MovieClip;

        function get credits():mgs.aurora.common.interfaces.frames.frame.assets.ICredits;

        function get clock():mgs.aurora.common.interfaces.frames.frame.assets.IClock;

        function get balanceButton():mgs.aurora.common.interfaces.frames.frame.assets.IBalanceButton;
    }
}


//            class IFrames
package mgs.aurora.common.interfaces.frames 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.interfaces.frames.frame.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    import mgs.aurora.common.interfaces.sounds.*;
    
    public interface IFrames extends flash.events.IEventDispatcher
    {
        function get bonusBubbleTrigger():flash.display.InteractiveObject;

        function set bonusBubbleTrigger(arg1:flash.display.InteractiveObject):void;

        function get currentFrame():mgs.aurora.common.interfaces.frames.frame.IFrame;

        function get tooltip():mgs.aurora.common.interfaces.frames.frame.assets.IToolTip;

        function get clockFeatureOn():Boolean;

        function set clockFeatureOn(arg1:Boolean):void;

        function switchTo(arg1:String, arg2:String):void;

        function addToContainer(arg1:flash.display.DisplayObjectContainer):void;

        function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void;

        function removeFromContainer():void;

        function initialize(arg1:flash.display.LoaderInfo, arg2:flash.display.LoaderInfo, arg3:XML, arg4:XML, arg5:mgs.aurora.common.interfaces.sounds.ISounds, arg6:Object):void;

        function set excludeList(arg1:__AS3__.vec.Vector.<String>):void;

        function get systemButtons():mgs.aurora.common.interfaces.controls.IControlManager;

        function get externalSites():mgs.aurora.common.interfaces.frames.frame.assets.IExternalSites;

        function startConnectClip():void;

        function stopConnectClip():void;

        function set mute(arg1:int):void;

        function set show(arg1:Boolean):void;

        function updateAfterUserSwitch():void;
    }
}


//          package gameObserver
//            class IGameObserver
package mgs.aurora.common.interfaces.gameObserver 
{
    public interface IGameObserver
    {
        function initialize(... rest):void;

        function fileLoaded(... rest):void;

        function preloaderRemoved(... rest):void;

        function gameBusy(... rest):void;

        function gameCleanedUp(... rest):void;

        function gameInitialized(... rest):void;
    }
}


//          package loader
//            class IDependenciesConfig
package mgs.aurora.common.interfaces.loader 
{
    public interface IDependenciesConfig
    {
        function getVersionedFilename(arg1:String):String;
    }
}


//            class IURLLoadRequestInfo
package mgs.aurora.common.interfaces.loader 
{
    import flash.net.*;
    
    public interface IURLLoadRequestInfo
    {
        function get id():String;

        function get url():String;

        function get type():String;

        function get context():*;

        function get requestHeaders():flash.net.URLRequestHeader;

        function get variables():flash.net.URLVariables;

        function get method():String;

        function get loaderDataFormat():String;

        function get fallback():Object;
    }
}


//            class IURLLoadResponseInfo
package mgs.aurora.common.interfaces.loader 
{
    public interface IURLLoadResponseInfo
    {
        function get request():mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo;

        function get content():*;

        function get bytesLoaded():uint;

        function get bytesTotal():uint;

        function get progress():Number;

        function get status():int;
    }
}


//            class IURLLoader
package mgs.aurora.common.interfaces.loader 
{
    public interface IURLLoader
    {
        function start():void;

        function stop():void;

        function dispose():void;

        function getResponseInfo():mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo;
    }
}


//          package magneto
//            class IMagneto
package mgs.aurora.common.interfaces.magneto 
{
    public interface IMagneto extends mgs.aurora.common.interfaces.magneto.IMagnetoPacketSender
    {
        function connect(arg1:String):void;

        function setup(arg1:XML):void;

        function close(arg1:String):void;
    }
}


//            class IMagnetoPacketSender
package mgs.aurora.common.interfaces.magneto 
{
    import flash.events.*;
    
    public interface IMagnetoPacketSender extends flash.events.IEventDispatcher
    {
        function sendData(arg1:String, arg2:XML, arg3:uint, arg4:uint, arg5:uint):void;

        function sendMultiplayerData(arg1:String, arg2:uint, arg3:XML):void;
    }
}


//          package marketManager
//            class IMarketManager
package mgs.aurora.common.interfaces.marketManager 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.strings.*;
    
    public interface IMarketManager extends flash.events.IEventDispatcher
    {
        function setup(arg1:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler, arg2:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg3:mgs.aurora.common.interfaces.strings.ILanguageStrings, arg4:flash.utils.Dictionary):void;

        function systemLoaded(arg1:Object):void;

        function showLoginDialog(arg1:Object):void;

        function sendLoginRequest(arg1:Object):void;

        function loggedInSuccessFull(arg1:Object):void;

        function loadGameModule(arg1:Object):void;

        function exitGameModule(arg1:Object):void;

        function showErrorDialog(arg1:Object):void;

        function casinoTimeout(arg1:Object):void;

        function bankButtonPressed(arg1:Object):void;

        function returnFromBank(arg1:Object):void;

        function helpButtonPressed(arg1:Object):void;

        function balanceUpdated(arg1:Object):void;

        function sendCloseGameLogoutRequest(arg1:Object):void;
    }
}


//          package module
//            class IModuleMain
package mgs.aurora.common.interfaces.module 
{
    import flash.display.*;
    import mgs.aurora.api.interfaces.*;
    
    public interface IModuleMain
    {
        function setup(arg1:mgs.aurora.api.interfaces.IAuroraApi, arg2:flash.display.DisplayObjectContainer):void;
    }
}


//          package multiplayer
//            class IMPF
package mgs.aurora.common.interfaces.multiplayer 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.magneto.*;
    
    public interface IMPF extends flash.events.IEventDispatcher
    {
        function setup(arg1:XML, arg2:mgs.aurora.common.interfaces.magneto.IMagnetoPacketSender, arg3:Object, arg4:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler, arg5:XML, arg6:XML, arg7:flash.utils.Dictionary):void;

        function attemptLobbyConnection():void;

        function attemptRouterConnection():void;

        function attemptConnections():void;

        function cancelAvatar(arg1:String):void;

        function fetchAvatarMetadata(arg1:String):void;

        function loadAvatar(arg1:String):void;

        function sendPacket(arg1:String, arg2:uint, arg3:XML):void;

        function closeConnection():void;

        function attemptRegistration():void;
    }
}


//          package raptorSessions
//            class ILegacyRaptorSession
package mgs.aurora.common.interfaces.raptorSessions 
{
    public interface ILegacyRaptorSession extends mgs.aurora.common.interfaces.raptorSessions.IRaptorSession
    {
        function attemptChangePassword(arg1:Object):void;
    }
}


//            class IRaptorSession
package mgs.aurora.common.interfaces.raptorSessions 
{
    import flash.events.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    
    public interface IRaptorSession extends flash.events.IEventDispatcher
    {
        function initialize(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler):void;

        function attemptLogin(arg1:Object):void;
    }
}


//            class ISgiRaptorSession
package mgs.aurora.common.interfaces.raptorSessions 
{
    public interface ISgiRaptorSession extends mgs.aurora.common.interfaces.raptorSessions.IRaptorSession
    {
        function doLogout():void;
    }
}


//            class IUPEFullLoginRaptorSession
package mgs.aurora.common.interfaces.raptorSessions 
{
    public interface IUPEFullLoginRaptorSession extends mgs.aurora.common.interfaces.raptorSessions.IRaptorSession
    {
    }
}


//            class IUPEInterimLoginRaptorSession
package mgs.aurora.common.interfaces.raptorSessions 
{
    public interface IUPEInterimLoginRaptorSession extends mgs.aurora.common.interfaces.raptorSessions.IRaptorSession
    {
    }
}


//            class IVanguardRaptorSession
package mgs.aurora.common.interfaces.raptorSessions 
{
    public interface IVanguardRaptorSession extends mgs.aurora.common.interfaces.raptorSessions.IRaptorSession
    {
        function switchUserType(arg1:uint):void;
    }
}


//          package sounds
//            class ISoundGroup
package mgs.aurora.common.interfaces.sounds 
{
    import flash.events.*;
    import flash.media.*;
    
    public interface ISoundGroup extends flash.events.IEventDispatcher
    {
        function play(arg1:String, arg2:Number=0, arg3:int=0, arg4:flash.media.SoundTransform=null):void;

        function stop(arg1:String):void;

        function stopAll():void;

        function remove(arg1:Array):void;

        function removeAll():void;

        function setChannelVolume(arg1:Array, arg2:Number):void;

        function setChannelPan(arg1:Array, arg2:Number):void;

        function setChannelLeftToLeft(arg1:Array, arg2:Number):void;

        function setChannelLeftToRight(arg1:Array, arg2:Number):void;

        function setChannelRightToRight(arg1:Array, arg2:Number):void;

        function setChannelRightToLeft(arg1:Array, arg2:Number):void;

        function setChannelMute(arg1:Array, arg2:Boolean):void;

        function getChannelMute(arg1:Array):Boolean;

        function setChannelVolumeOverTime(arg1:Array, arg2:Number, arg3:Number, arg4:Number):void;

        function setChannelPanOverTime(arg1:Array, arg2:Number, arg3:Number, arg4:Number):void;

        function stopVolumeOverTime(arg1:String):void;

        function stopPanOverTime(arg1:String):void;

        function set mute(arg1:Boolean):void;

        function get mute():Boolean;

        function set volume(arg1:Number):void;

        function get volume():Number;

        function getChannel(arg1:String):flash.media.SoundChannel;
    }
}


//            class ISounds
package mgs.aurora.common.interfaces.sounds 
{
    import flash.display.*;
    import flash.events.*;
    import flash.media.*;
    
    public interface ISounds extends flash.events.IEventDispatcher
    {
        function add(arg1:flash.display.LoaderInfo, arg2:Array, arg3:String):mgs.aurora.common.interfaces.sounds.ISoundGroup;

        function play(arg1:String, arg2:String, arg3:Number=0, arg4:int=0, arg5:flash.media.SoundTransform=null):void;

        function stop(arg1:String, arg2:String):void;

        function stopAll(arg1:String):void;

        function remove(arg1:Array, arg2:String):void;

        function removeAll(arg1:String):void;

        function setChannelVolume(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelPan(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelLeftToLeft(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelLeftToRight(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelRightToRight(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelRightToLeft(arg1:Array, arg2:Number, arg3:String):void;

        function setChannelMute(arg1:Array, arg2:Boolean, arg3:String):void;

        function getChannelMute(arg1:Array, arg2:String):Boolean;

        function set mute(arg1:Boolean):void;

        function get mute():Boolean;

        function set globalVolume(arg1:Number):void;

        function get globalVolume():Number;

        function set globalPan(arg1:Number):void;

        function get globalPan():Number;

        function set globalLeftToLeft(arg1:Number):void;

        function get globalLeftToLeft():Number;

        function set globalLeftToRight(arg1:Number):void;

        function get globalLeftToRight():Number;

        function set globalRightToRight(arg1:Number):void;

        function get globalRightToRight():Number;

        function set globalRightToLeft(arg1:Number):void;

        function get globalRightToLeft():Number;

        function setChannelVolumeOverTime(arg1:Array, arg2:String, arg3:Number, arg4:Number, arg5:Number):void;

        function setChannelPanOverTime(arg1:Array, arg2:String, arg3:Number, arg4:Number, arg5:Number):void;

        function stopVolumeOverTime(arg1:String, arg2:String):void;

        function stopPanOverTime(arg1:String, arg2:String):void;

        function group(arg1:String):mgs.aurora.common.interfaces.sounds.ISoundGroup;

        function getChannel(arg1:String):flash.media.SoundChannel;
    }
}


//          package strings
//            class ILanguageStrings
package mgs.aurora.common.interfaces.strings 
{
    public interface ILanguageStrings
    {
        function getString(arg1:String):String;
    }
}


//          package vpb
//            class IIsGameValidParameters
package mgs.aurora.common.interfaces.vpb 
{
    public interface IIsGameValidParameters
    {
        function get moduleID():Number;

        function get clientID():Number;
    }
}


//            class IVPB
package mgs.aurora.common.interfaces.vpb 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.sounds.*;
    
    public interface IVPB extends flash.events.IEventDispatcher
    {
        function setup(arg1:XML, arg2:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg3:Object, arg4:mgs.aurora.common.interfaces.sounds.ISounds, arg5:flash.utils.Dictionary):void;

        function enable():void;

        function disable():void;

        function setArtAsset(arg1:flash.display.LoaderInfo):void;

        function setDialogParent(arg1:flash.display.DisplayObjectContainer):void;

        function setFrameType(arg1:String):void;

        function gameIsValid(arg1:Boolean):void;

        function webAppAvailable(arg1:Boolean):void;

        function webAppLaunchDetails(arg1:flash.utils.Dictionary):void;
    }
}


//          class ICore
package mgs.aurora.common.interfaces 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.orbis.*;
    import mgs.aurora.common.scale.*;
    
    public interface ICore
    {
        function setup(arg1:mgs.aurora.common.interfaces.IExternalData, arg2:flash.display.Sprite, arg3:String, arg4:mgs.aurora.common.orbis.TopBarController, arg5:mgs.aurora.common.scale.ScaleManager):void;

        function updateExternalData(arg1:Object):void;

        function dispose(arg1:flash.events.Event=null):void;
    }
}


//          class IExternalData
package mgs.aurora.common.interfaces 
{
    public interface IExternalData
    {
        function refresh():void;

        function clear():void;

        function setValue(arg1:String, arg2:String):void;

        function getValue(arg1:String, arg2:String=null):String;

        function removeValue(arg1:String):void;
    }
}


//        package net
//          class URLLoadRequestInfo
package mgs.aurora.common.net 
{
    import flash.net.*;
    import mgs.aurora.common.interfaces.loader.*;
    
    public class URLLoadRequestInfo extends Object implements mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo
    {
        public function URLLoadRequestInfo(arg1:String, arg2:String, arg3:String, arg4:*=null, arg5:flash.net.URLRequestHeader=null, arg6:flash.net.URLVariables=null, arg7:String="GET", arg8:String="text", arg9:Object=null)
        {
            super();
            this._id = arg1;
            this._url = arg2;
            this._type = arg3;
            this._context = arg4;
            this._requestHeaders = arg5;
            this._variables = arg6;
            this._method = arg7;
            this._loaderDataFormat = arg8;
            this._fallback = new Object();
            if (arg9 != null) 
            {
                this._fallback = arg9;
            }
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get url():String
        {
            return this._url;
        }

        public function get type():String
        {
            return this._type;
        }

        public function get context():*
        {
            return this._context;
        }

        public function get requestHeaders():flash.net.URLRequestHeader
        {
            return this._requestHeaders;
        }

        public function get variables():flash.net.URLVariables
        {
            return this._variables;
        }

        public function get method():String
        {
            return this._method;
        }

        public function get loaderDataFormat():String
        {
            return this._loaderDataFormat;
        }

        public function get fallback():Object
        {
            return this._fallback;
        }

        protected var _id:String;

        protected var _url:String;

        protected var _type:String;

        protected var _context:*;

        protected var _requestHeaders:flash.net.URLRequestHeader;

        protected var _variables:flash.net.URLVariables;

        protected var _method:String;

        protected var _loaderDataFormat:String;

        protected var _fallback:Object;
    }
}


//        package orbis
//          class TopBarController
package mgs.aurora.common.orbis 
{
    import com.orbis.controller.*;
    import com.orbis.ui.topbar.*;
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.net.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.events.sgi.*;
    import mgs.aurora.common.reflection.*;
    
    public class TopBarController extends flash.events.EventDispatcher implements com.orbis.controller.IController
    {
        public function TopBarController()
        {
            super();
            return;
        }

        public function getQuality():String
        {
            return this._settings["quality"];
        }

        public function setGameVersion(arg1:String):void
        {
            return;
        }

        public function setPreloaderVersion(arg1:String):void
        {
            return;
        }

        public function setTopbarVersion(arg1:String):void
        {
            return;
        }

        public function onBonusOKClicked():void
        {
            return;
        }

        public function errorOKClicked():void
        {
            return;
        }

        public function set gameName(arg1:String):void
        {
            this._gameName = arg1;
            return;
        }

        public function login():void
        {
            flash.external.ExternalInterface.call("openGameLogin");
            return;
        }

        public function help():void
        {
            flash.external.ExternalInterface.call("games_help");
            return;
        }

        public function rules():void
        {
            flash.external.ExternalInterface.call("games_rules");
            return;
        }

        public function initSettings(arg1:Object):void
        {
            this._settings = new Array();
            this._skip = arg1.skip == "true";
            this._token = arg1.orbistoken;
            this.setLoggedIn(arg1.loggedIn == "true");
            this.getSavedSoundValue(arg1.sPath);
            this.setQuality(arg1.quality);
            this.loadAboutMC();
            this.setRealPlay(arg1.playMode == mgs.aurora.common.enums.PreloaderConstants.REAL_PLAY);
            return;
        }

        public function setupReflection(arg1:XML):void
        {
            this._reflector = new mgs.aurora.common.reflection.TopBarReflector(this, arg1);
            return;
        }

        public function get token():String
        {
            return this._token;
        }

        public function bank():void
        {
            flash.external.ExternalInterface.call("games_bank", this._gameName);
            return;
        }

        public function get About():flash.display.DisplayObject
        {
            return this._about;
        }

        public function loadGameLogo(arg1:String):void
        {
            this._topbar.setGameLogo(arg1);
            return;
        }

        public function loadAboutMC():void
        {
            this._loader = new flash.display.Loader();
            this._loader.contentLoaderInfo.addEventListener(flash.events.Event.INIT, this.onAboutLoaded);
            this._loader.load(new flash.net.URLRequest("sgi/About.swf"));
            return;
        }

        public function onAboutLoaded(arg1:flash.events.Event):void
        {
            this._about = flash.display.DisplayObject(this._loader.content);
            return;
        }

        public function checkforSkip():void
        {
            if (this._skip) 
            {
                if (this.isRealPlay()) 
                {
                    this.realPlayClicked();
                }
                else 
                {
                    this.demoPlayClicked();
                }
            }
            else 
            {
                this._topbar.showRealDemoDialogs();
            }
            return;
        }

        public function getSavedSoundValue(arg1:String):void
        {
            var path:String;
            var local:flash.net.SharedObject;
            var tempSound:Boolean;

            var loc1:*;
            local = null;
            tempSound = false;
            path = arg1;
            try 
            {
                local = flash.net.SharedObject.getLocal("Sound", path);
                tempSound = local.data["muted"] == "1";
            }
            catch (err:Error)
            {
                tempSound = false;
            }
            this._settings["soundOn"] = !tempSound;
            this.setSound(this.soundOn());
            return;
        }

        public function setTopbar(arg1:com.orbis.ui.topbar.ITopBar):void
        {
            this._topbar = arg1;
            return;
        }

        public function getTopbar():com.orbis.ui.topbar.ITopBar
        {
            return this._topbar;
        }

        public function setWinValue(arg1:String):void
        {
            this._topbar.showPaid(arg1);
            return;
        }

        public function setBetValue(arg1:String):void
        {
            this._topbar.showStake(arg1);
            return;
        }

        public function setBalance(arg1:String):void
        {
            this._topbar.showBalance(arg1);
            return;
        }

        public function setBonusPercent(arg1:Number):void
        {
            this._topbar.setBonusPercent(arg1);
            return;
        }

        public function setFreeBets(arg1:String):void
        {
            this._topbar.showFreeBets(arg1);
            return;
        }

        public function setExternalOperatorInfo(arg1:XML):void
        {
            if (arg1 && this._reflector) 
            {
                this._reflector.execute(arg1);
            }
            return;
        }

        public function playForReal():void
        {
            delete this._settings["realPlay"];
            this._topbar.updateSetting("realPlay", undefined);
            if (this.isLoggedIn()) 
            {
                this._topbar.showRealDemoDialogs();
                this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.PLAYFORREAL));
            }
            else 
            {
                this.login();
            }
            this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.UILOADED));
            return;
        }

        public function realPlayClicked():void
        {
            if (this.isLoggedIn()) 
            {
                this._topbar.hideDemoRealDialogs();
                this.setRealPlay(true);
                this._topbar.showFreeBets("");
                this._topbar.setBonusPercent(0);
                this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.REAL_PLAY));
            }
            else 
            {
                this.login();
            }
            return;
        }

        public function demoPlayClicked():void
        {
            this._topbar.hideDemoRealDialogs();
            this.setRealPlay(false);
            this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.DEMO_PLAY));
            return;
        }

        public function UILoaded():void
        {
            this._topbar.showBalance("");
            this._topbar.showStake("");
            this._topbar.showFreeBets("");
            this._topbar.hideDemoRealDialogs();
            this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.UILOADED));
            return;
        }

        public function cycleQuality():void
        {
            var loc2:*=null;
            var loc1:*="";
            if (loc2 != "LOW") 
            {
                if (loc2 != "MEDIUM") 
                {
                    if (loc2 != "HIGH") 
                    {
                        loc2 = "LOW";
                        loc1 = "Quality Low";
                    }
                    else 
                    {
                        loc2 = "BEST";
                        loc1 = "Quality Best";
                    }
                }
                else 
                {
                    loc2 = "HIGH";
                    loc1 = "Quality High";
                }
            }
            else 
            {
                loc2 = "MEDIUM";
                loc1 = "Quality Mid";
            }
            this._settings["quality"] = loc2;
            return;
        }

        public function showAbout(arg1:Boolean):void
        {
            if (arg1) 
            {
                this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.SHOWABOUT));
            }
            else 
            {
                this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.HIDEABOUT));
            }
            return;
        }

        public function showError(arg1:String, arg2:Boolean, arg3:String):void
        {
            return;
        }

        public function isRealPlay():Boolean
        {
            return this._settings["realPlay"];
        }

        public function soundOn():Boolean
        {
            return this._settings["soundOn"];
        }

        public function isTurbo():Boolean
        {
            return this._settings["turboOn"];
        }

        public function turboOn():Boolean
        {
            return false;
        }

        public function isLoggedIn():Boolean
        {
            return this._settings["isLoggedIn"];
        }

        public function toggleSound():void
        {
            this._settings["soundOn"] = !this._settings["soundOn"];
            this.dispatchEvent(new mgs.aurora.common.events.sgi.SgiEvent(mgs.aurora.common.events.sgi.SgiEvent.CHANGESOUND));
            return;
        }

        public function toggleTurbo():void
        {
            this._settings["turboOn"] = !this._settings["turboOn"];
            return;
        }

        public function setLoggedIn(arg1:Boolean):void
        {
            this._settings["isLoggedIn"] = arg1;
            this._topbar.setLoggedIn(arg1);
            return;
        }

        public function setRealPlay(arg1:Boolean):void
        {
            this._settings["realPlay"] = arg1;
            this._topbar.setRealPlay(arg1);
            return;
        }

        public function getSettings():void
        {
            this._topbar.getSettings();
            return;
        }

        public function setSound(arg1:Boolean):void
        {
            this._settings["soundOn"] = arg1;
            this._topbar.setSound(arg1);
            return;
        }

        public function setTurbo(arg1:Boolean):void
        {
            this._settings["turboOn"] = arg1;
            this._topbar.setTurbo(arg1);
            return;
        }

        public function setQuality(arg1:String):void
        {
            this._settings["quality"] = arg1;
            this._topbar.updateSetting("quality", arg1);
            return;
        }

        internal var _topbar:com.orbis.ui.topbar.ITopBar;

        internal var _isLoginRequired:Boolean;

        internal var _settings:Array;

        internal var _game:flash.display.MovieClip;

        internal var _token:String="";

        internal var _gameName:String="";

        internal var _about:flash.display.DisplayObject;

        internal var _loader:flash.display.Loader;

        internal var _reflector:mgs.aurora.common.reflection.TopBarReflector;

        internal var _skip:Boolean;
    }
}


//        package pipes
//          class CommsPipeMessages
package mgs.aurora.common.pipes 
{
    public class CommsPipeMessages extends Object
    {
        public function CommsPipeMessages()
        {
            super();
            return;
        }

        public static const NAME:String="Comms";

        public static const SETUP:String=NAME + "/pipes/setup";

        public static const SETUP_COMPLETE:String=NAME + "/pipes/setup_complete";

        public static const ERROR:String=NAME + "/pipes/error";

        public static const SEND_PACKET:String=NAME + "/pipes/send_packet";

        public static const PACKET_SENT:String=NAME + "/pipes/packet_sent";

        public static const PACKET_RECEIVED:String=NAME + "/pipes/packet_received";

        public static const START_SESSION_TIMEOUT:String=NAME + "/pipes/start_session_timeout";

        public static const SESSION_TIMEOUT_STARTED:String=NAME + "/pipes/session_timeout_started";

        public static const STOP_SESSION_TIMEOUT:String=NAME + "/pipes/stop_session_timeout";

        public static const SESSION_TIMEOUT_STOPPED:String=NAME + "/pipes/session_timeout_stopped";

        public static const SESSION_TIMED_OUT:String=NAME + "/pipes/session_timed_out";

        public static const PACKET_TIMED_OUT:String=NAME + "/pipes/packet_timed_out";

        public static const SET_CLIENT_LANG:String=NAME + "/pipes/set_client_lang";

        public static const SET_SESSION_ID:String=NAME + "/pipes/set_session_id";

        public static const CLEAR_PENDING_PACKET_QUEUE:String=NAME + "/pipes/clear_pending_packet_queue";
    }
}


//          class FramesBuilderPipeMessages
package mgs.aurora.common.pipes 
{
    public class FramesBuilderPipeMessages extends Object
    {
        public function FramesBuilderPipeMessages()
        {
            super();
            return;
        }

        public static const NAME:String="FramesBuilderPipeMessages";

        public static const CONTROLS_BUILDER_CONNECT:String=NAME + "/message/Controls_Builder_Connect";

        public static const CONTROLS_BUILDER_DISCONNECT:String=NAME + "/message/Controls_Builder_Disconnect";

        public static const SET_ART:String=NAME + "/message/Set_Art";

        public static const SET_CONFIG:String=NAME + "/message/Set_Config";

        public static const SET_FONT:String=NAME + "/message/Set_Font";

        public static const SET_FRAME_DEFINITIONS:String=NAME + "/message/Set_Frame_Definitions";

        public static const GET_FRAME:String=NAME + "/message/Get_Frame";

        public static const CREATE_FRAMES:String=NAME + "/message/Create_Frames";

        public static const FRAME_CREATED:String=NAME + "/message/frame_created";
    }
}


//          class LoginPipeMessages
package mgs.aurora.common.pipes 
{
    public class LoginPipeMessages extends Object
    {
        public function LoginPipeMessages()
        {
            super();
            return;
        }

        public static const NAME:String="LegacyLogin";

        public static const ATTEMPT_LOGIN:String=NAME + "/pipes/attempt_login";

        public static const LOGIN_FAILED:String=NAME + "/pipes/login_failed";

        public static const LOGIN_SUCCESSFULL:String=NAME + "/pipes/login_successfull";

        public static const ATTEMPT_CHANGE_PASSWORD:String=NAME + "/pipes/change_password";

        public static const CHANGE_PASSWORD_FAILED:String=NAME + "/pipes/change_password_failed";

        public static const CHANGE_PASSWORD_SUCCESSFULL:String=NAME + "/pipes/change_password_successfull";

        public static const PACKET_REQUEST:String=NAME + "/pipes/packet_request";

        public static const PACKET_RESPONSE:String=NAME + "/pipes/packet_response";

        public static const SET_XMAN_SESSIONID:String=NAME + "/pipes/set_xman_sessionid";
    }
}


//          class PipeNames
package mgs.aurora.common.pipes 
{
    public class PipeNames extends Object
    {
        public function PipeNames()
        {
            super();
            return;
        }

        internal static const NAME:String="pipe_names";

        public static const TO_AURORA_CORE:String=NAME + "/pipe/to_aurora_core";

        public static const FROM_AURORA_CORE:String=NAME + "/pipe/from_aurora_core";

        public static const TO_AURORA_COMMS:String=NAME + "/pipe/to_aurora_comms";

        public static const FROM_AURORA_COMMS:String=NAME + "/pipe/from_aurora_comms";

        public static const TO_AURORA_SOUNDS:String=NAME + "/pipe/to_aurora_sounds";

        public static const FROM_AURORA_SOUNDS:String=NAME + "/pipe/from_aurora_sounds";

        public static const TO_AURORA_VPB:String=NAME + "/pipe/to_aurora_vpb";

        public static const FROM_AURORA_VPB:String=NAME + "/pipe/from_aurora_vpb";

        public static const TO_AURORA_CONTROLS_BUILDER:String=NAME + "/pipe/to_aurora_controls_builder";

        public static const FROM_AURORA_CONTROLS_BUILDER:String=NAME + "/pipe/from_aurora_controls_builder";

        public static const TO_AURORA_LEGACY_LOGIN:String=NAME + "/pipe/to_aurora_legacy_login";

        public static const FROM_AURORA_LEGACY_LOGIN:String=NAME + "/pipe/from_aurora_legacy_login";

        public static const TO_FRAMES_BUILDER:String="/pipe/to_aurora_frames_builder";

        public static const FROM_FRAMES_BUILDER:String="/pipe/from_aurora_frames_builder";

        public static const TO_AURORA_GAME_MODULE:String="/pipe/to_game_aurora_module";

        public static const FROM_AURORA_GAME_MODULE:String="/pipe/from_game_aurora_module";
    }
}


//          class VPBMessages
package mgs.aurora.common.pipes 
{
    public class VPBMessages extends Object
    {
        public function VPBMessages()
        {
            super();
            return;
        }

        public static const NAME:String="VPB";

        public static const SETUP:String=NAME + "/pipes/setup";

        public static const ENABLE:String=NAME + "/pipes/enable";

        public static const DISABLE:String=NAME + "/pipes/disable";

        public static const PACKET_RECEIVED:String=NAME + "/pipes/packet_received";

        public static const GAME_CHECK_COMPLETE:String=NAME + "/pipes/game_check_complete";

        public static const SET_DIALOG_PARENT:String=NAME + "/pipes/set_dialog_parent";

        public static const SET_ART_ASSET:String=NAME + "/pipes/set_art_asset";

        public static const SET_FRAME_TYPE:String=NAME + "/pipes/set_frame_art";

        public static const WEB_APP_CHECK_COMPLETE:String=NAME + "/pipes/web_app_check_complete";

        public static const ACTION_NOTIFICATION:String=NAME + "/pipes/action_notification";

        public static const SEND_PACKET:String=NAME + "/pipes/send_packet";

        public static const SETUP_COMPLETE:String=NAME + "/pipes/setup_complete";

        public static const ERROR:String=NAME + "/pipes/error";

        public static const GAME_CHECK:String=NAME + "/pipes/game_check";

        public static const WEB_APP_CHECK:String=NAME + "/pipes/web_app_check";
    }
}


//        package reflection
//          class TopBarReflector
package mgs.aurora.common.reflection 
{
    public class TopBarReflector extends Object
    {
        public function TopBarReflector(arg1:Object, arg2:XML)
        {
            super();
            this._targetInstance = arg1;
            this._rules = arg2;
            return;
        }

        public function execute(arg1:XML):void
        {
            var xmlFromGame:XML;
            var vaildReflection:Boolean;
            var reflectionList:XMLList;
            var n:int;
            var parameterList:XMLList;
            var forReflection:Object;
            var parameterIndex:int;
            var i:int;
            var value:XMLList;

            var loc1:*;
            vaildReflection = false;
            reflectionList = null;
            n = 0;
            parameterList = null;
            forReflection = null;
            parameterIndex = 0;
            i = 0;
            value = null;
            xmlFromGame = arg1;
            try 
            {
                reflectionList = this._rules.reflection;
                n = 0;
                while (n < reflectionList.length()) 
                {
                    vaildReflection = true;
                    parameterList = reflectionList[n].parameter;
                    forReflection = new Object();
                    forReflection.method = reflectionList[n].@methodName;
                    forReflection.parameters = new Array();
                    parameterIndex = 0;
                    i = 0;
                    while (i < parameterList.length()) 
                    {
                        value = this.existsInXmlFromGame(xmlFromGame, parameterList[i].@xmlPath);
                        if (value) 
                        {
                            if (value.length() > 0) 
                            {
                                loc2 = parameterList[i].@type.toLowerCase();
                                switch (loc2) 
                                {
                                    case "int":
                                    {
                                        forReflection.parameters[parameterIndex] = int(value);
                                        break;
                                    }
                                    case "uint":
                                    {
                                        forReflection.parameters[parameterIndex] = uint(value);
                                        break;
                                    }
                                    case "number":
                                    {
                                        forReflection.parameters[parameterIndex] = Number(value);
                                        break;
                                    }
                                    case "boolean":
                                    {
                                        forReflection.parameters[parameterIndex] = this.stringToBoolean(String(value));
                                        break;
                                    }
                                    default:
                                    {
                                        forReflection.parameters[parameterIndex] = String(value);
                                        break;
                                    }
                                }
                                ++parameterIndex;
                            }
                            else 
                            {
                                vaildReflection = false;
                            }
                        }
                        else 
                        {
                            vaildReflection = false;
                        }
                        ++i;
                    }
                    if (vaildReflection) 
                    {
                        Debugger.trace("TopBarReflector::execute ", "SYSTEM - TopBarReflector", forReflection);
                        this._targetInstance[forReflection.method].apply(null, forReflection.parameters);
                    }
                    else 
                    {
                        Debugger.trace("TopBarReflector::execute reflection fail, parameters for method " + forReflection.method + " not found", "SYSTEM - TopBarReflector", forReflection);
                    }
                    ++n;
                }
            }
            catch (e:Error)
            {
                Debugger.trace("TopBarReflector::execute error", "SYSTEM - TopBarReflector", e);
            }
            return;
        }

        internal function existsInXmlFromGame(arg1:XML, arg2:String):XMLList
        {
            var loc1:*=arg2.split(".");
            var loc2:*=new XMLList(arg1);
            var loc3:*=1;
            while (loc2 != null) 
            {
                if (loc3 >= loc1.length) 
                {
                    break;
                }
                loc2 = loc2[loc1[loc3]];
                ++loc3;
            }
            return loc2;
        }

        internal function stringToBoolean(arg1:String):Boolean
        {
            if (arg1 == null) 
            {
                return false;
            }
            if (arg1.toLowerCase() == "true" || arg1 == "1") 
            {
                return true;
            }
            return false;
        }

        internal var _rules:XML;

        internal var _targetInstance:Object;
    }
}


//        package scale
//          class ScaleManager
package mgs.aurora.common.scale 
{
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.*;
    
    public class ScaleManager extends Object
    {
        public function ScaleManager(arg1:flash.display.Stage, arg2:Boolean, arg3:Boolean=false)
        {
            super();
            this._stage = arg1;
            this._resize = arg2;
            this._allowLocking = arg3;
            this._preloadeWSMove = mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH / 2 - mgs.aurora.common.enums.StageSizeConstants.STANDARD_WIDTH / 2;
            if (arg2) 
            {
                this._stage.addEventListener(flash.events.Event.RESIZE, this.onScale);
                this.onScale(new flash.events.Event(flash.events.Event.RESIZE));
            }
            return;
        }

        public function onScale(arg1:flash.events.Event):void
        {
            var loc4:*=NaN;
            var loc5:*=NaN;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=NaN;
            var loc13:*=NaN;
            var loc14:*=NaN;
            var loc15:*=NaN;
            var loc16:*=NaN;
            var loc17:*=NaN;
            var loc18:*=false;
            var loc19:*=false;
            var loc20:*=null;
            var loc21:*=NaN;
            var loc22:*=NaN;
            var loc23:*=NaN;
            var loc24:*=NaN;
            var loc25:*=NaN;
            var loc26:*=NaN;
            var loc27:*=NaN;
            var loc28:*=NaN;
            if (!this._resize) 
            {
                return;
            }
            var loc1:*=this._stage.stageWidth;
            var loc2:*=this._stage.stageHeight;
            var loc3:*=0;
            if (this._allowLocking) 
            {
                if (loc1 > this._initWindowWidth || loc2 > this._initWindowHeight) 
                {
                    loc11 = (loc10 = flash.external.ExternalInterface.call("getWindowSize")).split(";");
                    if (!(loc1 == loc11[0]) && loc11[0] > this._initWindowWidth || !(loc2 == loc11[1]) && loc11[1] > this._initWindowHeight) 
                    {
                        loc12 = loc1 / loc11[0];
                        loc13 = loc2 / loc11[1];
                        loc14 = this._initWindowWidth * loc12;
                        loc15 = this._initWindowHeight * loc12;
                        loc16 = this._initWindowWidth * loc13;
                        loc17 = this._initWindowHeight * loc13;
                        loc18 = loc15 <= loc2 && loc14 <= loc1;
                        loc19 = loc17 <= loc2 && loc16 <= loc1;
                        if (loc18 && loc19) 
                        {
                            loc3 = loc12;
                        }
                        else if (!loc18 && loc19) 
                        {
                            loc3 = loc13;
                        }
                        else if (loc18 && !loc19) 
                        {
                            loc3 = loc13;
                        }
                    }
                }
            }
            var loc6:*=loc1 / this._initWindowWidth;
            var loc7:*=loc2 / this._initWindowHeight;
            var loc8:*=loc6 >= loc7 ? loc7 : loc6;
            var loc9:*=false;
            if (loc8 > 1 && this._allowLocking) 
            {
                loc8 = (loc9 = loc3 >= 1 && loc3 < loc8) ? 1 * loc3 : 1;
            }
            if (!(this._core == null) || !(this._preloaderArt == null)) 
            {
                (loc20 = this._core == null ? flash.display.DisplayObject(this._preloaderArt) : flash.display.DisplayObject(this._core)).scaleX = loc8;
                loc20.scaleY = loc8;
                loc21 = this._initWindowWidth * loc8;
                loc22 = this._initWindowHeight * loc8;
                if (loc1 > loc21) 
                {
                    loc23 = loc1 / 2;
                    loc24 = loc21 / 2;
                    loc25 = loc23 - loc24;
                    loc20.x = this.widescreen && this._core == null ? this._preloadeWSMove * loc8 + loc25 : loc25;
                }
                else 
                {
                    loc20.x = this.widescreen && this._core == null ? this._preloadeWSMove * loc8 : 0;
                }
                if (loc2 > loc22) 
                {
                    loc26 = loc2 / 2;
                    loc27 = loc22 / 2;
                    loc28 = loc26 - loc27;
                    loc20.y = loc28;
                }
                else 
                {
                    loc20.y = 0;
                }
            }
            return;
        }

        public function resetPreloaderArt():void
        {
            if (!this._resize) 
            {
                return;
            }
            this._preloaderArt.scaleX = 1;
            this._preloaderArt.scaleY = 1;
            this._preloaderArt.y = 0;
            if (this.widescreen) 
            {
                this._preloaderArt.x = this._preloadeWSMove;
            }
            else 
            {
                this._preloaderArt.x = 0;
            }
            return;
        }

        public function set core(arg1:mgs.aurora.common.interfaces.ICore):void
        {
            this._core = arg1;
            this.resetPreloaderArt();
            this.onScale(new flash.events.Event(flash.events.Event.RESIZE));
            return;
        }

        public function set preloaderArt(arg1:flash.display.Sprite):void
        {
            this._preloaderArt = arg1;
            this.onScale(new flash.events.Event(flash.events.Event.RESIZE));
            return;
        }

        public function set initWindowWidth(arg1:Number):void
        {
            this._initWindowWidth = arg1;
            return;
        }

        public function get initWindowWidth():Number
        {
            return this._initWindowWidth;
        }

        public function set initWindowHeight(arg1:Number):void
        {
            this._initWindowHeight = arg1;
            return;
        }

        public function get initWindowHeight():Number
        {
            return this._initWindowHeight;
        }

        public function get widescreen():Boolean
        {
            return this._widescreen;
        }

        public function set widescreen(arg1:Boolean):void
        {
            this._widescreen = arg1;
            return;
        }

        public function reSize():void
        {
            var loc1:*="";
            if (this._resize == false && !(this._stage == null) && (!(this._initWindowWidth == 1024) || !(this._initWindowHeight == 768))) 
            {
                this._resize = true;
                this._stage.align = flash.display.StageAlign.TOP_LEFT;
                this._stage.scaleMode = flash.display.StageScaleMode.NO_SCALE;
                if (this._stage.hasEventListener(flash.events.Event.RESIZE)) 
                {
                    this._stage.removeEventListener(flash.events.Event.RESIZE, this.onScale);
                    this._stage.addEventListener(flash.events.Event.RESIZE, this.onScale);
                }
                else 
                {
                    this._stage.addEventListener(flash.events.Event.RESIZE, this.onScale);
                }
            }
            else if (this._resize == true && !(this._stage == null) && this._initWindowWidth == 1024 && this._initWindowHeight == 768) 
            {
                this._stage.removeEventListener(flash.events.Event.RESIZE, this.onScale);
                this._resize = false;
                this._stage.align = "";
                this._stage.scaleMode = flash.display.StageScaleMode.SHOW_ALL;
                this.resetSize();
            }
            if (this._resize) 
            {
                this.onScale(new flash.events.Event(flash.events.Event.RESIZE));
            }
            return;
        }

        public function resetSize():void
        {
            flash.display.DisplayObject(this._core).scaleX = 1;
            flash.display.DisplayObject(this._core).scaleY = 1;
            flash.display.DisplayObject(this._core).x = 0;
            flash.display.DisplayObject(this._core).y = 0;
            return;
        }

        internal var _stage:flash.display.Stage;

        internal var _resize:Boolean;

        internal var _allowLocking:Boolean;

        internal var _widescreen:Boolean;

        internal var _initWindowWidth:Number=1024;

        internal var _initWindowHeight:Number=768;

        internal var _preloadeWSMove:Number;

        internal var _core:mgs.aurora.common.interfaces.ICore;

        internal var _preloaderArt:flash.display.Sprite;
    }
}


//        package utilities
//          class BalanceUtils
package mgs.aurora.common.utilities 
{
    import __AS3__.vec.*;
    import mgs.aurora.common.vo.currency.*;
    
    public class BalanceUtils extends Object
    {
        public function BalanceUtils()
        {
            super();
            this._abbreviateFormats = new Vector.<mgs.aurora.common.vo.currency.AbbreviationFormat>();
            return;
        }

        public function addAbbreviationFormat(arg1:mgs.aurora.common.vo.currency.AbbreviationFormat):void
        {
            this._abbreviateFormats.push(arg1);
            this._abbreviateFormats.sort(this.compare);
            return;
        }

        internal function compare(arg1:mgs.aurora.common.vo.currency.AbbreviationFormat, arg2:mgs.aurora.common.vo.currency.AbbreviationFormat):Number
        {
            return arg2.value - arg1.value;
        }

        public function get allowMultipler():Boolean
        {
            return this._allowMultipler;
        }

        public function set allowMultipler(arg1:Boolean):void
        {
            this._allowMultipler = arg1;
            return;
        }

        public function get allowAbbreviate():Boolean
        {
            return this._allowAbbreviate;
        }

        public function set allowAbbreviate(arg1:Boolean):void
        {
            this._allowAbbreviate = arg1;
            return;
        }

        public function get multiplier():uint
        {
            return this._multiplier;
        }

        public function set multiplier(arg1:uint):void
        {
            this._multiplier = arg1;
            return;
        }

        internal function abbreviateValue(arg1:Number):String
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=NaN;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=this._abbreviateFormats;
            for each (loc2 in loc7) 
            {
                if (!(arg1 >= loc2.value)) 
                {
                    continue;
                }
                loc3 = arg1 / loc2.value;
                if (!((loc5 = (loc4 = String(loc3).split(".")).length != 2 ? "" : String(loc4[1])).length <= 2)) 
                {
                    continue;
                }
                loc1 = BalanceUtils.addThousandSeparator(loc3) + loc2.character;
                return loc1;
            }
            return "";
        }

        public static function getInstance():mgs.aurora.common.utilities.BalanceUtils
        {
            if (BalanceUtils.__instance__ == null) 
            {
                BalanceUtils.__instance__ = new BalanceUtils();
            }
            return BalanceUtils.__instance__ as BalanceUtils;
        }

        public static function addThousandSeparator(arg1:Number):String
        {
            var loc5:*=0;
            var loc6:*=null;
            var loc1:*=arg1.toString();
            var loc2:*="";
            var loc3:*=loc1.length;
            var loc4:*=",";
            if (loc1.indexOf(".") == -1) 
            {
                loc5 = loc3 >= 3 ? 3 : loc3;
                loc6 = loc1.substr(loc3 - loc5, loc5);
                loc1 = loc1.substr(0, loc3 - loc5);
                loc3 = loc1.length;
                while (loc5 == 3 && loc3 > 0) 
                {
                    loc2 = loc4 + loc6 + loc2;
                    loc5 = loc3 >= 3 ? 3 : loc3;
                    loc6 = loc1.substr(loc3 - loc5, loc5);
                    loc1 = loc1.substr(0, loc3 - loc5);
                    loc3 = loc1.length;
                }
                loc2 = loc6 + loc2;
                return loc2;
            }
            return loc1;
        }

        public static function formatNumberToCurrencyDisplay(arg1:Number, arg2:String, arg3:Boolean=true, arg4:Boolean=true):String
        {
            var loc5:*=null;
            var loc1:*;
            var loc2:*=(loc1 = getCurrencyInfoFromFormatString(arg2)).display;
            var loc3:*=loc1.front;
            var loc4:*;
            if ((loc4 = BalanceUtils.getInstance()).allowMultipler && arg4) 
            {
                arg1 = arg1 * loc4.multiplier;
            }
            if (loc4.allowAbbreviate && arg3) 
            {
                if ((loc5 = loc4.abbreviateValue(arg1)) != "") 
                {
                    return loc3 ? loc2 + loc5 : loc5 + " " + loc2;
                }
            }
            loc5 = internalFormatNumberToCreditsDisplay(arg1, arg2);
            return loc3 ? loc2 + loc5 : loc5 + loc2;
        }

        public static function formatNumberToCreditsDisplay(arg1:Number, arg2:String, arg3:Boolean=true, arg4:Boolean=true):String
        {
            var loc2:*=null;
            var loc1:*;
            if ((loc1 = BalanceUtils.getInstance()).allowMultipler && arg4) 
            {
                arg1 = arg1 * loc1.multiplier;
            }
            if (loc1.allowAbbreviate && arg3) 
            {
                if ((loc2 = loc1.abbreviateValue(arg1)) != "") 
                {
                    return loc2;
                }
            }
            return loc2 = internalFormatNumberToCreditsDisplay(arg1, arg2);
        }

        public static function internalFormatNumberToCreditsDisplay(arg1:Number, arg2:String):String
        {
            var loc7:*=0;
            var loc8:*=null;
            var loc1:*=arg1.toString();
            var loc2:*="";
            var loc3:*=loc1.length;
            var loc4:*;
            var loc5:*=(loc4 = getSeperatorsFromFormatString(arg2)).fraction;
            var loc6:*=loc4.thousands;
            if (loc5.length > 0) 
            {
                if ((loc2 = loc1.substr(loc3 - 2, 2)).length == 1) 
                {
                    loc2 = "0" + loc2;
                }
                loc1 = loc1.substr(0, loc3 - 2);
                loc2 = ((loc3 = loc1.length) != 0 ? "" : "0") + loc5 + loc2;
            }
            if (loc6.length > 0) 
            {
                loc7 = loc3 >= 3 ? 3 : loc3;
                loc8 = loc1.substr(loc3 - loc7, loc7);
                loc1 = loc1.substr(0, loc3 - loc7);
                loc3 = loc1.length;
                while (loc7 == 3 && loc3 > 0) 
                {
                    loc2 = loc6 + loc8 + loc2;
                    loc7 = loc3 >= 3 ? 3 : loc3;
                    loc8 = loc1.substr(loc3 - loc7, loc7);
                    loc1 = loc1.substr(0, loc3 - loc7);
                    loc3 = loc1.length;
                }
                loc2 = loc8 + loc2;
            }
            else 
            {
                loc2 = loc1 + loc2;
            }
            return loc2;
        }

        internal static function getSeperatorsFromFormatString(arg1:String):Object
        {
            var loc1:*=new Object();
            var loc2:*=0;
            var loc3:*=arg1.lastIndexOf("##");
            var loc4:*=arg1.substr((loc3 - 1), 1);
            loc1.fraction = loc4 == "#" ? "" : loc4;
            var loc5:*=arg1.lastIndexOf("###" + loc1.fraction);
            var loc6:*=arg1.substr((loc5 - 1), 1);
            loc1.thousands = loc6 == "#" ? "" : loc6;
            return loc1;
        }

        internal static function getCurrencyInfoFromFormatString(arg1:String):Object
        {
            var loc1:*=new Object();
            loc1.front = arg1.indexOf("#") > 0;
            loc1.display = loc1.front ? arg1.substr(0, arg1.indexOf("#")) : arg1.substr(arg1.lastIndexOf("#") + 1, (arg1.length - 1));
            return loc1;
        }

        public static function convertToCredits(arg1:Number, arg2:Boolean, arg3:String, arg4:String, arg5:Boolean=true, arg6:Boolean=true):String
        {
            var loc3:*=null;
            var loc1:*;
            if ((loc1 = BalanceUtils.getInstance()).allowMultipler && arg6) 
            {
                arg1 = arg1 * loc1.multiplier;
            }
            if (loc1.allowAbbreviate && arg5) 
            {
                if ((loc3 = loc1.abbreviateValue(arg1)) != "") 
                {
                    return loc3;
                }
            }
            arg3 = arg3 != null ? arg3 : ",";
            arg4 = arg4 != null ? arg4 : ".";
            var loc4:*;
            var loc2:*=loc4 = "#" + (arg3.length > 0 && arg2 ? arg3 : "") + "###" + (arg4.length > 0 ? arg4 + "##" : "");
            loc2 = loc4;
            return internalFormatNumberToCreditsDisplay(arg1, loc2);
        }

        public static function convertToCoins(arg1:Number, arg2:Number):Number
        {
            var loc1:*=Math.floor(arg1 / arg2);
            return loc1;
        }

        public static function formatCoinsDisplay(arg1:Number):String
        {
            var loc1:*=BalanceUtils.getInstance();
            var loc2:*="";
            if (loc1.allowAbbreviate) 
            {
                loc2 = loc1.abbreviateValue(arg1 * 100);
                if (loc2 != "") 
                {
                    return loc2;
                }
            }
            var loc3:*;
            loc2 = loc3 = internalFormatNumberToCreditsDisplay(arg1, "# ###");
            return loc3;
        }

        public static function removeMultiplier(arg1:Number):Number
        {
            var loc1:*=BalanceUtils.getInstance();
            if (loc1.allowMultipler) 
            {
                arg1 = Math.floor(arg1 / loc1.multiplier);
            }
            return arg1;
        }

        internal var _allowMultipler:Boolean=false;

        internal var _allowAbbreviate:Boolean=false;

        internal var _multiplier:uint=1;

        internal var _abbreviateFormats:__AS3__.vec.Vector.<mgs.aurora.common.vo.currency.AbbreviationFormat>;

        internal static var __instance__:mgs.aurora.common.utilities.BalanceUtils;
    }
}


//          class EventDispatcherDecorator
package mgs.aurora.common.utilities 
{
    import flash.events.*;
    import flash.utils.*;
    
    public class EventDispatcherDecorator extends flash.events.EventDispatcher
    {
        public function EventDispatcherDecorator(arg1:flash.events.IEventDispatcher=null, arg2:Boolean=false)
        {
            super(arg1);
            this._target = arg2 ? arg1 : null;
            this._proxy = arg2;
            this._listeners = new flash.utils.Dictionary();
            this._count = 0;
            return;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._listeners[this._count] = {"type":arg1, "listener":arg2, "useCapture":arg3, "count":this._count};
            var loc1:*;
            var loc2:*=((loc1 = this)._count + 1);
            loc1._count = loc2;
            if (this._proxy) 
            {
                this._target.addEventListener(arg1, this.onEvent, arg3, arg4, arg5);
            }
            super.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.removeRefrence(arg1);
            if (this._proxy) 
            {
                this._target.removeEventListener(arg1, this.onEvent, arg3);
            }
            super.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function removeAllEventListeners():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._listeners;
            for each (loc1 in loc3) 
            {
                this.removeEventListener(loc1.type, loc1.listener, loc1.useCapture);
            }
            this._listeners = null;
            this._listeners = new flash.utils.Dictionary();
            this._count = 0;
            return;
        }

        internal function removeRefrence(arg1:String):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._listeners;
            for each (loc1 in loc3) 
            {
                if (loc1.type != arg1) 
                {
                    continue;
                }
                this._listeners[loc1.count] = null;
                delete this._listeners[loc1.count];
                var loc4:*;
                var loc5:*=((loc4 = this)._count - 1);
                loc4._count = loc5;
            }
            return;
        }

        public function dispose():void
        {
            this.removeAllEventListeners();
            this._target = null;
            this._listeners = null;
            this._count = 0;
            return;
        }

        internal function onEvent(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            return;
        }

        internal var _listeners:flash.utils.Dictionary;

        internal var _target:flash.events.IEventDispatcher;

        internal var _proxy:Boolean;

        internal var _count:int;
    }
}


//          class EventUtils
package mgs.aurora.common.utilities 
{
    import flash.events.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.dialogues.*;
    
    public class EventUtils extends Object
    {
        public function EventUtils()
        {
            super();
            return;
        }

        public static function addMouseEventsToSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            arg1.addEventListener(flash.events.MouseEvent.CLICK, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_OUT, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_OVER, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_UP, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_WHEEL, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.ROLL_OUT, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.MouseEvent.ROLL_OVER, arg2, arg3, arg4, arg5);
            return;
        }

        public static function removeMouseEventsFromSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false):void
        {
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.DOUBLE_CLICK, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_MOVE, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_OUT, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_OVER, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_UP, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_WHEEL, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.ROLL_OUT, arg2, arg3);
            arg1.removeEventListener(flash.events.MouseEvent.ROLL_OVER, arg2, arg3);
            return;
        }

        public static function addKeyEventsToSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            arg1.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, arg2, arg3, arg4, arg5);
            arg1.addEventListener(flash.events.KeyboardEvent.KEY_UP, arg2, arg3, arg4, arg5);
            return;
        }

        public static function removeKeyEventsFromSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false):void
        {
            arg1.removeEventListener(flash.events.KeyboardEvent.KEY_DOWN, arg2, arg3);
            arg1.removeEventListener(flash.events.KeyboardEvent.KEY_UP, arg2, arg3);
            return;
        }

        public static function addSystemMouseEventsToSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.CLICK, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.DOUBLE_CLICK, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_DOWN, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_MOVE, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OUT, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OVER, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_UP, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_WHEEL, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.ROLL_OUT, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.ROLL_OVER, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemMouseEvent.RIGHT_CLICK, arg2, arg3, arg4, arg5);
            return;
        }

        public static function removeSystemMouseEventsFromSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false):void
        {
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.CLICK, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.DOUBLE_CLICK, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_DOWN, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_MOVE, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OUT, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OVER, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_UP, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_WHEEL, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.ROLL_OUT, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.ROLL_OVER, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemMouseEvent.RIGHT_CLICK, arg2, arg3);
            return;
        }

        public static function addSystemKeyEventsToSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            arg1.addEventListener(mgs.aurora.common.events.SystemKeyboardEvent.KEY_DOWN, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.SystemKeyboardEvent.KEY_UP, arg2, arg3, arg4, arg5);
            return;
        }

        public static function removeSystemKeyEventsFromSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false):void
        {
            arg1.removeEventListener(mgs.aurora.common.events.SystemKeyboardEvent.KEY_DOWN, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.SystemKeyboardEvent.KEY_UP, arg2, arg3);
            return;
        }

        public static function addDialogueMouseEventsToSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.DOUBLE_CLICK, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_DOWN, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_MOVE, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OUT, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OVER, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_UP, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_WHEEL, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OUT, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OVER, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.RIGHT_CLICK, arg2, arg3, arg4, arg5);
            return;
        }

        public static function removeDialogueMouseEventsFromSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false):void
        {
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.DOUBLE_CLICK, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_DOWN, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_MOVE, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OUT, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OVER, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_UP, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_WHEEL, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OUT, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OVER, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.RIGHT_CLICK, arg2, arg3);
            return;
        }

        public static function addDialogueKeyEventsToSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_DOWN, arg2, arg3, arg4, arg5);
            arg1.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, arg2, arg3, arg4, arg5);
            return;
        }

        public static function removeDialogueKeyEventsFromSingleMethod(arg1:flash.events.IEventDispatcher, arg2:Function, arg3:Boolean=false):void
        {
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_DOWN, arg2, arg3);
            arg1.removeEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, arg2, arg3);
            return;
        }

        public static function nativeMouseEventToSystemMouseEvent(arg1:flash.events.MouseEvent, arg2:String):mgs.aurora.common.events.SystemMouseEvent
        {
            var loc1:*="";
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case flash.events.MouseEvent.CLICK:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.CLICK;
                    break;
                }
                case flash.events.MouseEvent.DOUBLE_CLICK:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.DOUBLE_CLICK;
                    break;
                }
                case flash.events.MouseEvent.MOUSE_DOWN:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.MOUSE_DOWN;
                    break;
                }
                case flash.events.MouseEvent.MOUSE_MOVE:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.MOUSE_MOVE;
                    break;
                }
                case flash.events.MouseEvent.MOUSE_OUT:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.MOUSE_OUT;
                    break;
                }
                case flash.events.MouseEvent.MOUSE_OVER:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.MOUSE_OVER;
                    break;
                }
                case flash.events.MouseEvent.MOUSE_UP:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.MOUSE_UP;
                    break;
                }
                case flash.events.MouseEvent.MOUSE_WHEEL:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.MOUSE_WHEEL;
                    break;
                }
                case flash.events.MouseEvent.ROLL_OUT:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.ROLL_OUT;
                    break;
                }
                case flash.events.MouseEvent.ROLL_OVER:
                {
                    loc1 = mgs.aurora.common.events.SystemMouseEvent.ROLL_OVER;
                    break;
                }
                default:
                {
                    return null;
                }
            }
            return new mgs.aurora.common.events.SystemMouseEvent(loc1, arg2, arg1);
        }

        public static function nativeKeyboardEventToSystemKeyboardEvent(arg1:flash.events.KeyboardEvent, arg2:String):mgs.aurora.common.events.SystemKeyboardEvent
        {
            var loc1:*="";
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case flash.events.KeyboardEvent.KEY_DOWN:
                {
                    loc1 = mgs.aurora.common.events.SystemKeyboardEvent.KEY_DOWN;
                    break;
                }
                case flash.events.KeyboardEvent.KEY_UP:
                {
                    loc1 = mgs.aurora.common.events.SystemKeyboardEvent.KEY_UP;
                    break;
                }
                default:
                {
                    return null;
                }
            }
            return new mgs.aurora.common.events.SystemKeyboardEvent(loc1, arg2, arg1);
        }
    }
}


//          class FlashStorage
package mgs.aurora.common.utilities 
{
    import flash.events.*;
    import flash.net.*;
    import mgs.aurora.common.events.*;
    
    public class FlashStorage extends Object implements flash.events.IEventDispatcher
    {
        public function FlashStorage(arg1:SingletonEnforcer)
        {
            super();
            this._eventDispatcher = new flash.events.EventDispatcher();
            return;
        }

        public function retreiveData(arg1:String, arg2:String, arg3:String=null, arg4:Boolean=false):*
        {
            var storageName:String;
            var keyName:String;
            var localPath:String=null;
            var secure:Boolean=false;
            var value:*;

            var loc1:*;
            value = undefined;
            storageName = arg1;
            keyName = arg2;
            localPath = arg3;
            secure = arg4;
            value = "";
            try 
            {
                this._sharedObject = flash.net.SharedObject.getLocal(storageName, localPath, secure);
                this._sharedObject.objectEncoding = flash.net.ObjectEncoding.AMF0;
                value = this._sharedObject.data[keyName];
            }
            catch (e:Error)
            {
                this.dispatchEvent(new mgs.aurora.common.events.SystemSharedObjectEvent(mgs.aurora.common.events.SystemSharedObjectEvent.FAILED, storageName, keyName, "", localPath, secure));
                return value;
            }
            return value;
        }

        public function setData(arg1:String, arg2:String, arg3:*, arg4:String=null, arg5:Boolean=false):String
        {
            var storageName:String;
            var keyName:String;
            var keyValue:*;
            var localPath:String=null;
            var secure:Boolean=false;
            var flushed:String;

            var loc1:*;
            flushed = null;
            storageName = arg1;
            keyName = arg2;
            keyValue = arg3;
            localPath = arg4;
            secure = arg5;
            this._keyName = keyName;
            this._keyValue = keyValue;
            this._localPath = localPath;
            this._storageName = storageName;
            this._secure = secure;
            flushed = flash.net.SharedObjectFlushStatus.PENDING;
            try 
            {
                this._sharedObject = flash.net.SharedObject.getLocal(storageName, localPath, secure);
                this._sharedObject.objectEncoding = flash.net.ObjectEncoding.AMF0;
                this._sharedObject.data[keyName] = keyValue;
                this._sharedObject.addEventListener(flash.events.NetStatusEvent.NET_STATUS, this.onSharedObjectStatus);
                flushed = this._sharedObject.flush();
            }
            catch (e:Error)
            {
                if (this._sharedObject) 
                {
                    this._sharedObject.removeEventListener(flash.events.NetStatusEvent.NET_STATUS, this.onSharedObjectStatus);
                }
                this.dispatchEvent(new mgs.aurora.common.events.SystemSharedObjectEvent(mgs.aurora.common.events.SystemSharedObjectEvent.FAILED, storageName, keyName, keyValue, localPath, secure));
                return flushed;
            }
            if (flushed != flash.net.SharedObjectFlushStatus.PENDING) 
            {
                if (flushed == flash.net.SharedObjectFlushStatus.FLUSHED) 
                {
                    this.dispatchEvent(new mgs.aurora.common.events.SystemSharedObjectEvent(mgs.aurora.common.events.SystemSharedObjectEvent.SUCCESS, storageName, keyName, keyValue, localPath, secure));
                }
            }
            else 
            {
                this.dispatchEvent(new mgs.aurora.common.events.SystemSharedObjectEvent(mgs.aurora.common.events.SystemSharedObjectEvent.PENDING, storageName, keyName, keyValue, localPath, secure));
            }
            return flushed;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._eventDispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._eventDispatcher.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._eventDispatcher.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._eventDispatcher.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._eventDispatcher.willTrigger(arg1);
        }

        internal function onSharedObjectStatus(arg1:flash.events.NetStatusEvent):void
        {
            this._sharedObject.removeEventListener(flash.events.NetStatusEvent.NET_STATUS, this.onSharedObjectStatus);
            var loc1:*=arg1.info.code;
            switch (loc1) 
            {
                case "SharedObject.Flush.Success":
                {
                    this.dispatchEvent(new mgs.aurora.common.events.SystemSharedObjectEvent(mgs.aurora.common.events.SystemSharedObjectEvent.SUCCESS, this._storageName, this._keyName, this._keyValue, this._localPath, this._secure));
                    break;
                }
                case "SharedObject.Flush.Failed":
                default:
                {
                    this.dispatchEvent(new mgs.aurora.common.events.SystemSharedObjectEvent(mgs.aurora.common.events.SystemSharedObjectEvent.FAILED, this._storageName, this._keyName, this._keyValue, this._localPath, this._secure));
                    this._sharedObject = null;
                    break;
                }
            }
            return;
        }

        public static function getInstance():mgs.aurora.common.utilities.FlashStorage
        {
            if (FlashStorage.__instance__ == null) 
            {
                FlashStorage.__instance__ = new FlashStorage(new SingletonEnforcer());
            }
            return FlashStorage.__instance__;
        }

        public static function saveData(arg1:String, arg2:String, arg3:*, arg4:String=null, arg5:Boolean=false):String
        {
            return FlashStorage.getInstance().setData(arg1, arg2, arg3, arg4, arg5);
        }

        public static function loadData(arg1:String, arg2:String, arg3:String=null, arg4:Boolean=false):*
        {
            return FlashStorage.getInstance().retreiveData(arg1, arg2, arg3, arg4);
        }

        public static function saveSystemData(arg1:String, arg2:*):String
        {
            return FlashStorage.getInstance().setData(FlashStorage.SYSTEM, arg1, arg2);
        }

        public static function loadSystemData(arg1:String):String
        {
            return FlashStorage.getInstance().retreiveData(FlashStorage.SYSTEM, arg1);
        }

        public static function saveDataEncrypted(arg1:String, arg2:String, arg3:String):String
        {
            return "";
        }

        public static function loadDataEncrypted(arg1:String, arg2:String):String
        {
            return "";
        }

        
        {
            __instance__ = null;
        }

        public static const SYSTEM:String="system";

        internal var _eventDispatcher:flash.events.EventDispatcher;

        internal var _sharedObject:flash.net.SharedObject;

        internal var _storageName:String;

        internal var _keyName:String;

        internal var _keyValue:*;

        internal var _localPath:String=null;

        internal var _secure:Boolean=false;

        internal static var __instance__:mgs.aurora.common.utilities.FlashStorage=null;
    }
}


class SingletonEnforcer extends Object
{
    public function SingletonEnforcer()
    {
        super();
        return;
    }
}

//          class FontUtils
package mgs.aurora.common.utilities 
{
    import flash.text.*;
    
    public class FontUtils extends Object
    {
        public function FontUtils()
        {
            super();
            return;
        }

        public static function getFont(arg1:String):flash.text.Font
        {
            var loc1:*=flash.text.Font.enumerateFonts(true);
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                if (arg1 == flash.text.Font(loc1[loc3]).fontName) 
                {
                    return loc1[loc3] as flash.text.Font;
                }
                ++loc3;
            }
            return null;
        }
    }
}


//          class GUID
package mgs.aurora.common.utilities 
{
    import flash.system.*;
    
    public class GUID extends Object
    {
        public function GUID()
        {
            super();
            return;
        }

        public static function create():String
        {
            var loc1:*=new Date();
            var loc2:*=loc1.getTime();
            var loc3:*=Math.random() * Number.MAX_VALUE;
            var loc4:*=flash.system.Capabilities.serverString;
            var loc7:*;
            var loc5:*;
            var loc6:*;
            return loc6 = (loc5 = calculate(loc2 + loc4 + loc3 + counter++).toUpperCase()).substring(0, 8) + "-" + loc5.substring(8, 12) + "-" + loc5.substring(12, 16) + "-" + loc5.substring(16, 20) + "-" + loc5.substring(20, 32);
        }

        internal static function calculate(arg1:String):String
        {
            return hex_sha1(arg1);
        }

        internal static function hex_sha1(arg1:String):String
        {
            return binb2hex(core_sha1(str2binb(arg1), arg1.length * 8));
        }

        internal static function core_sha1(arg1:Array, arg2:Number):Array
        {
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=NaN;
            var loc11:*=NaN;
            var loc12:*=NaN;
            var loc13:*=NaN;
            var loc14:*=NaN;
            arg1[arg2 >> 5] = arg1[arg2 >> 5] | 128 << 24 - arg2 % 32;
            arg1[(arg2 + 64 >> 9 << 4) + 15] = arg2;
            var loc1:*=new Array(80);
            var loc2:*=1732584193;
            var loc3:*=-271733879;
            var loc4:*=-1732584194;
            var loc5:*=271733878;
            var loc6:*=-1009589776;
            var loc7:*=0;
            while (loc7 < arg1.length) 
            {
                loc8 = loc2;
                loc9 = loc3;
                loc10 = loc4;
                loc11 = loc5;
                loc12 = loc6;
                loc13 = 0;
                while (loc13 < 80) 
                {
                    if (loc13 < 16) 
                    {
                        loc1[loc13] = arg1[loc7 + loc13];
                    }
                    else 
                    {
                        loc1[loc13] = rol(loc1[loc13 - 3] ^ loc1[loc13 - 8] ^ loc1[loc13 - 14] ^ loc1[loc13 - 16], 1);
                    }
                    loc14 = safe_add(safe_add(rol(loc2, 5), sha1_ft(loc13, loc3, loc4, loc5)), safe_add(safe_add(loc6, loc1[loc13]), sha1_kt(loc13)));
                    loc6 = loc5;
                    loc5 = loc4;
                    loc4 = rol(loc3, 30);
                    loc3 = loc2;
                    loc2 = loc14;
                    ++loc13;
                }
                loc2 = safe_add(loc2, loc8);
                loc3 = safe_add(loc3, loc9);
                loc4 = safe_add(loc4, loc10);
                loc5 = safe_add(loc5, loc11);
                loc6 = safe_add(loc6, loc12);
                loc7 = loc7 + 16;
            }
            return new Array(loc2, loc3, loc4, loc5, loc6);
        }

        internal static function sha1_ft(arg1:Number, arg2:Number, arg3:Number, arg4:Number):Number
        {
            if (arg1 < 20) 
            {
                return arg2 & arg3 | ~arg2 & arg4;
            }
            if (arg1 < 40) 
            {
                return arg2 ^ arg3 ^ arg4;
            }
            if (arg1 < 60) 
            {
                return arg2 & arg3 | arg2 & arg4 | arg3 & arg4;
            }
            return arg2 ^ arg3 ^ arg4;
        }

        internal static function sha1_kt(arg1:Number):Number
        {
            return arg1 < 20 ? 1518500249 : arg1 < 40 ? 1859775393 : arg1 < 60 ? -1894007588 : -899497514;
        }

        internal static function safe_add(arg1:Number, arg2:Number):Number
        {
            var loc1:*=(arg1 & 65535) + (arg2 & 65535);
            var loc2:*;
            return (loc2 = (arg1 >> 16) + (arg2 >> 16) + (loc1 >> 16)) << 16 | loc1 & 65535;
        }

        internal static function rol(arg1:Number, arg2:Number):Number
        {
            return arg1 << arg2 | arg1 >>> 32 - arg2;
        }

        internal static function str2binb(arg1:String):Array
        {
            var loc1:*=new Array();
            var loc2:*=(1 << 8 - 1);
            var loc3:*=0;
            while (loc3 < arg1.length * 8) 
            {
                loc1[loc3 >> 5] = loc1[loc3 >> 5] | (arg1.charCodeAt(loc3 / 8) & loc2) << 24 - loc3 % 32;
                loc3 = loc3 + 8;
            }
            return loc1;
        }

        internal static function binb2hex(arg1:Array):String
        {
            var loc1:*=new String("");
            var loc2:*=new String("0123456789abcdef");
            var loc3:*=0;
            while (loc3 < arg1.length * 4) 
            {
                loc1 = loc1 + (loc2.charAt(arg1[loc3 >> 2] >> (3 - loc3 % 4) * 8 + 4 & 15) + loc2.charAt(arg1[loc3 >> 2] >> (3 - loc3 % 4) * 8 & 15));
                ++loc3;
            }
            return loc1;
        }

        
        {
            counter = 0;
        }

        internal static var counter:Number=0;
    }
}


//          class GraphicsUtils
package mgs.aurora.common.utilities 
{
    import flash.display.*;
    import flash.geom.*;
    
    public class GraphicsUtils extends Object
    {
        public function GraphicsUtils()
        {
            super();
            return;
        }

        public static function drawFocusRect(arg1:flash.display.Sprite, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number):void
        {
            arg1.graphics.lineStyle(0, 0, 0);
            var loc1:*=Math.round((arg4 - 1)) / 3;
            var loc2:*=Math.round(loc1 * 3 - arg4 / 3);
            var loc3:*=Math.round((arg5 - 1)) / 3;
            var loc4:*=Math.round(loc3 * 3 - arg5 / 3);
            drawHorizontalFocusRectLine(arg1.graphics, arg2, arg3, arg4, arg6, Math.round(loc2 / loc1));
            drawVerticalFocusRectLine(arg1.graphics, arg2, arg3, arg5, arg6, Math.round(loc4 / loc3));
            drawHorizontalFocusRectLine(arg1.graphics, arg2, arg3 + arg5, arg4, arg6, Math.round(loc2 / loc1));
            drawVerticalFocusRectLine(arg1.graphics, arg2 + arg4, arg3, arg5, arg6, Math.round(loc4 / loc3));
            return;
        }

        internal static function drawHorizontalFocusRectLine(arg1:flash.display.Graphics, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number):void
        {
            var loc1:*=0;
            while (loc1 < arg4) 
            {
                arg1.beginFill(arg5, 100);
                arg1.drawCircle(arg2 + loc1 + 0.5, Math.round(arg3) + 0.5, 0.5);
                arg1.endFill();
                loc1 = loc1 + arg6;
            }
            return;
        }

        internal static function drawVerticalFocusRectLine(arg1:flash.display.Graphics, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number):void
        {
            var loc1:*=0;
            while (loc1 < arg4) 
            {
                arg1.beginFill(arg5, 100);
                arg1.drawCircle(Math.round(arg2) + 0.5, arg3 + loc1 + 0.5, 0.5);
                arg1.endFill();
                loc1 = loc1 + arg6;
            }
            return;
        }

        public static function drawRectangle(arg1:flash.display.Graphics, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number, arg7:Number=undefined, arg8:Number=undefined):void
        {
            arg1.lineStyle(arg4, arg5, arg6);
            arg1.moveTo(0, 0);
            if (arg7) 
            {
                arg1.beginFill(arg7, arg8);
            }
            arg1.lineTo(arg2, 0);
            arg1.lineTo(arg2, arg3);
            arg1.lineTo(0, arg3);
            arg1.lineTo(0, 0);
            arg1.endFill();
            return;
        }

        public static function verticalAlign(arg1:flash.display.MovieClip, arg2:flash.display.MovieClip, arg3:String):void
        {
            var loc2:*=0;
            var loc1:*=arg2.height / 2;
            var loc3:*=arg3;
            switch (loc3) 
            {
                case V_ALIGN_BOTTOM:
                {
                    loc2 = arg1.y + arg1.height;
                    break;
                }
                case V_ALIGN_MIDDLE:
                {
                    loc2 = arg1.y + arg1.height / 2;
                    break;
                }
                case V_ALIGN_TOP:
                default:
                {
                    loc2 = arg1.y;
                    break;
                }
            }
            arg2.y = loc2 - loc1;
            return;
        }

        public static function horizontalAlign(arg1:flash.display.MovieClip, arg2:flash.display.MovieClip, arg3:String):void
        {
            var loc2:*=0;
            var loc1:*=arg2.width / 2;
            var loc3:*=arg3;
            switch (loc3) 
            {
                case H_ALIGN_RIGHT:
                {
                    loc2 = arg1.x + arg1.width;
                    break;
                }
                case H_ALIGN_LEFT:
                {
                    loc2 = arg1.x;
                    break;
                }
                case H_ALIGN_CENTER:
                default:
                {
                    loc2 = arg1.x + arg1.width / 2;
                    break;
                }
            }
            arg2.x = loc2 - loc1;
            return;
        }

        public static function addPadding(arg1:flash.display.MovieClip, arg2:flash.display.MovieClip, arg3:String, arg4:int):void
        {
            if (arg3 == PADDING_ALL || arg3 == PADDING_LEFT) 
            {
                arg2.x = arg2.x + arg4;
            }
            if (arg3 == PADDING_ALL || arg3 == PADDING_TOP) 
            {
                arg2.y = arg2.y + arg4;
            }
            if (arg3 == PADDING_ALL || arg3 == PADDING_RIGHT) 
            {
                if (arg3 != PADDING_RIGHT) 
                {
                    arg2.width = arg1.width - arg4 * 2;
                }
                else 
                {
                    arg2.width = arg1.width - arg4;
                }
            }
            if (arg3 == PADDING_ALL || arg3 == PADDING_BOTTOM) 
            {
                if (arg3 != PADDING_BOTTOM) 
                {
                    arg2.height = arg1.height - arg4 * 2;
                }
                else 
                {
                    arg2.height = arg1.height - arg4;
                }
            }
            return;
        }

        public static function getVisibleRect(arg1:flash.display.DisplayObject):flash.geom.Rectangle
        {
            var loc2:*=null;
            var loc1:*=2000;
            var loc3:*;
            (loc3 = new flash.display.BitmapData(loc1, loc1, true, 0)).draw(arg1);
            loc2 = loc3.getColorBoundsRect(4278190080, 0, false);
            loc3.dispose();
            return loc2;
        }

        public static function getMovieClipFromLibrary(arg1:String, arg2:flash.display.LoaderInfo):flash.display.MovieClip
        {
            var loc1:*=arg2.applicationDomain.getDefinition(arg1) as Class;
            return new loc1() as flash.display.MovieClip;
        }

        public static function hitTestMouse(arg1:flash.display.MovieClip, arg2:Boolean=false):Boolean
        {
            if (arg1.stage != null) 
            {
                return arg1.hitTestPoint(arg1.mouseX, arg1.mouseX, arg2);
            }
            return false;
        }

        public static const V_ALIGN_BOTTOM:String="bottom";

        public static const V_ALIGN_MIDDLE:String="middle";

        public static const V_ALIGN_TOP:String="top";

        public static const H_ALIGN_RIGHT:String="right";

        public static const H_ALIGN_CENTER:String="center";

        public static const H_ALIGN_LEFT:String="left";

        public static const PADDING_ALL:String="padding";

        public static const PADDING_LEFT:String="paddingleft";

        public static const PADDING_RIGHT:String="paddingright";

        public static const PADDING_TOP:String="paddingtop";

        public static const PADDING_BOTTOM:String="paddingbottom";
    }
}


//          class MgsCommsEventHandlers
package mgs.aurora.common.utilities 
{
    public class MgsCommsEventHandlers extends Object
    {
        public function MgsCommsEventHandlers()
        {
            super();
            return;
        }

        public var onDataReceived:Function;

        public var onSecurityError:Function;

        public var onIOError:Function;

        public var onClose:Function;

        public var onConnect:Function;

        public var onTLSReady:Function;
    }
}


//          class ObjectUtils
package mgs.aurora.common.utilities 
{
    import flash.utils.*;
    
    public class ObjectUtils extends Object
    {
        public function ObjectUtils()
        {
            super();
            return;
        }

        public static function updateFromXML(arg1:XML, arg2:Object):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=arg1.attributes();
            for each (loc1 in loc5) 
            {
                loc2 = loc1.name();
                loc3 = loc1.toString();
                if (!arg2.hasOwnProperty(loc2)) 
                {
                    continue;
                }
                if (mgs.aurora.common.utilities.StringUtils.isBoolean(loc3)) 
                {
                    arg2[loc2] = mgs.aurora.common.utilities.StringUtils.stringToBoolean(loc3);
                    continue;
                }
                arg2[loc2] = loc3;
            }
            return;
        }

        public static function updateFromSameTypeObject(arg1:Object, arg2:Object):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=arg1;
            for (loc1 in loc3) 
            {
                arg2[loc1] = arg1[loc1];
            }
            return;
        }

        public static function dictionaryFromXML(arg1:XML, arg2:flash.utils.Dictionary):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=arg1.attributes();
            for each (loc1 in loc5) 
            {
                loc2 = loc1.name();
                loc3 = loc1.toString();
                if (mgs.aurora.common.utilities.StringUtils.isBoolean(loc3)) 
                {
                    arg2[loc2] = mgs.aurora.common.utilities.StringUtils.stringToBoolean(loc3);
                    continue;
                }
                arg2[loc2] = loc3;
            }
            return;
        }

        public static function buildObjectFromStrings(arg1:*, arg2:Array):*
        {
            var loc1:*=arg1;
            var loc2:*=0;
            while (loc2 < arg2.length) 
            {
                loc1 = loc1[arg2[loc2]];
                ++loc2;
            }
            return loc1;
        }
    }
}


//          class PostParameters
package mgs.aurora.common.utilities 
{
    import flash.utils.*;
    
    public class PostParameters extends Object
    {
        public function PostParameters()
        {
            super();
            this._postList = new flash.utils.Dictionary();
            return;
        }

        public function setPostParameters(arg1:String, arg2:Object):void
        {
            this._postList[arg1] = arg2;
            return;
        }

        public function getPostParameter(arg1:String, arg2:String):String
        {
            return this._postList[arg1][arg2];
        }

        public function updatePostParamValue(arg1:String, arg2:String, arg3:String):void
        {
            this._postList[arg1][arg2] = arg3;
            return;
        }

        public static function getInstance():mgs.aurora.common.utilities.PostParameters
        {
            if (PostParameters.__instance__ == null) 
            {
                PostParameters.__instance__ = new PostParameters();
            }
            return PostParameters.__instance__ as PostParameters;
        }

        internal var _postList:flash.utils.Dictionary;

        internal static var __instance__:mgs.aurora.common.utilities.PostParameters;
    }
}


//          class StringUtils
package mgs.aurora.common.utilities 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    
    public class StringUtils extends Object
    {
        public function StringUtils()
        {
            super();
            return;
        }

        public static function stringToBoolean(arg1:String):Boolean
        {
            if (arg1 == null) 
            {
                return false;
            }
            if (arg1.toLowerCase() == "true" || arg1 == "1") 
            {
                return true;
            }
            return false;
        }

        public static function StringBooleanToInt(arg1:String):int
        {
            if (arg1 == null) 
            {
                return 0;
            }
            if (arg1.toLowerCase() == "true" || arg1 == "1") 
            {
                return 1;
            }
            return 0;
        }

        public static function isBoolean(arg1:String):Boolean
        {
            if (arg1 == null) 
            {
                return false;
            }
            return arg1.toLowerCase() == "true" || arg1.toLowerCase() == "false";
        }

        public static function dialogueStringToHtml(arg1:String):String
        {
            var loc1:*=new RegExp("-B-", "gi");
            var loc2:*=new RegExp("-B!-", "gi");
            var loc3:*=new RegExp("-I-", "gi");
            var loc4:*=new RegExp("-I!-", "gi");
            var loc5:*=new RegExp("-L-", "gi");
            return arg1.replace(loc1, "<B>").replace(loc2, "</B>").replace(loc3, "<I>").replace(loc4, "</I>").replace(loc5, "<BR>");
        }

        public static function compare(arg1:String, arg2:String, arg3:Boolean=true):Boolean
        {
            if (arg3) 
            {
                return arg1 == arg2;
            }
            return arg1.toLowerCase() == arg2.toLowerCase();
        }

        public static function bytesToString(arg1:flash.utils.ByteArray):String
        {
            var loc1:*="";
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc1 = loc1 + String.fromCharCode(arg1[loc2]);
                ++loc2;
            }
            return loc1;
        }

        public static function bytesToUTFString(arg1:flash.utils.ByteArray):String
        {
            return arg1.readUTFBytes(arg1.length);
        }

        public static function stringToByteArray(arg1:String):flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=arg1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc1.writeByte(arg1.charCodeAt(loc3));
                ++loc3;
            }
            return loc1;
        }

        public static function utfStringToByteArray(arg1:String):flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=arg1.length;
            loc1.writeUTFBytes(arg1);
            return loc1;
        }

        public static function csvStringToVectorOfStrings(arg1:String):__AS3__.vec.Vector.<String>
        {
            var loc3:*=null;
            var loc1:*=new Vector.<String>();
            var loc2:*=arg1.split(",");
            var loc4:*=0;
            var loc5:*=loc2;
            for each (loc3 in loc5) 
            {
                loc1.push(loc3);
            }
            return loc1;
        }

        public static function replaceWithActualValue(arg1:String, arg2:Object, arg3:Boolean=true):String
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            if (arg1 == "" || arg1 == null || arg2 == null) 
            {
                return "";
            }
            var loc1:*=arg1.split(",");
            var loc2:*=[];
            var loc7:*=0;
            var loc8:*=loc1;
            for each (loc3 in loc8) 
            {
                loc4 = loc3.split("=");
                loc5 = new RegExp("%", "gi");
                loc6 = loc4[1];
                if (loc4.length != 2) 
                {
                    continue;
                }
                if (loc4[1].indexOf("%") != -1) 
                {
                    loc4[1] = loc4[1].replace(loc5, "");
                    loc6 = arg3 ? arg2[loc4[1].toLowerCase()] : arg2[loc4[1]];
                }
                loc2.push(loc4[0] + "=^=" + loc6);
            }
            return loc2.toString();
        }

        public static function replaceStringID(arg1:XML, arg2:XML, arg3:Array):XML
        {
            var target:XML;
            var stringsXML:XML;
            var attribNames:Array;
            var i:int;
            var a:int;

            var loc1:*;
            a = 0;
            target = arg1;
            stringsXML = arg2;
            attribNames = arg3;
            i = 0;
            while (i < attribNames.length) 
            {
                if (target.@[attribNames[i]].length() == 1) 
                {
                    target.@[attribNames[i]].length() == 1;
                    var loc3:*=0;
                    var loc4:*=stringsXML.string;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@ID == target.@[attribNames[i]]) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                }
                if (target.@[attribNames[i]].length() == 1) 
                {
                    loc3 = 0;
                    loc4 = stringsXML.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == target.@[attribNames[i]]) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    target.@[attribNames[i]] = loc2.@text;
                }
                if (target.children().length() > 0) 
                {
                    a = 0;
                    while (a < target.children().length()) 
                    {
                        mgs.aurora.common.utilities.StringUtils.replaceStringID(target.children()[a], stringsXML, attribNames);
                        ++a;
                    }
                }
                ++i;
            }
            return target;
        }

        public static function updateFromGlobalVars(arg1:XML, arg2:XMLList, arg3:Boolean=true):XML
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=arg1.toXMLString();
            var loc5:*=0;
            var loc6:*=arg2.children();
            for each (loc2 in loc6) 
            {
                loc3 = arg2.@character + loc2.@id + arg2.@character;
                loc4 = new RegExp(loc3, "g");
                if (!arg3) 
                {
                    loc4 = new RegExp(loc3, "gi");
                }
                loc1 = loc1.replace(loc4, String(loc2.@text));
            }
            return new XML(loc1);
        }

        public static function replace(arg1:String, ... rest):String
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < rest.length) 
            {
                loc2 = new RegExp("[{]" + loc1 + "}");
                arg1 = arg1.replace(loc2, rest[loc1]);
            }
            return arg1;
        }

        public static function replaceNamedVars(arg1:String, arg2:flash.utils.Dictionary):String
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=arg2;
            for (loc1 in loc4) 
            {
                loc2 = new RegExp("[{]" + loc1 + "}");
                arg1 = arg1.replace(loc2, arg2[loc1]);
            }
            return arg1;
        }
    }
}


//        package vo
//          package banking
//            class BankingDependencies
package mgs.aurora.common.vo.banking 
{
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    
    public class BankingDependencies extends Object
    {
        public function BankingDependencies(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender=null, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler=null, arg3:Object=null, arg4:XML=null, arg5:XML=null, arg6:XML=null)
        {
            super();
            this.xman = arg1;
            this.dialogues = arg2;
            this.sessionObject = arg3;
            this.config = arg4;
            this.creditDisplayConfig = arg5;
            this.strings = arg6;
            return;
        }

        public var xman:mgs.aurora.common.interfaces.comms.IXManPacketSender;

        public var dialogues:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        public var sessionObject:Object;

        public var config:XML;

        public var creditDisplayConfig:XML;

        public var strings:XML;
    }
}


//          package currency
//            class AbbreviationFormat
package mgs.aurora.common.vo.currency 
{
    public class AbbreviationFormat extends Object
    {
        public function AbbreviationFormat(arg1:Number, arg2:String)
        {
            super();
            this._character = arg2;
            this._value = arg1;
            return;
        }

        public function get character():String
        {
            return this._character;
        }

        public function get value():Number
        {
            return this._value;
        }

        internal var _character:String;

        internal var _value:Number;
    }
}


//          package multiplayer
//            class AvatarMetaData
package mgs.aurora.common.vo.multiplayer 
{
    public class AvatarMetaData extends Object
    {
        public function AvatarMetaData(arg1:String, arg2:String, arg3:String, arg4:String)
        {
            super();
            this.pokerUserAccountID = arg1;
            this.version = arg2;
            this.isRejected = arg3;
            this.imageName = arg4;
            return;
        }

        public var pokerUserAccountID:String;

        public var version:String;

        public var isRejected:String;

        public var imageName:String;
    }
}


//      package moduleBase
//        package controller
//          class SetupModuleCommand
package mgs.aurora.moduleBase.controller 
{
    import flash.display.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.common.interfaces.module.*;
    import mgs.aurora.moduleBase.model.*;
    import mgs.aurora.moduleBase.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupModuleCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupModuleCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.moduleBase.view.ModuleBaseMediator.NAME) as mgs.aurora.moduleBase.view.ModuleBaseMediator;
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.moduleBase.model.ModuleProxy.NAME) as mgs.aurora.moduleBase.model.ModuleProxy;
            var loc3:*=loc1.getViewComponent() as flash.display.DisplayObjectContainer;
            var loc4:*;
            (loc4 = loc2.getData() as mgs.aurora.common.interfaces.module.IModuleMain).setup(arg1.getBody() as mgs.aurora.api.interfaces.IAuroraApi, loc3);
            return;
        }
    }
}


//          class ShutdownCommand
package mgs.aurora.moduleBase.controller 
{
    import mgs.aurora.moduleBase.model.*;
    import mgs.aurora.moduleBase.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class ShutdownCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ShutdownCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.removeMediator(mgs.aurora.moduleBase.view.ModuleBaseJunctionMediator.NAME);
            this.facade.removeMediator(mgs.aurora.moduleBase.view.ModuleBaseMediator.NAME);
            this.facade.removeProxy(mgs.aurora.moduleBase.model.ModuleProxy.NAME);
            return;
        }
    }
}


//          class StartupCommand
package mgs.aurora.moduleBase.controller 
{
    import mgs.aurora.moduleBase.model.*;
    import mgs.aurora.moduleBase.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerMediator(new mgs.aurora.moduleBase.view.ModuleBaseJunctionMediator());
            this.facade.registerMediator(new mgs.aurora.moduleBase.view.ModuleBaseMediator(arg1.getBody()));
            this.facade.registerProxy(new mgs.aurora.moduleBase.model.ModuleProxy());
            return;
        }
    }
}


//        package model
//          class ModuleProxy
package mgs.aurora.moduleBase.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class ModuleProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function ModuleProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public static const NAME:String="ModuleProxy";
    }
}


//        package view
//          class ModuleBaseJunctionMediator
package mgs.aurora.moduleBase.view 
{
    import mgs.aurora.moduleBase.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;
    
    public class ModuleBaseJunctionMediator extends org.puremvc.as3.multicore.utilities.pipes.plumbing.JunctionMediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function ModuleBaseJunctionMediator()
        {
            super(NAME, new org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction());
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
        }

        public override function handlePipeMessage(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):void
        {
            var loc1:*=arg1.getType();
            switch (loc1) 
            {
                case "setApi":
                {
                    this.sendNotification(mgs.aurora.moduleBase.ModuleBaseFacade.SETUP_MODULE, arg1.getBody());
                    break;
                }
                default:
                {
                    super.handlePipeMessage(arg1);
                    break;
                }
            }
            return;
        }

        public static const NAME:String="ModuleBaseJunctionMediator";
    }
}


//          class ModuleBaseMediator
package mgs.aurora.moduleBase.view 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class ModuleBaseMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function ModuleBaseMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }

        public static const NAME:String="ModuleBaseMediator";
    }
}


//        class ModuleBase
package mgs.aurora.moduleBase 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.module.*;
    import mgs.aurora.moduleBase.model.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;
    
    public class ModuleBase extends flash.display.Sprite implements org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeAware
    {
        public function ModuleBase()
        {
            super();
            if (this.stage) 
            {
                this.init();
            }
            else 
            {
                this.addEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
            }
            return;
        }

        protected function init(arg1:flash.events.Event=null):void
        {
            this.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.dispose);
            this._facade = mgs.aurora.moduleBase.ModuleBaseFacade.getInstance(this.getModuleName());
            this._facade.startup(this);
            var loc1:*=this._facade.retrieveProxy(mgs.aurora.moduleBase.model.ModuleProxy.NAME) as mgs.aurora.moduleBase.model.ModuleProxy;
            loc1.setData(this._moduleMain);
            this._moduleMain = null;
            return;
        }

        protected function getModuleName():String
        {
            return ModuleBase.NAME;
        }

        protected function dispose(arg1:flash.events.Event=null):void
        {
            this.removeEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
            this.removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.dispose);
            this._facade.shutdown();
            org.puremvc.as3.multicore.patterns.facade.Facade.removeCore(this.getModuleName());
            return;
        }

        public function get moduleMain():Object
        {
            return this._facade.retrieveProxy(mgs.aurora.moduleBase.model.ModuleProxy.NAME).getData();
        }

        public function acceptInputPipe(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):void
        {
            this._facade.sendNotification(org.puremvc.as3.multicore.utilities.pipes.plumbing.JunctionMediator.ACCEPT_INPUT_PIPE, arg2, arg1);
            return;
        }

        public function acceptOutputPipe(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):void
        {
            this._facade.sendNotification(org.puremvc.as3.multicore.utilities.pipes.plumbing.JunctionMediator.ACCEPT_OUTPUT_PIPE, arg2, arg1);
            return;
        }

        public static const NAME:String="ModuleBase";

        internal var _facade:mgs.aurora.moduleBase.ModuleBaseFacade;

        protected var _moduleMain:mgs.aurora.common.interfaces.module.IModuleMain;
    }
}


//        class ModuleBaseFacade
package mgs.aurora.moduleBase 
{
    import flash.display.*;
    import mgs.aurora.moduleBase.controller.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class ModuleBaseFacade extends org.puremvc.as3.multicore.patterns.facade.Facade implements org.puremvc.as3.multicore.interfaces.IFacade
    {
        public function ModuleBaseFacade(arg1:String)
        {
            super(arg1);
            return;
        }

        public function startup(arg1:flash.display.Sprite):void
        {
            this.sendNotification(mgs.aurora.moduleBase.ModuleBaseFacade.STARTUP, arg1);
            return;
        }

        public function shutdown():void
        {
            this.sendNotification(mgs.aurora.moduleBase.ModuleBaseFacade.SHUTDOWN);
            mgs.aurora.moduleBase.ModuleBaseFacade._instance = null;
            return;
        }

        protected override function initializeController():void
        {
            super.initializeController();
            this.registerCommand(mgs.aurora.moduleBase.ModuleBaseFacade.STARTUP, mgs.aurora.moduleBase.controller.StartupCommand);
            this.registerCommand(mgs.aurora.moduleBase.ModuleBaseFacade.SETUP_MODULE, mgs.aurora.moduleBase.controller.SetupModuleCommand);
            this.registerCommand(mgs.aurora.moduleBase.ModuleBaseFacade.SHUTDOWN, mgs.aurora.moduleBase.controller.ShutdownCommand);
            return;
        }

        public static function getInstance(arg1:String):mgs.aurora.moduleBase.ModuleBaseFacade
        {
            if (mgs.aurora.moduleBase.ModuleBaseFacade._instance == null) 
            {
                mgs.aurora.moduleBase.ModuleBaseFacade._instance = new ModuleBaseFacade(arg1);
            }
            return mgs.aurora.moduleBase.ModuleBaseFacade._instance;
        }

        public static const NAME:String="ModuleBaseFacade";

        public static const STARTUP:String=NAME + "/notes/startup";

        public static const SHUTDOWN:String=NAME + "/notes/shutdown";

        public static const SETUP_MODULE:String=NAME + "/notes/setup_module";

        internal static var _instance:mgs.aurora.moduleBase.ModuleBaseFacade;
    }
}


//      package modules
//        package contentLoader
//          package controller
//            class PrefetchCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import com.greensock.events.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import mgs.aurora.modules.contentLoader.vo.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PrefetchCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PrefetchCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this._request = mgs.aurora.modules.contentLoader.vo.RequiredFile(arg1.getBody());
            this._prefetchProxy = mgs.aurora.modules.contentLoader.model.PrefetchProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME));
            this.prefetch();
            return;
        }

        internal function prefetch():void
        {
            this._loader = this.getLoader();
            if (!this._loader) 
            {
                return;
            }
            var loc1:*=flash.events.IEventDispatcher(this._loader);
            loc1.addEventListener(flash.events.Event.COMPLETE, this.onComplete);
            loc1.addEventListener(flash.events.ProgressEvent.PROGRESS, this.onProgress);
            this._loader.start();
            return;
        }

        internal function onProgress(arg1:com.greensock.events.LoaderEvent):void
        {
            var loc1:*=this._loader.getResponseInfo().progress;
            if (!isNaN(loc1) && isFinite(loc1)) 
            {
                this.updateProgress(loc1);
            }
            return;
        }

        internal function updateProgress(arg1:Number):void
        {
            var loc1:*=new mgs.aurora.modules.loaderProgress.model.vo.ProgressData(this._request.file, arg1);
            mgs.aurora.modules.contentLoader.model.SignalProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME)).onRequriedProgress.dispatch(loc1);
            return;
        }

        internal function onComplete(arg1:com.greensock.events.LoaderEvent):void
        {
            if (this._request.size == flash.utils.ByteArray(this._loader.getResponseInfo().content).length || mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo(this._loader.getResponseInfo()).bytesLoaded == 0) 
            {
                this.saveRawBytes(this._request.file, this._loader.getResponseInfo().content, this._request.systemFile);
                this.updateProgress(1);
            }
            else 
            {
                this._request.retry = true;
                this._prefetchProxy.setFailedLoadOnPrefetch(this._request);
            }
            return;
        }

        internal function saveRawBytes(arg1:String, arg2:flash.utils.ByteArray, arg3:Boolean):void
        {
            this._prefetchProxy.saveRawBytes(arg1, arg2, arg3);
            return;
        }

        internal function getLoader():mgs.aurora.common.interfaces.loader.IURLLoader
        {
            var loc1:*=this.getContentType(this._request.file);
            var loc2:*=new mgs.aurora.common.net.URLLoadRequestInfo(this._request.sitePath, this.getFullPathName(), loc1);
            return new mgs.aurora.modules.contentLoader.model.files.CoreBinaryLoader(loc2);
        }

        internal function getFullPathName():String
        {
            var loc1:*=this._request.sitePath;
            if (this._request.retry) 
            {
                this._request.retry = false;
                loc1 = loc1 + ("?v=" + this._request.etag + "&uid=" + Math.floor(Math.random() * 9999).toString());
            }
            else if (this._request.etag.length > 0) 
            {
                loc1 = loc1 + ("?v=" + this._request.etag);
            }
            return loc1;
        }

        internal function getContentType(arg1:String):String
        {
            var loc1:*=this.getExtension(arg1);
            switch (loc1) 
            {
                case "swf":
                {
                    return mgs.aurora.common.enums.ContentType.SWF_CONTENT;
                }
                case "zip":
                {
                    return mgs.aurora.common.enums.ContentType.ZIP_CONTENT;
                }
                case "xml":
                {
                    return mgs.aurora.common.enums.ContentType.XML_CONTENT;
                }
            }
            return mgs.aurora.common.enums.ContentType.BIN_CONTENT;
        }

        public function getExtension(arg1:String):String
        {
            return arg1.substring(arg1.lastIndexOf(".") + 1, arg1.length).toLowerCase();
        }

        internal var _request:mgs.aurora.modules.contentLoader.vo.RequiredFile;

        internal var _bytesLoaded:uint;

        internal var _prefetchProxy:mgs.aurora.modules.contentLoader.model.PrefetchProxy;

        internal var _loader:mgs.aurora.common.interfaces.loader.IURLLoader;
    }
}


//            class QueueUrlRequestCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class QueueUrlRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function QueueUrlRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo;
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.URLQueueProxy.NAME) as mgs.aurora.modules.contentLoader.model.URLQueueProxy;
            loc2.addRequest(loc1);
            return;
        }
    }
}


//            class StartUrlRequestCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartUrlRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartUrlRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.URLQueueProxy.NAME) as mgs.aurora.modules.contentLoader.model.URLQueueProxy;
            if (loc1.hasNext() && !loc1.loading) 
            {
                loc1.loading = true;
                this.loadNextUrl(loc1.getNextRequest());
            }
            return;
        }

        internal function loadNextUrl(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=mgs.aurora.modules.contentLoader.model.PrefetchProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME));
            if (loc1.isPrefetchFile(arg1.url)) 
            {
                if (loc1.isFailedPrefecthFile(arg1.url)) 
                {
                    if (arg1.url.indexOf("?v=") > -1) 
                    {
                        loc2 = arg1.url + "&uid=" + Math.floor(Math.random() * 9999).toString();
                    }
                    else 
                    {
                        loc2 = arg1.url + "?uid=" + Math.floor(Math.random() * 9999).toString();
                    }
                    loc3 = new mgs.aurora.common.net.URLLoadRequestInfo(arg1.id, loc2, arg1.type, arg1.context, arg1.requestHeaders, arg1.variables, arg1.method, arg1.loaderDataFormat, arg1.fallback);
                    this.useUrlProxy(loc3);
                }
                else 
                {
                    this.usePrefetchProxy(arg1);
                }
            }
            else 
            {
                this.useUrlProxy(arg1);
            }
            return;
        }

        internal function usePrefetchProxy(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.PrefetchProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME));
            loc1.startLoad(arg1);
            return;
        }

        internal function useUrlProxy(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case mgs.aurora.common.enums.ContentType.BIN_CONTENT:
                {
                    this.facade.registerProxy(new mgs.aurora.modules.contentLoader.model.URLLoaderProxy(new mgs.aurora.modules.contentLoader.model.files.CoreBinaryLoader(arg1)));
                    break;
                }
                case mgs.aurora.common.enums.ContentType.SWF_CONTENT:
                {
                    this.facade.registerProxy(new mgs.aurora.modules.contentLoader.model.URLLoaderProxy(new mgs.aurora.modules.contentLoader.model.files.CoreSWFLoader(arg1)));
                    break;
                }
                case mgs.aurora.common.enums.ContentType.XML_CONTENT:
                {
                    this.facade.registerProxy(new mgs.aurora.modules.contentLoader.model.URLLoaderProxy(new mgs.aurora.modules.contentLoader.model.files.CoreXMLLoader(arg1)));
                    break;
                }
            }
            var loc1:*=mgs.aurora.modules.contentLoader.model.URLLoaderProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.URLLoaderProxy.NAME));
            loc1.start();
            return;
        }
    }
}


//            class StartupCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import __AS3__.vec.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.registerProxies(arg1);
            this.init();
            return;
        }

        internal function registerProxies(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody();
            this._prefetchFiles = loc1.requiredFiles;
            this.facade.registerProxy(new mgs.aurora.modules.contentLoader.model.PrefetchProxy());
            this.facade.registerProxy(new mgs.aurora.modules.contentLoader.model.URLQueueProxy());
            this.facade.registerProxy(new mgs.aurora.modules.contentLoader.model.SignalProxy());
            return;
        }

        internal function init():void
        {
            mgs.aurora.modules.contentLoader.model.PrefetchProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME)).init(this._prefetchFiles);
            return;
        }

        internal var _prefetchFiles:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;
    }
}


//            class StopAndClearCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import mgs.aurora.modules.contentLoader.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StopAndClearCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StopAndClearCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (this.facade.hasProxy(mgs.aurora.modules.contentLoader.model.URLLoaderProxy.NAME)) 
            {
                loc2 = mgs.aurora.modules.contentLoader.model.URLLoaderProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.URLLoaderProxy.NAME));
                loc2.stop();
            }
            if (this.facade.hasProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME)) 
            {
                (loc3 = mgs.aurora.modules.contentLoader.model.PrefetchProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME))).stopLoad();
            }
            var loc1:*=mgs.aurora.modules.contentLoader.model.URLQueueProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.URLQueueProxy.NAME));
            loc1.clear();
            return;
        }
    }
}


//            class TeardownCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import mgs.aurora.modules.contentLoader.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class TeardownCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function TeardownCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.removeProxy(mgs.aurora.modules.contentLoader.model.URLQueueProxy.NAME);
            this.facade.removeProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME);
            return;
        }
    }
}


//            class UrlLoadEventCommand
package mgs.aurora.modules.contentLoader.controller 
{
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import mgs.aurora.modules.contentLoader.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class UrlLoadEventCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function UrlLoadEventCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            var loc3:*=mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo(arg1.getBody());
            var loc4:*=arg1.getName();
            switch (loc4) 
            {
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STOPPED:
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.COMPLETED:
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.ERROR:
                {
                    this.facade.removeProxy(mgs.aurora.modules.contentLoader.model.URLLoaderProxy.NAME);
                    loc1 = this.facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.URLQueueProxy.NAME) as mgs.aurora.modules.contentLoader.model.URLQueueProxy;
                    loc1.loading = false;
                    break;
                }
            }
            loc4 = arg1.getName();
            switch (loc4) 
            {
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STOPPED:
                {
                    loc2.onStopped.dispatch(loc3);
                    break;
                }
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.COMPLETED:
                {
                    loc2.onComplete.dispatch(loc3);
                    break;
                }
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STARTED:
                {
                    loc2.onStarted.dispatch(loc3);
                    break;
                }
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.PROGRESS:
                {
                    loc2.onProgress.dispatch(loc3);
                    break;
                }
                case mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.ERROR:
                {
                    loc2.onError.dispatch(loc3);
                    break;
                }
            }
            if (arg1.getName() == mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.COMPLETED) 
            {
                this.sendNotification(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.START_URL_REQUEST);
            }
            return;
        }
    }
}


//          package model
//            package files
//              class AbstractLoader
package mgs.aurora.modules.contentLoader.model.files 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import com.greensock.loading.core.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.loader.*;
    
    public class AbstractLoader extends Object implements mgs.aurora.common.interfaces.loader.IURLLoader, flash.events.IEventDispatcher
    {
        public function AbstractLoader(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo)
        {
            super();
            this.init(arg1);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._eventDispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            if (this._eventDispatcher != null) 
            {
                return this._eventDispatcher.dispatchEvent(arg1);
            }
            return false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._eventDispatcher.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._eventDispatcher.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._eventDispatcher.willTrigger(arg1);
        }

        protected function init(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            this._requestInfo = arg1;
            this._responseInfo = new mgs.aurora.modules.contentLoader.model.files.URLRequestResponseInfo(arg1);
            this._eventDispatcher = new flash.events.EventDispatcher(this);
            return;
        }

        protected function getDefaultLoaderParams():Object
        {
            var loc1:*={};
            loc1.onOpen = this.onStart;
            loc1.onComplete = this.onComplete;
            loc1.onCancel = this.onCancel;
            loc1.onFail = this.onFail;
            loc1.onError = this.onError;
            loc1.onIOError = this.onIOError;
            loc1.onProgress = this.onProgress;
            loc1.onHTTPStatus = this.onHTTPStatus;
            loc1.onSecurityError = this.onSecurityError;
            loc1.autoDispose = true;
            return loc1;
        }

        protected function removeListeners():void
        {
            if (this._loader != null) 
            {
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.OPEN, this.onStart);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.COMPLETE, this.onComplete);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.CANCEL, this.onCancel);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.FAIL, this.onFail);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.PROGRESS, this.onProgress);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.HTTP_STATUS, this.onHTTPStatus);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.SECURITY_ERROR, this.onSecurityError);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.ERROR, this.onError);
                this._loader.removeEventListener(com.greensock.events.LoaderEvent.IO_ERROR, this.onIOError);
            }
            return;
        }

        protected function onIOError(arg1:com.greensock.events.LoaderEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        protected function onError(arg1:com.greensock.events.LoaderEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        protected function onSecurityError(arg1:com.greensock.events.LoaderEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        protected function onHTTPStatus(arg1:com.greensock.events.LoaderEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        protected function onStart(arg1:com.greensock.events.LoaderEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        protected function onComplete(arg1:com.greensock.events.LoaderEvent):void
        {
            this._responseInfo.bytesTotal = arg1.target.bytesTotal;
            this._responseInfo.bytesLoaded = arg1.target.bytesLoaded;
            this.dispatchEvent(arg1);
            return;
        }

        protected function onCancel(arg1:com.greensock.events.LoaderEvent):void
        {
            if (this._loader.status != com.greensock.loading.LoaderStatus.FAILED) 
            {
                this.dispatchEvent(arg1);
            }
            return;
        }

        protected function onFail(arg1:com.greensock.events.LoaderEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        protected function onProgress(arg1:com.greensock.events.LoaderEvent):void
        {
            this._responseInfo.bytesTotal = arg1.target.bytesTotal;
            this._responseInfo.bytesLoaded = arg1.target.bytesLoaded;
            this.dispatchEvent(arg1);
            return;
        }

        protected function createLoader():com.greensock.loading.core.LoaderCore
        {
            return null;
        }

        public function start():void
        {
            this._loader = this.createLoader();
            this._loader.load();
            return;
        }

        public function stop():void
        {
            if (this._loader != null) 
            {
                this._loader.cancel();
                this._loader.unload();
            }
            return;
        }

        public function dispose():void
        {
            this.removeListeners();
            this._loader = null;
            this._requestInfo = null;
            this._responseInfo = null;
            this._eventDispatcher = null;
            return;
        }

        public function getResponseInfo():mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo
        {
            return this._responseInfo;
        }

        protected var _eventDispatcher:flash.events.IEventDispatcher;

        protected var _requestInfo:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo;

        protected var _responseInfo:mgs.aurora.modules.contentLoader.model.files.URLRequestResponseInfo;

        protected var _loader:com.greensock.loading.core.LoaderCore;
    }
}


//              class CoreBinaryLoader
package mgs.aurora.modules.contentLoader.model.files 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import com.greensock.loading.core.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.loader.*;
    
    public class CoreBinaryLoader extends mgs.aurora.modules.contentLoader.model.files.AbstractLoader implements mgs.aurora.common.interfaces.loader.IURLLoader, flash.events.IEventDispatcher
    {
        public function CoreBinaryLoader(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo)
        {
            super(arg1);
            return;
        }

        protected override function createLoader():com.greensock.loading.core.LoaderCore
        {
            var loc1:*=getDefaultLoaderParams();
            loc1.format = "binary";
            _loader = new com.greensock.loading.DataLoader(_requestInfo.url, loc1);
            return _loader;
        }

        protected override function onComplete(arg1:com.greensock.events.LoaderEvent):void
        {
            _responseInfo.content = _loader.content;
            super.onComplete(arg1);
            return;
        }
    }
}


//              class CoreSWFLoader
package mgs.aurora.modules.contentLoader.model.files 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import com.greensock.loading.core.*;
    import com.greensock.loading.display.*;
    import flash.events.*;
    import flash.system.*;
    import mgs.aurora.common.interfaces.loader.*;
    
    public class CoreSWFLoader extends mgs.aurora.modules.contentLoader.model.files.AbstractLoader implements mgs.aurora.common.interfaces.loader.IURLLoader, flash.events.IEventDispatcher
    {
        public function CoreSWFLoader(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo)
        {
            super(arg1);
            return;
        }

        protected override function createLoader():com.greensock.loading.core.LoaderCore
        {
            var loc1:*=getDefaultLoaderParams();
            if (flash.system.Security.sandboxType == flash.system.Security.REMOTE) 
            {
                loc1.context = _requestInfo.context != null ? _requestInfo.context : new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain, flash.system.SecurityDomain.currentDomain);
            }
            _loader = new com.greensock.loading.SWFLoader(_requestInfo.url, loc1);
            return _loader;
        }

        protected override function onComplete(arg1:com.greensock.events.LoaderEvent):void
        {
            _responseInfo.content = com.greensock.loading.display.ContentDisplay(_loader.content).rawContent;
            super.onComplete(arg1);
            return;
        }
    }
}


//              class CoreXMLLoader
package mgs.aurora.modules.contentLoader.model.files 
{
    import com.greensock.events.*;
    import com.greensock.loading.*;
    import com.greensock.loading.core.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.loader.*;
    
    public class CoreXMLLoader extends mgs.aurora.modules.contentLoader.model.files.AbstractLoader implements mgs.aurora.common.interfaces.loader.IURLLoader, flash.events.IEventDispatcher
    {
        public function CoreXMLLoader(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo)
        {
            super(arg1);
            return;
        }

        protected override function createLoader():com.greensock.loading.core.LoaderCore
        {
            var loc1:*=getDefaultLoaderParams();
            loc1.integrateProgress = false;
            _loader = new com.greensock.loading.XMLLoader(_requestInfo.url, loc1);
            return _loader;
        }

        protected override function onComplete(arg1:com.greensock.events.LoaderEvent):void
        {
            XML.ignoreComments = true;
            XML.ignoreWhitespace = true;
            this._responseInfo.content = new XML(_loader.content.toXMLString());
            super.onComplete(arg1);
            return;
        }

        protected override function onFail(arg1:com.greensock.events.LoaderEvent):void
        {
            if (!(_requestInfo.fallback == null) && !(_requestInfo.fallback.xml == null)) 
            {
                XML.ignoreComments = true;
                XML.ignoreWhitespace = true;
                this._responseInfo.content = _requestInfo.fallback.xml;
                arg1 = new com.greensock.events.LoaderEvent(com.greensock.events.LoaderEvent.COMPLETE, arg1.target);
                super.onComplete(arg1);
            }
            else 
            {
                super.onFail(arg1);
            }
            return;
        }
    }
}


//              class URLRequestResponseInfo
package mgs.aurora.modules.contentLoader.model.files 
{
    import mgs.aurora.common.interfaces.loader.*;
    
    public class URLRequestResponseInfo extends Object implements mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo
    {
        public function URLRequestResponseInfo(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo, arg2:*=null, arg3:uint=0, arg4:uint=1, arg5:int=0)
        {
            super();
            this._request = arg1;
            this._content = arg2;
            this._bytesLoaded = arg3;
            this._bytesTotal = arg4;
            this._status = arg5;
            return;
        }

        public function get request():mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo
        {
            return this._request;
        }

        public function set request(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            this._request = arg1;
            return;
        }

        public function get content():*
        {
            return this._content;
        }

        public function set content(arg1:*):void
        {
            this._content = arg1;
            return;
        }

        public function get bytesLoaded():uint
        {
            return this._bytesLoaded;
        }

        public function set bytesLoaded(arg1:uint):void
        {
            this._bytesLoaded = arg1;
            return;
        }

        public function get bytesTotal():uint
        {
            return this._bytesTotal;
        }

        public function set bytesTotal(arg1:uint):void
        {
            this._bytesTotal = arg1;
            return;
        }

        public function get progress():Number
        {
            return this.bytesLoaded / this.bytesTotal;
        }

        public function get status():int
        {
            return this._status;
        }

        public function set status(arg1:int):void
        {
            this._status = arg1;
            return;
        }

        protected var _request:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo;

        protected var _content:*;

        protected var _bytesLoaded:uint=0;

        protected var _bytesTotal:uint=1;

        protected var _status:int;
    }
}


//              class URLResponseInfo
package mgs.aurora.modules.contentLoader.model.files 
{
    import mgs.aurora.common.interfaces.loader.*;
    
    public class URLResponseInfo extends Object implements mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo
    {
        public function URLResponseInfo()
        {
            super();
            return;
        }

        public function get bytesLoaded():uint
        {
            return this._bytesLoaded;
        }

        public function get bytesTotal():uint
        {
            return this._bytesTotal;
        }

        public function get content():*
        {
            return this._content;
        }

        public function set content(arg1:*):void
        {
            this._content = arg1;
            return;
        }

        public function get progress():Number
        {
            return 1;
        }

        public function get request():mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo
        {
            return this._request;
        }

        public function set request(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            this._request = arg1;
            return;
        }

        public function get status():int
        {
            return this._status;
        }

        internal var _bytesTotal:uint;

        internal var _bytesLoaded:uint;

        internal var _content:*;

        internal var _request:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo;

        internal var _status:int;
    }
}


//              class Utils
package mgs.aurora.modules.contentLoader.model.files 
{
    import __AS3__.vec.*;
    import com.mgs.utils.*;
    import mgs.aurora.modules.contentLoader.vo.*;
    
    public class Utils extends Object
    {
        public function Utils()
        {
            super();
            return;
        }

        public static function getRequiredFiles(arg1:XML, arg2:Boolean):__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>
        {
            var loc1:*=new Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>();
            var loc2:*=arg1.gameSettings.@gameId == undefined ? "" : "Games/" + arg1.gameSettings.@gameId.toLowerCase() + "/";
            if (!arg2) 
            {
                loc2 = "";
            }
            parseDependenciesNodes(loc1, arg1.systemDependencies.dependency, "System/Aurora/", true, arg2);
            parseDependenciesNodes(loc1, arg1.gameSettings.dependency, loc2, false, arg2);
            return loc1;
        }

        public static function getExternallyLoadedBytes(arg1:XMLList, arg2:Boolean):uint
        {
            var gameSettings:XMLList;
            var t3Game:Boolean;
            var nextgenwrapper:XMLList;
            var neowrapper:XMLList;
            var externalBytes:int;
            var node:XML;

            var loc1:*;
            nextgenwrapper = null;
            neowrapper = null;
            externalBytes = 0;
            node = null;
            gameSettings = arg1;
            t3Game = arg2;
            var loc3:*=0;
            var loc4:*=gameSettings.dependency;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@file.toLowerCase() == "nextgenwrapper.swf") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            nextgenwrapper = loc2;
            loc3 = 0;
            loc4 = gameSettings.dependency;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@file.toLowerCase() == "avm1shim.swf") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            neowrapper = loc2;
            if (nextgenwrapper.length() == 0 && neowrapper.length() == 0 && t3Game == false) 
            {
                return 0;
            }
            externalBytes = 0;
            loc2 = 0;
            loc5 = 0;
            loc6 = gameSettings.dependency;
            loc4 = new XMLList("");
            for each (var loc7:* in loc6) 
            {
                var loc8:*;
                with (loc8 = loc7) 
                {
                    if (@prefetch == "0") 
                    {
                        loc4[loc5] = loc7;
                    }
                }
            }
            loc3 = loc4;
            for each (node in loc3) 
            {
                externalBytes = externalBytes + int(node.@size);
            }
            return externalBytes;
        }

        internal static function parseDependenciesNodes(arg1:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>, arg2:XMLList, arg3:String, arg4:Boolean, arg5:Boolean):void
        {
            var files:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;
            var nodes:XMLList;
            var filePrefix:String;
            var system:Boolean;
            var t3game:Boolean;
            var fileNode:XML;

            var loc1:*;
            fileNode = null;
            files = arg1;
            nodes = arg2;
            filePrefix = arg3;
            system = arg4;
            t3game = arg5;
            var loc2:*=0;
            var loc5:*=0;
            var loc6:*=nodes;
            var loc4:*=new XMLList("");
            for each (var loc7:* in loc6) 
            {
                var loc8:*;
                with (loc8 = loc7) 
                {
                    if (@prefetch == "1") 
                    {
                        loc4[loc5] = loc7;
                    }
                }
            }
            var loc3:*=loc4;
            for each (fileNode in loc3) 
            {
                files.push(createRequiredFile(fileNode, filePrefix, system, t3game));
            }
            return;
        }

        internal static function createRequiredFile(arg1:XML, arg2:String, arg3:Boolean, arg4:Boolean):mgs.aurora.modules.contentLoader.vo.RequiredFile
        {
            var loc1:*=String(arg1.@file);
            if (arg4 && !arg3) 
            {
                loc1 = String(arg1.@file).toLocaleLowerCase();
            }
            var loc2:*=uint(arg1.@size);
            var loc3:*=String(arg1.@etag);
            var loc4:*=new mgs.aurora.modules.contentLoader.vo.RequiredFile(loc1, loc2, loc3, arg2, arg3);
            if (arg1.contains.length() != 0) 
            {
                loc4.subfiles = com.mgs.utils.StringUtils.csvToVector_string(arg1.contains.@files);
            }
            return loc4;
        }

        public static function cleanUrl(arg1:String):String
        {
            arg1 = trimEtag(arg1);
            return trimPath(arg1);
        }

        public static function trimPath(arg1:String):String
        {
            return arg1.substring(arg1.lastIndexOf("/") + 1).toLowerCase();
        }

        public static function trimEtag(arg1:String):String
        {
            var loc1:*=arg1.indexOf("?");
            if (loc1 > -1) 
            {
                arg1 = arg1.substring(0, loc1);
            }
            return arg1;
        }

        public static function isSystemFileRequest(arg1:String):Boolean
        {
            if (arg1.indexOf("System/") != -1) 
            {
                return true;
            }
            return false;
        }

        public static function addPrefix(arg1:String, arg2:Boolean):String
        {
            return arg2 ? "system_" + arg1.toLowerCase() : "game_" + arg1.toLowerCase();
        }
    }
}


//            class PrefetchProxy
package mgs.aurora.modules.contentLoader.model 
{
    import __AS3__.vec.*;
    import com.mgs.utils.*;
    import deng.fzip.*;
    import flash.display.*;
    import flash.events.*;
    import flash.system.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import mgs.aurora.modules.contentLoader.notifications.*;
    import mgs.aurora.modules.contentLoader.vo.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class PrefetchProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function PrefetchProxy()
        {
            this._bytesMap = new flash.utils.Dictionary();
            this._prefetchState = new flash.utils.Dictionary();
            this._failedLoadPrefetch = new flash.utils.Dictionary();
            super(NAME);
            return;
        }

        public function isPrefetchFile(arg1:String):Boolean
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(arg1);
            var loc2:*=mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(loc1, mgs.aurora.modules.contentLoader.model.files.Utils.isSystemFileRequest(arg1));
            return loc2 in this._bytesMap;
        }

        public function isFailedPrefecthFile(arg1:String):Boolean
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(arg1);
            loc1 = mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(loc1, mgs.aurora.modules.contentLoader.model.files.Utils.isSystemFileRequest(arg1));
            if (this._prefetchState[loc1] == mgs.aurora.modules.contentLoader.model.PrefetchProxy.FAILED) 
            {
                return true;
            }
            return false;
        }

        public function isPrefetchFileLoaded(arg1:String):Boolean
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(arg1);
            return this._prefetchState[loc1];
        }

        public function areAllPrefetchFilesProcessed():Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._prefetchState;
            for each (loc1 in loc3) 
            {
                if (loc1 != mgs.aurora.modules.contentLoader.model.PrefetchProxy.LOADING) 
                {
                    continue;
                }
                return false;
            }
            return true;
        }

        public function didAnyPrefetchFilesFail():Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._prefetchState;
            for each (loc1 in loc3) 
            {
                if (loc1 != mgs.aurora.modules.contentLoader.model.PrefetchProxy.FAILED) 
                {
                    continue;
                }
                return true;
            }
            return false;
        }

        public function clearPrefetchData():void
        {
            this._bytesMap = null;
            this._bytesMap = new flash.utils.Dictionary();
            this._prefetchState = null;
            this._prefetchState = new flash.utils.Dictionary();
            this._failedLoadPrefetch = null;
            this._failedLoadPrefetch = new flash.utils.Dictionary();
            return;
        }

        public function init(arg1:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>):void
        {
            var loc1:*=null;
            if (arg1.length != 0) 
            {
                this.emptyPrefetch = false;
            }
            else 
            {
                this.emptyPrefetch = true;
            }
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._prefetchState[mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(loc1.file, loc1.systemFile)] = mgs.aurora.modules.contentLoader.model.PrefetchProxy.LOADING;
                facade.sendNotification(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.PREFETCH_REQUEST, loc1);
                this.extractRawFileNames(loc1);
            }
            return;
        }

        public function setFailedLoadOnPrefetch(arg1:mgs.aurora.modules.contentLoader.vo.RequiredFile):void
        {
            this._prefetchState[mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(arg1.file, arg1.systemFile)] = mgs.aurora.modules.contentLoader.model.PrefetchProxy.FAILED;
            this._failedLoadPrefetch[mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(arg1.file, arg1.systemFile)] = arg1;
            if (this.areAllPrefetchFilesProcessed()) 
            {
                mgs.aurora.modules.contentLoader.model.SignalProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME)).onPrefetchCompleted.dispatch();
            }
            return;
        }

        internal function extractRawFileNames(arg1:mgs.aurora.modules.contentLoader.vo.RequiredFile):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(arg1.file, arg1.systemFile);
            if (arg1.subfiles.length != 0) 
            {
                var loc3:*=0;
                var loc4:*=arg1.subfiles;
                for each (loc2 in loc4) 
                {
                    this._bytesMap[loc1] = null;
                }
            }
            else 
            {
                this._bytesMap[loc1] = null;
            }
            return;
        }

        public function saveRawBytes(arg1:String, arg2:flash.utils.ByteArray, arg3:Boolean):void
        {
            var loc2:*=null;
            var loc1:*=false;
            if ("zip" != com.mgs.utils.FileUtils.getFileExtention(arg1)) 
            {
                loc2 = mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(arg1, arg3);
                this._bytesMap[loc2] = arg2;
                loc1 = this.doesMatchCurrentRequest(arg1);
            }
            else 
            {
                loc1 = this.unpackZip(arg2);
            }
            this._prefetchState[mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(arg1, arg3)] = mgs.aurora.modules.contentLoader.model.PrefetchProxy.LOADED;
            if (this.areAllPrefetchFilesProcessed()) 
            {
                mgs.aurora.modules.contentLoader.model.SignalProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME)).onPrefetchCompleted.dispatch();
            }
            return;
        }

        internal function unpackZip(arg1:flash.utils.ByteArray):Boolean
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=false;
            var loc2:*=new deng.fzip.FZip();
            loc2.loadBytes(arg1);
            var loc3:*=0;
            while (loc3 < loc2.getFileCount()) 
            {
                loc5 = (loc4 = loc2.getFileAt(loc3)).filename.toLowerCase();
                loc6 = mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(loc5, mgs.aurora.modules.contentLoader.model.files.Utils.isSystemFileRequest(this._currentRequest.url));
                this._bytesMap[loc6 + loc5] = loc4.content;
                if (loc1 == false && this.doesMatchCurrentRequest(loc5)) 
                {
                    loc1 = true;
                }
                ++loc3;
            }
            return loc1;
        }

        internal function doesMatchCurrentRequest(arg1:String):Boolean
        {
            if (this._currentRequest) 
            {
                if (mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(this._currentRequest.url) == arg1.toLowerCase()) 
                {
                    return true;
                }
            }
            return false;
        }

        internal function tryProcessCurrentRequest():void
        {
            if (this._currentRequest) 
            {
                this.processCurrentRequest();
            }
            return;
        }

        public function stopLoad():void
        {
            this._currentRequest = null;
            return;
        }

        public function startLoad(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            if (this._currentRequest) 
            {
                throw new Error("Prfetch is currently serving up " + this._currentRequest.url + " so cannot honour the request for " + arg1.url);
            }
            this._currentRequest = arg1;
            this.processCurrentRequest();
            return;
        }

        internal function processCurrentRequest():void
        {
            if (this._currentRequest == null) 
            {
                return;
            }
            var loc1:*=mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(this._currentRequest.url);
            loc1 = mgs.aurora.modules.contentLoader.model.files.Utils.addPrefix(loc1, mgs.aurora.modules.contentLoader.model.files.Utils.isSystemFileRequest(this._currentRequest.url));
            this.loadCurrentRequest(loc1);
            return;
        }

        internal function loadCurrentRequest(arg1:String):void
        {
            if (!arg1 in this._bytesMap) 
            {
                throw new Error("Prefectch cannot find the bytes map for " + arg1);
            }
            if (this._bytesMap[arg1] == null) 
            {
                return;
            }
            var loc1:*=this._bytesMap[arg1];
            var loc2:*=this._currentRequest.type;
            switch (loc2) 
            {
                case mgs.aurora.common.enums.ContentType.BIN_CONTENT:
                {
                    this.loadBinary(loc1);
                    break;
                }
                case mgs.aurora.common.enums.ContentType.SWF_CONTENT:
                {
                    this.loadSWF(loc1);
                    break;
                }
                case mgs.aurora.common.enums.ContentType.XML_CONTENT:
                {
                    this.loadXML(loc1);
                    break;
                }
                default:
                {
                    throw new Error("Prefetch proxy not expecting to server up " + this._currentRequest.type);
                }
            }
            return;
        }

        internal function loadBinary(arg1:flash.utils.ByteArray):void
        {
            var bytes:flash.utils.ByteArray;
            var response:mgs.aurora.modules.contentLoader.model.files.URLResponseInfo;
            var timer:flash.utils.Timer;

            var loc1:*;
            response = null;
            bytes = arg1;
            response = new mgs.aurora.modules.contentLoader.model.files.URLResponseInfo();
            response.content = bytes;
            response.request = this._currentRequest;
            timer = new flash.utils.Timer(1, 1);
            timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, function (arg1:flash.events.Event):void
            {
                notifyLoadComplete(response);
                return;
            })
            timer.start();
            return;
        }

        internal function loadXML(arg1:flash.utils.ByteArray):void
        {
            var bytes:flash.utils.ByteArray;
            var xml:XML;
            var response:mgs.aurora.modules.contentLoader.model.files.URLResponseInfo;
            var timer:flash.utils.Timer;

            var loc1:*;
            response = null;
            bytes = arg1;
            bytes.position = 0;
            xml = new XML(bytes.readUTFBytes(bytes.length));
            response = new mgs.aurora.modules.contentLoader.model.files.URLResponseInfo();
            response.content = xml;
            response.request = this._currentRequest;
            timer = new flash.utils.Timer(1, 1);
            timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, function (arg1:flash.events.Event):void
            {
                notifyLoadComplete(response);
                return;
            })
            timer.start();
            return;
        }

        internal function notifyLoadComplete(arg1:mgs.aurora.modules.contentLoader.model.files.URLResponseInfo):void
        {
            if (this._currentRequest == null) 
            {
                return;
            }
            this._currentRequest = null;
            var loc1:*=new mgs.aurora.modules.loaderProgress.model.vo.ProgressData(mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(arg1.request.url), 1);
            mgs.aurora.modules.contentLoader.model.SignalProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME)).onPrefetchServedProgress.dispatch(loc1);
            mgs.aurora.modules.contentLoader.model.SignalProxy(facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME)).onProgress.dispatch(arg1);
            sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.COMPLETED, arg1);
            return;
        }

        internal function loadSWF(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=new flash.display.Loader();
            com.mgs.utils.Events.addOneTimeListener(loc1.contentLoaderInfo, flash.events.Event.COMPLETE, this.onLoaded);
            var loc2:*=flash.system.LoaderContext(this._currentRequest.context);
            loc1.loadBytes(arg1, new flash.system.LoaderContext(false, loc2.applicationDomain));
            return;
        }

        internal function onLoaded(arg1:flash.events.Event):void
        {
            if (this._currentRequest == null) 
            {
                return;
            }
            var loc1:*=new mgs.aurora.modules.contentLoader.model.files.URLResponseInfo();
            loc1.content = arg1.currentTarget.content;
            loc1.request = this._currentRequest;
            this.notifyLoadComplete(loc1);
            return;
        }

        public static const FAILED:String="FAILED";

        public static const LOADING:String="LOADING";

        public static const LOADED:String="LOADED";

        public static const NAME:String="PrefetchProxy";

        internal var _bytesLoaded:uint;

        internal var _bytesMap:flash.utils.Dictionary;

        internal var _currentRequest:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo=null;

        internal var _prefetchState:flash.utils.Dictionary;

        public var emptyPrefetch:Boolean=true;

        internal var _failedLoadPrefetch:flash.utils.Dictionary;
    }
}


//            class SignalProxy
package mgs.aurora.modules.contentLoader.model 
{
    import flash.utils.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.osflash.signals.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SignalProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SignalProxy()
        {
            super(NAME, new flash.utils.Dictionary());
            return;
        }

        public override function onRegister():void
        {
            this.data["onStarted"] = new org.osflash.signals.Signal(mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
            this.data["onStopped"] = new org.osflash.signals.Signal(mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
            this.data["onComplete"] = new org.osflash.signals.Signal(mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
            this.data["onProgress"] = new org.osflash.signals.Signal(mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
            this.data["onError"] = new org.osflash.signals.Signal(mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
            this.data["onRequiredProgress"] = new org.osflash.signals.Signal(mgs.aurora.modules.loaderProgress.model.vo.ProgressData);
            this.data["onPrefetchServedProgres"] = new org.osflash.signals.Signal(mgs.aurora.modules.loaderProgress.model.vo.ProgressData);
            this.data["onPrefetchCompleted"] = new org.osflash.signals.Signal();
            return;
        }

        public override function onRemove():void
        {
            this.onStarted.removeAll();
            this.onStopped.removeAll();
            this.onComplete.removeAll();
            this.onProgress.removeAll();
            this.onPrefetchServedProgress.removeAll();
            this.onRequriedProgress.removeAll();
            this.onPrefetchCompleted.removeAll();
            this.data = null;
            return;
        }

        public function get onRequriedProgress():org.osflash.signals.Signal
        {
            return this.data["onRequiredProgress"];
        }

        public function get onPrefetchServedProgress():org.osflash.signals.Signal
        {
            return this.data["onPrefetchServedProgres"];
        }

        public function get onStarted():org.osflash.signals.Signal
        {
            return this.data["onStarted"];
        }

        public function get onStopped():org.osflash.signals.Signal
        {
            return this.data["onStopped"];
        }

        public function get onComplete():org.osflash.signals.Signal
        {
            return this.data["onComplete"];
        }

        public function get onProgress():org.osflash.signals.Signal
        {
            return this.data["onProgress"];
        }

        public function get onError():org.osflash.signals.Signal
        {
            return this.data["onError"];
        }

        public function get onPrefetchCompleted():org.osflash.signals.Signal
        {
            return this.data["onPrefetchCompleted"];
        }

        public static const NAME:String="SignalProxy";
    }
}


//            class URLLoaderProxy
package mgs.aurora.modules.contentLoader.model 
{
    import com.greensock.events.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class URLLoaderProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function URLLoaderProxy(arg1:mgs.aurora.common.interfaces.loader.IURLLoader)
        {
            super(NAME, arg1);
            return;
        }

        public function start():void
        {
            this.loader.start();
            return;
        }

        public function stop():void
        {
            var loc1:*=null;
            if (this.data != null) 
            {
                loc1 = flash.events.IEventDispatcher(this.data);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.OPEN, this.onStart);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.COMPLETE, this.onComplete);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.CANCEL, this.onCancel);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.FAIL, this.onFail);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.PROGRESS, this.onProgress);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.IO_ERROR, this.onError);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.ERROR, this.onError);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.SECURITY_ERROR, this.onError);
                loc1.removeEventListener(com.greensock.events.LoaderEvent.HTTP_STATUS, this.onStatus);
            }
            if (this._timer != null) 
            {
                this._timer.stop();
                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onTimer);
                this._timer = null;
            }
            if (this.loader != null) 
            {
                this.loader.stop();
            }
            return;
        }

        public override function onRegister():void
        {
            var loc1:*=flash.events.IEventDispatcher(this.data);
            loc1.addEventListener(com.greensock.events.LoaderEvent.OPEN, this.onStart);
            loc1.addEventListener(com.greensock.events.LoaderEvent.COMPLETE, this.onComplete);
            loc1.addEventListener(com.greensock.events.LoaderEvent.CANCEL, this.onCancel);
            loc1.addEventListener(com.greensock.events.LoaderEvent.FAIL, this.onFail);
            loc1.addEventListener(com.greensock.events.LoaderEvent.PROGRESS, this.onProgress);
            loc1.addEventListener(com.greensock.events.LoaderEvent.IO_ERROR, this.onError);
            loc1.addEventListener(com.greensock.events.LoaderEvent.ERROR, this.onError);
            loc1.addEventListener(com.greensock.events.LoaderEvent.SECURITY_ERROR, this.onError);
            loc1.addEventListener(com.greensock.events.LoaderEvent.HTTP_STATUS, this.onStatus);
            return;
        }

        public override function onRemove():void
        {
            var loc1:*=flash.events.IEventDispatcher(this.data);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.OPEN, this.onStart);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.COMPLETE, this.onComplete);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.CANCEL, this.onCancel);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.FAIL, this.onFail);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.PROGRESS, this.onProgress);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.IO_ERROR, this.onError);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.ERROR, this.onError);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.SECURITY_ERROR, this.onError);
            loc1.removeEventListener(com.greensock.events.LoaderEvent.HTTP_STATUS, this.onStatus);
            this.loader.dispose();
            this.data = null;
            if (this._timer != null) 
            {
                this._timer.stop();
                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onTimer);
                this._timer = null;
            }
            return;
        }

        internal function onStatus(arg1:com.greensock.events.LoaderEvent):void
        {
            return;
        }

        internal function onError(arg1:com.greensock.events.LoaderEvent):void
        {
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.ERROR, this.loader.getResponseInfo());
            return;
        }

        internal function onFail(arg1:com.greensock.events.LoaderEvent):void
        {
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.ERROR, this.loader.getResponseInfo());
            return;
        }

        internal function onComplete(arg1:com.greensock.events.LoaderEvent):void
        {
            this._timer = new flash.utils.Timer(10);
            this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.onTimer);
            this._timer.start();
            return;
        }

        internal function onTimer(arg1:flash.events.TimerEvent):void
        {
            Debugger.trace("File load completed - " + this.loader.getResponseInfo().request.url, "SYSTEM - ContentLoader", this);
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onTimer);
            this._timer = null;
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.COMPLETED, this.loader.getResponseInfo());
            return;
        }

        internal function onProgress(arg1:com.greensock.events.LoaderEvent):void
        {
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.PROGRESS, this.loader.getResponseInfo());
            return;
        }

        internal function onCancel(arg1:com.greensock.events.LoaderEvent):void
        {
            Debugger.trace("File load stopped - " + this.loader.getResponseInfo().request.url, "SYSTEM - ContentLoader", this);
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STOPPED, this.loader.getResponseInfo());
            return;
        }

        internal function onStart(arg1:com.greensock.events.LoaderEvent):void
        {
            Debugger.trace("File load started - " + this.loader.getResponseInfo().request.url, "SYSTEM - ContentLoader", this);
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STARTED, this.loader.getResponseInfo());
            return;
        }

        public function get loader():mgs.aurora.common.interfaces.loader.IURLLoader
        {
            return mgs.aurora.common.interfaces.loader.IURLLoader(this.data);
        }

        public static const NAME:String="URLLoaderProxy";

        internal var _timer:flash.utils.Timer;
    }
}


//            class URLQueueProxy
package mgs.aurora.modules.contentLoader.model 
{
    import __AS3__.vec.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class URLQueueProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function URLQueueProxy()
        {
            super(NAME, new Vector.<mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo>());
            return;
        }

        public function set loading(arg1:Boolean):void
        {
            this._loading = arg1;
            return;
        }

        public function get loading():Boolean
        {
            return this._loading;
        }

        public function addRequest(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            this.list.push(arg1);
            if (!this._loading) 
            {
                this.sendNotification(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.START_URL_REQUEST);
            }
            return;
        }

        public function hasNext():Boolean
        {
            return this.list.length > 0;
        }

        public function clear():void
        {
            this.setData(new Vector.<mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo>());
            this.loading = false;
            return;
        }

        public function getNextRequest():mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo
        {
            return this.list.shift();
        }

        protected function get list():__AS3__.vec.Vector.<mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo>
        {
            return this.data as Vector.<mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo>;
        }

        public static const NAME:String="URLQueueProxy";

        protected var _loading:Boolean=false;
    }
}


//          package notifications
//            class LoaderNotifications
package mgs.aurora.modules.contentLoader.notifications 
{
    public class LoaderNotifications extends Object
    {
        public function LoaderNotifications()
        {
            super();
            return;
        }

        public static const NAME:String="loader";

        public static const STARTUP:String=NAME + "/notes/startup";

        public static const PREFETCH_REQUEST:String=NAME + "/notes/prefetch_request";

        public static const QUEUE_URL_REQUEST:String=NAME + "/notes/queue_url_request";

        public static const START_URL_REQUEST:String=NAME + "/notes/start_url_request";

        public static const STOP_LOADING:String=NAME + "/notes/stop_loading";

        public static const CONNECT_MODULE_TO_JUNCTION:String=NAME + "/notes/connect_module_to_junction";

        public static const SEND_PIPE_MESSAGE:String=NAME + "/notes/send_pipe_message";

        public static const CLEANUP_STATE:String=NAME + "/notes/cleanup_state";

        public static const STATE_ENTERED:String=NAME + "/notes/state_entered";

        public static const EXTERNAL_DATA_INITIALIZED:String=NAME + "/notes/external_data_initialized";

        public static const LOADER_REQUESTED:String=NAME + "/notes/loader_requested";

        public static const LOADER_TRANSFERED:String=NAME + "/notes/loader_transfered";

        public static const EXTERNAL_DATA_REQUESTED:String=NAME + "/notes/external_data_requested";

        public static const EXTERNAL_DATA_TRANSFERED:String=NAME + "/notes/external_data_transfered";

        public static const INITIAL_CORE_SETUP_COMPLETED:String=NAME + "/notes/initial_core_setup_completed";

        public static const PREFETCH_COMPLETED:String=NAME + "/notes/prefetch_completed";
    }
}


//            class URLLoaderNotifications
package mgs.aurora.modules.contentLoader.notifications 
{
    public class URLLoaderNotifications extends Object
    {
        public function URLLoaderNotifications()
        {
            super();
            return;
        }

        internal static const NAME:String="urlloader_notifications";

        public static const HTTPSTATUS:String=NAME + "/notes/httpstatus";

        public static const STARTED:String=NAME + "/notes/started";

        public static const STOPPED:String=NAME + "/notes/stopped";

        public static const PROGRESS:String=NAME + "/notes/progress";

        public static const COMPLETED:String=NAME + "/notes/completed";

        public static const INIT:String=NAME + "/notes/init";

        public static const ERROR:String=NAME + "/notes/error";
    }
}


//          package vo
//            class RequiredFile
package mgs.aurora.modules.contentLoader.vo 
{
    import __AS3__.vec.*;
    
    public class RequiredFile extends Object
    {
        public function RequiredFile(arg1:String, arg2:uint, arg3:String, arg4:String, arg5:Boolean, arg6:Boolean=false)
        {
            this.subfiles = new Vector.<String>();
            super();
            this.etag = arg3;
            this.size = arg2;
            this.file = arg1;
            this.filePrefix = arg4;
            this.systemFile = arg5;
            this.sitePath = this.filePrefix + this.file;
            this.retry = arg6;
            return;
        }

        public var file:String;

        public var size:uint;

        public var etag:String;

        public var filePrefix:String;

        public var systemFile:Boolean;

        public var sitePath:String;

        public var retry:Boolean;

        public var subfiles:__AS3__.vec.Vector.<String>;
    }
}


//          class ContentLoader
package mgs.aurora.modules.contentLoader 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import org.osflash.signals.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class ContentLoader extends Object
    {
        public function ContentLoader(arg1:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>)
        {
            super();
            this._requriedFiles = arg1;
            this.init();
            return;
        }

        internal function init(arg1:flash.events.Event=null):void
        {
            this._facade = mgs.aurora.modules.contentLoader.ContentLoaderFacade.getInstance("ContentLoader", this._requriedFiles);
            this._facade.startup();
            return;
        }

        public function dispose(arg1:flash.events.Event=null):void
        {
            this._facade.teardown();
            org.puremvc.as3.multicore.patterns.facade.Facade.removeCore("ContentLoader");
            return;
        }

        public function loadFile(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            this._facade.loadFile(arg1);
            return;
        }

        public function stopLoading():void
        {
            this._facade.stopLoading();
            return;
        }

        public function get onStarted():org.osflash.signals.Signal
        {
            return this._facade.onStarted;
        }

        public function get onStopped():org.osflash.signals.Signal
        {
            return this._facade.onStopped;
        }

        public function get onComplete():org.osflash.signals.Signal
        {
            return this._facade.onComplete;
        }

        public function get onProgress():org.osflash.signals.Signal
        {
            return this._facade.onProgress;
        }

        public function get onPrefetchServedProgress():org.osflash.signals.Signal
        {
            return this._facade.onPrefetchServedProgress;
        }

        public function get onRequriedProgress():org.osflash.signals.Signal
        {
            return this._facade.onRequriedProgress;
        }

        public function get onError():org.osflash.signals.Signal
        {
            return this._facade.onError;
        }

        public function get onPrefetchComplete():org.osflash.signals.Signal
        {
            return this._facade.onPrefetchComplete;
        }

        public function clearPrefetchData():void
        {
            var loc1:*=null;
            if (this._facade.hasProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME)) 
            {
                loc1 = this._facade.retrieveProxy(mgs.aurora.modules.contentLoader.model.PrefetchProxy.NAME) as mgs.aurora.modules.contentLoader.model.PrefetchProxy;
                loc1.clearPrefetchData();
            }
            return;
        }

        internal var _facade:mgs.aurora.modules.contentLoader.ContentLoaderFacade;

        internal var _requriedFiles:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;
    }
}


//          class ContentLoaderFacade
package mgs.aurora.modules.contentLoader 
{
    import __AS3__.vec.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.controller.*;
    import mgs.aurora.modules.contentLoader.model.*;
    import mgs.aurora.modules.contentLoader.notifications.*;
    import org.osflash.signals.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class ContentLoaderFacade extends org.puremvc.as3.multicore.patterns.facade.Facade implements org.puremvc.as3.multicore.interfaces.IFacade
    {
        public function ContentLoaderFacade(arg1:String, arg2:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>)
        {
            super(arg1);
            this._requiredFiles = arg2;
            return;
        }

        public function startup():void
        {
            var loc1:*=new Object();
            loc1.requiredFiles = this._requiredFiles;
            this.sendNotification(mgs.aurora.modules.contentLoader.ContentLoaderFacade.STARTUP, loc1);
            this.removeCommand(mgs.aurora.modules.contentLoader.ContentLoaderFacade.STARTUP);
            return;
        }

        public function teardown():void
        {
            this.sendNotification(mgs.aurora.modules.contentLoader.ContentLoaderFacade.TEARDOWN);
            this.removeCommand(mgs.aurora.modules.contentLoader.ContentLoaderFacade.TEARDOWN);
            return;
        }

        protected override function initializeController():void
        {
            super.initializeController();
            this.registerCommand(mgs.aurora.modules.contentLoader.ContentLoaderFacade.STARTUP, mgs.aurora.modules.contentLoader.controller.StartupCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.ContentLoaderFacade.TEARDOWN, mgs.aurora.modules.contentLoader.controller.TeardownCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.COMPLETED, mgs.aurora.modules.contentLoader.controller.UrlLoadEventCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.ERROR, mgs.aurora.modules.contentLoader.controller.UrlLoadEventCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.PROGRESS, mgs.aurora.modules.contentLoader.controller.UrlLoadEventCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STARTED, mgs.aurora.modules.contentLoader.controller.UrlLoadEventCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.URLLoaderNotifications.STOPPED, mgs.aurora.modules.contentLoader.controller.UrlLoadEventCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.PREFETCH_REQUEST, mgs.aurora.modules.contentLoader.controller.PrefetchCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.QUEUE_URL_REQUEST, mgs.aurora.modules.contentLoader.controller.QueueUrlRequestCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.START_URL_REQUEST, mgs.aurora.modules.contentLoader.controller.StartUrlRequestCommand);
            this.registerCommand(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.STOP_LOADING, mgs.aurora.modules.contentLoader.controller.StopAndClearCommand);
            return;
        }

        public function loadFile(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo):void
        {
            Debugger.trace("load file - " + arg1.url);
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.QUEUE_URL_REQUEST, arg1);
            return;
        }

        public function stopLoading():void
        {
            Debugger.trace("stop load file");
            this.sendNotification(mgs.aurora.modules.contentLoader.notifications.LoaderNotifications.STOP_LOADING);
            return;
        }

        public function get onStarted():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onStarted;
        }

        public function get onStopped():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onStopped;
        }

        public function get onComplete():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onComplete;
        }

        public function get onProgress():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onProgress;
        }

        public function get onRequriedProgress():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onRequriedProgress;
        }

        public function get onPrefetchServedProgress():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onPrefetchServedProgress;
        }

        public function get onPrefetchComplete():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onPrefetchCompleted;
        }

        public function get onError():org.osflash.signals.Signal
        {
            var loc1:*=mgs.aurora.modules.contentLoader.model.SignalProxy(this.retrieveProxy(mgs.aurora.modules.contentLoader.model.SignalProxy.NAME));
            return loc1.onError;
        }

        public static function getInstance(arg1:String, arg2:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>):mgs.aurora.modules.contentLoader.ContentLoaderFacade
        {
            if (mgs.aurora.modules.contentLoader.ContentLoaderFacade._instance == null) 
            {
                mgs.aurora.modules.contentLoader.ContentLoaderFacade._instance = new ContentLoaderFacade(arg1, arg2);
            }
            return mgs.aurora.modules.contentLoader.ContentLoaderFacade._instance;
        }

        public static const NAME:String="ContentLoaderFacade";

        public static const STARTUP:String=NAME + "/notes/startup";

        public static const INIT:String=NAME + "/notes/init";

        public static const TEARDOWN:String=NAME + "/notes/teardown";

        public static const PREFETCHCOMPLETED:String=NAME + "/notes/prefetch_completed";

        internal var _requiredFiles:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;

        internal static var _instance:mgs.aurora.modules.contentLoader.ContentLoaderFacade;
    }
}


//        package core
//          package controller
//            package api
//              package banking
//                class UpdateBalanceCommand
package mgs.aurora.modules.core.controller.api.banking 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.api.banking.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class UpdateBalanceCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function UpdateBalanceCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc5:*=null;
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=0;
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy;
            var loc4:*=false;
            if (!(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_ENABLED] == null) || !(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_ENABLED] == "")) 
            {
                loc4 = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_ENABLED] == "1";
            }
            if (arg1.getName() != mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE) 
            {
                if (arg1.getName() == mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_UPDATE_BALANCE) 
                {
                    loc2 = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE];
                }
            }
            else 
            {
                loc2 = arg1.getBody() as Number;
                Debugger.trace("balance update: " + loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_COUNT], "[SYSTEM]");
                if (loc4) 
                {
                    if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE] > loc2) 
                    {
                        loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_COUNT] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_COUNT] + 1;
                    }
                }
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE] = loc2;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_BALANCE);
                if (loc4 && int(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_COUNT]) == int(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_UPPER_LIMIT])) 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_CONSECUTIVE_BETS_INFO, String(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_UPPER_LIMIT]));
                    loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_COUNT] = 0;
                }
            }
            if (loc3) 
            {
                if (loc5 = mgs.aurora.modules.core.model.api.banking.Banking(loc3.banking)) 
                {
                    mgs.aurora.modules.core.model.api.banking.Banking(loc3.banking).balanceUpdate(loc2);
                }
            }
            return;
        }
    }
}


//              package help
//                class LaunchHelpCommand
package mgs.aurora.modules.core.controller.api.help 
{
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchHelpCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchHelpCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            loc1.launchHelp();
            return;
        }
    }
}


//              package multiplayer
//                class AliasActivationCanceledCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.model.mutiplayer.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class AliasActivationCanceledCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function AliasActivationCanceledCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.mutiplayer.AliasActivationExternalLaunchProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.AliasActivationExternalLaunchProxy.NAME));
            if (loc1.busy) 
            {
                loc1.busy = false;
                mgs.aurora.modules.core.view.module.GameModuleMediator(facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)).multiplayer.newAliasRequestCancelled();
            }
            return;
        }
    }
}


//                class AliasCreatedCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.mutiplayer.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class AliasCreatedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function AliasCreatedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy.NAME) as mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy;
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.MPFProxy.NAME) as mgs.aurora.modules.core.model.MPFProxy;
            var loc3:*=String(arg1.getBody());
            if (facade.hasProxy(mgs.aurora.modules.core.model.MPFProxy.NAME)) 
            {
                if (loc2.loggedIn) 
                {
                    loc1.alias = loc3;
                    loc1.systemGeneratedAlias = "0";
                }
            }
            var loc4:*;
            (loc4 = facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator).multiplayer.newAliasReceived(loc3);
            var loc5:*;
            (loc5 = facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME) as mgs.aurora.modules.core.model.SessionDetailsProxy).userAlias = loc3;
            return;
        }
    }
}


//                class AvatarFileRequestCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class AvatarFileRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function AvatarFileRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.SessionConfigProxy.NAME) as mgs.aurora.modules.core.model.SessionConfigProxy;
            var loc2:*=String(arg1.getBody());
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_LOAD_AVATAR_FILE, loc2);
            return;
        }
    }
}


//                class CancelAvatarCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CancelAvatarCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CancelAvatarCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }
    }
}


//                class CancelNewAliasRequestCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CancelNewAliasRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CancelNewAliasRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME) as mgs.aurora.modules.core.model.ExternalLauncherProxy;
            loc1.closeWindow();
            return;
        }
    }
}


//                class LaunchAliasActivationCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.model.mutiplayer.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchAliasActivationCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchAliasActivationCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.AliasActivationExternalLaunchProxy.NAME) as mgs.aurora.modules.core.model.mutiplayer.AliasActivationExternalLaunchProxy;
            loc1.launch();
            return;
        }
    }
}


//                class LaunchAvatarCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchAvatarCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchAvatarCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME) as mgs.aurora.modules.core.model.ExternalLauncherProxy;
            loc1.launchAvatarUpload();
            return;
        }
    }
}


//                class SendMultiplayerPacketCommand
package mgs.aurora.modules.core.controller.api.multiplayer 
{
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SendMultiplayerPacketCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SendMultiplayerPacketCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MAGNETO_SEND_PACKET, arg1.getBody());
            return;
        }
    }
}


//              package preloader
//                class CreatePreloaderCommand
package mgs.aurora.modules.core.controller.api.preloader 
{
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CreatePreloaderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CreatePreloaderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.InGameLoaderProxy.NAME) as mgs.aurora.modules.core.model.InGameLoaderProxy;
            loc1.init(arg1.getBody() as uint);
            return;
        }
    }
}


//                class ShowHidePreloaderCommand
package mgs.aurora.modules.core.controller.api.preloader 
{
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class ShowHidePreloaderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ShowHidePreloaderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as Boolean;
            Debugger.trace("ShowHidePreloaderCommand : " + loc1, "SYSTEM - Core Preloader");
            if (loc1) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_SHOW_PRELOADER);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_HIDE_PRELOADER);
            }
            return;
        }
    }
}


//              package server
//                class FileRequestCommand
package mgs.aurora.modules.core.controller.api.server 
{
    import flash.display.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.interfaces.server.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class FileRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function FileRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc4:*=null;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            var loc3:*=arg1.getBody() as mgs.aurora.api.interfaces.server.IFileRequest;
            var loc6:*=loc3.contentType;
            switch (loc6) 
            {
                case mgs.aurora.api.enums.ContentType.SWF_CONTENT:
                {
                    loc4 = mgs.aurora.common.enums.ContentType.SWF_CONTENT;
                    break;
                }
                case mgs.aurora.api.enums.ContentType.BIN_CONTENT:
                {
                    loc4 = mgs.aurora.common.enums.ContentType.BIN_CONTENT;
                    break;
                }
                case mgs.aurora.api.enums.ContentType.XML_CONTENT:
                {
                    loc4 = mgs.aurora.common.enums.ContentType.XML_CONTENT;
                    break;
                }
            }
            var loc5:*=new mgs.aurora.common.net.URLLoadRequestInfo(loc3.id, loc3.url, loc4, loc3.context);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc5);
            return;
        }
    }
}


//                class FileResponseCommand
package mgs.aurora.modules.core.controller.api.server 
{
    import flash.display.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.server.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.server.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class FileResponseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function FileResponseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc3:*=0;
            var loc5:*=null;
            var loc1:*=mgs.aurora.modules.core.model.UrlLoadResponseProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME)).getResponse();
            var loc2:*=mgs.aurora.modules.core.view.module.GameModuleMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME));
            var loc6:*=loc1.request.type;
            switch (loc6) 
            {
                case mgs.aurora.common.enums.ContentType.SWF_CONTENT:
                {
                    loc3 = mgs.aurora.api.enums.ContentType.SWF_CONTENT;
                    loc2.saveSwfResponse(flash.display.DisplayObject(loc1.content), loc1.request.url);
                    break;
                }
                case mgs.aurora.common.enums.ContentType.BIN_CONTENT:
                {
                    loc3 = mgs.aurora.api.enums.ContentType.BIN_CONTENT;
                    break;
                }
                case mgs.aurora.common.enums.ContentType.XML_CONTENT:
                {
                    loc3 = mgs.aurora.api.enums.ContentType.XML_CONTENT;
                    break;
                }
            }
            var loc4:*;
            (loc4 = new mgs.aurora.modules.core.model.api.server.FileResponse()).content = loc1.content;
            loc4.request = new mgs.aurora.api.server.FileRequest(loc1.request.id, mgs.aurora.modules.contentLoader.model.files.Utils.trimEtag(loc1.request.url), loc3);
            if (loc1.request.id.indexOf("dependency/") == -1) 
            {
                loc2.server.fileResponse(loc4);
            }
            else 
            {
                loc5 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
                if (loc1.request.type == mgs.aurora.common.enums.ContentType.SWF_CONTENT) 
                {
                    loc5.setLoaderInfoDependency(loc1.request.id, loc1.content.loaderInfo);
                }
            }
            return;
        }
    }
}


//                class PacketRequestCommand
package mgs.aurora.modules.core.controller.api.server 
{
    import flash.utils.*;
    import mgs.aurora.api.interfaces.server.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.view.module.*;
    import mgs.aurora.modules.core.view.sgi.*;
    import mgs.aurora.modules.core.view.xman.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PacketRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PacketRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as mgs.aurora.api.interfaces.server.IPacketRequest;
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.xman.XManMediator.NAME) as mgs.aurora.modules.core.view.xman.XManMediator;
            var loc3:*;
            var loc4:*=(loc3 = mgs.aurora.modules.core.model.api.ApiProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME)).extTopBar.topBarVisible) ? mgs.aurora.modules.core.view.sgi.SGITopbarMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.sgi.SGITopbarMediator.NAME)).systemForce : false;
            Debugger.trace("PacketRequestCommand " + loc3 + " ; " + loc4 + " ; " + (loc4 && loc3), "SYSTEM - TOPBAR_CONTROLLER");
            var loc5:*;
            (loc5 = new flash.utils.Dictionary())[mgs.aurora.common.enums.XManPacketParameterKeys.MODULE_ID] = loc1.mid;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.CLIENT_ID] = loc1.cid;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.PACKET_ID] = loc1.id;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.VERB] = loc1.verb;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.RESET_SESSION_TIMER] = loc1.resetSessionTimer;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.REQUEST] = loc1.packet;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.PKT_ATTRIBUTES] = loc1.packetAttributes;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.INCLUDE_EXT_OPERATOR_INFO] = loc4 && loc3 ? true : loc1.includeExternalOperatorInfo;
            loc5[mgs.aurora.common.enums.XManPacketParameterKeys.EVENT_NAME] = mgs.aurora.modules.core.view.module.GameModuleMediator.GAME_MODULE_PACKET_EVENT;
            loc2.sendPacket(loc5);
            return;
        }
    }
}


//                class PacketResponseCommand
package mgs.aurora.modules.core.controller.api.server 
{
    import mgs.aurora.api.server.*;
    import mgs.aurora.common.events.comms.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.api.server.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PacketResponseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PacketResponseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc4:*=null;
            var loc1:*=arg1.getBody() as mgs.aurora.common.events.comms.PacketEvent;
            if (this.isError(loc1.response)) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1.response, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
                return;
            }
            var loc2:*=new mgs.aurora.modules.core.model.api.server.PacketResponse();
            loc2.packet = new XML(loc1.response.toString());
            loc2.request = new mgs.aurora.api.server.PacketRequest(loc1.packetID, loc1.verb, loc1.request, loc1.moduleID, loc1.clientID, loc1.resetSessionTimer, loc1.packetAttributes);
            var loc3:*;
            if (loc3 = mgs.aurora.modules.core.model.api.ApiProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME)).extTopBar.topBarVisible) 
            {
                if (loc1.response.ExternalOperatorInfo != undefined) 
                {
                    Debugger.trace("PacketResponseCommand  - sending node here :) ", "SYSTEM - TOPBAR_CONTROLLER");
                    loc4 = new XML(loc1.response.ExternalOperatorInfo);
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SEND_TOPBAR_DATA, loc4);
                }
            }
            mgs.aurora.modules.core.view.module.GameModuleMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)).server.packetResponse(loc2);
            return;
        }

        internal function isError(arg1:XML):Boolean
        {
            if (String(arg1.Id.@verb) == mgs.aurora.modules.core.enum.PacketVerbs.ERROR_VERB) 
            {
                return true;
            }
            return false;
        }
    }
}


//              package sounds
//                class UpdateSoundsMuteCommand
package mgs.aurora.modules.core.controller.api.sounds 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.frame.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class UpdateSoundsMuteCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function UpdateSoundsMuteCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy;
            if (arg1.getBody() != mgs.aurora.common.enums.frame.QuickMuteFrameLabels.OFF) 
            {
                loc1.sounds.mute = false;
            }
            else 
            {
                loc1.sounds.mute = true;
            }
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=loc1.sounds.mute != true ? "0" : "1";
            var loc4:*;
            var loc5:*=(loc4 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData).getValue(mgs.aurora.modules.core.enum.JSDataNames.REVERSE_PROXY) != "1" ? loc4.getValue(mgs.aurora.modules.core.enum.JSDataNames.BASEURL) : null;
            loc2[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND] = loc3;
            mgs.aurora.common.utilities.FlashStorage.saveData(mgs.aurora.modules.core.enum.SystemStoreNames.STORAGE_NAME_SOUND, mgs.aurora.modules.core.enum.SystemStoreNames.KEY_NAME_SOUND_MUTE, loc3, loc5);
            return;
        }
    }
}


//              package status
//                class ModuleCleanedUpCommand
package mgs.aurora.modules.core.controller.api.status 
{
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class ModuleCleanedUpCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ModuleCleanedUpCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE, arg1.getBody(), arg1.getType());
            return;
        }
    }
}


//                class SystemReadyCommand
package mgs.aurora.modules.core.controller.api.status 
{
    import mgs.aurora.api.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SystemReadyCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SystemReadyCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveMediator(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.NAME) as org.puremvc.as3.multicore.utilities.statemachine.StateMachine;
            var loc2:*=org.puremvc.as3.multicore.utilities.statemachine.State(loc1.getViewComponent());
            if (loc2.name != mgs.aurora.modules.core.states.StateNames.GAME_MODULE_STATUS_INITIALIZE) 
            {
                return;
            }
            var loc3:*=arg1.getType();
            switch (loc3) 
            {
                case mgs.aurora.modules.core.enum.ModuleReadyCheckTypes.PROMPT_BANK:
                {
                    this.promptBank();
                    break;
                }
                case mgs.aurora.modules.core.enum.ModuleReadyCheckTypes.SHOW_MODULE_STARTUP_INFO_DIALOGUE:
                {
                    this.showStartUpDialogue();
                    break;
                }
                default:
                {
                    this.notifyModule();
                    break;
                }
            }
            return;
        }

        internal function promptBank():void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.bank;
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.login.@loginType.toString().toUpperCase();
            if (loc1.@eCashPromptDialog == "1" || loc2 == mgs.aurora.common.enums.raptorSession.LoginType.MPP) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_PROMPT_FOR_CASH);
            }
            else 
            {
                this.showStartUpDialogue();
            }
            return;
        }

        internal function showStartUpDialogue():void
        {
            var loc2:*=null;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
            if (loc1 == null || loc1.moduleStatus.startupDialogueAllowed) 
            {
                loc2 = mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).gameSet;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_STARTUP_DIALOGUE, String(loc2.art.@id));
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY);
            }
            return;
        }

        internal function notifyModule():void
        {
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.SYSTEM_READY);
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy;
            if (loc2.status.initialized) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GAME_DOWNLOADED);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SYSTEM_READY);
                Debugger.trace("System Ready", "API EVENT - Status");
                loc2.status.dispatchEvent(new mgs.aurora.api.events.ApiStatusEvent(mgs.aurora.api.events.ApiStatusEvent.SYSTEM_READY));
                if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] == 1 && loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
                {
                    if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.GAME_IS_PROGRESSIVE] != true) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE);
                    }
                    else 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_NOT_ALLOWED_DIALOGUE);
                    }
                }
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH] = false;
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] = 0;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SHOW);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW_PLAY_FOR_REAL);
            }
            return;
        }
    }
}


//            package configSetup
//              class LoadBrandConfigCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LoadBrandConfigCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoadBrandConfigCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesSetupProxy.NAME) as mgs.aurora.modules.core.model.DependenciesSetupProxy;
            var loc2:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc3:*="System/Common/" + loc1.getVersionedFilename(loc2.getValue(mgs.aurora.modules.core.enum.JSDataNames.BRANDCONFIG, "Config") + ".xml");
            var loc4:*=new mgs.aurora.common.net.URLLoadRequestInfo(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG, loc3, mgs.aurora.common.enums.ContentType.XML_CONTENT);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc4);
            return;
        }
    }
}


//              class LoadDependenciesConfigCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LoadDependenciesConfigCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoadDependenciesConfigCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesSetupProxy.NAME) as mgs.aurora.modules.core.model.DependenciesSetupProxy;
            var loc2:*=new mgs.aurora.common.net.URLLoadRequestInfo(mgs.aurora.modules.core.enum.DependencyName.DEPENDENCIES_CONFIG, "System/Aurora/" + loc1.getVersionedFilename("SystemDependencies.xml"), mgs.aurora.common.enums.ContentType.XML_CONTENT);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc2);
            return;
        }
    }
}


//              class LoadFrameDisplayCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LoadFrameDisplayCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoadFrameDisplayCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesSetupProxy.NAME) as mgs.aurora.modules.core.model.DependenciesSetupProxy;
            var loc3:*="System/Aurora/" + loc2.getVersionedFilename(loc1.getValue(mgs.aurora.modules.core.enum.JSDataNames.DISPLAYCONFIG, "DisplayConfig") + ".xml");
            var loc4:*=new mgs.aurora.common.net.URLLoadRequestInfo(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMELIB_CONFIG, loc3, mgs.aurora.common.enums.ContentType.XML_CONTENT);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc4);
            return;
        }
    }
}


//              class MergeBrandConfigAndDisplayConfigCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class MergeBrandConfigAndDisplayConfigCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function MergeBrandConfigAndDisplayConfigCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME));
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc3:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG);
            this.merge(loc3, loc2);
            loc1.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG, loc2, false);
            return;
        }

        internal function merge(arg1:XML, arg2:XML):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=arg1.children();
            for each (loc1 in loc3) 
            {
                if (arg2.hasOwnProperty(loc1.name())) 
                {
                    this.mergeAttributes(loc1, arg2[loc1.name()]);
                    this.merge(loc1, XML(arg2[loc1.name()]));
                    continue;
                }
                arg2.appendChild(loc1);
            }
            return;
        }

        internal function mergeAttributes(arg1:XML, arg2:XMLList, arg3:Boolean=false):void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*;
            var loc2:*=(loc1 = arg1.attributes()).length();
            while (loc2--) 
            {
                loc4 = (loc3 = loc1[loc2]).name();
                if (arg3 == false && !(arg2.@[loc4] == undefined)) 
                {
                    continue;
                }
                arg2.@[loc4] = loc3.toString();
            }
            return;
        }
    }
}


//              class SetupBrandConfigCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SetupBrandConfigCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupBrandConfigCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME) as mgs.aurora.modules.core.model.UrlLoadResponseProxy;
            var loc2:*=loc1.getResponse();
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=XML(loc2.content);
            this.changeLoginType(loc4);
            loc3.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG, loc4);
            var loc5:*;
            (loc5 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.SessionConfigProxy.NAME) as mgs.aurora.modules.core.model.SessionConfigProxy).setData(loc4);
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.INITIAL_SETUP);
            return;
        }

        internal function changeLoginType(arg1:XML):void
        {
            var loc1:*=arg1.casino.login.@loginType.toString().toUpperCase();
            arg1.casino.login.@loginType = loc1;
            if (loc1 == "T3") 
            {
                arg1.casino.login.@loginType = mgs.aurora.common.enums.raptorSession.LoginType.LEGACY;
                if (arg1.casino.login.@useGenAuthLogin == "1") 
                {
                    arg1.casino.login.@loginType = mgs.aurora.common.enums.raptorSession.LoginType.VANGUARD;
                }
            }
            return;
        }
    }
}


//              class SetupDependenciesConfigCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SetupDependenciesConfigCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupDependenciesConfigCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME) as mgs.aurora.modules.core.model.UrlLoadResponseProxy;
            var loc2:*=loc1.getResponse();
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=XML(loc2.content);
            loc3.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DEPENDENCIES_CONFIG, loc4);
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY);
            return;
        }
    }
}


//              class SetupFrameDisplayCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SetupFrameDisplayCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupFrameDisplayCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME) as mgs.aurora.modules.core.model.UrlLoadResponseProxy;
            var loc2:*=loc1.getResponse();
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=XML(loc2.content);
            loc3.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG, loc4);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MERGE_BRANDCONFIG_AND_FRAMEDISPLAYCONFIG);
            var loc5:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_MSG_FADER);
            if (this.checkAutomationExists()) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.AUTOMATION_LOAD_AUTOSOCKET);
            }
            else 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY);
            }
            return;
        }

        internal function checkAutomationExists():Boolean
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            return loc1.hasOwnProperty("Automation");
        }
    }
}


//              class SetupMsgFaderCommand
package mgs.aurora.modules.core.controller.configSetup 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupMsgFaderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupMsgFaderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME));
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG);
            var loc3:*;
            (loc3 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.MsgFadeProxy.NAME) as mgs.aurora.modules.core.model.MsgFadeProxy).setData(loc2.moduleFadeMessage);
            return;
        }
    }
}


//            package corePackets
//              class CoreInvokedPacketReceivedCommand
package mgs.aurora.modules.core.controller.corePackets 
{
    import mgs.aurora.common.events.comms.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CoreInvokedPacketReceivedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CoreInvokedPacketReceivedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as mgs.aurora.common.events.comms.PacketEvent;
            var loc2:*=String(loc1.response.Id.@verb);
            switch (loc2) 
            {
                case mgs.aurora.modules.core.enum.PacketVerbs.ERROR_VERB:
                {
                    if (String(loc1.request.Id.@verb) == mgs.aurora.modules.core.enum.PacketVerbs.HIDDENGAMESLIST_VERB) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDDEN_GAMES_RESPONSE, loc1.response);
                    }
                    if (String(loc1.request.Id.@verb) == mgs.aurora.modules.core.enum.PacketVerbs.PLAYERINFORMATION_VERB) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PLAYER_INFORMATION_RESPONSE, loc1.response);
                    }
                    break;
                }
                case mgs.aurora.modules.core.enum.PacketVerbs.PLAYERINFORMATION_VERB:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PLAYER_INFORMATION_RESPONSE, loc1.response);
                    break;
                }
                case mgs.aurora.modules.core.enum.PacketVerbs.HIDDENGAMESLIST_VERB:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDDEN_GAMES_RESPONSE, loc1.response);
                    break;
                }
                case mgs.aurora.modules.core.enum.PacketVerbs.SESSION_AUTH_TOKEN_LOGIN_VERB:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SESSION_AUTH_TOKEN_LOGIN_RESPONSE, loc1.response);
                    break;
                }
                case mgs.aurora.modules.core.enum.PacketVerbs.GENERIC_XML_PACKET_VERB:
                {
                    if (loc1.response) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_RESPONSE, loc1.response);
                    }
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//            package dependancies
//              class DependencyLoadedAndStoredCommand
package mgs.aurora.modules.core.controller.dependancies 
{
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class DependencyLoadedAndStoredCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function DependencyLoadedAndStoredCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.DEPENDENCY_NAME_PREFIX + mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST:
                {
                    this.gamesListGlobalVarsSubstitution();
                    break;
                }
                default:
                {
                    break;
                }
            }
            this.facade.removeCommand(arg1.getName());
            return;
        }

        internal function gamesListGlobalVarsSubstitution():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            var loc3:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            loc2 = mgs.aurora.common.utilities.StringUtils.updateFromGlobalVars(loc2, loc3.globalVars);
            loc1.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST, loc2, false);
            return;
        }
    }
}


//              class DependencySetupCommand
package mgs.aurora.modules.core.controller.dependancies 
{
    import mgs.aurora.modules.core.controller.setup.*;
    import mgs.aurora.modules.core.controller.storage.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class DependencySetupCommand extends org.puremvc.as3.multicore.patterns.command.MacroCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function DependencySetupCommand()
        {
            super();
            return;
        }

        protected override function initializeMacroCommand():void
        {
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.CreateDynamicConfigCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitPrepareSystemStringsCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.storage.InitFlashStorageCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitExternalLaunchersCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitGenieStepsCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitDialoguesCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitDefaultGameModuleCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitMetricInfoCommand);
            return;
        }
    }
}


//              class DependencySetupStage2Command
package mgs.aurora.modules.core.controller.dependancies 
{
    import mgs.aurora.modules.core.controller.*;
    import mgs.aurora.modules.core.controller.setup.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class DependencySetupStage2Command extends org.puremvc.as3.multicore.patterns.command.MacroCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function DependencySetupStage2Command()
        {
            super();
            return;
        }

        protected override function initializeMacroCommand():void
        {
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitXManCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitCurrenciesCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitBrandMigrationCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitMarketManagerCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitRaptorSessionCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitSoundEngineCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitBankingCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitMagnetoCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitMPFCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.setup.InitFramesBuilderCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.InitUserSwitchCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.SystemLoadedCommand);
            return;
        }
    }
}


//              class LoadDependencyCommand
package mgs.aurora.modules.core.controller.dependancies 
{
    import flash.display.*;
    import flash.system.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class LoadDependencyCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoadDependencyCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DEPENDENCIES_CONFIG);
            var loc3:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc4:*;
            if ((loc4 = loc2.files.file[loc1.dependancyLoadIndex]) == null) 
            {
                if ((loc6 = loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG)).TextOverrides.@hindiFontSystemOverride == "1") 
                {
                    loc7 = loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_CONTROL_CONFIG);
                    loc8 = loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMELIB_CONFIG);
                    loc7 = this.fontOverride(loc7);
                    loc1.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_CONTROL_CONFIG, loc7);
                    loc8 = this.fontOverride(loc8);
                    loc1.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMELIB_CONFIG, loc8);
                    this.displayConfigFontOverride(loc6);
                }
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.SETUP_DEPENDENCIES);
            }
            else 
            {
                loc5 = "System/" + this.getFileName(loc4);
                var loc9:*=loc4.@id.toString();
                switch (loc9) 
                {
                    case mgs.aurora.modules.core.enum.DependencyName.MAGNETO_MODULE:
                    case mgs.aurora.modules.core.enum.DependencyName.MPF_MODULE:
                    {
                        if (loc3.mpf.@supported.toString() != "1") 
                        {
                            loc10 = ((loc9 = loc1).dependancyLoadIndex + 1);
                            loc9.dependancyLoadIndex = loc10;
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_DEPENDENCY);
                        }
                        else 
                        {
                            var loc10:*=((loc9 = loc1).dependancyLoadIndex + 1);
                            loc9.dependancyLoadIndex = loc10;
                            this.load(loc5, loc4);
                        }
                        break;
                    }
                    default:
                    {
                        loc10 = ((loc9 = loc1).dependancyLoadIndex + 1);
                        loc9.dependancyLoadIndex = loc10;
                        this.load(loc5, loc4);
                        break;
                    }
                }
            }
            return;
        }

        internal function fontOverride(arg1:XML):XML
        {
            var loc1:*=arg1.textField;
            var loc2:*=0;
            while (loc2 < loc1.children().length()) 
            {
                if (loc1.children()[loc2].@embedFonts != undefined) 
                {
                    arg1.textField.children()[loc2].@embedFonts = "false";
                }
                ++loc2;
            }
            var loc3:*=arg1.textFormat;
            loc2 = 0;
            while (loc2 < loc3.children().length()) 
            {
                if (loc3.children()[loc2].@letterSpacing != undefined) 
                {
                    arg1.textFormat.children()[loc2].@letterSpacing = "0";
                }
                if (loc3.children()[loc2].@font != undefined) 
                {
                    arg1.textFormat.children()[loc2].@font = "";
                }
                ++loc2;
            }
            return arg1;
        }

        internal function displayConfigFontOverride(arg1:XML):void
        {
            var loc1:*=arg1.bonusBubble.settings;
            if (loc1.@font != undefined) 
            {
                loc1.@font = "";
            }
            if (loc1.@embeddedFonts != undefined) 
            {
                loc1.@embeddedFonts = "false";
            }
            loc1 = arg1.moduleFadeMessage.settings;
            if (loc1.@font != undefined) 
            {
                loc1.@font = "";
            }
            if (loc1.@embeddedFonts != undefined) 
            {
                loc1.@embeddedFonts = "false";
            }
            if (arg1.ToolTipConfig.TextField.@embedFonts != undefined) 
            {
                arg1.ToolTipConfig.TextField.@embedFonts = "false";
            }
            if (arg1.ToolTipConfig.TextFormat.@font != undefined) 
            {
                arg1.ToolTipConfig.TextFormat.@font = "";
            }
            if (arg1.ToolTipConfig.TextFormat.@letterSpacing != undefined) 
            {
                arg1.ToolTipConfig.TextFormat.@letterSpacing = "0";
            }
            return;
        }

        internal function getFileName(arg1:XML):String
        {
            var file:XML;
            var fileName:String;
            var dependencyProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var loginType:String;
            var market:String;
            var folder:String;
            var dependenciesSetup:mgs.aurora.modules.core.model.DependenciesSetupProxy;
            var externalDataProxy:mgs.aurora.modules.core.model.ExternalDataProxy;
            var reg:RegExp;

            var loc1:*;
            externalDataProxy = null;
            reg = null;
            file = arg1;
            fileName = file.@file;
            dependencyProxy = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)) as mgs.aurora.modules.core.model.DependenciesProxy;
            loginType = dependencyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.login.@loginType;
            market = dependencyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).RegulatedMarket.@market != undefined ? dependencyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).RegulatedMarket.@market : "default";
            folder = "";
            if (file.type == undefined) 
            {
                folder = file.@folder;
                if (file.hasOwnProperty("@mpfEarlyDownload")) 
                {
                    this.mpfEarlyDownload = file.@mpfEarlyDownload != "1" ? false : true;
                }
                if (file.hasOwnProperty("@delayed")) 
                {
                    this.delayedDownload = file.@delayed != "1" ? false : true;
                }
            }
            else 
            {
                var loc2:*=file.@id.toString();
                switch (loc2) 
                {
                    case mgs.aurora.modules.core.enum.DependencyName.RAPTOR_BANKING_MODULE:
                    case mgs.aurora.modules.core.enum.DependencyName.RAPTOR_SESSION_MODULE:
                    {
                        var loc3:*=0;
                        var loc4:*=file.type;
                        loc2 = new XMLList("");
                        for each (var loc5:* in loc4) 
                        {
                            var loc6:*;
                            with (loc6 = loc5) 
                            {
                                if (@id.toString().toLowerCase() == loginType.toLowerCase()) 
                                {
                                    loc2[loc3] = loc5;
                                }
                            }
                        }
                        fileName = loc2.@file;
                        loc3 = 0;
                        loc4 = file.type;
                        loc2 = new XMLList("");
                        for each (loc5 in loc4) 
                        {
                            with (loc6 = loc5) 
                            {
                                if (@id.toString().toLowerCase() == loginType.toLowerCase()) 
                                {
                                    loc2[loc3] = loc5;
                                }
                            }
                        }
                        folder = loc2.@folder;
                        break;
                    }
                    case mgs.aurora.modules.core.enum.DependencyName.MARKET_MANAGER_MODULE:
                    {
                        Debugger.trace("MARKET : " + market);
                        loc3 = 0;
                        loc4 = file.type;
                        loc2 = new XMLList("");
                        for each (loc5 in loc4) 
                        {
                            with (loc6 = loc5) 
                            {
                                if (@id.toString().toLowerCase() == market.toLowerCase()) 
                                {
                                    loc2[loc3] = loc5;
                                }
                            }
                        }
                        fileName = loc2.@file;
                        loc3 = 0;
                        loc4 = file.type;
                        loc2 = new XMLList("");
                        for each (loc5 in loc4) 
                        {
                            with (loc6 = loc5) 
                            {
                                if (@id.toString().toLowerCase() == market.toLowerCase()) 
                                {
                                    loc2[loc3] = loc5;
                                }
                            }
                        }
                        folder = loc2.@folder;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
            loc2 = file.@id.toString();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.enum.DependencyName.GAME_STRINGS_FOREIGN:
                {
                    externalDataProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME) as mgs.aurora.modules.core.model.ExternalDataProxy;
                    reg = new RegExp("%LANG%");
                    fileName = fileName.replace(reg, externalDataProxy.language.toLowerCase());
                    break;
                }
                default:
                {
                    break;
                }
            }
            dependenciesSetup = facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesSetupProxy.NAME) as mgs.aurora.modules.core.model.DependenciesSetupProxy;
            return folder + dependenciesSetup.getVersionedFilename(fileName);
        }

        internal function load(arg1:String, arg2:XML):void
        {
            var loc8:*=null;
            var loc1:*=mgs.aurora.common.enums.ContentType.SWF_CONTENT;
            if (arg1.indexOf(".xml") > -1) 
            {
                loc1 = mgs.aurora.common.enums.ContentType.XML_CONTENT;
            }
            var loc2:*;
            var loc3:*=(loc2 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator).getViewComponent() as flash.display.Sprite;
            var loc4:*=new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain, flash.system.SecurityDomain.currentDomain);
            var loc5:*=null;
            var loc9:*=arg2.@id.toString();
            switch (loc9) 
            {
                case mgs.aurora.modules.core.enum.DependencyName.GAME_STRINGS_FOREIGN:
                {
                    loc8 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
                    loc5 = {"xml":loc8.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAME_STRINGS_EN).copy()};
                    break;
                }
                default:
                {
                    break;
                }
            }
            var loc6:*=new mgs.aurora.common.net.URLLoadRequestInfo(arg2.@id, arg1, loc1, loc4, null, null, "GET", "text", loc5);
            var loc7:*;
            (loc7 = new Object()).request = loc6;
            loc7.delayed = this.delayedDownload;
            loc7.mpfEarlyDownload = this.mpfEarlyDownload;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc7);
            return;
        }

        internal function get mpfEarlyDownload():Boolean
        {
            return this._mpfEarlyDownload;
        }

        internal function set mpfEarlyDownload(arg1:Boolean):void
        {
            this._mpfEarlyDownload = arg1;
            return;
        }

        internal function get delayedDownload():Boolean
        {
            return this._delayedDownload;
        }

        internal function set delayedDownload(arg1:Boolean):void
        {
            this._delayedDownload = arg1;
            return;
        }

        internal var _delayedDownload:Boolean=false;

        internal var _mpfEarlyDownload:Boolean=false;
    }
}


//              class StoreDependencyCommand
package mgs.aurora.modules.core.controller.dependancies 
{
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class StoreDependencyCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StoreDependencyCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME) as mgs.aurora.modules.core.model.UrlLoadResponseProxy;
            var loc2:*=loc1.getResponse();
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            if (loc2) 
            {
                if (loc2.request.type != mgs.aurora.common.enums.ContentType.XML_CONTENT) 
                {
                    if (loc2.request.type == mgs.aurora.common.enums.ContentType.SWF_CONTENT) 
                    {
                        loc3.setLoaderInfoDependency(loc2.request.id, loc2.content.loaderInfo);
                    }
                }
                else 
                {
                    loc3.setXmlDependency(loc2.request.id, loc2.content as XML);
                }
            }
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY);
            return;
        }
    }
}


//            package error
//              class DependencyUrlErrorCommand
package mgs.aurora.modules.core.controller.error 
{
    import flash.external.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class DependencyUrlErrorCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function DependencyUrlErrorCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            flash.external.ExternalInterface.call("onMissingSystemFile");
            return;
        }
    }
}


//              class MarketSystemErrorCommand
package mgs.aurora.modules.core.controller.error 
{
    import flash.external.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class MarketSystemErrorCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function MarketSystemErrorCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            Debugger.trace("MarketSystemErrorCommand : " + arg1.getType(), "SYSTEM - ERROR");
            var loc1:*=false;
            var loc2:*=arg1.getType();
            var loc3:*;
            if ((loc3 = arg1.getBody()) is XML) 
            {
                if ((loc4 = loc3 as XML).Response.hasOwnProperty("Error")) 
                {
                    if ((loc5 = String(loc4.Response.Error.@servercode)) == "0") 
                    {
                        if ((loc6 = String(loc4.Response.Error.@xmancode)) == "0") 
                        {
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.GENERAL_UNKNOWN + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                        }
                        else 
                        {
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, loc6 + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.XMAN);
                        }
                    }
                    else 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, loc5 + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.SERVER);
                        var loc7:*=loc5;
                        switch (loc7) 
                        {
                            case mgs.aurora.common.enums.XManServerErrorCodes.FUN_BONUS_EXPIRED:
                            {
                                loc1 = true;
                                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_EXPIRY_DIALOGUE);
                                break;
                            }
                            case mgs.aurora.common.enums.XManServerErrorCodes.FUN_BONUS_OUT_OF_PLAYTIME:
                            {
                                loc1 = true;
                                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_PLAYTIME_DIALOGUE);
                                break;
                            }
                            default:
                            {
                                break;
                            }
                        }
                        if (loc1) 
                        {
                            return;
                        }
                    }
                }
            }
            flash.external.ExternalInterface.call("setExternalError");
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_ERROR, loc3, loc2);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_STOP_CONNECTION_ANIMATION);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.ASP_REFRESH_STOP);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CLEAN_ON_ERROR);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_SGI_TOPBAR);
            return;
        }
    }
}


//              class SystemErrorCommand
package mgs.aurora.modules.core.controller.error 
{
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SystemErrorCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SystemErrorCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("SystemErrorCommand " + arg1.getType(), "SYSTEM - ERROR");
            var loc1:*=arg1.getType();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE:
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE:
                {
                    this.sendNotification(arg1.getType(), arg1.getBody() as XML);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL:
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL:
                {
                    this.sendNotification(arg1.getType(), arg1.getBody() as String);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//            package files
//              class GameFileResponseCommand
package mgs.aurora.modules.core.controller.files 
{
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class GameFileResponseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function GameFileResponseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_ASSET_LOAD_COMPLETE);
            return;
        }
    }
}


//              class SystemFileResponseCommand
package mgs.aurora.modules.core.controller.files 
{
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SystemFileResponseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SystemFileResponseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE);
            return;
        }
    }
}


//            package frames
//              class LaunchBankCommand
package mgs.aurora.modules.core.controller.frames 
{
    import mgs.aurora.api.events.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.api.banking.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchBankCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchBankCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=int(mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.bank.@quickBank);
            if (arg1.getType() == mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK) 
            {
                if (loc1 != 0) 
                {
                    if (loc1 == 1) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_QUICKBANK);
                    }
                }
                else 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
                }
                return;
            }
            var loc2:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            if (loc1 != 0) 
            {
                if (loc1 == 1) 
                {
                    loc2.launchQuickBank();
                }
            }
            else 
            {
                loc2.launchBank();
            }
            var loc3:*;
            if (loc3 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy) 
            {
                mgs.aurora.modules.core.model.api.banking.Banking(loc3.banking).dispatchEvent(new mgs.aurora.api.events.ApiBankingEvent(mgs.aurora.api.events.ApiBankingEvent.BANK_OPEN));
            }
            return;
        }
    }
}


//              class LaunchExitCommand
package mgs.aurora.modules.core.controller.frames 
{
    import mgs.aurora.api.module.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchExitCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchExitCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=0;
            if (arg1.getType() == mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_USER_DECISION) 
            {
                loc1 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
                if (loc1.getData() != null) 
                {
                    loc2 = loc1.gameSet.art.@id;
                    if (loc2 == "5000") 
                    {
                        loc3 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                        (loc4 = facade.hasProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME) ? mgs.aurora.modules.core.model.ExtraModuleDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)).extraData : new mgs.aurora.api.module.ExtraModuleData()).moduleId = loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID];
                        loc4.clientId = loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID];
                        Debugger.trace("set new extradata " + loc4.extraData, "SYSTEM");
                        loc4.extraData = loc4.extraData + ",gameVisited,true";
                        if (facade.hasProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)) 
                        {
                            mgs.aurora.modules.core.model.ExtraModuleDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)).extraData = loc4;
                        }
                        else 
                        {
                            facade.registerProxy(new mgs.aurora.modules.core.model.ExtraModuleDataProxy(loc4));
                        }
                        loc5 = 404000;
                        loc6 = 1;
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, new mgs.aurora.modules.core.model.vo.SwitchModuleParams(loc5, loc6));
                        return;
                    }
                }
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE, arg1.getBody(), arg1.getType());
            return;
        }
    }
}


//              class LaunchExternalCommand
package mgs.aurora.modules.core.controller.frames 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchExternalCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchExternalCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            var loc2:*=loc1;
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_FROM_FRAME_ICON_ID:
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXTERNAL:
                {
                    mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchFromFrameIconID(arg1.getBody() as String);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_MY_ACCOUNT:
                {
                    mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchMyAccount();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_OTHER_INTERNAL_SITE:
                {
                    mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchOtherInternalSite(arg1.getBody() as XMLList);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//              class LaunchPlayForRealCommand
package mgs.aurora.modules.core.controller.frames 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchPlayForRealCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchPlayForRealCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).brandingFiles.playForReal;
            var loc2:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            if (loc1.@action != mgs.aurora.modules.core.enum.PlayForReal.PFR_ACTION_OLR) 
            {
                if (loc1.@action == mgs.aurora.modules.core.enum.PlayForReal.PFR_ACTION_OTHER) 
                {
                    loc2.launchCustomPlayForReal();
                }
            }
            else 
            {
                loc2.launchOLR("real");
            }
            return;
        }
    }
}


//              class UpdateFrameCommand
package mgs.aurora.modules.core.controller.frames 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class UpdateFrameCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function UpdateFrameCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            if (!this.facade.hasMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME)) 
            {
                return;
            }
            this._frame = this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME) as mgs.aurora.modules.core.view.frames.FramesBuilderMediator;
            this._data = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            this._dependsProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_DISPLAYTYPE:
                {
                    this.updateBalance();
                    this.updateCreditsWordOnDisplayType();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_LOGIN_SUCCESSFULL:
                {
                    this.updateBalance();
                    this.updateCreditsWord(mgs.aurora.api.enums.BalanceDisplayType.CREDITS);
                    this.updateInfoBar();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_BALANCE:
                {
                    this.updateBalance();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_AFTER_SWITCH:
                {
                    this.updateBalance();
                    this.updateCreditsWordOnDisplayType();
                    this.updateInfoBar();
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function updateBalance():void
        {
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=NaN;
            var loc8:*=NaN;
            var loc9:*=0;
            var loc10:*=null;
            var loc1:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.creditsFormat;
            var loc2:*=mgs.aurora.modules.core.model.BankingConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.BankingConfigProxy.NAME));
            var loc3:*=loc2.displayType;
            var loc4:*=facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME) as mgs.aurora.modules.core.model.CurrenciesProxy;
            if (loc3 != mgs.aurora.api.enums.BalanceDisplayType.COINS) 
            {
                if (loc3 != mgs.aurora.api.enums.BalanceDisplayType.CURRENCY) 
                {
                    this._frame.currentFrame.credits.value = mgs.aurora.common.utilities.BalanceUtils.convertToCredits(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE], int(loc1.@useTMSeparator) == 1, loc1.@separatorTM, loc1.@separatorF);
                }
                else 
                {
                    loc9 = loc4.standardCurrencyFormat;
                    loc10 = loc4.formatToCurrency(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE], loc9);
                    this._frame.currentFrame.credits.value = loc10;
                }
            }
            else if ((loc5 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator) == null) 
            {
                loc8 = mgs.aurora.common.utilities.BalanceUtils.convertToCoins(Number(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE]), 1);
                this._frame.currentFrame.credits.value = loc8.toString();
            }
            else 
            {
                loc6 = loc5.banking.display.coinSize != 0 ? loc5.banking.display.coinSize : 1;
                loc7 = mgs.aurora.common.utilities.BalanceUtils.convertToCoins(Number(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE]), loc6);
                this._frame.currentFrame.credits.value = mgs.aurora.common.utilities.BalanceUtils.formatCoinsDisplay(loc7);
            }
            return;
        }

        internal function updateCreditsWordOnDisplayType():void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.BankingConfigProxy.NAME) as mgs.aurora.modules.core.model.BankingConfigProxy;
            this.updateCreditsWord(loc1.displayType);
            return;
        }

        internal function updateCreditsWord(arg1:int):void
        {
            var displayType:int;
            var creditsBox:XMLList;
            var creditsType:String;

            var loc1:*;
            displayType = arg1;
            creditsBox = this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).infomessage.creditbox;
            if (displayType == mgs.aurora.api.enums.BalanceDisplayType.COINS) 
            {
                creditsBox = this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).infomessage.coinbox;
            }
            creditsType = creditsBox.@start;
            if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
            {
                if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER) 
                {
                    if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER) 
                    {
                        if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
                        {
                            creditsType = creditsBox.@usertype4;
                        }
                    }
                    else 
                    {
                        creditsType = creditsBox.@usertype1;
                    }
                }
                else 
                {
                    creditsType = creditsBox.@usertype3;
                }
            }
            else 
            {
                creditsType = creditsBox.@usertype2;
            }
            var loc3:*=0;
            var loc4:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@ID == creditsType) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._frame.currentFrame.credits.word = loc2.@text;
            return;
        }

        internal function updateInfoBar(arg1:__AS3__.vec.Vector.<String>=null, arg2:int=0):void
        {
            var messages:__AS3__.vec.Vector.<String>=null;
            var interval:int=0;
            var infoMessage:XMLList;
            var alternateText:__AS3__.vec.Vector.<String>;

            var loc1:*;
            infoMessage = null;
            alternateText = null;
            messages = arg1;
            interval = arg2;
            if (messages != null) 
            {
                this._frame.currentFrame.heading.alternateText(messages, interval);
            }
            else 
            {
                infoMessage = this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).infomessage;
                if (int(infoMessage.@alternateText) == 1) 
                {
                    this._frame.currentFrame.heading.reset();
                    alternateText = new Vector.<String>();
                    alternateText.push(infoMessage.@welcomeNote);
                    if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
                    {
                        if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER) 
                        {
                            if (uint(this._data[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) == mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER) 
                            {
                                loc3 = 0;
                                loc4 = this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                                loc2 = new XMLList("");
                                for each (loc5 in loc4) 
                                {
                                    with (loc6 = loc5) 
                                    {
                                        if (@ID == infoMessage.infobar.@usertype1) 
                                        {
                                            loc2[loc3] = loc5;
                                        }
                                    }
                                }
                                alternateText.push(loc2.@text);
                            }
                        }
                        else 
                        {
                            loc3 = 0;
                            loc4 = this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                            loc2 = new XMLList("");
                            for each (loc5 in loc4) 
                            {
                                with (loc6 = loc5) 
                                {
                                    if (@ID == infoMessage.infobar.@usertype3) 
                                    {
                                        loc2[loc3] = loc5;
                                    }
                                }
                            }
                            alternateText.push(loc2.@text);
                        }
                    }
                    else 
                    {
                        var loc3:*=0;
                        var loc4:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                        var loc2:*=new XMLList("");
                        for each (var loc5:* in loc4) 
                        {
                            var loc6:*;
                            with (loc6 = loc5) 
                            {
                                if (@ID == infoMessage.infobar.@usertype2) 
                                {
                                    loc2[loc3] = loc5;
                                }
                            }
                        }
                        alternateText.push(loc2.@text);
                    }
                    this._frame.currentFrame.heading.systemAlternateText(alternateText, int(infoMessage.@delay));
                }
            }
            return;
        }

        internal var _frame:mgs.aurora.modules.core.view.frames.FramesBuilderMediator;

        internal var _data:Object;

        internal var _dependsProxy:mgs.aurora.modules.core.model.DependenciesProxy;
    }
}


//            package market
//              class PreLaunchBankCommand
package mgs.aurora.modules.core.controller.market 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PreLaunchBankCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PreLaunchBankCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.modules.core.model.BankingProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME));
            if (loc1.isAvailable) 
            {
                loc2 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_BANK_BUTTON, loc2);
            }
            else 
            {
                facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE, "ERRORSTR19");
            }
            return;
        }
    }
}


//              class PreSessionTimeoutCommand
package mgs.aurora.modules.core.controller.market 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PreSessionTimeoutCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PreSessionTimeoutCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("PreSessionTimeoutCommand SESSION TIMEOUT PLEASE ", "SYSTEM");
            var loc1:*=mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
            loc1.loggedIn = false;
            var loc2:*=arg1.getBody() as String;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SESSIONTIMEOUT, loc2);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_STOP_CONNECTION_ANIMATION);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_END_CONNECTIONS);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.ASP_REFRESH_STOP);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CLEAN_ON_ERROR);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_SGI_TOPBAR);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_TIMED_OUT);
            return;
        }
    }
}


//            package moduleSetup
//              class GameModuleLoadedCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.pipes.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class GameModuleLoadedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function GameModuleLoadedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME) as mgs.aurora.modules.core.model.UrlLoadResponseProxy;
            var loc2:*=loc1.getResponse();
            var loc3:*;
            var loc4:*=(loc3 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator).stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_GAME) as flash.display.Sprite;
            var loc5:*=loc2.content as flash.display.Sprite;
            loc4.addChildAt(loc5, 0);
            var loc6:*;
            (loc6 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreJunctionMediator.NAME) as mgs.aurora.modules.core.view.CoreJunctionMediator).connectModule(loc2.content as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeAware, mgs.aurora.common.pipes.PipeNames.TO_AURORA_GAME_MODULE, mgs.aurora.common.pipes.PipeNames.FROM_AURORA_GAME_MODULE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INITIALIZE_MODULE, loc2.content);
            return;
        }
    }
}


//              class GameNotAvailableCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.marketManager.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class GameNotAvailableCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function GameNotAvailableCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*="";
            var loc2:*=arg1.getBody() as int;
            var loc3:*=loc2;
            switch (loc3) 
            {
                case mgs.aurora.modules.core.enum.GameBlockedMessages.VIP_ONLY_MESSAGE:
                {
                    loc1 = "BLOCKGAME_ERROR1";
                    break;
                }
                case mgs.aurora.modules.core.enum.GameBlockedMessages.FRAUD_MESSAGE:
                {
                    loc1 = "BLOCKGAME_ERROR2";
                    break;
                }
                case mgs.aurora.modules.core.enum.GameBlockedMessages.DISABLED_MESSAGE:
                {
                    loc1 = "BLOCKGAME_ERROR3";
                    break;
                }
                case mgs.aurora.modules.core.enum.GameBlockedMessages.SAME_GAME_MESSAGE:
                {
                    loc1 = "SAME_GAME_MESSAGE";
                    break;
                }
                default:
                {
                    loc1 = "ERRORSTR4";
                    break;
                }
            }
            if (arg1.getType() == mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE) 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE, loc1);
                return;
            }
            if (facade.hasMediator(mgs.aurora.modules.core.view.marketManager.MarketManagerMediator.NAME)) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL);
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.GENERAL_GAME_NOT_AVAILABLE + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
            return;
        }
    }
}


//              class LaunchExternalGameCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.utils.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchExternalGameCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchExternalGameCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as XML;
            var loc2:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            loc2.launchExternalGame(mgs.aurora.modules.core.utils.ModuleUtility.getLaunchUrl(loc1), loc1.art.id);
            return;
        }
    }
}


//              class LoadGameModuleCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LoadGameModuleCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoadGameModuleCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            if (!this.facade.hasMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)) 
            {
                this.facade.registerMediator(new mgs.aurora.modules.core.view.module.GameModuleMediator(null));
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_START_LOAD);
            return;
        }
    }
}


//              class LoadNewModuleCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import flash.display.*;
    import flash.external.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.pipes.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.module.*;
    import mgs.aurora.modules.core.view.scale.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class LoadNewModuleCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoadNewModuleCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (arg1.getType() != mgs.aurora.modules.core.notifications.CoreNotifications.UNLOAD_EXISTING_MODULE_START) 
            {
                if (arg1.getType() == mgs.aurora.modules.core.notifications.CoreNotifications.UNLOAD_EXISTING_MODULE_COMPLETE) 
                {
                    loc1 = facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
                    loc1.tearDown = false;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UNLOAD_MAIN_SPRITE);
                    if (this.resetModuleInformation()) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GAME_INITIALIZED);
                        loc2 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
                        loc3 = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.login.@loginType;
                        if (loc2.getValue("waitForModuleToLoad") == "true" || !(loc3 == mgs.aurora.common.enums.raptorSession.LoginType.SGI)) 
                        {
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL);
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_TEXT_CHANGE, mgs.aurora.api.enums.PreloaderTextLabel.LOADING);
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_SHOW_PRELOADER);
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_PRELOADER);
                            if ((loc4 = mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME))).userTypeSwitchRequested) 
                            {
                                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INVOKE_USERTYPE_SWITCH);
                            }
                            else 
                            {
                                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS);
                            }
                        }
                    }
                }
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE);
            }
            return;
        }

        internal function resetModuleInformation():Boolean
        {
            var coreJunction:mgs.aurora.modules.core.view.CoreJunctionMediator;
            var newModuleProxy:mgs.aurora.modules.core.model.NewModuleProxy;
            var gamesList:XML;
            var gameSets:XMLList;
            var gameSet:XML;
            var g:String;
            var sessionConfig:Object;
            var widescreen:Boolean;
            var T3Game:Boolean;
            var scaleM:mgs.aurora.modules.core.view.scale.ScaleManagerMediator;
            var ws:int;
            var hs:int;
            var lock:String;
            var dialogueMediator:mgs.aurora.modules.core.view.dialogues.DialoguesMediator;
            var coreMediator:mgs.aurora.modules.core.view.CoreMediator;
            var tooltip:flash.display.Sprite;
            var modal:flash.display.Sprite;
            var framesBuilderMediator:mgs.aurora.modules.core.view.frames.FramesBuilderMediator;
            var fileCount:uint;
            var inGameLoaderProxy:mgs.aurora.modules.core.model.InGameLoaderProxy;

            var loc1:*;
            gamesList = null;
            gameSet = null;
            g = null;
            sessionConfig = null;
            widescreen = false;
            T3Game = false;
            scaleM = null;
            ws = 0;
            hs = 0;
            lock = null;
            dialogueMediator = null;
            coreMediator = null;
            tooltip = null;
            modal = null;
            framesBuilderMediator = null;
            fileCount = 0;
            inGameLoaderProxy = null;
            coreJunction = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreJunctionMediator.NAME) as mgs.aurora.modules.core.view.CoreJunctionMediator;
            coreJunction.disconnectModule(mgs.aurora.common.pipes.PipeNames.TO_AURORA_GAME_MODULE, mgs.aurora.common.pipes.PipeNames.FROM_AURORA_GAME_MODULE);
            newModuleProxy = mgs.aurora.modules.core.model.NewModuleProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.NewModuleProxy.NAME));
            gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            var loc3:*=0;
            var loc4:*=gamesList.gameset.art;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (uint(@mid) == newModuleProxy.moduleId && uint(@cid) == newModuleProxy.clientId) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            gameSets = loc2;
            gameSet = new XML();
            if (gameSets.length() <= 1) 
            {
                gameSet = gameSets.parent();
            }
            else 
            {
                gameSet = gameSets[0].parent();
            }
            if (gameSet == null) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, mgs.aurora.modules.core.enum.GameBlockedMessages.DEFAULT_MESSAGE);
                return false;
            }
            if (mgs.aurora.modules.core.utils.ModuleUtility.isExternalGame(gameSet)) 
            {
                if (mgs.aurora.modules.core.utils.ModuleUtility.getLaunchUrl(gameSet) != "") 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_EXTERNAL, gameSet);
                }
                else 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, mgs.aurora.modules.core.enum.GameBlockedMessages.DEFAULT_MESSAGE);
                }
                return false;
            }
            g = String(gameSet.art.@id);
            sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID] = g;
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.OPERATORID] = String(gameSet.art.@operatorId);
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID] = String(newModuleProxy.moduleId);
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID] = String(newModuleProxy.clientId);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CHECK_GAME_PROGRESSIVE, gameSet);
            widescreen = String(gameSet.@widescreen.toString()).toLowerCase() == "true";
            T3Game = gameSet.@avm1Platform == undefined ? false : gameSet.@avm1Platform.toUpperCase() == "T3";
            scaleM = mgs.aurora.modules.core.view.scale.ScaleManagerMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.scale.ScaleManagerMediator.NAME));
            ws = widescreen ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH : mgs.aurora.common.enums.StageSizeConstants.STANDARD_WIDTH;
            hs = widescreen ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_HEIGHT : mgs.aurora.common.enums.StageSizeConstants.STANDARD_HEIGHT;
            if (T3Game) 
            {
                hs = String(gameSet.art.@frame).indexOf("default") > -1 ? mgs.aurora.common.enums.StageSizeConstants.T3DEFAULTFRAME_HEIGHT : mgs.aurora.common.enums.StageSizeConstants.T3MINIFRAME_HEIGHT;
            }
            lock = widescreen || T3Game ? "true" : "false";
            Debugger.trace("setGameSetting 2 ; " + g, "SYSTEM");
            flash.external.ExternalInterface.call("setGameSetting", lock, ws, hs, g);
            scaleM.scaleManger.widescreen = widescreen;
            scaleM.scaleManger.initWindowWidth = ws;
            scaleM.scaleManger.initWindowHeight = hs;
            scaleM.scaleManger.reSize();
            dialogueMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME) as mgs.aurora.modules.core.view.dialogues.DialoguesMediator;
            dialogueMediator.setStageResolution(scaleM.scaleManger.initWindowWidth, scaleM.scaleManger.initWindowHeight);
            coreMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            tooltip = coreMediator.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_TOOLTIP) as flash.display.Sprite;
            tooltip.width = ws;
            tooltip.height = hs;
            modal = coreMediator.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_MODAL) as flash.display.Sprite;
            modal.width = ws;
            modal.height = hs;
            flash.external.ExternalInterface.call("setExternalInit", modal.width, modal.height);
            mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).setData(gameSet);
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SET_SGI_GAME_OVERRIDE);
            framesBuilderMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME) as mgs.aurora.modules.core.view.frames.FramesBuilderMediator;
            framesBuilderMediator.switchFrame();
            fileCount = gameSet.@comp.length() == 1 ? uint(gameSet.@comp) : 10;
            inGameLoaderProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.InGameLoaderProxy.NAME) as mgs.aurora.modules.core.model.InGameLoaderProxy;
            inGameLoaderProxy.init(fileCount);
            mgs.aurora.modules.core.model.CurrenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME)).resetFormattingSetting();
            this.facade.removeProxy(mgs.aurora.modules.core.model.NewModuleProxy.NAME);
            return true;
        }
    }
}


//              class SwitchToNewModuleCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SwitchToNewModuleCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SwitchToNewModuleCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.vo.SwitchModuleParams(arg1.getBody());
            var loc2:*=new mgs.aurora.modules.core.model.NewModuleProxy();
            loc2.clientId = loc1.clientID;
            loc2.moduleId = loc1.moduleID;
            facade.registerProxy(loc2);
            var loc3:*;
            (loc3 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData).setValue("__combinedsettings__", "");
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CLEAR_PREFETCH_DATA);
            sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE);
            return;
        }
    }
}


//              class UnloadModuleSpriteCommand
package mgs.aurora.modules.core.controller.moduleSetup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class UnloadModuleSpriteCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function UnloadModuleSpriteCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_GAME) as flash.display.Sprite;
            if (loc2.numChildren > 0) 
            {
                loc2.removeChildAt(0);
            }
            return;
        }
    }
}


//            package multiplayer
//              class MPFConnectionsBypassCommand
package mgs.aurora.modules.core.controller.multiplayer 
{
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class MPFConnectionsBypassCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function MPFConnectionsBypassCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.GameSetProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME));
            if (loc1.isLobbyConnectionRequired || loc1.isRouterConnectionRequired) 
            {
                facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL, "ERRORSTR6");
                facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.MPF_CONNECTION_ERROR + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                return;
            }
            var loc2:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            if (loc2.getValue("waitForModuleToLoad") != "true") 
            {
                sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE);
            }
            return;
        }
    }
}


//            package operator
//              class LaunchOperatorPageCommand
package mgs.aurora.modules.core.controller.operator 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class LaunchOperatorPageCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LaunchOperatorPageCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc5:*=null;
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=int(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]);
            var loc4:*;
            if ((loc4 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.IS_QUICK_REDIRECT] == "true") 
            {
                if (loc3 == mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER && int(loc1.casino.operatorPage.@realPlay) == 1 || loc3 == mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER && int(loc1.casino.operatorPage.@guestPlay) == 1 || loc3 == mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER && int(loc1.casino.operatorPage.@demoPlay) == 1) 
                {
                    (loc5 = mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher).launchOperatorPage();
                }
            }
            return;
        }
    }
}


//            package pcm
//              class GenieTrackingCommand
package mgs.aurora.modules.core.controller.pcm 
{
    import flash.external.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.profiling.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class GenieTrackingCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function GenieTrackingCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this._sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR:
                {
                    this.loginFailed(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_SUCCESSFULL:
                {
                    this.loginSuccessFull(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_SUCCESSFULL_FLASH_ACTIVATION:
                {
                    this.flashActivated(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GAME_INITIALIZED:
                {
                    this.gameInitialized(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GAME_DOWNLOADED:
                {
                    this.gameDownloaded(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_WITH_MIGRATION:
                {
                    this.loginWithMigration(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_MIGRATION_ACCOUNT_LOGIN:
                {
                    this.migrationAccountLogin(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_DISCONNECTED:
                {
                    this.userDisconnected(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_TIMED_OUT:
                {
                    this.userTimedOut(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_ACCOUNT_LOCKED:
                {
                    this.userAccountLocked(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR:
                {
                    this.casinoError(arg1);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GENERIC_STEP:
                {
                    this.genericGenieStep(arg1);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function loginSuccessFull(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("loginSuccessFull", "SYSTEM - GENIE");
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            var loc2:*=mgs.aurora.modules.core.model.ExternalDataProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc3:*=int(loc2.getValue("performancerating", "0"));
            var loc4:*=loc2.getValue("averagespeed", "unknown");
            if (loc3 > 100) 
            {
                loc3 = 100;
            }
            var loc5:*;
            (loc5 = new Object()).regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc5.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc5.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            loc5.performanceRating = String(loc3);
            loc5.avgspeed = loc4;
            loc5.gameid = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]);
            loc5.userid = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_USERID]);
            Debugger.trace("loginSuccessFull" + loc5, "SYSTEM");
            Debugger.trace(loc5, "SYSTEM");
            this.externalCall("onSuccessfullLogin", loc5);
            return;
        }

        internal function loginFailed(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("loginFailed", "SYSTEM - GENIE");
            var loc1:*=arg1.getBody() as XML;
            var loc2:*=new Object();
            loc2.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc2.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc2.xmancode = String(loc1.Response.Error.@xmancode);
            loc2.servercode = String(loc1.Response.Error.@servercode);
            loc2.alert = String(loc1.Response.Error.@text);
            this.externalCall("onFailedLogin", loc2);
            return;
        }

        internal function flashActivated(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("flashActivated", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            this.externalCall("onSuccessfullFlashActivation", loc1);
            return;
        }

        internal function gameDownloaded(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("gameDownloaded", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.gameId = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]);
            this.externalCall("onGameDownloaded", loc1);
            return;
        }

        internal function gameInitialized(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("gameInitialized", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.gameId = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]);
            this.externalCall("onGameInitialized", loc1);
            return;
        }

        internal function loginWithMigration(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("loginWithMigration", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc1.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc1.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            this.externalCall("onLoginWithMigration", loc1);
            return;
        }

        internal function migrationAccountLogin(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("migrationAccountLogin", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc1.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc1.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            this.externalCall("onMigrationAccountLogin", loc1);
            return;
        }

        internal function userDisconnected(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("userDisconnected", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc1.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc1.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            this.externalCall("onUserDisconnected", loc1);
            return;
        }

        internal function userTimedOut(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("userTimedOut", "SYSTEM - GENIE");
            var loc1:*=new Object();
            loc1.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc1.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc1.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            this.externalCall("onUserTimedOut", loc1);
            return;
        }

        internal function userAccountLocked(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("userAccountLocked", "SYSTEM - GENIE");
            var loc1:*=new Object();
            var loc2:*=arg1.getBody() as XML;
            loc1.xmancode = String(loc2.Response.Error.@xmancode);
            loc1.servercode = String(loc2.Response.Error.@servercode);
            loc1.alert = String(loc2.Response.Error.@text);
            loc1.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            loc1.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            loc1.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            this.externalCall("onUserAccountLocked", loc1);
            return;
        }

        internal function casinoError(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            var loc1:*=(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GenieStepsProxy.NAME) as mgs.aurora.modules.core.model.GenieStepsProxy).stepId(mgs.aurora.modules.core.enum.GenieStepIdNames.CASINO_ERRORS);
            if (loc1 != "") 
            {
                loc2 = new Object();
                loc2.stepId = loc1;
                loc2.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
                if (this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN]) 
                {
                    loc2.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
                }
                else 
                {
                    loc2.playerLoginName = "";
                }
                loc2.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
                loc2.stepRef = arg1.getBody() as String;
                this.externalCall("onGenericGenieStep", loc2);
            }
            return;
        }

        internal function genericGenieStep(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var params:flash.utils.Dictionary;
            var data:Object;
            var key:String;
            var request:String;
            var gamesList:XML;
            var gameId:String;
            var gameSet:XML;

            var loc1:*;
            key = null;
            request = null;
            gamesList = null;
            gameId = null;
            gameSet = null;
            notification = arg1;
            params = notification.getBody() as flash.utils.Dictionary;
            Debugger.trace("Generic Step - " + params["stepId"], "SYSTEM - GENIE");
            data = new Object();
            data.regType = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
            if (this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN]) 
            {
                data.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            }
            else 
            {
                data.playerLoginName = "";
            }
            data.userIdentifier = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
            var loc2:*=0;
            var loc3:*=params;
            for (key in loc3) 
            {
                data[key] = String(params[key]);
            }
            request = notification.getType();
            if (!(request == null) && request.toLowerCase().match(mgs.aurora.modules.core.model.api.profiling.Profiling.GAME_REQUEST)) 
            {
                gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
                gameId = this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID];
                loc3 = 0;
                var loc4:*=gamesList.gameset.art;
                loc2 = new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@id.toString().toLowerCase() == gameId.toLowerCase()) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                gameSet = loc2.parent();
                if (String(gameSet.@allowPcm).toLowerCase() == "true") 
                {
                    this.externalCall("onGenericGenieStep", data);
                }
            }
            else 
            {
                this.externalCall("onGenericGenieStep", data);
            }
            return;
        }

        internal function externalCall(arg1:String, arg2:Object):void
        {
            var functionName:String;
            var data:Object;

            var loc1:*;
            functionName = arg1;
            data = arg2;
            if (flash.external.ExternalInterface.available) 
            {
                try 
                {
                    flash.external.ExternalInterface.call(functionName, data);
                }
                catch (error:Error)
                {
                };
            }
            return;
        }

        internal var _sessionConfig:Object;
    }
}


//            package preloader
//              class UpdatePreloaderCommand
package mgs.aurora.modules.core.controller.preloader 
{
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class UpdatePreloaderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function UpdatePreloaderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo;
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.InGameLoaderProxy.NAME) as mgs.aurora.modules.core.model.InGameLoaderProxy;
            loc2.progressUpdate(new mgs.aurora.modules.loaderProgress.model.vo.ProgressData(loc1.request.id, loc1.progress));
            return;
        }
    }
}


//            package raptorSession
//              class StartLoginCommand
package mgs.aurora.modules.core.controller.raptorSession 
{
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class StartLoginCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartLoginCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            if (loc1.getValue("waitForLogin") == "true") 
            {
                return;
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP);
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_LOGIN);
            return;
        }
    }
}


//            package setup
//              package hiddenGames
//                class HiddenGamesRequestCommand
package mgs.aurora.modules.core.controller.setup.hiddenGames 
{
    import flash.utils.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class HiddenGamesRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function HiddenGamesRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            this.sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc2:*=String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.HIDDENGAMES]);
            var loc3:*=int(loc1.casino.login.@disableHiddenGames);
            if (!(loc2 == "" || loc2 == null)) 
            {
                if (!this.facade.hasProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME)) 
                {
                    this.facade.registerProxy(new mgs.aurora.modules.core.model.HiddenGamesProxy());
                }
                (loc5 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME) as mgs.aurora.modules.core.model.HiddenGamesProxy).setHiddenGamesFromGlobalVars(loc2);
                loc6 = String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]);
                if (loc5.isHiddenGameId(loc6)) 
                {
                    loc7 = loc5.getMessageID(loc6);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, loc7);
                    return;
                }
            }
            if (loc3 == 1) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS);
                return;
            }
            var loc4:*;
            (loc4 = new flash.utils.Dictionary())[mgs.aurora.common.enums.XManPacketParameterKeys.VERB] = mgs.aurora.modules.core.enum.PacketVerbs.HIDDENGAMESLIST_VERB;
            loc4[mgs.aurora.common.enums.XManPacketParameterKeys.MODULE_ID] = mgs.aurora.modules.core.controller.setup.hiddenGames.HiddenGamesRequestCommand.MID;
            loc4[mgs.aurora.common.enums.XManPacketParameterKeys.CLIENT_ID] = mgs.aurora.modules.core.controller.setup.hiddenGames.HiddenGamesRequestCommand.CID;
            loc4[mgs.aurora.common.enums.XManPacketParameterKeys.RESET_SESSION_TIMER] = true;
            loc4[mgs.aurora.common.enums.XManPacketParameterKeys.REQUEST] = loc1.casino.info.@hasmenu == "1" || loc1.vpb.@supported == "1" ? this.buildBulkRequestPacket() : this.buildSpecificRequestPacket();
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SEND_PACKET, loc4);
            return;
        }

        internal function buildSpecificRequestPacket():XML
        {
            var loc1:*=new XML("<Request>\r\n\t\t\t\t\t\t\t" + ("<HiddenGamesRequest ipAddress=\"" + mgs.aurora.modules.core.controller.setup.hiddenGames.HiddenGamesRequestCommand.IPADDRESS + "\" language=\"" + String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE]) + "\" mid=\"" + String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID]) + "\" cid=\"" + String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID]) + "\"/>") + "\r\n\t\t\t\t\t\t  </Request>");
            return loc1;
        }

        internal function buildBulkRequestPacket():XML
        {
            var loc1:*=new XML("<Request>\r\n\t\t\t\t\t\t\t" + ("<HiddenGamesRequest ipAddress=\"" + mgs.aurora.modules.core.controller.setup.hiddenGames.HiddenGamesRequestCommand.IPADDRESS + "\" language=\"" + String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE]) + "\"/>") + " \r\n\t\t\t\t\t\t  </Request>");
            return loc1;
        }

        public static const MID:String="144";

        public static const CID:String="10001";

        public static const IPADDRESS:String="10.0.0.1";

        public var sessionConfig:Object;
    }
}


//                class HiddenGamesResponseCommand
package mgs.aurora.modules.core.controller.setup.hiddenGames 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class HiddenGamesResponseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function HiddenGamesResponseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc13:*=0;
            var loc14:*=0;
            var loc15:*=0;
            var loc1:*=arg1.getBody() as XML;
            if (loc1.Id.@verb == mgs.aurora.modules.core.enum.PacketVerbs.ERROR_VERB) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
                return;
            }
            if (!loc1.Response.hasOwnProperty("Game")) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS);
                return;
            }
            var loc2:*=int(loc1.Response.@show);
            var loc3:*=int(loc1.Response.@download);
            var loc4:*=int(loc1.Response.@message);
            var loc5:*=loc1.Response.Game;
            var loc6:*=new Array();
            var loc7:*=0;
            var loc8:*=0;
            while (loc8 < loc5.length()) 
            {
                loc13 = loc5.hasOwnProperty("@download") ? int(loc5[loc8].@download) : loc3;
                loc14 = loc5.hasOwnProperty("@show") ? int(loc5[loc8].@show) : loc2;
                loc15 = loc5.hasOwnProperty("@message") ? int(loc5[loc8].@message) : loc4;
                if (!(loc14 == 1) || loc15 == 1) 
                {
                    loc7 = loc15 != 1 ? 0 : int(loc5[loc8].@messageId);
                    loc6.push({"mid":loc5[loc8].@mid, "cid":loc5[loc8].@cid, "mesid":loc7});
                }
                ++loc8;
            }
            var loc9:*;
            var loc10:*;
            (loc10 = (loc9 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.HGAME] = loc6.toString();
            if (!this.facade.hasProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME)) 
            {
                this.facade.registerProxy(new mgs.aurora.modules.core.model.HiddenGamesProxy());
            }
            var loc11:*;
            (loc11 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME) as mgs.aurora.modules.core.model.HiddenGamesProxy).setHiddenGames(loc6);
            var loc12:*=String(loc10[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]);
            if (loc11.isHiddenGameId(loc12)) 
            {
                loc7 = loc11.getMessageID(loc12);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, loc7);
            }
            else 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS);
            }
            return;
        }
    }
}


//              package playerInformation
//                class PlayerInformationRequestCommand
package mgs.aurora.modules.core.controller.setup.playerInformation 
{
    import flash.utils.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PlayerInformationRequestCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PlayerInformationRequestCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=new flash.utils.Dictionary();
            loc1[mgs.aurora.common.enums.XManPacketParameterKeys.VERB] = mgs.aurora.modules.core.enum.PacketVerbs.PLAYERINFORMATION_VERB;
            loc1[mgs.aurora.common.enums.XManPacketParameterKeys.MODULE_ID] = mgs.aurora.modules.core.controller.setup.playerInformation.PlayerInformationRequestCommand.MID;
            loc1[mgs.aurora.common.enums.XManPacketParameterKeys.CLIENT_ID] = mgs.aurora.modules.core.controller.setup.playerInformation.PlayerInformationRequestCommand.CID;
            loc1[mgs.aurora.common.enums.XManPacketParameterKeys.RESET_SESSION_TIMER] = true;
            loc1[mgs.aurora.common.enums.XManPacketParameterKeys.REQUEST] = new XML("<Request/>");
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SEND_PACKET, loc1);
            return;
        }

        public static const MID:String="151";

        public static const CID:String="1";

        public static const IP_ADDRESS:String="10.0.0.1";
    }
}


//                class PlayerInformationResponseCommand
package mgs.aurora.modules.core.controller.setup.playerInformation 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class PlayerInformationResponseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PlayerInformationResponseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=new XML(arg1.getBody().Response.PlayerInfo.toXMLString());
            if (loc1.Id.@verb == mgs.aurora.modules.core.enum.PacketVerbs.ERROR_VERB) 
            {
                loc1 = new XML("<PlayerInfo>\r\n\t\t\t\t\t<SessionInfo>\r\n\t\t\t\t\t\t<CurrencyISOCode></CurrencyISOCode>\r\n\t\t\t\t\t\t<CurrencyMultiplier>1</CurrencyMultiplier>\r\n\t\t\t\t\t\t<Alias></Alias>\r\n\t\t\t\t\t</SessionInfo>\r\n\t\t\t\t</PlayerInfo>");
            }
            this.facade.registerProxy(new mgs.aurora.modules.core.model.PlayerInformationProxy(loc1));
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.PlayerInformationProxy.NAME) as mgs.aurora.modules.core.model.PlayerInformationProxy;
            var loc3:*;
            (loc3 = facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME) as mgs.aurora.modules.core.model.CurrenciesProxy).currencyISO = loc2.currencyISO;
            loc3.currencyMultiplier = loc2.currencyMultiplier;
            Debugger.trace("PlayerInformationResponseCommand  : alias " + loc2.alias, "SYSTEM - MAX");
            var loc4:*;
            (loc4 = facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME) as mgs.aurora.modules.core.model.SessionDetailsProxy).userAlias = loc2.alias;
            Debugger.trace("PlayerInformationResponseCommand  : alias " + loc4.sessionUserId, "SYSTEM - MAX");
            loc4.mpfUserID = loc4.sessionUserId;
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_HIDDEN_GAMES);
            return;
        }
    }
}


//              class CreateDynamicConfigCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CreateDynamicConfigCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CreateDynamicConfigCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc3:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.CONFIG_MAPPINGS);
            var loc4:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc5:*;
            (loc5 = new mgs.aurora.modules.core.model.configMapping.SystemConfig(loc3)).generateConfig(loc2, loc4);
            var loc6:*=new mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(loc5);
            this.facade.registerProxy(loc6);
            var loc7:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.creditsFormat;
            var loc8:*;
            (loc8 = new Object()).displayType = int(loc7.@convertToCredits);
            var loc9:*=new mgs.aurora.modules.core.model.BankingConfigProxy(loc8);
            this.facade.registerProxy(loc9);
            mgs.aurora.modules.core.model.BrowserSettingsProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.BrowserSettingsProxy.NAME)).setupBrowserSettings();
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SET_CORELAYER_RESIZE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.DYNAMIC_CONFIG_CREATED);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_SUCCESSFULL_FLASH_ACTIVATION);
            return;
        }
    }
}


//              class InitAutomationCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.view.automation.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitAutomationCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitAutomationCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerMediator(new mgs.aurora.modules.core.view.automation.AutomationMediator(new Object()));
            return;
        }
    }
}


//              class InitBankingCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.view.banking.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitBankingCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitBankingCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CIP] = false;
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.login.@loginType.toString().toUpperCase();
            if (loc2 == mgs.aurora.common.enums.raptorSession.LoginType.MPP) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CIP] = true;
            }
            var loc3:*;
            var loc4:*=(loc3 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy).getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.RAPTOR_BANKING_MODULE);
            this.facade.registerMediator(new mgs.aurora.modules.core.view.banking.BankingMediator(loc4.content));
            this.facade.registerProxy(new mgs.aurora.modules.core.model.BankingProxy());
            return;
        }
    }
}


//              class InitBonusBubbleCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.bubble.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitBonusBubbleCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitBonusBubbleCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            if (mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).isExternalGame()) 
            {
                return;
            }
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            if (loc1.hasDependency(mgs.aurora.modules.core.enum.DependencyName.BONUS_BUBBLE)) 
            {
                loc2 = loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.BONUS_BUBBLE);
                this.facade.registerMediator(new mgs.aurora.modules.core.view.bubble.BonusBubbleMediator(loc2.content));
            }
            else 
            {
                return;
            }
            return;
        }
    }
}


//              class InitBrandMigrationCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitBrandMigrationCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitBrandMigrationCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerProxy(new mgs.aurora.modules.core.model.BrandMigrationProxy());
            return;
        }
    }
}


//              class InitCurrenciesCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitCurrenciesCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitCurrenciesCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerProxy(new mgs.aurora.modules.core.model.CurrenciesProxy());
            return;
        }
    }
}


//              class InitDefaultGameModuleCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import flash.external.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import mgs.aurora.modules.core.view.scale.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitDefaultGameModuleCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitDefaultGameModuleCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var sessionConfig:Object;
            var gamesList:XML;
            var gameId:String;
            var gameSet:XML;
            var g:String;
            var widescreen:Boolean;
            var T3Game:Boolean;
            var scaleM:mgs.aurora.modules.core.view.scale.ScaleManagerMediator;
            var ws:int;
            var hs:int;
            var lock:String;
            var dialogueMediator:mgs.aurora.modules.core.view.dialogues.DialoguesMediator;
            var coreMediator:mgs.aurora.modules.core.view.CoreMediator;
            var tooltip:flash.display.Sprite;
            var modal:flash.display.Sprite;

            var loc1:*;
            gamesList = null;
            gameSet = null;
            g = null;
            widescreen = false;
            T3Game = false;
            scaleM = null;
            ws = 0;
            hs = 0;
            lock = null;
            dialogueMediator = null;
            coreMediator = null;
            tooltip = null;
            modal = null;
            notification = arg1;
            sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            facade.registerProxy(new mgs.aurora.modules.core.model.GamesListProxy(gamesList));
            gameId = sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID];
            var loc3:*=0;
            var loc4:*=gamesList.gameset.art;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id.toString().toLowerCase() == gameId.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            gameSet = loc2.parent();
            if (gameSet == null) 
            {
                loc3 = 0;
                loc4 = gamesList.gameset.art;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (uint(@mid) == uint(sessionConfig[SessionConfig.CURMID]) && uint(@cid) == uint(sessionConfig[SessionConfig.CURCID])) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                gameSet = loc2.parent();
                if (gameSet == null) 
                {
                    this.gameIdError();
                    return;
                }
            }
            g = String(gameSet.art.@id);
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID] = g;
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.OPERATORID] = gameSet.art.@operatorId;
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID] = gameSet.art.@mid;
            sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID] = gameSet.art.@cid;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CHECK_GAME_PROGRESSIVE, gameSet);
            widescreen = String(gameSet.@widescreen.toString()).toLowerCase() == "true";
            T3Game = gameSet.@avm1Platform == undefined ? false : gameSet.@avm1Platform == "T3";
            scaleM = mgs.aurora.modules.core.view.scale.ScaleManagerMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.scale.ScaleManagerMediator.NAME));
            ws = widescreen ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH : mgs.aurora.common.enums.StageSizeConstants.STANDARD_WIDTH;
            hs = widescreen ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_HEIGHT : mgs.aurora.common.enums.StageSizeConstants.STANDARD_HEIGHT;
            if (T3Game) 
            {
                hs = String(gameSet.art.@frame).indexOf("default") > -1 ? mgs.aurora.common.enums.StageSizeConstants.T3DEFAULTFRAME_HEIGHT : mgs.aurora.common.enums.StageSizeConstants.T3MINIFRAME_HEIGHT;
            }
            lock = widescreen || T3Game ? "true" : "false";
            Debugger.trace("setGameSetting ; " + g, "SYSTEM");
            flash.external.ExternalInterface.call("setGameSetting", lock, ws, hs, g);
            scaleM.scaleManger.widescreen = widescreen;
            scaleM.scaleManger.initWindowWidth = ws;
            scaleM.scaleManger.initWindowHeight = hs;
            scaleM.scaleManger.reSize();
            dialogueMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME) as mgs.aurora.modules.core.view.dialogues.DialoguesMediator;
            dialogueMediator.setStageResolution(scaleM.scaleManger.initWindowWidth, scaleM.scaleManger.initWindowHeight);
            coreMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            tooltip = coreMediator.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_TOOLTIP) as flash.display.Sprite;
            tooltip.width = ws;
            tooltip.height = hs;
            modal = coreMediator.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_MODAL) as flash.display.Sprite;
            modal.width = ws;
            modal.height = hs;
            this.facade.registerProxy(new mgs.aurora.modules.core.model.GameSetProxy(gameSet));
            if (facade.hasProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME)) 
            {
                mgs.aurora.modules.core.model.CurrenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME)).resetFormattingSetting();
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SET_SGI_GAME_OVERRIDE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.ALL_DEPENDENCIES_LOADED_STAGE2);
            return;
        }

        internal function gameIdError():void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, mgs.aurora.modules.core.enum.GameBlockedMessages.DEFAULT_MESSAGE);
            return;
        }
    }
}


//              class InitDialoguesCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitDialoguesCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitDialoguesCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_MODULE);
            var loc3:*=new mgs.aurora.modules.core.view.dialogues.DialoguesMediator(loc2.content);
            this.facade.registerMediator(loc3);
            this.facade.registerMediator(new mgs.aurora.modules.core.view.dialogues.StartUpDialogueMediator(loc3.getNewHandler()));
            this.facade.registerMediator(new mgs.aurora.modules.core.view.dialogues.ErrorDialogueMediator(loc3.getNewHandler()));
            this.facade.registerMediator(new mgs.aurora.modules.core.view.dialogues.InformationDialogueMediator(loc3.getNewHandler()));
            this.facade.registerMediator(new mgs.aurora.modules.core.view.dialogues.FunBonusDialogueMediator(loc3.getNewHandler()));
            return;
        }
    }
}


//              class InitExternalDataCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitExternalDataCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitExternalDataCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=new mgs.aurora.modules.core.model.ExternalDataProxy(arg1.getBody());
            facade.registerProxy(loc1);
            facade.registerProxy(new mgs.aurora.modules.core.model.DependenciesSetupProxy(loc1.dependencies));
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INITIAL_SETUP_COMPLETED);
            return;
        }
    }
}


//              class InitExternalLaunchersCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitExternalLaunchersCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitExternalLaunchersCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=new mgs.aurora.modules.core.externalLauncher.ExternalLauncher();
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc3:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            this.setExcludeList(loc2, loc3);
            var loc4:*=new XMLList(new XML("<data/>"));
            loc4.data = loc4.data + loc2.casino.help;
            loc4.data = loc4.data + loc2.casino.bank;
            loc4.data = loc4.data + loc2.externalLaunch;
            loc4.data = loc4.data + loc2.brandingFiles.playForReal.customPage;
            loc4.data = loc4.data + loc2.externalSites;
            loc1.setConfigData(loc4);
            var loc5:*;
            (loc5 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.LOGINTYPE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.LOGINTYPE, "");
            if (loc5[mgs.aurora.common.enums.configMapping.SessionConfig.LOGINTYPE] == "") 
            {
                loc5[mgs.aurora.common.enums.configMapping.SessionConfig.LOGINTYPE] = loc2.casino.login.@loginType;
            }
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.NOTIFIER_TIMEOUT] = loc2.casino.notifier.@notifierTimeout;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.HIDDENGAMES] = loc2.casino.login.@hiddenGames;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.SERVERID, "");
            if (loc5[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID] == "") 
            {
                loc5[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID] = loc2.server.@serverID;
            }
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.DEMO_SERVERID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.DEMOSERVERID, "");
            if (loc5[mgs.aurora.common.enums.configMapping.SessionConfig.DEMO_SERVERID] == "") 
            {
                loc5[mgs.aurora.common.enums.configMapping.SessionConfig.DEMO_SERVERID] = loc2.server.@demoServerID;
            }
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_BONUS_BUBBLE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.ENABLE_BONUS_BUBBLE, "1");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.FUN_BONUS_TYPE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.FUN_BONUS_TYPE, "1");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.REAL_SERVERID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.SERVERID, "");
            if (loc5[mgs.aurora.common.enums.configMapping.SessionConfig.REAL_SERVERID] == "") 
            {
                loc5[mgs.aurora.common.enums.configMapping.SessionConfig.REAL_SERVERID] = loc2.server.@serverID;
            }
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.CASINOLANGUAGE, "");
            if (loc5[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE] == "") 
            {
                loc5[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE] = loc2.casino.info.@casinoUL;
            }
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_ENABLED] = loc2.casino.moduleCounters.@enableConsecutiveBetsCounter;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_UPPER_LIMIT] = loc2.casino.moduleCounters.@consecutiveBetsCount;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CONSECUTIVE_BETS_COUNT] = 0;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.BTAG, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG2] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.BTAG2, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG3] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.BTAG3, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG4] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.BTAG4, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG5] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.BTAG5, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.CASINOMUTE, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.LAUNCHINFUNMODE);
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.PCMGUID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.PCMGUID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.EXTGAMELIST] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.EXTGAMELIST, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.MID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.CID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CURTOURNAMENTID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.MPTOURID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.MPF_SERVICE_ID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.MPSERVICEID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.EXTGAMEID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.EXTGAMEID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.FULLRETURNURL] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.FULLEXTRETURNURL, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.SAFERETURNURL] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.SAFEEXTRETURNURL, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.IS_QUICK_REDIRECT] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.ISQUICKREDIRECT, "false");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.PARTICIPATION_CODE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.PARTICIPATIONCODE, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_EXTERNAL] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.EXTMIGRATE, "0");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_USERID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.SESSIONUSERID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.CUSTOM_HEADER_VALUE] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.CUSTOMHEADERVALUE, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_CUSTOM_HEADER] = loc2.server.@enableCustomHeader != "1" ? false : true;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.DISABLEFCCOMPONENTS] = loc2.aspSettings.pluginSettings.@OCXRequired == 0 && loc2.aspSettings.pluginSettings.@FSRequired == 0 ? 1 : 0;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.NOTIFIER_ID] = loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.NOTIFIER_ID, "");
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.INGAME_GAME_LAUNCH] = false;
            loc5[mgs.aurora.common.enums.configMapping.SessionConfig.REGULATED_MARKET_ID] = loc2.RegulatedMarket.@id;
            loc1.setSessionData(loc5);
            this.facade.registerProxy(new mgs.aurora.modules.core.model.ExternalLauncherProxy(loc1));
            Debugger.trace("InitExternalLaunchersCommand NotifierId=" + loc5[mgs.aurora.modules.core.enum.JSDataNames.NOTIFIER_ID], "NOTIFIER");
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_NOTIFIER, new Object());
            return;
        }

        internal function setExcludeList(arg1:XML, arg2:mgs.aurora.common.interfaces.IExternalData):void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=0;
            var loc9:*=0;
            var loc1:*=String(arg1.externalSites.@excludeList).split(" ").join("").toLowerCase();
            var loc2:*=String(arg2.getValue(mgs.aurora.modules.core.enum.JSDataNames.HIDEVALUEADDS, "")).split(" ").join("").toLowerCase();
            var loc3:*=String(arg2.getValue(mgs.aurora.modules.core.enum.JSDataNames.SHOWVALUEADDS, "")).split(" ").join("").toLowerCase();
            if (loc2 != "") 
            {
                if (loc1 != "") 
                {
                    loc5 = loc2.split(",");
                    loc4 = "," + loc1 + ",";
                    var loc10:*=0;
                    var loc11:*=loc5;
                    for each (loc6 in loc11) 
                    {
                        if (loc4.indexOf("," + loc6 + ",") != -1) 
                        {
                            continue;
                        }
                        loc1 = loc1 + ("," + loc6);
                    }
                }
                else 
                {
                    loc1 = loc2;
                }
            }
            if (!(loc3 == "") && !(loc1 == "")) 
            {
                loc7 = loc1.split(",");
                loc4 = "," + loc3 + ",";
                loc8 = loc7.length;
                loc9 = 0;
                while (loc9 < loc8) 
                {
                    loc7[loc9] = loc7[loc9];
                    if (loc4.indexOf("," + loc7[loc9] + ",") != -1) 
                    {
                        loc7.splice(loc9, 1);
                        --loc9;
                    }
                    ++loc9;
                }
                loc1 = loc7.toString();
            }
            arg1.externalSites.@excludeList = loc1.toLowerCase();
            return;
        }
    }
}


//              class InitFramesBuilderCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.frames.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitFramesBuilderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitFramesBuilderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            if (mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).isExternalGame()) 
            {
                return;
            }
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_BUILDER_MODULE);
            this.facade.registerMediator(new mgs.aurora.modules.core.view.frames.FramesBuilderMediator(loc2.content));
            return;
        }
    }
}


//              class InitGameObserverCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.view.automation.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitGameObserverCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitGameObserverCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerMediator(new mgs.aurora.modules.core.view.automation.GameObserverMediator(new Object()));
            return;
        }
    }
}


//              class InitGenieStepsCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitGenieStepsCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitGenieStepsCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            this.facade.registerProxy(new mgs.aurora.modules.core.model.GenieStepsProxy(loc1.pcm.tracking));
            return;
        }
    }
}


//              class InitLoaderCommand
package mgs.aurora.modules.core.controller.setup 
{
    import __AS3__.vec.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.contentLoader.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitLoaderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitLoaderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.common.interfaces.IExternalData(arg1.getBody());
            var loc2:*=XML(loc1.getValue("__combinedsettings__", ""));
            var loc3:*=mgs.aurora.modules.contentLoader.model.files.Utils.getRequiredFiles(loc2, loc1.getValue("t3game").toLowerCase() == "true");
            this.facade.registerMediator(new mgs.aurora.modules.core.view.LoaderMediator(new mgs.aurora.modules.contentLoader.ContentLoader(loc3)));
            return;
        }
    }
}


//              class InitLoaderProgressCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.loaderProgress.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitLoaderProgressCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitLoaderProgressCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.loaderProgress.model.vo.InitLoaderProgressCommandData(arg1.getBody());
            var loc2:*=new mgs.aurora.modules.loaderProgress.LoaderProgress();
            loc2.setup(loc1.art);
            var loc3:*;
            (loc3 = new mgs.aurora.modules.loaderProgress.model.vo.LoaderProgressMediatorData()).loaderProgressUI = loc2;
            loc3.requiredFiles = loc1.requiredFiles;
            loc3.externalLoaderBytes = loc1.externalLoaderBytes;
            this.facade.registerMediator(new mgs.aurora.modules.core.view.LoaderProgressMediator(loc3));
            return;
        }
    }
}


//              class InitMPFCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.multiplayer.*;
    import mgs.aurora.modules.core.controller.multiplayer.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.multiplayer.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitMPFCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitMPFCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.MPF_MODULE);
            if (loc2) 
            {
                facade.registerMediator(new mgs.aurora.modules.core.view.multiplayer.MPFMediator(loc2.content as mgs.aurora.common.interfaces.multiplayer.IMPF));
                facade.registerProxy(new mgs.aurora.modules.core.model.MPFProxy());
            }
            else 
            {
                facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ATTEMPT_CONNECTIONS, mgs.aurora.modules.core.controller.multiplayer.MPFConnectionsBypassCommand);
            }
            return;
        }
    }
}


//              class InitMagnetoCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.magneto.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.magneto.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitMagnetoCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitMagnetoCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.MAGNETO_MODULE);
            if (loc2) 
            {
                this.facade.registerMediator(new mgs.aurora.modules.core.view.magneto.MagnetoMediator(loc2.content as mgs.aurora.common.interfaces.magneto.IMagneto));
            }
            return;
        }
    }
}


//              class InitMarketManagerCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.marketManager.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitMarketManagerCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitMarketManagerCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("InitMarketManagerCommand ", "SYSTEM");
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.MARKET_MANAGER_MODULE);
            this.facade.registerMediator(new mgs.aurora.modules.core.view.marketManager.MarketManagerMediator(loc2.content));
            return;
        }
    }
}


//              class InitMetricInfoCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitMetricInfoCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitMetricInfoCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            this.facade.registerProxy(new mgs.aurora.modules.core.model.MetricInfoProxy(loc1.statsservice));
            return;
        }
    }
}


//              class InitNotifierCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.view.notifier.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitNotifierCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitNotifierCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerMediator(new mgs.aurora.modules.core.view.notifier.NotifierMediator(Object(arg1.getBody())));
            return;
        }
    }
}


//              class InitPrepareSystemStringsCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.external.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitPrepareSystemStringsCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitPrepareSystemStringsCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            XML.ignoreWhitespace = true;
            XML.prettyIndent = 0;
            XML.prettyPrinting = false;
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME));
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).toString();
            loc2 = loc2.replace(new RegExp("-L- ", "g"), "-L-");
            loc2 = loc2.replace(new RegExp(" -L-", "g"), "-L-");
            loc2 = loc2.replace(new RegExp(" -L- ", "g"), "-L-");
            loc2 = loc2.replace(new RegExp(" -B- ", "g"), " -B-");
            loc2 = loc2.replace(new RegExp(" -B!- ", "g"), " -B!-");
            loc2 = loc2.replace(new RegExp("-I- ", "g"), " -I-");
            loc2 = loc2.replace(new RegExp(" -I!- ", "g"), " -I!-");
            loc2 = loc2.replace(new RegExp(" -B--I- ", "g"), " -B--I-");
            loc2 = loc2.replace(new RegExp(" -B!--I!- ", "g"), " -B!--I!-");
            loc2 = loc2.replace(new RegExp(" -I--B- ", "g"), " -I--B-");
            loc2 = loc2.replace(new RegExp(" -I!--B!- ", "g"), " -I!--B!-");
            loc2 = loc2.replace(new RegExp("-B- -I-", "g"), "-B--I-");
            loc2 = loc2.replace(new RegExp("-B!- -I!-", "g"), "-B!--I!-");
            loc2 = loc2.replace(new RegExp("-I- -B-", "g"), "-I--B-");
            loc2 = loc2.replace(new RegExp("-I!- -B!-", "g"), "-I!--B!-");
            loc2 = loc2.replace(new RegExp("  ", "g"), " ");
            XML.ignoreWhitespace = false;
            XML.prettyIndent = 1;
            XML.prettyPrinting = true;
            var loc3:*=new XML(loc2);
            loc1.setXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS, new XML(loc2), false);
            var loc4:*=new mgs.aurora.modules.core.model.StringsProxy();
            facade.registerProxy(loc4);
            loc4.systemStrings = loc3;
            var loc5:*;
            (loc5 = new mgs.aurora.modules.core.model.GameStringsProxy()).setEnglishGameStrings(loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAME_STRINGS_EN));
            loc5.setForeignGameStrings(loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAME_STRINGS_FOREIGN));
            facade.registerProxy(loc5);
            if (flash.external.ExternalInterface.available) 
            {
                if ((loc6 = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG)).casino.closePage.@hasPageCloseAlert.toString().toLowerCase() == "true") 
                {
                    loc7 = (loc7 = loc4.getSystemString(loc6.casino.closePage.@alertText.toString().toUpperCase())).replace(new RegExp("<BR>", "gi"), "\n");
                    loc8 = (loc8 = loc4.getSystemString(loc6.casino.closePage.@finalAlertText.toString().toUpperCase())).replace(new RegExp("<BR>", "gi"), "\n");
                    flash.external.ExternalInterface.call("setPageCloseAlertText", loc7, loc8);
                }
            }
            return;
        }
    }
}


//              class InitRaptorSessionCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.login.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitRaptorSessionCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitRaptorSessionCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.RAPTOR_SESSION_MODULE);
            var loc3:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc4:*=String(loc3.casino.login.@loginType).toUpperCase();
            switch (loc4) 
            {
                case mgs.aurora.common.enums.raptorSession.LoginType.MPP:
                case mgs.aurora.common.enums.raptorSession.LoginType.LEGACY:
                {
                    this.facade.registerMediator(new mgs.aurora.modules.core.view.login.RaptorSessionMediator(loc2.content));
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.LoginType.VANGUARD:
                {
                    this.facade.registerMediator(new mgs.aurora.modules.core.view.login.VanGuardRaptorSessionMediator(loc2.content));
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.LoginType.SGI:
                {
                    this.facade.registerMediator(new mgs.aurora.modules.core.view.login.SGIRaptorSessionMediator(loc2.content));
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.LoginType.UPE_INTERIM:
                {
                    this.facade.registerMediator(new mgs.aurora.modules.core.view.login.UPEIRaptorSessionMediator(loc2.content));
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.LoginType.UPE_FULL:
                {
                    this.facade.registerMediator(new mgs.aurora.modules.core.view.login.UPEFRaptorSessionMediator(loc2.content));
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//              class InitSGIComponentsCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.sgi.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitSGIComponentsCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitSGIComponentsCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=Object(arg1.getBody());
            this.facade.registerMediator(new mgs.aurora.modules.core.view.sgi.SGITopbarMediator(loc1.topbarController));
            this.facade.registerProxy(new mgs.aurora.modules.core.model.SgiConfigProxy(null));
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.SgiConfigProxy.NAME) as mgs.aurora.modules.core.model.SgiConfigProxy;
            loc2.loginType = loc1.loginType;
            return;
        }
    }
}


//              class InitSoundEngineCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.view.sound.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitSoundEngineCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitSoundEngineCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc2:*=loc1.getValue(mgs.aurora.modules.core.enum.JSDataNames.REVERSE_PROXY) != "1" ? loc1.getValue(mgs.aurora.modules.core.enum.JSDataNames.BASEURL) : null;
            var loc3:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc4:*;
            if ((loc4 = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND])) == "-1") 
            {
                if ((loc4 = mgs.aurora.common.utilities.FlashStorage.loadData(mgs.aurora.modules.core.enum.SystemStoreNames.STORAGE_NAME_SOUND, mgs.aurora.modules.core.enum.SystemStoreNames.KEY_NAME_SOUND_MUTE, loc2)) == "" || loc4 == null) 
                {
                    loc4 = "0";
                }
            }
            loc3[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND] = loc4;
            mgs.aurora.common.utilities.FlashStorage.saveData(mgs.aurora.modules.core.enum.SystemStoreNames.STORAGE_NAME_SOUND, mgs.aurora.modules.core.enum.SystemStoreNames.KEY_NAME_SOUND_MUTE, loc4, loc2);
            if (mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).isExternalGame()) 
            {
                return;
            }
            var loc5:*;
            var loc6:*=(loc5 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy).getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.SOUND_ENGINE_MODULE);
            this.facade.registerMediator(new mgs.aurora.modules.core.view.sound.SoundEngineMediator(loc6.content));
            return;
        }
    }
}


//              class InitVirtualPitBossCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.vpb.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitVirtualPitBossCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitVirtualPitBossCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            if (mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).isExternalGame()) 
            {
                return;
            }
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            if (loc1.hasDependency(mgs.aurora.modules.core.enum.DependencyName.VIRTUAL_PIT_BOSS)) 
            {
                loc2 = loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.VIRTUAL_PIT_BOSS);
                this.facade.registerMediator(new mgs.aurora.modules.core.view.vpb.VirtualPitBossMediator(loc2.content));
            }
            else 
            {
                return;
            }
            return;
        }
    }
}


//              class InitXManCommand
package mgs.aurora.modules.core.controller.setup 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.xman.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitXManCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitXManCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE);
            this.facade.registerMediator(new mgs.aurora.modules.core.view.xman.XManMediator(loc2.content));
            return;
        }
    }
}


//              class InitialSetupCompletedCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.common.enums.sgi.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class InitialSetupCompletedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitialSetupCompletedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc3:*=false;
            var loc4:*=false;
            var loc5:*=0;
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            if (String(loc1.getValue("isSGI", "false")).toLowerCase() == "true") 
            {
                loc3 = String(loc1.getValue("doDefaultFrameAdjustment")) == "1";
                loc4 = loc1.getValue("defaultFrame").toLowerCase() == "true";
                loc5 = mgs.aurora.common.enums.sgi.SGIConstants.TOPBAR_HEIGHT;
                if (loc3 && loc4) 
                {
                    loc5 = mgs.aurora.common.enums.sgi.SGIConstants.TOPBAR_HEIGHT - 27;
                }
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.OFFSET_SYSTEM, loc5);
            }
            var loc2:*=mgs.aurora.modules.core.model.PreloaderProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.PreloaderProxy.NAME));
            if (loc2.requiredFiles.length == 0) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.INITIAL_SETUP);
            }
            return;
        }
    }
}


//              class LoginCompletedCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.common.enums.bonusBubble.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class LoginCompletedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LoginCompletedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.XMAN_SESSION_STARTED] != "1") 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_SESSIONTIMER);
            }
            else 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.XMAN_SESSION_STARTED] = "0";
            }
            var loc2:*=mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
            loc2.loggedIn = true;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_SUCCESSFULL);
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.setSessionData(loc1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_LOGIN_SUCCESSFULL);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_INITIALIZE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW_PLAY_FOR_REAL);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.OPERATOR_LAUNCH);
            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] == 1 && loc1[mgs.aurora.common.enums.configMapping.SessionConfig.FUN_BONUS_TYPE] == mgs.aurora.common.enums.bonusBubble.BonusBubbleTypes.FULL_FUN_BONUS_BUBBLE && !(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) && loc1[mgs.aurora.common.enums.configMapping.SessionConfig.GAME_IS_PROGRESSIVE] == false) 
            {
                loc2.userTypeToSwitchTo = mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS;
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH] = true;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INVOKE_USERTYPE_SWITCH);
            }
            else 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GET_PLAYER_INFORMATION);
            }
            return;
        }
    }
}


//              class LogoutCompletedCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class LogoutCompletedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function LogoutCompletedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_SESSIONTIMER);
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.setSessionData(loc1);
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_LOGIN);
            return;
        }
    }
}


//              class PrefetchCompletedCommand
package mgs.aurora.modules.core.controller.setup 
{
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class PrefetchCompletedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PrefetchCompletedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.INITIAL_SETUP);
            return;
        }
    }
}


//              class RequestExternalDataInstanceCommand
package mgs.aurora.modules.core.controller.setup 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class RequestExternalDataInstanceCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function RequestExternalDataInstanceCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }
    }
}


//              class RequestLoaderInstanceCommand
package mgs.aurora.modules.core.controller.setup 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class RequestLoaderInstanceCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function RequestLoaderInstanceCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }
    }
}


//            package sgi
//              class PlayForRealStateCheckCommand
package mgs.aurora.modules.core.controller.sgi 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class PlayForRealStateCheckCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PlayForRealStateCheckCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc3:*=loc2.getViewComponent() as flash.display.Sprite;
            var loc4:*=mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentStateName();
            switch (loc4) 
            {
                case mgs.aurora.modules.core.states.StateNames.SETUP_LOADER_OBJECTS:
                case mgs.aurora.modules.core.states.StateNames.LOADING_BRAND_CONFIG:
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_BRAND_CONFIG:
                case mgs.aurora.modules.core.states.StateNames.LOADING_FRAME_DISPLAY:
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_FRAME_DISPLAY:
                case mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES_CONFIG:
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES_CONFIG:
                case mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR:
                case mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES:
                case mgs.aurora.modules.core.states.StateNames.STORING_DEPENDENCY:
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES:
                {
                    loc3.visible = false;
                    loc1.setValue("waitForLogin", "true");
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOGIN:
                case mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION:
                case mgs.aurora.modules.core.states.StateNames.HIDDEN_GAMES:
                case mgs.aurora.modules.core.states.StateNames.MPF_CONNECT:
                {
                    loc3.visible = false;
                    loc1.setValue("waitForModuleToLoad", "true");
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD:
                {
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOAD_NEW_MODULE:
                {
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_INITIALIZE:
                {
                    this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_APISTATUS_INIT:
                {
                    this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_STATUS_INITIALIZE:
                {
                    this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.SYSTEM_READY:
                {
                    this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE);
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//              class SetupSgiChoiceScreenCommand
package mgs.aurora.modules.core.controller.sgi 
{
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.sgi.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupSgiChoiceScreenCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupSgiChoiceScreenCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME) as mgs.aurora.modules.core.view.frames.FramesBuilderMediator;
            loc1.show = false;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_KEEPALIVE);
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.StartUpDialogueMediator.NAME) as mgs.aurora.modules.core.view.dialogues.StartUpDialogueMediator;
            loc2.dialogueHandler.removeAll();
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_HIDE_PRELOADER);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_SGI_TOPBAR);
            var loc3:*;
            (loc3 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.sgi.SGITopbarMediator.NAME) as mgs.aurora.modules.core.view.sgi.SGITopbarMediator).demoPlayerLoggedIn = true;
            return;
        }
    }
}


//            package states
//              class InjectFSMCommand
package mgs.aurora.modules.core.controller.states 
{
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class InjectFSMCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InjectFSMCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=new XML("<fsm initial=\"" + mgs.aurora.modules.core.states.StateNames.INITIAL + "\">\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.INITIAL + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.REQUEST_LOADER + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SETUP_LOADER_OBJECTS + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.INITIAL_SETUP + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES_CONFIG + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.SETUP_LOADER_OBJECTS + "\" entering=\"" + mgs.aurora.modules.core.notifications.StateGuardNotifications.SETUP_LOADER_OBJECTS_ENTER + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.REQUEST_EXTERNAL_DATA + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SETUP_LOADER_OBJECTS + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.INITIAL_SETUP + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES_CONFIG + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_BRAND_CONFIG + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_ERROR + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_BRAND_CONFIG + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_BRAND_CONFIG + "\">\r\n\t\t\t\t   " + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.INITIAL_SETUP + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_FRAME_DISPLAY + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_FRAME_DISPLAY + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_ERROR + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_FRAME_DISPLAY + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_FRAME_DISPLAY + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.AUTOMATION_LOAD_AUTOSOCKET + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOAD_AUTOSOCKET + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOAD_AUTOSOCKET + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOAD_GAME_OBSERVER + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOAD_GAME_OBSERVER + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOADED_GAME_OBSERVER + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOADED_GAME_OBSERVER + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES_CONFIG + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_ERROR + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES_CONFIG + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES_CONFIG + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_BRAND_CONFIG + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_ERROR + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.STORING_DEPENDENCY + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.SETUP_DEPENDENCIES + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.STORING_DEPENDENCY + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_LOGIN + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOGIN + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOGIN + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GET_PLAYER_INFORMATION + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_HIDDEN_GAMES + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.HIDDEN_GAMES + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.HIDDEN_GAMES + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.MPF_CONNECT + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.MPF_CONNECT + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_COMPLETE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_INITIALIZE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GET_PLAYER_INFORMATION + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_INITIALIZE + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GAME_MODULE_INIT + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_APISTATUS_INIT + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_APISTATUS_INIT + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_ERROR + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_ASSET_LOAD_ERROR + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GAME_MODULE_STATUS_INITIALIZE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_STATUS_INITIALIZE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_STATUS_INITIALIZE + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.SYSTEM_READY + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.SYSTEM_READY + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.SYSTEM_READY + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.URL_LOAD_ERROR + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_ASSET_LOAD_ERROR + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GAME_MODULE_EXITING + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_EXITING + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOAD_NEW_MODULE + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.UNLOAD_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOAD_NEW_MODULE + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GAME_MODULE_EXITING + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_EXITING + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_EXITING + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.MPF_CONNECT + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GET_PLAYER_INFORMATION + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GAME_MODULE_UNLOADING + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_UNLOADING + "\"/>") + " \r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.LOAD_NEW_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.MPF_CONNECT + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_UNLOADING + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_LOGOUT + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOGOUT + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.SETUP_MPF_CONNECTIONS + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.MPF_CONNECT + "\"/>") + "\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.GET_PLAYER_INFORMATION + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION + "\"/>") + "\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.LOGOUT + "\">\r\n\t\t\t\t\t" + ("<transition action=\"" + mgs.aurora.modules.core.states.StateActions.START_LOGIN + "\" target=\"" + mgs.aurora.modules.core.states.StateNames.LOGIN + "\"/>") + "\t\t\t\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.GAME_MODULE_ASSET_LOAD_ERROR + "\">\r\n\t\t\t\t</state>") + "\r\n\t\t\t\t\r\n\t\t\t\t" + ("<state name=\"" + mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR + "\">\r\n\t\t\t\t</state>") + "\r\n\t\t\t</fsm>");
            var loc2:*=new org.puremvc.as3.multicore.utilities.statemachine.FSMInjector(loc1);
            loc2.initializeNotifier(this.multitonKey);
            loc2.inject();
            return;
        }
    }
}


//              class SetupLoaderObjectEnterCommand
package mgs.aurora.modules.core.controller.states 
{
    import mgs.aurora.modules.core.controller.setup.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupLoaderObjectEnterCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupLoaderObjectEnterCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            if (this.facade.hasMediator(mgs.aurora.modules.core.view.LoaderMediator.NAME)) 
            {
                if (this.facade.hasProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)) 
                {
                    this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.REQUEST_FROM_LOADER);
                }
                else 
                {
                    this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.REQUEST_FROM_LOADER, mgs.aurora.modules.core.controller.setup.RequestExternalDataInstanceCommand);
                }
            }
            return;
        }
    }
}


//              class StateChangeObserverCommand
package mgs.aurora.modules.core.controller.states 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.pipes.*;
    import mgs.aurora.modules.core.controller.files.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StateChangeObserverCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StateChangeObserverCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=arg1.getType();
            switch (loc8) 
            {
                case mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOAD_AUTOSOCKET:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOAD_AUTOSOCKET);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOAD_GAME_OBSERVER:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOAD_GAME_OBSERVER);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.AUTOMATION_LOADED_GAME_OBSERVER:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOADED_GAME_OBSERVER);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.SETUP_LOADER_OBJECTS:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REQUEST_FROM_LOADER);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOADING_BRAND_CONFIG:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_BRAND_CONFIG);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_BRAND_CONFIG:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_BRAND_CONFIG);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOADING_FRAME_DISPLAY:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_FRAME_DISPLAY);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_FRAME_DISPLAY:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_FRAME_DISPLAY);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES_CONFIG:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_DEPENDENCIES_CONFIG);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES_CONFIG:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_DEPENDENCIES_CONFIG);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.DEPENDENCY_URL_ERROR:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.DEPENDENCIES_URL_ERROR);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOADING_DEPENDENCIES:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_DEPENDENCY);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.STORING_DEPENDENCY:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.STORE_DEPENDENCY);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.SETTING_UP_DEPENDENCIES:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.ALL_DEPENDENCIES_LOADED);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOGIN:
                {
                    loc1 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_DO_LOGIN, loc1);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOGOUT:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_LOGOUT);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_END_CONNECTIONS);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.PLAYER_INFORMATION:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PLAYER_INFORMATION_REQUEST);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.HIDDEN_GAMES:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDDEN_GAMES_REQUEST);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.MPF_CONNECT:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ATTEMPT_CONNECTIONS);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_START_LOAD:
                {
                    loc2 = mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).getData() as XML;
                    loc3 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    (loc4 = new Object()).mid = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID]);
                    loc4.cid = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID]);
                    loc4.displayName = mgs.aurora.modules.core.utils.ModuleUtility.getDisplayNameWithOutFormatting(loc2);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOAD_GAME, loc4);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_INITIALIZE:
                {
                    this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED);
                    this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED, mgs.aurora.modules.core.controller.files.GameFileResponseCommand);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LOADED);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_APISTATUS_INIT:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_APISTATUS_INIT);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_ASSET_LOAD_ERROR:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_ASSET_LOAD_ERROR);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_STATUS_INITIALIZE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY, null, mgs.aurora.modules.core.enum.ModuleReadyCheckTypes.PROMPT_BANK);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.LOAD_NEW_MODULE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_NEW_MODULE, null, mgs.aurora.modules.core.notifications.CoreNotifications.UNLOAD_EXISTING_MODULE_START);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE:
                {
                    this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED);
                    this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED, mgs.aurora.modules.core.controller.files.SystemFileResponseCommand);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE);
                    break;
                }
                case mgs.aurora.modules.core.states.StateNames.GAME_MODULE_UNLOADING:
                {
                    (loc5 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreJunctionMediator.NAME) as mgs.aurora.modules.core.view.CoreJunctionMediator).disconnectModule(mgs.aurora.common.pipes.PipeNames.TO_AURORA_GAME_MODULE, mgs.aurora.common.pipes.PipeNames.FROM_AURORA_GAME_MODULE);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_SOUND_MODULE);
                    if (!(loc6 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH]) 
                    {
                        this.facade.removeMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME);
                    }
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UNLOAD_MAIN_SPRITE);
                    loc7 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
                    if (String(loc7.getValue("isSGI", "false")).toLowerCase() == "true") 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_SGI_CHOICESCREEN);
                    }
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.ADD_SOUND_MODULE);
                    if (this.facade.hasProxy(mgs.aurora.modules.core.model.NewModuleProxy.NAME)) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_NEW_MODULE, null, mgs.aurora.modules.core.notifications.CoreNotifications.UNLOAD_EXISTING_MODULE_COMPLETE);
                    }
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//            package statsService
//              class StatsMetricCommand
package mgs.aurora.modules.core.controller.statsService 
{
    import flash.external.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StatsMetricCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StatsMetricCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this._sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO:
                {
                    this.genericMetricInfo(arg1);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function genericMetricInfo(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("genericInfo", "SYSTEM - METRIC");
            var loc1:*=arg1.getBody() as flash.utils.Dictionary;
            var loc5:*=arg1.getType();
            switch (loc5) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR:
                {
                    loc1 = this.sessionInformation();
                    break;
                }
            }
            var loc2:*=new Object();
            var loc3:*=(this.facade.retrieveProxy(mgs.aurora.modules.core.model.MetricInfoProxy.NAME) as mgs.aurora.modules.core.model.MetricInfoProxy).getNamespace(loc1["statsNamespace"]);
            var loc4:*=1;
            while (loc4 < 3) 
            {
                if (loc1["namespace" + loc4] != null) 
                {
                    loc3 = loc3 + ("." + loc1["namespace" + loc4]);
                }
                ++loc4;
            }
            loc2.statsNamespace = loc3;
            loc2.metricType = loc1["metricType"];
            if (loc1["value"] != null) 
            {
                loc2.value = loc1["value"];
            }
            flash.external.ExternalInterface.call("onGenericMetricInfo", loc2);
            return;
        }

        internal function sessionInformation():flash.utils.Dictionary
        {
            var loc1:*=new flash.utils.Dictionary();
            loc1["statsNamespace"] = "failedLogin";
            loc1["namespace1"] = this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID];
            loc1["metricType"] = mgs.aurora.modules.core.enum.MetricTypes.COUNT;
            return loc1;
        }

        internal var _sessionConfig:Object;
    }
}


//            package storage
//              class InitFlashStorageCommand
package mgs.aurora.modules.core.controller.storage 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.storage.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitFlashStorageCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitFlashStorageCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerProxy(new mgs.aurora.modules.core.model.FlashStorageProxy(new mgs.aurora.modules.core.model.api.storage.FlashStorage()));
            return;
        }
    }
}


//            package virtualPitBoss
//              class VPBActionCommand
package mgs.aurora.modules.core.controller.virtualPitBoss 
{
    import flash.utils.*;
    import mgs.aurora.api.module.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.enums.vpb.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class VPBActionCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function VPBActionCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=null;
            var loc1:*=arg1.getBody() as flash.utils.Dictionary;
            var loc2:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            var loc3:*=uint(loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.MESSAGE_TYPE]);
            var loc11:*=loc3;
            switch (loc11) 
            {
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.DISPLAY_BIRTHDAY_FANFARE:
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.DISPLAY_BONUS_FANFARE:
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.DISPLAY_WELCOME_FANFARE:
                {
                    (loc4 = new Object()).url = loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.URL];
                    loc4.postData = loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.POST_DATA];
                    loc2.launchFanfair(loc4);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_CASHCHECK:
                {
                    loc2.launchFromFrameIconID(mgs.aurora.modules.core.enum.FrameIconIdentifiers.CASHCHECK);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_LOYALTY:
                {
                    loc2.launchFromFrameIconID(mgs.aurora.modules.core.enum.FrameIconIdentifiers.LOYALTY);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_PLAYCHECK:
                {
                    loc2.launchFromFrameIconID(mgs.aurora.modules.core.enum.FrameIconIdentifiers.PLAYCHECK);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBPAGE:
                {
                    (loc5 = new Object()).url = loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.URL];
                    loc5.postData = loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.POST_DATA];
                    loc2.launchOther(loc5);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_CHAT:
                {
                    (loc6 = new Object()).url = loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.URL];
                    loc2.launchChat(loc6);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_GAME:
                {
                    (loc7 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.INGAME_GAME_LAUNCH] = true;
                    (loc8 = mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME))).serviceID = "";
                    loc8.curTournamentID = "";
                    (loc9 = new mgs.aurora.api.module.ExtraModuleData()).moduleId = int(loc8.currentModuleID);
                    loc9.clientId = int(loc8.currentClientID);
                    loc9.extraData = "";
                    if (facade.hasProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)) 
                    {
                        mgs.aurora.modules.core.model.ExtraModuleDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)).extraData = loc9;
                    }
                    else 
                    {
                        facade.registerProxy(new mgs.aurora.modules.core.model.ExtraModuleDataProxy(loc9));
                    }
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, new mgs.aurora.modules.core.model.vo.SwitchModuleParams(uint(loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.MODULE_ID]), uint(loc1[mgs.aurora.common.enums.vpb.VPBActionNotificationParams.CLIENT_ID])));
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_MY_ACCOUNT:
                {
                    loc2.launchMyAccount();
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_OLR:
                {
                    if ((loc10 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] != mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
                    {
                        if (loc10[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER) 
                        {
                            loc2.launchOLR("guest");
                        }
                    }
                    else 
                    {
                        loc2.launchOLR("real");
                    }
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBECASH:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_BANK, null, mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.POPUP_MESSAGE_ONLY:
                {
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.POST_TO_WEBSERVER:
                {
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.SEND_EMAIL:
                {
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_FUNBONUS_TERMS_AND_CONDITIONS:
                {
                    loc2.launchFunBonusTermsConditions();
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_FUNBONUS_TUTORIAL:
                {
                    loc2.launchFunBonusTutorial(mgs.aurora.modules.core.enum.FunBonusEventSource.RMM);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }
    }
}


//            class CheckGameProgressiveCommand
package mgs.aurora.modules.core.controller 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CheckGameProgressiveCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CheckGameProgressiveCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as XML;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc1.hasOwnProperty("@isProgressive")) 
            {
                loc2[mgs.aurora.common.enums.configMapping.SessionConfig.GAME_IS_PROGRESSIVE] = true;
            }
            else 
            {
                loc2[mgs.aurora.common.enums.configMapping.SessionConfig.GAME_IS_PROGRESSIVE] = false;
            }
            return;
        }
    }
}


//            class ExitCommand
package mgs.aurora.modules.core.controller 
{
    import flash.external.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class ExitCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ExitCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var session:Object;
            var infoNode:XMLList;
            var external:mgs.aurora.modules.core.externalLauncher.IExternalLauncher;
            var hasUrl:Boolean;
            var exitAction:int;
            var returnUrl:String;

            var loc1:*;
            returnUrl = null;
            notification = arg1;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MODAL);
            session = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            session[mgs.aurora.common.enums.configMapping.SessionConfig.AUTOLOGIN] = String(session[mgs.aurora.common.enums.configMapping.SessionConfig.EXT_AUTOLOGIN_CHECKBOX_VALUE]);
            infoNode = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.info;
            external = mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            if (mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentStateName() == mgs.aurora.modules.core.states.StateNames.LOAD_NEW_MODULE) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GAME_MODULE_EXITING);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_NEW_MODULE, null, mgs.aurora.modules.core.notifications.CoreNotifications.UNLOAD_EXISTING_MODULE_COMPLETE);
                return;
            }
            if (mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentStateName() == mgs.aurora.modules.core.states.StateNames.UNLOAD_GAME_MODULE) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GAME_MODULE_UNLOADING);
                return;
            }
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GAME_MODULE_EXITING);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UNLOAD_MAIN_SPRITE);
            try 
            {
                flash.external.ExternalInterface.call("setExternalClose");
            }
            catch (e:Error)
            {
            };
            hasUrl = this.hasReturnUrl(session);
            exitAction = this.exitAction(infoNode);
            if (hasUrl && exitAction == 2 || hasUrl && exitAction == 3 && notification.getType() == mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_USER_DECISION) 
            {
                returnUrl = session[mgs.aurora.common.enums.configMapping.SessionConfig.RETURNURL];
                external.launchReturnUrl(returnUrl);
                return;
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
            external.closeWindow();
            return;
        }

        internal function hasReturnUrl(arg1:Object):Boolean
        {
            if (arg1[mgs.aurora.common.enums.configMapping.SessionConfig.RETURNURL] == null || arg1[mgs.aurora.common.enums.configMapping.SessionConfig.RETURNURL] == "") 
            {
                return false;
            }
            return true;
        }

        internal function hasMenu(arg1:XMLList):Boolean
        {
            if (int(arg1.@hasmenu) == 0) 
            {
                return false;
            }
            return true;
        }

        internal function exitAction(arg1:XMLList):int
        {
            return int(arg1.@exitAction);
        }
    }
}


//            class InitUserSwitchCommand
package mgs.aurora.modules.core.controller 
{
    import flash.display.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.switchUserOverlay.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class InitUserSwitchCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function InitUserSwitchCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).isExternalGame()) 
            {
                return;
            }
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            if (loc1.hasDependency(mgs.aurora.modules.core.enum.DependencyName.PROGRESS_ICON)) 
            {
                loc2 = loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.PROGRESS_ICON);
                (loc3 = new flash.display.Sprite()).addChild(loc2.content);
                this.facade.registerMediator(new mgs.aurora.modules.core.view.switchUserOverlay.SwitchUserOverlayMediator(loc3));
            }
            else 
            {
                return;
            }
            return;
        }
    }
}


//            class OffsetSystemCommand
package mgs.aurora.modules.core.controller 
{
    import flash.display.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class OffsetSystemCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function OffsetSystemCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=int(arg1.getBody());
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc3:*;
            (loc3 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_GAME) as flash.display.Sprite).y = loc1;
            var loc4:*;
            (loc4 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_BONUSBUBBLE) as flash.display.Sprite).y = loc1;
            var loc5:*;
            (loc5 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_DIALOGUE) as flash.display.Sprite).y = loc1;
            var loc6:*;
            (loc6 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite).y = loc1;
            var loc7:*;
            (loc7 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_MODAL) as flash.display.Sprite).y = loc1;
            var loc8:*;
            (loc8 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_PRELOADER_MODAL) as flash.display.Sprite).y = loc1;
            var loc9:*;
            (loc9 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_TOOLTIP) as flash.display.Sprite).y = loc1;
            var loc10:*;
            (loc10 = loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_VPB) as flash.display.Sprite).y = loc1;
            return;
        }
    }
}


//            class PrepModelCommand
package mgs.aurora.modules.core.controller 
{
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.mutiplayer.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PrepModelCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PrepModelCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerProxy(new mgs.aurora.modules.core.model.PreloaderProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.InGameLoaderProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.UrlLoadResponseProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.DependenciesProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.SessionConfigProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.SessionDetailsProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.mutiplayer.AliasActivationExternalLaunchProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.MsgFadeProxy());
            this.facade.registerProxy(new mgs.aurora.modules.core.model.BrowserSettingsProxy());
            return;
        }
    }
}


//            class PrepNotificationsCommand
package mgs.aurora.modules.core.controller 
{
    import mgs.aurora.modules.core.controller.api.banking.*;
    import mgs.aurora.modules.core.controller.api.multiplayer.*;
    import mgs.aurora.modules.core.controller.api.preloader.*;
    import mgs.aurora.modules.core.controller.api.status.*;
    import mgs.aurora.modules.core.controller.configSetup.*;
    import mgs.aurora.modules.core.controller.corePackets.*;
    import mgs.aurora.modules.core.controller.dependancies.*;
    import mgs.aurora.modules.core.controller.error.*;
    import mgs.aurora.modules.core.controller.files.*;
    import mgs.aurora.modules.core.controller.frames.*;
    import mgs.aurora.modules.core.controller.market.*;
    import mgs.aurora.modules.core.controller.moduleSetup.*;
    import mgs.aurora.modules.core.controller.operator.*;
    import mgs.aurora.modules.core.controller.pcm.*;
    import mgs.aurora.modules.core.controller.preloader.*;
    import mgs.aurora.modules.core.controller.raptorSession.*;
    import mgs.aurora.modules.core.controller.setup.*;
    import mgs.aurora.modules.core.controller.setup.hiddenGames.*;
    import mgs.aurora.modules.core.controller.setup.playerInformation.*;
    import mgs.aurora.modules.core.controller.sgi.*;
    import mgs.aurora.modules.core.controller.states.*;
    import mgs.aurora.modules.core.controller.statsService.*;
    import mgs.aurora.modules.core.controller.virtualPitBoss.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class PrepNotificationsCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PrepNotificationsCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerCommand(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.CHANGED, mgs.aurora.modules.core.controller.states.StateChangeObserverCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_RECIEVED, mgs.aurora.modules.core.controller.setup.InitLoaderCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.EXTERNAL_DATA_RECIEVED, mgs.aurora.modules.core.controller.setup.InitExternalDataCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.INITIAL_SETUP_COMPLETED, mgs.aurora.modules.core.controller.setup.InitialSetupCompletedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.PREFETCH_COMPLETED, mgs.aurora.modules.core.controller.setup.PrefetchCompletedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.URL_LOAD_PROGRESS_RECIEVED, mgs.aurora.modules.core.controller.preloader.UpdatePreloaderCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MERGE_BRANDCONFIG_AND_FRAMEDISPLAYCONFIG, mgs.aurora.modules.core.controller.configSetup.MergeBrandConfigAndDisplayConfigCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_DISPLAYTYPE, mgs.aurora.modules.core.controller.frames.UpdateFrameCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_LOGIN_SUCCESSFULL, mgs.aurora.modules.core.controller.frames.UpdateFrameCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_BALANCE, mgs.aurora.modules.core.controller.frames.UpdateFrameCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_AFTER_SWITCH, mgs.aurora.modules.core.controller.frames.UpdateFrameCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXTERNAL, mgs.aurora.modules.core.controller.frames.LaunchExternalCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_BANK, mgs.aurora.modules.core.controller.market.PreLaunchBankCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT, mgs.aurora.modules.core.controller.frames.LaunchExitCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_PLAY_FOR_REAL, mgs.aurora.modules.core.controller.frames.LaunchPlayForRealCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ACTION, mgs.aurora.modules.core.controller.virtualPitBoss.VPBActionCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_HIDE_PRELOADER, mgs.aurora.modules.core.controller.api.preloader.ShowHidePreloaderCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.OPERATOR_LAUNCH, mgs.aurora.modules.core.controller.operator.LaunchOperatorPageCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_BANK, mgs.aurora.modules.core.controller.frames.LaunchBankCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, mgs.aurora.modules.core.controller.error.MarketSystemErrorCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_SYSTEM_ERROR, mgs.aurora.modules.core.controller.error.SystemErrorCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_TIMEOUT, mgs.aurora.modules.core.controller.market.PreSessionTimeoutCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_UPDATE_BALANCE, mgs.aurora.modules.core.controller.api.banking.UpdateBalanceCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE, mgs.aurora.modules.core.controller.ExitCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_SUCCESSFULL, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_SUCCESSFULL_FLASH_ACTIVATION, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GAME_DOWNLOADED, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GAME_INITIALIZED, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_WITH_MIGRATION, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_MIGRATION_ACCOUNT_LOGIN, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_DISCONNECTED, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_TIMED_OUT, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_ACCOUNT_LOCKED, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GENERIC_STEP, mgs.aurora.modules.core.controller.pcm.GenieTrackingCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR, mgs.aurora.modules.core.controller.statsService.StatsMetricCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO, mgs.aurora.modules.core.controller.statsService.StatsMetricCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.PLAYER_INFORMATION_REQUEST, mgs.aurora.modules.core.controller.setup.playerInformation.PlayerInformationRequestCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.PLAYER_INFORMATION_RESPONSE, mgs.aurora.modules.core.controller.setup.playerInformation.PlayerInformationResponseCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.HIDDEN_GAMES_REQUEST, mgs.aurora.modules.core.controller.setup.hiddenGames.HiddenGamesRequestCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.HIDDEN_GAMES_RESPONSE, mgs.aurora.modules.core.controller.setup.hiddenGames.HiddenGamesResponseCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, mgs.aurora.modules.core.controller.moduleSetup.GameNotAvailableCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_EXTERNAL, mgs.aurora.modules.core.controller.moduleSetup.LaunchExternalGameCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CORE_INVOKED_PACKET_RECEIVED, mgs.aurora.modules.core.controller.corePackets.CoreInvokedPacketReceivedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UNLOAD_MAIN_SPRITE, mgs.aurora.modules.core.controller.moduleSetup.UnloadModuleSpriteCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOAD_AUTOSOCKET, mgs.aurora.modules.core.controller.setup.InitAutomationCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOAD_GAME_OBSERVER, mgs.aurora.modules.core.controller.setup.InitGameObserverCommand);
            this.setupMPFCommands();
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_LOADER_PROGRESS, mgs.aurora.modules.core.controller.setup.InitLoaderProgressCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED, mgs.aurora.modules.core.controller.files.SystemFileResponseCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_SGI_COMPONENTS, mgs.aurora.modules.core.controller.setup.InitSGIComponentsCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_SGI_CHOICESCREEN, mgs.aurora.modules.core.controller.sgi.SetupSgiChoiceScreenCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.PROCESS_SGI_PLAYFORREAL, mgs.aurora.modules.core.controller.sgi.PlayForRealStateCheckCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOGIN_PROCESS, mgs.aurora.modules.core.controller.raptorSession.StartLoginCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MSG_FADER, mgs.aurora.modules.core.controller.ShowMsgFaderCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.OFFSET_SYSTEM, mgs.aurora.modules.core.controller.OffsetSystemCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_NOTIFIER, mgs.aurora.modules.core.controller.setup.InitNotifierCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FB_SWITCH_DIALOGUE, mgs.aurora.modules.core.controller.ShowFBSwitchCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_MY_ACCOUNT, mgs.aurora.modules.core.controller.frames.LaunchExternalCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_FROM_FRAME_ICON_ID, mgs.aurora.modules.core.controller.frames.LaunchExternalCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_OTHER_INTERNAL_SITE, mgs.aurora.modules.core.controller.frames.LaunchExternalCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_BONUS_BUBBLE_MODULE, mgs.aurora.modules.core.controller.setup.InitBonusBubbleCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_MAGNETO_MODULE, mgs.aurora.modules.core.controller.setup.InitMagnetoCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_MPF_MODULE, mgs.aurora.modules.core.controller.setup.InitMPFCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_VPB_MODULE, mgs.aurora.modules.core.controller.setup.InitVirtualPitBossCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.CHECK_GAME_PROGRESSIVE, mgs.aurora.modules.core.controller.CheckGameProgressiveCommand);
            this.setupStateChange();
            this.setupStateGuards();
            return;
        }

        internal function setupMPFCommands():void
        {
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_SET_AVATAR_FILE_URL, mgs.aurora.modules.core.controller.api.multiplayer.AvatarFileRequestCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_CANCEL_AVATAR, mgs.aurora.modules.core.controller.api.multiplayer.CancelAvatarCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_SEND_PACKET, mgs.aurora.modules.core.controller.api.multiplayer.SendMultiplayerPacketCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_LAUNCH_AVATAR_EXTERNAL, mgs.aurora.modules.core.controller.api.multiplayer.LaunchAvatarCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_REQUEST_NEW_ALIAS, mgs.aurora.modules.core.controller.api.multiplayer.LaunchAliasActivationCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ALIAS_CREATED, mgs.aurora.modules.core.controller.api.multiplayer.AliasCreatedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ALIAS_REQUEST_CANCELED, mgs.aurora.modules.core.controller.api.multiplayer.AliasActivationCanceledCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_CANCEL_NEW_ALIAS_REQUEST, mgs.aurora.modules.core.controller.api.multiplayer.CancelNewAliasRequestCommand);
            return;
        }

        internal function setupStateChange():void
        {
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_FRAME_DISPLAY, mgs.aurora.modules.core.controller.configSetup.LoadFrameDisplayCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_FRAME_DISPLAY, mgs.aurora.modules.core.controller.configSetup.SetupFrameDisplayCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.REQUEST_FROM_LOADER, mgs.aurora.modules.core.controller.setup.RequestLoaderInstanceCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_BRAND_CONFIG, mgs.aurora.modules.core.controller.configSetup.LoadBrandConfigCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_BRAND_CONFIG, mgs.aurora.modules.core.controller.configSetup.SetupBrandConfigCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_DEPENDENCIES_CONFIG, mgs.aurora.modules.core.controller.configSetup.LoadDependenciesConfigCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_DEPENDENCIES_CONFIG, mgs.aurora.modules.core.controller.configSetup.SetupDependenciesConfigCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.DEPENDENCIES_URL_ERROR, mgs.aurora.modules.core.controller.error.DependencyUrlErrorCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_DEPENDENCY, mgs.aurora.modules.core.controller.dependancies.LoadDependencyCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.STORE_DEPENDENCY, mgs.aurora.modules.core.controller.dependancies.StoreDependencyCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.ALL_DEPENDENCIES_LOADED, mgs.aurora.modules.core.controller.dependancies.DependencySetupCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.ALL_DEPENDENCIES_LOADED_STAGE2, mgs.aurora.modules.core.controller.dependancies.DependencySetupStage2Command);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOGIN_SUCCESSFULLY_COMPLETED, mgs.aurora.modules.core.controller.setup.LoginCompletedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY, mgs.aurora.modules.core.controller.api.status.SystemReadyCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_GAME_MODULE, mgs.aurora.modules.core.controller.moduleSetup.LoadGameModuleCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LOADED, mgs.aurora.modules.core.controller.moduleSetup.GameModuleLoadedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_NEW_MODULE, mgs.aurora.modules.core.controller.moduleSetup.LoadNewModuleCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, mgs.aurora.modules.core.controller.moduleSetup.SwitchToNewModuleCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.LOGOUT_SUCCESSFULLY_COMPLETED, mgs.aurora.modules.core.controller.setup.LogoutCompletedCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_MSG_FADER, mgs.aurora.modules.core.controller.configSetup.SetupMsgFaderCommand);
            return;
        }

        internal function setupStateGuards():void
        {
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.StateGuardNotifications.SETUP_LOADER_OBJECTS_ENTER, mgs.aurora.modules.core.controller.states.SetupLoaderObjectEnterCommand);
            return;
        }
    }
}


//            class PrepViewCommand
package mgs.aurora.modules.core.controller 
{
    import flash.display.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class PrepViewCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function PrepViewCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerMediator(new mgs.aurora.modules.core.view.CoreJunctionMediator());
            this.facade.registerMediator(new mgs.aurora.modules.core.view.CoreMediator(arg1.getBody() as flash.display.Sprite));
            this.facade.registerMediator(new mgs.aurora.modules.core.view.MsgFaderMediator());
            return;
        }
    }
}


//            class ShowFBSwitchCommand
package mgs.aurora.modules.core.controller 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class ShowFBSwitchCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ShowFBSwitchCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            this._notificationName = arg1.getBody();
            this._notificationType = arg1.getType();
            loc1 = this.showDialogue();
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, this.onFBSwitchDialogueButtonClicked);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, this.onFBSwitchDialogueButtonClicked);
            return;
        }

        internal function showDialogue():mgs.aurora.common.interfaces.dialogues.IDialogue
        {
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            var loc1:*="FBSwitch";
            this._dialogueHandler.create(loc1, loc1);
            var loc2:*=this._dialogueHandler.dialogue(loc1);
            return loc2;
        }

        internal function onFBSwitchDialogueButtonClicked(arg1:*):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=arg1.control.id;
            switch (loc3) 
            {
                case "YES":
                {
                    this.closeDialogue(arg1.diagId);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_AFTER_SWITCH, this._notificationName);
                    if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] != 1) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST, mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER, this._notificationType);
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
                    }
                    else 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
                        loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH] = false;
                        loc2 = mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
                        loc2.userTypeToSwitchTo = mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER;
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INVOKE_USERTYPE_SWITCH);
                        loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] = 0;
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_SHOW_OVERLAY, mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER);
                    }
                    break;
                }
                case "NO":
                {
                    this.closeDialogue(arg1.diagId);
                    break;
                }
            }
            return;
        }

        internal function closeDialogue(arg1:String):void
        {
            this._dialogueHandler.remove(arg1);
            return;
        }

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        internal var _notificationName:Object;

        internal var _notificationType:String;
    }
}


//            class ShowMsgFaderCommand
package mgs.aurora.modules.core.controller 
{
    import flash.display.*;
    import flash.text.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class ShowMsgFaderCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ShowMsgFaderCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody().message as String;
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.MsgFaderMediator.NAME) as mgs.aurora.modules.core.view.MsgFaderMediator;
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.MsgFadeProxy.NAME) as mgs.aurora.modules.core.model.MsgFadeProxy;
            if (loc1 == "") 
            {
                loc2.removeMsgFaderFromStage();
                return;
            }
            var loc4:*;
            var loc5:*=(loc4 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator).stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
            loc3.interval = arg1.getBody().delay as Number;
            var loc6:*;
            (loc6 = new flash.text.TextFormat()).font = loc3.font;
            loc6.size = loc3.fontSize;
            loc6.align = flash.text.TextFormatAlign.CENTER;
            var loc7:*=loc5.width / 3;
            var loc8:*;
            (loc8 = this.createTextField(loc1, loc6, loc3.fontColor, loc3.embedFonts, loc3.antiAliasType, loc7)).x = loc3.xPadding;
            loc8.y = loc3.yPadding;
            var loc9:*;
            (loc9 = this.createBackground(loc8.width, loc8.height, loc3.backgroundColor, loc3.xPadding, loc3.yPadding, loc3.backgroundAlpha)).addChild(loc8);
            loc9.x = Math.round((loc5.width - loc9.width) / 2);
            loc9.y = Math.round((loc5.height - loc9.height) / 2);
            loc2.setViewComponent(loc9);
            return;
        }

        internal function createTextField(arg1:String, arg2:flash.text.TextFormat, arg3:uint, arg4:Boolean=true, arg5:String="advanced", arg6:int=400):flash.text.TextField
        {
            var loc1:*;
            (loc1 = new flash.text.TextField()).defaultTextFormat = arg2;
            loc1.multiline = true;
            loc1.selectable = false;
            loc1.embedFonts = arg4;
            loc1.textColor = arg3;
            loc1.antiAliasType = arg5;
            loc1.htmlText = arg1;
            loc1.autoSize = flash.text.TextFieldAutoSize.CENTER;
            if (loc1.width > arg6) 
            {
                loc1.wordWrap = true;
                loc1.width = arg6;
            }
            return loc1;
        }

        internal function createBackground(arg1:Number, arg2:Number, arg3:uint, arg4:Number, arg5:Number, arg6:Number):flash.display.Sprite
        {
            var loc1:*;
            (loc1 = new flash.display.Sprite()).alpha = arg6;
            var loc2:*=loc1.graphics;
            var loc3:*=arg1 + 2 * arg4;
            var loc4:*=arg2 + 2 * arg5;
            var loc5:*=15;
            loc2.beginFill(arg3);
            loc2.lineStyle(0, 0, 0);
            loc2.moveTo(0, loc5);
            loc2.curveTo(0, 0, loc5, 0);
            loc2.lineTo(loc3 - loc5, 0);
            loc2.curveTo(loc3, 0, loc3, loc5);
            loc2.lineTo(loc3, loc4 - loc5);
            loc2.curveTo(loc3, loc4, loc3 - loc5, loc4);
            loc2.lineTo(loc5, loc4);
            loc2.curveTo(0, loc4, 0, loc4 - loc5);
            loc2.lineTo(0, loc5);
            loc1.graphics.endFill();
            return loc1;
        }
    }
}


//            class StartupCommand
package mgs.aurora.modules.core.controller 
{
    import mgs.aurora.modules.core.controller.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupCommand extends org.puremvc.as3.multicore.patterns.command.MacroCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupCommand()
        {
            super();
            return;
        }

        protected override function initializeMacroCommand():void
        {
            this.addSubCommand(mgs.aurora.modules.core.controller.PrepModelCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.PrepNotificationsCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.PrepViewCommand);
            this.addSubCommand(mgs.aurora.modules.core.controller.states.InjectFSMCommand);
            return;
        }
    }
}


//            class SystemLoadedCommand
package mgs.aurora.modules.core.controller 
{
    import mgs.aurora.modules.core.view.marketManager.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SystemLoadedCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SystemLoadedCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            Debugger.trace("SystemLoadedCommand ", "SYSTEM");
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.marketManager.MarketManagerMediator.NAME) as mgs.aurora.modules.core.view.marketManager.MarketManagerMediator;
            loc1.systemLoaded(arg1.getBody());
            return;
        }
    }
}


//          package enum
//            package external
//              class WindowNames
package mgs.aurora.modules.core.enum.external 
{
    public class WindowNames extends Object
    {
        public function WindowNames()
        {
            super();
            return;
        }

        public static const ECASH:String="WebECash";

        public static const QUICK_BANK:String="QuickBanking";

        public static const OLR:String="Registration";

        public static const MIGRATE:String="Migrate";

        public static const OPERATOR:String="Operator";

        public static const MY_ACCOUNT:String="MyAccount";

        public static const FORGOT_PASSWORD:String="ForgotPassword";

        public static const CHAT:String="PCMChat";

        public static const HELP:String="Help";

        public static const EXTERNAL_GAME:String="ExternalGame";

        public static const RETURN_URL:String="ReturnUrl";

        public static const AVATAR_UPLOAD:String="AvatarUpload";

        public static const ALIAS_ACTIVATION:String="aliasActivation";

        public static const CUSTOM_PLAY_FOR_REAL:String="CustomPlayForReal";

        public static const FAN_FAIR:String="FanFair_";

        public static const OTHER:String="Other_";

        public static const BRAND_MIGRATION:String="brand_migration";

        public static const FUNBONUS_TERMS_CONDITIONS:String="funbonus_terms_conditions";

        public static const FUNBONUS_TUTORIAL:String="funbonus_tutorial";
    }
}


//            class ConfigMappingModuleIdentifiers
package mgs.aurora.modules.core.enum 
{
    public class ConfigMappingModuleIdentifiers extends Object
    {
        public function ConfigMappingModuleIdentifiers()
        {
            super();
            return;
        }

        internal static const NAME:String="ConfigMappingModuleIdentifiers";

        public static const XMAN:String="xman";

        public static const SESSION:String="session";

        public static const VPB:String="virtualpitboss";
    }
}


//            class ConfigMappingTypes
package mgs.aurora.modules.core.enum 
{
    public class ConfigMappingTypes extends Object
    {
        public function ConfigMappingTypes()
        {
            super();
            return;
        }

        internal static const NAME:String="ConfigMappingTypes";

        public static const NODE_ATTRIBUTES:String="nodeAttributes";

        public static const POST_PARAMETERS:String="postParameters";
    }
}


//            class DependencyName
package mgs.aurora.modules.core.enum 
{
    public class DependencyName extends Object
    {
        public function DependencyName()
        {
            super();
            return;
        }

        internal static const NAME:String="dependency";

        public static const DEPENDENCIES_CONFIG:String=NAME + "/dependencies_config";

        public static const BRAND_CONFIG:String=NAME + "/brand_config";

        public static const CONFIG_MAPPINGS:String=NAME + "/config_mappings";

        public static const DISPLAY_CONFIG:String=NAME + "/display_config";

        public static const XMAN_MODULE:String=NAME + "/xman_module";

        public static const MPF_MODULE:String=NAME + "/mpf_module";

        public static const MAGNETO_MODULE:String=NAME + "/magneto_module";

        public static const RAPTOR_SESSION_MODULE:String=NAME + "/raptor_session_module";

        public static const SOUND_ENGINE_MODULE:String=NAME + "/sound_engine_module";

        public static const GAMES_LIST:String=NAME + "/games_list";

        public static const VIRTUAL_PIT_BOSS:String=NAME + "/virtual_pit_boss";

        public static const BONUS_BUBBLE:String=NAME + "/bonus_bubble";

        public static const FUN_BONUS_BUBBLE:String=NAME + "/fun_bonus_bubble";

        public static const PROGRESS_ICON:String=NAME + "/progress_icon";

        public static const RAPTOR_BANKING_MODULE:String=NAME + "/raptor_banking_module";

        public static const CURRENCIES:String=NAME + "/currencies_config";

        public static const GAME_STRINGS_EN:String=NAME + "/game_strings_en";

        public static const GAME_STRINGS_FOREIGN:String=NAME + "/game_strings_foreign";

        public static const BRANDMIGRATION:String=NAME + "/brandMigration_config";

        public static const COMBINED_CONFIG:String=NAME + "/combined_config";

        public static const FRAMES_BUILDER_MODULE:String=NAME + "/frames_builder_module";

        public static const FRAMES_FRAMELIB_CONFIG:String=NAME + "/frames_framelib_config";

        public static const FRAMES_FRAMEDISPLAY_CONFIG:String=NAME + "/frames_framedisplay_config";

        public static const FRAMES_FONTS:String=NAME + "/frames_fonts";

        public static const FRAMES_FRAMELIB:String=NAME + "/frames_framelib";

        public static const DIALOGUES_MODULE:String=NAME + "/dialogues_module";

        public static const DIALOGUES_ART:String=NAME + "/dialogues_art";

        public static const DIALOGUES_CONTROL_CONFIG:String=NAME + "/dialogues_control_config";

        public static const DIALOGUES_DEFINITIONS_CONFIG:String=NAME + "/dialogues_definitions_config";

        public static const DIALOGUES_MAPPING_CONFIG:String=NAME + "/dialogues_mapping_config";

        public static const LOCAL_STRINGS:String=NAME + "/local_strings";

        public static const STARTUP_MESSAGES:String=NAME + "/startup_messages";

        public static const AUTOMATION_SOCKET:String=NAME + "/automation_socket";

        public static const AUTOMATION_GAME_OBSERVER:String=NAME + "/automation_game_observer";

        public static const MARKET_MANAGER_MODULE:String=NAME + "/market_manager_manager";
    }
}


//            class FrameIconIdentifiers
package mgs.aurora.modules.core.enum 
{
    public class FrameIconIdentifiers extends Object
    {
        public function FrameIconIdentifiers()
        {
            super();
            return;
        }

        public static const PLAYCHECK:String="PlayCheck";

        public static const CASHCHECK:String="CashCheck";

        public static const LOYALTY:String="Loyalty";

        public static const NEWS:String="News";

        public static const PROMOTIONS:String="Promotions";

        public static const MY_ACCOUNT:String="MyAccountSite";
    }
}


//            class FunBonusEventSource
package mgs.aurora.modules.core.enum 
{
    public class FunBonusEventSource extends Object
    {
        public function FunBonusEventSource()
        {
            super();
            return;
        }

        public static const BONUS_BUBBLE:String="BonusBubble";

        public static const VALUE_ADD:String="ValueAdd";

        public static const RMM:String="RMM";

        public static const DIALOGUE:String="Dialogue";

        public static const MARKET_MANAGER:String="Market_Manager";

        public static const DIRECTLAUNCH:String="DirectLaunch";
    }
}


//            class GameBlockedMessages
package mgs.aurora.modules.core.enum 
{
    public class GameBlockedMessages extends Object
    {
        public function GameBlockedMessages()
        {
            super();
            return;
        }

        public static const DEFAULT_MESSAGE:int=0;

        public static const VIP_ONLY_MESSAGE:int=1;

        public static const FRAUD_MESSAGE:int=2;

        public static const DISABLED_MESSAGE:int=3;

        public static const SAME_GAME_MESSAGE:int=50;
    }
}


//            class GenieStepIdNames
package mgs.aurora.modules.core.enum 
{
    public class GenieStepIdNames extends Object
    {
        public function GenieStepIdNames()
        {
            super();
            return;
        }

        public static const CASINO_ERRORS:String="casinoErrors";

        public static const EXTERNAL_PAGE_LAUNCH:String="externalPageLaunch";

        public static const BANKING_USAGE:String="bankingUsage";

        public static const PERFORMANCE_RATING:String="performanceRating";

        public static const FUN_BONUS_MODE_SWITCH:String="funBonusModeSwitch";

        public static const FUN_BONUS_TUTORIAL_LAUNCH:String="funBonusTutorialLaunch";
    }
}


//            class JSDataNames
package mgs.aurora.modules.core.enum 
{
    public class JSDataNames extends Object
    {
        public function JSDataNames()
        {
            super();
            return;
        }

        public static const ISSGI:String="issgi";

        public static const SESSIONID:String="sessionid";

        public static const SESSIONNUMBER:String="sessionnumber";

        public static const DEBUG:String="debug";

        public static const DEBUGLEVELS:String="debuglevels";

        public static const BASEURL:String="baseurl";

        public static const SEXT1:String="sext1";

        public static const SEXT2:String="sext2";

        public static const GAMEID:String="gameid";

        public static const EXTGAMEID:String="extgameid";

        public static const CID:String="cid";

        public static const MID:String="mid";

        public static const TOURNAMENTID:String="tournamentid";

        public static const FRAMETYPE:String="frametype";

        public static const CSVADDBUTTONS:String="csvaddbuttons";

        public static const CSVREMOVEBUTTONS:String="csvremovebuttons";

        public static const LOGINTYPE:String="logintype";

        public static const SERVERID:String="serverid";

        public static const DEMOSERVERID:String="demoserverid";

        public static const RETURN_URL:String="return_url";

        public static const BRANDCONFIG:String="brandconfig";

        public static const DISPLAYCONFIG:String="displayconfig";

        public static const PRELOADERURL:String="preloaderurl";

        public static const PRELOADERTYPE:String="preloadertype";

        public static const PLATFORMID:String="platformid";

        public static const BTAG:String="btag";

        public static const BTAG2:String="btag2";

        public static const BTAG3:String="btag3";

        public static const BTAG4:String="btag4";

        public static const BTAG5:String="btag5";

        public static const SAFEEXTRETURNURL:String="safeextreturnurl";

        public static const FULLEXTRETURNURL:String="fullextreturnurl";

        public static const NUSERTYPE:String="nusertype";

        public static const AUTHTOKEN:String="authtoken";

        public static const CASINOMUTE:String="casinomute";

        public static const LAUNCHINFUNMODE:String="launchinfunmode";

        public static const MPTOURID:String="mptourid";

        public static const MPSERVICEID:String="mpserviceid";

        public static const EXTGAMELIST:String="extgamelist";

        public static const CASINOLANGUAGE:String="casinolanguage";

        public static const AUTOLOGIN:String="autologin";

        public static const IPADDRESS:String="ipaddress";

        public static const PCMGUID:String="pcmguid";

        public static const ID1:String="id1";

        public static const ID2:String="id2";

        public static const ID4:String="id4";

        public static const SUSERNAME:String="susername";

        public static const ENABLE_BONUS_BUBBLE:String="enablebonusbubble";

        public static const FUN_BONUS_TYPE:String="bonusbubbletype";

        public static const SID3:String="sid3";

        public static const SRECALL:String="srecall";

        public static const PPUserName:String="ppusername";

        public static const PPKey:String="ppkey";

        public static const UPE:String="upe";

        public static const GGUSERNAME:String="ggusername";

        public static const GGPASSWORD:String="ggpassword";

        public static const GGRECALL:String="ggrecall";

        public static const HASCREDS:String="hascreds";

        public static const GGPRACTICEONLY:String="ggpracticeonly";

        public static const SINGLESIGNON:String="singlesignon";

        public static const SID4:String="sid4";

        public static const APPLICATIONPATH:String="applicationpath";

        public static const REVERSE_PROXY:String="reverseProxy";

        public static const ISQUICKREDIRECT:String="isQuickRedirect";

        public static const PARTICIPATIONCODE:String="participationCode";

        public static const EXTMIGRATE:String="extmig";

        public static const SESSIONUSERID:String="sessionUserId";

        public static const NOTIFIER_ID:String="NotifierId";

        public static const CUSTOMHEADERVALUE:String="customheadervalue";

        public static const HIDEVALUEADDS:String="hidevalueadds";

        public static const SHOWVALUEADDS:String="showvalueadds";
    }
}


//            class MetricTypes
package mgs.aurora.modules.core.enum 
{
    public class MetricTypes extends Object
    {
        public function MetricTypes()
        {
            super();
            return;
        }

        public static const COUNT:String="count";

        public static const LATENCY:String="latency";

        public static const GAUGE:String="gauge";
    }
}


//            class ModuleReadyCheckTypes
package mgs.aurora.modules.core.enum 
{
    public class ModuleReadyCheckTypes extends Object
    {
        public function ModuleReadyCheckTypes()
        {
            super();
            return;
        }

        public static const NAME:String="modulereadychecktypes";

        public static const PROMPT_BANK:String=NAME + "/prompt_bank";

        public static const SHOW_MODULE_STARTUP_INFO_DIALOGUE:String=NAME + "/show_module_startup_info_dialogue";
    }
}


//            class PacketVerbs
package mgs.aurora.modules.core.enum 
{
    public class PacketVerbs extends Object
    {
        public function PacketVerbs()
        {
            super();
            return;
        }

        public static const ERROR_VERB:String="Error";

        public static const HIDDENGAMESLIST_VERB:String="GetHiddenGameList";

        public static const PLAYERINFORMATION_VERB:String="PlayerInformationRequest";

        public static const GENERIC_XML_PACKET_VERB:String="GenericXML";

        public static const SESSION_AUTH_TOKEN_LOGIN_VERB:String="SessionAuthTokenLogin";
    }
}


//            class PlayForReal
package mgs.aurora.modules.core.enum 
{
    public class PlayForReal extends Object
    {
        public function PlayForReal()
        {
            super();
            return;
        }

        public static const NOT_AVAILABLE:int=0;

        public static const AVAILABLE:int=1;

        public static const PFR_FOR_DEMO_NOT_AVAILABLE:int=0;

        public static const PFR_FOR_DEMO_AVAILABLE:int=1;

        public static const PFR_FOR_GUEST_NOT_AVAILABLE:int=0;

        public static const PFR_FOR_GUEST_AVAILABLE:int=1;

        public static const PFR_ACTION_OLR:String="olr";

        public static const PFR_ACTION_OTHER:String="other";
    }
}


//            class RegulatedSiteNames
package mgs.aurora.modules.core.enum 
{
    public class RegulatedSiteNames extends Object
    {
        public function RegulatedSiteNames()
        {
            super();
            return;
        }

        public static const RESPONSIBLE_GAMING:String="ResponsibleGaming";

        public static const AAMS:String="Aams";

        public static const OLR_ACCOUNT_ACTIVATION:String="OLRAccountActivation";

        public static const TERMS_AND_CONDITIONS:String="TermsAndConditions";
    }
}


//            class SystemStoreNames
package mgs.aurora.modules.core.enum 
{
    public class SystemStoreNames extends Object
    {
        public function SystemStoreNames()
        {
            super();
            return;
        }

        public static const STORAGE_NAME_SOUND:String="Sound";

        public static const KEY_NAME_SOUND_MUTE:String="muted";
    }
}


//          package events
//            package api
//              class BankingEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class BankingEvent extends flash.events.Event
    {
        public function BankingEvent(arg1:String, arg2:String="", arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._id = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.BankingEvent(type, this.id, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("BankingEvent", "type", "id", "bubbles", "cancelable", "eventPhase");
        }

        public function get id():String
        {
            return this._id;
        }

        public static const UPDATE_HOST_BALANCE:String="update_host_balance";

        public static const UPDATE_HOST_COUNTUP_BALANCE:String="update_host_countup_balance";

        public static const GET_HOST_BALANCE:String="get_host_balance";

        public static const LAUNCH:String="launch";

        public static const INSUFFICIENT_FUNDS:String="insufficient_funds";

        public static const CUSTOM_INSUFFICIENT_FUNDS:String="custom_insufficient_funds";

        public static const UPDATE_HOST_BANALCE_NOTIFIER:String="update_host_banalce_notifier";

        public static const UPDATE_DISPLAYTYPE:String="update_displaytype";

        public static const UPDATE_WIN_VALUE:String="update_win_value";

        public static const UPDATE_BET_VALUE:String="update_bet_value";

        public static const UPDATE_COINSIZE_VALUE:String="update_coinsize_value";

        internal var _id:String;
    }
}


//              class ButtonManagerEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class ButtonManagerEvent extends flash.events.Event
    {
        public function ButtonManagerEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.ButtonManagerEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ButtonManagerEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const LOCK_ALL_BUTTONS:String="button_manager_event/lock_all_buttons";

        public static const UNLOCK_ALL_BUTTONS:String="button_manager_event/unlock_all_buttons";

        public static const SET_PLAYFORREAL_STATE:String="button_manager_event/set_playforreal_state";
    }
}


//              class DialogueEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class DialogueEvent extends flash.events.Event
    {
        public function DialogueEvent(arg1:String, arg2:*=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.DialogueEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("DialogueEvent", "data", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const SHOW_MODAL:String="show_modal";

        public static const HIDE_MODAL:String="show_modal";

        public static const SHOW_FADER_MESSAGE:String="show_fader_message";

        public static const SHOW_STARTUP_DIALOGUE:String="show_startup_dialogue";

        public var data:Object;
    }
}


//              class FramesEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class FramesEvent extends flash.events.Event
    {
        public function FramesEvent(arg1:String, arg2:*="", arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.FramesEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("FramesEvent", "data", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const BONUS_BUBBLE_TRIGGER_CHANGE:String="bonus_bubble_trigger_change";

        public static const BONUS_BUBBLE_COORDINATES_CHANGE:String="bonus_bubble_coordinates_change";

        public static const BONUS_ENABLED_SET:String="bonus_enabled_set";

        public static const MODULE_SWITCHED_FRAME:String="module_switched_frame";

        public var data:*;
    }
}


//              class HelpEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class HelpEvent extends flash.events.Event
    {
        public function HelpEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._section = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.HelpEvent(type, this._section, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("HelpEvent", "type", "section", "bubbles", "cancelable", "eventPhase");
        }

        public function get section():String
        {
            return this._section;
        }

        public static const LAUNCH:String="Launch";

        internal var _section:String;
    }
}


//              class ModuleStatusEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class ModuleStatusEvent extends flash.events.Event
    {
        public function ModuleStatusEvent(arg1:String, arg2:Object=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this.moduleData = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.ModuleStatusEvent(type, this.moduleData, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ModuleStatusEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="ModuleStatusEvent";

        public static const BUSY_UPDATED:String="busy_update";

        public static const CLEANEDUP_UPDATED:String="cleanedup_update";

        public static const INITIALIZED_UPDATED:String="initialized_updated";

        public static const LOAD_NEW_MODULE:String="load_new_module";

        public static const COMPLETE_LOAD_BAR:String="complete_load_bar";

        public static const EXIT:String=NAME + "/types/exit";

        public var moduleData:Object;
    }
}


//              class MultiplayerEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class MultiplayerEvent extends flash.events.Event
    {
        public function MultiplayerEvent(arg1:String, arg2:*=null, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.MultiplayerEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("MultiplayerEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():*
        {
            return this._data;
        }

        internal static const NAME:String="MultiplayerEvent";

        public static const SEND_PACKET:String=NAME + "/event/send_packet";

        public static const AVATAR_FILE_REQUEST:String=NAME + "/event/avatar_file_request";

        public static const LAUNCH_AVATAR_EXTERNAL:String=NAME + "/event/launch_avatar_external";

        public static const FETCH_AVATAR_METADATA:String=NAME + "/event/fetch_avatar_metadata";

        public static const CANCEL_AVATAR_IMAGE:String=NAME + "/event/cancel_avatar_image";

        public static const REQUEST_NEW_ALIAS:String=NAME + "/event/request_new_alias";

        public static const CANCEL_NEW_ALIAS_REQUEST:String=NAME + "/event/cancel_new_alias_request";

        internal var _data:*;
    }
}


//              class PreloaderEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class PreloaderEvent extends flash.events.Event
    {
        public function PreloaderEvent(arg1:String, arg2:*, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.PreloaderEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("PreloaderEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():*
        {
            return this._data;
        }

        public static const BACKGROUND_ALPHA:String="alpha";

        public static const TEXT_LABEL:String="text_label";

        public static const VISIBILE:String="visible";

        public static const CREATE:String="create";

        public static const FILE_COUNT_CHANGE:String="file_count_change";

        public static const EXTERNAL_LOADER_PROGRESS:String="external_loader_progress";

        public static const GET_INTERNAL_LOADER_PROGRESS:String="get_internal_loader_progress";

        public static const SHOW_BLOCKER:String="show_blocker";

        public static const HIDE_BLOCKER:String="hide_blocker";

        internal var _data:*;
    }
}


//              class ProfilingEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    import flash.utils.*;
    
    public class ProfilingEvent extends flash.events.Event
    {
        public function ProfilingEvent(arg1:String, arg2:flash.utils.Dictionary, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.ProfilingEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ProfilingEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():flash.utils.Dictionary
        {
            return this._data;
        }

        public static const SEND_STEP:String="send_step";

        internal var _data:flash.utils.Dictionary;
    }
}


//              class ServerEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class ServerEvent extends flash.events.Event
    {
        public function ServerEvent(arg1:String, arg2:*, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.ServerEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ServerEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():*
        {
            return this._data;
        }

        public static const FILE_REQUEST:String="file_request";

        public static const FILE_STOP_REQUEST:String="file_stop_request";

        public static const PACKET_REQUEST:String="packet_request";

        internal var _data:*;
    }
}


//              class TopBarEvent
package mgs.aurora.modules.core.events.api 
{
    import flash.events.*;
    
    public class TopBarEvent extends flash.events.Event
    {
        public function TopBarEvent(arg1:String, arg2:*, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._data = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.api.TopBarEvent(type, this.data, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("TopBarEvent", "type", "data", "bubbles", "cancelable", "eventPhase");
        }

        public function get data():*
        {
            return this._data;
        }

        public static const UPDATE:String="update";

        internal var _data:*;
    }
}


//            class ExternalLaunchersEvent
package mgs.aurora.modules.core.events 
{
    import flash.events.*;
    
    public class ExternalLaunchersEvent extends flash.events.Event
    {
        public function ExternalLaunchersEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._id = arg2;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.core.events.ExternalLaunchersEvent(type, this._id, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("ExternalLaunchersEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public function get id():String
        {
            return this._id;
        }

        public static const EXTERNAL_PAGE_OPEN:String="/ExternalLaunchersEvent/open";

        public static const EXTERNAL_PAGE_CLOSE:String="/ExternalLaunchersEvent/close";

        public static const GENIE_STEP_SITE_LAUNCH:String="/ExternalLaunchersEvent/genie_step_site_launch";

        public static const GENIE_STEP_FUN_BONUS_TUTORIAL:String="/ExternalLaunchersEvent/genie_step_fun_bonus_tutorial";

        internal var _id:String;
    }
}


//          package externalLauncher
//            class ExternalLauncher
package mgs.aurora.modules.core.externalLauncher 
{
    import flash.events.*;
    import flash.external.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.enums.vpb.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.enum.external.*;
    import mgs.aurora.modules.core.events.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ExternalLauncher extends flash.events.EventDispatcher implements mgs.aurora.modules.core.externalLauncher.IExternalLauncher
    {
        public function ExternalLauncher()
        {
            super();
            this._sessionData = new Object();
            this._configData = new XMLList();
            this._autoShowLogin = false;
            this._openAppAfterLogin = "";
            flash.external.ExternalInterface.addCallback("popupClosed", this.popupClosed);
            flash.external.ExternalInterface.addCallback("popupOpen", this.popupOpen);
            return;
        }

        internal function popupClosed(arg1:String):void
        {
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.EXTERNAL_PAGE_CLOSE, arg1));
            return;
        }

        internal function popupOpen(arg1:String):void
        {
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.EXTERNAL_PAGE_OPEN, arg1));
            return;
        }

        internal function parseReturnUrl(arg1:String):String
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc1:*="";
            if (arg1.indexOf("?") == -1) 
            {
                loc1 = arg1;
            }
            else 
            {
                loc1 = arg1.split("?")[0];
                loc2 = String(arg1.split("?")[1]).split("&");
                loc3 = loc2.length > 0 ? "?" : "";
                loc4 = 0;
                while (loc4 < loc2.length) 
                {
                    if ((loc5 = loc2[loc4].split("=")[0].toUpperCase()).indexOf("GAMEID") == -1 && loc5.indexOf("MID") == -1 && loc5.indexOf("CID") == -1) 
                    {
                        loc3 = loc3 + ((loc3 == "?" ? "" : "&") + loc2[loc4]);
                    }
                    ++loc4;
                }
                loc1 = loc1 + loc3;
            }
            return loc1;
        }

        internal function getWinParms(arg1:XMLList):String
        {
            var loc1:*=arg1.@newWindow != undefined ? arg1.@newWindow == "1" : true;
            if (!loc1) 
            {
                return null;
            }
            var loc2:*=arg1.@winParams != undefined ? arg1.@winParams.toString() : "";
            return loc2;
        }

        public function launchOLR(arg1:String):void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.OLR;
            var loc3:*=new XMLList();
            loc3 = arg1 != mgs.aurora.common.enums.raptorSession.OlrTypes.OLR_REAL ? this._configData.externalLaunch.guestOLRSite : this._configData.externalLaunch.realOLRSite;
            this.setParamList();
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc2));
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        public function setConfigData(arg1:XMLList):void
        {
            this._configData = arg1;
            return;
        }

        public function setSessionData(arg1:Object):void
        {
            this._sessionData = arg1;
            return;
        }

        public function launchBank():void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.ECASH;
            var loc3:*=new XMLList();
            loc3 = this._configData.externalLaunch.bankSite;
            this.setParamList();
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc2));
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        public function launchQuickBank():void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.QUICK_BANK;
            var loc3:*=new XMLList();
            loc3 = this._configData.externalLaunch.quickBankSite;
            this.setParamList();
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc2));
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        internal function getExternalSitesNode(arg1:String):XMLList
        {
            var loc5:*=null;
            var loc1:*="," + this._configData.externalSites.@excludeList + ",";
            var loc2:*="," + arg1.toLowerCase() + ",";
            if (loc1.indexOf(loc2) != -1) 
            {
                return null;
            }
            var loc3:*=this._configData.externalSites.site.length();
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                if ((loc5 = XMLList(this._configData.externalSites.site[loc4])).@name.toLowerCase() == arg1.toLowerCase()) 
                {
                    return loc5;
                }
                ++loc4;
            }
            return null;
        }

        public function launchMigrate():void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.MIGRATE;
            var loc3:*=new XMLList();
            loc3 = this._configData.externalLaunch.migrateSite;
            this.setParamList();
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        public function launchBrandMigration():void
        {
            var args:Object;
            var migrationWindowName:String;
            var migrationNode:XMLList;
            var brandMigrationProxy:mgs.aurora.modules.core.model.BrandMigrationProxy;
            var url:String;
            var regObj:Object;
            var windowName:String;
            var node:XMLList;

            var loc1:*;
            migrationWindowName = null;
            migrationNode = null;
            brandMigrationProxy = null;
            url = null;
            regObj = null;
            windowName = null;
            node = null;
            args = new Object();
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_STATUS] != "0") 
            {
                regObj = new Object();
                regObj.upe = "1";
                if (flash.external.ExternalInterface.available) 
                {
                    try 
                    {
                        flash.external.ExternalInterface.call("saveExternalSettings", regObj);
                    }
                    catch (error:Error)
                    {
                    };
                }
                windowName = mgs.aurora.modules.core.enum.external.WindowNames.OLR;
                node = new XMLList();
                node = this._configData.externalLaunch.postBrandMigrationSite;
                this.setParamList();
                args = this.getPageArgsObject(windowName, node);
                this.launchPage(args);
            }
            else 
            {
                migrationWindowName = mgs.aurora.modules.core.enum.external.WindowNames.BRAND_MIGRATION;
                migrationNode = new XMLList();
                migrationNode = this._configData.externalLaunch.preBrandMigrationSite;
                this.setParamList();
                brandMigrationProxy = mgs.aurora.modules.core.model.BrandMigrationProxy(mgs.aurora.modules.core.utils.PureMVCUtility.retrieveProxy(mgs.aurora.modules.core.model.BrandMigrationProxy.NAME));
                url = brandMigrationProxy.getMappedURL(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_MUPID], this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE]);
                this._paramList.mupidentifier = escape(this.parseReturnUrl(url));
                args = this.getPageArgsObject(migrationWindowName, migrationNode);
                this.launchPage(args);
            }
            return;
        }

        public function launchOperatorPage():void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.OPERATOR;
            var loc3:*=new XMLList();
            loc3 = this._configData.externalLaunch.operatorPageSite;
            this.setParamList(mgs.aurora.modules.core.enum.external.WindowNames.OPERATOR);
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        public function launchMyAccount():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] != mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
            {
                loc2 = new Object();
                loc3 = mgs.aurora.modules.core.enum.external.WindowNames.MY_ACCOUNT;
                loc4 = new XMLList();
                loc4 = this._configData.externalLaunch.myAccountSite;
                this.setParamList();
                this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc3));
                loc2 = this.getPageArgsObject(loc3, loc4);
                this.launchPage(loc2);
            }
            else 
            {
                loc1 = mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
                loc1.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FB_SWITCH_DIALOGUE, {"site":mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_MY_ACCOUNT, "data":""}, mgs.aurora.modules.core.enum.FunBonusEventSource.VALUE_ADD + "|" + mgs.aurora.modules.core.enum.external.WindowNames.MY_ACCOUNT);
            }
            return;
        }

        public function launchForgotPassword(arg1:String):void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.FORGOT_PASSWORD;
            var loc3:*=new XMLList();
            loc3 = this._configData.externalLaunch.forgotPasswordSite;
            this.setParamList();
            if (arg1 != null) 
            {
                this._paramList.username = arg1;
            }
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc2));
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        public function launchChat(arg1:Object):void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.CHAT;
            var loc3:*=new XMLList();
            loc3 = this._configData.externalLaunch.launchChat;
            this.setParamList();
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc2));
            loc1 = this.getPageArgsObject(loc2, loc3);
            loc1.url = arg1.url;
            this.launchPage(loc1);
            return;
        }

        public function launchHelp(arg1:String=""):void
        {
            var loc5:*=null;
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.HELP;
            var loc3:*=new XMLList();
            var loc4:*;
            loc3 = (loc4 = this._configData.help.@helpsys) != "1" ? this._configData.externalLaunch.legacyHelp : this._configData.externalLaunch.raidenHelp;
            this.setParamList();
            if (arg1 != "") 
            {
                this._paramList.helpcatagory = arg1;
            }
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc2));
            loc1 = this.getPageArgsObject(loc2, loc3);
            if (loc4 != "1") 
            {
                if ((loc5 = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]) == null || loc5 == "") 
                {
                    loc5 = "menu";
                }
                loc1.url = loc1.url + loc5 + ".asp";
                loc1.winParams = loc3.@winParams != undefined ? loc3.@winParams.toString() : "";
            }
            this.launchPage(loc1);
            return;
        }

        public function launchExternalGame(arg1:String, arg2:String):void
        {
            var loc1:*=new Object();
            var loc2:*=this._configData.externalLaunch.externalGame;
            var loc3:*=mgs.aurora.modules.core.enum.external.WindowNames.EXTERNAL_GAME;
            this.setParamList();
            loc1 = this.getPageArgsObject(loc3, loc2);
            loc1.url = arg1;
            loc1.winParams = loc2.@winParams != undefined ? loc2.@winParams.toString() : "";
            loc1.windowName = loc3;
            var loc4:*;
            (loc4 = new Object()).name = "isQuickRedirect";
            loc4.value = "false";
            loc1.list.push(loc4);
            this.launchPage(loc1);
            return;
        }

        public function launchReturnUrl(arg1:String):void
        {
            var loc1:*=new Object();
            var loc2:*=this._configData.externalLaunch.launchReturnUrl;
            var loc3:*=mgs.aurora.modules.core.enum.external.WindowNames.RETURN_URL;
            this.setParamList();
            loc1 = this.getPageArgsObject(loc3, loc2);
            loc1.url = this.parseReturnUrl(arg1);
            loc1.winParams = loc2.@winParams != undefined ? loc2.@winParams.toString() : "";
            loc1.windowName = loc3;
            var loc4:*;
            (loc4 = new Object()).name = "autoShowLogin";
            if (this._autoShowLogin != true) 
            {
                loc4.value = "0";
            }
            else 
            {
                loc4.value = "1";
            }
            loc1.list.push(loc4);
            this._autoShowLogin = false;
            var loc5:*;
            (loc5 = new Object()).name = "openAppAfterLogin";
            loc5.value = this._openAppAfterLogin;
            loc1.list.push(loc5);
            this._openAppAfterLogin = "";
            this.launchPage(loc1);
            return;
        }

        public function launchAvatarUpload():void
        {
            var loc2:*=null;
            var loc1:*=this._configData.externalLaunch.avatarUpload;
            this.setParamList();
            loc2 = this.getPageArgsObject(mgs.aurora.modules.core.enum.external.WindowNames.AVATAR_UPLOAD, loc1);
            loc2.url = loc1.@url.toString();
            loc2.winParams = loc1.@winParams.toString();
            this.launchPage(loc2);
            return;
        }

        public function launchFunBonusTutorial(arg1:String):void
        {
            var loc2:*=null;
            this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_FUN_BONUS_TUTORIAL, arg1));
            var loc1:*=this._configData.externalLaunch.launchFunBonusTutorial;
            loc2 = this.getPageArgsObject(mgs.aurora.modules.core.enum.external.WindowNames.FUNBONUS_TUTORIAL, loc1);
            loc2.url = loc1.@url.toString();
            loc2.winParams = loc1.@winParams.toString();
            this.launchPage(loc2);
            return;
        }

        public function launchFunBonusTermsConditions():void
        {
            var loc2:*=null;
            var loc1:*=this._configData.externalLaunch.funBonusTermsConditions;
            this.setParamList();
            loc2 = this.getPageArgsObject(mgs.aurora.modules.core.enum.external.WindowNames.FUNBONUS_TERMS_CONDITIONS, loc1);
            loc2.url = loc1.@url.toString();
            loc2.winParams = loc1.@winParams.toString();
            this.launchPage(loc2);
            return;
        }

        public function launchAliasActivation(arg1:String):void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.ALIAS_ACTIVATION;
            var loc3:*=this._configData.externalLaunch.aliasActivation;
            this.setParamList();
            var loc4:*;
            (loc4 = new Object()).name = "lcId";
            loc4.value = arg1;
            loc1 = this.getPageArgsObject(loc2, loc3);
            loc1.list.push(loc4);
            this.launchPage(loc1);
            return;
        }

        public function launchFromFrameIconID(arg1:String):void
        {
            var loc2:*=null;
            var loc3:*=false;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS && (arg1 == mgs.aurora.modules.core.enum.FrameIconIdentifiers.CASHCHECK || arg1 == mgs.aurora.modules.core.enum.FrameIconIdentifiers.LOYALTY || arg1 == mgs.aurora.modules.core.enum.FrameIconIdentifiers.MY_ACCOUNT)) 
            {
                loc1.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FB_SWITCH_DIALOGUE, {"site":mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_FROM_FRAME_ICON_ID, "data":arg1}, mgs.aurora.modules.core.enum.FunBonusEventSource.VALUE_ADD + "|" + arg1);
            }
            else 
            {
                loc2 = this.getExternalSitesNode(arg1.toLowerCase());
                if (loc2 == null) 
                {
                    loc1.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE, "ERRORSTR19");
                    return;
                }
                if (!(!(loc3 = loc2.requireLogin == "1") && this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID] == "")) 
                {
                    loc4 = new Object();
                    loc5 = arg1;
                    this.setParamList();
                    this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, loc5));
                    loc4 = this.getPageArgsObject(loc5, loc2);
                    this.launchPage(loc4);
                }
            }
            return;
        }

        public function launchCustomPlayForReal():void
        {
            var loc1:*=new Object();
            var loc2:*=mgs.aurora.modules.core.enum.external.WindowNames.CUSTOM_PLAY_FOR_REAL;
            var loc3:*=this._configData.customPage;
            this.setParamList();
            loc1 = this.getPageArgsObject(loc2, loc3);
            this.launchPage(loc1);
            return;
        }

        public function launchFanfair(arg1:Object):void
        {
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=new Object();
            var loc2:*=this._configData.externalLaunch.fanfairSite;
            var loc3:*=new Date();
            var loc4:*=mgs.aurora.modules.core.enum.external.WindowNames.FAN_FAIR + loc3.getTime();
            this.setParamList();
            loc1 = this.getPageArgsObject(loc4, loc2);
            loc1.url = arg1.url;
            var loc5:*=arg1.postData.split("&");
            var loc6:*=0;
            while (loc6 < loc5.length) 
            {
                loc7 = loc5[loc6].split("=");
                (loc8 = new Object()).name = loc7[0];
                loc8.value = loc7[1];
                loc1.list.push(loc8);
                ++loc6;
            }
            this.launchPage(loc1);
            return;
        }

        public function launchOther(arg1:Object):void
        {
            var loc5:*=null;
            var loc6:*=NaN;
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=new Object();
            var loc2:*=new String();
            var loc3:*=new Date();
            var loc4:*=mgs.aurora.modules.core.enum.external.WindowNames.OTHER + loc3.getTime();
            loc1.formName = "Form_" + loc4;
            loc1.url = arg1.url;
            loc1.windowName = loc4;
            loc1.winParams = arg1.winParams != undefined ? arg1.winParams : "height=800,width=600,scrollbars=yes";
            loc1.newWindow = arg1.newWindow != undefined ? arg1.newWindow == "1" : true;
            loc1.doPost = arg1.doPost != undefined ? arg1.doPost == "1" : true;
            loc1.addQueryString = arg1.addQueryString == "1";
            loc1.safeQueryString = arg1.safeQueryString == "1";
            loc1.list = [];
            if (arg1.postData != undefined) 
            {
                loc5 = arg1.postData.split("&");
                loc6 = 0;
                while (loc6 < loc5.length) 
                {
                    loc7 = loc5[loc6].split("=");
                    (loc8 = new Object()).name = loc7[0];
                    loc8.value = loc7[1];
                    loc1.list.push(loc8);
                    ++loc6;
                }
            }
            this.launchPage(loc1);
            return;
        }

        public function launchOtherInternalSite(arg1:XMLList):void
        {
            var loc1:*=null;
            this.setParamList();
            var loc2:*=arg1.name().toString().toLowerCase();
            switch (loc2) 
            {
                case "playerprotection":
                {
                    if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
                    {
                        loc1 = mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
                        loc1.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FB_SWITCH_DIALOGUE, {"site":mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_OTHER_INTERNAL_SITE, "data":arg1}, mgs.aurora.modules.core.enum.FunBonusEventSource.VALUE_ADD + "|" + mgs.aurora.modules.core.enum.RegulatedSiteNames.RESPONSIBLE_GAMING);
                        return;
                    }
                    this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, mgs.aurora.modules.core.enum.RegulatedSiteNames.RESPONSIBLE_GAMING));
                    break;
                }
                case "aams":
                {
                    this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, mgs.aurora.modules.core.enum.RegulatedSiteNames.AAMS));
                    break;
                }
                case "olraccountactivation":
                {
                    this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, mgs.aurora.modules.core.enum.RegulatedSiteNames.OLR_ACCOUNT_ACTIVATION));
                    break;
                }
                case "termsandconditions":
                {
                    this.dispatchEvent(new mgs.aurora.modules.core.events.ExternalLaunchersEvent(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, mgs.aurora.modules.core.enum.RegulatedSiteNames.TERMS_AND_CONDITIONS));
                    break;
                }
                default:
                {
                    break;
                }
            }
            this.launchPage(this.getPageArgsObject(mgs.aurora.modules.core.enum.external.WindowNames.OTHER + new Date().getTime(), arg1));
            return;
        }

        public function closeWindow():void
        {
            var facade:mgs.aurora.modules.core.CoreFacade;
            var externalData:mgs.aurora.common.interfaces.IExternalData;
            var browserVersion:String;
            var browserVersionConfig:String;
            var browserSplit:Array;

            var loc1:*;
            externalData = null;
            browserVersion = null;
            browserVersionConfig = null;
            browserSplit = null;
            facade = mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            if (flash.external.ExternalInterface.available) 
            {
                try 
                {
                    externalData = mgs.aurora.modules.core.model.ExternalDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
                    browserVersion = externalData.getValue("browserversion").toLowerCase();
                    browserVersionConfig = mgs.aurora.modules.core.model.DependenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.COMBINED_CONFIG).browserConfig.FailedWindowClose.@browsers;
                    browserSplit = browserVersion.split("_");
                    if (browserVersionConfig.toLowerCase().indexOf(browserSplit[0]) < 0) 
                    {
                        flash.external.ExternalInterface.call("closeWindow");
                    }
                    else 
                    {
                        flash.external.ExternalInterface.call("closeWindow", true);
                    }
                }
                catch (error:Error)
                {
                };
            }
            return;
        }

        public function setProperties(arg1:Object):void
        {
            if (arg1.autoShowLogin != true) 
            {
                this._autoShowLogin = false;
            }
            else 
            {
                this._autoShowLogin = true;
            }
            if (arg1.openAppAfterLogin != null) 
            {
                this._openAppAfterLogin = arg1.openAppAfterLogin;
            }
            return;
        }

        internal function launchPage(arg1:Object):void
        {
            var args:Object;

            var loc1:*;
            args = arg1;
            if (flash.external.ExternalInterface.available) 
            {
                try 
                {
                    flash.external.ExternalInterface.call("launchPage", args);
                }
                catch (error:Error)
                {
                };
            }
            return;
        }

        public function getWindowParameters():flash.utils.Dictionary
        {
            var loc1:*=new flash.utils.Dictionary();
            var loc2:*=this._configData.externalLaunch.realOLRSite;
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_OLR] = this.getWinParms(loc2);
            var loc3:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc4:*;
            if ((loc4 = mgs.aurora.modules.core.model.BankingProxy(loc3.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME))).isAvailable && !(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CIP] == true)) 
            {
                loc2 = int(this._configData.bank.@quickBank) != 1 ? this._configData.externalLaunch.bankSite : this._configData.externalLaunch.quickBankSite;
                loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBECASH] = this.getWinParms(loc2);
            }
            else 
            {
                loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBECASH] = null;
            }
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBPAGE] = "height=800,width=600,scrollbars=yes,resize=yes";
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_CHAT] = this.getWinParms(this._configData.externalLaunch.launchChat);
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_MY_ACCOUNT] = this.getWinParms(this._configData.externalLaunch.myAccountSite);
            loc2 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.PLAYCHECK);
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_PLAYCHECK] = loc2 != null ? this.getWinParms(loc2) : null;
            loc2 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.CASHCHECK);
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_CASHCHECK] = loc2 != null ? this.getWinParms(loc2) : null;
            loc2 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.LOYALTY_MANAGER);
            loc1[mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_LOYALTY] = loc2 != null ? this.getWinParms(loc2) : null;
            return loc1;
        }

        public function getLaunchDetails(arg1:uint):flash.utils.Dictionary
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            this.setParamList();
            var loc1:*=new flash.utils.Dictionary();
            var loc2:*=new Object();
            var loc6:*=arg1;
            switch (loc6) 
            {
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_OLR:
                {
                    loc2 = this.createLaunchDetails(this._configData.externalLaunch.realOLRSite);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBECASH:
                {
                    loc4 = mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
                    if ((loc5 = mgs.aurora.modules.core.model.BankingProxy(loc4.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME))).isAvailable && !(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CIP] == true)) 
                    {
                        loc3 = int(this._configData.bank.@quickBank) != 1 ? this._configData.externalLaunch.bankSite : this._configData.externalLaunch.quickBankSite;
                        loc2 = this.createLaunchDetails(loc3);
                        loc4.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_SHOW_BANKING_REFRESH);
                    }
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_WEBPAGE:
                {
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_CHAT:
                {
                    loc2 = this.createLaunchDetails(this._configData.externalLaunch.launchChat);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_MY_ACCOUNT:
                {
                    loc2 = this.createLaunchDetails(this._configData.externalLaunch.myAccountSite);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_PLAYCHECK:
                {
                    loc3 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.PLAYCHECK);
                    loc2 = this.createLaunchDetails(loc3);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_CASHCHECK:
                {
                    loc3 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.CASHCHECK);
                    loc2 = this.createLaunchDetails(loc3);
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBMessageTypes.LAUNCH_LOYALTY:
                {
                    loc3 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.LOYALTY_MANAGER);
                    loc2 = this.createLaunchDetails(loc3);
                    break;
                }
            }
            loc1["url"] = loc2["url"];
            loc1["postValues"] = new Object();
            loc1["postValues"] = loc2["list"];
            return loc1;
        }

        public function isWebAppValid(arg1:String):Boolean
        {
            var loc2:*=null;
            var loc1:*=true;
            var loc3:*=arg1;
            switch (loc3) 
            {
                case mgs.aurora.common.enums.vpb.VPBWebApps.MY_ACCOUNT:
                {
                    break;
                }
                case mgs.aurora.common.enums.vpb.VPBWebApps.PLAYCHECK:
                case mgs.aurora.common.enums.vpb.VPBWebApps.CASHCHECK:
                case mgs.aurora.common.enums.vpb.VPBWebApps.LOYALTY_MANAGER:
                {
                    loc2 = this.getExternalSitesNode(mgs.aurora.common.enums.vpb.VPBWebApps.PLAYCHECK);
                    loc1 = !(loc2 == null);
                    break;
                }
            }
            return loc1;
        }

        internal function setParamList(arg1:String=""):void
        {
            var loc3:*=null;
            this._paramList = new Object();
            this._paramList.usertype = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE];
            if (this._paramList.usertype == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS && arg1 == mgs.aurora.modules.core.enum.external.WindowNames.OPERATOR) 
            {
                this._paramList.username = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME];
                this._paramList.password = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SID3];
            }
            else if (this._paramList.usertype == mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER) 
            {
                if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME] == "" && this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD] == "" && !(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID] == "")) 
                {
                    this._paramList.username = "demo";
                    this._paramList.password = "demo";
                }
                else 
                {
                    this._paramList.username = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME];
                    this._paramList.password = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD];
                }
            }
            else 
            {
                this._paramList.username = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME];
                this._paramList.password = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD];
            }
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
            {
                this._paramList.fbusername = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.FBUSERNAME];
            }
            this._paramList.clienttype = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CLIENTTYPE];
            this._paramList.serverid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID];
            this._paramList.language = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE];
            this._paramList.btag = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG];
            this._paramList.btag2 = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG2];
            this._paramList.btag3 = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG3];
            this._paramList.btag4 = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG4];
            this._paramList.btag5 = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.BTAG5];
            this._paramList.gameid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID];
            this._paramList.sessionid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID];
            this._paramList.sessionnumber = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONNUMBER];
            this._paramList.mutesound = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND];
            this._paramList.authtoken = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.EXTAUTHTOKEN];
            this._paramList.pcmguid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.PCMGUID];
            this._paramList.helpcatagory = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.HELPCATAGORY];
            this._paramList.mpfuserid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.MPF_USERID];
            this._paramList.extgamelist = escape(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.EXTGAMELIST]);
            this._paramList.curmid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID];
            this._paramList.curcid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID];
            this._paramList.curtournamentid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.CURTOURNAMENTID];
            this._paramList.sessiontoken = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_AUTHENTICATION_TOKEN];
            this._paramList.sessionuserid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_USERID];
            this._paramList.autologin = mgs.aurora.common.utilities.StringUtils.StringBooleanToInt(String(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.AUTOLOGIN]));
            this._paramList.hgames = escape(String(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.HGAME]));
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(mgs.aurora.modules.core.utils.PureMVCUtility.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME));
            this._paramList.theme = loc1.theme;
            this._paramList.variant = loc1.variant;
            this._paramList.regMarket = loc1.regMarket;
            this._paramList.incompletegamesshowing = loc1.externalData.getValue("incompletegamesshowing", "0");
            this._paramList.extgameid = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.EXTGAMEID];
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.RETURNURL] == "") 
            {
                this._paramList.fullreturnurl = escape(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.FULLRETURNURL]);
                this._paramList.safereturnurl = escape(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.SAFERETURNURL]);
            }
            else 
            {
                this._paramList.fullreturnurl = escape(this.parseReturnUrl(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.RETURNURL]));
                this._paramList.safereturnurl = escape(this.parseReturnUrl(this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.RETURNURL]));
            }
            this._paramList.mupidentifier = this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_MUPID];
            var loc2:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            if (loc2.hasProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)) 
            {
                loc3 = mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME).retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
                this._paramList.networkid = loc3.requiresSockets ? 1 : 0;
            }
            else 
            {
                this._paramList.networkid = 1;
            }
            return;
        }

        internal function getPageArgsObject(arg1:String, arg2:XMLList):Object
        {
            var loc1:*=new Object();
            var loc2:*=new String();
            loc1.formName = arg1 + "Form";
            loc1.url = arg2.@url != undefined ? arg2.@url.toString() : "";
            loc1.windowName = arg1;
            loc1.winParams = arg2.@winParams != undefined ? arg2.@winParams.toString() : "";
            loc1.newWindow = arg2.@newWindow != undefined ? arg2.@newWindow == "1" : true;
            loc1.doPost = arg2.@doPost != undefined ? arg2.@doPost == "1" : true;
            loc1.addQueryString = arg2.@addQueryString == "1";
            loc1.safeQueryString = arg2.@safeQueryString == "1";
            loc2 = loc2 + (arg2.@nameValues == undefined ? "" : arg2.@nameValues);
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
            {
                if (arg2.@realNameValues != "") 
                {
                    loc2 = (loc2 = loc2 + (!(arg2.@realNameValues == undefined) && !(loc2 == "") ? "," : "")) + (arg2.@realNameValues == undefined ? "" : arg2.@realNameValues);
                }
            }
            if (loc2 == "") 
            {
                loc1.list = new Array();
            }
            else 
            {
                loc2 = mgs.aurora.common.utilities.StringUtils.replaceWithActualValue(loc2, this._paramList);
                loc1.list = this.getArgsList(loc2);
            }
            return loc1;
        }

        internal function getArgsList(arg1:String):Array
        {
            var loc3:*=null;
            var loc6:*=null;
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc4:*=new Array();
            var loc5:*=0;
            while (loc5 < loc2) 
            {
                loc6 = loc1[loc5].split("=^=");
                (loc3 = new Object()).name = loc6[0];
                loc3.value = unescape(loc6[1]);
                loc4.push(loc3);
                ++loc5;
            }
            return loc4;
        }

        internal function createLaunchDetails(arg1:XMLList):Object
        {
            var loc1:*=new Object();
            loc1.url = arg1.@url != undefined ? arg1.@url.toString() : "";
            var loc2:*=new String();
            loc2 = loc2 + (arg1.@nameValues == undefined ? "" : arg1.@nameValues);
            if (this._sessionData[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
            {
                if (arg1.@realNameValues != "") 
                {
                    loc2 = loc2 + (!(arg1.@realNameValues == undefined) && !(loc2 == "") ? "," : "");
                    loc2 = loc2 + (arg1.@realNameValues == undefined ? "" : arg1.@realNameValues);
                }
            }
            loc1.list = new Object();
            if (loc2 != "") 
            {
                loc2 = mgs.aurora.common.utilities.StringUtils.replaceWithActualValue(loc2, this._paramList);
                loc1.list = this.getObjectList(loc2);
            }
            return loc1;
        }

        internal function getObjectList(arg1:String):Object
        {
            var loc5:*=null;
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=new Object();
            var loc4:*=0;
            while (loc4 < loc2) 
            {
                loc5 = loc1[loc4].split("=^=");
                loc3[loc5[0]] = unescape(loc5[1]);
                ++loc4;
            }
            return loc3;
        }

        internal var _sessionData:Object;

        internal var _configData:XMLList;

        internal var _paramList:Object;

        internal var _autoShowLogin:Boolean;

        internal var _openAppAfterLogin:String;
    }
}


//            class IExternalLauncher
package mgs.aurora.modules.core.externalLauncher 
{
    import flash.utils.*;
    
    public interface IExternalLauncher
    {
        function setConfigData(arg1:XMLList):void;

        function setSessionData(arg1:Object):void;

        function launchBank():void;

        function launchQuickBank():void;

        function launchOLR(arg1:String):void;

        function launchMigrate():void;

        function launchBrandMigration():void;

        function launchOperatorPage():void;

        function launchMyAccount():void;

        function launchForgotPassword(arg1:String):void;

        function launchFunBonusTermsConditions():void;

        function launchFunBonusTutorial(arg1:String):void;

        function launchChat(arg1:Object):void;

        function launchHelp(arg1:String=""):void;

        function launchExternalGame(arg1:String, arg2:String):void;

        function launchReturnUrl(arg1:String):void;

        function launchAliasActivation(arg1:String):void;

        function launchAvatarUpload():void;

        function launchFromFrameIconID(arg1:String):void;

        function launchFanfair(arg1:Object):void;

        function launchOther(arg1:Object):void;

        function launchOtherInternalSite(arg1:XMLList):void;

        function launchCustomPlayForReal():void;

        function closeWindow():void;

        function setProperties(arg1:Object):void;

        function getWindowParameters():flash.utils.Dictionary;

        function getLaunchDetails(arg1:uint):flash.utils.Dictionary;

        function isWebAppValid(arg1:String):Boolean;
    }
}


//          package model
//            package api
//              package banking
//                class BalanceDisplay
package mgs.aurora.modules.core.model.api.banking 
{
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.interfaces.banking.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class BalanceDisplay extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.banking.IBalanceDisplay
    {
        public function BalanceDisplay()
        {
            super();
            this._displayType = mgs.aurora.api.enums.BalanceDisplayType.CREDITS;
            return;
        }

        public function get betValue():Number
        {
            return this._betValue;
        }

        public function set betValue(arg1:Number):void
        {
            if (arg1 == this._betValue) 
            {
                Debugger.trace("Change \"bet\" value warning : The \"bet\" value is already set to " + arg1, "API - Banking Display", null, 16711680);
            }
            else 
            {
                if (isNaN(this._betValue)) 
                {
                    Debugger.trace("Change \"bet\" value to " + arg1, "API - Banking Display");
                }
                else 
                {
                    Debugger.trace("Change \"bet\" value from " + this._betValue + " to " + arg1, "API - Banking Display");
                }
                this._betValue = arg1;
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_BET_VALUE));
            }
            return;
        }

        public function get coinsBalance():Number
        {
            return this._coinsBalance;
        }

        public function get coinSize():uint
        {
            return this._coinSize;
        }

        public function set coinSize(arg1:uint):void
        {
            if (arg1 == this._coinSize) 
            {
                Debugger.trace("Change coin size warning : The coin size is already set to " + arg1, "API - Banking Display", null, 16711680);
            }
            else 
            {
                Debugger.trace("Change coin size from " + this._coinSize + " to " + arg1, "API - Banking Display");
                this._coinSize = arg1;
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_COINSIZE_VALUE));
            }
            return;
        }

        public function get displayType():int
        {
            return this._displayType;
        }

        public function set displayType(arg1:int):void
        {
            if (arg1 == this._displayType) 
            {
                Debugger.trace("Change display type warning : The display type is already set to " + this.getDisplayTypeString(arg1), "API - Banking Display", null, 16711680);
            }
            else 
            {
                Debugger.trace("Change display type from " + this.getDisplayTypeString(this._displayType) + " to " + this.getDisplayTypeString(arg1), "API - Banking Display");
                this._displayType = arg1;
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_DISPLAYTYPE));
            }
            return;
        }

        internal function getDisplayTypeString(arg1:int):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.enums.BalanceDisplayType.COINS:
                {
                    loc1 = "\"Coins\"";
                    break;
                }
                case mgs.aurora.api.enums.BalanceDisplayType.CREDITS:
                {
                    loc1 = "\"Credits\"";
                    break;
                }
                case mgs.aurora.api.enums.BalanceDisplayType.CURRENCY:
                {
                    loc1 = "\"Currency\"";
                    break;
                }
            }
            return loc1;
        }

        public function get winValue():Number
        {
            return this._winValue;
        }

        public function set winValue(arg1:Number):void
        {
            if (arg1 == this._winValue) 
            {
                Debugger.trace("Change \"win\" value warning : The \"win\" value is already set to " + arg1, "API - Banking Display", null, 16711680);
            }
            else 
            {
                if (isNaN(this._winValue)) 
                {
                    Debugger.trace("Change \"win\" value to " + arg1, "API - Banking Display");
                }
                else 
                {
                    Debugger.trace("Change \"win\" value from " + this._winValue + " to " + arg1, "API - Banking Display");
                }
                this._winValue = arg1;
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_WIN_VALUE));
            }
            return;
        }

        public function getCreditsDisplayText(arg1:Number, arg2:Boolean=false, arg3:String=null, arg4:String=null):String
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(mgs.aurora.modules.core.utils.PureMVCUtility.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.creditsFormat;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(mgs.aurora.modules.core.utils.PureMVCUtility.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=arg3 != null ? arg3 : loc1.@separatorTM;
            var loc4:*=arg4 != null ? arg4 : loc1.@separatorF;
            var loc5:*=arg3 == null && arg4 == null ? int(loc1.@useTMSeparator) == 1 : arg2;
            var loc6:*=mgs.aurora.common.utilities.BalanceUtils.convertToCredits(arg1, loc5, loc3, loc4);
            Debugger.trace("getCreditsDisplayText (" + arg1 + (loc5 ? ", \'Show Thousands Seperator\'" : "") + (loc3 == null ? loc5 ? ", \",\"" : ", \"\"" : ", \"" + loc3 + "\"") + (loc4 == null ? ", \".\"" : ", \"" + loc4 + "\"") + ") - [" + loc6 + "]", "API - Banking Display");
            return loc6;
        }

        public function formatToCurrency(arg1:Number, arg2:int=0, arg3:String=null, arg4:Boolean=false, arg5:String=null):String
        {
            var loc1:*=this._currencyProxy.formatToCurrency(arg1, arg2, arg3, arg4, arg5);
            Debugger.trace("formatToCurrency (" + arg1 + ", " + this.getFormatTypeString(arg2) + (arg3 == null ? "" : ", " + arg3) + (arg4 ? ", \'Only Shortlist Currency\'" : "") + (arg5 == null ? "" : ", \"" + arg5 + "\"") + ") - [" + loc1 + "]", "API - Banking Display");
            return loc1;
        }

        public function getCurrencyDisplay(arg1:int=0, arg2:String=null, arg3:Boolean=false):String
        {
            var loc1:*=this._currencyProxy.getCurrencyDisplay(arg1, arg2, arg3);
            Debugger.trace("getCurrency (" + this.getFormatTypeString(arg1) + (arg2 == null ? "" : ", " + arg2) + (arg3 ? ", \'Only Shortlist Currency\'" : "") + ") - [" + loc1 + "]", "API - Banking Display");
            return loc1;
        }

        internal function getFormatTypeString(arg1:int):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.enums.CurrencyFormat.FULL:
                {
                    loc1 = "\'Full Display\'";
                    break;
                }
                case mgs.aurora.api.enums.CurrencyFormat.SYMBOL:
                {
                    loc1 = "\'Currency Symbol\'";
                    break;
                }
                case mgs.aurora.api.enums.CurrencyFormat.FULL_GENERIC:
                {
                    loc1 = "\'Generic Full Display\'";
                    break;
                }
                case mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC:
                {
                    loc1 = "\'Generic Currency Symbol\'";
                    break;
                }
            }
            return loc1;
        }

        public function setCurrencyProxy(arg1:mgs.aurora.modules.core.model.CurrenciesProxy):void
        {
            this._currencyProxy = arg1;
            return;
        }

        public function getCurrencyISO():String
        {
            Debugger.trace("getCurrencyISO - [" + this._currencyProxy.currencyISO + "]", "API - Banking Display");
            return this._currencyProxy.currencyISO;
        }

        public function setCurrencyISO(arg1:String):Boolean
        {
            var loc1:*=this._currencyProxy.setCurrencyDisplay(arg1);
            Debugger.trace("getCurrency (" + arg1 + ") - [" + loc1 + "]", "API - Banking Display");
            return loc1;
        }

        public function formatCoinsDisplay(arg1:Number):String
        {
            var loc1:*=mgs.aurora.common.utilities.BalanceUtils.formatCoinsDisplay(arg1);
            Debugger.trace("formatNumberDisplay (" + arg1 + ") - [" + loc1 + "]", "MANDY");
            return loc1;
        }

        public function formatUCSChipsSize(arg1:Number):String
        {
            var loc1:*=this.getCreditsDisplayText(arg1, false, "", ".");
            var loc2:*=loc1.split(".");
            return loc2[1] != "00" ? loc1 : loc2[0];
        }

        internal var _betValue:Number;

        internal var _coinsBalance:Number;

        internal var _coinSize:uint;

        internal var _displayType:int;

        internal var _winValue:Number;

        internal var _currencyProxy:mgs.aurora.modules.core.model.CurrenciesProxy;
    }
}


//                class Banking
package mgs.aurora.modules.core.model.api.banking 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.banking.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.events.api.*;
    
    public class Banking extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.IBanking
    {
        public function Banking()
        {
            super();
            this._balance = 0;
            this._tempBalance = 0;
            this._display = new mgs.aurora.modules.core.model.api.banking.BalanceDisplay();
            return;
        }

        public function get balance():Number
        {
            Debugger.trace("Get balance - [" + this._balance + "]", "API - Banking");
            return this._balance;
        }

        public function set balance(arg1:Number):void
        {
            this._gameCallBalanceChanged = true;
            if (!(this._balance == arg1) || !(this._isCountUp == false)) 
            {
                this._isCountUp = false;
                this._tempBalance = arg1;
                this._balanceChanged = true;
                Debugger.trace("Set balance (" + arg1 + ")", "API - Banking");
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BALANCE));
            }
            else 
            {
                Debugger.trace("Set balance (" + arg1 + "). No change in system balance", "API - Banking");
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BANALCE_NOTIFIER));
            }
            return;
        }

        public function get countUpBalance():Number
        {
            Debugger.trace("Get countUpBalance - [" + this._balance + "]", "API - Banking");
            return this._balance;
        }

        public function set countUpBalance(arg1:Number):void
        {
            this._isCountUp = true;
            if (this._balance == arg1) 
            {
                Debugger.trace("Set CountUpBalance (" + arg1 + "). No change in system balance", "API - Banking");
            }
            else 
            {
                this._tempBalance = arg1;
                this._balanceChanged = true;
                Debugger.trace("Set CountUpBalance (" + arg1 + ")", "API - Banking");
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_COUNTUP_BALANCE));
            }
            return;
        }

        public function addToBalance(arg1:Number):void
        {
            Debugger.trace("Add to balance (" + arg1 + ")", "API - Banking");
            this.balance = this.balance + arg1;
            return;
        }

        public function subtractFromBalance(arg1:Number):void
        {
            Debugger.trace("Subtract from balance (" + arg1 + ")", "API - Banking");
            this.balance = this.balance - arg1;
            return;
        }

        public function get display():mgs.aurora.api.interfaces.banking.IBalanceDisplay
        {
            return this._display;
        }

        public function getCurrencySymbol(arg1:String):String
        {
            return this._display.getCurrencyDisplay(mgs.aurora.api.enums.CurrencyFormat.SYMBOL, arg1, false);
        }

        public function launch():void
        {
            Debugger.trace("Launch banking", "API - Banking");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.LAUNCH));
            return;
        }

        public function updateBalance():void
        {
            Debugger.trace("Do refresh balance", "API - Banking");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.GET_HOST_BALANCE));
            return;
        }

        public function balanceUpdate(arg1:Number):void
        {
            if (this._balance != arg1) 
            {
                this._gameCallBalanceChanged = false;
                this._balance = arg1;
                if (this._balanceChanged) 
                {
                    this._balanceChanged = false;
                    Debugger.trace("Balance changed by game - [" + this._balance + "]", "API EVENT - Banking");
                    dispatchEvent(new mgs.aurora.api.events.ApiBankingEvent(mgs.aurora.api.events.ApiBankingEvent.BALANCE_CHANGED_BY_GAME));
                }
                else 
                {
                    Debugger.trace("Balance changed by system - [" + this._balance + "]", "API EVENT - Banking");
                    dispatchEvent(new mgs.aurora.api.events.ApiBankingEvent(mgs.aurora.api.events.ApiBankingEvent.BALANCE_CHANGED_BY_SYSTEM));
                }
                Debugger.trace("Balance changed - [" + this._balance + "]", "API EVENT - Banking");
                this.dispatchEvent(new mgs.aurora.api.events.ApiBankingEvent(mgs.aurora.api.events.ApiBankingEvent.BALANCE_CHANGE));
            }
            return;
        }

        public function getTempBalance():Number
        {
            return this._tempBalance;
        }

        public function get isAvailable():Boolean
        {
            Debugger.trace("Is banking available - (" + this._isAvailable + ")", "API - Banking");
            return this._isAvailable;
        }

        public function setBankingAvailable(arg1:Boolean):void
        {
            this._isAvailable = arg1;
            return;
        }

        public function insufficientFunds():void
        {
            Debugger.trace("Insufficient Funds", "API - Banking");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.INSUFFICIENT_FUNDS));
            return;
        }

        public function customInsufficientFunds(arg1:String=""):void
        {
            Debugger.trace("Custon Insufficient Funds : " + arg1, "API - Banking");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.BankingEvent(mgs.aurora.modules.core.events.api.BankingEvent.CUSTOM_INSUFFICIENT_FUNDS, arg1));
            return;
        }

        public override function dispose():void
        {
            removeAllEventListeners();
            return;
        }

        internal var _balance:Number;

        internal var _tempBalance:Number;

        internal var _display:mgs.aurora.modules.core.model.api.banking.BalanceDisplay;

        internal var _isAvailable:Boolean;

        internal var _balanceChanged:Boolean=false;

        internal var _isCountUp:Boolean=false;

        internal var _gameCallBalanceChanged:Boolean=false;
    }
}


//              package branding
//                class Branding
package mgs.aurora.modules.core.model.api.branding 
{
    import mgs.aurora.api.interfaces.*;
    
    public class Branding extends Object implements mgs.aurora.api.interfaces.IBranding
    {
        public function Branding(arg1:Boolean)
        {
            super();
            this._ignoreModuleBadge = arg1;
            return;
        }

        public function set globalBadge(arg1:int):void
        {
            this._globalBadge = arg1;
            return;
        }

        public function set moduleBadge(arg1:int):void
        {
            this._moduleBadge = arg1;
            return;
        }

        public function get engineBadge():int
        {
            if (this._ignoreModuleBadge) 
            {
                Debugger.trace("Engine Badge (system setting) - [" + this._globalBadge + "]", "API - Branding");
                return this._globalBadge;
            }
            Debugger.trace("Engine Badge (gamelist setting) - [" + this._moduleBadge + "]", "API - Branding");
            return this._moduleBadge;
        }

        internal var _ignoreModuleBadge:Boolean;

        internal var _globalBadge:int;

        internal var _moduleBadge:int;
    }
}


//              package dialogues
//                package controls
//                  class Button
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class Button extends mgs.aurora.modules.core.model.api.dialogues.controls.Control implements mgs.aurora.api.interfaces.dialogues.controls.IButton
    {
        public function Button(arg1:mgs.aurora.common.interfaces.controls.IButton)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControl);
            this._button = arg1;
            return;
        }

        public function get tabIndex():int
        {
            return this._button.tabIndex;
        }

        public function set tabIndex(arg1:int):void
        {
            this._button.tabIndex = arg1;
            return;
        }

        public function get textField():mgs.aurora.api.interfaces.dialogues.controls.IText
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.Text(this._button.textField);
        }

        public function setState(arg1:String):void
        {
            this._button.setState(arg1);
            return;
        }

        internal var _button:mgs.aurora.common.interfaces.controls.IButton;

        internal var _eventDispatcher:flash.events.IEventDispatcher;
    }
}


//                  class ButtonList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class ButtonList extends mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList implements mgs.aurora.api.interfaces.dialogues.controls.IButtonList
    {
        public function ButtonList(arg1:mgs.aurora.common.interfaces.controls.IButtonList)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControlList);
            this._buttonList = arg1;
            return;
        }

        public function getButton(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IButton
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.Button(this._buttonList.getButton(arg1));
        }

        public function hasButtons(arg1:String):Boolean
        {
            return this._buttonList.hasButtons(arg1);
        }

        internal var _buttonList:mgs.aurora.common.interfaces.controls.IButtonList;
    }
}


//                  class CheckBox
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class CheckBox extends mgs.aurora.modules.core.model.api.dialogues.controls.Button implements mgs.aurora.api.interfaces.dialogues.controls.ICheckBox
    {
        public function CheckBox(arg1:mgs.aurora.common.interfaces.controls.ICheckBox)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IButton);
            this._checkBox = arg1;
            return;
        }

        public function get checked():Boolean
        {
            return this._checkBox.checked;
        }

        public function set checked(arg1:Boolean):void
        {
            this._checkBox.checked = arg1;
            return;
        }

        internal var _checkBox:mgs.aurora.common.interfaces.controls.ICheckBox;
    }
}


//                  class CheckBoxList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class CheckBoxList extends mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList implements mgs.aurora.api.interfaces.dialogues.controls.ICheckBoxList
    {
        public function CheckBoxList(arg1:mgs.aurora.common.interfaces.controls.ICheckBoxList)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControlList);
            this._checkBoxList = arg1;
            return;
        }

        public function getCheckBox(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.ICheckBox
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.CheckBox(this._checkBoxList.getCheckBox(arg1));
        }

        public function hasCheckBox(arg1:String):Boolean
        {
            return this._checkBoxList.hasCheckBox(arg1);
        }

        internal var _checkBoxList:mgs.aurora.common.interfaces.controls.ICheckBoxList;
    }
}


//                  class ComboBox
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class ComboBox extends mgs.aurora.modules.core.model.api.dialogues.controls.Control implements mgs.aurora.api.interfaces.dialogues.controls.IComboBox
    {
        public function ComboBox(arg1:mgs.aurora.common.interfaces.controls.IComboBox)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControl);
            this._comboBox = arg1;
            return;
        }

        public function get editable():Boolean
        {
            return this._comboBox.editable;
        }

        public function set editable(arg1:Boolean):void
        {
            this._comboBox.editable = arg1;
            return;
        }

        public function get selectedIndex():int
        {
            return this._comboBox.selectedIndex;
        }

        public function set selectedIndex(arg1:int):void
        {
            this._comboBox.selectedIndex = arg1;
            return;
        }

        public function get selectedItem():Object
        {
            return this._comboBox.selectedItem;
        }

        public function get text():String
        {
            return this._comboBox.text;
        }

        public function set text(arg1:String):void
        {
            this._comboBox.text = arg1;
            return;
        }

        public function get textField():mgs.aurora.api.interfaces.dialogues.controls.IInputText
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.InputText(this._comboBox.textField);
        }

        public function addItem(arg1:Object):void
        {
            this._comboBox.addItem(arg1);
            return;
        }

        public function addItemAt(arg1:Object, arg2:uint):void
        {
            this._comboBox.addItemAt(arg1, arg2);
            return;
        }

        public function close():void
        {
            this._comboBox.close();
            return;
        }

        public function getItemAt(arg1:uint):Object
        {
            return this._comboBox.getItemAt(arg1);
        }

        public function open():void
        {
            this._comboBox.open();
            return;
        }

        public function removeAll():void
        {
            this._comboBox.removeAll();
            return;
        }

        public function removeItem(arg1:Object):Object
        {
            return this._comboBox.removeItem(arg1);
        }

        public function removeItemAt(arg1:uint):Object
        {
            return this._comboBox.removeItemAt(arg1);
        }

        public function replaceItemAt(arg1:Object, arg2:uint):Object
        {
            return this._comboBox.replaceItemAt(arg1, arg2);
        }

        public function get numItems():int
        {
            return this._comboBox.numItems;
        }

        internal var _comboBox:mgs.aurora.common.interfaces.controls.IComboBox;
    }
}


//                  class ComboBoxList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class ComboBoxList extends mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList implements mgs.aurora.api.interfaces.dialogues.controls.IComboBoxList
    {
        public function ComboBoxList(arg1:mgs.aurora.common.interfaces.controls.IComboBoxList)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControlList);
            this._comboBoxList = arg1;
            return;
        }

        public function getComboBox(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IComboBox
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.ComboBox(this._comboBoxList.getComboBox(arg1));
        }

        public function hasComboBox(arg1:String):Boolean
        {
            return this._comboBoxList.hasComboBox(arg1);
        }

        internal var _comboBoxList:mgs.aurora.common.interfaces.controls.IComboBoxList;
    }
}


//                  class Control
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.enums.controls.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class Control extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.dialogues.controls.IControl
    {
        public function Control(arg1:mgs.aurora.common.interfaces.controls.IControl)
        {
            super();
            this._control = arg1;
            return;
        }

        internal function makeControl(arg1:mgs.aurora.common.interfaces.controls.IControl):*
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.common.enums.controls.ControlType.BUTTON:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Button(arg1 as mgs.aurora.common.interfaces.controls.IButton);
                }
                case mgs.aurora.common.enums.controls.ControlType.CHECKBOX:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.CheckBox(arg1 as mgs.aurora.common.interfaces.controls.ICheckBox);
                }
                case mgs.aurora.common.enums.controls.ControlType.COMBOBOX:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.ComboBox(arg1 as mgs.aurora.common.interfaces.controls.IComboBox);
                }
                case mgs.aurora.common.enums.controls.ControlType.GRAPHIC:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Graphic(arg1 as mgs.aurora.common.interfaces.controls.IGraphic);
                }
                case mgs.aurora.common.enums.controls.ControlType.INPUTTEXT:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.InputText(arg1 as mgs.aurora.common.interfaces.controls.IInputText);
                }
                case mgs.aurora.common.enums.controls.ControlType.RADIOBUTTON:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.RadioButton(arg1 as mgs.aurora.common.interfaces.controls.IRadioButton);
                }
                case mgs.aurora.common.enums.controls.ControlType.TITLE:
                case mgs.aurora.common.enums.controls.ControlType.TEXT:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Text(arg1 as mgs.aurora.common.interfaces.controls.IText);
                }
                default:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Control(arg1);
                }
            }
        }

        public function get id():String
        {
            return this._control.id;
        }

        public function get type():String
        {
            return this._control.type;
        }

        public function get hitTest():Boolean
        {
            return this._control.hitTest;
        }

        public function get interactiveObject():flash.display.InteractiveObject
        {
            return this._control.interactiveObject;
        }

        public function get x():Number
        {
            return this._control.x;
        }

        public function set x(arg1:Number):void
        {
            this._control.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._control.y;
        }

        public function set y(arg1:Number):void
        {
            this._control.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._control.width;
        }

        public function set width(arg1:Number):void
        {
            this._control.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._control.height;
        }

        public function set height(arg1:Number):void
        {
            this._control.height = arg1;
            return;
        }

        public function get enabled():Boolean
        {
            return this._control.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._control.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._control.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._control.visible = arg1;
            return;
        }

        public function get filters():Array
        {
            return this._control.filters;
        }

        public function set filters(arg1:Array):void
        {
            this._control.filters = arg1;
            return;
        }

        public function get alpha():Number
        {
            return this._control.alpha;
        }

        public function set alpha(arg1:Number):void
        {
            this._control.alpha = arg1;
            return;
        }

        public function move(arg1:Number, arg2:Number):void
        {
            this._control.x = arg1;
            this._control.y = arg2;
            return;
        }

        public function resize(arg1:Number, arg2:Number):void
        {
            this._control.width = arg1;
            this._control.height = arg2;
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._control.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this._control.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this._control.removeFromContainer();
            return;
        }

        public function dispose():void
        {
            this._control.dispose();
            return;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            super.addEventListener(arg1, arg2, arg3, arg4, arg5);
            var loc1:*;
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Keyboard(arg1)) != "") 
            {
                this._control.addEventListener(loc1, this.onKeyBoardEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Mouse(arg1)) != "") 
            {
                this._control.addEventListener(loc1, this.onMouseEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Selection(arg1)) != "") 
            {
                this._control.addEventListener(loc1, this.onSelectionEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Text(arg1)) != "") 
            {
                this._control.addEventListener(loc1, this.onTextEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Focus(arg1)) != "") 
            {
                this._control.addEventListener(loc1, this.onFocusEvent, arg3, arg4, arg5);
                return;
            }
            return;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return super.dispatchEvent(arg1);
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return super.hasEventListener(arg1);
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            super.removeEventListener(arg1, arg2, arg3);
            var loc1:*;
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Keyboard(arg1)) != "") 
            {
                this._control.removeEventListener(loc1, this.onKeyBoardEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Mouse(arg1)) != "") 
            {
                this._control.removeEventListener(loc1, this.onMouseEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Selection(arg1)) != "") 
            {
                this._control.removeEventListener(loc1, this.onSelectionEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Text(arg1)) != "") 
            {
                this._control.removeEventListener(loc1, this.onTextEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Focus(arg1)) != "") 
            {
                this._control.removeEventListener(loc1, this.onFocusEvent, arg3);
                return;
            }
            return;
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return this._control.willTrigger(arg1);
        }

        internal function onFocusEvent(arg1:mgs.aurora.common.events.dialogues.DialogueFocusEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueFocusEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Focus(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.originalEvent, arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onTextEvent(arg1:mgs.aurora.common.events.dialogues.DialoguesTextEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueTextEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Text(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onSelectionEvent(arg1:mgs.aurora.common.events.dialogues.DialogueSelectionEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueSelectionEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Selection(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onMouseEvent(arg1:mgs.aurora.common.events.dialogues.DialogueMouseEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueMouseEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Mouse(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.originalEvent, arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onKeyBoardEvent(arg1:mgs.aurora.common.events.dialogues.DialogueKeyboardEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueKeyboardEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Keyboard(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.originalEvent, arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal var _control:mgs.aurora.common.interfaces.controls.IControl;
    }
}


//                  class ControlsList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.enums.controls.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ControlsList extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.dialogues.controls.IControlList
    {
        public function ControlsList(arg1:mgs.aurora.common.interfaces.controls.IControlList)
        {
            super();
            this._controlsList = arg1;
            return;
        }

        public function enable(arg1:String):void
        {
            this._controlsList.enableControls(arg1);
            return;
        }

        public function enableAll():void
        {
            this._controlsList.enableAllControls();
            return;
        }

        public function disable(arg1:String):void
        {
            this._controlsList.disableControls(arg1);
            return;
        }

        public function disableAll():void
        {
            this._controlsList.disableAllControls();
            return;
        }

        public function show(arg1:String):void
        {
            this._controlsList.showControls(arg1);
            return;
        }

        public function showAll():void
        {
            this._controlsList.showAllControls();
            return;
        }

        public function hide(arg1:String):void
        {
            this._controlsList.hideControls(arg1);
            return;
        }

        public function hideAll():void
        {
            this._controlsList.hideAllControls();
            return;
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IControl
        {
            return this.makeControl(this._controlsList.getControl(arg1));
        }

        public function remove(arg1:String):void
        {
            mgs.aurora.common.interfaces.controls.IAbstractControlList(this._controlsList).remove(arg1);
            return;
        }

        public function removeAll():void
        {
            mgs.aurora.common.interfaces.controls.IAbstractControlList(this._controlsList).removeAll();
            return;
        }

        public function hasControls(arg1:String):Boolean
        {
            return this._controlsList.hasControls(arg1);
        }

        public function get enabledList():String
        {
            return this._controlsList.enabledList;
        }

        public function get disabledList():String
        {
            return this._controlsList.disabledList;
        }

        public function get visibleList():String
        {
            return this._controlsList.visibleList;
        }

        public function get hiddenList():String
        {
            return this._controlsList.hiddenList;
        }

        public function get list():String
        {
            return mgs.aurora.common.interfaces.controls.IAbstractControlList(this._controlsList).list;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            super.addEventListener(arg1, arg2, arg3, arg4, arg5);
            var loc1:*;
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Keyboard(arg1)) != "") 
            {
                this._controlsList.addEventListener(loc1, this.onKeyBoardEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Mouse(arg1)) != "") 
            {
                this._controlsList.addEventListener(loc1, this.onMouseEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Selection(arg1)) != "") 
            {
                this._controlsList.addEventListener(loc1, this.onSelectionEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Text(arg1)) != "") 
            {
                this._controlsList.addEventListener(loc1, this.onTextEvent, arg3, arg4, arg5);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Focus(arg1)) != "") 
            {
                this._controlsList.addEventListener(loc1, this.onFocusEvent, arg3, arg4, arg5);
                return;
            }
            return;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return super.dispatchEvent(arg1);
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return super.hasEventListener(arg1);
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            super.removeEventListener(arg1, arg2, arg3);
            var loc1:*;
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Keyboard(arg1)) != "") 
            {
                this._controlsList.removeEventListener(loc1, this.onKeyBoardEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Mouse(arg1)) != "") 
            {
                this._controlsList.removeEventListener(loc1, this.onMouseEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Selection(arg1)) != "") 
            {
                this._controlsList.removeEventListener(loc1, this.onSelectionEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Text(arg1)) != "") 
            {
                this._controlsList.removeEventListener(loc1, this.onTextEvent, arg3);
                return;
            }
            if ((loc1 = mgs.aurora.modules.core.utils.CoreEventUtility.apiEventTypeToSystemDialogueEventType_Focus(arg1)) != "") 
            {
                this._controlsList.removeEventListener(loc1, this.onFocusEvent, arg3);
                return;
            }
            return;
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return this._controlsList.willTrigger(arg1);
        }

        internal function onFocusEvent(arg1:mgs.aurora.common.events.dialogues.DialogueFocusEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueFocusEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Focus(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.originalEvent, arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onTextEvent(arg1:mgs.aurora.common.events.dialogues.DialoguesTextEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueTextEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Text(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onSelectionEvent(arg1:mgs.aurora.common.events.dialogues.DialogueSelectionEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueSelectionEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Selection(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onMouseEvent(arg1:mgs.aurora.common.events.dialogues.DialogueMouseEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueMouseEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Mouse(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.originalEvent, arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onKeyBoardEvent(arg1:mgs.aurora.common.events.dialogues.DialogueKeyboardEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueKeyboardEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemEventTypeToApiDialogueEventType_Keyboard(arg1.type), arg1.diagId, arg1.diagType, this.makeControl(arg1.control), arg1.originalEvent, arg1.bubbles, arg1.cancelable);
            this.dispatchEvent(loc1);
            return;
        }

        internal function makeControl(arg1:mgs.aurora.common.interfaces.controls.IControl):*
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.common.enums.controls.ControlType.BUTTON:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Button(arg1 as mgs.aurora.common.interfaces.controls.IButton);
                }
                case mgs.aurora.common.enums.controls.ControlType.CHECKBOX:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.CheckBox(arg1 as mgs.aurora.common.interfaces.controls.ICheckBox);
                }
                case mgs.aurora.common.enums.controls.ControlType.COMBOBOX:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.ComboBox(arg1 as mgs.aurora.common.interfaces.controls.IComboBox);
                }
                case mgs.aurora.common.enums.controls.ControlType.GRAPHIC:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Graphic(arg1 as mgs.aurora.common.interfaces.controls.IGraphic);
                }
                case mgs.aurora.common.enums.controls.ControlType.INPUTTEXT:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.InputText(arg1 as mgs.aurora.common.interfaces.controls.IInputText);
                }
                case mgs.aurora.common.enums.controls.ControlType.RADIOBUTTON:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.RadioButton(arg1 as mgs.aurora.common.interfaces.controls.IRadioButton);
                }
                case mgs.aurora.common.enums.controls.ControlType.TITLE:
                case mgs.aurora.common.enums.controls.ControlType.TEXT:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Text(arg1 as mgs.aurora.common.interfaces.controls.IText);
                }
                default:
                {
                    return new mgs.aurora.modules.core.model.api.dialogues.controls.Control(arg1);
                }
            }
        }

        internal var _controlsList:mgs.aurora.common.interfaces.controls.IControlList;
    }
}


//                  class Graphic
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class Graphic extends mgs.aurora.modules.core.model.api.dialogues.controls.Control implements mgs.aurora.api.interfaces.dialogues.controls.IGraphic
    {
        public function Graphic(arg1:mgs.aurora.common.interfaces.controls.IGraphic)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControl);
            this._graphic = arg1;
            return;
        }

        public function get scaleX():Number
        {
            return this._graphic.scaleX;
        }

        public function set scaleX(arg1:Number):void
        {
            this._graphic.scaleX = arg1;
            return;
        }

        public function get scaleY():Number
        {
            return this._graphic.scaleY;
        }

        public function set scaleY(arg1:Number):void
        {
            this._graphic.scaleY = arg1;
            return;
        }

        internal var _graphic:mgs.aurora.common.interfaces.controls.IGraphic;
    }
}


//                  class GraphicsList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class GraphicsList extends mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList implements mgs.aurora.api.interfaces.dialogues.controls.IGraphicsList
    {
        public function GraphicsList(arg1:mgs.aurora.common.interfaces.controls.IGraphicsList)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControlList);
            this._graphicsList = arg1;
            return;
        }

        public function getGraphic(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.ITimelineGraphic
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.TimelineGraphic(this._graphicsList.getGraphic(arg1));
        }

        public function hasGraphic(arg1:String):Boolean
        {
            return this._graphicsList.hasGraphic(arg1);
        }

        internal var _graphicsList:mgs.aurora.common.interfaces.controls.IGraphicsList;
    }
}


//                  class InputText
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class InputText extends mgs.aurora.modules.core.model.api.dialogues.controls.Text implements mgs.aurora.api.interfaces.dialogues.controls.IInputText
    {
        public function InputText(arg1:mgs.aurora.common.interfaces.controls.IInputText)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IText);
            this._inputText = arg1;
            return;
        }

        public function setFocus():void
        {
            this._inputText.setFocus();
            return;
        }

        public function setSelection(arg1:int, arg2:int):void
        {
            this._inputText.setSelection(arg1, arg2);
            return;
        }

        public function get caretIndex():int
        {
            return this._inputText.caretIndex;
        }

        public function get selectionBeginIndex():int
        {
            return this._inputText.selectionBeginIndex;
        }

        public function get selectionEndIndex():int
        {
            return this._inputText.selectionEndIndex;
        }

        internal var _inputText:mgs.aurora.common.interfaces.controls.IInputText;
    }
}


//                  class RadioButton
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class RadioButton extends mgs.aurora.modules.core.model.api.dialogues.controls.Button implements mgs.aurora.api.interfaces.dialogues.controls.IRadioButton
    {
        public function RadioButton(arg1:mgs.aurora.common.interfaces.controls.IRadioButton)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IButton);
            this._radioButton = arg1;
            return;
        }

        public function get selected():Boolean
        {
            return this._radioButton.selected;
        }

        public function set selected(arg1:Boolean):void
        {
            this._radioButton.selected = arg1;
            return;
        }

        internal var _radioButton:mgs.aurora.common.interfaces.controls.IRadioButton;
    }
}


//                  class RadioButtonList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class RadioButtonList extends mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList implements mgs.aurora.api.interfaces.dialogues.controls.IRadioButtonList
    {
        public function RadioButtonList(arg1:mgs.aurora.common.interfaces.controls.IRadioButtonList)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControlList);
            this._radioButtonList = arg1;
            return;
        }

        public function getRadioButton(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IRadioButton
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.RadioButton(this._radioButtonList.getRadioButton(arg1));
        }

        public function hasRadioButtons(arg1:String):Boolean
        {
            return this._radioButtonList.hasRadioButtons(arg1);
        }

        internal var _radioButtonList:mgs.aurora.common.interfaces.controls.IRadioButtonList;
    }
}


//                  class Text
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import flash.text.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class Text extends mgs.aurora.modules.core.model.api.dialogues.controls.Control implements mgs.aurora.api.interfaces.dialogues.controls.IText
    {
        public function Text(arg1:mgs.aurora.common.interfaces.controls.IText)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControl);
            this._text = arg1;
            return;
        }

        public function get text():String
        {
            return this._text.text;
        }

        public function set text(arg1:String):void
        {
            this._text.text = arg1;
            return;
        }

        public function get defaultTextFormat():flash.text.TextFormat
        {
            return this._text.defaultTextFormat;
        }

        public function set defaultTextFormat(arg1:flash.text.TextFormat):void
        {
            this._text.defaultTextFormat = arg1;
            return;
        }

        public function get properties():mgs.aurora.api.interfaces.dialogues.controls.ITextFieldProperties
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.TextFieldProperties(this._text.properties);
        }

        public function getTextFormat(arg1:int=-1, arg2:int=-1):flash.text.TextFormat
        {
            return this._text.getTextFormat(arg1, arg2);
        }

        public function setTextFormat(arg1:flash.text.TextFormat, arg2:int=-1, arg3:int=-1):void
        {
            this._text.setTextFormat(arg1, arg2, arg3);
            return;
        }

        internal var _text:mgs.aurora.common.interfaces.controls.IText;
    }
}


//                  class TextFieldProperties
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class TextFieldProperties extends Object implements mgs.aurora.api.interfaces.dialogues.controls.ITextFieldProperties
    {
        public function TextFieldProperties(arg1:mgs.aurora.common.interfaces.controls.ITextFieldProperties)
        {
            super();
            this._textFieldProperties = arg1;
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._textFieldProperties.willTrigger(arg1);
        }

        public function get antiAliasType():String
        {
            return this._textFieldProperties.antiAliasType;
        }

        public function set antiAliasType(arg1:String):void
        {
            this._textFieldProperties.antiAliasType = arg1;
            return;
        }

        public function get background():Boolean
        {
            return this._textFieldProperties.background;
        }

        public function set background(arg1:Boolean):void
        {
            this._textFieldProperties.background = arg1;
            return;
        }

        public function get backgroundColor():uint
        {
            return this._textFieldProperties.backgroundColor;
        }

        public function set backgroundColor(arg1:uint):void
        {
            this._textFieldProperties.backgroundColor = arg1;
            return;
        }

        public function get border():Boolean
        {
            return this._textFieldProperties.border;
        }

        public function set border(arg1:Boolean):void
        {
            this._textFieldProperties.border = arg1;
            return;
        }

        public function get borderColor():uint
        {
            return this._textFieldProperties.borderColor;
        }

        public function set borderColor(arg1:uint):void
        {
            this._textFieldProperties.borderColor = arg1;
            return;
        }

        public function get displayAsPassword():Boolean
        {
            return this._textFieldProperties.displayAsPassword;
        }

        public function set displayAsPassword(arg1:Boolean):void
        {
            this._textFieldProperties.displayAsPassword = arg1;
            return;
        }

        public function get embedFonts():Boolean
        {
            return this._textFieldProperties.embedFonts;
        }

        public function set embedFonts(arg1:Boolean):void
        {
            this._textFieldProperties.embedFonts = arg1;
            return;
        }

        public function get gridFitType():String
        {
            return this._textFieldProperties.gridFitType;
        }

        public function set gridFitType(arg1:String):void
        {
            this._textFieldProperties.gridFitType = arg1;
            return;
        }

        public function get html():Boolean
        {
            return this._textFieldProperties.html;
        }

        public function set html(arg1:Boolean):void
        {
            this._textFieldProperties.html = arg1;
            return;
        }

        public function get maxChars():int
        {
            return this._textFieldProperties.maxChars;
        }

        public function set maxChars(arg1:int):void
        {
            this._textFieldProperties.maxChars = arg1;
            return;
        }

        public function get multiline():Boolean
        {
            return this._textFieldProperties.multiline;
        }

        public function set multiline(arg1:Boolean):void
        {
            this._textFieldProperties.multiline = arg1;
            return;
        }

        public function get restrict():String
        {
            return this._textFieldProperties.restrict;
        }

        public function set restrict(arg1:String):void
        {
            this._textFieldProperties.restrict = arg1;
            return;
        }

        public function get selectable():Boolean
        {
            return this._textFieldProperties.selectable;
        }

        public function set selectable(arg1:Boolean):void
        {
            this._textFieldProperties.selectable = arg1;
            return;
        }

        public function get sharpness():Number
        {
            return this._textFieldProperties.sharpness;
        }

        public function set sharpness(arg1:Number):void
        {
            this._textFieldProperties.sharpness = arg1;
            return;
        }

        public function get thickness():Number
        {
            return this._textFieldProperties.thickness;
        }

        public function set thickness(arg1:Number):void
        {
            this._textFieldProperties.thickness = arg1;
            return;
        }

        public function get type():String
        {
            return this._textFieldProperties.type;
        }

        public function set type(arg1:String):void
        {
            this._textFieldProperties.type = arg1;
            return;
        }

        public function get wordWrap():Boolean
        {
            return this._textFieldProperties.wordWrap;
        }

        public function set wordWrap(arg1:Boolean):void
        {
            this._textFieldProperties.wordWrap = arg1;
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._textFieldProperties.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._textFieldProperties.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._textFieldProperties.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._textFieldProperties.removeEventListener(arg1, arg2, arg3);
            return;
        }

        internal var _textFieldProperties:mgs.aurora.common.interfaces.controls.ITextFieldProperties;
    }
}


//                  class TextList
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class TextList extends mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList implements mgs.aurora.api.interfaces.dialogues.controls.ITextList
    {
        public function TextList(arg1:mgs.aurora.common.interfaces.controls.ITextList)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IControlList);
            this._textList = arg1;
            return;
        }

        public function getText(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IText
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.Text(this._textList.getText(arg1));
        }

        public function getInputText(arg1:String):mgs.aurora.api.interfaces.dialogues.controls.IInputText
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.InputText(this._textList.getInputText(arg1));
        }

        public function hasText(arg1:String):Boolean
        {
            return this._textList.hasText(arg1);
        }

        internal var _textList:mgs.aurora.common.interfaces.controls.ITextList;
    }
}


//                  class TimelineGraphic
package mgs.aurora.modules.core.model.api.dialogues.controls 
{
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    
    public class TimelineGraphic extends mgs.aurora.modules.core.model.api.dialogues.controls.Graphic implements mgs.aurora.api.interfaces.dialogues.controls.ITimelineGraphic
    {
        public function TimelineGraphic(arg1:mgs.aurora.common.interfaces.controls.ITimelineGraphic)
        {
            super(arg1 as mgs.aurora.common.interfaces.controls.IGraphic);
            this._timelineGraphic = arg1;
            return;
        }

        public function gotoAndStop(arg1:Object):void
        {
            this._timelineGraphic.gotoAndStop(arg1);
            return;
        }

        internal var _timelineGraphic:mgs.aurora.common.interfaces.controls.ITimelineGraphic;
    }
}


//                class Dialogue
package mgs.aurora.modules.core.model.api.dialogues 
{
    import mgs.aurora.api.interfaces.dialogues.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.modules.core.model.api.dialogues.controls.*;
    
    public class Dialogue extends Object implements mgs.aurora.api.interfaces.dialogues.IDialogue
    {
        public function Dialogue(arg1:mgs.aurora.common.interfaces.dialogues.IDialogue)
        {
            super();
            this._dialogue = arg1;
            return;
        }

        public function get buttons():mgs.aurora.api.interfaces.dialogues.controls.IButtonList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.ButtonList(this._dialogue.buttons);
        }

        public function get checkBoxes():mgs.aurora.api.interfaces.dialogues.controls.ICheckBoxList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.CheckBoxList(this._dialogue.checkBoxes);
        }

        public function get controls():mgs.aurora.api.interfaces.dialogues.controls.IControlList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.ControlsList(this._dialogue.controls);
        }

        public function get radioButtons():mgs.aurora.api.interfaces.dialogues.controls.IRadioButtonList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.RadioButtonList(this._dialogue.radioButtons);
        }

        public function get texts():mgs.aurora.api.interfaces.dialogues.controls.ITextList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.TextList(this._dialogue.texts);
        }

        public function get title():mgs.aurora.api.interfaces.dialogues.controls.IText
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.Text(this._dialogue.title);
        }

        public function get comboBoxes():mgs.aurora.api.interfaces.dialogues.controls.IComboBoxList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.ComboBoxList(this._dialogue.comboBoxes);
        }

        public function get graphics():mgs.aurora.api.interfaces.dialogues.controls.IGraphicsList
        {
            return new mgs.aurora.modules.core.model.api.dialogues.controls.GraphicsList(this._dialogue.graphics);
        }

        internal var _dialogue:mgs.aurora.common.interfaces.dialogues.IDialogue;
    }
}


//                class Dialogues
package mgs.aurora.modules.core.model.api.dialogues 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.dialogues.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.*;
    
    public class Dialogues extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.IDialogues
    {
        public function Dialogues(arg1:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler)
        {
            super();
            this._dialogueHandler = arg1;
            this._dialogueEvents = new flash.utils.Dictionary();
            return;
        }

        internal function apiTypeToSystemType(arg1:String):String
        {
            var loc1:*=arg1;
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiDialogueHandlerEvent.ALL_DIALOGUES_REMOVED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.ALL_DIALOGUES_REMOVED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_DISPLAYED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_DISPLAYED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_DISPLAYED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.OTHER_DIALOGUE_DISPLAYED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_REMOVED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.OTHER_DIALOGUE_REMOVED;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        internal function systemTypeToApiType(arg1:String):String
        {
            var loc1:*=arg1;
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.ALL_DIALOGUES_REMOVED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueHandlerEvent.ALL_DIALOGUES_REMOVED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_DISPLAYED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_DISPLAYED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.OTHER_DIALOGUE_DISPLAYED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_DISPLAYED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.OTHER_DIALOGUE_REMOVED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_REMOVED;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public function get art():flash.display.LoaderInfo
        {
            return this._dialogueHandler.art;
        }

        public function set art(arg1:flash.display.LoaderInfo):void
        {
            this._dialogueHandler.art = arg1;
            return;
        }

        public function get artLang():flash.display.LoaderInfo
        {
            return this._dialogueHandler.artLang;
        }

        public function set artLang(arg1:flash.display.LoaderInfo):void
        {
            this._dialogueHandler.artLang = arg1;
            return;
        }

        public function get displayedList():String
        {
            return this._dialogueHandler.displayedList;
        }

        public function get fonts():flash.display.LoaderInfo
        {
            return this._dialogueHandler.fonts;
        }

        public function set fonts(arg1:flash.display.LoaderInfo):void
        {
            this._dialogueHandler.fonts = arg1;
            return;
        }

        public function get globalNumDisplayed():int
        {
            return this._dialogueHandler.globalNumDisplayed;
        }

        public function get id():String
        {
            return this._dialogueHandler.id;
        }

        public function get layoutConfig():XML
        {
            return this._dialogueHandler.layoutConfig;
        }

        public function set layoutConfig(arg1:XML):void
        {
            this._dialogueHandler.layoutConfig = arg1;
            return;
        }

        public function get numDisplayed():int
        {
            return this._dialogueHandler.numDisplayed;
        }

        public function get uiConfig():XML
        {
            return this._dialogueHandler.uiConfig;
        }

        public function set uiConfig(arg1:XML):void
        {
            this._dialogueHandler.uiConfig = arg1;
            return;
        }

        public function create(arg1:String, arg2:String, arg3:flash.display.DisplayObjectContainer=null, arg4:XMLList=null, arg5:XMLList=null, arg6:flash.display.LoaderInfo=null, arg7:flash.display.LoaderInfo=null, arg8:flash.display.LoaderInfo=null):void
        {
            this._dialogueHandler.create(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            return;
        }

        public function dialogue(arg1:String):mgs.aurora.api.interfaces.dialogues.IDialogue
        {
            if (this._dialogueHandler.dialogue(arg1) == null) 
            {
                return null;
            }
            return new mgs.aurora.modules.core.model.api.dialogues.Dialogue(this._dialogueHandler.dialogue(arg1));
        }

        public function remove(arg1:String):void
        {
            this._dialogueHandler.remove(arg1);
            return;
        }

        public function removeAll():void
        {
            this._dialogueHandler.removeAll();
            return;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            super.addEventListener(arg1, arg2, arg3, arg4, arg5);
            this._dialogueHandler.addEventListener(this.apiTypeToSystemType(arg1), this.onDialogueHandlerEvent, arg3, arg4, arg5);
            return;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return super.dispatchEvent(arg1);
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return super.hasEventListener(arg1);
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            super.removeEventListener(arg1, arg2, arg3);
            this._dialogueHandler.removeEventListener(this.apiTypeToSystemType(arg1), this.onDialogueHandlerEvent, arg3);
            return;
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return this.willTrigger(arg1);
        }

        public function showfaderMessage(arg1:String, arg2:Number):void
        {
            var loc1:*=new Object();
            loc1.message = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(arg1);
            loc1.delay = arg2;
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.DialogueEvent(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_FADER_MESSAGE, loc1));
            return;
        }

        public function showStartupDialogue():void
        {
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.DialogueEvent(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_STARTUP_DIALOGUE));
            return;
        }

        public function __getExcludedDialogueList():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            return loc2.casino.dialogs.@excludedsystemDiag.toXMLString();
        }

        public function __showModalBlocker(arg1:Boolean):void
        {
            if (arg1) 
            {
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.DialogueEvent(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_MODAL));
            }
            else 
            {
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.DialogueEvent(mgs.aurora.modules.core.events.api.DialogueEvent.HIDE_MODAL));
            }
            return;
        }

        internal function onDialogueHandlerEvent(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            var loc1:*=new mgs.aurora.api.events.ApiDialogueHandlerEvent(this.systemTypeToApiType(arg1.type), arg1.id, arg1.diagId, arg1.diagType);
            this.dispatchEvent(loc1);
            return;
        }

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        internal var _dialogueEvents:flash.utils.Dictionary;
    }
}


//              package frames
//                package controls
//                  package buttons
//                    class ApiButtonControlToFBButtonControl
package mgs.aurora.modules.core.model.api.frames.controls.buttons 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ApiButtonControlToFBButtonControl extends Object implements flash.events.IEventDispatcher, mgs.aurora.common.interfaces.controls.ICustomControl
    {
        public function ApiButtonControlToFBButtonControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl)
        {
            super();
            this._apiCustomControl = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._controlDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg1, true);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function get hitTest():Boolean
        {
            return false;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._apiCustomControl.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this._apiCustomControl.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this._apiCustomControl.removeFromContainer();
            return;
        }

        public function get x():Number
        {
            return this._apiCustomControl.x;
        }

        public function set x(arg1:Number):void
        {
            this._apiCustomControl.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._apiCustomControl.y;
        }

        public function set y(arg1:Number):void
        {
            this._apiCustomControl.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._apiCustomControl.width;
        }

        public function set width(arg1:Number):void
        {
            this._apiCustomControl.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._apiCustomControl.height;
        }

        public function set height(arg1:Number):void
        {
            this._apiCustomControl.height = arg1;
            return;
        }

        public function get locked():Boolean
        {
            return this._apiCustomControl.locked;
        }

        public function set locked(arg1:Boolean):void
        {
            this._apiCustomControl.locked = arg1;
            return;
        }

        public function get id():String
        {
            return this._apiCustomControl.id;
        }

        public function set id(arg1:String):void
        {
            return;
        }

        public function get type():String
        {
            return this._apiCustomControl.type;
        }

        public function get enabled():Boolean
        {
            return this._apiCustomControl.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            var loc1:*=arg1 != this._apiCustomControl.enabled ? 1118481 : 16711680;
            Debugger.trace((arg1 ? "Enable" : "Disable") + " API button [" + this._apiCustomControl.id + "]", "API - Button Control", null, loc1);
            this._apiCustomControl.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._apiCustomControl.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            var loc1:*=arg1 != this._apiCustomControl.visible ? 1118481 : 16711680;
            Debugger.trace((arg1 ? "Show" : "Hide") + " API button [" + this._apiCustomControl.id + "]", "API - Button Control", null, loc1);
            this._apiCustomControl.visible = arg1;
            return;
        }

        public function get text():String
        {
            return this._apiCustomControl.text;
        }

        public function set text(arg1:String):void
        {
            this._apiCustomControl.text = arg1;
            return;
        }

        public function get alpha():Number
        {
            return 100;
        }

        public function set alpha(arg1:Number):void
        {
            return;
        }

        public function get filters():Array
        {
            return new Array();
        }

        public function set filters(arg1:Array):void
        {
            return;
        }

        public function get interactiveObject():flash.display.InteractiveObject
        {
            return null;
        }

        internal function onEvent(arg1:mgs.aurora.api.events.ApiInteractionEvent):void
        {
            this.dispatchEvent(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventToSystemInteractionEvent(arg1));
            return;
        }

        public function removeAllEventListeners():void
        {
            this._dispatcher.removeAllEventListeners();
            this._controlDispatcher.removeAllEventListeners();
            return;
        }

        public function dispose():void
        {
            this.removeAllEventListeners();
            this._dispatcher = null;
            this._controlDispatcher = null;
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventTypeToApiInteractionEventType(arg1), this.onEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventTypeToApiInteractionEventType(arg1), this.onEvent, arg3);
                }
            }
            return;
        }

        internal var _apiCustomControl:mgs.aurora.api.interfaces.controls.ICustomControl;

        internal var _controlDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;
    }
}


//                    class ButtonGroup
package mgs.aurora.modules.core.model.api.frames.controls.buttons 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ButtonGroup extends Object implements flash.events.IEventDispatcher, mgs.aurora.api.interfaces.controls.IControlGroup
    {
        public function ButtonGroup(arg1:String, arg2:mgs.aurora.common.interfaces.controls.IControlGroup, arg3:flash.utils.Dictionary)
        {
            super();
            this._id = arg1;
            this._framesBuilderControlGroup = arg2;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._groupDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg2, true);
            this._managerControls = arg3;
            return;
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._managerControls[arg1] == null) 
            {
                loc2 = this._framesBuilderControlGroup.getControl(arg1) as mgs.aurora.common.interfaces.controls.ICustomControl;
                if (loc2 == null) 
                {
                    Debugger.trace("Control \"" + arg1 + "\" not found in button group \"" + this._id + "\"", "API - Button Groups", null, 16711680);
                    throw new Error("Control \"" + arg1 + "\" not found in button group \"" + this._id + "\"");
                }
                this._managerControls[arg1] = new mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(loc2, arg1);
            }
            return mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(this._managerControls[arg1]);
        }

        public function linkToGroup(arg1:String):void
        {
            this._framesBuilderControlGroup.linkToGroup(arg1);
            return;
        }

        public function unlinkFromGroup(arg1:String):void
        {
            this._framesBuilderControlGroup.unlinkFromGroup(arg1);
            return;
        }

        public function get enabledList():String
        {
            return this._framesBuilderControlGroup.enabledList;
        }

        public function get disabledList():String
        {
            return this._framesBuilderControlGroup.disabledList;
        }

        public function get visibleList():String
        {
            return this._framesBuilderControlGroup.visibleList;
        }

        public function get hiddenList():String
        {
            return this._framesBuilderControlGroup.hiddenList;
        }

        public function enableControls(arg1:String):void
        {
            this._framesBuilderControlGroup.enableControls(arg1);
            return;
        }

        public function enableAllControls():void
        {
            this._framesBuilderControlGroup.enableAllControls();
            return;
        }

        public function disableControls(arg1:String):void
        {
            this._framesBuilderControlGroup.disableControls(arg1);
            return;
        }

        public function disableAllControls():void
        {
            this._framesBuilderControlGroup.disableAllControls();
            return;
        }

        public function showControls(arg1:String):void
        {
            this._framesBuilderControlGroup.showControls(arg1);
            return;
        }

        public function showAllControls():void
        {
            this._framesBuilderControlGroup.showAllControls();
            return;
        }

        public function hideControls(arg1:String):void
        {
            this._framesBuilderControlGroup.hideControls(arg1);
            return;
        }

        public function hideAllControls():void
        {
            this._framesBuilderControlGroup.hideAllControls();
            return;
        }

        public function hasControls(arg1:String):Boolean
        {
            return this._framesBuilderControlGroup.hasControls(arg1);
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="(" + this._id + ")  Button \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - Button Groups");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - Button Groups", null, 16711680);
            }
            return;
        }

        public function dispose():void
        {
            this._groupDispatcher.dispose();
            this._groupDispatcher = null;
            this._dispatcher.dispose();
            this._dispatcher = null;
            this._framesBuilderControlGroup = null;
            this._managerControls = null;
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._groupDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._groupDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        internal var _framesBuilderControlGroup:mgs.aurora.common.interfaces.controls.IControlGroup;

        internal var _groupDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _controls:flash.utils.Dictionary;

        internal var _id:String;

        internal var _managerControls:flash.utils.Dictionary;
    }
}


//                    class ButtonManager
package mgs.aurora.modules.core.model.api.frames.controls.buttons 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.enums.frame.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ButtonManager extends Object implements flash.events.IEventDispatcher, mgs.aurora.api.interfaces.controls.IControlManager
    {
        public function ButtonManager(arg1:mgs.aurora.common.interfaces.controls.IControlManager)
        {
            super();
            this._framesBuilderControlManager = arg1;
            this._framesBuilderDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this._framesBuilderControlManager, true);
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._groups = new flash.utils.Dictionary();
            this._controls = new flash.utils.Dictionary();
            this._apiControls = new flash.utils.Dictionary();
            this._facade = mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function addControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void
        {
            Debugger.trace("Add control (" + arg1.id + ", " + arg2.name + ", " + arg3 + ")", "API - Buttons");
            if (this._apiControls[arg1.id] != null) 
            {
                Debugger.trace("Control with id \"" + arg1.id + "\" already in button manager", "API - Buttons", null, 16711680);
            }
            else 
            {
                this._apiControls[arg1.id] = new mgs.aurora.modules.core.model.api.frames.controls.buttons.ApiButtonControlToFBButtonControl(arg1);
                this._framesBuilderControlManager.addControl(this._apiControls[arg1.id], arg2, arg3);
            }
            return;
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="Button \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - Buttons");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - Buttons", null, 16711680);
            }
            return;
        }

        public function dispose():void
        {
            this._framesBuilderDispatcher.dispose();
            this._dispatcher.dispose();
            this.removeAllGroups();
            this.removeAllControls();
            this._framesBuilderControlManager = null;
            this._framesBuilderDispatcher = null;
            this._dispatcher = null;
            return;
        }

        public function getGroup(arg1:String):mgs.aurora.api.interfaces.controls.IControlGroup
        {
            Debugger.trace("Get group (" + arg1 + ")", "API - Buttons");
            if (this._groups[arg1] == null) 
            {
                Debugger.trace("Group \"" + arg1 + "\" not found in button manager", "API - Buttons", null, 16711680);
                throw new Error("Group \"" + arg1 + "\" not found in button manager");
            }
            return mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonGroup(this._groups[arg1]);
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl
        {
            var loc1:*=null;
            var loc2:*=null;
            Debugger.trace("Get control (" + arg1 + ")", "API - Buttons");
            if (this._controls[arg1] == null) 
            {
                loc2 = this._framesBuilderControlManager.getControl(arg1) as mgs.aurora.common.interfaces.controls.ICustomControl;
                if (loc2 == null) 
                {
                    Debugger.trace("Control \"" + arg1 + "\" not found in button manager", "API - Buttons", null, 16711680);
                    throw new Error("Control \"" + arg1 + "\" not found in button manager");
                }
                this._controls[arg1] = new mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(loc2, arg1);
            }
            return mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(this._controls[arg1]);
        }

        public function clearAllControls():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._controls;
            for each (loc1 in loc3) 
            {
                loc1.dispose();
            }
            this._controls = new flash.utils.Dictionary();
            return;
        }

        public function addControls(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void
        {
            Debugger.trace("Add controls (" + arg1 + ", " + arg2 + ", " + arg3 + ")", "API - Buttons");
            var loc1:*=this.toFBButtonControlVector(arg1);
            this._framesBuilderControlManager.addControls(loc1, arg2, arg3);
            return;
        }

        public function toFBButtonControlVector(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>):__AS3__.vec.Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>
        {
            var loc4:*=null;
            var loc1:*=new Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>();
            var loc2:*=arg1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = arg1[loc3] as mgs.aurora.api.interfaces.controls.ICustomControl;
                if (this._apiControls[loc4.id] != null) 
                {
                    Debugger.trace("Control with id \"" + loc4.id + "\" already in button manager", "API - Buttons", null, 16711680);
                }
                else 
                {
                    this._apiControls[loc4.id] = new mgs.aurora.modules.core.model.api.frames.controls.buttons.ApiButtonControlToFBButtonControl(loc4);
                    loc1.push(this._apiControls[loc4.id]);
                }
                ++loc3;
            }
            return loc1;
        }

        public function createGroups(arg1:String):void
        {
            var loc5:*=0;
            Debugger.trace("Create groups (" + arg1 + ")", "API - Buttons");
            var loc1:*=arg1.split(",");
            var loc2:*=new Array();
            var loc3:*=loc1.length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                if (this._groups[loc1[loc4]] != null) 
                {
                    Debugger.trace("Group with id \"" + loc1[loc4] + "\" already in button manager", "API - Buttons", null, 16711680);
                }
                else 
                {
                    loc2.push(loc1[loc4]);
                }
                ++loc4;
            }
            if ((loc3 = loc2.length) > 0) 
            {
                this._framesBuilderControlManager.createGroups(loc2.join(","));
                loc5 = 0;
                while (loc5 < loc3) 
                {
                    this._groups[loc2[loc5]] = new mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonGroup(loc2[loc5], this._framesBuilderControlManager.getGroup(loc2[loc5]), this._controls);
                    ++loc5;
                }
            }
            return;
        }

        public function removeGroups(arg1:String):void
        {
            Debugger.trace("Remove groups (" + arg1 + ")", "API - Buttons");
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonGroup(this._groups[loc1[loc3]]).dispose();
                delete this._groups[loc1[loc3]];
                ++loc3;
            }
            this._framesBuilderControlManager.removeGroups(arg1);
            return;
        }

        public function removeAllGroups():void
        {
            var loc1:*=null;
            Debugger.trace("Remove all groups", "API - Buttons");
            var loc2:*=0;
            var loc3:*=this._groups;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonGroup(this._groups[loc1]).dispose();
                delete this._groups[loc1];
            }
            this._groups = new flash.utils.Dictionary();
            this._framesBuilderControlManager.removeAllGroups();
            return;
        }

        public function hasGroups(arg1:String):Boolean
        {
            var loc1:*=this._framesBuilderControlManager.hasGroups(arg1);
            Debugger.trace("Has groups (" + arg1 + ") - " + loc1, "API - Buttons");
            return loc1;
        }

        public function linkControlsToGroups(arg1:String, arg2:String):void
        {
            Debugger.trace("Link controls to groups (" + arg1 + ", " + arg2 + ")", "API - Buttons");
            this._framesBuilderControlManager.linkControlsToGroups(arg1, arg2);
            return;
        }

        public function unlinkControlsFromGroups(arg1:String, arg2:String):void
        {
            Debugger.trace("Unlink controls to groups (" + arg1 + ", " + arg2 + ")", "API - Buttons");
            this._framesBuilderControlManager.unlinkControlsFromGroups(arg1, arg2);
            return;
        }

        public function removeControls(arg1:String):void
        {
            Debugger.trace("Remove controls (" + arg1 + ")", "API - Buttons");
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                if (this._controls[loc1[loc3]] != null) 
                {
                    mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(this._controls[loc1[loc3]]).dispose();
                    delete this._controls[loc1[loc3]];
                }
                if (this._apiControls[loc1[loc3]] != null) 
                {
                    mgs.aurora.modules.core.model.api.frames.controls.buttons.ApiButtonControlToFBButtonControl(this._apiControls[loc1[loc3]]).removeAllEventListeners();
                    delete this._apiControls[loc1[loc3]];
                }
                ++loc3;
            }
            this._framesBuilderControlManager.removeControls(arg1);
            return;
        }

        public function removeAllControls():void
        {
            var loc1:*=null;
            Debugger.trace("Remove controls", "API - Buttons");
            var loc2:*=0;
            var loc3:*=this._controls;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(this._controls[loc1]).dispose();
                delete this._controls[loc1];
            }
            this._controls = new flash.utils.Dictionary();
            loc2 = 0;
            loc3 = this._apiControls;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.buttons.ApiButtonControlToFBButtonControl(this._apiControls[loc1]).removeAllEventListeners();
                delete this._apiControls[loc1];
            }
            this._apiControls = new flash.utils.Dictionary();
            this._framesBuilderControlManager.removeAllControls();
            return;
        }

        public function get enabledList():String
        {
            return this._framesBuilderControlManager.enabledList;
        }

        public function get disabledList():String
        {
            return this._framesBuilderControlManager.disabledList;
        }

        public function get visibleList():String
        {
            return this._framesBuilderControlManager.visibleList;
        }

        public function get hiddenList():String
        {
            return this._framesBuilderControlManager.hiddenList;
        }

        public function enableControls(arg1:String):void
        {
            if (arg1.indexOf(mgs.aurora.common.enums.frame.SystemButtonTypes.BANK) > -1) 
            {
                this._facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE, true);
            }
            Debugger.trace("Enable controls (" + arg1 + ")", "API - Buttons");
            this._framesBuilderControlManager.enableControls(arg1);
            return;
        }

        public function enableAllControls():void
        {
            this._facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE, true);
            Debugger.trace("Enable all controls", "API - Buttons");
            this._framesBuilderControlManager.enableAllControls();
            return;
        }

        public function disableControls(arg1:String):void
        {
            if (arg1.indexOf(mgs.aurora.common.enums.frame.SystemButtonTypes.BANK) > -1) 
            {
                this._facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE, false);
            }
            Debugger.trace("Disable controls (" + arg1 + ")", "API - Buttons");
            this._framesBuilderControlManager.disableControls(arg1);
            return;
        }

        public function disableAllControls():void
        {
            this._facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE, false);
            Debugger.trace("Disable all controls", "API - Buttons");
            this._framesBuilderControlManager.disableAllControls();
            return;
        }

        public function showControls(arg1:String):void
        {
            Debugger.trace("Show controls (" + arg1 + ")", "API - Buttons");
            this._framesBuilderControlManager.showControls(arg1);
            return;
        }

        public function showAllControls():void
        {
            Debugger.trace("Show all controls", "API - Buttons");
            this._framesBuilderControlManager.showAllControls();
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ButtonManagerEvent(mgs.aurora.modules.core.events.api.ButtonManagerEvent.SET_PLAYFORREAL_STATE));
            return;
        }

        public function hideControls(arg1:String):void
        {
            Debugger.trace("Hide controls (" + arg1 + ")", "API - Buttons");
            this._framesBuilderControlManager.hideControls(arg1);
            return;
        }

        public function hideAllControls():void
        {
            Debugger.trace("Hide all controls", "API - Buttons");
            this._framesBuilderControlManager.hideAllControls();
            return;
        }

        public function hasControls(arg1:String):Boolean
        {
            var loc1:*=this._framesBuilderControlManager.hasControls(arg1);
            Debugger.trace("Has Controls (" + arg1 + ") - " + loc1, "API - Buttons");
            return loc1;
        }

        public function lockAllControls():void
        {
            Debugger.trace("Lock All Controls", "API - Buttons");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ButtonManagerEvent(mgs.aurora.modules.core.events.api.ButtonManagerEvent.LOCK_ALL_BUTTONS));
            return;
        }

        public function unlockAllControls():void
        {
            Debugger.trace("Unlock All Controls", "API - Buttons");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ButtonManagerEvent(mgs.aurora.modules.core.events.api.ButtonManagerEvent.UNLOCK_ALL_BUTTONS));
            return;
        }

        public function changeControl(arg1:String, arg2:String, arg3:String=""):void
        {
            this._framesBuilderControlManager.changeControl(arg1, arg2, arg3);
            if (this._controls[arg1] != null) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.buttons.FBButtonControlToApiButtonControl(this._controls[arg1]).dispose();
                delete this._controls[arg1];
            }
            if (this._apiControls[arg1] != null) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.buttons.ApiButtonControlToFBButtonControl(this._controls[arg1]).dispose();
                delete this._apiControls[arg1];
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3, arg4, true);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        internal var _framesBuilderControlManager:mgs.aurora.common.interfaces.controls.IControlManager;

        internal var _framesBuilderDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _groups:flash.utils.Dictionary;

        internal var _apiControls:flash.utils.Dictionary;

        internal var _facade:mgs.aurora.modules.core.CoreFacade;

        internal var _controls:flash.utils.Dictionary;
    }
}


//                    class FBButtonControlToApiButtonControl
package mgs.aurora.modules.core.model.api.frames.controls.buttons 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class FBButtonControlToApiButtonControl extends Object implements mgs.aurora.api.interfaces.controls.ICustomControl
    {
        public function FBButtonControlToApiButtonControl(arg1:mgs.aurora.common.interfaces.controls.ICustomControl, arg2:String)
        {
            super();
            this._framesBuilderCustomControl = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._controlDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg1, true);
            this._id = arg2;
            return;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onEvent, arg3);
                }
            }
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            Debugger.trace("Add button [" + this._framesBuilderCustomControl.id + "] to container (" + arg1.name + ")", "API - Button Control");
            this._framesBuilderCustomControl.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            Debugger.trace("Add button [" + this._framesBuilderCustomControl.id + "] to container at index (" + arg1.name + ", " + arg2 + ")", "API - Button Control");
            this._framesBuilderCustomControl.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            Debugger.trace("Remove button [" + this._framesBuilderCustomControl.id + "] from container", "API - Button Control");
            this._framesBuilderCustomControl.removeFromContainer();
            return;
        }

        public function get x():Number
        {
            return this._framesBuilderCustomControl.x;
        }

        public function set x(arg1:Number):void
        {
            this._framesBuilderCustomControl.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._framesBuilderCustomControl.y;
        }

        public function set y(arg1:Number):void
        {
            this._framesBuilderCustomControl.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._framesBuilderCustomControl.width;
        }

        public function set width(arg1:Number):void
        {
            this._framesBuilderCustomControl.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._framesBuilderCustomControl.height;
        }

        public function set height(arg1:Number):void
        {
            this._framesBuilderCustomControl.height = arg1;
            return;
        }

        public function get locked():Boolean
        {
            return this._framesBuilderCustomControl.locked;
        }

        public function set locked(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.locked = arg1;
            return;
        }

        public function get id():String
        {
            return this._framesBuilderCustomControl.id;
        }

        public function set id(arg1:String):void
        {
            this._framesBuilderCustomControl.id = arg1;
            return;
        }

        public function get type():String
        {
            return this._framesBuilderCustomControl.type;
        }

        public function get enabled():Boolean
        {
            return this._framesBuilderCustomControl.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            var loc1:*=arg1 != this._framesBuilderCustomControl.enabled ? 1118481 : 16711680;
            Debugger.trace((arg1 ? "Enable" : "Disable") + " button [" + this._framesBuilderCustomControl.id + "]", "API - Button Control", null, loc1);
            this._framesBuilderCustomControl.enabled = arg1;
            return;
        }

        public function get text():String
        {
            return this._framesBuilderCustomControl.text;
        }

        public function set text(arg1:String):void
        {
            this._framesBuilderCustomControl.text = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._framesBuilderCustomControl.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            var loc1:*=arg1 != this._framesBuilderCustomControl.visible ? 1118481 : 16711680;
            Debugger.trace((arg1 ? "Show" : "Hide") + " button [" + this._framesBuilderCustomControl.id + "]", "API - Button Control", null, loc1);
            this._framesBuilderCustomControl.visible = arg1;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._framesBuilderCustomControl.interactiveObject as flash.display.DisplayObject;
        }

        public function dispose():void
        {
            this._dispatcher.dispose();
            this._dispatcher = null;
            this._framesBuilderCustomControl = null;
            return;
        }

        internal function onEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            this.dispatchEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1));
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        internal var _id:String;

        internal var _framesBuilderCustomControl:mgs.aurora.common.interfaces.controls.ICustomControl;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _controlDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;
    }
}


//                  package chipSelector
//                    class ChipSelector
package mgs.aurora.modules.core.model.api.frames.controls.chipSelector 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.frames.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ChipSelector extends Object implements mgs.aurora.api.interfaces.frames.IChipSelector
    {
        public function ChipSelector(arg1:mgs.aurora.common.interfaces.frames.frame.assets.IChipSelector)
        {
            super();
            this._framesBuilderChipSelector = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._framesBuilderDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this._framesBuilderChipSelector, true);
            return;
        }

        public function get displayType():String
        {
            return this._framesBuilderChipSelector.displayType;
        }

        public function set displayType(arg1:String):void
        {
            this._framesBuilderChipSelector.displayType = arg1;
            return;
        }

        public function get range():__AS3__.vec.Vector.<uint>
        {
            return this._framesBuilderChipSelector.range;
        }

        public function set range(arg1:__AS3__.vec.Vector.<uint>):void
        {
            this._framesBuilderChipSelector.range = arg1;
            return;
        }

        public function get index():uint
        {
            return this._framesBuilderChipSelector.index;
        }

        public function set index(arg1:uint):void
        {
            this._framesBuilderChipSelector.index = arg1;
            return;
        }

        public function get value():uint
        {
            return this._framesBuilderChipSelector.value;
        }

        public function set value(arg1:uint):void
        {
            Debugger.trace("core SetValue :: " + arg1, "FRAMES CHIP");
            this._framesBuilderChipSelector.value = arg1;
            return;
        }

        public function set incAndDecButtonVisiblity(arg1:Boolean):void
        {
            this._framesBuilderChipSelector.incAndDecButtonVisiblity = arg1;
            return;
        }

        public function set incForciblyEnabled(arg1:Boolean):void
        {
            this._framesBuilderChipSelector.incForciblyEnabled = arg1;
            return;
        }

        public function set decForciblyEnabled(arg1:Boolean):void
        {
            this._framesBuilderChipSelector.decForciblyEnabled = arg1;
            return;
        }

        public function get id():String
        {
            return this._framesBuilderChipSelector["id"];
        }

        public function get type():String
        {
            return this._framesBuilderChipSelector["type"];
        }

        public function get enabled():Boolean
        {
            return this._framesBuilderChipSelector["enabled"];
        }

        public function set enabled(arg1:Boolean):void
        {
            this._framesBuilderChipSelector["enabled"] = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._framesBuilderChipSelector["visible"];
        }

        public function set visible(arg1:Boolean):void
        {
            this._framesBuilderChipSelector["visible"] = arg1;
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3, arg4, true);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="ChipSelectorButton \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - ChipSelector");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - ChipSelector", null, 16711680);
            }
            return;
        }

        public function dispose():void
        {
            this._framesBuilderDispatcher.dispose();
            this._dispatcher.dispose();
            this._framesBuilderChipSelector = null;
            this._framesBuilderDispatcher = null;
            this._dispatcher = null;
            return;
        }

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _framesBuilderDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _framesBuilderChipSelector:mgs.aurora.common.interfaces.frames.frame.assets.IChipSelector;
    }
}


//                  package graphics
//                    class ApiGraphicControlToFBGraphicControl
package mgs.aurora.modules.core.model.api.frames.controls.graphics 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ApiGraphicControlToFBGraphicControl extends Object implements flash.events.IEventDispatcher, mgs.aurora.common.interfaces.controls.ICustomControl
    {
        public function ApiGraphicControlToFBGraphicControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl)
        {
            super();
            this._apiCustomControl = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._controlDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg1, true);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventTypeToApiInteractionEventType(arg1), this.onEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventTypeToApiInteractionEventType(arg1), this.onEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function get locked():Boolean
        {
            return this._apiCustomControl.locked;
        }

        public function set locked(arg1:Boolean):void
        {
            this._apiCustomControl.locked = arg1;
            return;
        }

        public function get text():String
        {
            return this._apiCustomControl.text;
        }

        public function set text(arg1:String):void
        {
            this._apiCustomControl.text = arg1;
            return;
        }

        public function get id():String
        {
            return this._apiCustomControl.id;
        }

        public function set id(arg1:String):void
        {
            return;
        }

        public function get type():String
        {
            return this._apiCustomControl.type;
        }

        public function get x():Number
        {
            return this._apiCustomControl.x;
        }

        public function set x(arg1:Number):void
        {
            this._apiCustomControl.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._apiCustomControl.y;
        }

        public function set y(arg1:Number):void
        {
            this._apiCustomControl.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._apiCustomControl.width;
        }

        public function set width(arg1:Number):void
        {
            this._apiCustomControl.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._apiCustomControl.height;
        }

        public function set height(arg1:Number):void
        {
            this._apiCustomControl.height = arg1;
            return;
        }

        public function get enabled():Boolean
        {
            return this._apiCustomControl.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._apiCustomControl.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._apiCustomControl.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._apiCustomControl.visible = arg1;
            return;
        }

        public function get hitTest():Boolean
        {
            return false;
        }

        public function get interactiveObject():flash.display.InteractiveObject
        {
            return null;
        }

        public function get filters():Array
        {
            return new Array();
        }

        public function set filters(arg1:Array):void
        {
            return;
        }

        public function get alpha():Number
        {
            return 100;
        }

        public function set alpha(arg1:Number):void
        {
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._apiCustomControl.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this._apiCustomControl.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this._apiCustomControl.removeFromContainer();
            return;
        }

        internal function onEvent(arg1:mgs.aurora.api.events.ApiInteractionEvent):void
        {
            this.dispatchEvent(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventToSystemInteractionEvent(arg1));
            return;
        }

        public function removeAllEventListeners():void
        {
            this._dispatcher.removeAllEventListeners();
            this._controlDispatcher.removeAllEventListeners();
            return;
        }

        public function dispose():void
        {
            this.removeAllEventListeners();
            this._dispatcher = null;
            this._controlDispatcher = null;
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        internal var _apiCustomControl:mgs.aurora.api.interfaces.controls.ICustomControl;

        internal var _controlDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;
    }
}


//                    class FBGraphicControlToApiGraphicControl
package mgs.aurora.modules.core.model.api.frames.controls.graphics 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class FBGraphicControlToApiGraphicControl extends Object implements mgs.aurora.api.interfaces.controls.ICustomControl
    {
        public function FBGraphicControlToApiGraphicControl(arg1:mgs.aurora.common.interfaces.controls.ICustomControl, arg2:String)
        {
            super();
            this._framesBuilderCustomControl = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._controlDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg1, true);
            this._id = arg2;
            return;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._framesBuilderCustomControl.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this._framesBuilderCustomControl.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this._framesBuilderCustomControl.removeFromContainer();
            return;
        }

        public function get x():Number
        {
            return this._framesBuilderCustomControl.x;
        }

        public function set x(arg1:Number):void
        {
            this._framesBuilderCustomControl.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._framesBuilderCustomControl.y;
        }

        public function set y(arg1:Number):void
        {
            this._framesBuilderCustomControl.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._framesBuilderCustomControl.width;
        }

        public function set width(arg1:Number):void
        {
            this._framesBuilderCustomControl.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._framesBuilderCustomControl.height;
        }

        public function set height(arg1:Number):void
        {
            this._framesBuilderCustomControl.height = arg1;
            return;
        }

        public function get locked():Boolean
        {
            return this._framesBuilderCustomControl.locked;
        }

        public function set locked(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.locked = arg1;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._framesBuilderCustomControl.interactiveObject as flash.display.DisplayObject;
        }

        public function get text():String
        {
            return this._framesBuilderCustomControl.text;
        }

        public function set text(arg1:String):void
        {
            this._framesBuilderCustomControl.text = arg1;
            return;
        }

        public function get id():String
        {
            return this._framesBuilderCustomControl.id;
        }

        public function set id(arg1:String):void
        {
            this._framesBuilderCustomControl.id = arg1;
            return;
        }

        public function get type():String
        {
            return this._framesBuilderCustomControl.type;
        }

        public function get enabled():Boolean
        {
            return this._framesBuilderCustomControl.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._framesBuilderCustomControl.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.visible = arg1;
            return;
        }

        public function dispose():void
        {
            this._dispatcher.dispose();
            this._dispatcher = null;
            this._framesBuilderCustomControl = null;
            return;
        }

        internal function onEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            this.dispatchEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1));
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        internal var _id:String;

        internal var _framesBuilderCustomControl:mgs.aurora.common.interfaces.controls.ICustomControl;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _controlDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;
    }
}


//                    class GraphicGroup
package mgs.aurora.modules.core.model.api.frames.controls.graphics 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class GraphicGroup extends Object implements flash.events.IEventDispatcher, mgs.aurora.api.interfaces.controls.IControlGroup
    {
        public function GraphicGroup(arg1:String, arg2:mgs.aurora.common.interfaces.controls.IControlGroup, arg3:flash.utils.Dictionary)
        {
            super();
            this._id = arg1;
            this._framesBuilderControlGroup = arg2;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._groupDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg2, true);
            this._managerControls = arg3;
            return;
        }

        public function linkToGroup(arg1:String):void
        {
            this._framesBuilderControlGroup.linkToGroup(arg1);
            return;
        }

        public function unlinkFromGroup(arg1:String):void
        {
            this._framesBuilderControlGroup.unlinkFromGroup(arg1);
            return;
        }

        public function enableControls(arg1:String):void
        {
            this._framesBuilderControlGroup.enableControls(arg1);
            return;
        }

        public function enableAllControls():void
        {
            this._framesBuilderControlGroup.enableAllControls();
            return;
        }

        public function disableControls(arg1:String):void
        {
            this._framesBuilderControlGroup.disableControls(arg1);
            return;
        }

        public function disableAllControls():void
        {
            this._framesBuilderControlGroup.disableAllControls();
            return;
        }

        public function showControls(arg1:String):void
        {
            this._framesBuilderControlGroup.showControls(arg1);
            return;
        }

        public function showAllControls():void
        {
            this._framesBuilderControlGroup.showAllControls();
            return;
        }

        public function hideControls(arg1:String):void
        {
            this._framesBuilderControlGroup.hideControls(arg1);
            return;
        }

        public function hideAllControls():void
        {
            this._framesBuilderControlGroup.hideAllControls();
            return;
        }

        public function hasControls(arg1:String):Boolean
        {
            return this._framesBuilderControlGroup.hasControls(arg1);
        }

        public function get enabledList():String
        {
            return this._framesBuilderControlGroup.enabledList;
        }

        public function get disabledList():String
        {
            return this._framesBuilderControlGroup.disabledList;
        }

        public function get visibleList():String
        {
            return this._framesBuilderControlGroup.visibleList;
        }

        public function get hiddenList():String
        {
            return this._framesBuilderControlGroup.hiddenList;
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._managerControls[arg1] == null) 
            {
                loc2 = this._framesBuilderControlGroup.getControl(arg1) as mgs.aurora.common.interfaces.controls.ICustomControl;
                if (loc2 == null) 
                {
                    Debugger.trace("Control \"" + arg1 + "\" not found in button group \"" + this._id + "\"", "API - Grpahic Groups", null, 16711680);
                    return null;
                }
                this._managerControls[arg1] = new mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(loc2, arg1);
            }
            return mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(this._managerControls[arg1]);
        }

        public function dispose():void
        {
            this._groupDispatcher.dispose();
            this._groupDispatcher = null;
            this._dispatcher.dispose();
            this._dispatcher = null;
            this._framesBuilderControlGroup = null;
            this._managerControls = null;
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._groupDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._groupDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="(" + this._id + ")  Text \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - Text Groups");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - Graphic Groups", null, 16711680);
            }
            return;
        }

        internal var _framesBuilderControlGroup:mgs.aurora.common.interfaces.controls.IControlGroup;

        internal var _groupDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _controls:flash.utils.Dictionary;

        internal var _id:String;

        internal var _managerControls:flash.utils.Dictionary;
    }
}


//                    class GraphicManager
package mgs.aurora.modules.core.model.api.frames.controls.graphics 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class GraphicManager extends Object implements flash.events.IEventDispatcher, mgs.aurora.api.interfaces.controls.IControlManager
    {
        public function GraphicManager(arg1:mgs.aurora.common.interfaces.controls.IControlManager)
        {
            super();
            this._framesBuilderControlManager = arg1;
            this._framesBuilderDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this._framesBuilderControlManager, true);
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._groups = new flash.utils.Dictionary();
            this._controls = new flash.utils.Dictionary();
            this._apiControls = new flash.utils.Dictionary();
            return;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3, arg4, true);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="Texts  \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - Graphic");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - Graphic", null, 16711680);
            }
            return;
        }

        public function dispose():void
        {
            this._framesBuilderDispatcher.dispose();
            this._dispatcher.dispose();
            this.removeAllControls();
            this.removeAllGroups();
            this._framesBuilderControlManager = null;
            this._framesBuilderDispatcher = null;
            this._dispatcher = null;
            return;
        }

        public function removeAllGroups():void
        {
            var loc1:*=null;
            Debugger.trace("Remove all groups", "API - Graphics");
            var loc2:*=0;
            var loc3:*=this._groups;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.graphics.GraphicGroup(this._groups[loc1]).dispose();
                delete this._groups[loc1];
            }
            this._groups = new flash.utils.Dictionary();
            this._framesBuilderControlManager.removeAllGroups();
            return;
        }

        public function clearAllControls():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._controls;
            for each (loc1 in loc3) 
            {
                loc1.dispose();
            }
            this._controls = new flash.utils.Dictionary();
            return;
        }

        public function getGroup(arg1:String):mgs.aurora.api.interfaces.controls.IControlGroup
        {
            if (this._groups[arg1] == null) 
            {
                Debugger.trace("Group \"" + arg1 + "\" not found in text manager", "API - Graphics", null, 16711680);
                throw new Error("Group \"" + arg1 + "\" not found in text manager");
            }
            return mgs.aurora.modules.core.model.api.frames.controls.graphics.GraphicGroup(this._groups[arg1]);
        }

        public function createGroups(arg1:String):void
        {
            var loc5:*=0;
            Debugger.trace("Create groups (" + arg1 + ")", "API - Graphics");
            var loc1:*=arg1.split(",");
            var loc2:*=new Array();
            var loc3:*=loc1.length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                if (this._groups[loc1[loc4]] != null) 
                {
                    Debugger.trace("Group with id \"" + loc1[loc4] + "\" already in text manager", "API - Graphics", null, 16711680);
                }
                else 
                {
                    loc2.push(loc1[loc4]);
                }
                ++loc4;
            }
            if ((loc3 = loc2.length) > 0) 
            {
                this._framesBuilderControlManager.createGroups(loc2.join(","));
                loc5 = 0;
                while (loc5 < loc3) 
                {
                    this._groups[loc2[loc5]] = new mgs.aurora.modules.core.model.api.frames.controls.graphics.GraphicGroup(loc2[loc5], this._framesBuilderControlManager.getGroup(loc2[loc5]), this._controls);
                    ++loc5;
                }
            }
            return;
        }

        public function removeGroups(arg1:String):void
        {
            Debugger.trace("Remove groups (" + arg1 + ")", "API - Graphics");
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.graphics.GraphicGroup(this._groups[loc1[loc3]]).dispose();
                delete this._groups[loc1[loc3]];
                ++loc3;
            }
            this._framesBuilderControlManager.removeGroups(arg1);
            return;
        }

        public function changeControl(arg1:String, arg2:String, arg3:String=""):void
        {
            this._framesBuilderControlManager.changeControl(arg1, arg2, arg3);
            if (this._controls[arg1] != null) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(this._controls[arg1]).dispose();
                delete this._controls[arg1];
            }
            if (this._apiControls[arg1] != null) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.graphics.ApiGraphicControlToFBGraphicControl(this._controls[arg1]).dispose();
                delete this._apiControls[arg1];
            }
            return;
        }

        public function hasGroups(arg1:String):Boolean
        {
            var loc1:*=this._framesBuilderControlManager.hasGroups(arg1);
            Debugger.trace("Has groups (" + arg1 + ") - " + loc1, "API - Graphics");
            return loc1;
        }

        public function addControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void
        {
            if (this._apiControls[arg1.id] != null) 
            {
                Debugger.trace("Control with id \"" + arg1.id + "\" already in text manager", "API - Graphic", null, 16711680);
            }
            else 
            {
                this._apiControls[arg1.id] = new mgs.aurora.modules.core.model.api.frames.controls.graphics.ApiGraphicControlToFBGraphicControl(arg1);
                this._framesBuilderControlManager.addControl(this._apiControls[arg1.id], arg2, arg3);
            }
            return;
        }

        public function addControls(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void
        {
            var loc1:*=this.toFBGraphicControlVector(arg1);
            this._framesBuilderControlManager.addControls(loc1, arg2, arg3);
            return;
        }

        public function toFBGraphicControlVector(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>):__AS3__.vec.Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>
        {
            var loc4:*=null;
            var loc1:*=new Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>();
            var loc2:*=arg1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = arg1[loc3] as mgs.aurora.api.interfaces.controls.ICustomControl;
                if (this._apiControls[loc4.id] != null) 
                {
                    Debugger.trace("Control with id \"" + loc4.id + "\" already in text manager", "API - Graphic", null, 16711680);
                }
                else 
                {
                    this._apiControls[loc4.id] = new mgs.aurora.modules.core.model.api.frames.controls.graphics.ApiGraphicControlToFBGraphicControl(loc4);
                    loc1.push(this._apiControls[loc4.id]);
                }
                ++loc3;
            }
            return loc1;
        }

        public function removeControls(arg1:String):void
        {
            Debugger.trace("Remove controls (" + arg1 + ")", "API - Graphic");
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                if (this._controls[loc1[loc3]] != null) 
                {
                    mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(this._controls[loc1[loc3]]).dispose();
                    delete this._controls[loc1[loc3]];
                }
                if (this._apiControls[loc1[loc3]] != null) 
                {
                    mgs.aurora.modules.core.model.api.frames.controls.graphics.ApiGraphicControlToFBGraphicControl(this._apiControls[loc1[loc3]]).removeAllEventListeners();
                    delete this._apiControls[loc1[loc3]];
                }
                ++loc3;
            }
            this._framesBuilderControlManager.removeControls(arg1);
            return;
        }

        public function removeAllControls():void
        {
            var loc1:*=null;
            Debugger.trace("Remove controls", "API - Graphic");
            var loc2:*=0;
            var loc3:*=this._controls;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(this._controls[loc1]).dispose();
                delete this._controls[loc1];
            }
            this._controls = new flash.utils.Dictionary();
            loc2 = 0;
            loc3 = this._apiControls;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.graphics.ApiGraphicControlToFBGraphicControl(this._apiControls[loc1]).removeAllEventListeners();
                delete this._apiControls[loc1];
            }
            this._apiControls = new flash.utils.Dictionary();
            this._framesBuilderControlManager.removeAllControls();
            return;
        }

        public function linkControlsToGroups(arg1:String, arg2:String):void
        {
            this._framesBuilderControlManager.linkControlsToGroups(arg1, arg2);
            return;
        }

        public function unlinkControlsFromGroups(arg1:String, arg2:String):void
        {
            this._framesBuilderControlManager.unlinkControlsFromGroups(arg1, arg2);
            return;
        }

        public function lockAllControls():void
        {
            this._framesBuilderControlManager.lockAllControls();
            return;
        }

        public function unlockAllControls():void
        {
            this._framesBuilderControlManager.unlockAllControls();
            return;
        }

        public function enableControls(arg1:String):void
        {
            this._framesBuilderControlManager.enableControls(arg1);
            return;
        }

        public function enableAllControls():void
        {
            this._framesBuilderControlManager.enableAllControls();
            return;
        }

        public function disableControls(arg1:String):void
        {
            this._framesBuilderControlManager.disableControls(arg1);
            return;
        }

        public function disableAllControls():void
        {
            this._framesBuilderControlManager.disableAllControls();
            return;
        }

        public function showControls(arg1:String):void
        {
            this._framesBuilderControlManager.showControls(arg1);
            return;
        }

        public function showAllControls():void
        {
            this._framesBuilderControlManager.showAllControls();
            return;
        }

        public function hideControls(arg1:String):void
        {
            this._framesBuilderControlManager.hideControls(arg1);
            return;
        }

        public function hideAllControls():void
        {
            this._framesBuilderControlManager.hideAllControls();
            return;
        }

        public function get enabledList():String
        {
            return this._framesBuilderControlManager.enabledList;
        }

        public function get disabledList():String
        {
            return this._framesBuilderControlManager.disabledList;
        }

        public function get visibleList():String
        {
            return this._framesBuilderControlManager.visibleList;
        }

        public function get hiddenList():String
        {
            return this._framesBuilderControlManager.hiddenList;
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl
        {
            var loc1:*=null;
            var loc2:*=null;
            Debugger.trace("Get control (" + arg1 + ")", "API - Graphic");
            if (this._controls[arg1] == null) 
            {
                loc2 = this._framesBuilderControlManager.getControl(arg1) as mgs.aurora.common.interfaces.controls.ICustomControl;
                if (loc2 == null) 
                {
                    Debugger.trace("Control \"" + arg1 + "\" not found in text manager", "API - Graphic", null, 16711680);
                    return null;
                }
                this._controls[arg1] = new mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(loc2, arg1);
            }
            return mgs.aurora.modules.core.model.api.frames.controls.graphics.FBGraphicControlToApiGraphicControl(this._controls[arg1]);
        }

        public function hasControls(arg1:String):Boolean
        {
            var loc1:*=this._framesBuilderControlManager.hasControls(arg1);
            return loc1;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        internal var _framesBuilderControlManager:mgs.aurora.common.interfaces.controls.IControlManager;

        internal var _framesBuilderDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _groups:flash.utils.Dictionary;

        internal var _apiControls:flash.utils.Dictionary;

        internal var _controls:flash.utils.Dictionary;
    }
}


//                  package headings
//                    class FrameHeadings
package mgs.aurora.modules.core.model.api.frames.controls.headings 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import mgs.aurora.api.interfaces.frames.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    
    public class FrameHeadings extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.frames.IFrameHeading
    {
        public function FrameHeadings(arg1:mgs.aurora.common.interfaces.frames.frame.assets.IFrameHeading)
        {
            super();
            this._framesBuilderFrameHeadings = arg1;
            return;
        }

        public function set y(arg1:Number):void
        {
            this._framesBuilderFrameHeadings.y = arg1;
            return;
        }

        public function get alternatingText():__AS3__.vec.Vector.<String>
        {
            return this._framesBuilderFrameHeadings.alternatingText;
        }

        public function get alternatingIntervalSize():int
        {
            return this._framesBuilderFrameHeadings.alternatingIntervalSize;
        }

        public function alternateText(arg1:__AS3__.vec.Vector.<String>, arg2:int):void
        {
            this._framesBuilderFrameHeadings.alternateText(arg1, arg2);
            return;
        }

        public function reset():void
        {
            this._framesBuilderFrameHeadings.reset();
            return;
        }

        public function restoreTitleDisplay():void
        {
            this._framesBuilderFrameHeadings.restoreTitleDisplay();
            return;
        }

        public function restoreTitleColour():void
        {
            this._framesBuilderFrameHeadings.restoreTitleColour();
            return;
        }

        public function set alignText(arg1:String):void
        {
            this._framesBuilderFrameHeadings.alignText = arg1;
            return;
        }

        public function get text():String
        {
            return this._framesBuilderFrameHeadings.text;
        }

        public function set text(arg1:String):void
        {
            this._framesBuilderFrameHeadings.text = arg1;
            return;
        }

        public function get color():uint
        {
            return this._framesBuilderFrameHeadings.color;
        }

        public function set color(arg1:uint):void
        {
            this._framesBuilderFrameHeadings.color = arg1;
            return;
        }

        public function get bold():Boolean
        {
            return this._framesBuilderFrameHeadings.bold;
        }

        public function set bold(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.bold = arg1;
            return;
        }

        public function get italic():Boolean
        {
            return this._framesBuilderFrameHeadings.italic;
        }

        public function set italic(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.italic = arg1;
            return;
        }

        public function get underline():Boolean
        {
            return this._framesBuilderFrameHeadings.underline;
        }

        public function set underline(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.underline = arg1;
            return;
        }

        public function get enabled():Boolean
        {
            return this._framesBuilderFrameHeadings.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._framesBuilderFrameHeadings.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.visible = arg1;
            return;
        }

        public function set backGroundVisible(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.backGroundVisible = arg1;
            return;
        }

        public function set textVisible(arg1:Boolean):void
        {
            this._framesBuilderFrameHeadings.textVisible = arg1;
            return;
        }

        public function get id():String
        {
            return this._framesBuilderFrameHeadings.id;
        }

        public function get type():String
        {
            return this._framesBuilderFrameHeadings.type;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._framesBuilderFrameHeadings.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return this._framesBuilderFrameHeadings.hasEventListener(arg1);
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._framesBuilderFrameHeadings.dispatchEvent(arg1);
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return this._framesBuilderFrameHeadings.willTrigger(arg1);
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._framesBuilderFrameHeadings.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function get x():Number
        {
            return this._framesBuilderFrameHeadings.x;
        }

        public function set x(arg1:Number):void
        {
            this._framesBuilderFrameHeadings.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._framesBuilderFrameHeadings.y;
        }

        internal var _framesBuilderFrameHeadings:mgs.aurora.common.interfaces.frames.frame.assets.IFrameHeading;
    }
}


//                  package texts
//                    class ApiTextControlToFBTextControl
package mgs.aurora.modules.core.model.api.frames.controls.texts 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class ApiTextControlToFBTextControl extends Object implements flash.events.IEventDispatcher, mgs.aurora.common.interfaces.controls.ICustomControl
    {
        public function ApiTextControlToFBTextControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl)
        {
            super();
            this._apiCustomControl = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._controlDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg1, true);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventTypeToApiInteractionEventType(arg1), this.onEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventTypeToApiInteractionEventType(arg1), this.onEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function get locked():Boolean
        {
            return this._apiCustomControl.locked;
        }

        public function set locked(arg1:Boolean):void
        {
            this._apiCustomControl.locked = arg1;
            return;
        }

        public function get id():String
        {
            return this._apiCustomControl.id;
        }

        public function set id(arg1:String):void
        {
            return;
        }

        public function get type():String
        {
            return this._apiCustomControl.type;
        }

        public function get x():Number
        {
            return this._apiCustomControl.x;
        }

        public function set x(arg1:Number):void
        {
            this._apiCustomControl.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._apiCustomControl.y;
        }

        public function set y(arg1:Number):void
        {
            this._apiCustomControl.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._apiCustomControl.width;
        }

        public function set width(arg1:Number):void
        {
            this._apiCustomControl.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._apiCustomControl.height;
        }

        public function set height(arg1:Number):void
        {
            this._apiCustomControl.height = arg1;
            return;
        }

        public function get enabled():Boolean
        {
            return this._apiCustomControl.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._apiCustomControl.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._apiCustomControl.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._apiCustomControl.visible = arg1;
            return;
        }

        public function get hitTest():Boolean
        {
            return false;
        }

        public function get interactiveObject():flash.display.InteractiveObject
        {
            return null;
        }

        public function get filters():Array
        {
            return new Array();
        }

        public function set filters(arg1:Array):void
        {
            return;
        }

        public function get alpha():Number
        {
            return 100;
        }

        public function set alpha(arg1:Number):void
        {
            return;
        }

        public function get text():String
        {
            return this._apiCustomControl.text;
        }

        public function set text(arg1:String):void
        {
            this._apiCustomControl.text = arg1;
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._apiCustomControl.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this._apiCustomControl.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this._apiCustomControl.removeFromContainer();
            return;
        }

        internal function onEvent(arg1:mgs.aurora.api.events.ApiInteractionEvent):void
        {
            this.dispatchEvent(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventToSystemInteractionEvent(arg1));
            return;
        }

        public function removeAllEventListeners():void
        {
            this._dispatcher.removeAllEventListeners();
            this._controlDispatcher.removeAllEventListeners();
            return;
        }

        public function dispose():void
        {
            this.removeAllEventListeners();
            this._dispatcher = null;
            this._controlDispatcher = null;
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        internal var _apiCustomControl:mgs.aurora.api.interfaces.controls.ICustomControl;

        internal var _controlDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;
    }
}


//                    class FBTextControlToApiTextControl
package mgs.aurora.modules.core.model.api.frames.controls.texts 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class FBTextControlToApiTextControl extends Object implements mgs.aurora.api.interfaces.controls.ICustomControl
    {
        public function FBTextControlToApiTextControl(arg1:mgs.aurora.common.interfaces.controls.ICustomControl, arg2:String)
        {
            super();
            this._framesBuilderCustomControl = arg1;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._controlDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg1, true);
            this._id = arg2;
            return;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._controlDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._framesBuilderCustomControl.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this._framesBuilderCustomControl.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this._framesBuilderCustomControl.removeFromContainer();
            return;
        }

        public function get x():Number
        {
            return this._framesBuilderCustomControl.x;
        }

        public function set x(arg1:Number):void
        {
            this._framesBuilderCustomControl.x = arg1;
            return;
        }

        public function get y():Number
        {
            return this._framesBuilderCustomControl.y;
        }

        public function set y(arg1:Number):void
        {
            this._framesBuilderCustomControl.y = arg1;
            return;
        }

        public function get width():Number
        {
            return this._framesBuilderCustomControl.width;
        }

        public function set width(arg1:Number):void
        {
            this._framesBuilderCustomControl.width = arg1;
            return;
        }

        public function get height():Number
        {
            return this._framesBuilderCustomControl.height;
        }

        public function set height(arg1:Number):void
        {
            this._framesBuilderCustomControl.height = arg1;
            return;
        }

        public function get locked():Boolean
        {
            return this._framesBuilderCustomControl.locked;
        }

        public function set locked(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.locked = arg1;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._framesBuilderCustomControl.interactiveObject as flash.display.DisplayObject;
        }

        public function get id():String
        {
            return this._framesBuilderCustomControl.id;
        }

        public function set id(arg1:String):void
        {
            this._framesBuilderCustomControl.id = arg1;
            return;
        }

        public function get type():String
        {
            return this._framesBuilderCustomControl.type;
        }

        public function get enabled():Boolean
        {
            return this._framesBuilderCustomControl.enabled;
        }

        public function set enabled(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.enabled = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this._framesBuilderCustomControl.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._framesBuilderCustomControl.visible = arg1;
            return;
        }

        public function get text():String
        {
            return this._framesBuilderCustomControl.text;
        }

        public function set text(arg1:String):void
        {
            this._framesBuilderCustomControl.text = arg1;
            return;
        }

        public function dispose():void
        {
            this._dispatcher.dispose();
            this._dispatcher = null;
            this._framesBuilderCustomControl = null;
            return;
        }

        internal function onEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            this.dispatchEvent(mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1));
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        internal var _id:String;

        internal var _framesBuilderCustomControl:mgs.aurora.common.interfaces.controls.ICustomControl;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _controlDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;
    }
}


//                    class TextGroup
package mgs.aurora.modules.core.model.api.frames.controls.texts 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class TextGroup extends Object implements flash.events.IEventDispatcher, mgs.aurora.api.interfaces.controls.IControlGroup
    {
        public function TextGroup(arg1:String, arg2:mgs.aurora.common.interfaces.controls.IControlGroup, arg3:flash.utils.Dictionary)
        {
            super();
            this._id = arg1;
            this._framesBuilderControlGroup = arg2;
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._groupDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(arg2, true);
            this._managerControls = arg3;
            return;
        }

        public function linkToGroup(arg1:String):void
        {
            this._framesBuilderControlGroup.linkToGroup(arg1);
            return;
        }

        public function unlinkFromGroup(arg1:String):void
        {
            this._framesBuilderControlGroup.unlinkFromGroup(arg1);
            return;
        }

        public function enableControls(arg1:String):void
        {
            this._framesBuilderControlGroup.enableControls(arg1);
            return;
        }

        public function enableAllControls():void
        {
            this._framesBuilderControlGroup.enableAllControls();
            return;
        }

        public function disableControls(arg1:String):void
        {
            this._framesBuilderControlGroup.disableControls(arg1);
            return;
        }

        public function disableAllControls():void
        {
            this._framesBuilderControlGroup.disableAllControls();
            return;
        }

        public function showControls(arg1:String):void
        {
            this._framesBuilderControlGroup.showControls(arg1);
            return;
        }

        public function showAllControls():void
        {
            this._framesBuilderControlGroup.showAllControls();
            return;
        }

        public function hideControls(arg1:String):void
        {
            this._framesBuilderControlGroup.hideControls(arg1);
            return;
        }

        public function hideAllControls():void
        {
            this._framesBuilderControlGroup.hideAllControls();
            return;
        }

        public function get enabledList():String
        {
            return this._framesBuilderControlGroup.enabledList;
        }

        public function get disabledList():String
        {
            return this._framesBuilderControlGroup.disabledList;
        }

        public function get visibleList():String
        {
            return this._framesBuilderControlGroup.visibleList;
        }

        public function get hiddenList():String
        {
            return this._framesBuilderControlGroup.hiddenList;
        }

        public function hasControls(arg1:String):Boolean
        {
            return this._framesBuilderControlGroup.hasControls(arg1);
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._managerControls[arg1] == null) 
            {
                loc2 = this._framesBuilderControlGroup.getControl(arg1) as mgs.aurora.common.interfaces.controls.ICustomControl;
                if (loc2 == null) 
                {
                    Debugger.trace("Control \"" + arg1 + "\" not found in button group \"" + this._id + "\"", "API - Text Groups", null, 16711680);
                    return null;
                }
                this._managerControls[arg1] = new mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(loc2, arg1);
            }
            return mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(this._managerControls[arg1]);
        }

        public function dispose():void
        {
            this._groupDispatcher.dispose();
            this._groupDispatcher = null;
            this._dispatcher.dispose();
            this._dispatcher = null;
            this._framesBuilderControlGroup = null;
            this._managerControls = null;
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._groupDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._groupDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="(" + this._id + ")  Text \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - Text Groups");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - Text Groups", null, 16711680);
            }
            return;
        }

        internal var _framesBuilderControlGroup:mgs.aurora.common.interfaces.controls.IControlGroup;

        internal var _groupDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _controls:flash.utils.Dictionary;

        internal var _id:String;

        internal var _managerControls:flash.utils.Dictionary;
    }
}


//                    class TextManager
package mgs.aurora.modules.core.model.api.frames.controls.texts 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class TextManager extends Object implements flash.events.IEventDispatcher, mgs.aurora.api.interfaces.controls.IControlManager
    {
        public function TextManager(arg1:mgs.aurora.common.interfaces.controls.IControlManager)
        {
            super();
            this._framesBuilderControlManager = arg1;
            this._framesBuilderDispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this._framesBuilderControlManager, true);
            this._dispatcher = new mgs.aurora.common.utilities.EventDispatcherDecorator(this);
            this._groups = new flash.utils.Dictionary();
            this._controls = new flash.utils.Dictionary();
            this._apiControls = new flash.utils.Dictionary();
            return;
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                this._dispatcher.removeEventListener(arg1, arg2, arg3);
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.removeEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3);
                }
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            if (this._dispatcher != null) 
            {
                if (!this.hasEventListener(arg1)) 
                {
                    this._framesBuilderDispatcher.addEventListener(mgs.aurora.modules.core.utils.CoreEventUtility.apiInteractionEventTypeToSystemInteractionEventType(arg1), this.onSystemInteractionEvent, arg3, arg4, true);
                }
                this._dispatcher.addEventListener(arg1, arg2, arg3, arg4, arg5);
            }
            return;
        }

        internal function onSystemInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.utils.CoreEventUtility.systemInteractionEventToApiInteractionEvent(arg1);
            var loc2:*="Texts  \"" + arg1.id + "\" - ";
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc2 = loc2 + "click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc2 = loc2 + "mouse down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc2 = loc2 + "mouse move";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc2 = loc2 + "mouse out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc2 = loc2 + "mouse over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc2 = loc2 + "mouse up";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc2 = loc2 + "mouse wheel";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.RIGHT_CLICK:
                {
                    loc2 = loc2 + "right click";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc2 = loc2 + "roll out";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc2 = loc2 + "roll over";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc2 = loc2 + "key down";
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc2 = loc2 + "roll up";
                    break;
                }
            }
            Debugger.trace(loc2, "API EVENT - Texts");
            var loc3:*;
            if (!(loc3 = this.dispatchEvent(loc1))) 
            {
                Debugger.trace(loc2 + " - NOT DISPATCHED", "API EVENT - Texts", null, 16711680);
            }
            return;
        }

        public function dispose():void
        {
            this._framesBuilderDispatcher.dispose();
            this._dispatcher.dispose();
            this.removeAllControls();
            this.removeAllGroups();
            this._framesBuilderControlManager = null;
            this._framesBuilderDispatcher = null;
            this._dispatcher = null;
            return;
        }

        public function removeAllGroups():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._groups;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.texts.TextGroup(this._groups[loc1]).dispose();
                delete this._groups[loc1];
            }
            this._groups = new flash.utils.Dictionary();
            this._framesBuilderControlManager.removeAllGroups();
            return;
        }

        public function clearAllControls():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._controls;
            for each (loc1 in loc3) 
            {
                loc1.dispose();
            }
            this._controls = new flash.utils.Dictionary();
            return;
        }

        public function getGroup(arg1:String):mgs.aurora.api.interfaces.controls.IControlGroup
        {
            if (this._groups[arg1] == null) 
            {
                Debugger.trace("Group \"" + arg1 + "\" not found in text manager", "API - Texts", null, 16711680);
                throw new Error("Group \"" + arg1 + "\" not found in text manager");
            }
            return mgs.aurora.modules.core.model.api.frames.controls.texts.TextGroup(this._groups[arg1]);
        }

        public function createGroups(arg1:String):void
        {
            var loc5:*=0;
            Debugger.trace("Create groups (" + arg1 + ")", "API - Texts");
            var loc1:*=arg1.split(",");
            var loc2:*=new Array();
            var loc3:*=loc1.length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                if (this._groups[loc1[loc4]] != null) 
                {
                    Debugger.trace("Group with id \"" + loc1[loc4] + "\" already in text manager", "API - Texts", null, 16711680);
                }
                else 
                {
                    loc2.push(loc1[loc4]);
                }
                ++loc4;
            }
            if ((loc3 = loc2.length) > 0) 
            {
                this._framesBuilderControlManager.createGroups(loc2.join(","));
                loc5 = 0;
                while (loc5 < loc3) 
                {
                    this._groups[loc2[loc5]] = new mgs.aurora.modules.core.model.api.frames.controls.texts.TextGroup(loc2[loc5], this._framesBuilderControlManager.getGroup(loc2[loc5]), this._controls);
                    ++loc5;
                }
            }
            return;
        }

        public function removeGroups(arg1:String):void
        {
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.texts.TextGroup(this._groups[loc1[loc3]]).dispose();
                delete this._groups[loc1[loc3]];
                ++loc3;
            }
            this._framesBuilderControlManager.removeGroups(arg1);
            return;
        }

        public function changeControl(arg1:String, arg2:String, arg3:String=""):void
        {
            this._framesBuilderControlManager.changeControl(arg1, arg2, arg3);
            if (this._controls[arg1] != null) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(this._controls[arg1]).dispose();
                delete this._controls[arg1];
            }
            if (this._apiControls[arg1] != null) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.texts.ApiTextControlToFBTextControl(this._controls[arg1]).dispose();
                delete this._apiControls[arg1];
            }
            return;
        }

        public function hasGroups(arg1:String):Boolean
        {
            var loc1:*=this._framesBuilderControlManager.hasGroups(arg1);
            return loc1;
        }

        public function addControl(arg1:mgs.aurora.api.interfaces.controls.ICustomControl, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void
        {
            if (this._apiControls[arg1.id] != null) 
            {
                Debugger.trace("Control with id \"" + arg1.id + "\" already in text manager", "API - Texts", null, 16711680);
            }
            else 
            {
                this._apiControls[arg1.id] = new mgs.aurora.modules.core.model.api.frames.controls.texts.ApiTextControlToFBTextControl(arg1);
                this._framesBuilderControlManager.addControl(this._apiControls[arg1.id], arg2, arg3);
            }
            return;
        }

        public function addControls(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>, arg2:flash.display.DisplayObjectContainer, arg3:String=null):void
        {
            var loc1:*=this.toFBTextControlVector(arg1);
            this._framesBuilderControlManager.addControls(loc1, arg2, arg3);
            return;
        }

        public function toFBTextControlVector(arg1:__AS3__.vec.Vector.<mgs.aurora.api.interfaces.controls.ICustomControl>):__AS3__.vec.Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>
        {
            var loc4:*=null;
            var loc1:*=new Vector.<mgs.aurora.common.interfaces.controls.ICustomControl>();
            var loc2:*=arg1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = arg1[loc3] as mgs.aurora.api.interfaces.controls.ICustomControl;
                if (this._apiControls[loc4.id] != null) 
                {
                    Debugger.trace("Control with id \"" + loc4.id + "\" already in text manager", "API - Texts", null, 16711680);
                }
                else 
                {
                    this._apiControls[loc4.id] = new mgs.aurora.modules.core.model.api.frames.controls.texts.ApiTextControlToFBTextControl(loc4);
                    loc1.push(this._apiControls[loc4.id]);
                }
                ++loc3;
            }
            return loc1;
        }

        public function removeControls(arg1:String):void
        {
            Debugger.trace("Remove controls (" + arg1 + ")", "API - Texts");
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                if (this._controls[loc1[loc3]] != null) 
                {
                    mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(this._controls[loc1[loc3]]).dispose();
                    delete this._controls[loc1[loc3]];
                }
                if (this._apiControls[loc1[loc3]] != null) 
                {
                    mgs.aurora.modules.core.model.api.frames.controls.texts.ApiTextControlToFBTextControl(this._apiControls[loc1[loc3]]).removeAllEventListeners();
                    delete this._apiControls[loc1[loc3]];
                }
                ++loc3;
            }
            this._framesBuilderControlManager.removeControls(arg1);
            return;
        }

        public function removeAllControls():void
        {
            var loc1:*=null;
            Debugger.trace("Remove controls", "API - Texts");
            var loc2:*=0;
            var loc3:*=this._controls;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(this._controls[loc1]).dispose();
                delete this._controls[loc1];
            }
            this._controls = new flash.utils.Dictionary();
            loc2 = 0;
            loc3 = this._apiControls;
            for (loc1 in loc3) 
            {
                mgs.aurora.modules.core.model.api.frames.controls.texts.ApiTextControlToFBTextControl(this._apiControls[loc1]).removeAllEventListeners();
                delete this._apiControls[loc1];
            }
            this._apiControls = new flash.utils.Dictionary();
            this._framesBuilderControlManager.removeAllControls();
            return;
        }

        public function linkControlsToGroups(arg1:String, arg2:String):void
        {
            this._framesBuilderControlManager.linkControlsToGroups(arg1, arg2);
            return;
        }

        public function unlinkControlsFromGroups(arg1:String, arg2:String):void
        {
            this._framesBuilderControlManager.unlinkControlsFromGroups(arg1, arg2);
            return;
        }

        public function lockAllControls():void
        {
            this._framesBuilderControlManager.lockAllControls();
            return;
        }

        public function unlockAllControls():void
        {
            this._framesBuilderControlManager.unlockAllControls();
            return;
        }

        public function enableControls(arg1:String):void
        {
            this._framesBuilderControlManager.enableControls(arg1);
            return;
        }

        public function enableAllControls():void
        {
            this._framesBuilderControlManager.enableAllControls();
            return;
        }

        public function disableControls(arg1:String):void
        {
            this._framesBuilderControlManager.disableControls(arg1);
            return;
        }

        public function disableAllControls():void
        {
            this._framesBuilderControlManager.disableAllControls();
            return;
        }

        public function showControls(arg1:String):void
        {
            this._framesBuilderControlManager.showControls(arg1);
            return;
        }

        public function showAllControls():void
        {
            this._framesBuilderControlManager.showAllControls();
            return;
        }

        public function hideControls(arg1:String):void
        {
            this._framesBuilderControlManager.hideControls(arg1);
            return;
        }

        public function hideAllControls():void
        {
            this._framesBuilderControlManager.hideAllControls();
            return;
        }

        public function get enabledList():String
        {
            return this._framesBuilderControlManager.enabledList;
        }

        public function get disabledList():String
        {
            return this._framesBuilderControlManager.disabledList;
        }

        public function get visibleList():String
        {
            return this._framesBuilderControlManager.visibleList;
        }

        public function get hiddenList():String
        {
            return this._framesBuilderControlManager.hiddenList;
        }

        public function getControl(arg1:String):mgs.aurora.api.interfaces.controls.IControl
        {
            var loc1:*=null;
            var loc2:*=null;
            Debugger.trace("Get control (" + arg1 + ")", "API - Text");
            if (this._controls[arg1] == null) 
            {
                loc2 = this._framesBuilderControlManager.getControl(arg1) as mgs.aurora.common.interfaces.controls.ICustomControl;
                if (loc2 == null) 
                {
                    Debugger.trace("Control \"" + arg1 + "\" not found in text manager", "API - Texts", null, 16711680);
                    return null;
                }
                this._controls[arg1] = new mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(loc2, arg1);
            }
            return mgs.aurora.modules.core.model.api.frames.controls.texts.FBTextControlToApiTextControl(this._controls[arg1]);
        }

        public function hasControls(arg1:String):Boolean
        {
            var loc1:*=this._framesBuilderControlManager.hasControls(arg1);
            return loc1;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.dispatchEvent(arg1) : false;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.hasEventListener(arg1) : false;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dispatcher != null ? this._dispatcher.willTrigger(arg1) : false;
        }

        internal var _framesBuilderControlManager:mgs.aurora.common.interfaces.controls.IControlManager;

        internal var _framesBuilderDispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _dispatcher:mgs.aurora.common.utilities.EventDispatcherDecorator;

        internal var _groups:flash.utils.Dictionary;

        internal var _apiControls:flash.utils.Dictionary;

        internal var _controls:flash.utils.Dictionary;
    }
}


//                  package tooltip
//                    class ToolTip
package mgs.aurora.modules.core.model.api.frames.controls.tooltip 
{
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    
    public class ToolTip extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.IToolTip
    {
        public function ToolTip(arg1:mgs.aurora.common.interfaces.frames.frame.assets.IToolTip)
        {
            super();
            this._framesBuilderToolTip = arg1;
            return;
        }

        public function remove():void
        {
            Debugger.trace("Remove", "API - Tooltips");
            this._framesBuilderToolTip.remove();
            return;
        }

        public function show(arg1:String, arg2:flash.geom.Point=null):void
        {
            if (!(arg1 == "") && !(arg1 == null)) 
            {
                if (arg2 == null) 
                {
                    Debugger.trace("Show - [" + arg1 + "]", "API - Tooltips");
                }
                else 
                {
                    Debugger.trace("Show - [" + arg1 + "], x:" + arg2.x + ", y:" + arg2.y, "API - Tooltips");
                }
                this._framesBuilderToolTip.show(arg1, arg2);
            }
            else 
            {
                Debugger.trace("Show - NO SHOW USING EMPTY OR NULL STRING", "API - Tooltips", null, 16711680);
            }
            return;
        }

        public function update(arg1:String):void
        {
            if (!(arg1 == "") && !(arg1 == null)) 
            {
                Debugger.trace("Update - [" + this.update + "]", "API - Tooltips");
                this._framesBuilderToolTip.update(arg1);
            }
            else 
            {
                Debugger.trace("Update - NO UPDATE USING EMPTY OR NULL STRING", "API - Tooltips", null, 16711680);
            }
            return;
        }

        internal var _framesBuilderToolTip:mgs.aurora.common.interfaces.frames.frame.assets.IToolTip;
    }
}


//                  class FrameControls
package mgs.aurora.modules.core.model.api.frames.controls 
{
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.api.interfaces.frames.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    import mgs.aurora.modules.core.model.api.frames.controls.buttons.*;
    import mgs.aurora.modules.core.model.api.frames.controls.graphics.*;
    import mgs.aurora.modules.core.model.api.frames.controls.texts.*;
    
    public class FrameControls extends Object implements mgs.aurora.api.interfaces.frames.IFrameControls
    {
        public function FrameControls(arg1:mgs.aurora.common.interfaces.frames.frame.assets.IFrameControls)
        {
            super();
            this._framesBuilderFrameControls = arg1;
            this._buttons = new mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonManager(this._framesBuilderFrameControls.buttons);
            this._texts = new mgs.aurora.modules.core.model.api.frames.controls.texts.TextManager(this._framesBuilderFrameControls.texts);
            this._graphics = new mgs.aurora.modules.core.model.api.frames.controls.graphics.GraphicManager(this._framesBuilderFrameControls.graphics);
            return;
        }

        public function get buttons():mgs.aurora.api.interfaces.controls.IControlManager
        {
            return this._buttons;
        }

        public function get graphics():mgs.aurora.api.interfaces.controls.IControlManager
        {
            return this._graphics;
        }

        public function get texts():mgs.aurora.api.interfaces.controls.IControlManager
        {
            return this._texts;
        }

        public function dispose():void
        {
            this._buttons.dispose();
            this._buttons = null;
            this._texts.dispose();
            this._texts = null;
            this._graphics.dispose();
            this._graphics = null;
            this._framesBuilderFrameControls = null;
            return;
        }

        internal var _framesBuilderFrameControls:mgs.aurora.common.interfaces.frames.frame.assets.IFrameControls;

        internal var _buttons:mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonManager;

        internal var _graphics:mgs.aurora.modules.core.model.api.frames.controls.graphics.GraphicManager;

        internal var _texts:mgs.aurora.modules.core.model.api.frames.controls.texts.TextManager;
    }
}


//                class Frame
package mgs.aurora.modules.core.model.api.frames 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.frames.*;
    import mgs.aurora.common.interfaces.frames.frame.*;
    import mgs.aurora.modules.core.model.api.frames.controls.*;
    import mgs.aurora.modules.core.model.api.frames.controls.chipSelector.*;
    import mgs.aurora.modules.core.model.api.frames.controls.headings.*;
    
    public class Frame extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.frames.IFrame
    {
        public function Frame(arg1:mgs.aurora.common.interfaces.frames.frame.IFrame)
        {
            super();
            this._framesBuilderFrame = arg1;
            this.canvas = this._framesBuilderFrame.canvas;
            this._controls = new mgs.aurora.modules.core.model.api.frames.controls.FrameControls(this._framesBuilderFrame.controls);
            this._chipSelector = new mgs.aurora.modules.core.model.api.frames.controls.chipSelector.ChipSelector(this._framesBuilderFrame.chipSelector);
            this._heading = new mgs.aurora.modules.core.model.api.frames.controls.headings.FrameHeadings(this._framesBuilderFrame.heading);
            return;
        }

        public function get chipSelector():mgs.aurora.api.interfaces.frames.IChipSelector
        {
            return this._chipSelector;
        }

        public function get controls():mgs.aurora.api.interfaces.frames.IFrameControls
        {
            return this._controls;
        }

        public function get heading():mgs.aurora.api.interfaces.frames.IFrameHeading
        {
            return this._heading;
        }

        public function get canvas():flash.display.Sprite
        {
            return this._canvas;
        }

        public function set canvas(arg1:flash.display.Sprite):void
        {
            this._canvas = arg1;
            return;
        }

        public function addGameLayout(arg1:XML):void
        {
            this._framesBuilderFrame.addGameLayout(arg1);
            return;
        }

        public function dispose():void
        {
            this._controls.dispose();
            return;
        }

        public function gamelayoutComplete():void
        {
            this.dispatchEvent(new mgs.aurora.api.events.ApiFrameEvent(mgs.aurora.api.events.ApiFrameEvent.GAME_FRAME_LAYOUT_COMPLETE));
            return;
        }

        internal var _framesBuilderFrame:mgs.aurora.common.interfaces.frames.frame.IFrame;

        internal var _chipSelector:mgs.aurora.api.interfaces.frames.IChipSelector;

        internal var _controls:mgs.aurora.modules.core.model.api.frames.controls.FrameControls;

        internal var _heading:mgs.aurora.api.interfaces.frames.IFrameHeading;

        internal var _canvas:flash.display.Sprite;
    }
}


//                class Frames
package mgs.aurora.modules.core.model.api.frames 
{
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.frames.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.interfaces.frames.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.api.frames.controls.buttons.*;
    import mgs.aurora.modules.core.model.api.frames.controls.texts.*;
    import mgs.aurora.modules.core.model.api.frames.controls.tooltip.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.view.bubble.*;
    import mgs.aurora.modules.core.view.module.*;
    
    public class Frames extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.IFrames
    {
        public function Frames(arg1:mgs.aurora.common.interfaces.frames.IFrames, arg2:String)
        {
            super();
            this._frames = arg1;
            this._currentFrame = new mgs.aurora.modules.core.model.api.frames.Frame(this._frames.currentFrame);
            this._bonusBubbleTrigger = this._frames.bonusBubbleTrigger;
            this._bonusBubbleCoordinates = null;
            this._tooltip = new mgs.aurora.modules.core.model.api.frames.controls.tooltip.ToolTip(this._frames.tooltip);
            this._theme = arg2;
            return;
        }

        public function get bonusBubbleTrigger():flash.display.InteractiveObject
        {
            return this._bonusBubbleTrigger;
        }

        public function set bonusBubbleTrigger(arg1:flash.display.InteractiveObject):void
        {
            var loc4:*=null;
            var loc1:*=1118481;
            if (this._bonusBubbleTrigger == arg1) 
            {
                loc1 = 16711680;
            }
            Debugger.trace("Set Bonus Bubble Trigger (" + arg1 + ")", "API - Bonus Bubble", null, loc1);
            this._bonusBubbleTrigger = arg1;
            var loc2:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc3:*;
            if ((loc3 = loc2.retrieveMediator(mgs.aurora.modules.core.view.bubble.BonusBubbleMediator.NAME) as mgs.aurora.modules.core.view.bubble.BonusBubbleMediator) == null) 
            {
                if ((loc4 = loc2.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator).BBTrigger == null) 
                {
                    loc4.BBTrigger = arg1;
                }
            }
            else 
            {
                this.dispatchEvent(new mgs.aurora.modules.core.events.api.FramesEvent(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_BUBBLE_TRIGGER_CHANGE));
            }
            return;
        }

        public function get currentFrame():mgs.aurora.api.interfaces.frames.IFrame
        {
            return this._currentFrame;
        }

        public function get tooltip():mgs.aurora.api.interfaces.IToolTip
        {
            return this._tooltip;
        }

        public function get clockFeatureOn():Boolean
        {
            return this._frames.clockFeatureOn;
        }

        public function set clockFeatureOn(arg1:Boolean):void
        {
            this._frames.clockFeatureOn = arg1;
            return;
        }

        public function switchTo(arg1:String):void
        {
            mgs.aurora.modules.core.model.api.frames.controls.texts.TextManager(this._currentFrame.controls.texts).clearAllControls();
            mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonManager(this._currentFrame.controls.buttons).clearAllControls();
            this._currentFrame.dispose();
            this._frames.switchTo(arg1, this._theme);
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.FramesEvent(mgs.aurora.modules.core.events.api.FramesEvent.MODULE_SWITCHED_FRAME, arg1));
            return;
        }

        public override function dispose():void
        {
            this.removeAllEventListeners();
            this._currentFrame.dispose();
            this._currentFrame = null;
            this._frames.removeFromContainer();
            this._frames = null;
            return;
        }

        public function allowSystemShortcuts(arg1:Boolean):void
        {
            Debugger.trace("Allow System Shortcuts (" + arg1 + ")", "API - Frames");
            return;
        }

        public function set bonusBubbleCoordinates(arg1:flash.geom.Point):void
        {
            if (this._bonusBubbleCoordinates == null || !this._bonusBubbleCoordinates.equals(arg1)) 
            {
                if (arg1 == null) 
                {
                    Debugger.trace("Removing Bonus Bubble Coordinates", "API - Bonus Bubble");
                }
                else 
                {
                    Debugger.trace("Set Bonus Bubble Coordinates ( x:" + arg1.x + ", y:" + arg1.y + " )", "API - Bonus Bubble");
                }
                this._bonusBubbleCoordinates = arg1;
                dispatchEvent(new mgs.aurora.modules.core.events.api.FramesEvent(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_BUBBLE_COORDINATES_CHANGE));
            }
            else 
            {
                Debugger.trace("Set Bonus Bubble Coordinates - already set to ( x:" + arg1.x + ", y:" + arg1.y + " )", "API - Bonus Bubble", null, 16711680);
            }
            return;
        }

        public function get bonusBubbleCoordinates():flash.geom.Point
        {
            if (this._bonusBubbleCoordinates == null) 
            {
                Debugger.trace("Get Bonus Bubble Coordinates - [Current mouse pointer]", "API - Bonus Bubble");
            }
            else 
            {
                Debugger.trace("Get Bonus Bubble Coordinates - [ x:" + this._bonusBubbleCoordinates.x + ", y:" + this._bonusBubbleCoordinates.y + " ]", "API - Bonus Bubble");
            }
            return this._bonusBubbleCoordinates;
        }

        public function getBonusBubbleCoordinates():flash.geom.Point
        {
            return this._bonusBubbleCoordinates;
        }

        public function set bonusBubbleEnabled(arg1:Boolean):void
        {
            dispatchEvent(new mgs.aurora.modules.core.events.api.FramesEvent(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_ENABLED_SET, arg1));
            return;
        }

        public function get userTypeLabel():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*="";
            if (uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
            {
                if (uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) == mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER && (loc2[mgs.aurora.common.enums.configMapping.SessionConfig.LOGINTYPE] == mgs.aurora.common.enums.raptorSession.LoginType.UPE_FULL || loc2[mgs.aurora.common.enums.configMapping.SessionConfig.LOGINTYPE] == mgs.aurora.common.enums.raptorSession.LoginType.UPE_INTERIM)) 
                {
                    loc3 = "practice";
                }
                else if (uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER) 
                {
                    if (uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) != mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER) 
                    {
                        if (uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]) == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
                        {
                            loc3 = "fun";
                        }
                    }
                    else 
                    {
                        loc3 = "demo";
                    }
                }
                else 
                {
                    loc3 = "guest";
                }
            }
            else 
            {
                loc3 = "real";
            }
            return loc3;
        }

        public function switchComplete():void
        {
            this._currentFrame = null;
            this._currentFrame = new mgs.aurora.modules.core.model.api.frames.Frame(this._frames.currentFrame);
            this.dispatchEvent(new mgs.aurora.api.events.ApiFrameEvent(mgs.aurora.api.events.ApiFrameEvent.FRAME_SWITCHING_COMPLETE));
            return;
        }

        internal var _frames:mgs.aurora.common.interfaces.frames.IFrames;

        internal var _bonusBubbleTrigger:flash.display.InteractiveObject;

        internal var _currentFrame:mgs.aurora.modules.core.model.api.frames.Frame;

        internal var _tooltip:mgs.aurora.modules.core.model.api.frames.controls.tooltip.ToolTip;

        internal var _bonusBubbleCoordinates:flash.geom.Point;

        internal var _theme:String;
    }
}


//              package help
//                class Help
package mgs.aurora.modules.core.model.api.help 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.modules.core.events.api.*;
    
    public class Help extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.IHelp
    {
        public function Help()
        {
            super();
            return;
        }

        public function launch(arg1:String=null):void
        {
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.HelpEvent(mgs.aurora.modules.core.events.api.HelpEvent.LAUNCH, arg1));
            return;
        }
    }
}


//              package localized
//                class GameStrings
package mgs.aurora.modules.core.model.api.localized 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.interfaces.*;
    
    public class GameStrings extends Object implements mgs.aurora.api.interfaces.IGameStrings
    {
        public function GameStrings()
        {
            super();
            this._readStrings = new Object();
            return;
        }

        public function setStrings(arg1:XML, arg2:XML):void
        {
            this._englishStrings = arg1;
            this._foreignStrings = arg2;
            return;
        }

        public function setMappings(arg1:XML):void
        {
            Debugger.trace("Game Strings - Set mappings configs", "SYSTEM");
            this._readStrings = new Object();
            this._mappings = arg1.copy();
            return;
        }

        public function setMultipleMappings(arg1:__AS3__.vec.Vector.<XML>):void
        {
            var mappings:__AS3__.vec.Vector.<XML>;
            var mappingsLen:uint;
            var i:uint;
            var source:XML;
            var node:XML;
            var targetNode:XMLList;

            var loc1:*;
            source = null;
            node = null;
            targetNode = null;
            mappings = arg1;
            Debugger.trace("Game Strings - Set multiple mappings configs", "SYSTEM");
            this._readStrings = new Object();
            this._mappings = mappings.shift().copy();
            mappingsLen = mappings.length;
            i = 0;
            while (i < mappingsLen) 
            {
                source = mappings[i];
                var loc2:*=0;
                var loc3:*=source.children();
                for each (node in loc3) 
                {
                    var loc5:*=0;
                    var loc6:*=this._mappings.string;
                    var loc4:*=new XMLList("");
                    for each (var loc7:* in loc6) 
                    {
                        var loc8:*;
                        with (loc8 = loc7) 
                        {
                            if (@id == node.@id) 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    targetNode = loc4;
                    if (targetNode.length() == 0) 
                    {
                        this._mappings.appendChild(node);
                        continue;
                    }
                    if (node.@mappedId.length() > 0) 
                    {
                        targetNode.@mappedId = node.@mappedId;
                    }
                    if (!(node.@type.length() > 0)) 
                    {
                        continue;
                    }
                    targetNode.@type = node.@type;
                }
                ++i;
            }
            return;
        }

        public function getString(arg1:String):String
        {
            var loc1:*=this.getStringInternal(arg1);
            Debugger.trace("Get game string [" + arg1 + "] - " + loc1, "SYSTEM");
            return loc1;
        }

        internal function getStringInternal(arg1:String):String
        {
            var id:String;
            var returnValue:String;
            var mappedId:String;
            var type:String;

            var loc1:*;
            mappedId = null;
            type = null;
            id = arg1;
            returnValue = "";
            if (this._readStrings[id] != null) 
            {
                returnValue = new String(this._readStrings[id]);
            }
            else if (this._mappings != null) 
            {
                var loc3:*=0;
                var loc4:*=this._mappings.string;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@id == id) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                mappedId = loc2.@mappedId;
                if (mappedId != "") 
                {
                    loc3 = 0;
                    loc4 = this._mappings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@id == id) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    type = loc2.@type;
                    loc2 = type.toLowerCase();
                    switch (loc2) 
                    {
                        case "lang":
                        {
                            loc3 = 0;
                            loc4 = this._foreignStrings.string;
                            loc2 = new XMLList("");
                            for each (loc5 in loc4) 
                            {
                                with (loc6 = loc5) 
                                {
                                    if (@id == mappedId) 
                                    {
                                        loc2[loc3] = loc5;
                                    }
                                }
                            }
                            if (loc2.length() > 0) 
                            {
                                loc3 = 0;
                                loc4 = this._foreignStrings.string;
                                loc2 = new XMLList("");
                                for each (loc5 in loc4) 
                                {
                                    with (loc6 = loc5) 
                                    {
                                        if (@id == mappedId) 
                                        {
                                            loc2[loc3] = loc5;
                                        }
                                    }
                                }
                                returnValue = loc2.text().toString();
                            }
                            else 
                            {
                                loc3 = 0;
                                loc4 = this._englishStrings.string;
                                loc2 = new XMLList("");
                                for each (loc5 in loc4) 
                                {
                                    with (loc6 = loc5) 
                                    {
                                        if (@id == mappedId) 
                                        {
                                            loc2[loc3] = loc5;
                                        }
                                    }
                                }
                                returnValue = loc2.text().toString();
                            }
                            break;
                        }
                        case "en":
                        default:
                        {
                            loc3 = 0;
                            loc4 = this._englishStrings.string;
                            loc2 = new XMLList("");
                            for each (loc5 in loc4) 
                            {
                                with (loc6 = loc5) 
                                {
                                    if (@id == mappedId) 
                                    {
                                        loc2[loc3] = loc5;
                                    }
                                }
                            }
                            returnValue = loc2.text().toString();
                            break;
                        }
                    }
                }
                this._readStrings[id] = returnValue;
            }
            return returnValue;
        }

        public function replaceStringIds(arg1:XML, arg2:String, arg3:Object=null):XML
        {
            var loc1:*=arg2.split(",");
            var loc2:*=arg1.copy();
            this.traverseAndReplace(XMLList(loc2), loc1, arg3);
            return loc2;
        }

        internal function traverseAndReplace(arg1:XMLList, arg2:Array, arg3:Object=null):void
        {
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=null;
            var loc1:*=arg1.length();
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                if ((loc3 = arg1[loc2]).children().length() > 0) 
                {
                    this.traverseAndReplace(loc3.children(), arg2, arg3);
                }
                loc4 = arg2.length;
                loc5 = 0;
                while (loc5 < loc4) 
                {
                    loc6 = arg2[loc5];
                    if (loc3.@[loc6].length() > 0) 
                    {
                        loc3.@[loc6] = this.replacePlaceholders(this.getStringInternal(loc3.@[loc6]), arg3);
                    }
                    ++loc5;
                }
                ++loc2;
            }
            return;
        }

        public function replacePlaceholders(arg1:String, arg2:Object):String
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg2 != null) 
            {
                var loc3:*=0;
                var loc4:*=arg2;
                for (loc1 in loc4) 
                {
                    loc2 = new RegExp("{" + loc1 + "}", "g");
                    arg1 = arg1.replace(loc2, arg2[loc1]);
                }
            }
            return arg1;
        }

        internal var _englishStrings:XML;

        internal var _foreignStrings:XML;

        internal var _mappings:XML;

        internal var _readStrings:Object;
    }
}


//                class Local
package mgs.aurora.modules.core.model.api.localized 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.model.*;
    
    public class Local extends Object implements mgs.aurora.api.interfaces.ILocal
    {
        public function Local()
        {
            super();
            return;
        }

        public function set localString(arg1:mgs.aurora.modules.core.model.api.localized.LocalString):void
        {
            this._localString = arg1;
            return;
        }

        public function get localString():mgs.aurora.modules.core.model.api.localized.LocalString
        {
            return this._localString;
        }

        public function getStringFromId(arg1:String):String
        {
            var loc1:*=this.localString.getStringFromId(arg1);
            Debugger.trace("Get localized string from id (" + arg1 + ") - [" + loc1 + "]", "API - Localized");
            return loc1;
        }

        public function registerStrings(arg1:__AS3__.vec.Vector.<XML>):void
        {
            Debugger.trace("Register Strings (" + arg1 + ")", "API - Localized");
            this._localString.registerStrings(arg1);
            return;
        }

        public function translateAttributeValues(arg1:XML, arg2:String):void
        {
            Debugger.trace("Translate Attribute Values (" + arg1 + ", " + arg2 + ")", "API - Localized");
            this._localString.translateAttributeValues(arg1, arg2);
            return;
        }

        public function getCurrencySymbol(arg1:String):String
        {
            var loc1:*=mgs.aurora.modules.core.model.SessionConfigProxy(mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME).retrieveProxy(mgs.aurora.modules.core.model.SessionConfigProxy.NAME));
            return loc1.getCurrencySymbol(arg1);
        }

        public function getAllString():XML
        {
            return this._localString.stringsXML;
        }

        internal var _localString:mgs.aurora.modules.core.model.api.localized.LocalString;
    }
}


//                class LocalString
package mgs.aurora.modules.core.model.api.localized 
{
    import __AS3__.vec.*;
    import mgs.aurora.common.utilities.*;
    
    public class LocalString extends Object
    {
        public function LocalString(arg1:XML)
        {
            super();
            this._stringsXML = arg1;
            this._stringsList = new Vector.<XML>();
            return;
        }

        public function get stringsXML():XML
        {
            return this._stringsXML;
        }

        public function clearRegisteredList():void
        {
            this._stringsList.splice(0, this._stringsList.length);
            return;
        }

        public function getStringFromId(arg1:String):String
        {
            var id:String;
            var textVal:String;
            var registeredIndex:int;

            var loc1:*;
            id = arg1;
            textVal = "";
            registeredIndex = 0;
            while (registeredIndex < this._stringsList.length && textVal == "") 
            {
                if (this._stringsList[registeredIndex].hasOwnProperty("String")) 
                {
                    var loc3:*=0;
                    var loc4:*=this._stringsList[registeredIndex].String;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@id == id) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    textVal = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc2.@text);
                }
                ++registeredIndex;
            }
            if (textVal == "") 
            {
                loc3 = 0;
                loc4 = this._stringsXML.string;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@ID == id) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                textVal = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc2.@text);
            }
            return textVal;
        }

        public function registerStrings(arg1:__AS3__.vec.Vector.<XML>):void
        {
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                this._stringsList.push(arg1[loc1]);
                ++loc1;
            }
            return;
        }

        public function translateAttributeValues(arg1:XML, arg2:String):void
        {
            return this.traverseXML(XMLList(arg1), arg2);
        }

        internal function traverseXML(arg1:XMLList, arg2:String):void
        {
            var loc3:*=null;
            var loc1:*=arg1.length();
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                if (arg1[loc2].children().length() > 0) 
                {
                    this.traverseXML(arg1[loc2].children(), arg2);
                }
                if (arg1[loc2].hasOwnProperty("@" + arg2)) 
                {
                    loc3 = this.getStringFromIdForXML(arg1[loc2].@[arg2]);
                    arg1[loc2].@[arg2] = loc3;
                }
                ++loc2;
            }
            return;
        }

        internal function getStringFromIdForXML(arg1:String):String
        {
            var loc1:*=this.getStringFromId(arg1);
            if (loc1 == "") 
            {
                loc1 = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(arg1);
            }
            return loc1;
        }

        internal var _stringsXML:XML;

        internal var _stringsList:__AS3__.vec.Vector.<XML>;
    }
}


//              package module
//                class ModuleInformation
package mgs.aurora.modules.core.model.api.module 
{
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.module.*;
    
    public class ModuleInformation extends Object implements mgs.aurora.api.interfaces.IModuleInformation
    {
        public function ModuleInformation()
        {
            super();
            return;
        }

        public function get gameSet():XMLList
        {
            return this._gameSet;
        }

        public function set gameSet(arg1:XMLList):void
        {
            this._gameSet = arg1;
            return;
        }

        public function set activeModuleTraits(arg1:mgs.aurora.api.module.ModuleTraits):void
        {
            this._activeModuleTraits = arg1;
            return;
        }

        public function get activeModuleTraits():mgs.aurora.api.module.ModuleTraits
        {
            return this._activeModuleTraits;
        }

        public function get extraModuleData():mgs.aurora.api.module.ExtraModuleData
        {
            return this._extraModuleData;
        }

        public function set extraModuleData(arg1:mgs.aurora.api.module.ExtraModuleData):void
        {
            this._extraModuleData = arg1;
            return;
        }

        internal var _gameSet:XMLList;

        internal var _activeModuleTraits:mgs.aurora.api.module.ModuleTraits;

        internal var _extraModuleData:mgs.aurora.api.module.ExtraModuleData;
    }
}


//              package multiplayer
//                package vo
//                  class AvatarMetaDataImpl
package mgs.aurora.modules.core.model.api.multiplayer.vo 
{
    import mgs.aurora.api.interfaces.multiplayer.*;
    import mgs.aurora.common.vo.multiplayer.*;
    
    public class AvatarMetaDataImpl extends Object implements mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata
    {
        public function AvatarMetaDataImpl(arg1:mgs.aurora.common.vo.multiplayer.AvatarMetaData)
        {
            super();
            this.data = arg1;
            return;
        }

        public function get imageName():String
        {
            return this.data.imageName;
        }

        public function get isRejected():String
        {
            return this.data.isRejected;
        }

        public function get pokerUserAccountID():String
        {
            return this.data.pokerUserAccountID;
        }

        public function get version():String
        {
            return this.data.version;
        }

        internal var data:mgs.aurora.common.vo.multiplayer.AvatarMetaData;
    }
}


//                class MPFPacketResponse
package mgs.aurora.modules.core.model.api.multiplayer 
{
    import mgs.aurora.api.interfaces.multiplayer.*;
    
    public class MPFPacketResponse extends Object implements mgs.aurora.api.interfaces.multiplayer.IMPFPacketResponse
    {
        public function MPFPacketResponse(arg1:XML, arg2:String)
        {
            super();
            this._response = arg1;
            this._socketID = arg2;
            return;
        }

        public function get response():XML
        {
            return this._response;
        }

        public function get socketID():String
        {
            return this._socketID;
        }

        internal var _response:XML;

        internal var _socketID:String;
    }
}


//                class Multiplayer
package mgs.aurora.modules.core.model.api.multiplayer 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.events.multiplayer.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.multiplayer.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.api.multiplayer.vo.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.mutiplayer.*;
    
    public class Multiplayer extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.IMultiplayer
    {
        public function Multiplayer()
        {
            super();
            return;
        }

        public function cancelAvatarImage(arg1:String):void
        {
            Debugger.trace("Cancel Avatar Image (" + arg1 + ")", "API - MPF Avatar");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.CANCEL_AVATAR_IMAGE, arg1));
            return;
        }

        public function fetchAvatarMetaData(arg1:String=null):void
        {
            Debugger.trace("Fetch Avatar MetaData", "API - MPF Avatar");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.FETCH_AVATAR_METADATA, arg1));
            return;
        }

        public function avatarMetaDataReceived(arg1:__AS3__.vec.Vector.<mgs.aurora.common.vo.multiplayer.AvatarMetaData>):void
        {
            Debugger.trace("Avatar MetaData Received", "API EVENT - MPF Avatar");
            var loc1:*=new Vector.<mgs.aurora.api.interfaces.multiplayer.IAvatarMetadata>();
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc1.push(new mgs.aurora.modules.core.model.api.multiplayer.vo.AvatarMetaDataImpl(arg1[loc2]));
                ++loc2;
            }
            dispatchEvent(new mgs.aurora.api.events.multiplayer.ApiMpfAvatarEvent(mgs.aurora.api.events.multiplayer.ApiMpfAvatarEvent.AVATAR_METADATA_RECEIVED, null, null, loc1));
            return;
        }

        public function launchAvatarUploadPage():void
        {
            Debugger.trace("Launch Avatar Upload Page", "API - MPF Avatar");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.LAUNCH_AVATAR_EXTERNAL));
            return;
        }

        public function loadAvatarImage(arg1:String):void
        {
            Debugger.trace("Load Avatar Image (" + arg1 + ")", "API - MPF Avatar");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.AVATAR_FILE_REQUEST, arg1));
            return;
        }

        public function avatarLoaded(arg1:*):void
        {
            Debugger.trace("Avatar Loaded", "API EVENT - MPF Avatar");
            dispatchEvent(new mgs.aurora.api.events.multiplayer.ApiMpfAvatarEvent(mgs.aurora.api.events.multiplayer.ApiMpfAvatarEvent.AVATAR_RECEIVED, arg1));
            return;
        }

        public function sendPacket(arg1:mgs.aurora.api.interfaces.multiplayer.IMPFPacketRequest):void
        {
            Debugger.trace("Send packet - (" + arg1.data + ")", "API - MPF Packets");
            Debugger.trace(arg1, "API - MPF Packets Content");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.SEND_PACKET, arg1));
            return;
        }

        public function packetReceived(arg1:mgs.aurora.api.interfaces.multiplayer.IMPFPacketResponse):void
        {
            Debugger.trace("Packet response - (" + arg1.response + ")", "API EVENT - MPF Packets");
            Debugger.trace(arg1, "API EVENT - MPF Packets Content");
            dispatchEvent(new mgs.aurora.api.events.multiplayer.ApiMpfPacketEvent(mgs.aurora.api.events.multiplayer.ApiMpfPacketEvent.PACKET_RECEIVED, arg1));
            return;
        }

        public function getMPFData():mgs.aurora.api.interfaces.multiplayer.IMPFData
        {
            Debugger.trace("Get MPF data", "API - MPF");
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME).retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy.NAME) as mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy;
            return loc1.buildMPFDataObj();
        }

        public function requestNewAlias():void
        {
            Debugger.trace("Request New Alias", "API - MPF Alias");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.REQUEST_NEW_ALIAS));
            return;
        }

        public function newAliasReceived(arg1:String):void
        {
            Debugger.trace("New Alias Received - (" + arg1 + ")", "API EVENT - MPF Alias");
            dispatchEvent(new mgs.aurora.api.events.multiplayer.ApiMpfAliasEvent(mgs.aurora.api.events.multiplayer.ApiMpfAliasEvent.NEW_ALIAS_RECEIVED, arg1));
            return;
        }

        public function newAliasRequestCancelled():void
        {
            Debugger.trace("New Alias Request Cancelled", "API EVENT - MPF Alias");
            dispatchEvent(new mgs.aurora.api.events.multiplayer.ApiMpfAliasEvent(mgs.aurora.api.events.multiplayer.ApiMpfAliasEvent.ACTIVATION_CANCELLED));
            return;
        }

        public function cancelNewAliasRequest():void
        {
            Debugger.trace("Cancel New Alias Request", "API - MPF Alias");
            dispatchEvent(new mgs.aurora.modules.core.events.api.MultiplayerEvent(mgs.aurora.modules.core.events.api.MultiplayerEvent.CANCEL_NEW_ALIAS_REQUEST));
            return;
        }

        public function getTournamentID():String
        {
            Debugger.trace("Get MPF tournamentID", "API - MPF");
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME).retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy.NAME) as mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy;
            Debugger.trace("Get MPF tournamentID " + loc1.tournamentID.toString(), "API - MPF");
            return loc1.tournamentID;
        }

        public function setTouramentID(arg1:String):void
        {
            var loc3:*=null;
            Debugger.trace("Set MPF tournamentID", "API - MPF");
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            if (loc1.hasProxy(mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy.NAME)) 
            {
                (loc3 = mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy.NAME))).tournamentID = arg1;
            }
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CURTOURNAMENTID] = arg1;
            return;
        }
    }
}


//              package preloader
//                class Preloader
package mgs.aurora.modules.core.model.api.preloader 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.modules.core.events.api.*;
    
    public class Preloader extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.IPreloader
    {
        public function Preloader()
        {
            super();
            this._visible = true;
            this._backgroundAlpha = 1;
            return;
        }

        public function get visible():Boolean
        {
            return this._visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this._visible = arg1;
            Debugger.trace("Set preloader visible (" + arg1 + ")", "API - Preloader");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.VISIBILE, arg1));
            return;
        }

        public function get backgroundAlpha():Number
        {
            return this._backgroundAlpha;
        }

        public function set backgroundAlpha(arg1:Number):void
        {
            this._backgroundAlpha = arg1;
            Debugger.trace("Set preloader background alpha (" + arg1 + ")", "API - Preloader");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.BACKGROUND_ALPHA, arg1));
            return;
        }

        public function create(arg1:int):void
        {
            Debugger.trace("Create preloader (" + arg1 + ")", "API - Preloader");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.CREATE, arg1));
            return;
        }

        public function setTextLabel(arg1:String):void
        {
            Debugger.trace("Set preloader text label (" + arg1 + ")", "API - Preloader");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.TEXT_LABEL, arg1));
            return;
        }

        public function resetBackgroundAlpha(arg1:Number):void
        {
            this._backgroundAlpha = arg1;
            return;
        }

        public function resetVisible(arg1:Boolean):void
        {
            this._visible = arg1;
            return;
        }

        public function setFileCount(arg1:uint):void
        {
            Debugger.trace("Set preloader file count (" + arg1 + ")", "API - Preloader");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.FILE_COUNT_CHANGE, arg1));
            return;
        }

        public function __externalLoaderProgress(arg1:Number):void
        {
            Debugger.trace("Set preloader progress (" + arg1 + ")", "API - Preloader Set Progress");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.EXTERNAL_LOADER_PROGRESS, arg1));
            return;
        }

        public function __getIternalLoaderProgress():void
        {
            Debugger.trace("Get preloader progress: ", "API - Preloader Set Progress");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.PreloaderEvent(mgs.aurora.modules.core.events.api.PreloaderEvent.GET_INTERNAL_LOADER_PROGRESS, null));
            return;
        }

        public function setInternalPreloaderProgress(arg1:Number):void
        {
            this._internalPreloaderProgress = arg1;
            return;
        }

        public function __getInternalPreloaderProgress():Number
        {
            return this._internalPreloaderProgress;
        }

        internal var _visible:Boolean;

        internal var _backgroundAlpha:Number;

        internal var _internalPreloaderProgress:Number;
    }
}


//              package profiling
//                class ActivityProfiling
package mgs.aurora.modules.core.model.api.profiling 
{
    import mgs.aurora.api.interfaces.profiling.*;
    
    public class ActivityProfiling extends Object implements mgs.aurora.api.interfaces.profiling.IActivityProfiling
    {
        public function ActivityProfiling()
        {
            super();
            return;
        }

        public function startActivityProfilingSession(arg1:int, arg2:int):void
        {
            Debugger.trace("Start Activity Profiling Session - " + arg1 + ", " + arg2, "API - Profiling");
            return;
        }

        public function incrementActivityProfilingCounter(arg1:uint, arg2:int, arg3:int):void
        {
            Debugger.trace("Increment Activity Profiling Session - " + arg1 + ", " + arg2 + ", " + arg3, "API - Profiling");
            return;
        }

        public function endActivityProfilingSession(arg1:int, arg2:int):void
        {
            Debugger.trace("End Activity Profiling Session - " + arg1 + ", " + arg2, "API - Profiling");
            return;
        }
    }
}


//                class Profiling
package mgs.aurora.modules.core.model.api.profiling 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.profiling.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.utils.*;
    
    public class Profiling extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.IProfiling
    {
        public function Profiling()
        {
            super();
            this._activity = new mgs.aurora.modules.core.model.api.profiling.ActivityProfiling();
            return;
        }

        public function get activityProfiling():mgs.aurora.api.interfaces.profiling.IActivityProfiling
        {
            return this._activity;
        }

        public function sendStep(arg1:String, arg2:String):void
        {
            var loc1:*=new flash.utils.Dictionary();
            var loc2:*=mgs.aurora.modules.core.model.GameSetProxy(mgs.aurora.modules.core.utils.PureMVCUtility.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).gameId;
            loc1.stepRef = loc2 + "||" + arg2;
            loc1.stepId = arg1;
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ProfilingEvent(mgs.aurora.modules.core.events.api.ProfilingEvent.SEND_STEP, loc1));
            return;
        }

        public static const GAME_REQUEST:String="game_request";

        internal var _activity:mgs.aurora.modules.core.model.api.profiling.ActivityProfiling;
    }
}


//              package rightClick
//                class RightClick
package mgs.aurora.modules.core.model.api.rightClick 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    
    public class RightClick extends Object implements mgs.aurora.api.interfaces.IRightClick
    {
        public function RightClick()
        {
            super();
            this._rightClickDict = new flash.utils.Dictionary(true);
            return;
        }

        public function addRightClick(arg1:flash.display.MovieClip):void
        {
            this._rightClickDict[arg1.name] = new Object();
            this._rightClickDict[arg1.name].target = arg1;
            this._rightClickDict[arg1.name].watch = false;
            arg1.addEventListener(flash.events.MouseEvent.CLICK, this.onMouseLeftClick);
            return;
        }

        public function removeRightClick(arg1:flash.display.MovieClip):void
        {
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, this.onMouseLeftClick);
            delete this._rightClickDict[arg1.name];
            return;
        }

        public function onRightClick(arg1:flash.geom.Point):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=this._rightClickDict;
            for each (loc1 in loc4) 
            {
                if (!loc1.target.hitTestPoint(arg1.x, arg1.y, true)) 
                {
                    continue;
                }
                loc2 = new mgs.aurora.api.events.ApiMouseEvent(mgs.aurora.api.events.ApiMouseEvent.RIGHT_CLICK, loc1.target.name, new flash.events.MouseEvent(flash.events.MouseEvent.CLICK));
                loc1.target.dispatchEvent(loc2);
                return;
            }
            return;
        }

        internal function onMouseLeftClick(arg1:flash.events.MouseEvent):void
        {
            if (arg1.shiftKey) 
            {
                this.onRightClick(new flash.geom.Point(arg1.stageX, arg1.stageY));
            }
            return;
        }

        internal var _rightClickDict:flash.utils.Dictionary;
    }
}


//              package server
//                class FileResponse
package mgs.aurora.modules.core.model.api.server 
{
    import mgs.aurora.api.interfaces.server.*;
    
    public class FileResponse extends Object implements mgs.aurora.api.interfaces.server.IFileResponse
    {
        public function FileResponse()
        {
            super();
            return;
        }

        public function get content():*
        {
            return this._content;
        }

        public function set content(arg1:*):void
        {
            this._content = arg1;
            return;
        }

        public function get request():mgs.aurora.api.interfaces.server.IFileRequest
        {
            return this._request;
        }

        public function set request(arg1:mgs.aurora.api.interfaces.server.IFileRequest):void
        {
            this._request = arg1;
            return;
        }

        internal var _content:*;

        internal var _request:mgs.aurora.api.interfaces.server.IFileRequest;
    }
}


//                class PacketResponse
package mgs.aurora.modules.core.model.api.server 
{
    import mgs.aurora.api.interfaces.server.*;
    
    public class PacketResponse extends Object implements mgs.aurora.api.interfaces.server.IPacketResponse
    {
        public function PacketResponse()
        {
            super();
            return;
        }

        public function get packet():XML
        {
            return this._packet;
        }

        public function set packet(arg1:XML):void
        {
            this._packet = arg1;
            return;
        }

        public function get request():mgs.aurora.api.interfaces.server.IPacketRequest
        {
            return this._request;
        }

        public function set request(arg1:mgs.aurora.api.interfaces.server.IPacketRequest):void
        {
            this._request = arg1;
            return;
        }

        internal var _packet:XML;

        internal var _request:mgs.aurora.api.interfaces.server.IPacketRequest;
    }
}


//                class Server
package mgs.aurora.modules.core.model.api.server 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.server.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.events.api.*;
    
    public class Server extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.IServer
    {
        public function Server()
        {
            super();
            return;
        }

        public function set dependanciesXML(arg1:XML):void
        {
            this._dependanciesXML = arg1;
            return;
        }

        public function get platform():String
        {
            return mgs.aurora.api.enums.PlatformType.WEB;
        }

        public function loadFile(arg1:mgs.aurora.api.interfaces.server.IFileRequest):void
        {
            Debugger.trace("Load file - " + arg1.url, "API - Files");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ServerEvent(mgs.aurora.modules.core.events.api.ServerEvent.FILE_REQUEST, arg1));
            return;
        }

        public function stopLoading():void
        {
            Debugger.trace("Stop loading files", "API - Files");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ServerEvent(mgs.aurora.modules.core.events.api.ServerEvent.FILE_STOP_REQUEST, null));
            return;
        }

        public function sendPacket(arg1:mgs.aurora.api.interfaces.server.IPacketRequest):void
        {
            Debugger.trace("Send packet - (" + arg1.verb + ")", "API - Packets");
            Debugger.trace(arg1, "API - Packets Content");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ServerEvent(mgs.aurora.modules.core.events.api.ServerEvent.PACKET_REQUEST, arg1));
            return;
        }

        public function packetResponse(arg1:mgs.aurora.api.interfaces.server.IPacketResponse):void
        {
            Debugger.trace("Packet response - (" + arg1.request.verb + ")", "API EVENT - Packets");
            Debugger.trace(arg1, "API EVENT - Packets Content");
            this.dispatchEvent(new mgs.aurora.api.events.ApiPacketEvent(mgs.aurora.api.events.ApiPacketEvent.RECEIVED, arg1));
            return;
        }

        public function fileResponse(arg1:mgs.aurora.api.interfaces.server.IFileResponse):void
        {
            Debugger.trace("File load complete - " + arg1.request.url, "API EVENT - Files");
            Debugger.trace(arg1, "API EVENT - Files Content");
            this.dispatchEvent(new mgs.aurora.api.events.ApiFileLoadEvent(mgs.aurora.api.events.ApiFileLoadEvent.COMPLETE, arg1));
            return;
        }

        public function trace(arg1:*, arg2:String=null, arg3:*=null, arg4:uint=1118481):void
        {
            arg2 = arg2 != null ? arg2 : "";
            Debugger.trace(arg1, arg2, arg3, arg4);
            return;
        }

        public function __getDependencyXML():XMLList
        {
            return this._dependanciesXML.dependency;
        }

        internal var _dependanciesXML:XML;
    }
}


//              package session
//                class Session
package mgs.aurora.modules.core.model.api.session 
{
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    
    public class Session extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.ISession
    {
        public function Session(arg1:Boolean, arg2:int, arg3:uint)
        {
            var loc1:*=null;
            super();
            this._loggedIn = arg1;
            this._registrationLevel = arg2;
            var loc2:*=arg3;
            switch (loc2) 
            {
                case mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER:
                {
                    this._userType = mgs.aurora.api.enums.UserType.REAL;
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER:
                {
                    this._userType = mgs.aurora.api.enums.UserType.GUEST;
                    if ((loc1 = this.loginType()) == mgs.aurora.common.enums.raptorSession.LoginType.UPE_FULL || loc1 == mgs.aurora.common.enums.raptorSession.LoginType.UPE_INTERIM) 
                    {
                        this._userType = mgs.aurora.api.enums.UserType.PRACTICE;
                    }
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER:
                {
                    this._userType = mgs.aurora.api.enums.UserType.DEMO;
                    break;
                }
                case mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS:
                {
                    this._userType = mgs.aurora.api.enums.UserType.FUN_BONUS;
                    break;
                }
                default:
                {
                    this._userType = "UNKNOWN";
                }
            }
            return;
        }

        public function get loggedIn():Boolean
        {
            Debugger.trace("Get loggedIn (" + this._loggedIn + ")", "API - Session");
            return this._loggedIn;
        }

        public function get registrationLevel():int
        {
            Debugger.trace("Get registrationLevel (" + this._registrationLevel + ")", "API - Session");
            return this._registrationLevel;
        }

        public function get userType():String
        {
            Debugger.trace("Get userType (" + this._userType + ")", "API - Session");
            return this._userType;
        }

        public function login(arg1:String=null, arg2:String=null):void
        {
            return;
        }

        public function logout():void
        {
            return;
        }

        public function get casinoClientType():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            return loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CLIENTTYPE];
        }

        public function get casinoLanguage():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            return loc2[mgs.aurora.common.enums.configMapping.SessionConfig.LANGUAGE];
        }

        internal function loginType():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            return String(loc2.casino.login.@loginType).toUpperCase();
        }

        public function get Alias():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.SessionDetailsProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME)).userAlias;
            Debugger.trace("Get Alias (" + loc2 + ")", "API - Session");
            return loc2 == null ? "" : loc2;
        }

        public function get hasLobby():Boolean
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            return String(loc2.casino.info.@hasmenu) == "1";
        }

        internal var _loggedIn:Boolean;

        internal var _registrationLevel:int;

        internal var _userType:String;
    }
}


//              package sounds
//                class SoundEngine
package mgs.aurora.modules.core.model.api.sounds 
{
    import flash.display.*;
    import flash.media.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.sounds.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.sounds.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.utils.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class SoundEngine extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.ISounds
    {
        public function SoundEngine(arg1:mgs.aurora.common.interfaces.sounds.ISounds)
        {
            super();
            this._soundEngineImpl = arg1;
            this._soundGroupDict = new flash.utils.Dictionary();
            this._addedEvents = new flash.utils.Dictionary();
            this._soundEngineImpl.addEventListener(mgs.aurora.common.events.SystemSoundEvent.COMPLETE, this.onSystemSoundEvent);
            this._soundEngineImpl.addEventListener(mgs.aurora.common.events.SystemSoundEvent.MUTE, this.onSystemSoundEvent);
            this._soundEngineImpl.addEventListener(mgs.aurora.common.events.SystemSoundEvent.PANOVERTIME, this.onSystemSoundEvent);
            this._soundEngineImpl.addEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUME, this.onSystemSoundEvent);
            this._soundEngineImpl.addEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUMEOVERTIME, this.onSystemSoundEvent);
            this._soundEngineImpl.addEventListener(mgs.aurora.common.events.SystemSoundEvent.STOPPED, this.onSystemSoundEvent);
            return;
        }

        public function group(arg1:String):mgs.aurora.api.interfaces.sounds.ISoundGroup
        {
            var loc1:*=this._soundEngineImpl.group(arg1);
            if (loc1 != null) 
            {
                return this._soundGroupDict[arg1] as mgs.aurora.api.interfaces.sounds.ISoundGroup;
            }
            return null;
        }

        public function getChannel(arg1:String):flash.media.SoundChannel
        {
            return this._soundEngineImpl.getChannel(arg1);
        }

        internal function onSystemSoundEvent(arg1:mgs.aurora.common.events.SystemSoundEvent):void
        {
            var loc1:*="";
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case mgs.aurora.common.events.SystemSoundEvent.COMPLETE:
                {
                    loc1 = "Sound complete - " + arg1.id;
                    break;
                }
                case mgs.aurora.common.events.SystemSoundEvent.MUTE:
                {
                    loc1 = "Sound mute status changed - [" + this._soundEngineImpl.mute + "]";
                    break;
                }
                case mgs.aurora.common.events.SystemSoundEvent.STOPPED:
                {
                    loc1 = "Sound stopped - " + arg1.id;
                    break;
                }
                case mgs.aurora.common.events.SystemSoundEvent.VOLUMEOVERTIME:
                {
                    loc1 = "Sound volume over time completed - " + arg1.id;
                    break;
                }
                case mgs.aurora.common.events.SystemSoundEvent.PANOVERTIME:
                {
                    loc1 = "Sound pan over time completed - " + arg1.id;
                    break;
                }
            }
            Debugger.trace(loc1, "API EVENT - Sounds");
            this.dispatchEvent(new mgs.aurora.api.events.ApiSoundEvent(arg1.type, arg1.id, arg1.group, arg1.channel, arg1.bubbles, arg1.cancelable));
            return;
        }

        public override function dispose():void
        {
            var loc1:*=null;
            this._soundEngineImpl.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.COMPLETE, this.onSystemSoundEvent);
            this._soundEngineImpl.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.MUTE, this.onSystemSoundEvent);
            this._soundEngineImpl.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.PANOVERTIME, this.onSystemSoundEvent);
            this._soundEngineImpl.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUME, this.onSystemSoundEvent);
            this._soundEngineImpl.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUMEOVERTIME, this.onSystemSoundEvent);
            this._soundEngineImpl.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.STOPPED, this.onSystemSoundEvent);
            this._soundEngineImpl = null;
            var loc2:*=0;
            var loc3:*=this._soundGroupDict;
            for (loc1 in loc3) 
            {
                this._soundGroupDict[loc1].dispose();
                delete this._soundGroupDict[loc1];
            }
            this._soundGroupDict = null;
            this.removeAllEventListeners();
            return;
        }

        public function add(arg1:flash.display.LoaderInfo, arg2:Array, arg3:String):mgs.aurora.api.interfaces.sounds.ISoundGroup
        {
            Debugger.trace("Add sounds (" + arg1 + ", " + arg2 + ", " + arg3 + ")", "API - Sounds");
            this._soundGroupDict[arg3] = new mgs.aurora.modules.core.model.api.sounds.SoundEngineGroup(this._soundEngineImpl.add(arg1, arg2, arg3));
            return this._soundGroupDict[arg3] as mgs.aurora.api.interfaces.sounds.ISoundGroup;
        }

        public function play(arg1:String, arg2:String, arg3:Number=0, arg4:int=0, arg5:flash.media.SoundTransform=null):void
        {
            Debugger.trace("Play sound (" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")", "API - Sounds");
            this._soundEngineImpl.play(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function stop(arg1:String, arg2:String):void
        {
            Debugger.trace("Stop sound (" + arg1 + ", " + arg2 + ")", "API - Sounds");
            this._soundEngineImpl.stop(arg1, arg2);
            return;
        }

        public function stopAll(arg1:String):void
        {
            Debugger.trace("Stop all sounds (" + arg1 + ")", "API - Sounds");
            this._soundEngineImpl.stopAll(arg1);
            return;
        }

        public function remove(arg1:Array, arg2:String):void
        {
            Debugger.trace("Remove sounds (" + arg1 + ", " + arg2 + ")", "API - Sounds");
            this._soundEngineImpl.remove(arg1, arg2);
            return;
        }

        public function removeAll(arg1:String):void
        {
            Debugger.trace("Remove all sounds (" + arg1 + ")", "API - Sounds");
            this._soundEngineImpl.removeAll(arg1);
            return;
        }

        public function setChannelVolume(arg1:Array, arg2:Number, arg3:String):void
        {
            this._soundEngineImpl.setChannelVolume(arg1, arg2, arg3);
            return;
        }

        public function setChannelPan(arg1:Array, arg2:Number, arg3:String):void
        {
            this._soundEngineImpl.setChannelPan(arg1, arg2, arg3);
            return;
        }

        public function setChannelLeftToLeft(arg1:Array, arg2:Number, arg3:String):void
        {
            this._soundEngineImpl.setChannelLeftToLeft(arg1, arg2, arg3);
            return;
        }

        public function setChannelLeftToRight(arg1:Array, arg2:Number, arg3:String):void
        {
            this._soundEngineImpl.setChannelLeftToRight(arg1, arg2, arg3);
            return;
        }

        public function setChannelRightToRight(arg1:Array, arg2:Number, arg3:String):void
        {
            this._soundEngineImpl.setChannelRightToRight(arg1, arg2, arg3);
            return;
        }

        public function setChannelRightToLeft(arg1:Array, arg2:Number, arg3:String):void
        {
            this._soundEngineImpl.setChannelRightToLeft(arg1, arg2, arg3);
            return;
        }

        public function setChannelMute(arg1:Array, arg2:Boolean, arg3:String):void
        {
            this._soundEngineImpl.setChannelMute(arg1, arg2, arg3);
            return;
        }

        public function getChannelMute(arg1:Array, arg2:String):Boolean
        {
            return this._soundEngineImpl.getChannelMute(arg1, arg2);
        }

        public function set mute(arg1:Boolean):void
        {
            Debugger.trace("Set sound mute status (" + arg1 + ")", "API - Sounds");
            this._soundEngineImpl.mute = arg1;
            mgs.aurora.modules.core.utils.PureMVCUtility.sendNotification(new org.puremvc.as3.multicore.patterns.observer.Notification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_MUTE_ICON_GRAPHIC, arg1 ? "1" : "0"));
            return;
        }

        public function get mute():Boolean
        {
            Debugger.trace("Get sound mute status - [" + this._soundEngineImpl.mute + "]", "API - Sounds");
            return this._soundEngineImpl.mute;
        }

        public function set globalVolume(arg1:Number):void
        {
            Debugger.trace("Set global volume (" + arg1 + ")", "API - Sounds");
            this._soundEngineImpl.globalVolume = arg1;
            return;
        }

        public function get globalVolume():Number
        {
            Debugger.trace("Get global volume - [" + this._soundEngineImpl.globalVolume + "]", "API - Sounds");
            return this._soundEngineImpl.globalVolume;
        }

        public function set globalPan(arg1:Number):void
        {
            this._soundEngineImpl.globalPan = arg1;
            return;
        }

        public function get globalPan():Number
        {
            return this._soundEngineImpl.globalPan;
        }

        public function set globalLeftToLeft(arg1:Number):void
        {
            this._soundEngineImpl.globalLeftToLeft = arg1;
            return;
        }

        public function get globalLeftToLeft():Number
        {
            return this._soundEngineImpl.globalLeftToLeft;
        }

        public function set globalLeftToRight(arg1:Number):void
        {
            this._soundEngineImpl.globalLeftToRight = arg1;
            return;
        }

        public function get globalLeftToRight():Number
        {
            return this._soundEngineImpl.globalLeftToRight;
        }

        public function set globalRightToRight(arg1:Number):void
        {
            this._soundEngineImpl.globalRightToRight = arg1;
            return;
        }

        public function get globalRightToRight():Number
        {
            return this._soundEngineImpl.globalRightToRight;
        }

        public function set globalRightToLeft(arg1:Number):void
        {
            this._soundEngineImpl.globalRightToLeft = arg1;
            return;
        }

        public function get globalRightToLeft():Number
        {
            return this._soundEngineImpl.globalRightToLeft;
        }

        public function setChannelVolumeOverTime(arg1:Array, arg2:String, arg3:Number, arg4:Number, arg5:Number):void
        {
            Debugger.trace("Set channel volume over time (" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")", "API - Sounds");
            this._soundEngineImpl.setChannelVolumeOverTime(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function setChannelPanOverTime(arg1:Array, arg2:String, arg3:Number, arg4:Number, arg5:Number):void
        {
            Debugger.trace("Set channel pan over time (" + arg1 + ", " + arg2 + ", " + arg3 + ", " + arg4 + ", " + arg5 + ")", "API - Sounds");
            this._soundEngineImpl.setChannelPanOverTime(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function stopVolumeOverTime(arg1:String, arg2:String):void
        {
            Debugger.trace("Stop volume over time (" + arg1 + ", " + arg2 + ")", "API - Sounds");
            this._soundEngineImpl.stopVolumeOverTime(arg1, arg2);
            return;
        }

        public function stopPanOverTime(arg1:String, arg2:String):void
        {
            Debugger.trace("Stop pan over time (" + arg1 + ", " + arg2 + ")", "API - Sounds");
            this._soundEngineImpl.stopPanOverTime(arg1, arg2);
            return;
        }

        internal var _soundEngineImpl:mgs.aurora.common.interfaces.sounds.ISounds;

        internal var _soundGroupDict:flash.utils.Dictionary;

        internal var _addedEvents:flash.utils.Dictionary;
    }
}


//                class SoundEngineGroup
package mgs.aurora.modules.core.model.api.sounds 
{
    import flash.media.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.sounds.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.sounds.*;
    import mgs.aurora.common.utilities.*;
    
    public class SoundEngineGroup extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.sounds.ISoundGroup
    {
        public function SoundEngineGroup(arg1:mgs.aurora.common.interfaces.sounds.ISoundGroup)
        {
            super();
            this._soundGroup = arg1;
            this._soundGroup.addEventListener(mgs.aurora.common.events.SystemSoundEvent.COMPLETE, this.onSystemSoundEvent);
            this._soundGroup.addEventListener(mgs.aurora.common.events.SystemSoundEvent.MUTE, this.onSystemSoundEvent);
            this._soundGroup.addEventListener(mgs.aurora.common.events.SystemSoundEvent.PANOVERTIME, this.onSystemSoundEvent);
            this._soundGroup.addEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUME, this.onSystemSoundEvent);
            this._soundGroup.addEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUMEOVERTIME, this.onSystemSoundEvent);
            this._soundGroup.addEventListener(mgs.aurora.common.events.SystemSoundEvent.STOPPED, this.onSystemSoundEvent);
            return;
        }

        public override function dispose():void
        {
            this._soundGroup.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.COMPLETE, this.onSystemSoundEvent);
            this._soundGroup.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.MUTE, this.onSystemSoundEvent);
            this._soundGroup.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.PANOVERTIME, this.onSystemSoundEvent);
            this._soundGroup.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUME, this.onSystemSoundEvent);
            this._soundGroup.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.VOLUMEOVERTIME, this.onSystemSoundEvent);
            this._soundGroup.removeEventListener(mgs.aurora.common.events.SystemSoundEvent.STOPPED, this.onSystemSoundEvent);
            this.removeAllEventListeners();
            this._soundGroup = null;
            return;
        }

        public function getChannelMute(arg1:Array):Boolean
        {
            return this._soundGroup.getChannelMute(arg1);
        }

        public function play(arg1:String, arg2:Number=0, arg3:int=0, arg4:flash.media.SoundTransform=null):void
        {
            this._soundGroup.play(arg1, arg2, arg3, arg4);
            return;
        }

        public function remove(arg1:Array):void
        {
            this._soundGroup.remove(arg1);
            return;
        }

        public function removeAll():void
        {
            this._soundGroup.removeAll();
            return;
        }

        public function setChannelLeftToLeft(arg1:Array, arg2:Number):void
        {
            this._soundGroup.setChannelLeftToLeft(arg1, arg2);
            return;
        }

        public function setChannelLeftToRight(arg1:Array, arg2:Number):void
        {
            this._soundGroup.setChannelLeftToRight(arg1, arg2);
            return;
        }

        public function setChannelMute(arg1:Array, arg2:Boolean):void
        {
            this._soundGroup.setChannelMute(arg1, arg2);
            return;
        }

        public function setChannelPan(arg1:Array, arg2:Number):void
        {
            this._soundGroup.setChannelPan(arg1, arg2);
            return;
        }

        public function setChannelPanOverTime(arg1:Array, arg2:Number, arg3:Number, arg4:Number):void
        {
            this._soundGroup.setChannelPanOverTime(arg1, arg2, arg3, arg4);
            return;
        }

        public function setChannelRightToLeft(arg1:Array, arg2:Number):void
        {
            this._soundGroup.setChannelRightToLeft(arg1, arg2);
            return;
        }

        public function setChannelRightToRight(arg1:Array, arg2:Number):void
        {
            this._soundGroup.setChannelRightToRight(arg1, arg2);
            return;
        }

        public function setChannelVolume(arg1:Array, arg2:Number):void
        {
            this._soundGroup.setChannelVolume(arg1, arg2);
            return;
        }

        public function setChannelVolumeOverTime(arg1:Array, arg2:Number, arg3:Number, arg4:Number):void
        {
            this._soundGroup.setChannelVolumeOverTime(arg1, arg2, arg3, arg4);
            return;
        }

        public function stop(arg1:String):void
        {
            this._soundGroup.stop(arg1);
            return;
        }

        public function stopAll():void
        {
            this._soundGroup.stopAll();
            return;
        }

        public function stopPanOverTime(arg1:String):void
        {
            this._soundGroup.stopPanOverTime(arg1);
            return;
        }

        public function stopVolumeOverTime(arg1:String):void
        {
            this._soundGroup.stopVolumeOverTime(arg1);
            return;
        }

        public function get mute():Boolean
        {
            return this._soundGroup.mute;
        }

        public function set mute(arg1:Boolean):void
        {
            this._soundGroup.mute = arg1;
            return;
        }

        public function get volume():Number
        {
            return this._soundGroup.volume;
        }

        public function set volume(arg1:Number):void
        {
            this._soundGroup.volume = arg1;
            return;
        }

        public function getChannel(arg1:String):flash.media.SoundChannel
        {
            return this._soundGroup.getChannel(arg1);
        }

        internal function onSystemSoundEvent(arg1:mgs.aurora.common.events.SystemSoundEvent):void
        {
            var loc1:*=null;
            if (this.hasEventListener(arg1.type)) 
            {
                loc1 = "";
                var loc2:*=arg1.type;
                switch (loc2) 
                {
                    case mgs.aurora.common.events.SystemSoundEvent.COMPLETE:
                    {
                        loc1 = "Sound complete - " + arg1.id;
                        break;
                    }
                    case mgs.aurora.common.events.SystemSoundEvent.MUTE:
                    {
                        loc1 = "Sound mute status changed - [" + this._soundGroup.mute + "]";
                        break;
                    }
                    case mgs.aurora.common.events.SystemSoundEvent.STOPPED:
                    {
                        loc1 = "Sound stopped - " + arg1.id;
                        break;
                    }
                    case mgs.aurora.common.events.SystemSoundEvent.VOLUMEOVERTIME:
                    {
                        loc1 = "Sound volume over time completed - " + arg1.id;
                        break;
                    }
                    case mgs.aurora.common.events.SystemSoundEvent.PANOVERTIME:
                    {
                        loc1 = "Sound pan over time completed - " + arg1.id;
                        break;
                    }
                }
                Debugger.trace(loc1, "API EVENT - Sound Groups");
            }
            this.dispatchEvent(new mgs.aurora.api.events.ApiSoundEvent(arg1.type, arg1.id, arg1.group, arg1.channel, arg1.bubbles, arg1.cancelable));
            return;
        }

        internal var _soundGroup:mgs.aurora.common.interfaces.sounds.ISoundGroup;
    }
}


//              package status
//                class ModuleStatus
package mgs.aurora.modules.core.model.api.status 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.*;
    
    public class ModuleStatus extends mgs.aurora.common.utilities.EventDispatcherDecorator implements mgs.aurora.api.interfaces.IModuleStatus
    {
        public function ModuleStatus()
        {
            super();
            return;
        }

        public function get busy():Boolean
        {
            return this._busy;
        }

        public function set busy(arg1:Boolean):void
        {
            this._busy = arg1;
            Debugger.trace("Game busy (" + arg1 + ")", "API - Status");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ModuleStatusEvent(mgs.aurora.modules.core.events.api.ModuleStatusEvent.BUSY_UPDATED));
            return;
        }

        public function set preloaderComplete(arg1:Boolean):void
        {
            this._isPreloaderComplete = arg1;
            return;
        }

        public function get preloaderComplete():Boolean
        {
            return this._isPreloaderComplete;
        }

        public function get initialized():Boolean
        {
            return this._initialized;
        }

        public function set initialized(arg1:Boolean):void
        {
            var value:Boolean;
            var timer:flash.utils.Timer;

            var loc1:*;
            value = arg1;
            this._initialized = value;
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ModuleStatusEvent(mgs.aurora.modules.core.events.api.ModuleStatusEvent.COMPLETE_LOAD_BAR));
            timer = new flash.utils.Timer(100, 1);
            timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, function (arg1:flash.events.Event):void
            {
                Debugger.trace("Game initialized (" + value + ")", "API - Status");
                sendInitUpdateEvent();
                return;
            })
            timer.start();
            return;
        }

        internal function sendInitUpdateEvent():void
        {
            Debugger.trace("Game initialized sent", "API - Status");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ModuleStatusEvent(mgs.aurora.modules.core.events.api.ModuleStatusEvent.INITIALIZED_UPDATED));
            return;
        }

        public function get cleanedUp():Boolean
        {
            return this._cleanedUp;
        }

        public function set cleanedUp(arg1:Boolean):void
        {
            this._cleanedUp = arg1;
            Debugger.trace("Game cleaned up (" + arg1 + ")", "API - Status");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.ModuleStatusEvent(mgs.aurora.modules.core.events.api.ModuleStatusEvent.CLEANEDUP_UPDATED));
            return;
        }

        public function get startupDialogueAllowed():Boolean
        {
            return this._startupDialogueAllowed;
        }

        public function set startupDialogueAllowed(arg1:Boolean):void
        {
            this._startupDialogueAllowed = arg1;
            return;
        }

        public function exit():void
        {
            Debugger.trace("Exit game", "API - Status");
            dispatchEvent(new mgs.aurora.modules.core.events.api.ModuleStatusEvent(mgs.aurora.modules.core.events.api.ModuleStatusEvent.EXIT));
            return;
        }

        public function get systemError():Boolean
        {
            Debugger.trace("Get system error state (" + this._error + ")", "API - Status");
            return this._error;
        }

        public function setSystemError():void
        {
            if (!this._error) 
            {
                Debugger.trace("System error", "API EVENT - Status", null, 16711680);
                this._error = true;
                this.dispatchEvent(new mgs.aurora.api.events.ApiStatusEvent(mgs.aurora.api.events.ApiStatusEvent.SYSTEM_ERROR));
            }
            return;
        }

        public function cancelExit():void
        {
            Debugger.trace("Cancel Exit", "API - Status");
            return;
        }

        public function fatalError(arg1:String):void
        {
            Debugger.trace("Fatal Error in game - \"" + arg1 + "\"", "API - Status");
            return;
        }

        public function loadNewModule(arg1:String, arg2:String="", arg3:String="", arg4:String=""):void
        {
            Debugger.trace("loadNewModule - \"" + arg1 + "\"", "API - Status");
            var loc1:*;
            (loc1 = new Object())["gameid"] = arg1;
            loc1["mid"] = arg2;
            loc1["cid"] = arg3;
            loc1["extraData"] = arg4;
            dispatchEvent(new mgs.aurora.modules.core.events.api.ModuleStatusEvent(mgs.aurora.modules.core.events.api.ModuleStatusEvent.LOAD_NEW_MODULE, loc1));
            return;
        }

        public function get preformanceRating():Number
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            this._performanceRating = int(mgs.aurora.modules.core.model.ExternalDataProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData.getValue("performancerating", "0"));
            Debugger.trace("Get system performanceRating (" + this._performanceRating + ")", "API - Status");
            if (this._performanceRating > 100) 
            {
                this._performanceRating = 100;
            }
            return this._performanceRating;
        }

        public function get browserCacheLimit():flash.utils.Dictionary
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            var loc2:*=false;
            var loc3:*=mgs.aurora.modules.core.model.ExternalDataProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            this._browserVersion = loc3.getValue("browserversion").toLowerCase();
            var loc4:*=mgs.aurora.modules.core.model.BrowserSettingsProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.BrowserSettingsProxy.NAME)).getDictionaryOfBrowserSettings(this._browserVersion);
            var loc5:*="BrowserVersion   " + this._browserVersion + " : " + "LIMIT_50 =  " + loc4[mgs.aurora.api.enums.BrowserCacheLimits.LIMIT_50] + " : " + "LIMIT_250 =  " + loc4[mgs.aurora.api.enums.BrowserCacheLimits.LIMIT_250] + " : " + "LIMIT_320 =  " + loc4[mgs.aurora.api.enums.BrowserCacheLimits.LIMIT_320];
            Debugger.trace("Browser cache limit Dictionary Test -  " + loc5, "API - Status");
            return loc4;
        }

        public function get browserCacheLimitValue():int
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            var loc2:*=false;
            var loc3:*=mgs.aurora.modules.core.model.ExternalDataProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            this._browserVersion = loc3.getValue("browserversion").toLowerCase();
            var loc4:*=mgs.aurora.modules.core.model.BrowserSettingsProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.BrowserSettingsProxy.NAME)).getBrowerSettingsForVersion(this._browserVersion).browserCacheLimit;
            Debugger.trace("Browser cache limit Value for browser Version ; " + this._browserVersion + " cacheLimit " + loc4, "API - Status");
            return loc4;
        }

        public function ___autoMationOn():Boolean
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            var loc2:*=mgs.aurora.modules.core.model.DependenciesProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            return loc2.hasOwnProperty("Automation");
        }

        internal var _busy:Boolean=true;

        internal var _initialized:Boolean=false;

        internal var _cleanedUp:Boolean=false;

        internal var _error:Boolean=false;

        internal var _performanceRating:int=0;

        internal var _browserVersion:String;

        internal var _startupDialogueAllowed:Boolean=true;

        internal var _isPreloaderComplete:Boolean=false;
    }
}


//              package storage
//                class FlashStorage
package mgs.aurora.modules.core.model.api.storage 
{
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    
    public class FlashStorage extends Object implements mgs.aurora.api.interfaces.ILocalStorage
    {
        public function FlashStorage()
        {
            super();
            return;
        }

        public function saveData(arg1:String, arg2:String, arg3:*):String
        {
            return mgs.aurora.common.utilities.FlashStorage.saveData(arg1, arg2, arg3, "/");
        }

        public function loadData(arg1:String, arg2:String):String
        {
            return mgs.aurora.common.utilities.FlashStorage.loadData(arg1, arg2, "/");
        }

        public function saveDataEncrypted(arg1:String, arg2:String, arg3:String):String
        {
            return mgs.aurora.common.utilities.FlashStorage.saveDataEncrypted(arg1, arg2, arg3);
        }

        public function loadDataEncrypted(arg1:String, arg2:String):String
        {
            return mgs.aurora.common.utilities.FlashStorage.loadDataEncrypted(arg1, arg2);
        }

        public function get localDataPath():String
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.CoreFacade.NAME);
            var loc2:*=mgs.aurora.modules.core.model.ExternalDataProxy(loc1.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc3:*=loc2.getValue(mgs.aurora.modules.core.enum.JSDataNames.REVERSE_PROXY) != "1" ? loc2.getValue(mgs.aurora.modules.core.enum.JSDataNames.APPLICATIONPATH) : null;
            return loc3;
        }
    }
}


//              package topbar
//                class ExtTopBar
package mgs.aurora.modules.core.model.api.topbar 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.topBar.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.vo.*;
    
    public class ExtTopBar extends flash.events.EventDispatcher implements mgs.aurora.api.interfaces.topBar.IExtTopBar
    {
        public function ExtTopBar(arg1:Boolean)
        {
            super();
            this._isSGI = arg1;
            return;
        }

        public function updateTopBar(arg1:XML, arg2:uint, arg3:uint, arg4:Number):void
        {
            Debugger.trace("EXTTOPBAR : updateTopBar :: winValue - [" + arg2 + "]" + " :: betValue - [" + arg3 + "]" + " :: balance - [" + arg4 + "]" + " :: xmlData - [" + arg1 + "]", "API EVENT - extTopbar");
            this.dispatchEvent(new mgs.aurora.modules.core.events.api.TopBarEvent(mgs.aurora.modules.core.events.api.TopBarEvent.UPDATE, new mgs.aurora.modules.core.model.vo.TopBarUpdate(arg1, arg2, arg3, arg4)));
            return;
        }

        public function get topBarVisible():Boolean
        {
            Debugger.trace("EXTTOPBAR topBarVisible - [" + this._isSGI + "]", "API EVENT - extTopbar");
            return this._isSGI;
        }

        public function dispose():void
        {
            return;
        }

        internal var _isSGI:Boolean;
    }
}


//              package utility
//                class StringUtility
package mgs.aurora.modules.core.model.api.utility 
{
    import mgs.aurora.api.interfaces.utility.*;
    import mgs.aurora.common.utilities.*;
    
    public class StringUtility extends Object implements mgs.aurora.api.interfaces.utility.IStringUtility
    {
        public function StringUtility()
        {
            super();
            return;
        }

        public function mgsXmlFormatToHtml(arg1:String):String
        {
            return mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(arg1);
        }

        public function stringReplace(arg1:String, arg2:Object):String
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=arg2;
            for (loc1 in loc4) 
            {
                loc2 = new RegExp("{" + loc1 + "}", "g");
                arg1 = arg1.replace(loc2, arg2[loc1]);
            }
            return arg1;
        }
    }
}


//                class Utility
package mgs.aurora.modules.core.model.api.utility 
{
    import mgs.aurora.api.interfaces.utility.*;
    
    public class Utility extends Object implements mgs.aurora.api.interfaces.utility.IUtility
    {
        public function Utility()
        {
            super();
            this.initialize();
            return;
        }

        public function get strings():mgs.aurora.api.interfaces.utility.IStringUtility
        {
            return this._strings;
        }

        internal function initialize():void
        {
            this._strings = new mgs.aurora.modules.core.model.api.utility.StringUtility();
            return;
        }

        internal var _strings:mgs.aurora.modules.core.model.api.utility.StringUtility;
    }
}


//              class ApiProxy
package mgs.aurora.modules.core.model.api 
{
    import flash.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.topBar.*;
    import mgs.aurora.api.interfaces.utility.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class ApiProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy, mgs.aurora.api.interfaces.IAuroraApi
    {
        public function ApiProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public function get session():mgs.aurora.api.interfaces.ISession
        {
            return this._session;
        }

        public function get status():mgs.aurora.api.interfaces.IModuleStatus
        {
            return this._status;
        }

        public function get storage():mgs.aurora.api.interfaces.ILocalStorage
        {
            return this._storage;
        }

        public function get help():mgs.aurora.api.interfaces.IHelp
        {
            return this._help;
        }

        public function get rightClick():mgs.aurora.api.interfaces.IRightClick
        {
            return this._rightClick;
        }

        public function get localized():mgs.aurora.api.interfaces.ILocal
        {
            return this._localized;
        }

        public function get dialogues():mgs.aurora.api.interfaces.IDialogues
        {
            return this._dialogues;
        }

        public function set branding(arg1:mgs.aurora.api.interfaces.IBranding):void
        {
            this._branding = arg1;
            return;
        }

        public function get branding():mgs.aurora.api.interfaces.IBranding
        {
            return this._branding;
        }

        public function get utility():mgs.aurora.api.interfaces.utility.IUtility
        {
            return this._utility;
        }

        public function get moduleInformation():mgs.aurora.api.interfaces.IModuleInformation
        {
            return this._moduleInformation;
        }

        public function get multiplayer():mgs.aurora.api.interfaces.IMultiplayer
        {
            return this._multiplayer;
        }

        public function get gameStrings():mgs.aurora.api.interfaces.IGameStrings
        {
            return this._gameStrings;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.data.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.data.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.data.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.data.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.data.willTrigger(arg1);
        }

        public function get profiling():mgs.aurora.api.interfaces.IProfiling
        {
            return this._profiling;
        }

        public function set status(arg1:mgs.aurora.api.interfaces.IModuleStatus):void
        {
            this._status = arg1;
            return;
        }

        public function set banking(arg1:mgs.aurora.api.interfaces.IBanking):void
        {
            this._banking = arg1;
            return;
        }

        public function set help(arg1:mgs.aurora.api.interfaces.IHelp):void
        {
            this._help = arg1;
            return;
        }

        public function set localized(arg1:mgs.aurora.api.interfaces.ILocal):void
        {
            this._localized = arg1;
            return;
        }

        public function set rightClick(arg1:mgs.aurora.api.interfaces.IRightClick):void
        {
            this._rightClick = arg1;
            return;
        }

        public function set server(arg1:mgs.aurora.api.interfaces.IServer):void
        {
            this._server = arg1;
            return;
        }

        public function set session(arg1:mgs.aurora.api.interfaces.ISession):void
        {
            this._session = arg1;
            return;
        }

        public function set storage(arg1:mgs.aurora.api.interfaces.ILocalStorage):void
        {
            this._storage = arg1;
            return;
        }

        public function set sounds(arg1:mgs.aurora.api.interfaces.ISounds):void
        {
            this._sounds = arg1;
            return;
        }

        public function set frame(arg1:mgs.aurora.api.interfaces.IFrames):void
        {
            this._frame = arg1;
            return;
        }

        public function set preloader(arg1:mgs.aurora.api.interfaces.IPreloader):void
        {
            this._preloader = arg1;
            return;
        }

        public function set dialogues(arg1:mgs.aurora.api.interfaces.IDialogues):void
        {
            this._dialogues = arg1;
            return;
        }

        public function get extTopBar():mgs.aurora.api.interfaces.topBar.IExtTopBar
        {
            return this._extTopBar;
        }

        public function set utility(arg1:mgs.aurora.api.interfaces.utility.IUtility):void
        {
            this._utility = arg1;
            return;
        }

        public function set moduleInformation(arg1:mgs.aurora.api.interfaces.IModuleInformation):void
        {
            this._moduleInformation = arg1;
            return;
        }

        public function set multiplayer(arg1:mgs.aurora.api.interfaces.IMultiplayer):void
        {
            this._multiplayer = arg1;
            return;
        }

        public function set extTopBar(arg1:mgs.aurora.api.interfaces.topBar.IExtTopBar):void
        {
            this._extTopBar = arg1;
            return;
        }

        public function set gameStrings(arg1:mgs.aurora.api.interfaces.IGameStrings):void
        {
            this._gameStrings = arg1;
            return;
        }

        public function set profiling(arg1:mgs.aurora.api.interfaces.IProfiling):void
        {
            this._profiling = arg1;
            return;
        }

        public function get preloader():mgs.aurora.api.interfaces.IPreloader
        {
            return this._preloader;
        }

        public function get banking():mgs.aurora.api.interfaces.IBanking
        {
            return this._banking;
        }

        public function get sounds():mgs.aurora.api.interfaces.ISounds
        {
            return this._sounds;
        }

        public function get frame():mgs.aurora.api.interfaces.IFrames
        {
            return this._frame;
        }

        public function get server():mgs.aurora.api.interfaces.IServer
        {
            return this._server;
        }

        public static const NAME:String="ApiProxy";

        internal var _status:mgs.aurora.api.interfaces.IModuleStatus;

        internal var _banking:mgs.aurora.api.interfaces.IBanking;

        internal var _help:mgs.aurora.api.interfaces.IHelp;

        internal var _localized:mgs.aurora.api.interfaces.ILocal;

        internal var _rightClick:mgs.aurora.api.interfaces.IRightClick;

        internal var _server:mgs.aurora.api.interfaces.IServer;

        internal var _session:mgs.aurora.api.interfaces.ISession;

        internal var _sounds:mgs.aurora.api.interfaces.ISounds;

        internal var _frame:mgs.aurora.api.interfaces.IFrames;

        internal var _preloader:mgs.aurora.api.interfaces.IPreloader;

        internal var _dialogues:mgs.aurora.api.interfaces.IDialogues;

        internal var _branding:mgs.aurora.api.interfaces.IBranding;

        internal var _utility:mgs.aurora.api.interfaces.utility.IUtility;

        internal var _moduleInformation:mgs.aurora.api.interfaces.IModuleInformation;

        internal var _multiplayer:mgs.aurora.api.interfaces.IMultiplayer;

        internal var _extTopBar:mgs.aurora.api.interfaces.topBar.IExtTopBar;

        internal var _gameStrings:mgs.aurora.api.interfaces.IGameStrings;

        internal var _profiling:mgs.aurora.api.interfaces.IProfiling;

        internal var _storage:mgs.aurora.api.interfaces.ILocalStorage;
    }
}


//            package configMapping
//              class DynamicTypes
package mgs.aurora.modules.core.model.configMapping 
{
    import flash.events.*;
    import mgs.aurora.common.events.*;
    
    public class DynamicTypes extends flash.events.EventDispatcher implements flash.events.IEventDispatcher
    {
        public function DynamicTypes(arg1:*, arg2:*)
        {
            super();
            this._name = arg1;
            this.value = arg2;
            return;
        }

        public function valueOf():Object
        {
            return this._value;
        }

        public override function toString():String
        {
            if (this._value == undefined) 
            {
                return undefined;
            }
            return this._value.toString();
        }

        public function get name():*
        {
            return this._name;
        }

        public function get value():*
        {
            return this._value;
        }

        public function set value(arg1:*):void
        {
            if (!this.isAllowed(arg1)) 
            {
                return;
            }
            this._value = arg1;
            this.dispatchEvent(new mgs.aurora.common.events.SystemConfigEvent(mgs.aurora.common.events.SystemConfigEvent.VALUE_CHANGED, this.name, this.value));
            return;
        }

        public function set allowedValues(arg1:String):void
        {
            this._allowed = arg1.split("|");
            return;
        }

        internal function isAllowed(arg1:*):Boolean
        {
            if (this._allowed == null) 
            {
                return true;
            }
            var loc1:*=this._allowed.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                if (arg1.toString() == this._allowed[loc2].toString()) 
                {
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        internal var _value:*;

        internal var _name:*;

        internal var _allowed:Array;
    }
}


//              class ModuleConfig
package mgs.aurora.modules.core.model.configMapping 
{
    import flash.utils.*;
    import mgs.aurora.common.interfaces.*;
    
    use namespace flash_proxy;
    
    public dynamic class ModuleConfig extends flash.utils.Proxy
    {
        public function ModuleConfig()
        {
            super();
            this._storage = new flash.utils.Dictionary();
            return;
        }

        public function addXMLListProperties(arg1:XMLList, arg2:XML):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=arg1.attributes();
            for each (loc1 in loc10) 
            {
                loc3 = loc1.name().toString().toLowerCase();
                loc4 = loc1.toString();
                this.createProperty(loc3, loc4);
            }
            loc9 = 0;
            loc10 = arg2.attribute;
            for each (loc2 in loc10) 
            {
                loc5 = loc2.@name.toString().toLowerCase();
                if (this[loc5] == null) 
                {
                    loc6 = loc2.@default;
                    this.createProperty(loc5, loc6);
                }
                if (loc2.@mapsTo != undefined) 
                {
                    loc7 = loc2.@mapsTo.toString().toLowerCase();
                    this.renameProperty(loc5, loc7);
                    loc5 = loc7;
                }
                if (loc2.@allow == undefined) 
                {
                    continue;
                }
                loc8 = loc2.@allow;
                this[loc5].allowedValues = loc8;
            }
            return;
        }

        public function addExternalDataProperties(arg1:mgs.aurora.common.interfaces.IExternalData, arg2:XML):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=arg2.attribute;
            for each (loc1 in loc6) 
            {
                loc2 = loc1.@name.toString().toLowerCase();
                this.createProperty(loc2, arg1.getValue(loc2, ""));
                if (loc1.@mapsTo != undefined) 
                {
                    loc3 = loc1.@mapsTo.toString().toLowerCase();
                    this.renameProperty(loc2, loc3);
                    loc2 = loc3;
                }
                if (loc1.@allow == undefined) 
                {
                    continue;
                }
                loc4 = loc1.@allow;
                this[loc2].allowedValues = loc4;
            }
            return;
        }

        flash_proxy override function setProperty(arg1:*, arg2:*):void
        {
            this.createProperty(arg1, arg2);
            return;
        }

        flash_proxy override function getProperty(arg1:*):*
        {
            return this.getValue(arg1);
        }

        flash_proxy override function hasProperty(arg1:*):Boolean
        {
            return this.propertyExists(arg1);
        }

        flash_proxy override function deleteProperty(arg1:*):Boolean
        {
            return this.deleteProp(arg1);
        }

        flash_proxy override function callProperty(arg1:*, ... rest):*
        {
            var loc1:*=arg1.toString();
            switch (loc1) 
            {
                case "setProperty":
                {
                    return this.createProperty.apply(this, rest);
                }
                case "getProperty":
                {
                    return this.getValue.apply(this, rest);
                }
                case "hasProperty":
                {
                    return this.propertyExists.apply(this, rest);
                }
                case "deleteProperty":
                {
                    return this.deleteProp.apply(this, rest);
                }
                case "toString":
                {
                    return "ModuleConfig";
                }
                case "valueOf":
                {
                    return this;
                }
                default:
                {
                    return this[arg1].apply(this, rest);
                }
            }
        }

        internal function deleteProp(arg1:*):Boolean
        {
            return delete this._storage[arg1];
        }

        internal function propertyExists(arg1:*):Boolean
        {
            return this._storage.hasOwnProperty(arg1);
        }

        internal function getValue(arg1:*):*
        {
            if (this._storage.hasOwnProperty(arg1)) 
            {
                return this._storage[arg1];
            }
            return undefined;
        }

        internal function createProperty(arg1:*, arg2:*):void
        {
            if (this._storage.hasOwnProperty(arg1)) 
            {
                this._storage[arg1].value = arg2;
            }
            else 
            {
                this._storage[arg1] = new mgs.aurora.modules.core.model.configMapping.DynamicTypes(arg1, arg2);
            }
            return;
        }

        internal function renameProperty(arg1:*, arg2:*):void
        {
            var loc1:*=this[arg1];
            this.createProperty(arg2, loc1);
            delete this[arg1];
            return;
        }

        internal var _storage:flash.utils.Dictionary;
    }
}


//              class SystemConfig
package mgs.aurora.modules.core.model.configMapping 
{
    import flash.utils.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    
    use namespace flash_proxy;
    
    public dynamic class SystemConfig extends flash.utils.Proxy
    {
        public function SystemConfig(arg1:XML)
        {
            super();
            this.init(arg1);
            return;
        }

        public function generateConfig(arg1:XML, arg2:mgs.aurora.common.interfaces.IExternalData):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._mappings.module.data;
            label147: for each (loc1 in loc3) 
            {
                var loc4:*=loc1.@type.toString();
                switch (loc4) 
                {
                    case mgs.aurora.modules.core.enum.ConfigMappingTypes.NODE_ATTRIBUTES:
                    {
                        this.generateFromBrandConfig(arg1, loc1);
                        continue label147;
                    }
                    case mgs.aurora.modules.core.enum.ConfigMappingTypes.POST_PARAMETERS:
                    {
                        this.generateFromExternalData(arg2, loc1);
                        continue label147;
                    }
                    default:
                    {
                        continue label147;
                    }
                }
            }
            return;
        }

        flash_proxy override function setProperty(arg1:*, arg2:*):void
        {
            this.createProperty(arg1, arg2);
            return;
        }

        flash_proxy override function getProperty(arg1:*):*
        {
            return this.getValue(arg1);
        }

        flash_proxy override function hasProperty(arg1:*):Boolean
        {
            return this.propertyExists(arg1);
        }

        flash_proxy override function deleteProperty(arg1:*):Boolean
        {
            return this.deleteProp(arg1);
        }

        flash_proxy override function callProperty(arg1:*, ... rest):*
        {
            var loc1:*=arg1.toString();
            switch (loc1) 
            {
                case "setProperty":
                {
                    return this.createProperty.apply(this, rest);
                }
                case "getProperty":
                {
                    return this.getValue.apply(this, rest);
                }
                case "hasProperty":
                {
                    return this.propertyExists.apply(this, rest);
                }
                case "deleteProperty":
                {
                    return this.deleteProp.apply(this, rest);
                }
                case "toString":
                {
                    return "SystemConfig";
                }
                case "valueOf":
                {
                    return this;
                }
                default:
                {
                    return undefined;
                }
            }
        }

        internal function init(arg1:XML):void
        {
            this._storage = new flash.utils.Dictionary();
            this._mappings = arg1;
            this.createModuleConfig();
            return;
        }

        internal function deleteProp(arg1:*):Boolean
        {
            return delete this._storage[arg1];
        }

        internal function propertyExists(arg1:*):Boolean
        {
            return this._storage.hasOwnProperty(arg1);
        }

        internal function getValue(arg1:*):*
        {
            if (this._storage.hasOwnProperty(arg1)) 
            {
                return this._storage[arg1];
            }
            return undefined;
        }

        internal function createProperty(arg1:*, arg2:*):void
        {
            if (this._storage.hasOwnProperty(arg1)) 
            {
                this._storage[arg1].value = arg2;
            }
            else 
            {
                this._storage[arg1] = new mgs.aurora.modules.core.model.configMapping.DynamicTypes(arg1, arg2);
            }
            return;
        }

        internal function createModuleConfig():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._mappings.module;
            for each (loc1 in loc5) 
            {
                loc2 = loc1.@id;
                loc3 = new mgs.aurora.modules.core.model.configMapping.ModuleConfig();
                this._storage[loc2] = loc3;
            }
            return;
        }

        internal function generateFromBrandConfig(arg1:XML, arg2:XML):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=arg2.@source.split("|");
            if (loc1[0].toLowerCase().indexOf("brandconfig") > -1) 
            {
                (loc2 = String(loc1[1]).split(".")).shift();
                loc3 = arg2.parent().@id;
                mgs.aurora.modules.core.model.configMapping.ModuleConfig(this._storage[loc3]).addXMLListProperties(mgs.aurora.common.utilities.ObjectUtils.buildObjectFromStrings(arg1, loc2), arg2);
            }
            return;
        }

        internal function generateFromExternalData(arg1:mgs.aurora.common.interfaces.IExternalData, arg2:XML):void
        {
            var loc1:*=arg2.parent().@id;
            mgs.aurora.modules.core.model.configMapping.ModuleConfig(this._storage[loc1]).addExternalDataProperties(arg1, arg2);
            return;
        }

        internal var _storage:flash.utils.Dictionary;

        internal var _mappings:XML;
    }
}


//              class SystemConfigProxy
package mgs.aurora.modules.core.model.configMapping 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SystemConfigProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SystemConfigProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public function getConfigById(arg1:*):*
        {
            return super.getData()[arg1];
        }

        public static const NAME:String="SystemConfigProxy";
    }
}


//            package currency
//              class Currency
package mgs.aurora.modules.core.model.currency 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.common.interfaces.currency.*;
    
    public class Currency extends Object implements mgs.aurora.common.interfaces.currency.ICurrency
    {
        public function Currency(arg1:String, arg2:XML)
        {
            super();
            this._defaultFormat = arg1;
            this._currecniesXML = arg2;
            return;
        }

        public function getFormatfromISOCode(arg1:String, arg2:int, arg3:Boolean):String
        {
            var ISOCode:String;
            var formatType:int;
            var noType:Boolean;
            var currencyNode:XMLList;
            var formatting:String;
            var attribId:String;

            var loc1:*;
            currencyNode = null;
            formatting = null;
            attribId = null;
            ISOCode = arg1;
            formatType = arg2;
            noType = arg3;
            var loc3:*=0;
            var loc4:*=this._currecniesXML.currency;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == ISOCode) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            currencyNode = loc2;
            formatting = "";
            attribId = "";
            if (noType) 
            {
                attribId = "@format";
            }
            else 
            {
                loc2 = formatType;
                switch (loc2) 
                {
                    case mgs.aurora.api.enums.CurrencyFormat.FULL:
                    case mgs.aurora.api.enums.CurrencyFormat.FULL_GENERIC:
                    case mgs.aurora.api.enums.CurrencyFormat.SYMBOL:
                    case mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC:
                    {
                        attribId = "@format" + formatType;
                        break;
                    }
                }
            }
            formatting = XMLList(currencyNode[attribId]).toString();
            return formatting != "" ? formatting : this._defaultFormat;
        }

        public function getDefaultFormat():String
        {
            return this._defaultFormat;
        }

        public function getDisplaySysmbolFromISOCode(arg1:String, arg2:int):String
        {
            var isoCode:String;
            var formatType:int;
            var value:String;
            var currencyNode:XMLList;
            var formatting:String;

            var loc1:*;
            value = null;
            currencyNode = null;
            formatting = null;
            isoCode = arg1;
            formatType = arg2;
            value = "";
            var loc3:*=0;
            var loc4:*=this._currecniesXML.currency;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == isoCode) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            currencyNode = loc2;
            formatting = this._defaultFormat;
            loc2 = formatType;
            switch (loc2) 
            {
                case mgs.aurora.api.enums.CurrencyFormat.FULL:
                {
                    value = currencyNode.@full.toString();
                    break;
                }
                case mgs.aurora.api.enums.CurrencyFormat.SYMBOL:
                {
                    value = currencyNode.@symbol.toString();
                    break;
                }
                default:
                {
                    value = "";
                    break;
                }
            }
            return value;
        }

        internal var _defaultFormat:String;

        internal var _currecniesXML:XML;
    }
}


//            package mutiplayer
//              package vo
//                class AliasLocalConnection
package mgs.aurora.modules.core.model.mutiplayer.vo 
{
    import flash.events.*;
    import flash.net.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    
    public class AliasLocalConnection extends flash.net.LocalConnection
    {
        public function AliasLocalConnection(arg1:String, arg2:org.puremvc.as3.multicore.interfaces.IFacade)
        {
            super();
            this.facade = arg2;
            this._connectionID = arg1;
            client = this;
            return;
        }

        public function aliasCreated(arg1:String):void
        {
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ALIAS_CREATED, arg1);
            dispatchEvent(new flash.events.Event(mgs.aurora.modules.core.model.mutiplayer.vo.AliasLocalConnection.ALIAS_RECEIVED));
            return;
        }

        public function get connectionID():String
        {
            return this._connectionID;
        }

        
        {
            ALIAS_RECEIVED = "alias_received";
        }

        internal var facade:org.puremvc.as3.multicore.interfaces.IFacade;

        internal var _connectionID:String;

        public static var ALIAS_RECEIVED:String="alias_received";
    }
}


//                class MPFData
package mgs.aurora.modules.core.model.mutiplayer.vo 
{
    public class MPFData extends Object
    {
        public function MPFData(arg1:XML)
        {
            super();
            this.status = arg1.Resp.@status.toString();
            this.alias = arg1.Resp.@nick.toString();
            this.playerID = arg1.Resp.@playerID.toString();
            this.city = arg1.Resp.@city.toString();
            this.currency = arg1.Resp.@currencyISO.toString();
            this.userID = arg1.Resp.@userID.toString();
            this.uniqueConnectionID = arg1.Resp.@uniqConnID.toString();
            this.systemGeneratedAlias = arg1.Resp.@aliasSysGen.toString();
            this.userType = arg1.Resp.@userType.toString();
            this.tournamentID = this._tournamentID;
            this.data = arg1;
            return;
        }

        public function setTournamentID(arg1:String):void
        {
            this._tournamentID = arg1;
            return;
        }

        public var status:String;

        public var alias:String;

        public var playerID:String;

        public var city:String;

        public var currency:String;

        public var userID:String;

        public var uniqueConnectionID:String;

        public var systemGeneratedAlias:String;

        public var userType:String;

        public var data:XML;

        public var tournamentID:String;

        internal var _tournamentID:String;
    }
}


//                class MPFDataSurrogate
package mgs.aurora.modules.core.model.mutiplayer.vo 
{
    import mgs.aurora.api.interfaces.multiplayer.*;
    
    public class MPFDataSurrogate extends Object implements mgs.aurora.api.interfaces.multiplayer.IMPFData
    {
        public function MPFDataSurrogate(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String, arg10:String, arg11:String, arg12:String, arg13:Boolean, arg14:String)
        {
            super();
            this._status = arg1;
            this._alias = arg2;
            this._playerID = arg3;
            this._city = arg4;
            this._currencyISO = arg5;
            this._userID = arg6;
            this._uniqueConnectionID = arg7;
            this._systemGeneratedAlias = arg8;
            this._userType = arg9;
            this._clientType = arg10;
            this._casinoID = arg11;
            this._tournamentID = arg12;
            this._oneClickEnabled = arg13;
            this._serviceID = arg14;
            return;
        }

        public function get alias():String
        {
            return this._alias;
        }

        public function get city():String
        {
            return this._city;
        }

        public function get currencyISO():String
        {
            return this._currencyISO;
        }

        public function get playerID():String
        {
            return this._playerID;
        }

        public function get status():String
        {
            return this._status;
        }

        public function get systemGeneratedAlias():String
        {
            return this._systemGeneratedAlias;
        }

        public function get uniqueConnectionID():String
        {
            return this._uniqueConnectionID;
        }

        public function get userID():String
        {
            return this._userID;
        }

        public function get userType():String
        {
            return this._userType;
        }

        public function get clientType():String
        {
            return this._clientType;
        }

        public function get casinoID():String
        {
            return this._casinoID;
        }

        public function get tournamentID():String
        {
            return this._tournamentID;
        }

        public function get oneClickEnabled():Boolean
        {
            return this._oneClickEnabled;
        }

        public function get serviceID():String
        {
            return this._serviceID;
        }

        public function set serviceID(arg1:String):void
        {
            this._serviceID = arg1;
            return;
        }

        internal var _status:String;

        internal var _alias:String;

        internal var _playerID:String;

        internal var _city:String;

        internal var _currencyISO:String;

        internal var _userID:String;

        internal var _uniqueConnectionID:String;

        internal var _systemGeneratedAlias:String;

        internal var _userType:String;

        internal var _casinoID:String;

        internal var _clientType:String;

        internal var _tournamentID:String;

        internal var _oneClickEnabled:Boolean;

        internal var _serviceID:String;
    }
}


//              class AliasActivationExternalLaunchProxy
package mgs.aurora.modules.core.model.mutiplayer 
{
    import flash.events.*;
    import flash.system.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.mutiplayer.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class AliasActivationExternalLaunchProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function AliasActivationExternalLaunchProxy()
        {
            super(NAME, null);
            return;
        }

        internal function get connection():mgs.aurora.modules.core.model.mutiplayer.vo.AliasLocalConnection
        {
            return getData() as mgs.aurora.modules.core.model.mutiplayer.vo.AliasLocalConnection;
        }

        public function get busy():Boolean
        {
            return this._busy;
        }

        public function set busy(arg1:Boolean):void
        {
            this._busy = arg1;
            return;
        }

        internal function connect():void
        {
            var loc1:*=this.connection;
            if (loc1) 
            {
                loc1.close();
            }
            this.createConnection();
            return;
        }

        internal function createConnection():void
        {
            this._busy = true;
            var loc1:*="mp-" + mgs.aurora.common.utilities.GUID.create();
            var loc2:*=new mgs.aurora.modules.core.model.mutiplayer.vo.AliasLocalConnection(loc1, facade);
            loc2.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSec, false, 0, true);
            loc2.addEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.onAsync, false, 0, true);
            loc2.addEventListener(mgs.aurora.modules.core.model.mutiplayer.vo.AliasLocalConnection.ALIAS_RECEIVED, this.onAliasReceived, false, 0, true);
            setData(loc2);
            var loc3:*=facade.retrieveProxy(mgs.aurora.modules.core.model.SessionConfigProxy.NAME) as mgs.aurora.modules.core.model.SessionConfigProxy;
            flash.system.Security.allowDomain(loc3.aliasActivationAllowDomain);
            loc2.allowDomain(loc3.aliasActivationAllowDomain);
            loc2.allowInsecureDomain(loc3.aliasActivationAllowDomain);
            this.connection.connect("_" + this.connection.connectionID);
            return;
        }

        internal function onAliasReceived(arg1:flash.events.Event):void
        {
            this._busy = false;
            return;
        }

        internal function onAsync(arg1:flash.events.AsyncErrorEvent):void
        {
            return;
        }

        internal function onSec(arg1:flash.events.SecurityErrorEvent):void
        {
            return;
        }

        public function launch():void
        {
            this.connect();
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME) as mgs.aurora.modules.core.model.ExternalLauncherProxy;
            loc1.launchAliasActivation(this.connection.connectionID);
            return;
        }

        public function close():void
        {
            this.connection.close();
            setData(null);
            return;
        }

        public static const NAME:String="AliasActivationExternalLaunchProxy";

        internal var _busy:Boolean=false;
    }
}


//              class MPFDataProxy
package mgs.aurora.modules.core.model.mutiplayer 
{
    import mgs.aurora.api.interfaces.multiplayer.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.mutiplayer.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class MPFDataProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function MPFDataProxy()
        {
            super(NAME, null);
            return;
        }

        public override function setData(arg1:Object):void
        {
            var loc1:*=new mgs.aurora.modules.core.model.mutiplayer.vo.MPFData(XML(arg1));
            super.setData(loc1);
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME) as mgs.aurora.modules.core.model.SessionDetailsProxy;
            loc2.mpfUserID = loc1.userID;
            this.mpf.setTournamentID(loc2.curTournamentID);
            return;
        }

        internal function get mpf():mgs.aurora.modules.core.model.mutiplayer.vo.MPFData
        {
            return getData() as mgs.aurora.modules.core.model.mutiplayer.vo.MPFData;
        }

        public function get status():String
        {
            return this.mpf.status;
        }

        public function get alias():String
        {
            return this.mpf.alias;
        }

        public function set alias(arg1:String):void
        {
            if (this.mpf != null) 
            {
                this.mpf.alias = arg1;
            }
            return;
        }

        public function get playerID():String
        {
            return this.mpf.playerID;
        }

        public function get city():String
        {
            return this.mpf.city;
        }

        public function get currencyISO():String
        {
            return this.mpf.currency;
        }

        public function get userID():String
        {
            return this.mpf.userID;
        }

        public function get uniqueConnectionID():String
        {
            return this.mpf.uniqueConnectionID;
        }

        public function get systemGeneratedAlias():String
        {
            return this.mpf.systemGeneratedAlias;
        }

        public function set systemGeneratedAlias(arg1:String):void
        {
            if (this.mpf != null) 
            {
                this.mpf.systemGeneratedAlias = arg1;
            }
            return;
        }

        public function get userType():String
        {
            return this.mpf.userType;
        }

        public function get tournamentID():String
        {
            return this.mpf.tournamentID;
        }

        public function set tournamentID(arg1:String):void
        {
            if (this.mpf != null) 
            {
                this.mpf.setTournamentID(arg1);
            }
            Debugger.trace("Set tournamentID :5: " + arg1, "SYSTEM");
            return;
        }

        public function buildMPFDataObj():mgs.aurora.api.interfaces.multiplayer.IMPFData
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME) as mgs.aurora.modules.core.model.SessionDetailsProxy;
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc3:*=loc2.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc4:*=loc3.mpf.@enableMPFOneClick == "1";
            return new mgs.aurora.modules.core.model.mutiplayer.vo.MPFDataSurrogate(this.status, this.alias, this.playerID, this.city, this.currencyISO, this.userID, this.uniqueConnectionID, this.systemGeneratedAlias, this.userType, loc1.clientType.toString(), loc1.serverID.toString(), loc1.curTournamentID.toString(), loc4, loc1.serviceID);
        }

        public static const NAME:String="MPFDataProxy";
    }
}


//            package vo
//              class BrowserSettings
package mgs.aurora.modules.core.model.vo 
{
    public class BrowserSettings extends Object
    {
        public function BrowserSettings(arg1:int, arg2:String)
        {
            super();
            this._browserCacheLimit = arg1;
            this._browserVersions = arg2.split(",");
            return;
        }

        public function get browserCacheLimit():uint
        {
            return this._browserCacheLimit;
        }

        public function get browserVersions():Array
        {
            return this._browserVersions;
        }

        public function isValidBrowser(arg1:String):Boolean
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=NaN;
            var loc9:*=NaN;
            var loc10:*=NaN;
            var loc1:*=arg1.split("_");
            var loc2:*=loc1[0].toLowerCase();
            arg1 = loc1[1].toLowerCase();
            var loc3:*=0;
            while (loc3 < this._browserVersions.length) 
            {
                loc5 = (loc4 = this._browserVersions[loc3].split("_"))[0].toLowerCase();
                loc6 = loc4[1].toLowerCase();
                if (loc5 == loc2) 
                {
                    if (loc6 == "*") 
                    {
                        return true;
                    }
                    if (loc6 == arg1) 
                    {
                        return true;
                    }
                    if (loc6.indexOf("-") != -1) 
                    {
                        loc7 = loc6.split("-");
                        loc8 = parseFloat(loc7[0]);
                        loc9 = loc7[1] != "*" ? parseFloat(loc7[1]) : Infinity;
                        if ((loc10 = parseFloat(arg1)) >= loc8 && loc10 <= loc9) 
                        {
                            return true;
                        }
                    }
                }
                ++loc3;
            }
            return false;
        }

        internal var _browserCacheLimit:uint;

        internal var _browserVersions:Array;
    }
}


//              class HiddenGame
package mgs.aurora.modules.core.model.vo 
{
    public class HiddenGame extends Object
    {
        public function HiddenGame(arg1:String, arg2:String, arg3:String, arg4:int)
        {
            super();
            this._gameID = arg1;
            this._moduleID = arg2;
            this._clientID = arg3;
            this._messageID = arg4;
            return;
        }

        public function get gameID():String
        {
            return this._gameID;
        }

        public function get moduleID():String
        {
            return this._moduleID;
        }

        public function get clientID():String
        {
            return this._clientID;
        }

        public function get messageID():int
        {
            return this._messageID;
        }

        internal var _gameID:String;

        internal var _moduleID:String;

        internal var _clientID:String;

        internal var _messageID:int;
    }
}


//              class ModuleIDs
package mgs.aurora.modules.core.model.vo 
{
    public class ModuleIDs extends Object
    {
        public function ModuleIDs(arg1:String, arg2:String)
        {
            super();
            this.moduleID = arg1;
            this.clientID = arg2;
            return;
        }

        public var moduleID:String;

        public var clientID:String;
    }
}


//              class SwitchModuleParams
package mgs.aurora.modules.core.model.vo 
{
    public class SwitchModuleParams extends Object
    {
        public function SwitchModuleParams(arg1:uint, arg2:uint)
        {
            super();
            this.moduleID = arg1;
            this.clientID = arg2;
            return;
        }

        public var moduleID:uint;

        public var clientID:uint;
    }
}


//              class TopBarUpdate
package mgs.aurora.modules.core.model.vo 
{
    public class TopBarUpdate extends Object
    {
        public function TopBarUpdate(arg1:XML, arg2:uint, arg3:uint, arg4:Number)
        {
            super();
            this.xml = arg1;
            this.winVal = arg2;
            this.betVal = arg3;
            this.balance = arg4;
            return;
        }

        public function get xml():XML
        {
            return this._xml;
        }

        public function set xml(arg1:XML):void
        {
            this._xml = arg1;
            return;
        }

        public function get winVal():uint
        {
            return this._winVal;
        }

        public function set winVal(arg1:uint):void
        {
            this._winVal = arg1;
            return;
        }

        public function get betVal():uint
        {
            return this._betVal;
        }

        public function set betVal(arg1:uint):void
        {
            this._betVal = arg1;
            return;
        }

        public function get balance():Number
        {
            return this._balance;
        }

        public function set balance(arg1:Number):void
        {
            this._balance = arg1;
            return;
        }

        internal var _xml:XML;

        internal var _winVal:uint;

        internal var _betVal:uint;

        internal var _balance:Number;
    }
}


//            class BankingConfigProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class BankingConfigProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function BankingConfigProxy(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public function get displayType():int
        {
            return data.displayType;
        }

        public function set displayType(arg1:int):void
        {
            data.displayType = arg1;
            return;
        }

        public static const NAME:String="BankingConfigProxy";
    }
}


//            class BankingProxy
package mgs.aurora.modules.core.model 
{
    import flash.utils.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class BankingProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function BankingProxy(arg1:Object=null)
        {
            super(NAME, new flash.utils.Dictionary());
            return;
        }

        public override function onRegister():void
        {
            data.bankButtonExcluded = false;
            data.guestBankingAllowed = false;
            data.userType = 2;
            return;
        }

        public function get isAvailable():Boolean
        {
            return !data.bankButtonExcluded && (data.guestBankingAllowed && data.userType == mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER || data.userType == mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER || data.userType == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS);
        }

        public function set bankButtonExcluded(arg1:Boolean):void
        {
            data.bankButtonExcluded = arg1;
            return;
        }

        public function set guestBankingAllowed(arg1:Boolean):void
        {
            data.guestBankingAllowed = arg1;
            return;
        }

        public function set userType(arg1:uint):void
        {
            data.userType = arg1;
            return;
        }

        public static const NAME:String="BankingProxy";
    }
}


//            class BrandMigrationProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.modules.core.enum.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class BrandMigrationProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function BrandMigrationProxy()
        {
            super(NAME);
            return;
        }

        public override function onRegister():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            if (loc2.casino.login.@allowBrandMigration.toString() == "1") 
            {
                this._allow = true;
                this._mappedURL = loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRANDMIGRATION);
            }
            return;
        }

        public function getMappedURL(arg1:String, arg2:String):String
        {
            var id:String;
            var language:String;
            var _mupIDNode:XMLList;
            var url:String;

            var loc1:*;
            _mupIDNode = null;
            url = null;
            id = arg1;
            language = arg2;
            var loc3:*=0;
            var loc4:*=this._mappedURL.mapping;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == id && @lang == language) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            _mupIDNode = loc2;
            if (_mupIDNode.length() == 0) 
            {
                loc3 = 0;
                loc4 = this._mappedURL.mapping;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@id == id && @lang == "en") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                _mupIDNode = loc2;
            }
            url = _mupIDNode.@url.toString();
            url = url + (url.indexOf("?") != -1 ? "&extMig=1" : "?extMig=1");
            return url;
        }

        public static const NAME:String="BrandMigrationProxy";

        internal var _allow:Boolean=false;

        internal var _mappedURL:XML;
    }
}


//            class BrowserSettingsProxy
package mgs.aurora.modules.core.model 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class BrowserSettingsProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function BrowserSettingsProxy()
        {
            super(NAME);
            return;
        }

        public function setupBrowserSettings():void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            this._storedBrowsers = new Vector.<mgs.aurora.modules.core.model.vo.BrowserSettings>();
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.COMBINED_CONFIG).browserConfig.CacheLimit;
            var loc2:*=new RegExp("[\\s\\r\\n]*", "gim");
            var loc6:*=0;
            var loc7:*=loc1;
            for each (loc3 in loc7) 
            {
                loc4 = String(loc3.@browsers).replace(loc2, "").toLowerCase();
                loc5 = loc3.@value.toString() != "unlimited" ? parseInt(loc3.@value, 10) : int.MAX_VALUE;
                this._storedBrowsers.push(new mgs.aurora.modules.core.model.vo.BrowserSettings(loc5, loc4));
            }
            this._storedBrowsers.sort(this.compare);
            return;
        }

        internal function compare(arg1:mgs.aurora.modules.core.model.vo.BrowserSettings, arg2:mgs.aurora.modules.core.model.vo.BrowserSettings):Number
        {
            return arg2.browserCacheLimit - arg1.browserCacheLimit;
        }

        public function getBrowerSettingsForVersion(arg1:String):mgs.aurora.modules.core.model.vo.BrowserSettings
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=this._storedBrowsers;
            for each (loc1 in loc4) 
            {
                if (!loc1.isValidBrowser(arg1)) 
                {
                    continue;
                }
                return loc1;
            }
            loc2 = new mgs.aurora.modules.core.model.vo.BrowserSettings(-1, arg1);
            return loc2;
        }

        public function getDictionaryOfBrowserSettings(arg1:String):flash.utils.Dictionary
        {
            var loc2:*=null;
            var loc1:*=new flash.utils.Dictionary();
            var loc3:*=0;
            var loc4:*=this._storedBrowsers;
            for each (loc2 in loc4) 
            {
                if (loc2.isValidBrowser(arg1)) 
                {
                    loc1[loc2.browserCacheLimit] = true;
                    continue;
                }
                loc1[loc2.browserCacheLimit] = false;
            }
            return loc1;
        }

        public static const NAME:String="BrowserSettingsProxy";

        internal var _storedBrowsers:__AS3__.vec.Vector.<mgs.aurora.modules.core.model.vo.BrowserSettings>;
    }
}


//            class CurrenciesProxy
package mgs.aurora.modules.core.model 
{
    import __AS3__.vec.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.common.interfaces.currency.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.common.vo.currency.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.currency.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class CurrenciesProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function CurrenciesProxy()
        {
            super(NAME);
            return;
        }

        public override function onRegister():void
        {
            var dependancyProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var brandConfig:XML;
            var balanceUtils:mgs.aurora.common.utilities.BalanceUtils;

            var loc1:*;
            dependancyProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            brandConfig = dependancyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            this._currencies = dependancyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.CURRENCIES);
            if (brandConfig.casino.currencies.@allow.toString() == "1") 
            {
                this._allow = true;
                this._defaultFormat = brandConfig.casino.creditsFormat.@format.toString();
                var loc3:*=0;
                var loc4:*=this._currencies.currency;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@id == _iso) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._currencyNode = loc2;
            }
            balanceUtils = mgs.aurora.common.utilities.BalanceUtils.getInstance();
            this._sysAllowAbbreviate = brandConfig.casino.currencies.@abbreviate.toString() == "1";
            this._sysAllowMultipler = brandConfig.casino.currencies.@applyMultiplier.toString() == "1";
            if (facade.hasProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)) 
            {
                this.resetFormattingSetting();
            }
            this.setAbbreviationDetails();
            this._currencyExposed = new mgs.aurora.modules.core.model.currency.Currency(this._defaultFormat, this._currencies);
            return;
        }

        internal function setAbbreviationDetails():void
        {
            var dependancyProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var stringXML:XML;
            var abbRules:XMLList;
            var usedChar:String;
            var len:int;
            var n:int;
            var formatNode:XMLList;
            var character:String;
            var value:Number;
            var abbFormat:mgs.aurora.common.vo.currency.AbbreviationFormat;

            var loc1:*;
            formatNode = null;
            character = null;
            value = NaN;
            abbFormat = null;
            dependancyProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            stringXML = dependancyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            abbRules = dependancyProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG).AbbreviationRules.format;
            usedChar = ",";
            len = abbRules.length();
            n = 0;
            while (n < len) 
            {
                formatNode = XMLList(abbRules[n]);
                var loc3:*=0;
                var loc4:*=stringXML.string;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@ID == formatNode.@text) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                character = loc2.@text;
                value = formatNode.@value;
                if (usedChar.indexOf("," + character + ",") == -1) 
                {
                    usedChar = usedChar + (character + ",");
                    abbFormat = new mgs.aurora.common.vo.currency.AbbreviationFormat(value, character);
                    mgs.aurora.common.utilities.BalanceUtils.getInstance().addAbbreviationFormat(abbFormat);
                }
                ++n;
            }
            return;
        }

        public function resetFormattingSetting():void
        {
            var loc1:*=mgs.aurora.common.utilities.BalanceUtils.getInstance();
            var loc2:*=mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).gameSet;
            loc1.allowAbbreviate = this._sysAllowAbbreviate && loc2.@useAbbreviate == "1";
            loc1.allowMultipler = this._sysAllowMultipler && loc2.@useMultiplier == "1";
            Debugger.trace("SET VALUES : " + loc1.allowAbbreviate + " ; " + loc1.allowMultipler, "SYSTEM");
            return;
        }

        public function set currencyISO(arg1:String):void
        {
            var value:String;

            var loc1:*;
            value = arg1;
            if (!(value == null) && this._allow) 
            {
                this._iso = value;
                var loc3:*=0;
                var loc4:*=this._currencies.currency;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@id == _iso) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._currencyNode = loc2;
            }
            return;
        }

        public function get currencyISO():String
        {
            return this._iso;
        }

        public function set currencyMultiplier(arg1:uint):void
        {
            this._multiplier = arg1;
            mgs.aurora.common.utilities.BalanceUtils.getInstance().multiplier = arg1;
            return;
        }

        public function get currencyMultiplier():uint
        {
            return this._multiplier;
        }

        public function get allowed():Boolean
        {
            return this._allow && this._multiplier == 1;
        }

        public function get standardCurrencyFormat():int
        {
            return this._standardCurrencyFormat;
        }

        public function get formatting():String
        {
            var loc1:*="";
            if (this.allowed) 
            {
                loc1 = this._currencyNode.@format.toString();
            }
            return loc1 != "" ? loc1 : this._defaultFormat;
        }

        public function formatToCurrency(arg1:Number, arg2:int=0, arg3:String=null, arg4:Boolean=false, arg5:String=null):String
        {
            var value:Number;
            var formatType:int=0;
            var isoCode:String=null;
            var shortlistOnly:Boolean=false;
            var formatting:String=null;
            var allowCurrency:Boolean;
            var formattedValue:String;
            var currencyNode:XMLList;
            var currency:String;
            var attribId:String;

            var loc1:*;
            formattedValue = null;
            currencyNode = null;
            currency = null;
            attribId = null;
            value = arg1;
            formatType = arg2;
            isoCode = arg3;
            shortlistOnly = arg4;
            formatting = arg5;
            allowCurrency = false;
            if (this.allowed) 
            {
                formattedValue = "";
                currencyNode = this._currencyNode;
                if (!(isoCode == this._iso) && !(isoCode == null)) 
                {
                    var loc3:*=0;
                    var loc4:*=this._currencies.currency;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@id == isoCode) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    currencyNode = loc2;
                }
                allowCurrency = shortlistOnly ? currencyNode.@top.toString() == "1" : true;
                if (!(formatting == null) && formatting.length > 0) 
                {
                    currency = this.getCurrencyDisplay(formatType, isoCode, shortlistOnly);
                    formatting = formatting.indexOf("^") == -1 ? currency + " " + formatting : formatting.replace("^", currency);
                }
                else 
                {
                    attribId = "@format";
                    loc2 = formatType;
                    switch (loc2) 
                    {
                        case mgs.aurora.api.enums.CurrencyFormat.FULL:
                        case mgs.aurora.api.enums.CurrencyFormat.FULL_GENERIC:
                        case mgs.aurora.api.enums.CurrencyFormat.SYMBOL:
                        case mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC:
                        {
                            attribId = "@format" + formatType;
                            break;
                        }
                    }
                    formatting = XMLList(currencyNode[attribId]).toString();
                }
            }
            if (formatting == "" || formatting == null) 
            {
                formatting = this._defaultFormat;
            }
            if (this.allowed && allowCurrency) 
            {
                formattedValue = mgs.aurora.common.utilities.BalanceUtils.formatNumberToCurrencyDisplay(value, formatting);
            }
            else 
            {
                formattedValue = mgs.aurora.common.utilities.BalanceUtils.formatNumberToCreditsDisplay(value, formatting);
            }
            return formattedValue;
        }

        public function getCurrencyDisplay(arg1:int=0, arg2:String=null, arg3:Boolean=false):String
        {
            var formatType:int=0;
            var isoCode:String=null;
            var shortlistOnly:Boolean=false;
            var value:String;
            var currencyNode:XMLList;
            var allowCurrency:Boolean;
            var formatting:String;

            var loc1:*;
            currencyNode = null;
            allowCurrency = false;
            formatting = null;
            formatType = arg1;
            isoCode = arg2;
            shortlistOnly = arg3;
            value = "";
            if (this.allowed) 
            {
                if (!(isoCode == this._iso) && !(isoCode == null)) 
                {
                    var loc3:*=0;
                    var loc4:*=this._currencies.currency;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@id == isoCode) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                }
                undefined = loc1 = 
#error('scope') 
                ;
                allowCurrency = shortlistOnly ? currencyNode.@top.toString() == "1" : true;
                formatting = this._defaultFormat;
                if (allowCurrency) 
                {
                    loc2 = formatType;
                    switch (loc2) 
                    {
                        case mgs.aurora.api.enums.CurrencyFormat.FULL:
                        {
                            value = currencyNode.@full.toString();
                            break;
                        }
                        case mgs.aurora.api.enums.CurrencyFormat.SYMBOL:
                        {
                            value = currencyNode.@symbol.toString();
                            break;
                        }
                    }
                }
                return value;
            }
            return "";
        }

        public function setCurrencyDisplay(arg1:String):Boolean
        {
            var loc1:*=this.getCurrencyDisplay(mgs.aurora.api.enums.CurrencyFormat.SYMBOL, arg1);
            if (loc1 == "") 
            {
                return false;
            }
            if (this._isoCache == "") 
            {
                this._isoCache = this.currencyISO;
            }
            this.currencyISO = arg1;
            if (this._iso != arg1) 
            {
                if (this._isoCache != "") 
                {
                    this.currencyISO = this._isoCache;
                    this._isoCache = "";
                }
                return false;
            }
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.BankingConfigProxy.NAME) as mgs.aurora.modules.core.model.BankingConfigProxy;
            if (loc2.displayType == mgs.aurora.api.enums.BalanceDisplayType.CURRENCY) 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_DISPLAYTYPE);
            }
            return true;
        }

        public function resetISO():void
        {
            if (this._isoCache != "") 
            {
                this.currencyISO = this._isoCache;
                this._isoCache = "";
            }
            return;
        }

        public function get currenciesInfo():mgs.aurora.common.interfaces.currency.ICurrency
        {
            return this._currencyExposed;
        }

        public static const NAME:String="CurrenciesProxy";

        internal var _allow:Boolean=false;

        internal var _allowMultipler:Boolean=false;

        internal var _allowAbbreviate:Boolean=false;

        internal var _currencies:XML;

        internal var _currencyNode:XMLList;

        internal var _iso:String="";

        internal var _multiplier:uint=1;

        internal var _defaultFormat:String="# ###.##";

        internal var _standardCurrencyFormat:int=2;

        internal var _isoCache:String="";

        internal var _currencyExposed:mgs.aurora.common.interfaces.currency.ICurrency;

        internal var _abbreviateFormats:__AS3__.vec.Vector.<mgs.aurora.common.vo.currency.AbbreviationFormat>;

        internal var _sysAllowAbbreviate:Boolean;

        internal var _sysAllowMultipler:Boolean;
    }
}


//            class DependenciesProxy
package mgs.aurora.modules.core.model 
{
    import flash.display.*;
    import flash.utils.*;
    import mgs.aurora.modules.core.controller.dependancies.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class DependenciesProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function DependenciesProxy()
        {
            super(NAME, new flash.utils.Dictionary());
            this._dependancyLoadIndex = 0;
            return;
        }

        public function setXmlDependency(arg1:String, arg2:XML, arg3:Boolean=false):void
        {
            if (arg1 == mgs.aurora.modules.core.enum.DependencyName.COMBINED_CONFIG) 
            {
                this.preProcessCombinedConfiguration(arg2);
            }
            this.store[arg1] = arg2;
            if (arg3) 
            {
                this.sendStoredNotification(arg1);
            }
            return;
        }

        public function getXmlDependency(arg1:String):XML
        {
            return this.store[arg1];
        }

        public function setLoaderInfoDependency(arg1:String, arg2:flash.display.LoaderInfo, arg3:Boolean=false):void
        {
            if (this.store[arg1] == null) 
            {
                this.store[arg1] = arg2;
                if (arg3) 
                {
                    this.sendStoredNotification(arg1);
                }
            }
            return;
        }

        public function getLoaderInfoDependency(arg1:String):flash.display.LoaderInfo
        {
            return this.store[arg1];
        }

        public function hasDependency(arg1:String):Boolean
        {
            var loc1:*=true;
            if (this.store[arg1] == null) 
            {
                loc1 = false;
            }
            return loc1;
        }

        internal function get store():flash.utils.Dictionary
        {
            return this.data as flash.utils.Dictionary;
        }

        internal function sendStoredNotification(arg1:String):void
        {
            var loc1:*=mgs.aurora.modules.core.notifications.CoreNotifications.DEPENDENCY_NAME_PREFIX + arg1;
            this.facade.registerCommand(loc1, mgs.aurora.modules.core.controller.dependancies.DependencyLoadedAndStoredCommand);
            this.facade.sendNotification(loc1);
            return;
        }

        internal function preProcessCombinedConfiguration(arg1:XML):void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=arg1.child("*").length();
            var loc2:*="";
            var loc3:*=0;
            while (loc3 < loc1) 
            {
                var loc9:*=arg1.child("*")[loc3].name().toString();
                switch (loc9) 
                {
                    case CONFIGMAPPINGS_NODE:
                    {
                        loc4 = arg1.child("*")[loc3];
                        loc2 = mgs.aurora.modules.core.enum.DependencyName.CONFIG_MAPPINGS;
                        this.setXmlDependency(loc2, loc4);
                        break;
                    }
                    case DIALOGUETYPES_NODE:
                    {
                        loc5 = arg1.child("*")[loc3];
                        loc2 = mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_DEFINITIONS_CONFIG;
                        this.setXmlDependency(loc2, loc5);
                        break;
                    }
                    case DIALOGUES_NODE:
                    {
                        loc6 = arg1.child("*")[loc3];
                        loc2 = mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_MAPPING_CONFIG;
                        this.setXmlDependency(loc2, loc6);
                        break;
                    }
                    case CONFIG_NODE:
                    {
                        loc7 = arg1.child("*")[loc3];
                        loc2 = mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_CONTROL_CONFIG;
                        this.setXmlDependency(loc2, loc7);
                        break;
                    }
                    case FRAMECONFIG_NODE:
                    {
                        loc8 = arg1.child("*")[loc3];
                        loc2 = mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMELIB_CONFIG;
                        this.setXmlDependency(loc2, loc8);
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                ++loc3;
            }
            return;
        }

        public function get dependancyLoadIndex():uint
        {
            return this._dependancyLoadIndex;
        }

        public function set dependancyLoadIndex(arg1:uint):void
        {
            this._dependancyLoadIndex = arg1;
            return;
        }

        public static const NAME:String="DependenciesProxy";

        internal static const CONFIGMAPPINGS_NODE:String="configMappings";

        internal static const DIALOGUETYPES_NODE:String="dialogueTypes";

        internal static const DIALOGUES_NODE:String="dialogues";

        internal static const CONFIG_NODE:String="config";

        internal static const FRAMECONFIG_NODE:String="frameConfig";

        internal var _dependancyLoadIndex:uint;
    }
}


//            class DependenciesSetupProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.common.interfaces.loader.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class DependenciesSetupProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements mgs.aurora.common.interfaces.loader.IDependenciesConfig, org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function DependenciesSetupProxy(arg1:Object=null)
        {
            if (arg1.systemDependencies.length() > 0) 
            {
                this.systemDependencies = arg1.systemDependencies;
            }
            else 
            {
                this.systemDependencies = arg1.dependencies;
            }
            super(NAME, this.systemDependencies);
            return;
        }

        public function getVersionedFilename(arg1:String):String
        {
            var filename:String;
            var v:String;

            var loc1:*;
            v = null;
            filename = arg1;
            var loc3:*=0;
            var loc4:*=this.systemDependencies.dependency;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@file == filename.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            v = loc2.@etag;
            if (v != "") 
            {
                if (v.length > 0) 
                {
                    filename = filename + "?v=" + v;
                }
            }
            return filename;
        }

        public static const NAME:String="DependenciesSetupProxy";

        internal var systemDependencies:Object;
    }
}


//            class ExternalDataProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.modules.core.enum.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class ExternalDataProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function ExternalDataProxy(arg1:Object)
        {
            super(NAME, arg1);
            this.changeValues();
            return;
        }

        public function get externalData():mgs.aurora.common.interfaces.IExternalData
        {
            return this.data as mgs.aurora.common.interfaces.IExternalData;
        }

        public function get theme():String
        {
            return this.externalData.getValue("theme", "");
        }

        public function get variant():String
        {
            return this.externalData.getValue("variant", "");
        }

        public function get regMarket():String
        {
            return this.externalData.getValue("regmarket", "");
        }

        public function get language():String
        {
            return this.externalData.getValue("ul", "en");
        }

        public function get dependencies():XML
        {
            var loc1:*=null;
            if (this.externalData.getValue("__dependencies__", "") == "") 
            {
                loc1 = new XML(this.externalData.getValue("__combinedsettings__", ""));
            }
            else 
            {
                loc1 = new XML(this.externalData.getValue("__dependencies__", ""));
            }
            return loc1;
        }

        internal function changeValues():void
        {
            var loc1:*=this.externalData.getValue(mgs.aurora.modules.core.enum.JSDataNames.LOGINTYPE, "");
            if (loc1 != "") 
            {
                loc1 = loc1.toUpperCase();
                this.externalData.setValue(mgs.aurora.modules.core.enum.JSDataNames.LOGINTYPE, loc1);
                if (loc1 == "T3") 
                {
                    this.externalData.setValue(mgs.aurora.modules.core.enum.JSDataNames.LOGINTYPE, mgs.aurora.common.enums.raptorSession.LoginType.LEGACY);
                }
            }
            return;
        }

        public static const NAME:String="ExternalDataProxy";
    }
}


//            class ExternalLauncherProxy
package mgs.aurora.modules.core.model 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.enum.external.*;
    import mgs.aurora.modules.core.events.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class ExternalLauncherProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function ExternalLauncherProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public override function setData(arg1:Object):void
        {
            super.setData(arg1);
            var loc1:*=flash.events.IEventDispatcher(arg1);
            loc1.addEventListener(mgs.aurora.modules.core.events.ExternalLaunchersEvent.EXTERNAL_PAGE_CLOSE, this.onExternalClosed, false, 0, true);
            loc1.addEventListener(mgs.aurora.modules.core.events.ExternalLaunchersEvent.EXTERNAL_PAGE_OPEN, this.onExternalOpened, false, 0, true);
            loc1.addEventListener(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH, this.onPostGenieStep, false, 0, true);
            loc1.addEventListener(mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_FUN_BONUS_TUTORIAL, this.onPostGenieStep, false, 0, true);
            return;
        }

        internal function onExternalOpened(arg1:mgs.aurora.modules.core.events.ExternalLaunchersEvent):void
        {
            return;
        }

        internal function onExternalClosed(arg1:mgs.aurora.modules.core.events.ExternalLaunchersEvent):void
        {
            var loc1:*=arg1.id;
            switch (loc1) 
            {
                case mgs.aurora.modules.core.enum.external.WindowNames.ALIAS_ACTIVATION:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ALIAS_REQUEST_CANCELED);
                    break;
                }
            }
            return;
        }

        internal function onPostGenieStep(arg1:mgs.aurora.modules.core.events.ExternalLaunchersEvent):void
        {
            var loc6:*=null;
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.GenieStepsProxy.NAME) as mgs.aurora.modules.core.model.GenieStepsProxy;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*="";
            var loc4:*="";
            var loc5:*="";
            var loc7:*=arg1.type;
            switch (loc7) 
            {
                case mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_SITE_LAUNCH:
                {
                    loc3 = loc1.stepId(mgs.aurora.modules.core.enum.GenieStepIdNames.EXTERNAL_PAGE_LAUNCH);
                    loc4 = String(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]) + "|" + arg1.id;
                    if (loc2[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN]) 
                    {
                        loc5 = String(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
                    }
                    break;
                }
                case mgs.aurora.modules.core.events.ExternalLaunchersEvent.GENIE_STEP_FUN_BONUS_TUTORIAL:
                {
                    loc3 = loc1.stepId(mgs.aurora.modules.core.enum.GenieStepIdNames.FUN_BONUS_TUTORIAL_LAUNCH);
                    loc4 = arg1.id;
                    if (loc2[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN]) 
                    {
                        loc5 = String(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME]);
                    }
                    break;
                }
            }
            if (loc3 != "") 
            {
                (loc6 = new flash.utils.Dictionary()).stepId = loc3;
                loc6.playerLoginName = loc5;
                loc6.stepRef = loc4;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GENERIC_STEP, loc6);
            }
            return;
        }

        public function get externalLauncher():mgs.aurora.modules.core.externalLauncher.IExternalLauncher
        {
            return super.getData() as mgs.aurora.modules.core.externalLauncher.IExternalLauncher;
        }

        public function launchAvatarUpload():void
        {
            this.externalLauncher.launchAvatarUpload();
            return;
        }

        public function launchAliasActivation(arg1:String):void
        {
            this.externalLauncher.launchAliasActivation(arg1);
            return;
        }

        public function closeWindow():void
        {
            this.externalLauncher.closeWindow();
            return;
        }

        public static const NAME:String="ExternalLauncherProxy";
    }
}


//            class ExtraModuleDataProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.api.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class ExtraModuleDataProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function ExtraModuleDataProxy(arg1:mgs.aurora.api.module.ExtraModuleData)
        {
            this.extraData = arg1;
            super(NAME);
            return;
        }

        public function get extraData():mgs.aurora.api.module.ExtraModuleData
        {
            return this._extraData as mgs.aurora.api.module.ExtraModuleData;
        }

        public function set extraData(arg1:mgs.aurora.api.module.ExtraModuleData):void
        {
            this._extraData = arg1;
            return;
        }

        public static const NAME:String="ExtraModuleDataProxy";

        internal var _extraData:mgs.aurora.api.module.ExtraModuleData;
    }
}


//            class FlashStorageProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class FlashStorageProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function FlashStorageProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public static const NAME:String="FlashStorageProxy";
    }
}


//            class GameSetProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.utils.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class GameSetProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function GameSetProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public function get allowBonusBubble():Boolean
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc2[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_BONUS_BUBBLE] == "1") 
            {
                if (this.gameSet.art.@showBB.length() == "1") 
                {
                    return this.gameSet.art.@showBB == "1";
                }
                if (this.gameSet.@showBB.length() == "1") 
                {
                    return this.gameSet.@showBB == "1";
                }
                return true;
            }
            return false;
        }

        public function get gameSet():XML
        {
            return this.data as XML;
        }

        public function get comps():int
        {
            if (this.gameSet.@comp.length() != 1) 
            {
                throw new Error("Error while trying to read \"comp\" attribute on the gameset node");
            }
            return parseInt(this.gameSet.@comp.toString(), 10);
        }

        public function getLaunchUrl():String
        {
            return mgs.aurora.modules.core.utils.ModuleUtility.getLaunchUrl(this.gameSet);
        }

        public function isExternalGame():Boolean
        {
            return mgs.aurora.modules.core.utils.ModuleUtility.isExternalGame(this.gameSet);
        }

        public function get isRouterConnectionRequired():Boolean
        {
            return mgs.aurora.common.utilities.StringUtils.stringToBoolean(this.gameSet.multiplayer.@routerRequired.toString());
        }

        public function get isLobbyConnectionRequired():Boolean
        {
            return mgs.aurora.common.utilities.StringUtils.stringToBoolean(this.gameSet.multiplayer.@lobbyRequired.toString());
        }

        public function get isRegistrationRequired():Boolean
        {
            Debugger.trace("Game requires isRegistrationRequired : " + !(this.gameSet.@allowGameReg == undefined), "SYSTEM - Core MPF");
            return !(this.gameSet.@allowGameReg == undefined);
        }

        public function get requiresSockets():Boolean
        {
            var loc1:*=this.isLobbyConnectionRequired || this.isRouterConnectionRequired;
            Debugger.trace("Game requires sockets : " + loc1, "SYSTEM - Core MPF");
            return loc1;
        }

        public function get gameId():String
        {
            return this.gameSet.art.@id.toString();
        }

        public function get sgiOverride():String
        {
            var loc1:*=this.gameSet.@RGIBroken == undefined ? "" : this.gameSet.@RGIBroken.toString();
            return loc1;
        }

        public function get isFirstLoad():Boolean
        {
            return this._isFirstLoad;
        }

        public function set isFirstLoad(arg1:Boolean):void
        {
            this._isFirstLoad = arg1;
            return;
        }

        public static const NAME:String="GameSetProxy";

        internal var _isFirstLoad:Boolean=true;
    }
}


//            class GameStringsProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.modules.core.model.api.localized.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class GameStringsProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function GameStringsProxy()
        {
            super(NAME, new Object());
            return;
        }

        public function setEnglishGameStrings(arg1:XML):void
        {
            data.english = arg1;
            return;
        }

        public function setForeignGameStrings(arg1:XML):void
        {
            data.foreign = arg1;
            return;
        }

        internal function get englishStrings():XML
        {
            return data.english as XML;
        }

        internal function get foreignStrings():XML
        {
            return data.foreign as XML;
        }

        public function getNewGameStrings():mgs.aurora.modules.core.model.api.localized.GameStrings
        {
            var loc1:*=new mgs.aurora.modules.core.model.api.localized.GameStrings();
            loc1.setStrings(this.englishStrings, this.foreignStrings);
            return loc1;
        }

        public static const NAME:String="GameStringsProxy";
    }
}


//            class GamesListProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.modules.core.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class GamesListProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function GamesListProxy(arg1:XML)
        {
            super(NAME, arg1);
            return;
        }

        public function get gamesList():XML
        {
            return XML(getData());
        }

        public function containsMIDCID(arg1:String, arg2:String):Boolean
        {
            var moduleID:String;
            var clientID:String;
            var result:XMLList;

            var loc1:*;
            result = null;
            moduleID = arg1;
            clientID = arg2;
            var loc3:*=0;
            var loc4:*=this.gamesList.gameset.art;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@mid == moduleID && @cid == clientID) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            result = loc2;
            return result.length > 0;
        }

        public function containsGameID(arg1:String):Boolean
        {
            var gameID:String;
            var result:XMLList;

            var loc1:*;
            result = null;
            gameID = arg1;
            var loc3:*=0;
            var loc4:*=this.gamesList.gameset.art;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id.toLowerCase() == gameID.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            result = loc2;
            return result.length > 0;
        }

        public function getMIDCID(arg1:String):mgs.aurora.modules.core.model.vo.ModuleIDs
        {
            var gameID:String;
            var mid:String;
            var cid:String;

            var loc1:*;
            mid = null;
            cid = null;
            gameID = arg1;
            var loc3:*=0;
            var loc4:*=this.gamesList.gameset.art;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id.toLowerCase() == gameID.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            mid = loc2.@mid;
            loc3 = 0;
            loc4 = this.gamesList.gameset.art;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id.toLowerCase() == gameID.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            cid = loc2.@cid;
            return new mgs.aurora.modules.core.model.vo.ModuleIDs(mid, cid);
        }

        public static const NAME:String="GamesListProxy";
    }
}


//            class GenieStepsProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class GenieStepsProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function GenieStepsProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public function stepId(arg1:String):String
        {
            return this.data[arg1].@stepId;
        }

        public static const NAME:String="GenieStepsProxy";
    }
}


//            class HiddenGamesProxy
package mgs.aurora.modules.core.model 
{
    import __AS3__.vec.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class HiddenGamesProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function HiddenGamesProxy(arg1:Object=null)
        {
            this._hiddenGames = new Vector.<mgs.aurora.modules.core.model.vo.HiddenGame>();
            if (arg1 == null) 
            {
                arg1 = new Array();
            }
            super(NAME, arg1);
            return;
        }

        public function setHiddenGames(arg1:Array):void
        {
            var value:Array;
            var gamesList:XML;
            var n:int;
            var mid:String;
            var cid:String;
            var idCheck:XMLList;
            var p:int;
            var gameid:String;
            var hgame:mgs.aurora.modules.core.model.vo.HiddenGame;

            var loc1:*;
            mid = null;
            cid = null;
            idCheck = null;
            p = 0;
            gameid = null;
            hgame = null;
            value = arg1;
            if (value.length == 0) 
            {
                return;
            }
            gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            n = 0;
            while (n < value.length) 
            {
                mid = value[n].mid;
                cid = value[n].cid;
                var loc3:*=0;
                var loc4:*=gamesList.gameset.art;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@mid == mid && @cid == cid) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                idCheck = loc2;
                if (idCheck.length() != 0) 
                {
                    p = 0;
                    while (p < idCheck.length()) 
                    {
                        gameid = idCheck[p].@id;
                        hgame = new mgs.aurora.modules.core.model.vo.HiddenGame(gameid, mid, cid, value[n].mesid);
                        this._hiddenGames.push(hgame);
                        ++p;
                    }
                }
                ++n;
            }
            return;
        }

        public function setHiddenGamesFromGlobalVars(arg1:String):void
        {
            var hgames:String;
            var gamesList:XML;
            var value:Array;
            var n:int;
            var gameid:String;
            var found:Boolean;
            var idCheck:XMLList;
            var operatorID:String;
            var p:int;
            var mid:String;
            var cid:String;
            var hgame:mgs.aurora.modules.core.model.vo.HiddenGame;

            var loc1:*;
            gameid = null;
            found = false;
            idCheck = null;
            operatorID = null;
            p = 0;
            mid = null;
            cid = null;
            hgame = null;
            hgames = arg1;
            if (hgames == "") 
            {
                return;
            }
            gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            value = hgames.split(" ").join("").split(",");
            n = 0;
            while (n < value.length) 
            {
                gameid = String(value[n]).toLowerCase();
                found = true;
                var loc3:*=0;
                var loc4:*=gamesList.gameset.art;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@id.toLowerCase() == gameid) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                idCheck = loc2;
                if (idCheck.length() == 0) 
                {
                    operatorID = this.getOperatorID(gameid);
                    if (operatorID != "") 
                    {
                        gameid = operatorID;
                    }
                    else 
                    {
                        found = false;
                    }
                }
                if (found) 
                {
                    loc3 = 0;
                    loc4 = gamesList.gameset.art;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@id.toLowerCase() == gameid) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    idCheck = loc2;
                    p = 0;
                    while (p < idCheck.length()) 
                    {
                        mid = idCheck[p].@mid;
                        cid = idCheck[p].@cid;
                        hgame = new mgs.aurora.modules.core.model.vo.HiddenGame(gameid, mid, cid, 0);
                        this._hiddenGames.push(hgame);
                        ++p;
                    }
                }
                ++n;
            }
            return;
        }

        public function isHidden(arg1:String, arg2:String):Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._hiddenGames;
            for each (loc1 in loc3) 
            {
                if (!(loc1.moduleID == arg1 && loc1.clientID == arg2)) 
                {
                    continue;
                }
                return true;
            }
            return false;
        }

        public function isHiddenGameId(arg1:String):Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._hiddenGames;
            for each (loc1 in loc3) 
            {
                if (loc1.gameID.toLowerCase() != arg1.toLowerCase()) 
                {
                    continue;
                }
                return true;
            }
            return false;
        }

        public function getMessageID(arg1:String):int
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._hiddenGames;
            for each (loc1 in loc3) 
            {
                if (loc1.gameID.toLowerCase() != arg1.toLowerCase()) 
                {
                    continue;
                }
                return loc1.messageID;
            }
            return 0;
        }

        public function getMessageIDFromMID(arg1:String, arg2:String):int
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._hiddenGames;
            for each (loc1 in loc3) 
            {
                if (!(loc1.moduleID == arg1 && loc1.clientID == arg2)) 
                {
                    continue;
                }
                return loc1.messageID;
            }
            return 0;
        }

        internal function getOperatorID(arg1:String):String
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            var loc2:*=0;
            while (loc2 < loc1.gameset.length()) 
            {
                if (loc1.gameset[loc2].art.@operatorId != undefined) 
                {
                    if (loc1.gameset[loc2].art.@operatorId.toLowerCase() == arg1.toLowerCase()) 
                    {
                        return loc1.gameset[loc2].art.@id;
                    }
                }
                ++loc2;
            }
            return "";
        }

        public static const NAME:String="HiddenGamesProxy";

        internal var _hiddenGames:__AS3__.vec.Vector.<mgs.aurora.modules.core.model.vo.HiddenGame>;
    }
}


//            class InGameLoaderProxy
package mgs.aurora.modules.core.model 
{
    import flash.utils.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class InGameLoaderProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy
    {
        public function InGameLoaderProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public function init(arg1:uint):void
        {
            if (arg1 == 0) 
            {
                throw new Error("InGameLoaderProxy cannot begin with a file count of 0");
            }
            this._filesProgress = new flash.utils.Dictionary();
            this._fileCount = arg1;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_PROGRESS_CHANGED, 0);
            return;
        }

        public function progressUpdate(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            if (!this.isCounting()) 
            {
                return;
            }
            this._filesProgress[arg1.file] = arg1.progress;
            var loc1:*=this.calcProgres();
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_PROGRESS_CHANGED, loc1);
            return;
        }

        internal function isCounting():Boolean
        {
            return this._fileCount > 0;
        }

        internal function calcProgres():Number
        {
            var loc2:*=NaN;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._filesProgress;
            for each (loc2 in loc4) 
            {
                loc1 = loc1 + loc2;
            }
            return loc1 / this._fileCount;
        }

        public static const NAME:String="InGameLoaderProxy";

        internal var _fileCount:uint=0;

        internal var _filesProgress:flash.utils.Dictionary;
    }
}


//            class MPFProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class MPFProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function MPFProxy()
        {
            super(NAME, new Object());
            return;
        }

        public override function onRegister():void
        {
            data.loggedIn = false;
            data.routerConnected = false;
            data.lobbyConnected = false;
            return;
        }

        public function get loggedIn():Boolean
        {
            return data.loggedIn;
        }

        public function set loggedIn(arg1:Boolean):void
        {
            data.loggedIn = arg1;
            return;
        }

        public function get routerConnected():Boolean
        {
            return data.routerConnected;
        }

        public function set routerConnected(arg1:Boolean):void
        {
            data.routerConnected = arg1;
            return;
        }

        public function get lobbyConnected():Boolean
        {
            return data.lobbyConnected;
        }

        public function set lobbyConnected(arg1:Boolean):void
        {
            data.lobbyConnected = arg1;
            return;
        }

        public static const NAME:String="MPFProxy";
    }
}


//            class MetricInfoProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class MetricInfoProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function MetricInfoProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        public function getNamespace(arg1:String):String
        {
            return this.data[arg1].@statsNamespace;
        }

        public static const NAME:String="MetricInfoProxy";
    }
}


//            class MsgFadeProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class MsgFadeProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function MsgFadeProxy()
        {
            super(NAME, null);
            return;
        }

        public function get font():String
        {
            return this.xml.settings.@font;
        }

        public function get embedFonts():Boolean
        {
            if (this.xml.settings.@embeddedFonts.length() == 1) 
            {
                return this.xml.settings.@embeddedFonts.toString() == "true";
            }
            return false;
        }

        public function get antiAliasType():String
        {
            if (this.xml.settings.@antiAliasType.length() == 1) 
            {
                return this.xml.settings.@antiAliasType.toString();
            }
            return "advanced";
        }

        public function get fontSize():Number
        {
            return parseInt(this.xml.settings.@size.toString(), 10);
        }

        public function get fontColor():uint
        {
            return uint(this.xml.settings.@color.toString());
        }

        public function get backgroundColor():Number
        {
            if (this.xml.settings.@backgroundColor.length() == 1) 
            {
                return parseInt(this.xml.settings.@backgroundColor.toString(), 16);
            }
            return 0;
        }

        public function get xPadding():Number
        {
            return parseInt(this.xml.settings.@xPadding.toString(), 10);
        }

        public function get yPadding():Number
        {
            return parseInt(this.xml.settings.@yPadding.toString(), 10);
        }

        public function get backgroundAlpha():Number
        {
            return parseFloat(this.xml.settings.@alpha.toString());
        }

        public function get interval():Number
        {
            return this._interval;
        }

        public function set interval(arg1:Number):void
        {
            this._interval = arg1 != 0 ? arg1 : parseInt(this.xml.settings.@interval.toString(), 10);
            return;
        }

        internal function get xml():XML
        {
            return XML(this.data);
        }

        public static const NAME:String="MsgFadeProxy";

        internal var _interval:Number;
    }
}


//            class NewModuleProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class NewModuleProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function NewModuleProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            if (arg1 == null) 
            {
                this.data = new Object();
                this.moduleId = 0;
                this.clientId = 0;
            }
            return;
        }

        public function get moduleId():uint
        {
            return this.data.moduleId;
        }

        public function set moduleId(arg1:uint):void
        {
            this.data.moduleId = arg1;
            return;
        }

        public function get clientId():uint
        {
            return this.data.clientId;
        }

        public function set clientId(arg1:uint):void
        {
            this.data.clientId = arg1;
            return;
        }

        public static const NAME:String="NewModuleProxy";
    }
}


//            class PlayerInformationProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class PlayerInformationProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function PlayerInformationProxy(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public function get currencyISO():String
        {
            if (this.info.SessionInfo.CurrencyISOCode.length() > 0) 
            {
                return this.info.SessionInfo.CurrencyISOCode.text().toString();
            }
            return "";
        }

        public function get currencyMultiplier():uint
        {
            var loc1:*=0;
            if (this.info.SessionInfo.CurrencyMultiplier.length() > 0) 
            {
                loc1 = parseInt(this.info.SessionInfo.CurrencyMultiplier.text().toString(), 10);
                loc1 = isNaN(loc1) ? 1 : loc1;
                return loc1;
            }
            return 1;
        }

        public function get alias():String
        {
            Debugger.trace("PlayerInformationProxy  : alias " + this.info.SessionInfo.Alias.length(), "SYSTEM - MAX");
            if (this.info.SessionInfo.Alias.length() > 0) 
            {
                Debugger.trace("PlayerInformationProxy  : alias " + this.info.SessionInfo.Alias.text().toString(), "SYSTEM - MAX");
                return this.info.SessionInfo.Alias.text().toString();
            }
            Debugger.trace("PlayerInformationProxy  : alias = blankstring ", "SYSTEM - MAX");
            return "";
        }

        internal function get info():XML
        {
            return data as XML;
        }

        public static const NAME:String="PlayerInformationProxy";
    }
}


//            class PreloaderProxy
package mgs.aurora.modules.core.model 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    import mgs.aurora.modules.contentLoader.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class PreloaderProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function PreloaderProxy(arg1:Object=null)
        {
            this._files = new Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>();
            this._progress = new flash.utils.Dictionary();
            this._prefetchServeProgress = new flash.utils.Dictionary();
            super(NAME, arg1);
            return;
        }

        public function init(arg1:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>, arg2:uint):void
        {
            this._externalLoaderBytes = arg2;
            this._files = arg1;
            this.assertLoaderRanges();
            this.processRequiredFiles();
            return;
        }

        internal function assertLoaderRanges():void
        {
            if (this._prefetchServedProgressSize + this._loadingProgressSize + this._preloaderProgressSize != 1) 
            {
                throw new Error("Preloader Proxy values must sum up to 1");
            }
            return;
        }

        internal function processRequiredFiles():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._files;
            for each (loc1 in loc3) 
            {
                this._progress[loc1.file] = 0;
                this._totalBytes = this._totalBytes + loc1.size;
                this._prefetchServeProgress[loc1.file] = 0;
            }
            this._externalLoadPercentage = this._externalLoaderBytes / (this._externalLoaderBytes + this._totalBytes);
            this._externalLoadPercentage = int(this._externalLoadPercentage * 100) / 100;
            return;
        }

        public function updateRequiredProgress(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            this._progress[arg1.file] = arg1.progress;
            this.calculateRequiredProgress();
            this.updateProgress();
            return;
        }

        public function updatePrefetchServeProgress(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            this._prefetchServeProgress[arg1.file] = arg1.progress;
            this.calculatePrefetchServeProgress();
            this.updateProgress();
            return;
        }

        public function updateExternalLoaderProgress(arg1:Number):void
        {
            this._externalLoadedProgress = arg1;
            this.updateProgress();
            return;
        }

        internal function calculatePrefetchServeProgress():void
        {
            var loc3:*=NaN;
            var loc4:*=0;
            var loc1:*=0;
            var loc2:*=0;
            var loc5:*=0;
            var loc6:*=this._prefetchServeProgress;
            for each (loc3 in loc6) 
            {
                ++loc2;
                loc1 = loc1 + loc3;
            }
            loc4 = 0;
            loc4 = this.fudgeCount(loc2);
            this._prefetchServedProgress = loc1 / loc4;
            this._prefetchServedProgress = Math.min(this._prefetchServedProgress, 1);
            return;
        }

        internal function fudgeCount(arg1:uint):uint
        {
            arg1 = arg1 * REQUIRED_NOT_SERVED_HACK;
            return arg1 > 0 ? arg1 : 1;
        }

        internal function calculateRequiredProgress():void
        {
            var loc2:*=null;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._files;
            for each (loc2 in loc4) 
            {
                loc1 = loc1 + this._progress[loc2.file] * loc2.size;
            }
            this._requiredFilesProgress = loc1 / this._totalBytes;
            return;
        }

        internal function updateProgress():void
        {
            var loc1:*=this.getPreloaderProgress() + this.getLoadedProgress() + this.getServingProgress();
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_PROGRESS_CHANGED, loc1);
            return;
        }

        internal function getServingProgress():Number
        {
            var loc1:*=this._prefetchServedProgress * this._prefetchServedProgressSize;
            return loc1;
        }

        internal function getLoadedProgress():Number
        {
            var loc1:*=this.getInternalLoaderProgress();
            var loc2:*=this.getExternalLoaderProgress();
            var loc3:*=(loc1 + loc2) * this._loadingProgressSize;
            return loc3;
        }

        internal function getExternalLoaderProgress():Number
        {
            return this._externalLoadedProgress * this._externalLoadPercentage;
        }

        internal function getInternalLoaderProgress():Number
        {
            var loc1:*=this._requiredFilesProgress * (1 - this._externalLoadPercentage);
            return loc1;
        }

        internal function getPreloaderProgress():Number
        {
            return this._preloaderProgress * this._preloaderProgressSize;
        }

        public function get requiredFiles():__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>
        {
            return this._files;
        }

        internal const _preloaderProgressSize:Number=0.125;

        internal const _loadingProgressSize:Number=0.775;

        internal const _prefetchServedProgressSize:Number=0.1;

        public static const NAME:String="PreloaderProxy";

        internal static const REQUIRED_NOT_SERVED_HACK:Number=0.5;

        internal var _preloaderProgress:Number=1;

        internal var _requiredFilesProgress:Number=0;

        internal var _prefetchServedProgress:Number=0;

        internal var _externalLoadedProgress:Number=0;

        internal var _totalBytes:uint=0;

        internal var _externalLoaderBytes:uint;

        internal var _files:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;

        internal var _progress:flash.utils.Dictionary;

        internal var _prefetchServeProgress:flash.utils.Dictionary;

        internal var _externalLoadPercentage:Number;
    }
}


//            class SessionConfigProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.common.utilities.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SessionConfigProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SessionConfigProxy(arg1:Object=null)
        {
            super(NAME, arg1);
            return;
        }

        internal function get brandConfig():XML
        {
            return XML(this.data);
        }

        public function get sessionType():String
        {
            return this.validate(this.brandConfig.casino.login.@loginType, "t3");
        }

        internal function validate(arg1:XMLList, arg2:String):String
        {
            if (arg1.length() == 0) 
            {
                return arg2;
            }
            return arg1;
        }

        public function get avatarFileURL():String
        {
            return this.brandConfig.mpf.avatar.@fileUrl.toString();
        }

        public function get aliasActivationAllowDomain():String
        {
            return this.brandConfig.externalLaunch.aliasActivation.@allowDomain.toString();
        }

        public function getCurrencySymbol(arg1:String):String
        {
            return this.brandConfig.currency.attribute(arg1.toUpperCase()).toString();
        }

        public function get mpfEnabled():Boolean
        {
            return mgs.aurora.common.utilities.StringUtils.stringToBoolean(this.brandConfig.mpf.@supported.toString());
        }

        public static const NAME:String="SessionConfigProxy";
    }
}


//            class SessionDetailsProxy
package mgs.aurora.modules.core.model 
{
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SessionDetailsProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SessionDetailsProxy()
        {
            super(NAME, null);
            return;
        }

        public function set userTypeSwitchSource(arg1:String):void
        {
            this._userTypeSwitchSource = arg1;
            return;
        }

        public function get userTypeToSwitchTo():uint
        {
            return this._userTypeToSwitchTo;
        }

        public function set userTypeToSwitchTo(arg1:uint):void
        {
            this._userTypeToSwitchTo = arg1;
            return;
        }

        public function get loggedIn():Boolean
        {
            return this._loggedIn;
        }

        public function set loggedIn(arg1:Boolean):void
        {
            this._loggedIn = arg1;
            return;
        }

        public function get session():Object
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc2:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            return loc2;
        }

        public function get currentUsername():String
        {
            return String(this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME].toString());
        }

        public function get currentPassword():String
        {
            return String(this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD].toString());
        }

        public function get serverID():uint
        {
            return uint(this.session[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID]);
        }

        public function get clientType():uint
        {
            return uint(this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CLIENTTYPE]);
        }

        public function get sessionID():String
        {
            return String(this.session[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID]);
        }

        public function get sessionNumber():Number
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONNUMBER] as Number;
        }

        public function set sessionNumber(arg1:Number):void
        {
            this.session[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONNUMBER] = arg1;
            return;
        }

        public function get mpfUserID():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.MPF_USERID];
        }

        public function set mpfUserID(arg1:String):void
        {
            this.session[mgs.aurora.common.enums.configMapping.SessionConfig.MPF_USERID] = arg1;
            return;
        }

        public function get sessionToken():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_AUTHENTICATION_TOKEN];
        }

        public function get sessionUserId():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_USERID];
        }

        public function get allowTokenLogin():Boolean
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.ALLOW_MPF_TOKEN_LOGIN] == "1";
        }

        public function get curTournamentID():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURTOURNAMENTID];
        }

        public function set curTournamentID(arg1:String):void
        {
            this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURTOURNAMENTID] = arg1;
            return;
        }

        public function get userAlias():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.USER_ALIAS];
        }

        public function set userAlias(arg1:String):void
        {
            this.session[mgs.aurora.common.enums.configMapping.SessionConfig.USER_ALIAS] = arg1;
            return;
        }

        public function get serviceID():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.MPF_SERVICE_ID];
        }

        public function set serviceID(arg1:String):void
        {
            this.session[mgs.aurora.common.enums.configMapping.SessionConfig.MPF_SERVICE_ID] = arg1;
            return;
        }

        public function get currentModuleID():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID] != null ? this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID] : "";
        }

        public function get currentClientID():String
        {
            return this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID] != null ? this.session[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID] : "";
        }

        public function get userTypeSwitchRequested():Boolean
        {
            return this._userTypeSwitchRequested;
        }

        public function set userTypeSwitchRequested(arg1:Boolean):void
        {
            this._userTypeSwitchRequested = arg1;
            return;
        }

        public function get userTypeSwitchInProgress():Boolean
        {
            return this._userTypeSwitchInProgress;
        }

        public function set userTypeSwitchInProgress(arg1:Boolean):void
        {
            this._userTypeSwitchInProgress = arg1;
            return;
        }

        public function get userTypeSwitchSource():String
        {
            return this._userTypeSwitchSource;
        }

        public static const NAME:String="SessionDetailsProxy";

        internal var _userTypeSwitchRequested:Boolean=false;

        internal var _userTypeSwitchInProgress:Boolean=false;

        internal var _loggedIn:Boolean=false;

        internal var _userTypeSwitchSource:String="";

        internal var _userTypeToSwitchTo:uint=0;
    }
}


//            class SgiConfigProxy
package mgs.aurora.modules.core.model 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SgiConfigProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SgiConfigProxy(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public function set loginType(arg1:String):void
        {
            this._loginType = arg1;
            return;
        }

        public function get loginType():String
        {
            return this._loginType;
        }

        public static const NAME:String="SgiConfigProxy";

        internal var _loginType:String;
    }
}


//            class StringsProxy
package mgs.aurora.modules.core.model 
{
    import flash.utils.*;
    import mgs.aurora.common.interfaces.strings.*;
    import mgs.aurora.common.utilities.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class StringsProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy, mgs.aurora.common.interfaces.strings.ILanguageStrings
    {
        public function StringsProxy()
        {
            super(NAME, new flash.utils.Dictionary());
            return;
        }

        public override function onRemove():void
        {
            data.systemStrings = null;
            return;
        }

        public function set systemStrings(arg1:XML):void
        {
            data.systemStrings = arg1;
            return;
        }

        public function get systemStrings():XML
        {
            return data.systemStrings;
        }

        public function getSystemString(arg1:String):String
        {
            var id:String;

            var loc1:*;
            id = arg1;
            var loc3:*=0;
            var loc4:*=this.systemStrings.string;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@ID == id) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            return mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc2.@text);
        }

        public function getString(arg1:String):String
        {
            return this.getSystemString(arg1);
        }

        public static const NAME:String="StringsProxy";
    }
}


//            class UrlLoadResponseProxy
package mgs.aurora.modules.core.model 
{
    import __AS3__.vec.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class UrlLoadResponseProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function UrlLoadResponseProxy()
        {
            super(NAME, new Vector.<mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo>());
            return;
        }

        public function get responseCount():int
        {
            return this.store.length;
        }

        public function saveResponse(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            this.store.push(arg1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_INCOMING_SYSTEM_GAME_FILE, arg1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED, arg1);
            return;
        }

        public function getResponse():mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo
        {
            return this.store.pop();
        }

        internal function get store():__AS3__.vec.Vector.<mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo>
        {
            return this.data as Vector.<mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo>;
        }

        public static const NAME:String="UrlLoadResponseProxy";
    }
}


//          package notifications
//            class CoreNotifications
package mgs.aurora.modules.core.notifications 
{
    public class CoreNotifications extends Object
    {
        public function CoreNotifications()
        {
            super();
            return;
        }

        internal static const NAME:String="core";

        public static const CONNECT_MODULE_TO_JUNCTION:String=NAME + "/notes/connect_module_to_junction";

        public static const REQUEST_FROM_LOADER:String=NAME + "/notes/request_loader";

        public static const LOAD_BRAND_CONFIG:String=NAME + "/notes/load_brand_config";

        public static const SETUP_BRAND_CONFIG:String=NAME + "/notes/setup_brand_config";

        public static const LOAD_DEPENDENCIES_CONFIG:String=NAME + "/notes/load_dependencies_config";

        public static const SETUP_DEPENDENCIES_CONFIG:String=NAME + "/notes/setup_dependencies_config";

        public static const DEPENDENCIES_URL_ERROR:String=NAME + "/notes/dependencies_url_error";

        public static const LOAD_FRAME_DISPLAY:String=NAME + "/notes/load_frame_display";

        public static const SETUP_FRAME_DISPLAY:String=NAME + "/notes/setup_frame_display";

        public static const SETUP_MSG_FADER:String=NAME + "/notes/setup_msg_fader";

        public static const MERGE_BRANDCONFIG_AND_FRAMEDISPLAYCONFIG:String=NAME + "/notes/merge_brandconfig_and_framedisplayconfig";

        public static const EXIT_ON_ERROR:String=NAME + "exit_on_error";

        public static const EXIT_ON_USER_DECISION:String=NAME + "/notes/exit_on_user_decision";

        public static const SETUP_LOADER_PROGRESS:String=NAME + "/notes/setup_loader_progress";

        public static const SETUP_SGI_COMPONENTS:String=NAME + "/notes/setup_sgi_components";

        public static const SETUP_SGI_CHOICESCREEN:String=NAME + "/notes/setup_sgi_choicescreen";

        public static const DYNAMIC_CONFIG_CREATED:String=NAME + "/notes/dynamic_config_created";

        public static const SET_CORELAYER_RESIZE:String=NAME + "/notes/set_corelayer_resize";

        public static const PREFETCH_COMPLETED:String=NAME + "/notes/prefetch_completed";

        public static const PRELOADER_GAME_TEXT_CHANGE:String=NAME + "/notes/preloader_game_text_change";

        public static const START_LOADING_URL:String=NAME + "/notes/start_loading_url";

        public static const STOP_LOADING_URL:String=NAME + "/notes/stop_loading_url";

        public static const CLEAR_PREFETCH_DATA:String=NAME + "/notes/clear_prefetch_data";

        public static const LOADER_RECIEVED:String=NAME + "/notes/loader_recieved";

        public static const LOADER_INITIALIZED:String=NAME + "/notes/loader_initialized";

        public static const EXTERNAL_DATA_RECIEVED:String=NAME + "/notes/external_data_recieved";

        public static const EXTERNAL_DATA_INITIALIZED:String=NAME + "/notes/external_data_initialized";

        public static const INITIAL_SETUP_COMPLETED:String=NAME + "/notes/initial_setup_completed";

        public static const XMAN_SEND_PACKET_REQUEST_RECIEVED:String=NAME + "/notes/xman_send_packet_request_recieved";

        public static const XMAN_RESPONSE_PACKET_RECIEVED:String=NAME + "/notes/xman_send_packet_response_recieved";

        public static const URL_LOAD_STARTED:String=NAME + "/notes/url_load_started";

        public static const URL_LOAD_STOPPED:String=NAME + "/notes/url_load_stopped";

        public static const URL_LOAD_PROGRESS_RECIEVED:String=NAME + "/notes/url_load_progress_recieved";

        public static const PRELOADER_PROGRESS_CHANGED:String=NAME + "/notes/preloader_progress_changed";

        public static const PRELOADER_TEXT_CHANGE:String=NAME + "/notes/preloader_text_change";

        public static const PRELOADER_FILE_COUNT_CHANGE:String=NAME + "/notes/preloader_file_count_change";

        public static const EXTERNAL_LOADER_PROGRESS:String=NAME + "/notes/external_loader_progress";

        public static const GET_INTERNAL_LOADER_PROGRESS:String=NAME + "/notes/internal_loader_progress";

        public static const PRELOADER_SET_REQUIRED_PROGRESS:String=NAME + "/notes/preloader_set_required";

        public static const PRELOADER_SET_PREFETCHSERVED_PROGRESS:String=NAME + "/notes/preloader_set_prefetchServed";

        public static const FILE_RESPONSE_SAVED:String=NAME + "/notes/file_response_saved";

        public static const DEPENDENCY_NAME_PREFIX:String=NAME + "/notes/dependency_name_prefix";

        public static const LOAD_DEPENDENCY:String=NAME + "/notes/load_dependency";

        public static const STORE_DEPENDENCY:String=NAME + "/notes/store_dependency";

        public static const ALL_DEPENDENCIES_LOADED:String=NAME + "/notes/all_dependencies_loaded";

        public static const ALL_DEPENDENCIES_LOADED_STAGE2:String=NAME + "/notes/all_dependencies_loaded_stage2";

        public static const START_LOGIN_PROCESS:String=NAME + "/notes/start_login_process";

        public static const SWITCH_USERTYPE_REQUEST:String=NAME + "/notes/switch_usertype_request";

        public static const SWITCH_USERTYPE_RESPONSE:String=NAME + "/notes/switch_usertype_response";

        public static const INVOKE_USERTYPE_SWITCH:String=NAME + "/notes/invoke_usertype_switch";

        public static const SESSION_AUTH_TOKEN_LOGIN_REQUEST:String=NAME + "/notes/session_auth_token_login_request";

        public static const SESSION_AUTH_TOKEN_LOGIN_RESPONSE:String=NAME + "/notes/session_auth_token_login_response";

        public static const SWITCH_USER_SHOW_OVERLAY:String=NAME + "/notes/switch_user_show_show_overlay";

        public static const SWITCH_USER_HIDE_OVERLAY:String=NAME + "/notes/switch_user_show_hide_overlay";

        public static const LOGIN_SUCCESSFULLY_COMPLETED:String=NAME + "/notes/login_successfully_completed";

        public static const LOGOUT_SUCCESSFULLY_COMPLETED:String=NAME + "/notes/logout_successfully_completed";

        public static const SHOW_HIDE_PRELOADER:String=NAME + "/notes/show_hide_preloader";

        public static const PROCESS_SGI_PLAYFORREAL:String=NAME + "/notes/process_sgi_playforreal";

        public static const RESET_SGI_TOPBAR:String=NAME + "/notes/reset_sgi_topbar";

        public static const INIT_TOPBAR_SOUND:String=NAME + "/notes/init_topbar_sound";

        public static const UPDATE_TOPBAR:String=NAME + "/notes/update_topbar";

        public static const SEND_TOPBAR_DATA:String=NAME + "/notes/send_topbar_data";

        public static const SET_SGI_GAME_OVERRIDE:String=NAME + "/notes/set_sgi_game_override";

        public static const SHOW_STARTUP_DIALOGUE:String=NAME + "/notes/show_startup_dialogue";

        public static const SHOW_ERROR_DIALOGUE:String=NAME + "/notes/show_error_dialogue";

        public static const SHOW_ERROR_DIALOGUE_INTERNAL:String=NAME + "/notes/show_error_dialogue_internal";

        public static const SHOW_INFO_ERROR_DIALOGUE:String=NAME + "/notes/show_info_error_dialogue";

        public static const SHOW_INFO_ERROR_DIALOGUE_INTERNAL:String=NAME + "/notes/show_info_error_dialogue_internal";

        public static const SHOW_CONSECUTIVE_BETS_INFO:String=NAME + "/notes/show_consecutive_bets_info";

        public static const SHOW_INFO_ONLY_DIALOGUE:String=NAME + "/notes/show_info_only_dialogue";

        public static const REMOVE_ALL_DIALOGUES:String=NAME + "/notes/remove_all_dialogues";

        public static const EXIT_MODULE:String=NAME + "/notes/exit_module";

        public static const LOAD_NEW_MODULE:String=NAME + "/notes/load_new_module";

        public static const SWITCH_TO_NEW_MODULE:String=NAME + "/notes/switch_to_new_module";

        public static const UNLOAD_EXISTING_MODULE_START:String=NAME + "/notes/unload_existing_module_start";

        public static const UNLOAD_EXISTING_MODULE_COMPLETE:String=NAME + "/notes/unload_existing_module_complete";

        public static const OPERATOR_LAUNCH:String=NAME + "/notes/operator_launch";

        public static const FRAME_UPDATE_DISPLAYTYPE:String=NAME + "/notes/frame_update_displaytype";

        public static const FRAME_UPDATE_LOGIN_SUCCESSFULL:String=NAME + "/notes/frame_update_login_successfull";

        public static const FRAME_UPDATE_BALANCE:String=NAME + "/notes/frame_update_balance";

        public static const FRAME_UPDATE_AFTER_SWITCH:String=NAME + "/notes/frame_update_after_switch";

        public static const FRAME_LAUNCH_EXTERNAL:String=NAME + "/notes/frame_launch_external";

        public static const FRAME_LAUNCH_BANK:String=NAME + "/notes/frame_launch_bank";

        public static const FRAME_LAUNCH_EXIT:String=NAME + "/notes/frame_launch_exit";

        public static const FRAME_LAUNCH_PLAY_FOR_REAL:String=NAME + "/notes/frame_play_for_real";

        public static const FRAME_START_CONNECTION_ANIMATION:String=NAME + "/notes/frame_start_connection_animation";

        public static const FRAME_STOP_CONNECTION_ANIMATION:String=NAME + "/notes/frame_stop_connection_animation";

        public static const FRAME_SHOW_PLAY_FOR_REAL:String=NAME + "/notes/frame_show_play_for_real";

        public static const FRAME_SHOW:String=NAME + "/notes/frame_show";

        public static const FRAME_HIDE:String=NAME + "/notes/frame_hide";

        public static const FRAME_UPDATE_MUTE_ICON_GRAPHIC:String=NAME + "/notes/frame_update_mute_icon_graphic";

        public static const FRAME_LOCK_ALL_MODULE_BUTTONS:String=NAME + "/notes/frame_lock_all_module_buttons";

        public static const FRAME_UNLOCK_ALL_MODULE_BUTTONS:String=NAME + "/notes/frame_unlock_all_module_buttons";

        public static const FRAME_GAME_LOCKED_ALL_MODULE_BUTTONS:String=NAME + "/notes/frame_game_locked_all_module_buttons";

        public static const FRAME_GAME_UNLOCKED_ALL_MODULE_BUTTONS:String=NAME + "/notes/frame_game_unlocked_all_module_buttons";

        public static const FRAME_SYSTEM_LOCKED_ALL_MODULE_BUTTONS:String=NAME + "/notes/frame_system_locked_all_module_buttons";

        public static const FRAME_SYSTEM_UNLOCKED_ALL_MODULE_BUTTONS:String=NAME + "/notes/frame_system_unlocked_all_module_buttons";

        public static const FRAME_MODULE_CHANGED_FRAME:String=NAME + "/notes/frame_module_changed_frame";

        public static const LAUNCH_BANK:String=NAME + "/notes/launch_bank";

        public static const BANKING_INITIALIZE:String=NAME + "/notes/banking_initailize";

        public static const BANKING_LAUNCH_BANK:String=NAME + "/notes/banking_launch_bank";

        public static const BANKING_LAUNCH_QUICKBANK:String=NAME + "/notes/banking_launch_quickbank";

        public static const BANKING_PROMPT_FOR_CASH:String=NAME + "/notes/banking_prompt_for_cash";

        public static const BANKING_REFRESH_BALANCE:String=NAME + "/notes/banking_refresh_balance";

        public static const BANKING_INSUFFICIENT_GAME_FUNDS:String=NAME + "/notes/banking_insufficient_game_funds";

        public static const BANKING_CUSTOM_INSUFFICIENT_GAME_FUNDS:String=NAME + "/notes/banking_custom_insufficient_game_funds";

        public static const BANKING_SHOW_BANKING_REFRESH:String=NAME + "/notes/banking_show_banking_refresh";

        public static const BANKING_UPDATE_WIN_VALUE:String=NAME + "/notes/banking_update_win_value";

        public static const BANKING_UPDATE_BET_VALUE:String=NAME + "/notes/banking_update_bet_value";

        public static const BANKING_UPDATE_DISPLAYTYPE:String=NAME + "/notes/banking_update_displaytype";

        public static const BANKING_UPDATE_COINSIZE:String=NAME + "/notes/banking_update_coinsize";

        public static const BANKING_UPDATE_COUNTUP_VALUE:String=NAME + "/notes/banking_update_countup_value";

        public static const RAPTOR_SESSION_SETUP:String=NAME + "/notes/raptor_session_setup";

        public static const RAPTOR_SESSION_ATTEMPT_LOGIN:String=NAME + "/notes/raptor_session_attempt_login";

        public static const RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD:String=NAME + "/notes/raptor_session_attempt_change_password";

        public static const RAPTOR_SESSION_LOGOUT:String=NAME + "/notes/raptor_session_logout";

        public static const LOAD_GAME_MODULE:String=NAME + "/notes/load_game_module";

        public static const GAME_MODULE_LOADED:String=NAME + "/notes/game_module_loaded";

        public static const SHOW_MODAL:String=NAME + "/notes/show_modal";

        public static const HIDE_MODAL:String=NAME + "/notes/hide_modal";

        public static const SHOW_PRELOADER_MODAL:String=NAME + "/notes/show_preloader_modal";

        public static const HIDE_PRELOADER_MODAL:String=NAME + "/notes/hide_preloader_modal";

        public static const INITIALIZE_MODULE:String=NAME + "/notes/initialize_module";

        public static const SHUTDOWN_MODULE:String=NAME + "/notes/shutdown_module";

        public static const CONTINUE_MODULE_SHUTDOWN:String=NAME + "/notes/continue_module_shutdown";

        public static const SYSTEM_ERROR:String=NAME + "/notes/system_error";

        public static const CONTINUE_SYSTEM_ERROR:String=NAME + "/notes/continue_system_error";

        public static const SET_SYSTEM_ERROR_STATE:String=NAME + "/notes/set_system_error_state";

        public static const SYSTEM_TIMEOUT:String=NAME + "/notes/system_timeout";

        public static const LOADER_SHOW_PRELOADER:String=NAME + "/notes/loader_show_preloader";

        public static const LOADER_HIDE_PRELOADER:String=NAME + "/notes/loader_hide_preloader";

        public static const CUSTOM_BONUS_BUBBLE_TRIGGER_CHANGE:String=NAME + "/notes/custom_bonus_bubble_trigger_change";

        public static const CUSTOM_BONUS_BUBBLE_COORDINATES_CHANGE:String=NAME + "/notes/custom_bonus_bubble_coordinates_change";

        public static const CUSTOM_BONUS_BUBBLE_SETTINGS_CHANGE:String=NAME + "/notes/custom_bonus_bubble_settings_change";

        public static const CUSTOM_BONUS_BUBBLE_ENABLED:String=NAME + "/notes/custom_bonus_bubble_enabled";

        public static const CUSTOM_BONUS_BUBBLE_SHOW:String=NAME + "/notes/custom_bonus_bubble_show";

        public static const GAME_MODULE_APISTATUS_INIT:String=NAME + "/notes/game_module_apistatus_init";

        public static const GAME_MODULE_ASSET_LOAD_COMPLETE:String=NAME + "/notes/game_module_asset_load_complete";

        public static const GAME_MODULE_ASSET_LOAD_ERROR:String=NAME + "/notes/game_module_asset_load_error";

        public static const GAME_MODULE_FILE_REQUEST:String=NAME + "/notes/game_module_file_request";

        public static const GAME_MODULE_FILE_STOP_REQUEST:String=NAME + "/notes/game_module_file_stop_request";

        public static const GAME_MODULE_PACKET_REQUEST:String=NAME + "/notes/game_module_packet_request";

        public static const GAME_MODULE_PACKET_RESPONSE:String=NAME + "/notes/game_module_packet_response";

        public static const GAME_MODULE_SHOW_HIDE_PRELOADER:String=NAME + "/notes/game_module_show_hide_preloader";

        public static const GAME_MODULE_CREATE_PRELOADER:String=NAME + "/notes/game_module_create_preloader";

        public static const GAME_MODULE_SOUNDS_UPDATE_MUTE:String=NAME + "/notes/game_module_sounds_update_mute";

        public static const GAME_MODULE_UPDATE_BALANCE:String=NAME + "/notes/game_module_update_balance";

        public static const GAME_MODULE_NOTIFY_UPDATE_BALANCE:String=NAME + "/notes/game_module_notify_update_balance";

        public static const GAME_MODULE_LAUNCH_HELP:String=NAME + "/notes/game_module_launch_help";

        public static const GAME_MODULE_CLEANED_UP:String=NAME + "/notes/game_module_cleaned_up";

        public static const GAME_MODULE_START_LOAD:String=NAME + "/notes/game_module_start_load";

        public static const GAME_MODULE_NOT_AVAILABLE:String=NAME + "/notes/game_module_not_available";

        public static const GAME_MODULE_LAUNCH_EXTERNAL:String=NAME + "/notes/game_module_launch_external";

        public static const GAME_MODULE_TEAR_DOWN_MEDIATOR:String=NAME + "/notes/game_module_tear_down_mediator";

        public static const GAME_MODULE_UNLOAD_MAIN_SPRITE:String=NAME + "/notes/game_module_unload_main_sprite";

        public static const GAME_MODULE_SYSTEM_READY:String=NAME + "/notes/game_module_system_ready";

        public static const GAME_MODULE_BUSY:String=NAME + "/notes/game_module_busy";

        public static const GAME_MODULE_NOT_BUSY:String=NAME + "/notes/game_module_not_busy";

        public static const GAME_MODULE_BACKGROUND_ALPHA:String=NAME + "/notes/game_module_background_alpha";

        public static const SYSTEM_MODULE_UPDATE_BALANCE:String=NAME + "/notes/system_module_update_balance";

        public static const SYSTEM_MODULE_READY:String=NAME + "/notes/system_module_ready";

        public static const GENIE_SUCCESSFULL_FLASH_ACTIVATION:String=NAME + "/notes/successfull_flash_activation";

        public static const GENIE_LOGIN_SUCCESSFULL:String=NAME + "/notes/login_successfull";

        public static const GENIE_LOGIN_ERROR:String=NAME + "/notes/login_error";

        public static const GENIE_GAME_INITIALIZED:String=NAME + "/notes/game_initialized";

        public static const GENIE_GAME_DOWNLOADED:String=NAME + "/notes/game_downloaded";

        public static const GENIE_LOGIN_WITH_MIGRATION:String=NAME + "/notes/genie_login_with_migration";

        public static const GENIE_MIGRATION_ACCOUNT_LOGIN:String=NAME + "/notes/genie_migration_account_login";

        public static const GENIE_USER_DISCONNECTED:String=NAME + "/notes/genie_user_disconnected";

        public static const GENIE_USER_TIMED_OUT:String=NAME + "/notes/genie_user_timed_out";

        public static const GENIE_USER_ACCOUNT_LOCKED:String=NAME + "/notes/genie_user_account_locked";

        public static const GENIE_CASINO_ERROR:String=NAME + "/notes/genie_casino_error";

        public static const GENIE_GENERIC_STEP:String=NAME + "/notes/genie_generic_step";

        public static const METRIC_LOGIN_ERROR:String=NAME + "/notes/metric_login_error";

        public static const METRIC_GENERIC_INFO:String=NAME + "/notes/metric_generic_info";

        public static const AUTOMATION_INCOMING_SYSTEM_GAME_FILE:String=NAME + "/notes/automation_incoming_system_game_file";

        public static const AUTOMATION_INCOMING_SYSTEM_GAME_PACKET:String=NAME + "/notes/automation_incoming_system_game_packet";

        public static const AUTOMATION_LOAD_AUTOSOCKET:String=NAME + "/notes/automation_load_autosocket";

        public static const AUTOMATION_LOAD_GAME_OBSERVER:String=NAME + "/notes/automation_game_observer";

        public static const AUTOMATION_LOADED_GAME_OBSERVER:String=NAME + "/notes/automation_loaded_game_observer";

        public static const AUTOMATION_SHOW_HIDE_PRELOADER:String=NAME + "/notes/automation_show_hide_preloader";

        public static const AUTOMATION_GAME_BUSY:String=NAME + "/notes/automation_game_busy";

        public static const AUTOMATION_GAME_INITIALIZED:String=NAME + "/notes/automation_game_initialized";

        public static const AUTOMATION_GAME_CLEANEDUP:String=NAME + "/notes/automation_game_cleanedup";

        public static const XMAN_START_SESSIONTIMER:String=NAME + "/notes/xman_start_sessiontimer";

        public static const XMAN_STOP_SESSIONTIMER:String=NAME + "/notes/xman_stop_sessiontimer";

        public static const XMAN_START_PING:String=NAME + "/notes/xman_start_ping";

        public static const XMAN_START_KEEPALIVE:String=NAME + "/notes/xman_start_keepalive";

        public static const XMAN_STOP_KEEPALIVE:String=NAME + "/notes/xman_stop_keepalive";

        public static const XMAN_RESET_KEEPALIVE_BEFORE_GAME_LOAD:String=NAME + "/notes/xman_reset_keepalive_before_game_load";

        public static const XMAN_STOP_PING:String=NAME + "/notes/xman_stop_ping";

        public static const XMAN_SEND_PACKET:String=NAME + "/notes/xman_send_packet";

        public static const XMAN_CORE_INVOKED_PACKET_RECEIVED:String=NAME + "/notes/xman_core_invoked_packet_received";

        public static const XMAN_CLEAN_ON_ERROR:String=NAME + "/notes/xman_clean_on_error";

        public static const XMAN_SET_SERVERID:String=NAME + "/notes/xman_set_serverid";

        public static const XMAN_UPDATE_TIMER_CONFIG:String=NAME + "/notes/xman_update_timer_config";

        public static const XMAN_CASINO_CLOSING:String=NAME + "/notes/xman_casino_closing";

        public static const MPF_ATTEMPT_CONNECTIONS:String=NAME + "/notes/mpf_attempt_connections";

        public static const MPF_SEND_PACKET:String=NAME + "/notes/mpf_send_packet";

        public static const MPF_SET_AVATAR_FILE_URL:String=NAME + "/notes/mpf_set_avatar_file_url";

        public static const MPF_LOAD_AVATAR_FILE:String=NAME + "/notes/mpf_load_avatar_file";

        public static const MPF_LAUNCH_AVATAR_EXTERNAL:String=NAME + "/notes/mpf_launch_avatar_external";

        public static const MPF_CANCEL_AVATAR:String=NAME + "/notes/mpf_cancel_avatar";

        public static const MPF_FETCH_AVATAR_METADATA:String=NAME + "/notes/mpf_fetch_avatar_metadata";

        public static const MPF_REQUEST_NEW_ALIAS:String=NAME + "/notes/mpf_request_new_alias";

        public static const MPF_ALIAS_CREATED:String=NAME + "/notes/mpf_alias_created";

        public static const MPF_ALIAS_REQUEST_CANCELED:String=NAME + "/notes/mpf_alias_request_canceled";

        public static const MPF_CANCEL_NEW_ALIAS_REQUEST:String=NAME + "/notes/mpf_cancel_new_alias_request";

        public static const MPF_END_CONNECTIONS:String=NAME + "/notes/mpf_end_connections";

        public static const MAGNETO_CONNECT:String=NAME + "/notes/connect";

        public static const MAGNETO_SEND_PACKET:String=NAME + "/notes/magneto_send_packet";

        public static const PLAYER_INFORMATION_REQUEST:String=NAME + "/notes/player_information_request";

        public static const PLAYER_INFORMATION_RESPONSE:String=NAME + "/notes/player_information_response";

        public static const HIDDEN_GAMES_REQUEST:String=NAME + "/notes/hidden_games_request";

        public static const HIDDEN_GAMES_RESPONSE:String=NAME + "/notes/hidden_games_response";

        public static const VPB_ENABLE:String=NAME + "/notes/vpb_enable";

        public static const VPB_DISABLE:String=NAME + "/notes/vpb_disable";

        public static const VPB_ACTION:String=NAME + "/notes/vpb_action";

        public static const ASP_REFRESH_START:String=NAME + "/notes/asp_refresh_start";

        public static const ASP_REFRESH_STOP:String=NAME + "/notes/asp_refresh_stop";

        public static const REMOVE_SOUND_MODULE:String=NAME + "/notes/remove_sound_module";

        public static const ADD_SOUND_MODULE:String=NAME + "/notes/add_sound_module";

        public static const SHOW_MSG_FADER:String=NAME + "/notes/show_msg_fader";

        public static const OFFSET_SYSTEM:String=NAME + "/notes/offset_system";

        public static const SETUP_NOTIFIER:String=NAME + "/notes/setup_notifier";

        public static const NOTIFIER_PING:String=NAME + "/notes/notifier_ping";

        public static const MARKET_DO_LOGIN:String=NAME + "/notes/market_do_login";

        public static const MARKET_LOGGED_IN:String=NAME + "/notes/market_logged_in";

        public static const MARKET_LOAD_GAME:String=NAME + "/notes/market_load_game";

        public static const MARKET_GAME_EXIT:String=NAME + "/notes/market_game_exit";

        public static const MARKET_BANK_BUTTON:String=NAME + "/notes/market_bank_button";

        public static const MARKET_RETURN_FROM_BANK:String=NAME + "/notes/market_return_from_bank";

        public static const MARKET_HELP_BUTTON:String=NAME + "/notes/market_help_button";

        public static const MARKET_SESSIONTIMEOUT:String=NAME + "/notes/market_sessiontimeout";

        public static const MARKET_ERROR:String=NAME + "/notes/market_error";

        public static const MARKET_SYSTEM_UPDATE_BALANCE:String=NAME + "/notes/market_system_update_balance";

        public static const SHOW_FB_SWITCH_DIALOGUE:String=NAME + "/notes/show_fb_switch_dialogue";

        public static const LAUNCH_AFTER_SWITCH:String=NAME + "/notes/launch_after_switch";

        public static const UPDATE_FRAME_AFTER_USER_SWITCH:String=NAME + "/notes/update_frame_after_user_switch";

        public static const SHOW_FUN_BONUS_EXPIRY_DIALOGUE:String=NAME + "/notes/show_fun_bonus_expiry_dialogue";

        public static const SHOW_FUN_BONUS_PLAYTIME_DIALOGUE:String=NAME + "/notes/show_fun_bonus_playtime_dialogue";

        public static const SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE:String=NAME + "/notes/show_fun_bonus_unavailable_dialogue";

        public static const SHOW_FUN_BONUS_NOT_ALLOWED_DIALOGUE:String=NAME + "notes/show_fun_bonus_not_allowed_dialogue";

        public static const BB_OVERRIDE:String=NAME + "/notes/bb_override";

        public static const UPDATE_BANK_BUTTON_STATE:String=NAME + "/notes/update_bank_button_state";

        public static const STARTUP_DIALOGUE_REMOVED:String=NAME + "/notes/startup_dialogue_removed";

        public static const END_FUN_BONUS:String=NAME + "/notes/end_fun_bonus";

        public static const CHECK_GAME_PROGRESSIVE:String=NAME + "/notes/check_game_progressive";

        public static const LAUNCH_MY_ACCOUNT:String=NAME + "/notes/launch_my_account";

        public static const LAUNCH_FROM_FRAME_ICON_ID:String=NAME + "/notes/launch_from_frame_icon_id";

        public static const LAUNCH_OTHER_INTERNAL_SITE:String=NAME + "/notes/launch_other_external_site";

        public static const SET_EXTERNAL_PROGRESS:String=NAME + "/notes/set_external_progress";

        public static const PROCESS_DELAYED_DOWNLOAD:String=NAME + "/notes/process_delayed_download";

        public static const INIT_VPB_MODULE:String=NAME + "/notes/init_vpb_module";

        public static const INIT_MPF_MODULE:String=NAME + "/notes/init_mpf_module";

        public static const INIT_BONUS_BUBBLE_MODULE:String=NAME + "/notes/init_bonus_bubble_module";

        public static const INIT_MAGNETO_MODULE:String=NAME + "/notes/init_magneto_module";

        public static const COMPLETE_LOAD_BAR:String=NAME + "/notes/complete_load_bar";

        public static const RESET_PRELOADER:String=NAME + "/notes/reset_preloader";
    }
}


//            class StateGuardNotifications
package mgs.aurora.modules.core.notifications 
{
    public class StateGuardNotifications extends Object
    {
        public function StateGuardNotifications()
        {
            super();
            return;
        }

        internal static const NAME:String="state_guard";

        public static const SETUP_LOADER_OBJECTS_ENTER:String=NAME + "/notes/setup_loader_objects_enter";
    }
}


//          package states
//            class StateActions
package mgs.aurora.modules.core.states 
{
    public class StateActions extends Object
    {
        public function StateActions()
        {
            super();
            return;
        }

        internal static const NAME:String="core";

        public static const REQUEST_LOADER:String=NAME + "/action/request_loader";

        public static const REQUEST_EXTERNAL_DATA:String=NAME + "/action/request_external_data";

        public static const INITIAL_SETUP:String=NAME + "/action/initial_setup";

        public static const URL_LOAD_ERROR:String=NAME + "/action/url_load_error";

        public static const URL_LOAD_COMPLETE:String=NAME + "/action/url_load_complete";

        public static const LOAD_NEXT_DEPENDENCY:String=NAME + "/action/load_next_dependency";

        public static const SETUP_DEPENDENCIES:String=NAME + "/action/setup_dependencies";

        public static const ERROR:String=NAME + "/action/error";

        public static const SETUP_CORE:String=NAME + "/action/setup_core";

        public static const START_LOGIN:String=NAME + "/action/start_login";

        public static const SETUP_MPF_CONNECTIONS:String=NAME + "/action/setup_mpf_connections";

        public static const START_LOGOUT:String=NAME + "/action/start_logout";

        public static const GET_PLAYER_INFORMATION:String=NAME + "/action/get_player_information";

        public static const START_HIDDEN_GAMES:String=NAME + "/action/start_hidden_games";

        public static const START_GAME_MODULE:String=NAME + "/action/start_game_module";

        public static const GAME_MODULE_INIT:String=NAME + "/action/game_module_init";

        public static const GAME_MODULE_STATUS_INITIALIZE:String=NAME + "/action/game_module_status_initialize";

        public static const USER_SWITCH_SYSTEM_WAIT:String=NAME + "/action/user_switch_system-wait";

        public static const GAME_MODULE_EXITING:String=NAME + "/action/game_module_exiting";

        public static const SYSTEM_READY:String=NAME + "/action/system_ready";

        public static const LOAD_NEW_MODULE:String=NAME + "/action/load_new_module";

        public static const UNLOAD_GAME_MODULE:String=NAME + "/action/unload_game_module";

        public static const GAME_MODULE_UNLOADING:String=NAME + "/action/game_module_unloading";

        public static const AUTOMATION_LOAD_AUTOSOCKET:String=NAME + "/action/automation_load_autosocket";

        public static const AUTOMATION_LOAD_GAME_OBSERVER:String=NAME + "/action/automation_load_game_observer";
    }
}


//            class StateNames
package mgs.aurora.modules.core.states 
{
    public class StateNames extends Object
    {
        public function StateNames()
        {
            super();
            return;
        }

        internal static const NAME:String="core";

        public static const INITIAL:String=NAME + "/state/initial";

        public static const SETUP_LOADER_OBJECTS:String=NAME + "/state/setup_loader_objects";

        public static const LOADING_BRAND_CONFIG:String=NAME + "/state/loading_brand_config";

        public static const SETTING_UP_BRAND_CONFIG:String=NAME + "/state/setting_up_brand_config";

        public static const LOADING_DEPENDENCIES_CONFIG:String=NAME + "/state/loading_dependencies_config";

        public static const SETTING_UP_DEPENDENCIES_CONFIG:String=NAME + "/state/setting_up_dependencies_config";

        public static const DEPENDENCY_URL_ERROR:String=NAME + "/state/dependency_url_error";

        public static const LOADING_DEPENDENCIES:String=NAME + "/state/loading_dependencies";

        public static const STORING_DEPENDENCY:String=NAME + "/state/storing_dependency";

        public static const SETTING_UP_DEPENDENCIES:String=NAME + "/state/setting_up_dependencies";

        public static const LOADING_FRAME_DISPLAY:String=NAME + "/state/loading_frame_display";

        public static const SETTING_UP_FRAME_DISPLAY:String=NAME + "/state/setting_up_frame_display";

        public static const DEPENDENCIES_SETUP:String=NAME + "/state/dependencies_setup";

        public static const LOGIN:String=NAME + "/state/login";

        public static const PLAYER_INFORMATION:String=NAME + "/state/player_information";

        public static const MPF_CONNECT:String=NAME + "/state/mpf_connect";

        public static const LOGOUT:String=NAME + "/state/logout";

        public static const HIDDEN_GAMES:String=NAME + "/state/hidden_game";

        public static const GAME_MODULE_START_LOAD:String=NAME + "/state/game_module_start_load";

        public static const GAME_MODULE_INITIALIZE:String=NAME + "/state/game_module_initialize";

        public static const GAME_MODULE_LOAD_WAIT:String=NAME + "/state/game_module_load_wait";

        public static const GAME_MODULE_APISTATUS_INIT:String=NAME + "/state/game_module_apistatus_init";

        public static const GAME_MODULE_ASSET_LOAD_COMPLETE:String=NAME + "/state/game_module_asset_load_complete";

        public static const GAME_MODULE_ASSET_LOAD_ERROR:String=NAME + "/state/game_module_asset_loade_error";

        public static const GAME_MODULE_STATUS_INITIALIZE:String=NAME + "/state/game_module_status_initialize";

        public static const GAME_MODULE_EXITING:String=NAME + "/state/game_module_exiting";

        public static const SYSTEM_READY:String=NAME + "/state/system_ready";

        public static const LOAD_NEW_MODULE:String=NAME + "/state/load_new_module";

        public static const UNLOAD_GAME_MODULE:String=NAME + "/state/unload_game_module";

        public static const GAME_MODULE_UNLOADING:String=NAME + "/state/game_module_unloading";

        public static const AUTOMATION_LOAD_AUTOSOCKET:String=NAME + "/state/automation_load_autosocket";

        public static const AUTOMATION_LOADED_AUTOSOCKET:String=NAME + "/state/automation_loaded_autosocket";

        public static const AUTOMATION_LOAD_GAME_OBSERVER:String=NAME + "/state/automation_load_game_observer";

        public static const AUTOMATION_LOADED_GAME_OBSERVER:String=NAME + "/state/automation_loaded_game_observer";
    }
}


//          package utils
//            class CoreEventUtility
package mgs.aurora.modules.core.utils 
{
    import flash.events.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.dialogues.*;
    
    public class CoreEventUtility extends Object
    {
        public function CoreEventUtility()
        {
            super();
            return;
        }

        public static function apiEventTypeToSystemDialogueEventType_Mouse(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.DOUBLE_CLICK:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.DOUBLE_CLICK;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_DOWN:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_DOWN;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_MOVE:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_MOVE;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_OUT:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OUT;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_OVER:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OVER;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_UP:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_UP;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_WHEEL:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_WHEEL;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.RIGHT_CLICK:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.RIGHT_CLICK;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.ROLL_OUT:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OUT;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueMouseEvent.ROLL_OVER:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OVER;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function apiEventTypeToSystemDialogueEventType_Keyboard(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_DOWN:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_DOWN;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function apiEventTypeToSystemDialogueEventType_Selection(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiDialogueSelectionEvent.DESELECTED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueSelectionEvent.DESELECTED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTED:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueSelectionEvent.SELECTED;
                    break;
                }
                case mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTION_CHANGE:
                {
                    loc1 = mgs.aurora.common.events.dialogues.DialogueSelectionEvent.SELECTION_CHANGE;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function apiEventTypeToSystemDialogueEventType_Text(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE:
                {
                    return mgs.aurora.common.events.dialogues.DialoguesTextEvent.CHANGE;
                }
                case mgs.aurora.api.events.ApiDialogueTextEvent.TEXT_INPUT:
                {
                    return mgs.aurora.common.events.dialogues.DialoguesTextEvent.TEXT_INPUT;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function apiEventTypeToSystemDialogueEventType_Focus(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiDialogueFocusEvent.FOCUS_IN:
                {
                    return mgs.aurora.common.events.dialogues.DialogueFocusEvent.FOCUS_IN;
                }
                case mgs.aurora.api.events.ApiDialogueFocusEvent.FOCUS_OUT:
                {
                    return mgs.aurora.common.events.dialogues.DialogueFocusEvent.FOCUS_OUT;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function systemEventTypeToApiDialogueEventType_Focus(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.dialogues.DialogueFocusEvent.FOCUS_IN:
                {
                    return mgs.aurora.api.events.ApiDialogueFocusEvent.FOCUS_IN;
                }
                case mgs.aurora.common.events.dialogues.DialogueFocusEvent.FOCUS_OUT:
                {
                    return mgs.aurora.api.events.ApiDialogueFocusEvent.FOCUS_OUT;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function systemEventTypeToApiDialogueEventType_Text(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.dialogues.DialoguesTextEvent.CHANGE:
                {
                    return mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE;
                }
                case mgs.aurora.common.events.dialogues.DialoguesTextEvent.TEXT_INPUT:
                {
                    return mgs.aurora.api.events.ApiDialogueTextEvent.TEXT_INPUT;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function systemEventTypeToApiDialogueEventType_Selection(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.dialogues.DialogueSelectionEvent.DESELECTED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueSelectionEvent.DESELECTED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueSelectionEvent.SELECTED:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTED;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueSelectionEvent.SELECTION_CHANGE:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTION_CHANGE;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function systemEventTypeToApiDialogueEventType_Mouse(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.DOUBLE_CLICK:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.DOUBLE_CLICK;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_DOWN:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_DOWN;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_MOVE:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_MOVE;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OUT:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_OUT;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_OVER:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_OVER;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_UP:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_UP;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.MOUSE_WHEEL:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.MOUSE_WHEEL;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.RIGHT_CLICK:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.RIGHT_CLICK;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OUT:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.ROLL_OUT;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueMouseEvent.ROLL_OVER:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueMouseEvent.ROLL_OVER;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function systemEventTypeToApiDialogueEventType_Keyboard(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_DOWN:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_DOWN;
                    break;
                }
                case mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP:
                {
                    loc1 = mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return loc1;
        }

        public static function apiInteractionEventTypeToSystemInteractionEventType(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.api.events.ApiInteractionEvent.CLICK:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.CLICK;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.DOUBLE_CLICK:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.DOUBLE_CLICK;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_DOWN:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_MOVE:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OUT:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OVER:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_UP:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_WHEEL:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.ROLL_OUT:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.ROLL_OVER:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.KEY_DOWN:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN;
                    break;
                }
                case mgs.aurora.api.events.ApiInteractionEvent.KEY_UP:
                {
                    loc1 = mgs.aurora.common.events.SystemInteractionEvent.KEY_UP;
                    break;
                }
            }
            return loc1;
        }

        public static function systemInteractionEventTypeToApiInteractionEventType(arg1:String):String
        {
            var loc1:*="";
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.CLICK;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.DOUBLE_CLICK:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.DOUBLE_CLICK;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.MOUSE_DOWN;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.MOUSE_MOVE;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OUT;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OVER;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.MOUSE_UP;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.MOUSE_WHEEL;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.ROLL_OUT;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.ROLL_OVER;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.KEY_DOWN;
                    break;
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    loc1 = mgs.aurora.api.events.ApiInteractionEvent.KEY_UP;
                    break;
                }
            }
            return loc1;
        }

        public static function apiInteractionEventToSystemInteractionEvent(arg1:mgs.aurora.api.events.ApiInteractionEvent):mgs.aurora.common.events.SystemInteractionEvent
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.api.events.ApiInteractionEvent.CLICK:
                case mgs.aurora.api.events.ApiInteractionEvent.DOUBLE_CLICK:
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_DOWN:
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_MOVE:
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OUT:
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_OVER:
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_UP:
                case mgs.aurora.api.events.ApiInteractionEvent.MOUSE_WHEEL:
                case mgs.aurora.api.events.ApiInteractionEvent.ROLL_OUT:
                case mgs.aurora.api.events.ApiInteractionEvent.ROLL_OVER:
                {
                    return new mgs.aurora.common.events.SystemMouseEvent(apiInteractionEventTypeToSystemInteractionEventType(arg1.type), arg1.id, mgs.aurora.api.events.ApiMouseEvent(arg1).originalEvent);
                }
                case mgs.aurora.api.events.ApiInteractionEvent.KEY_DOWN:
                case mgs.aurora.api.events.ApiInteractionEvent.KEY_UP:
                {
                    return new mgs.aurora.common.events.SystemKeyboardEvent(apiInteractionEventTypeToSystemInteractionEventType(arg1.type), arg1.id, mgs.aurora.api.events.ApiKeyboardEvent(arg1).originalEvent);
                }
                default:
                {
                    return null;
                }
            }
        }

        public static function systemInteractionEventToApiInteractionEvent(arg1:mgs.aurora.common.events.SystemInteractionEvent):mgs.aurora.api.events.ApiInteractionEvent
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.common.events.SystemInteractionEvent.CLICK:
                case mgs.aurora.common.events.SystemInteractionEvent.DOUBLE_CLICK:
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_DOWN:
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_MOVE:
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OUT:
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_OVER:
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_UP:
                case mgs.aurora.common.events.SystemInteractionEvent.MOUSE_WHEEL:
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OUT:
                case mgs.aurora.common.events.SystemInteractionEvent.ROLL_OVER:
                {
                    return new mgs.aurora.api.events.ApiMouseEvent(systemInteractionEventTypeToApiInteractionEventType(arg1.type), arg1.id, arg1.originalEvent as flash.events.MouseEvent);
                }
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_DOWN:
                case mgs.aurora.common.events.SystemInteractionEvent.KEY_UP:
                {
                    return new mgs.aurora.api.events.ApiKeyboardEvent(systemInteractionEventTypeToApiInteractionEventType(arg1.type), arg1.id, arg1.originalEvent as flash.events.KeyboardEvent);
                }
                default:
                {
                    return null;
                }
            }
        }
    }
}


//            class ModuleUtility
package mgs.aurora.modules.core.utils 
{
    import mgs.aurora.common.enums.*;
    
    public class ModuleUtility extends Object
    {
        public function ModuleUtility()
        {
            super();
            return;
        }

        public static function getLaunchUrl(arg1:XML):String
        {
            if (arg1 == null) 
            {
                return "";
            }
            if (String(arg1.@type).toLowerCase() != "externallaunch") 
            {
                if (String(arg1.@platform).toLowerCase() != mgs.aurora.common.enums.CasinoPlatforms.AURORA.toLowerCase()) 
                {
                    if (arg1.hasOwnProperty("@extUrl")) 
                    {
                        return String(arg1.@extUrl);
                    }
                }
            }
            else if (arg1.hasOwnProperty("@url")) 
            {
                return String(arg1.@url);
            }
            return "";
        }

        public static function isExternalGame(arg1:XML):Boolean
        {
            if (arg1 == null) 
            {
                return false;
            }
            if (String(arg1.@type).toLowerCase() == "externallaunch" || !(String(arg1.@platform).toLowerCase() == mgs.aurora.common.enums.CasinoPlatforms.AURORA.toLowerCase())) 
            {
                return true;
            }
            return false;
        }

        public static function getDisplayNameWithOutFormatting(arg1:XML):String
        {
            if (arg1 == null) 
            {
                return "";
            }
            var loc1:*=String(arg1.@genre) + " " + String(arg1.art.@name);
            var loc2:*=new RegExp("-B-", "gi");
            var loc3:*=new RegExp("-B!-", "gi");
            var loc4:*=new RegExp("-I-", "gi");
            var loc5:*=new RegExp("-I!-", "gi");
            var loc6:*=new RegExp("-L-", "gi");
            return loc1.replace(loc2, "").replace(loc3, "").replace(loc4, "").replace(loc5, "").replace(loc6, " ");
        }
    }
}


//            class PureMVCUtility
package mgs.aurora.modules.core.utils 
{
    import mgs.aurora.modules.core.*;
    import org.puremvc.as3.multicore.interfaces.*;
    
    public class PureMVCUtility extends Object
    {
        public function PureMVCUtility()
        {
            super();
            return;
        }

        public static function retrieveMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            return loc1.retrieveMediator(arg1);
        }

        public static function retrieveProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            return loc1.retrieveProxy(arg1);
        }

        public static function sendNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            return loc1.sendNotification(arg1.getName(), arg1.getBody(), arg1.getType());
        }
    }
}


//            class StateMachineUtility
package mgs.aurora.modules.core.utils 
{
    import mgs.aurora.modules.core.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class StateMachineUtility extends Object
    {
        public function StateMachineUtility()
        {
            super();
            return;
        }

        public static function getCurrentState():org.puremvc.as3.multicore.utilities.statemachine.State
        {
            var loc1:*=mgs.aurora.modules.core.CoreFacade.getInstance(mgs.aurora.modules.core.Core.NAME);
            return org.puremvc.as3.multicore.utilities.statemachine.StateMachine(loc1.retrieveMediator(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.NAME)).getViewComponent() as org.puremvc.as3.multicore.utilities.statemachine.State;
        }

        public static function getCurrentStateName():String
        {
            return mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentState().name;
        }
    }
}


//          package view
//            package automation
//              class AutomationMediator
package mgs.aurora.modules.core.view.automation 
{
    import flash.display.*;
    import flash.system.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class AutomationMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function AutomationMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_INCOMING_SYSTEM_GAME_FILE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_INCOMING_SYSTEM_GAME_FILE:
                {
                    this.incomingFile(arg1.getBody() as mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._automationConfig = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).Automation;
            this.startLoad();
            return;
        }

        internal function startLoad():void
        {
            var loc1:*=new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain, flash.system.SecurityDomain.currentDomain);
            var loc2:*=new mgs.aurora.common.net.URLLoadRequestInfo(String(this._automationConfig.AutoSocket.@id), String(this._automationConfig.AutoSocket.@file), mgs.aurora.common.enums.ContentType.SWF_CONTENT, loc1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc2);
            return;
        }

        internal function incomingFile(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            var loc1:*=null;
            if (arg1.request.id == this._automationConfig.AutoSocket.@id) 
            {
                mgs.aurora.modules.core.model.UrlLoadResponseProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME)).getResponse();
                this.setViewComponent(arg1.content);
                loc1 = mgs.aurora.modules.core.view.CoreMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME)).stage;
                loc1.addChild(arg1.content);
            }
            return;
        }

        public static const NAME:String="AutomationMediator";

        internal var _automationConfig:XMLList;
    }
}


//              class GameObserverMediator
package mgs.aurora.modules.core.view.automation 
{
    import flash.system.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.server.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.interfaces.gameObserver.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.server.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class GameObserverMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function GameObserverMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOADED_GAME_OBSERVER);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_INCOMING_SYSTEM_GAME_FILE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_INCOMING_SYSTEM_GAME_PACKET);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_BUSY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_INITIALIZED);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_CLEANEDUP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_SHOW_HIDE_PRELOADER);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_LOADED_GAME_OBSERVER:
                {
                    this.loaded();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_INCOMING_SYSTEM_GAME_FILE:
                {
                    this.broadcastFileLoaded(arg1.getBody() as mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_BUSY:
                {
                    this.broadcastBusyUpdate(arg1.getBody() as Boolean);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_CLEANEDUP:
                {
                    this.broadcastCleanedUpdate(arg1.getBody() as Boolean);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_INITIALIZED:
                {
                    this.broadcastInitializedUpdate(arg1.getBody() as Boolean);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_SHOW_HIDE_PRELOADER:
                {
                    this.broadcastPreloaderUpdate(arg1.getBody() as Boolean);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._initialized = false;
            this._automationConfig = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).Automation;
            this.startLoad();
            return;
        }

        public function get gameObserver():mgs.aurora.common.interfaces.gameObserver.IGameObserver
        {
            return this.getViewComponent() as mgs.aurora.common.interfaces.gameObserver.IGameObserver;
        }

        internal function startLoad():void
        {
            var loc1:*=new flash.system.LoaderContext(false, flash.system.ApplicationDomain.currentDomain, flash.system.SecurityDomain.currentDomain);
            var loc2:*=new mgs.aurora.common.net.URLLoadRequestInfo(String(this._automationConfig.GameObserver.@id), String(this._automationConfig.GameObserver.@file), mgs.aurora.common.enums.ContentType.SWF_CONTENT, loc1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc2);
            return;
        }

        internal function loaded():void
        {
            var loc1:*=mgs.aurora.modules.core.model.UrlLoadResponseProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME)).getResponse();
            this.setViewComponent(loc1.content);
            this.gameObserver.initialize("_GAME_OBSERVER_");
            this._initialized = true;
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY);
            return;
        }

        internal function broadcastFileLoaded(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            var loc1:*=0;
            if (!this._initialized) 
            {
                return;
            }
            var loc3:*=arg1.request.type;
            switch (loc3) 
            {
                case mgs.aurora.common.enums.ContentType.SWF_CONTENT:
                {
                    loc1 = mgs.aurora.api.enums.ContentType.SWF_CONTENT;
                    break;
                }
                case mgs.aurora.common.enums.ContentType.BIN_CONTENT:
                {
                    loc1 = mgs.aurora.api.enums.ContentType.BIN_CONTENT;
                    break;
                }
                case mgs.aurora.common.enums.ContentType.XML_CONTENT:
                {
                    loc1 = mgs.aurora.api.enums.ContentType.XML_CONTENT;
                    break;
                }
            }
            var loc2:*=new mgs.aurora.modules.core.model.api.server.FileResponse();
            loc2.content = arg1.content;
            loc2.request = new mgs.aurora.api.server.FileRequest(arg1.request.id, arg1.request.url, loc1);
            this.gameObserver.fileLoaded(loc2);
            return;
        }

        internal function broadcastBusyUpdate(arg1:Boolean):void
        {
            this.gameObserver.gameBusy(arg1);
            return;
        }

        internal function broadcastCleanedUpdate(arg1:Boolean):void
        {
            this.gameObserver.gameCleanedUp(arg1);
            return;
        }

        internal function broadcastInitializedUpdate(arg1:Boolean):void
        {
            this.gameObserver.gameInitialized(arg1);
            return;
        }

        public function broadcastPreloaderUpdate(arg1:Boolean):void
        {
            if (!arg1) 
            {
                this.gameObserver.preloaderRemoved();
            }
            return;
        }

        public static const NAME:String="GameObserverMediator";

        internal var _initialized:Boolean;

        internal var _automationConfig:XMLList;
    }
}


//            package banking
//              class BankingMediator
package mgs.aurora.modules.core.view.banking 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.banking.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.banking.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.vo.banking.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.enum.external.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.api.banking.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class BankingMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.banking.IBanking
    {
        public function BankingMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        internal function onDialogueCreated(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            var loc1:*=this._dialoguesHandler.dialogue(arg1.diagId);
            var loc2:*=loc1.texts.getText("MESS");
            var loc3:*=mgs.aurora.modules.core.model.StringsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.StringsProxy.NAME));
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, this.onDialogueMouseEvent);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, this.onDialogueKeyboardEvent);
            var loc4:*=arg1.diagId;
            switch (loc4) 
            {
                case "option":
                {
                    loc2.text = this._dialogueString;
                    break;
                }
                case "info":
                {
                    loc2.text = this._dialogueString;
                    break;
                }
            }
            return;
        }

        internal function onDialogueKeyboardEvent(arg1:mgs.aurora.common.events.dialogues.DialogueKeyboardEvent):void
        {
            this.onDialogueButtonEvent(arg1.control.id, arg1.diagId);
            return;
        }

        internal function onDialogueMouseEvent(arg1:mgs.aurora.common.events.dialogues.DialogueMouseEvent):void
        {
            this.onDialogueButtonEvent(arg1.control.id, arg1.diagId);
            return;
        }

        internal function onDialogueButtonEvent(arg1:String, arg2:String):void
        {
            this._dialoguesHandler.remove(arg2);
            var loc1:*=arg1;
            switch (loc1) 
            {
                case "YES":
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_BANK, null, mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
                    break;
                }
            }
            return;
        }

        public function get banking():mgs.aurora.common.interfaces.banking.IBanking
        {
            return this.viewComponent as mgs.aurora.common.interfaces.banking.IBanking;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_INITIALIZE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_QUICKBANK);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_PROMPT_FOR_CASH);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_REFRESH_BALANCE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_INSUFFICIENT_GAME_FUNDS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_CUSTOM_INSUFFICIENT_GAME_FUNDS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_SHOW_BANKING_REFRESH);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=arg1.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_INITIALIZE:
                {
                    this.setup();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK:
                {
                    if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] != mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_PING);
                        this.launchBank();
                    }
                    else 
                    {
                        facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FB_SWITCH_DIALOGUE, {"site":arg1.getName(), "data":""}, mgs.aurora.modules.core.enum.FunBonusEventSource.VALUE_ADD + "|" + mgs.aurora.modules.core.enum.external.WindowNames.ECASH);
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_QUICKBANK:
                {
                    if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] != mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_PING);
                        this.launchQuickBank();
                    }
                    else 
                    {
                        facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FB_SWITCH_DIALOGUE, {"site":arg1.getName(), "data":""}, mgs.aurora.modules.core.enum.FunBonusEventSource.VALUE_ADD + "|" + mgs.aurora.modules.core.enum.external.WindowNames.QUICK_BANK);
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_SHOW_BANKING_REFRESH:
                {
                    this.showRefreshDialogue();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_PROMPT_FOR_CASH:
                {
                    this.promptForCash();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_REFRESH_BALANCE:
                {
                    this.refreshBalance();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_INSUFFICIENT_GAME_FUNDS:
                {
                    this.insufficientGameFunds();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_CUSTOM_INSUFFICIENT_GAME_FUNDS:
                {
                    this.insufficientCustomGameFunds(String(arg1.getBody()));
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            this._dialoguesHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            this._dialoguesHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            return;
        }

        public function get balance():Number
        {
            return this.banking.balance;
        }

        public function initialise(arg1:mgs.aurora.common.vo.banking.BankingDependencies):void
        {
            this.banking.initialise(arg1);
            return;
        }

        public function launchBank():void
        {
            this.banking.launchBank();
            return;
        }

        public function launchQuickBank():void
        {
            this.banking.launchQuickBank();
            return;
        }

        public function promptForCash():void
        {
            this.banking.promptForCash();
            return;
        }

        public function refreshBalance():void
        {
            this.banking.refreshBalance();
            return;
        }

        public function setUserBalance(arg1:Number):void
        {
            this.banking.setUserBalance(arg1);
            return;
        }

        public function reset():void
        {
            this.banking.reset();
            return;
        }

        public function showRefreshDialogue():void
        {
            this.banking.showRefreshDialogue();
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.banking.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.banking.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.banking.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.banking.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.banking.willTrigger(arg1);
        }

        internal function setup():void
        {
            var loc1:*=mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc3:*=loc2.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc3[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE].addEventListener(mgs.aurora.common.events.SystemConfigEvent.VALUE_CHANGED, this.onServerBalanceChange);
            var loc4:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc5:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc4.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            var loc6:*=loc4.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc7:*=new XML(loc6.casino.bank);
            var loc8:*=new XML(loc6.casino.creditsFormat);
            var loc9:*=loc4.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc10:*=new mgs.aurora.common.vo.banking.BankingDependencies(loc5, loc1, loc3, loc7, loc8, loc9);
            this.banking.addEventListener(mgs.aurora.common.events.banking.BankingEvent.LAUNCH_BANKING, this.onLaunchBanking);
            this.banking.addEventListener(mgs.aurora.common.events.banking.BankingEvent.BANKING_NOT_LAUNCHED, this.onBankingNotLaunched);
            this.banking.addEventListener(mgs.aurora.common.events.banking.BankingEvent.BANKING_COMPLETE, this.onBankingComplete);
            this.banking.addEventListener(mgs.aurora.common.events.banking.BankingEvent.FRAME_LAUNCH_BANK, this.onMarketBankFrameLaunch);
            this.banking.addEventListener(mgs.aurora.common.events.banking.BankingEvent.GENIE_CASINO_ERROR, this.onGenieCasinoError);
            this.banking.addEventListener(mgs.aurora.common.events.PacketErrorEvent.FATAL, this.onBankingError);
            this.initialise(loc10);
            return;
        }

        internal function onMarketBankFrameLaunch(arg1:mgs.aurora.common.events.banking.BankingEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_RETURN_FROM_BANK);
            return;
        }

        internal function onGenieCasinoError(arg1:mgs.aurora.common.events.banking.BankingEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, arg1.data);
            return;
        }

        internal function onBankingError(arg1:mgs.aurora.common.events.PacketErrorEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, arg1.packet, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            return;
        }

        internal function onServerBalanceChange(arg1:mgs.aurora.common.events.SystemConfigEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SYSTEM_UPDATE_BALANCE, loc1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY, null, mgs.aurora.modules.core.enum.ModuleReadyCheckTypes.SHOW_MODULE_STARTUP_INFO_DIALOGUE);
            return;
        }

        internal function onLaunchBanking(arg1:mgs.aurora.common.events.banking.BankingEvent):void
        {
            this._startingBalance = this.banking.balance;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_BANK);
            return;
        }

        internal function onBankingNotLaunched(arg1:mgs.aurora.common.events.banking.BankingEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY, null, mgs.aurora.modules.core.enum.ModuleReadyCheckTypes.SHOW_MODULE_STARTUP_INFO_DIALOGUE);
            return;
        }

        internal function onBankingComplete(arg1:mgs.aurora.common.events.banking.BankingEvent):void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_PING);
            var loc1:*=(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GenieStepsProxy.NAME) as mgs.aurora.modules.core.model.GenieStepsProxy).stepId(mgs.aurora.modules.core.enum.GenieStepIdNames.BANKING_USAGE);
            if (loc1 != "") 
            {
                loc3 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                (loc4 = new flash.utils.Dictionary()).stepId = loc1;
                loc4.regType = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.ID4]);
                if (loc3[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN]) 
                {
                    loc4.playerLoginName = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
                }
                else 
                {
                    loc4.playerLoginName = "";
                }
                loc4.userIdentifier = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.ID1]);
                loc5 = this._insufficientFundsShown ? "InsufficientFunds" : "Standard";
                loc6 = "None";
                if (this._startingBalance > this.banking.balance) 
                {
                    loc6 = "Withdrawal";
                }
                else if (this._startingBalance < this.banking.balance) 
                {
                    loc6 = "Deposit";
                }
                loc4.stepRef = String(loc3[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID]) + "|" + loc5 + "|" + loc6;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GENERIC_STEP, loc4);
            }
            this._startingBalance = this.banking.balance;
            this._insufficientFundsShown = false;
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy;
            if (loc2) 
            {
                mgs.aurora.modules.core.model.api.banking.Banking(loc2.banking).dispatchEvent(new mgs.aurora.api.events.ApiBankingEvent(mgs.aurora.api.events.ApiBankingEvent.BANK_CLOSE));
            }
            return;
        }

        internal function insufficientGameFunds():void
        {
            var loc3:*=null;
            var loc4:*=null;
            this._insufficientFundsShown = true;
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc2:*=mgs.aurora.modules.core.model.StringsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.StringsProxy.NAME));
            if (int(loc1.casino.bank.@useInsufficientFader) != 1) 
            {
                if ((loc4 = mgs.aurora.modules.core.model.BankingProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME))).isAvailable) 
                {
                    this._dialogueString = loc2.getSystemString("INSUFFICIENT_FUNDS3");
                    this._dialoguesHandler.create("option", "YesNo");
                }
                else 
                {
                    this._dialogueString = loc2.getSystemString("INSUFFICIENT_FUNDS2");
                    this._dialoguesHandler.create("info", "Info");
                }
            }
            else 
            {
                loc3 = new Object();
                loc3.message = loc2.getSystemString("INSUFFICIENT_FUNDS");
                loc3.delay = 0;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MSG_FADER, loc3);
            }
            return;
        }

        internal function insufficientCustomGameFunds(arg1:String):void
        {
            this._insufficientFundsShown = true;
            var loc1:*=mgs.aurora.modules.core.model.StringsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.StringsProxy.NAME));
            var loc2:*=mgs.aurora.modules.core.model.BankingProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME));
            if (loc2.isAvailable) 
            {
                this._dialogueString = loc1.getSystemString(arg1) + "" + loc1.getSystemString("INSUFFICIENT_FUNDS5");
                this._dialoguesHandler.create("option", "YesNo");
            }
            else 
            {
                this._dialogueString = loc1.getSystemString(arg1);
                this._dialoguesHandler.create("info", "Info");
            }
            return;
        }

        public static const NAME:String="BankingMediator";

        internal var _dialoguesHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        internal var _dialogueString:String;

        internal var _startingBalance:Number;

        internal var _insufficientFundsShown:Boolean;
    }
}


//            package bubble
//              class BonusBubbleMediator
package mgs.aurora.modules.core.view.bubble 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.bonusBubble.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.frame.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.funBonus.*;
    import mgs.aurora.common.events.raptorSessions.*;
    import mgs.aurora.common.interfaces.bonusBubble.*;
    import mgs.aurora.common.interfaces.currency.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.frames.controls.buttons.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.module.*;
    import mgs.aurora.modules.core.view.xman.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class BonusBubbleMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function BonusBubbleMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*=null;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            flash.display.DisplayObjectContainer(loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_BONUSBUBBLE)).addChild(this.bubble as flash.display.DisplayObject);
            this.resetToFrameTrigger();
            this.bubble.addEventListener(mgs.aurora.common.events.PacketErrorEvent.FATAL, this.onPacketError);
            this.bubble.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_SWITCH_USER, this.switchUser);
            this.bubble.addEventListener(mgs.aurora.common.events.funBonus.FunBonusEvents.FP_SHOW_TC, this.launchFunBonusEvent);
            this.bubble.addEventListener(mgs.aurora.common.events.funBonus.FunBonusEvents.FB_SHOW_TUTORIAL, this.launchFunBonusEvent);
            this.bubble.addEventListener(mgs.aurora.common.events.funBonus.FunBonusEvents.FB_CHANGE_BONUS_OFFER, this.changeBonusOffer);
            this.bubble.addEventListener(mgs.aurora.common.events.funBonus.FunBonusEvents.FB_CHANGE_BONUS_OFFER_ERROR, this.changeBonusOfferError);
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.xman.XManMediator.NAME) as mgs.aurora.modules.core.view.xman.XManMediator;
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc5:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DISPLAY_CONFIG);
            var loc6:*;
            var loc7:*;
            if ((loc7 = (loc6 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_BONUS_BUBBLE] != "1") 
            {
                this.bubble.enabled = false;
            }
            else 
            {
                loc8 = new flash.utils.Dictionary();
                loc9 = mgs.aurora.modules.core.model.CurrenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME));
                loc10 = loc3.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.FUN_BONUS_BUBBLE);
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.FUN_BONUS_MODULE] = loc10.content;
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.FUN_BONUS_CONFIG] = XML(loc4.funBonus);
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.XMAN_MODULE] = loc2.getViewComponent();
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.CONFIG_XML] = mgs.aurora.common.utilities.StringUtils.replaceStringID(loc4.bonusBubble[0], loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS), ["cash", "bonus", "total"]);
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.CURRENCY_SUPPORTED] = loc4.bonusBubble.@showCurrency == "1";
                loc11 = loc9.currenciesInfo;
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.CURRENCY_XML] = loc11;
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.STANDARD_CURRENCY_FORMAT] = loc9.standardCurrencyFormat;
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.SESSION_PROXY] = loc7;
                loc8[mgs.aurora.common.enums.bonusBubble.BonusBubbleConfigKeys.XML_STRINGS] = loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
                loc12 = loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.creditsFormat;
                this.bubble.setup(loc8);
                this.bubble.setCreditsFormatting(true, loc12.@separatorF, loc12.@separatorTM);
                this.bubble.enabled = true;
                loc13 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
                this.bubble.display = false;
                if (((loc14 = mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonManager(loc13.frames.currentFrame.controls.buttons).enabledList).indexOf(mgs.aurora.common.enums.frame.SystemButtonTypes.BANK) > -1 || loc13.bankButtonState) && !loc13.dialogueShowing) 
                {
                    this.bubble.display = true;
                }
                if (loc13.BBTrigger != null) 
                {
                    this.onCustomTriggerChange(loc13.BBTrigger);
                }
                if (loc13.showBonusBubble) 
                {
                    this.bubble.show();
                    loc13.showBonusBubble = false;
                }
                if (loc13.frames.getBonusBubbleCoordinates != null) 
                {
                    this.bubble.coordinates = loc13.frames.getBonusBubbleCoordinates();
                }
            }
            return;
        }

        internal function manualBBTrigger():void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
            this.onCustomTriggerChange(loc1.BBTrigger);
            return;
        }

        internal function launchFunBonusEvent(arg1:flash.events.Event):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case mgs.aurora.common.events.funBonus.FunBonusEvents.FP_SHOW_TC:
                {
                    loc1.launchFunBonusTermsConditions();
                    break;
                }
                case mgs.aurora.common.events.funBonus.FunBonusEvents.FB_SHOW_TUTORIAL:
                {
                    loc1.launchFunBonusTutorial(mgs.aurora.modules.core.enum.FunBonusEventSource.BONUS_BUBBLE);
                    break;
                }
            }
            return;
        }

        internal function switchUser(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST, arg1.dynamicData, mgs.aurora.modules.core.enum.FunBonusEventSource.BONUS_BUBBLE);
            return;
        }

        internal function changeBonusOffer(arg1:flash.events.Event):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc2:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc2[mgs.aurora.common.enums.configMapping.SessionConfig.INGAME_GAME_LAUNCH] = true;
            loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH] = true;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_SHOW_OVERLAY, mgs.aurora.common.events.funBonus.FunBonusEvents.FB_CHANGE_BONUS_OFFER);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, new mgs.aurora.modules.core.model.vo.SwitchModuleParams(uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID]), uint(loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID])));
            return;
        }

        internal function changeBonusOfferError(arg1:flash.events.Event):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE, mgs.aurora.common.events.funBonus.FunBonusEvents.FB_CHANGE_BONUS_OFFER_ERROR);
            return;
        }

        public override function onRemove():void
        {
            this.bubble.removeEventListener(mgs.aurora.common.events.PacketErrorEvent.FATAL, this.onPacketError);
            flash.display.DisplayObject(this.bubble).parent.removeChild(this.bubble as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SYSTEM_READY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_TRIGGER_CHANGE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_COORDINATES_CHANGE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BUSY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_BUSY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SETTINGS_CHANGE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_ENABLED);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SHOW);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BB_OVERRIDE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.STARTUP_DIALOGUE_REMOVED);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=false;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=false;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            if (arg1.getName() == mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_ENABLED) 
            {
                loc1 = Boolean(arg1.getBody());
                this.bubble.enabled = mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).allowBonusBubble ? loc1 : false;
            }
            if (this.bubble.enabled) 
            {
                loc2 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
                var loc8:*=arg1.getName();
                switch (loc8) 
                {
                    case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SYSTEM_READY:
                    {
                        this.bubble.enabled = loc2.allowBonusBubble;
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.STARTUP_DIALOGUE_REMOVED:
                    case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_BUSY:
                    {
                        loc4 = !(loc3 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator) || !loc3.frames || !loc3.frames.currentFrame || !loc3.frames.currentFrame.controls;
                        if (mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentStateName() == mgs.aurora.modules.core.states.StateNames.GAME_MODULE_EXITING || loc4) 
                        {
                            if (this.bubble != null) 
                            {
                                this.bubble.display = false;
                            }
                        }
                        else if (((loc5 = mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonManager(loc3.frames.currentFrame.controls.buttons).enabledList).indexOf(mgs.aurora.common.enums.frame.SystemButtonTypes.BANK) > -1 || loc3.bankButtonState) && !loc3.dialogueShowing) 
                        {
                            this.bubble.display = true;
                        }
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_TRIGGER_CHANGE:
                    {
                        if (String(loc2.gameSet.art.@BBTriggerOverRide) == "") 
                        {
                            this.onCustomTriggerChange(arg1.getBody() as flash.display.InteractiveObject);
                        }
                        else 
                        {
                            this.manualBBTrigger();
                        }
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_COORDINATES_CHANGE:
                    {
                        loc6 = arg1.getBody() as flash.geom.Point;
                        this.bubble.coordinates = loc6;
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BUSY:
                    {
                        this.bubble.display = false;
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE:
                    case mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE:
                    {
                        this.bubble.display = false;
                        this._manualOverride = false;
                        this.bubble.coordinates = null;
                        this.resetToFrameTrigger();
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SETTINGS_CHANGE:
                    {
                        loc7 = flash.utils.Dictionary(arg1.getBody());
                        this.bubble.changeSettings(loc7);
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SHOW:
                    {
                        this.bubble.show();
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.BB_OVERRIDE:
                    {
                        this._manualOverride = true;
                        break;
                    }
                    case mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE:
                    {
                        this.bubble.display = Boolean(arg1.getBody());
                        break;
                    }
                }
            }
            return;
        }

        internal function onCustomTriggerChange(arg1:flash.display.InteractiveObject):void
        {
            if (arg1 == null) 
            {
                this.resetToFrameTrigger();
            }
            else 
            {
                this.bubble.trigger = arg1;
            }
            return;
        }

        internal function resetToFrameTrigger():void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME) as mgs.aurora.modules.core.view.frames.FramesBuilderMediator;
            if (loc1.currentFrame.balanceButton.balanceButton != null) 
            {
                this.bubble.trigger = loc1.currentFrame.balanceButton.balanceButton;
            }
            return;
        }

        internal function onPacketError(arg1:mgs.aurora.common.events.PacketErrorEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, arg1.packet, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            return;
        }

        internal function get bubble():mgs.aurora.common.interfaces.bonusBubble.IBonusBubble
        {
            return this.viewComponent as mgs.aurora.common.interfaces.bonusBubble.IBonusBubble;
        }

        public static const NAME:String="BonusBubbleMediator";

        internal var _manualOverride:Boolean=false;
    }
}


//            package dialogues
//              class DialoguesMediator
package mgs.aurora.modules.core.view.dialogues 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class DialoguesMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.dialogues.IDialoguesModule
    {
        public function DialoguesMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES:
                {
                    if (this.displayCount) 
                    {
                        this.removeAllDialogues();
                    }
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._dialoguesModule = this.viewComponent as mgs.aurora.common.interfaces.dialogues.IDialoguesModule;
            this._dialoguesModule.addEventListener(mgs.aurora.common.events.dialogues.DialoguesModuleEvent.DIALOGUE_DISPLAYED, this.onModuleDialogueDisplayed);
            this._dialoguesModule.addEventListener(mgs.aurora.common.events.dialogues.DialoguesModuleEvent.DIALOGUE_REMOVED, this.onModuleDialogueRemoved);
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_DIALOGUE) as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            var loc3:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME));
            this.setArt(loc3.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_ART));
            this.setFonts(loc3.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FONTS));
            this.setControlsConfig(loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_CONTROL_CONFIG));
            var loc4:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc5:*=mgs.aurora.common.utilities.StringUtils.stringToBoolean(String(loc4.getValue("widescreen", "false")).toLowerCase());
            var loc6:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG);
            var loc7:*=loc5 ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH : Number(loc6.systemFrame.@width);
            var loc8:*=loc5 ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_HEIGHT : Number(loc6.systemFrame.@height);
            this.setStageResolution(loc7, loc8);
            var loc9:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_MAPPING_CONFIG);
            this.localizeFromIdToStrings(loc9);
            this.setLayoutMappingConfig(loc9);
            var loc10:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.DIALOGUES_DEFINITIONS_CONFIG);
            this.localizeFromIdToStrings(loc10);
            this.setLayoutConfig(loc10);
            this._coreDialogueHandler = this.getNewHandler();
            return;
        }

        public function get coreDialogueHandler():mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this._coreDialogueHandler;
        }

        public function get displayCount():uint
        {
            return this._dialoguesModule.displayCount;
        }

        public function getNewHandler(arg1:String=null):mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this._dialoguesModule.getNewHandler(arg1);
        }

        public function removeCustomLayout():void
        {
            this._dialoguesModule.removeCustomLayout();
            return;
        }

        public function setArt(arg1:flash.display.LoaderInfo):void
        {
            this._dialoguesModule.setArt(arg1);
            return;
        }

        public function setArtLanguage(arg1:flash.display.LoaderInfo):void
        {
            this._dialoguesModule.setArtLanguage(arg1);
            return;
        }

        public function setControlsConfig(arg1:XML):void
        {
            this._dialoguesModule.setControlsConfig(arg1);
            return;
        }

        public function setCustomLayoutConfig(arg1:XML):void
        {
            this._dialoguesModule.setCustomLayoutConfig(arg1);
            return;
        }

        public function setFonts(arg1:flash.display.LoaderInfo):void
        {
            this._dialoguesModule.setFonts(arg1);
            return;
        }

        public function setLayoutConfig(arg1:XML):void
        {
            this._dialoguesModule.setLayoutConfig(arg1);
            return;
        }

        public function setLayoutMappingConfig(arg1:XML):void
        {
            this._dialoguesModule.setLayoutMappingConfig(arg1);
            return;
        }

        public function setStageResolution(arg1:Number, arg2:Number):void
        {
            this._dialoguesModule.setStageResolution(arg1, arg2);
            return;
        }

        public function getHandler(arg1:String):mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this._dialoguesModule.getHandler(arg1);
        }

        public function removeAllDialogues():void
        {
            this._dialoguesModule.removeAllDialogues();
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._dialoguesModule.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._dialoguesModule.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._dialoguesModule.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._dialoguesModule.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._dialoguesModule.willTrigger(arg1);
        }

        internal function localizeFromIdToStrings(arg1:XML):void
        {
            var definitionXml:XML;
            var stringsXML:XML;
            var diag:XML;
            var controls:XMLList;

            var loc1:*;
            diag = null;
            controls = null;
            definitionXml = arg1;
            stringsXML = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc2:*=0;
            var loc3:*=definitionXml.dialogue;
            for each (diag in loc3) 
            {
                if (diag.@text != undefined) 
                {
                    var loc5:*=0;
                    var loc6:*=stringsXML.string;
                    var loc4:*=new XMLList("");
                    for each (var loc7:* in loc6) 
                    {
                        var loc8:*;
                        with (loc8 = loc7) 
                        {
                            if (@ID == diag.@text) 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    diag.@text = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc4.@text);
                }
                if (diag.override.controls != undefined) 
                {
                    this.replaceStringID(diag.override.controls, stringsXML);
                }
                controls = diag.controls;
                this.replaceStringID(controls, stringsXML);
            }
            return;
        }

        internal function replaceStringID(arg1:XMLList, arg2:XML):void
        {
            var controls:XMLList;
            var stringsXML:XML;
            var item:XML;
            var str:String;

            var loc1:*;
            item = null;
            str = null;
            controls = arg1;
            stringsXML = arg2;
            var loc2:*=0;
            var loc3:*=controls.children();
            for each (item in loc3) 
            {
                if (item.@text == undefined) 
                {
                    continue;
                }
                var loc5:*=0;
                var loc6:*=stringsXML.string;
                var loc4:*=new XMLList("");
                for each (var loc7:* in loc6) 
                {
                    var loc8:*;
                    with (loc8 = loc7) 
                    {
                        if (@ID == item.@text) 
                        {
                            loc4[loc5] = loc7;
                        }
                    }
                }
                str = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc4.@text);
                if (str == "") 
                {
                    continue;
                }
                item.@text = str;
            }
            return;
        }

        internal function onModuleDialogueRemoved(arg1:mgs.aurora.common.events.dialogues.DialoguesModuleEvent):void
        {
            if (arg1.diagId != mgs.aurora.modules.core.view.dialogues.ErrorDialogueMediator.DIALOGUE_NAME) 
            {
                if (this.displayCount == 0) 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SYSTEM_UNLOCKED_ALL_MODULE_BUTTONS);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UNLOCK_ALL_MODULE_BUTTONS);
                }
            }
            return;
        }

        internal function onModuleDialogueDisplayed(arg1:mgs.aurora.common.events.dialogues.DialoguesModuleEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SYSTEM_LOCKED_ALL_MODULE_BUTTONS);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LOCK_ALL_MODULE_BUTTONS);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MODAL);
            return;
        }

        public static const NAME:String="DialoguesMediator";

        internal var _dialoguesModule:mgs.aurora.common.interfaces.dialogues.IDialoguesModule;

        internal var _coreDialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
    }
}


//              class ErrorDialogueMediator
package mgs.aurora.modules.core.view.dialogues 
{
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class ErrorDialogueMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function ErrorDialogueMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var packet:XML;
            var code:int;
            var errorid:String;
            var dependsProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var strings:XML;
            var sessionObject:Object;
            var errorstr:String;

            var loc1:*;
            packet = null;
            code = 0;
            errorid = null;
            dependsProxy = null;
            strings = null;
            sessionObject = null;
            errorstr = null;
            notification = arg1;
            Debugger.trace("Error Dialog handleNotification " + notification.getName(), "SYSTEM - Core MPF Packet");
            var loc2:*=notification.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE:
                {
                    this.showError(notification.getBody() as XML, "Info");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE:
                {
                    packet = notification.getBody() as XML;
                    if (packet != null) 
                    {
                        code = int(packet.Response.Error.@servercode);
                        if (code == int(mgs.aurora.common.enums.XManServerErrorCodes.LOGIN_ATTEMPTS_EXCEEDED)) 
                        {
                            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_ACCOUNT_LOCKED, packet);
                        }
                    }
                    this.showError(packet);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL:
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL:
                {
                    errorid = notification.getBody() as String;
                    dependsProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
                    strings = dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
                    sessionObject = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    if (sessionObject[mgs.aurora.common.enums.configMapping.SessionConfig.CIP] == true && errorid == "ERRORSTR3") 
                    {
                        errorid = "ERRORSTR8";
                    }
                    var loc3:*=0;
                    var loc4:*=strings.string;
                    loc2 = new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@ID == errorid) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    errorstr = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc2.@text);
                    if (notification.getName() != mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL) 
                    {
                        this.showError(errorstr);
                    }
                    else 
                    {
                        this.showError(errorstr, "Info");
                    }
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function get dialogueHandler():mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this.viewComponent as mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
        }

        internal function showError(arg1:*, arg2:String="Error"):void
        {
            var errorDesc:*;
            var dialogueType:String="Error";
            var dependsProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var strings:XML;
            var packetErrorText:String;

            var loc1:*;
            packetErrorText = null;
            errorDesc = arg1;
            dialogueType = arg2;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SET_SYSTEM_ERROR_STATE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
            dependsProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            strings = dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc3:*=0;
            var loc4:*=strings.string;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@ID == "ERRORSTR1") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._message = loc2.@text;
            if (errorDesc is XML) 
            {
                packetErrorText = "";
                if (errorDesc.Response.Error.@text.length() > 0) 
                {
                    packetErrorText = errorDesc.Response.Error.@text;
                }
                if (errorDesc.Response.error.@msg.length() > 0) 
                {
                    packetErrorText = errorDesc.Response.error.@msg;
                }
                if (packetErrorText != "") 
                {
                    this._message = packetErrorText;
                }
            }
            else if (errorDesc is String) 
            {
                if (errorDesc != "") 
                {
                    this._message = errorDesc;
                }
            }
            this._message = this._message.replace(new RegExp("  ", "g"), " ");
            this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            this.dialogueHandler.create(mgs.aurora.modules.core.view.dialogues.ErrorDialogueMediator.DIALOGUE_NAME, dialogueType);
            return;
        }

        internal function onDialogueRemoved(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            if (this.facade.hasMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT, null, mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_ERROR);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            }
            return;
        }

        internal function onDialogueCreated(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            var loc1:*=this.dialogueHandler.dialogue(arg1.diagId);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, this.onDialogueButtonAction);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, this.onDialogueButtonAction);
            loc1.texts.getText("MESS").text = this._message;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CIP] == true) 
            {
                loc1.buttons.hideAll();
            }
            return;
        }

        internal function onDialogueButtonAction(arg1:*):void
        {
            this.dialogueHandler.remove(arg1.diagId);
            return;
        }

        public static const NAME:String="ErrorDialogueMediator";

        public static const DIALOGUE_NAME:String="errorDialogue";

        internal var _message:String="";
    }
}


//              class FunBonusDialogueMediator
package mgs.aurora.modules.core.view.dialogues 
{
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.events.funBonus.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class FunBonusDialogueMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function FunBonusDialogueMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public function get dialogueHandler():mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this.viewComponent as mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_EXPIRY_DIALOGUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_PLAYTIME_DIALOGUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_NOT_ALLOWED_DIALOGUE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var dependsProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var strings:XML;

            var loc1:*;
            notification = arg1;
            dependsProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            strings = dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc2:*=notification.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_EXPIRY_DIALOGUE:
                {
                    var loc3:*=0;
                    var loc4:*=strings.string;
                    loc2 = new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@ID == "FUN_BONUS_EXPIRED_TITLE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._title = loc2.@text;
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "FUN_BONUS_EXPIRED_MESSAGE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._message = loc2.@text;
                    this._doSwitch = true;
                    this.showFunBonusDialogue("Info");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_PLAYTIME_DIALOGUE:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "FUN_BONUS_PLAYTIME_TITLE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._title = loc2.@text;
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "FUN_BONUS_PLAYTIME_MESSAGE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._message = loc2.@text;
                    this._doSwitch = true;
                    this.showFunBonusDialogue("InfoBank");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "INFO_TITLE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._title = loc2.@text;
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "FUN_BONUS_UNAVAILABLE_MESSAGE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "CONTACT_HELP_DESK") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._message = loc2.@text + loc2.@text;
                    this._doSwitch = false;
                    if (notification.getBody() != mgs.aurora.common.events.funBonus.FunBonusEvents.FB_SWITCH_USER) 
                    {
                        if (notification.getBody() != mgs.aurora.common.events.funBonus.FunBonusEvents.FB_CHANGE_BONUS_OFFER_ERROR) 
                        {
                            this.showFunBonusDialogue("Info");
                        }
                        else 
                        {
                            this.showFunBonusDialogue("Info");
                            this._doSwitch = true;
                            this._endBonus = false;
                        }
                    }
                    else 
                    {
                        this.showFunBonusDialogue("Error");
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_NOT_ALLOWED_DIALOGUE:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "INFO_TITLE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._title = loc2.@text;
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "REAL_USERS_ONLY") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "CONTACT_HELP_DESK") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._message = loc2.@text + loc2.@text;
                    this._doSwitch = false;
                    this.showFunBonusDialogue("Info");
                    break;
                }
            }
            return;
        }

        internal function showFunBonusDialogue(arg1:String="Info"):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
            this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            this.dialogueHandler.create(mgs.aurora.modules.core.view.dialogues.FunBonusDialogueMediator.DIALOGUE_NAME, arg1);
            return;
        }

        internal function onDialogueRemoved(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            return;
        }

        internal function onDialogueCreated(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            var loc1:*=this.dialogueHandler.dialogue(arg1.diagId);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, this.onDialogueButtonAction);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, this.onDialogueButtonAction);
            this._title = this._title.replace(new RegExp("  ", "g"), " ");
            this._message = this._message.replace(new RegExp("  ", "g"), " ");
            loc1.title.text = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(this._title);
            loc1.texts.getText("MESS").text = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(this._message);
            return;
        }

        internal function onDialogueButtonAction(arg1:*):void
        {
            if (arg1.control.id.toUpperCase() != "BANK") 
            {
                if (arg1.diagType.toUpperCase() == "ERROR") 
                {
                    if (facade.hasMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)) 
                    {
                        sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT, null, mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_ERROR);
                    }
                    else 
                    {
                        sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
                    }
                }
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_BANK);
            }
            if (this._doSwitch) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST, mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER, mgs.aurora.modules.core.enum.FunBonusEventSource.DIALOGUE);
                if (!(arg1.diagType == "InfoBank") && this._endBonus) 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.END_FUN_BONUS);
                }
                else 
                {
                    this._endBonus = true;
                }
            }
            this.dialogueHandler.remove(arg1.diagId);
            return;
        }

        public static const NAME:String="FunBonusDialogueMediator";

        public static const DIALOGUE_NAME:String="funBonusDialogue";

        internal var _title:String="";

        internal var _message:String="";

        internal var _doSwitch:Boolean=false;

        internal var _endBonus:Boolean=true;
    }
}


//              class InformationDialogueMediator
package mgs.aurora.modules.core.view.dialogues 
{
    import flash.utils.*;
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class InformationDialogueMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function InformationDialogueMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public function get dialogueHandler():mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this.viewComponent as mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            this._stringsXML = loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_CONSECUTIVE_BETS_INFO);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=arg1.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_CONSECUTIVE_BETS_INFO:
                {
                    this.showConsecutiveBetsInfo(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE:
                {
                    loc1 = arg1.getBody() as String;
                    this.showInfoDialogue(loc1);
                    break;
                }
            }
            return;
        }

        internal function showConsecutiveBetsInfo(arg1:Object):void
        {
            var betDesc:Object;
            var betVars:flash.utils.Dictionary;

            var loc1:*;
            betDesc = arg1;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
            betVars = new flash.utils.Dictionary();
            betVars["bets"] = betDesc;
            var loc3:*=0;
            var loc4:*=this._stringsXML.string;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@ID == "CONSECUTIVE_BETS_INFOSTR1") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._informationMessage = mgs.aurora.common.utilities.StringUtils.replaceNamedVars(loc2.@text, betVars);
            if (this._informationMessage != "") 
            {
                this._informationMessage = this._informationMessage.replace(new RegExp("  ", "g"), " ");
            }
            this.showDialogue();
            return;
        }

        internal function showInfoDialogue(arg1:String):void
        {
            var message:String;
            var str:String;

            var loc1:*;
            str = null;
            message = arg1;
            var loc3:*=0;
            var loc4:*=this._stringsXML.string;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@ID == message) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            str = loc2.@text;
            this._informationMessage = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(str);
            this.showDialogue();
            return;
        }

        internal function showDialogue():void
        {
            this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            this.dialogueHandler.create(mgs.aurora.modules.core.view.dialogues.InformationDialogueMediator.DIALOGUE_NAME, "Info");
            return;
        }

        internal function onDialogueRemoved(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            return;
        }

        internal function onDialogueCreated(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            var loc1:*=this.dialogueHandler.dialogue(arg1.diagId);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, this.onDialogueButtonAction);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, this.onDialogueButtonAction);
            loc1.texts.getText("MESS").text = this._informationMessage;
            return;
        }

        internal function onDialogueButtonAction(arg1:*):void
        {
            this.dialogueHandler.remove(arg1.diagId);
            return;
        }

        public static const NAME:String="InformationDialogueMediator";

        public static const DIALOGUE_NAME:String="infoDialogue";

        internal var _informationMessage:String="";

        internal var _stringsXML:XML;
    }
}


//              class StartUpDialogueMediator
package mgs.aurora.modules.core.view.dialogues 
{
    import mgs.aurora.common.events.dialogues.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class StartUpDialogueMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function StartUpDialogueMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_STARTUP_DIALOGUE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_STARTUP_DIALOGUE:
                {
                    this.showStartupDialogue(arg1.getBody() as String);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function get dialogueHandler():mgs.aurora.common.interfaces.dialogues.IDialoguesHandler
        {
            return this.viewComponent as mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
        }

        internal function showStartupDialogue(arg1:String):void
        {
            var gameId:String;
            var startupXml:XML;
            var node:XMLList;
            var len:int;
            var trimmedMessage:String;
            var startPattern:RegExp;
            var endPattern:RegExp;
            var messageLines:Array;
            var i:int;
            var linePattern:RegExp;
            var gameModuleMediator:mgs.aurora.modules.core.view.module.GameModuleMediator;

            var loc1:*;
            startupXml = null;
            node = null;
            len = 0;
            trimmedMessage = null;
            startPattern = null;
            endPattern = null;
            messageLines = null;
            i = 0;
            linePattern = null;
            gameModuleMediator = null;
            gameId = arg1;
            startupXml = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.STARTUP_MESSAGES);
            var loc3:*=0;
            var loc4:*=startupXml.Game;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id.toLowerCase() == gameId.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            node = loc2;
            len = node.length();
            trimmedMessage = "";
            if (len > 1) 
            {
                trimmedMessage = String(node[0].@message);
            }
            else 
            {
                trimmedMessage = String(node.@message);
            }
            if (trimmedMessage != "") 
            {
                startPattern = new RegExp("^[\\s]+", "gi");
                endPattern = new RegExp("[\\s]+$", "gi");
                messageLines = trimmedMessage.split("-L-");
                i = 0;
                while (i < messageLines.length) 
                {
                    messageLines[i] = messageLines[i].replace(startPattern, "");
                    messageLines[i] = messageLines[i].replace(endPattern, "");
                    ++i;
                }
                trimmedMessage = messageLines.join("-L-");
                linePattern = new RegExp("(-L-){2,}$", "gi");
                trimmedMessage = trimmedMessage.replace(linePattern, "-L-");
            }
            this._message = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(trimmedMessage);
            Debugger.trace("START UP " + this._message, "SYSTEM");
            if (this._message == "") 
            {
                gameModuleMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
                gameModuleMediator.dialogueShowing = false;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY);
            }
            else 
            {
                this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
                this.dialogueHandler.addEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
                this.dialogueHandler.create("startUpDialogue", "Info");
            }
            return;
        }

        internal function onDialogueRemoved(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_CREATED, this.onDialogueCreated);
            this.dialogueHandler.removeEventListener(mgs.aurora.common.events.dialogues.DialoguesHandlerEvent.DIALOGUE_REMOVED, this.onDialogueRemoved);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.STARTUP_DIALOGUE_REMOVED);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_READY);
            return;
        }

        internal function onDialogueCreated(arg1:mgs.aurora.common.events.dialogues.DialoguesHandlerEvent):void
        {
            var loc1:*=this.dialogueHandler.dialogue(arg1.diagId);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueMouseEvent.CLICK, this.onDialogueButtonAction);
            loc1.buttons.addEventListener(mgs.aurora.common.events.dialogues.DialogueKeyboardEvent.KEY_UP, this.onDialogueButtonAction);
            loc1.texts.getText("MESS").text = this._message;
            return;
        }

        internal function onDialogueButtonAction(arg1:*):void
        {
            this.dialogueHandler.remove(arg1.diagId);
            return;
        }

        public static const NAME:String="StartUpDialogueMediator";

        internal var _message:String="";
    }
}


//            package frames
//              class FramesBuilderMediator
package mgs.aurora.modules.core.view.frames 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.frame.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.interfaces.controls.*;
    import mgs.aurora.common.interfaces.frames.*;
    import mgs.aurora.common.interfaces.frames.frame.*;
    import mgs.aurora.common.interfaces.frames.frame.assets.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.interfaces.sounds.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.frames.*;
    import mgs.aurora.modules.core.model.api.frames.controls.buttons.*;
    import mgs.aurora.modules.core.model.api.frames.controls.texts.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.module.*;
    import mgs.aurora.modules.core.view.sound.*;
    import mgs.aurora.modules.core.view.vpb.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class FramesBuilderMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.frames.IFrames
    {
        public function FramesBuilderMediator(arg1:Object)
        {
            super(NAME, arg1);
            flash.external.ExternalInterface.addCallback("externalExit", this.externalExit);
            return;
        }

        internal function onBonusBubbleTrigger(arg1:mgs.aurora.common.events.SystemMouseEvent):void
        {
            return;
        }

        internal function onQuickMute(arg1:mgs.aurora.common.events.SystemMouseEvent):void
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.common.events.SystemMouseEvent.CLICK:
                {
                    this.tooltip.remove();
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SOUNDS_UPDATE_MUTE, this.currentFrame.quickMute.state);
                    break;
                }
                case mgs.aurora.common.events.SystemMouseEvent.MOUSE_OVER:
                {
                    if (this.currentFrame.quickMute.state != mgs.aurora.common.enums.frame.QuickMuteFrameLabels.ON) 
                    {
                        if (this.currentFrame.quickMute.state == mgs.aurora.common.enums.frame.QuickMuteFrameLabels.OFF) 
                        {
                            this.tooltip.show(this._quickMuteConfig.@tooltip2);
                        }
                    }
                    else 
                    {
                        this.tooltip.show(this._quickMuteConfig.@tooltip1);
                    }
                    break;
                }
                case mgs.aurora.common.events.SystemMouseEvent.MOUSE_OUT:
                {
                    this.tooltip.remove();
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function onToolTip(arg1:mgs.aurora.common.events.SystemToolTipEvent):void
        {
            return;
        }

        internal function onExternalSiteClicked(arg1:mgs.aurora.common.events.SystemMouseEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXTERNAL, arg1.id);
            return;
        }

        internal function onFrameEvent(arg1:mgs.aurora.common.events.SystemFrameEvents):void
        {
            var loc1:*=facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case mgs.aurora.common.events.SystemFrameEvents.GAME_LAYOUT_CLEARED:
                {
                    mgs.aurora.modules.core.model.api.frames.controls.texts.TextManager(loc1.frames.currentFrame.controls.texts).clearAllControls();
                    mgs.aurora.modules.core.model.api.frames.controls.buttons.ButtonManager(loc1.frames.currentFrame.controls.buttons).clearAllControls();
                    break;
                }
                case mgs.aurora.common.events.SystemFrameEvents.GAME_LAYOUT_COMPLETE:
                {
                    mgs.aurora.modules.core.model.api.frames.Frame(loc1.frames.currentFrame).gamelayoutComplete();
                    break;
                }
                case mgs.aurora.common.events.SystemFrameEvents.FRAME_SWITCH_COMPLETE:
                {
                    if (loc1) 
                    {
                        if (loc1.frames) 
                        {
                            mgs.aurora.modules.core.model.api.frames.Frames(loc1.frames).switchComplete();
                        }
                    }
                    break;
                }
            }
            return;
        }

        internal function onFrameButtonClicked(arg1:mgs.aurora.common.events.SystemMouseEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=arg1.id;
            switch (loc2) 
            {
                case mgs.aurora.common.enums.frame.SystemButtonTypes.HELP:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_HELP_BUTTON, loc1);
                    break;
                }
                case mgs.aurora.common.enums.frame.SystemButtonTypes.BANK:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_BANK, null, mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
                    break;
                }
                case mgs.aurora.common.enums.frame.SystemButtonTypes.EXIT:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_GAME_EXIT, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT);
                    break;
                }
                case mgs.aurora.common.enums.frame.SystemButtonTypes.PLAYFORREAL:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_PLAY_FOR_REAL);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function get bonusBubbleTrigger():flash.display.InteractiveObject
        {
            return this.frames.bonusBubbleTrigger;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            this._dependsProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc3:*=this._dependsProxy.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FONTS);
            var loc4:*=this._dependsProxy.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMELIB);
            var loc5:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMELIB_CONFIG);
            var loc6:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc7:*=mgs.aurora.common.utilities.StringUtils.replaceStringID(this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG), loc6, ["text"]);
            this._theme = loc7.systemFrame.@defaultTheme.toString().toLowerCase();
            this.translateFrameButtons(loc7);
            var loc8:*=mgs.aurora.modules.core.view.sound.SoundEngineMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.sound.SoundEngineMediator.NAME)).sounds;
            var loc9:*;
            var loc10:*=(loc9 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            this.initialize(loc4, loc3, loc5, loc7, loc8, loc10);
            if (this.setFrameType()) 
            {
                this.setExcludeList();
                this.setExternalSites();
                this.setToolTips();
                this.setQuickMute();
                this.setBonusBubble();
                this.setCreditsBoxandInfoBar();
                this.setFrameButtons();
                this.setFrameEvent();
                this.addToContainer(loc2);
            }
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_START_CONNECTION_ANIMATION);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_STOP_CONNECTION_ANIMATION);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW_PLAY_FOR_REAL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_HIDE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_MUTE_ICON_GRAPHIC);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LOCK_ALL_MODULE_BUTTONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UNLOCK_ALL_MODULE_BUTTONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_GAME_LOCKED_ALL_MODULE_BUTTONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_GAME_UNLOCKED_ALL_MODULE_BUTTONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SYSTEM_LOCKED_ALL_MODULE_BUTTONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SYSTEM_UNLOCKED_ALL_MODULE_BUTTONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_MODULE_CHANGED_FRAME);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_FRAME_AFTER_USER_SWITCH);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=arg1.getName();
            switch (loc3) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_START_CONNECTION_ANIMATION:
                {
                    this.startConnectClip();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_STOP_CONNECTION_ANIMATION:
                {
                    this.stopConnectClip();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW_PLAY_FOR_REAL:
                {
                    this.showPlayForReal();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_HIDE:
                {
                    this.show = false;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW:
                {
                    this.show = true;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_MUTE_ICON_GRAPHIC:
                {
                    this.updateMuteIconGraphic(arg1.getBody() as String);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LOCK_ALL_MODULE_BUTTONS:
                {
                    if ((this._gameLockedButtons || this._systemLockedButtons) && !this._buttonsLocked) 
                    {
                        this._buttonsLocked = true;
                        this.lockModuleButtons(arg1.getBody() as Boolean);
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UNLOCK_ALL_MODULE_BUTTONS:
                {
                    if (!(this._gameLockedButtons || this._systemLockedButtons) && this._buttonsLocked) 
                    {
                        this._buttonsLocked = false;
                        this.unLockModuleButtons(arg1.getBody() as Boolean);
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_GAME_LOCKED_ALL_MODULE_BUTTONS:
                {
                    this._gameLockedButtons = true;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_GAME_UNLOCKED_ALL_MODULE_BUTTONS:
                {
                    this._gameLockedButtons = false;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SYSTEM_LOCKED_ALL_MODULE_BUTTONS:
                {
                    this._systemLockedButtons = true;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SYSTEM_UNLOCKED_ALL_MODULE_BUTTONS:
                {
                    this._systemLockedButtons = false;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP:
                {
                    this.tooltip.remove();
                    this._gameLockedButtons = false;
                    this._systemLockedButtons = false;
                    this._buttonsLocked = false;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_MODULE_CHANGED_FRAME:
                {
                    loc1 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
                    loc2 = loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
                    this.setExcludeList();
                    this.setExternalSites();
                    this.setToolTips();
                    this.setQuickMute();
                    this.setBonusBubble();
                    this.setCreditsBoxandInfoBar();
                    this.setFrameButtons();
                    this.setFrameEvent();
                    this.setVBPFrameType();
                    this.addToContainer(loc2);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_FRAME_AFTER_USER_SWITCH:
                {
                    this.updateAfterUserSwitch();
                    this.setCreditsBoxandInfoBar();
                    break;
                }
                default:
                {
                    return;
                }
            }
            return;
        }

        public function get currentFrameType():String
        {
            return this._currentFrameType;
        }

        public function get frames():mgs.aurora.common.interfaces.frames.IFrames
        {
            return this.viewComponent as mgs.aurora.common.interfaces.frames.IFrames;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this.viewComponent as flash.display.DisplayObject;
        }

        public function externalExit():void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_GAME_EXIT, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT);
            return;
        }

        public function set bonusBubbleTrigger(arg1:flash.display.InteractiveObject):void
        {
            this.frames.bonusBubbleTrigger = arg1;
            return;
        }

        public function get currentFrame():mgs.aurora.common.interfaces.frames.frame.IFrame
        {
            return this.frames.currentFrame;
        }

        public function get tooltip():mgs.aurora.common.interfaces.frames.frame.assets.IToolTip
        {
            return this.frames.tooltip;
        }

        public function set excludeList(arg1:__AS3__.vec.Vector.<String>):void
        {
            this.frames.excludeList = arg1;
            return;
        }

        public function get systemButtons():mgs.aurora.common.interfaces.controls.IControlManager
        {
            return this.frames.systemButtons;
        }

        public function get externalSites():mgs.aurora.common.interfaces.frames.frame.assets.IExternalSites
        {
            return this.frames.externalSites;
        }

        public function get clockFeatureOn():Boolean
        {
            return this.frames.clockFeatureOn;
        }

        public function set clockFeatureOn(arg1:Boolean):void
        {
            this.frames.clockFeatureOn = arg1;
            return;
        }

        public function switchTo(arg1:String, arg2:String):void
        {
            this.frames.switchTo(arg1, arg2);
            return;
        }

        public function addToContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this.frames.addToContainer(arg1);
            return;
        }

        public function addToContainerAt(arg1:flash.display.DisplayObjectContainer, arg2:int):void
        {
            this.frames.addToContainerAt(arg1, arg2);
            return;
        }

        public function removeFromContainer():void
        {
            this.frames.removeFromContainer();
            return;
        }

        public function initialize(arg1:flash.display.LoaderInfo, arg2:flash.display.LoaderInfo, arg3:XML, arg4:XML, arg5:mgs.aurora.common.interfaces.sounds.ISounds, arg6:Object):void
        {
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            this.clockFeatureOn = loc1.casino.clock.@showTime == "1";
            this.frames.initialize(arg1, arg2, arg3, arg4, arg5, arg6);
            return;
        }

        public function startConnectClip():void
        {
            this.frames.startConnectClip();
            return;
        }

        public function stopConnectClip():void
        {
            this.frames.stopConnectClip();
            return;
        }

        public function set mute(arg1:int):void
        {
            this.frames.mute = arg1;
            return;
        }

        public function set show(arg1:Boolean):void
        {
            this.frames.show = arg1;
            return;
        }

        public function get theme():String
        {
            return this._theme;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.frames.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.frames.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.frames.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.frames.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.frames.willTrigger(arg1);
        }

        public function switchFrame():void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            if (this.setFrameType()) 
            {
                this.setExcludeList();
                this.setExternalSites();
                this.setToolTips();
                this.setQuickMute();
                this.setBonusBubble();
                this.setCreditsBoxandInfoBar();
                this.setFrameButtons();
                this.setFrameEvent();
                this.setVBPFrameType();
                this.addToContainer(loc2);
            }
            return;
        }

        public function updateAfterUserSwitch():void
        {
            this.frames.updateAfterUserSwitch();
            return;
        }

        internal function translateFrameButtons(arg1:XML):void
        {
            var frameDisplay:XML;
            var buttonsList:XMLList;
            var strings:XML;
            var button:XML;
            var str:String;

            var loc1:*;
            button = null;
            str = null;
            frameDisplay = arg1;
            buttonsList = frameDisplay.systemFrame.button;
            strings = this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc2:*=0;
            var loc3:*=buttonsList;
            for each (button in loc3) 
            {
                var loc5:*=0;
                var loc6:*=strings.string;
                var loc4:*=new XMLList("");
                for each (var loc7:* in loc6) 
                {
                    var loc8:*;
                    with (loc8 = loc7) 
                    {
                        if (@ID == button.@text) 
                        {
                            loc4[loc5] = loc7;
                        }
                    }
                }
                str = mgs.aurora.common.utilities.StringUtils.dialogueStringToHtml(loc4.@text);
                if (str == "") 
                {
                    continue;
                }
                button.@text = str;
            }
            return;
        }

        internal function showPlayForReal():void
        {
            var loc5:*=undefined;
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=int(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]);
            if (loc2 == mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER || loc2 == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
            {
                this.currentFrame.controls.buttons.hideControls(mgs.aurora.common.enums.frame.SystemButtonTypes.PLAYFORREAL);
                return;
            }
            var loc3:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).brandingFiles.playForReal;
            if (int(loc3.@supported) == mgs.aurora.modules.core.enum.PlayForReal.AVAILABLE) 
            {
                if (loc2 == mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER && int(loc3.@demoPlay) == mgs.aurora.modules.core.enum.PlayForReal.PFR_FOR_DEMO_AVAILABLE || loc2 == mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER && int(loc3.@guestPlay) == mgs.aurora.modules.core.enum.PlayForReal.PFR_FOR_GUEST_AVAILABLE) 
                {
                    this.currentFrame.controls.buttons.enableControls(mgs.aurora.common.enums.frame.SystemButtonTypes.PLAYFORREAL);
                    this.currentFrame.controls.buttons.showControls(mgs.aurora.common.enums.frame.SystemButtonTypes.PLAYFORREAL);
                }
            }
            var loc4:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.bank;
            if (loc2 == mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER || loc2 == mgs.aurora.common.enums.raptorSession.UserTypes.GUEST_USER && int(loc4.@allowGuestPurchase) == 0) 
            {
                if ((loc5 = this.currentFrame.controls.buttons.getControl(mgs.aurora.common.enums.frame.SystemButtonTypes.BANK)) != null) 
                {
                    loc5.enabled = false;
                    loc5.excluded = true;
                }
            }
            return;
        }

        internal function lockModuleButtons(arg1:Boolean=true):void
        {
            this.currentFrame.controls.buttons.lockAllControls(arg1);
            return;
        }

        internal function unLockModuleButtons(arg1:Boolean=true):void
        {
            this.currentFrame.controls.buttons.unlockAllControls(arg1);
            return;
        }

        internal function setFrameButtons():void
        {
            this.currentFrame.controls.buttons.addEventListener(mgs.aurora.common.events.SystemMouseEvent.CLICK, this.onFrameButtonClicked);
            return;
        }

        internal function setBonusBubble():void
        {
            this.currentFrame.balanceButton.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OVER, this.onBonusBubbleTrigger);
            this.currentFrame.balanceButton.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OUT, this.onBonusBubbleTrigger);
            return;
        }

        internal function setExcludeList():void
        {
            var loc9:*=null;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=0;
            var loc1:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc2:*=String(loc1.excludedButtons.@ids);
            var loc3:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc4:*=loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.CSVADDBUTTONS, "");
            var loc5:*=loc3.getValue(mgs.aurora.modules.core.enum.JSDataNames.CSVREMOVEBUTTONS, "");
            var loc6:*="";
            if (int(loc1.casino.info.@exitAction) == 0 && loc2.indexOf("EXIT") == -1) 
            {
                loc6 = loc2.length > 0 ? "," : "";
                loc2 = loc2 + (loc6 + "EXIT");
            }
            if (loc4 != "") 
            {
                loc6 = loc2.length > 0 ? "," : "";
                loc2 = loc2 + (loc6 + loc4);
            }
            var loc7:*=new Vector.<String>();
            if (loc2 != "") 
            {
                loc7 = mgs.aurora.common.utilities.StringUtils.csvStringToVectorOfStrings(loc2.toUpperCase());
                if (loc5 != "") 
                {
                    loc11 = loc5.split(",");
                    var loc14:*=0;
                    var loc15:*=loc11;
                    for each (loc12 in loc15) 
                    {
                        loc13 = loc7.lastIndexOf(loc12, 0);
                        loc7.splice(loc13, 1);
                    }
                }
            }
            var loc8:*=new Vector.<String>();
            loc14 = 0;
            loc15 = loc7;
            for each (loc9 in loc15) 
            {
                loc8.push(mgs.aurora.common.enums.frame.SystemButtonTypes[loc9.toUpperCase()]);
            }
            (loc10 = mgs.aurora.modules.core.model.BankingProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME))).bankButtonExcluded = !(loc7.indexOf("BANK") == -1);
            this.excludeList = loc8;
            return;
        }

        internal function setFrameType():Boolean
        {
            var sessionConfig:Object;
            var gameid:String;
            var theme:String;
            var gameSetProxy:mgs.aurora.modules.core.model.GameSetProxy;
            var artNode:XMLList;
            var frame:String;

            var loc1:*;
            gameSetProxy = null;
            artNode = null;
            frame = null;
            sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            gameid = sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID];
            theme = this._theme;
            if (this.facade.hasProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)) 
            {
                gameSetProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
                if (gameSetProxy.getData() != null) 
                {
                    var loc3:*=0;
                    var loc4:*=gameSetProxy.gameSet.art;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@id == gameid) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    artNode = loc2;
                    if (artNode.hasOwnProperty("@frame")) 
                    {
                        if (artNode.hasOwnProperty("@frameTheme")) 
                        {
                            theme = artNode.@frameTheme.toString().toLowerCase();
                        }
                        frame = artNode.@frame == undefined ? "default" : artNode.@frame.toString();
                        this._currentFrameType = frame;
                        this.switchTo(this._currentFrameType, theme);
                        return true;
                    }
                }
            }
            return false;
        }

        internal function setExternalSites():void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).externalSites;
            var loc2:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc5:*=0;
            var loc6:*=loc1.site;
            for each (loc3 in loc6) 
            {
                mgs.aurora.common.utilities.StringUtils.replaceStringID(loc3, loc2, ["tooltip"]);
            }
            loc4 = mgs.aurora.common.interfaces.loader.IDependenciesConfig(facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesSetupProxy.NAME));
            this.currentFrame.externalSitesManager.configuration(new XML(loc1), loc4);
            this.currentFrame.externalSitesManager.addEventListener(mgs.aurora.common.events.SystemMouseEvent.CLICK, this.onExternalSiteClicked);
            return;
        }

        internal function setVBPFrameType():void
        {
            var loc1:*=facade.retrieveMediator(mgs.aurora.modules.core.view.vpb.VirtualPitBossMediator.NAME) as mgs.aurora.modules.core.view.vpb.VirtualPitBossMediator;
            if (loc1 != null) 
            {
                loc1.setFrameType(this._currentFrameType);
            }
            return;
        }

        internal function setToolTips():void
        {
            var loc1:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).ToolTipConfig;
            this.currentFrame.tooltip.configuration(new XML(loc1));
            this.currentFrame.tooltip.addEventListener(mgs.aurora.common.events.SystemToolTipEvent.SHOWING, this.onToolTip);
            this.currentFrame.tooltip.addEventListener(mgs.aurora.common.events.SystemToolTipEvent.REMOVED, this.onToolTip);
            return;
        }

        internal function setQuickMute():void
        {
            this.updateMuteIconGraphic();
            var loc1:*=this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            this._quickMuteConfig = new XML(this._dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG).quickMute);
            this._quickMuteConfig = mgs.aurora.common.utilities.StringUtils.replaceStringID(this._quickMuteConfig, loc1, ["tooltip1", "tooltip2"]);
            this.currentFrame.quickMute.addEventListener(mgs.aurora.common.events.SystemMouseEvent.CLICK, this.onQuickMute);
            this.currentFrame.quickMute.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OVER, this.onQuickMute);
            this.currentFrame.quickMute.addEventListener(mgs.aurora.common.events.SystemMouseEvent.MOUSE_OUT, this.onQuickMute);
            return;
        }

        internal function setFrameEvent():void
        {
            flash.events.IEventDispatcher(this.frames.currentFrame).addEventListener(mgs.aurora.common.events.SystemFrameEvents.GAME_LAYOUT_CLEARED, this.onFrameEvent);
            flash.events.IEventDispatcher(this.frames.currentFrame).addEventListener(mgs.aurora.common.events.SystemFrameEvents.GAME_LAYOUT_COMPLETE, this.onFrameEvent);
            flash.events.IEventDispatcher(this.frames.currentFrame).addEventListener(mgs.aurora.common.events.SystemFrameEvents.FRAME_SWITCH_COMPLETE, this.onFrameEvent);
            return;
        }

        internal function updateMuteIconGraphic(arg1:String=null):void
        {
            var loc4:*=null;
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc2:*=loc1.getValue(mgs.aurora.modules.core.enum.JSDataNames.REVERSE_PROXY) != "1" ? loc1.getValue(mgs.aurora.modules.core.enum.JSDataNames.BASEURL) : null;
            var loc3:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (arg1 != null) 
            {
                if (arg1 != "1") 
                {
                    this.currentFrame.quickMute.on();
                }
                else 
                {
                    this.currentFrame.quickMute.off();
                }
                loc3[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND] = arg1;
                mgs.aurora.common.utilities.FlashStorage.saveData(mgs.aurora.modules.core.enum.SystemStoreNames.STORAGE_NAME_SOUND, mgs.aurora.modules.core.enum.SystemStoreNames.KEY_NAME_SOUND_MUTE, arg1, loc2);
            }
            else 
            {
                if ((loc4 = mgs.aurora.common.utilities.FlashStorage.loadData(mgs.aurora.modules.core.enum.SystemStoreNames.STORAGE_NAME_SOUND, mgs.aurora.modules.core.enum.SystemStoreNames.KEY_NAME_SOUND_MUTE, loc2)) != "1") 
                {
                    this.currentFrame.quickMute.on();
                }
                else 
                {
                    this.currentFrame.quickMute.off();
                }
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_TOPBAR_SOUND, loc4);
            }
            return;
        }

        internal function setCreditsBoxandInfoBar():void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_AFTER_SWITCH);
            return;
        }

        public static const NAME:String="FramesBuilderMediator";

        internal var _dependsProxy:mgs.aurora.modules.core.model.DependenciesProxy;

        internal var _currentFrameType:String;

        internal var _quickMuteConfig:XML;

        internal var _gameLockedButtons:Boolean=false;

        internal var _systemLockedButtons:Boolean=false;

        internal var _buttonsLocked:Boolean=false;

        internal var _theme:String;
    }
}


//            package login
//              class RaptorSessionMediator
package mgs.aurora.modules.core.view.login 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.raptorSessions.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.raptorSessions.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class RaptorSessionMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.raptorSessions.ILegacyRaptorSession
    {
        public function RaptorSessionMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._legacyLogin = this.viewComponent as mgs.aurora.common.interfaces.raptorSessions.ILegacyRaptorSession;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP:
                {
                    this.setup();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN:
                {
                    this.doLogin();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD:
                {
                    this.doChangePassword();
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function initialize(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler):void
        {
            this._legacyLogin.initialize(arg1, arg2);
            return;
        }

        public function attemptLogin(arg1:Object):void
        {
            this._legacyLogin.attemptLogin(arg1);
            return;
        }

        public function attemptChangePassword(arg1:Object):void
        {
            this._legacyLogin.attemptChangePassword(arg1);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._legacyLogin.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._legacyLogin.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._legacyLogin.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._legacyLogin.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._legacyLogin.willTrigger(arg1);
        }

        public function get sessionConfig():Object
        {
            return this._sessionConfig;
        }

        internal function setup():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc2:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc3.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            this._sessionConfig = loc2;
            this.initialize(loc4, this._dialogueHandler);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LOGIN_SUCCESSFULL, this.onSuccessfullLogin);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.ERROR, this.onLoginError);
            this.addEventListener(mgs.aurora.common.events.SystemPreloaderEvent.HIDE, this.onPreloaderEvent);
            this.addEventListener(mgs.aurora.common.events.SystemPreloaderEvent.SHOW, this.onPreloaderEvent);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_ORL, this.onLaunchOLR);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_FORGOTPASSWORD, this.onLaunchForgotPassword);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.EXIT, this.onExit);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_BRANDMIGRATION, this.onLaunchBrandMigration);
            return;
        }

        internal function doLogin():void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=mgs.aurora.common.utilities.FlashStorage.loadData("login", "autologin", "/");
            if (!(loc2 == null) && !(loc2 == "")) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.AUTOLOGIN] = loc2;
            }
            if (mgs.aurora.common.utilities.StringUtils.stringToBoolean(loc2)) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME];
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SID3];
            }
            this.attemptLogin(loc1);
            return;
        }

        internal function doChangePassword():void
        {
            this.attemptChangePassword(this.sessionConfig);
            return;
        }

        internal function onSuccessfullLogin(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN] = true;
            this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME] = String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SID3] = String(this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD]);
            Debugger.trace("onSuccessfullLogin : " + this.sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE], "SYSTEM");
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOGGED_IN);
            return;
        }

        internal function onPreloaderEvent(arg1:mgs.aurora.common.events.SystemPreloaderEvent):void
        {
            return;
        }

        internal function onLoginError(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=arg1.dynamicData as XML;
            var loc2:*=int(loc1.Response.Error.@servercode);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR, loc1);
            if (loc2 == mgs.aurora.modules.core.view.login.RaptorSessionMediator.CODE_PASSWORD_INCORRECT) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, loc2 + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.SERVER);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO, null, mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR);
            }
            return;
        }

        internal function onLaunchOLR(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchOLR(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchBrandMigration(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_STATUS] != "0") 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_MIGRATION_ACCOUNT_LOGIN);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_WITH_MIGRATION);
            }
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchBrandMigration();
            return;
        }

        internal function onLaunchForgotPassword(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchForgotPassword(arg1.dynamicData as String);
            return;
        }

        internal function onExit(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            return;
        }

        public static const NAME:String="RaptorSessionMediator";

        public static const CODE_PASSWORD_INCORRECT:int=100;

        internal var _sessionConfig:Object;

        internal var _legacyLogin:mgs.aurora.common.interfaces.raptorSessions.ILegacyRaptorSession;

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
    }
}


//              class SGIRaptorSessionMediator
package mgs.aurora.modules.core.view.login 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.events.raptorSessions.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.raptorSessions.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class SGIRaptorSessionMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.raptorSessions.ISgiRaptorSession
    {
        public function SGIRaptorSessionMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._sgi = this.viewComponent as mgs.aurora.common.interfaces.raptorSessions.ISgiRaptorSession;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_LOGOUT);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP:
                {
                    this.setup();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN:
                {
                    this.doLogin();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_LOGOUT:
                {
                    this.doLogout();
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function initialize(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler):void
        {
            this._sgi.initialize(arg1, arg2);
            return;
        }

        public function attemptLogin(arg1:Object):void
        {
            this._sgi.attemptLogin(arg1);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._sgi.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._sgi.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._sgi.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._sgi.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._sgi.willTrigger(arg1);
        }

        internal function setup():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            this._sessionConfig = loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc3:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc2.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            this.initialize(loc3, this._dialogueHandler);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LOGIN_SUCCESSFULL, this.onLoginSuccess);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LOGOUT_SUCCESSFULL, this.onLogoutSuccess);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.ERROR, this.onLoginError);
            return;
        }

        internal function doLogin():void
        {
            var loc1:*=null;
            if (this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SGI_LOGINTYPE] != "DEMO") 
            {
                loc1 = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.REAL_SERVERID]);
            }
            else 
            {
                loc1 = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.DEMO_SERVERID]);
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SET_SERVERID, loc1);
            this.attemptLogin(this._sessionConfig);
            return;
        }

        public function doLogout():void
        {
            this._sgi.doLogout();
            return;
        }

        internal function onLoginSuccess(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN] = true;
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME] = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME]);
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SID3] = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD]);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOGIN_SUCCESSFULLY_COMPLETED);
            return;
        }

        internal function onLogoutSuccess(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOGOUT_SUCCESSFULLY_COMPLETED);
            return;
        }

        internal function onLoginError(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=arg1.dynamicData as XML;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR, loc1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO, null, mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            return;
        }

        public static const NAME:String="SGIRaptorSessionMediator";

        internal var _sessionConfig:Object;

        internal var _sgi:mgs.aurora.common.interfaces.raptorSessions.ISgiRaptorSession;

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
    }
}


//              class UPEFRaptorSessionMediator
package mgs.aurora.modules.core.view.login 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.raptorSessions.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.raptorSessions.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class UPEFRaptorSessionMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.raptorSessions.IUPEFullLoginRaptorSession
    {
        public function UPEFRaptorSessionMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._upef = this.viewComponent as mgs.aurora.common.interfaces.raptorSessions.IUPEFullLoginRaptorSession;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP:
                {
                    this.setup();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN:
                {
                    this.doLogin();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD:
                {
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function get upef():mgs.aurora.common.interfaces.raptorSessions.IUPEFullLoginRaptorSession
        {
            return this._upef;
        }

        public function initialize(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler):void
        {
            this.upef.initialize(arg1, arg2);
            return;
        }

        public function attemptLogin(arg1:Object):void
        {
            this.upef.attemptLogin(arg1);
            return;
        }

        public function attemptChangePassword(arg1:Object):void
        {
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.upef.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.upef.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.upef.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.upef.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.upef.willTrigger(arg1);
        }

        internal function setup():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc2:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc3.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            this._sessionConfig = loc2;
            this.initialize(loc4, this._dialogueHandler);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LOGIN_SUCCESSFULL, this.onSuccessfullLogin);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.ERROR, this.onLoginError);
            this.addEventListener(mgs.aurora.common.events.SystemPreloaderEvent.HIDE, this.onPreloaderEvent);
            this.addEventListener(mgs.aurora.common.events.SystemPreloaderEvent.SHOW, this.onPreloaderEvent);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_ORL, this.onLaunchOLR);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_FORGOTPASSWORD, this.onLaunchForgotPassword);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_HELP, this.onLaunchHelp);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_MIGRATE, this.onLaunchMigrate);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_BRANDMIGRATION, this.onLaunchBrandMigration);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.EXIT, this.onExit);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.SESSION_CREATED, this.onSessionCreated);
            return;
        }

        internal function doLogin():void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=mgs.aurora.common.utilities.FlashStorage.loadData("login", "autologin", "/");
            if (!(loc2 == null) && !(loc2 == "")) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.AUTOLOGIN] = loc2;
            }
            if (mgs.aurora.common.utilities.StringUtils.stringToBoolean(loc2)) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME];
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SID3];
            }
            this.attemptLogin(this._sessionConfig);
            return;
        }

        internal function onSessionCreated(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_SESSIONTIMER);
            return;
        }

        internal function onSuccessfullLogin(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN] = true;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOGGED_IN, this._sessionConfig);
            return;
        }

        internal function onPreloaderEvent(arg1:mgs.aurora.common.events.SystemPreloaderEvent):void
        {
            return;
        }

        internal function onLoginError(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=arg1.dynamicData as XML;
            var loc2:*=int(loc1.Response.Error.@servercode);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR, loc1);
            if (loc2 == mgs.aurora.modules.core.view.login.RaptorSessionMediator.CODE_PASSWORD_INCORRECT) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, loc2 + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.SERVER);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO, null, mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR);
            }
            return;
        }

        internal function onLaunchOLR(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchOLR(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchForgotPassword(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchForgotPassword(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchHelp(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchHelp(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchMigrate(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchMigrate();
            return;
        }

        internal function onLaunchBrandMigration(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_STATUS] != "0") 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_MIGRATION_ACCOUNT_LOGIN);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_WITH_MIGRATION);
            }
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchBrandMigration();
            return;
        }

        internal function onExit(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            return;
        }

        public static const NAME:String="UPEFRaptorSessionMediator";

        internal var _upef:mgs.aurora.common.interfaces.raptorSessions.IUPEFullLoginRaptorSession;

        internal var _sessionConfig:Object;

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
    }
}


//              class UPEIRaptorSessionMediator
package mgs.aurora.modules.core.view.login 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.raptorSessions.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.raptorSessions.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class UPEIRaptorSessionMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.raptorSessions.IUPEInterimLoginRaptorSession
    {
        public function UPEIRaptorSessionMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._upei = this.viewComponent as mgs.aurora.common.interfaces.raptorSessions.IUPEInterimLoginRaptorSession;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP:
                {
                    this.setup();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN:
                {
                    this.doLogin();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_CHANGE_PASSWORD:
                {
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function get upei():mgs.aurora.common.interfaces.raptorSessions.IUPEInterimLoginRaptorSession
        {
            return this._upei;
        }

        public function initialize(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler):void
        {
            this.upei.initialize(arg1, arg2);
            return;
        }

        public function attemptLogin(arg1:Object):void
        {
            this.upei.attemptLogin(arg1);
            return;
        }

        public function attemptChangePassword(arg1:Object):void
        {
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.upei.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.upei.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.upei.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.upei.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.upei.willTrigger(arg1);
        }

        internal function setup():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc2:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc3:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc3.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            this._sessionConfig = loc2;
            this.initialize(loc4, this._dialogueHandler);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LOGIN_SUCCESSFULL, this.onSuccessfullLogin);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.ERROR, this.onLoginError);
            this.addEventListener(mgs.aurora.common.events.SystemPreloaderEvent.HIDE, this.onPreloaderEvent);
            this.addEventListener(mgs.aurora.common.events.SystemPreloaderEvent.SHOW, this.onPreloaderEvent);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_ORL, this.onLaunchOLR);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_FORGOTPASSWORD, this.onLaunchForgotPassword);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_HELP, this.onLaunchHelp);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_MIGRATE, this.onLaunchMigrate);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LAUNCH_BRANDMIGRATION, this.onLaunchBrandMigration);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.EXIT, this.onExit);
            return;
        }

        internal function doLogin():void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=mgs.aurora.common.utilities.FlashStorage.loadData("login", "autologin", "/");
            if (!(loc2 == null) && !(loc2 == "")) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.AUTOLOGIN] = loc2;
            }
            if (mgs.aurora.common.utilities.StringUtils.stringToBoolean(loc2)) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME];
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD] = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SID3];
            }
            this.attemptLogin(this._sessionConfig);
            return;
        }

        internal function onSuccessfullLogin(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN] = true;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOGGED_IN, this._sessionConfig);
            return;
        }

        internal function onPreloaderEvent(arg1:mgs.aurora.common.events.SystemPreloaderEvent):void
        {
            return;
        }

        internal function onLoginError(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=arg1.dynamicData as XML;
            var loc2:*=int(loc1.Response.Error.@servercode);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR, loc1);
            if (loc2 == mgs.aurora.modules.core.view.login.RaptorSessionMediator.CODE_PASSWORD_INCORRECT) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, loc2 + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.SERVER);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO, null, mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR);
            }
            return;
        }

        internal function onLaunchOLR(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchOLR(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchForgotPassword(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchForgotPassword(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchHelp(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchHelp(arg1.dynamicData as String);
            return;
        }

        internal function onLaunchMigrate(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchMigrate();
            return;
        }

        internal function onLaunchBrandMigration(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.MIGRATION_STATUS] != "0") 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_MIGRATION_ACCOUNT_LOGIN);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_WITH_MIGRATION);
            }
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.launchBrandMigration();
            return;
        }

        internal function onExit(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            return;
        }

        public static const NAME:String="UPEIRaptorSessionMediator";

        internal var _upei:mgs.aurora.common.interfaces.raptorSessions.IUPEInterimLoginRaptorSession;

        internal var _sessionConfig:Object;

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
    }
}


//              class VanGuardRaptorSessionMediator
package mgs.aurora.modules.core.view.login 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.funBonus.*;
    import mgs.aurora.common.events.raptorSessions.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.raptorSessions.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class VanGuardRaptorSessionMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.raptorSessions.IVanguardRaptorSession
    {
        public function VanGuardRaptorSessionMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._vanguard = this.viewComponent as mgs.aurora.common.interfaces.raptorSessions.IVanguardRaptorSession;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.INVOKE_USERTYPE_SWITCH);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
            var loc3:*=arg1.getName();
            switch (loc3) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_SETUP:
                {
                    this.setup();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN:
                {
                    this.doLogin();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST:
                {
                    loc1.userTypeToSwitchTo = uint(arg1.getBody());
                    loc1.userTypeSwitchSource = arg1.getType();
                    loc2 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    if (loc1.userTypeToSwitchTo == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS && loc2[mgs.aurora.common.enums.configMapping.SessionConfig.GAME_IS_PROGRESSIVE] == true) 
                    {
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_NOT_ALLOWED_DIALOGUE);
                    }
                    else 
                    {
                        this.switchUserType(loc1.userTypeToSwitchTo);
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.INVOKE_USERTYPE_SWITCH:
                {
                    if (loc1.userTypeSwitchRequested || this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] == 1) 
                    {
                        loc1.userTypeSwitchRequested = false;
                        loc1.userTypeSwitchInProgress = true;
                        this._vanguard.switchUserType(loc1.userTypeToSwitchTo);
                    }
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function initialize(arg1:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg2:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler):void
        {
            this._vanguard.initialize(arg1, arg2);
            return;
        }

        public function postGenieStepForSwitch(arg1:String, arg2:uint):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GenieStepsProxy.NAME) as mgs.aurora.modules.core.model.GenieStepsProxy).stepId(mgs.aurora.modules.core.enum.GenieStepIdNames.FUN_BONUS_MODE_SWITCH);
            if (loc1 != "") 
            {
                loc2 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                (loc3 = new flash.utils.Dictionary()).stepId = loc1;
                loc4 = "";
                var loc5:*=arg2;
                switch (loc5) 
                {
                    case mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER:
                    {
                        loc4 = "Real";
                        break;
                    }
                    case mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS:
                    {
                        loc4 = "Fun";
                        break;
                    }
                    default:
                    {
                        loc4 = arg2.toString();
                    }
                }
                loc3.stepRef = loc4 + "|" + arg1;
                loc3.playerLoginName = String(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.SUSERNAME]);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GENERIC_STEP, loc3);
            }
            return;
        }

        public function switchUserType(arg1:uint):void
        {
            var loc1:*=mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
            loc1.userTypeSwitchRequested = true;
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH] = true;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_SHOW_OVERLAY, arg1);
            this.postGenieStepForSwitch(loc1.userTypeSwitchSource, arg1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, new mgs.aurora.modules.core.model.vo.SwitchModuleParams(uint(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID]), uint(this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID])));
            return;
        }

        public function attemptLogin(arg1:Object):void
        {
            this._vanguard.attemptLogin(arg1);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._vanguard.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._vanguard.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._vanguard.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._vanguard.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._vanguard.willTrigger(arg1);
        }

        internal function setup():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            this._sessionConfig = loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc3:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc2.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            this.initialize(loc3, this._dialogueHandler);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.LOGIN_SUCCESSFULL, this.onLoginSuccess);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.ERROR, this.onLoginError);
            this.addEventListener(mgs.aurora.common.events.raptorSessions.RaptorSessionEvent.SWITCH_USER_CANCELLED, this.onSwitchCancel);
            return;
        }

        internal function doLogin():void
        {
            this.attemptLogin(this._sessionConfig);
            return;
        }

        internal function onSwitchCancel(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            if (this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LAUNCH_IN_FUNMODE] == 1) 
            {
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GET_PLAYER_INFORMATION);
            }
            else 
            {
                this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH] = true;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE, mgs.aurora.common.events.funBonus.FunBonusEvents.FB_SWITCH_USER);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_SHOW_OVERLAY, mgs.aurora.common.events.funBonus.FunBonusEvents.FB_SWITCH_USER);
            }
            return;
        }

        internal function onLoginSuccess(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
            if (loc1.userTypeSwitchInProgress && this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS && loc1.userTypeSwitchSource == mgs.aurora.modules.core.enum.FunBonusEventSource.RMM) 
            {
                loc2 = mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
                loc2.launchFunBonusTutorial(mgs.aurora.modules.core.enum.FunBonusEventSource.RMM);
            }
            if (this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
            {
                this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.FBUSERNAME] = this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME];
            }
            loc1.userTypeSwitchSource = "";
            loc1.userTypeSwitchInProgress = false;
            this._sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN] = true;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOGGED_IN, this._sessionConfig);
            return;
        }

        internal function onLoginError(arg1:mgs.aurora.common.events.raptorSessions.RaptorSessionEvent):void
        {
            var loc1:*=arg1.dynamicData as XML;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_LOGIN_ERROR, loc1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_GENERIC_INFO, null, mgs.aurora.modules.core.notifications.CoreNotifications.METRIC_LOGIN_ERROR);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            return;
        }

        public static const NAME:String="VanGuardMediator";

        internal var _sessionConfig:Object;

        internal var _vanguard:mgs.aurora.common.interfaces.raptorSessions.IVanguardRaptorSession;

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
    }
}


//            package magneto
//              class MagnetoMediator
package mgs.aurora.modules.core.view.magneto 
{
    import flash.display.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.enums.magneto.*;
    import mgs.aurora.common.events.magneto.*;
    import mgs.aurora.common.interfaces.magneto.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class MagnetoMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function MagnetoMediator(arg1:mgs.aurora.common.interfaces.magneto.IMagneto)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            var loc3:*=facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc4:*=loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            this.magneto.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.DATA, this.onData, false, 0, true);
            this.magneto.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.CONNECTED, this.onConnected, false, 0, true);
            this.magneto.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.ERROR, this.onError, false, 0, true);
            this.magneto.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.POLICY_ERROR, this.onPolicyError, false, 0, true);
            this.magneto.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.CLOSED, this.onClosed, false, 0, true);
            this.magneto.setup(XML(loc4.mpf));
            return;
        }

        internal function onClosed(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            Debugger.trace("MPF Connection Close - " + arg1.socketId, "SYSTEM - Core MPF");
            return;
        }

        internal function onPolicyError(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            Debugger.trace("MPF Socket Policy Error", "SYSTEM - Core MPF");
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            if (arg1.socketId == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY && loc1.isLobbyConnectionRequired || arg1.socketId == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER && loc1.isRouterConnectionRequired) 
            {
                this.displayConnectionError();
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.MPF_SOCKET_POLICY_ERROR + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
            }
            return;
        }

        internal function displayConnectionError():void
        {
            var loc1:*=mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
            if (!this.connectionError && loc1.loggedIn) 
            {
                this.connectionError = true;
                facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL, "ERRORSTR1");
            }
            return;
        }

        internal function onError(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            Debugger.trace("MPF Socket Connection Error", "SYSTEM - Core MPF");
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            if (arg1.socketId == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY && loc1.isLobbyConnectionRequired || arg1.socketId == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER && loc1.isRouterConnectionRequired) 
            {
                this.displayConnectionError();
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.MPF_SOCKET_CONNECTION_ERROR + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
            }
            return;
        }

        internal function onConnected(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            Debugger.trace("MPF Connection Success - " + arg1.socketId, "SYSTEM - Core MPF");
            return;
        }

        internal function onData(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            return loc1;
        }

        internal function get magneto():mgs.aurora.common.interfaces.magneto.IMagneto
        {
            return getViewComponent() as mgs.aurora.common.interfaces.magneto.IMagneto;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }

        public static const NAME:String="MagnetoMediator";

        public var connectionError:Boolean=false;
    }
}


//            package marketManager
//              class MarketManagerMediator
package mgs.aurora.modules.core.view.marketManager 
{
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.marketManager.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.currency.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.common.interfaces.marketManager.*;
    import mgs.aurora.common.interfaces.strings.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.api.banking.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class MarketManagerMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.marketManager.IMarketManager
    {
        public function MarketManagerMediator(arg1:Object)
        {
            super(NAME, arg1);
            flash.external.ExternalInterface.addCallback("attemptLogoutCloseGame", this.onAttemptLogoutCloseGame);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.iMarketManager.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.iMarketManager.hasEventListener(arg1);
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.iMarketManager.willTrigger(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.iMarketManager.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.iMarketManager.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this._marketManageri = this.viewComponent as mgs.aurora.common.interfaces.marketManager.IMarketManager;
            var loc1:*=facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            this.intialized();
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_DO_LOGIN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOGGED_IN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOAD_GAME);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_GAME_EXIT);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_HELP_BUTTON);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_BANK_BUTTON);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_RETURN_FROM_BANK);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SESSIONTIMEOUT);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_ERROR);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SYSTEM_UPDATE_BALANCE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            Debugger.trace("MARKET MEDIATOR handleNotification : " + arg1.getName(), "SYSTEM");
            var loc4:*=arg1.getName();
            switch (loc4) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_DO_LOGIN:
                {
                    Debugger.trace("CoreNotifications.MARKET_DO_LOGIN ", "SYSTEM");
                    this.sendLoginRequest(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOGGED_IN:
                {
                    this.loggedInSuccessFull(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_LOAD_GAME:
                {
                    this.loadGameModule(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_GAME_EXIT:
                {
                    this._exitMethod = arg1.getType();
                    Debugger.trace("[MarketManagerMediator] MARKET_GAME_EXIT : " + this._exitMethod, "SYSTEM - ITALIANMARKET");
                    this.exitGameModule(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_HELP_BUTTON:
                {
                    this.helpButtonPressed(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_RETURN_FROM_BANK:
                {
                    this.returnFromBank(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_BANK_BUTTON:
                {
                    this.bankButtonPressed(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SESSIONTIMEOUT:
                {
                    this.casinoTimeout(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_ERROR:
                {
                    loc1 = arg1.getType();
                    Debugger.trace("errorType : " + loc1, "SYSTEM - ERROR");
                    loc4 = loc1;
                    switch (loc4) 
                    {
                        case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE:
                        case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE:
                        {
                            loc2 = arg1.getBody() as XML;
                            this._errorObject = {"bodyType":"XML", "body":loc2, "eventType":loc1};
                            Debugger.trace("bodyXML : " + loc2, "SYSTEM - ERROR");
                            break;
                        }
                        case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL:
                        case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL:
                        {
                            loc3 = arg1.getBody() as String;
                            this._errorObject = {"bodyType":"String", "body":loc3, "eventType":loc1};
                            Debugger.trace("bodyXML : " + loc3, "SYSTEM - ERROR");
                            break;
                        }
                    }
                    Debugger.trace(this._errorObject, "SYSTEM - ERROR");
                    this.showErrorDialog(this._errorObject);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SYSTEM_UPDATE_BALANCE:
                {
                    this.balanceUpdated(arg1.getBody());
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function get iMarketManager():mgs.aurora.common.interfaces.marketManager.IMarketManager
        {
            return this._marketManageri;
        }

        internal function intialized():void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            this._dialogueHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            var loc3:*=facade.retrieveProxy(mgs.aurora.modules.core.model.StringsProxy.NAME) as mgs.aurora.common.interfaces.strings.ILanguageStrings;
            var loc4:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc5:*;
            (loc5 = new flash.utils.Dictionary())[mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION] = loc4.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc5[mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.XMAN] = loc4.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.XMAN);
            loc5[mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.VPB] = loc4.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.VPB);
            var loc6:*=mgs.aurora.modules.core.model.CurrenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME)).currenciesInfo;
            loc5["currencies"] = loc6;
            loc5["regMarketId"] = loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).RegulatedMarket.@id;
            loc5["dependancies"] = mgs.aurora.common.interfaces.loader.IDependenciesConfig(facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesSetupProxy.NAME));
            this.setup(this._dialogueHandler, loc2, loc3, loc5);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.SYSTEM_LOADED, this.onSystemLoadedReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.SHOW_LOGIN_DIALOG, this.onLoginDialogReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.SEND_LOGIN_REQUEST, this.onSendLoginRequestReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.LOGIN_SUCCESSFULL, this.onLoginSuccessfulReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.LOAD_GAME_MODULE, this.onLoadGameModuleReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.EXIT_GAME_MODULE, this.onExitGameModuleReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.SWITCH_USER_TYPE, this.onSwitchUserType);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.SHOW_ERROR_DIALOG, this.onShowErrorDialogReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.CASINO_TIME_OUT, this.onCasinoTimeoutReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.BANK_BUTTON_PRESSED, this.onBankButtonPressedReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.RETURN_FROM_BANK, this.onReturnFromBankReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.HELP_BUTTON_PRESSED, this.onHelpButtonPressedReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.UPDATE_BONUS_BUBBLE_FEATURES, this.onUpdateBonusBubbleFeatures);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.BALANCE_UPDATED, this.onBalanceUpdatedReturn);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.EXIT_SYSTEM_REQUEST, this.onExitSystem);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.UPDATE_XMAN_CONFIG, this.onUpdateXmanConfig);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.LAUNCH_EXTERNAL_SITE, this.onExternalSiteLaunch);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.LAUNCH_OLR, this.onExternalOLRLaunch);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.SET_EXTERNAL_LAUNCH_VARS, this.onSetExternalLaunchVars);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.INTERNAL_ERROR, this.onInternalError);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.ENABLE_VPB, this.onEnableVPB);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.DISABLE_VPB, this.onDisableVPB);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.START_XMAN_SESSION, this.onStartXmanSession);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.GENIE_CASINO_ERROR, this.onGenieCasinoError);
            this.addEventListener(mgs.aurora.common.events.marketManager.MarketManagerEvent.NOTIFY_GAME_BALANCE_CHANGE, this.onNotifyGameBalanceChange);
            this.addEventListener(mgs.aurora.common.events.PacketErrorEvent.FATAL, this.onPacketError);
            return;
        }

        internal function onPacketError(arg1:mgs.aurora.common.events.PacketErrorEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, arg1.packet, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            return;
        }

        internal function onExternalSiteLaunch(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=arg1.data as XMLList;
            var loc2:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            loc2.launchOtherInternalSite(loc1);
            return;
        }

        internal function onExternalOLRLaunch(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc1.launchOLR("real");
            return;
        }

        internal function onSetExternalLaunchVars(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            loc1.setProperties(arg1.data);
            return;
        }

        internal function onSystemLoadedReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOGIN_PROCESS);
            return;
        }

        internal function onSendLoginRequestReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RAPTOR_SESSION_ATTEMPT_LOGIN);
            return;
        }

        internal function onLoginSuccessfulReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOGIN_SUCCESSFULLY_COMPLETED);
            return;
        }

        internal function onLoadGameModuleReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOAD_GAME_MODULE);
            return;
        }

        internal function onExitGameModuleReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=null;
            if (this._exitMethod == mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT) 
            {
                loc1 = mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
                loc1.serviceID = "";
                loc1.curTournamentID = "";
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT, null, mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_USER_DECISION);
            }
            else 
            {
                sendNotification(this._exitMethod);
            }
            return;
        }

        internal function onSwitchUserType(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=0;
            var loc2:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc2[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] != mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
            {
                loc1 = mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER;
            }
            else 
            {
                loc1 = mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS;
            }
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST, loc1, mgs.aurora.modules.core.enum.FunBonusEventSource.MARKET_MANAGER);
            return;
        }

        internal function onExitSystem(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            if (facade.hasMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)) 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT, null, mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_ERROR);
            }
            else 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            }
            return;
        }

        internal function onUpdateXmanConfig(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_UPDATE_TIMER_CONFIG, arg1.data);
            return;
        }

        internal function onLoginDialogReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            return;
        }

        internal function onShowErrorDialogReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_SYSTEM_ERROR, this._errorObject.body, this._errorObject.eventType);
            this._errorObject = null;
            return;
        }

        internal function onInternalError(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            this._errorObject = arg1.data;
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_SYSTEM_ERROR, this._errorObject.body, this._errorObject.eventType);
            this._errorObject = null;
            return;
        }

        internal function onCasinoTimeoutReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, "ERRORSTR3", mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL);
            return;
        }

        internal function onBankButtonPressedReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_BANK, null, mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
            return;
        }

        internal function onHelpButtonPressedReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_HELP);
            return;
        }

        internal function onBalanceUpdatedReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_BALANCE);
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_UPDATE_BALANCE);
            return;
        }

        internal function onNotifyGameBalanceChange(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy;
            if (loc1) 
            {
                mgs.aurora.modules.core.model.api.banking.Banking(loc1.banking).dispatchEvent(new mgs.aurora.api.events.ApiBankingEvent(mgs.aurora.api.events.ApiBankingEvent.BANK_CLOSE));
            }
            return;
        }

        internal function onReturnFromBankReturn(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            return;
        }

        internal function onUpdateBonusBubbleFeatures(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SETTINGS_CHANGE, arg1.data);
            return;
        }

        internal function onEnableVPB(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ENABLE);
            return;
        }

        internal function onDisableVPB(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
            return;
        }

        internal function onStartXmanSession(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc1[mgs.aurora.common.enums.configMapping.SessionConfig.XMAN_SESSION_STARTED] = "1";
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_SESSIONTIMER);
            return;
        }

        internal function onGenieUserDisconnect(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_USER_DISCONNECTED);
            return;
        }

        internal function onGenieCasinoError(arg1:mgs.aurora.common.events.marketManager.MarketManagerEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, arg1.data);
            return;
        }

        internal function onAttemptLogoutCloseGame(arg1:Boolean):void
        {
            if (arg1) 
            {
                if (!this._casinoClosing) 
                {
                    this._casinoClosing = true;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CASINO_CLOSING);
                    this.sendCloseGameLogoutRequest(null);
                }
            }
            else 
            {
                this.sendCloseGameLogoutRequest(null);
            }
            return;
        }

        public function setup(arg1:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler, arg2:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg3:mgs.aurora.common.interfaces.strings.ILanguageStrings, arg4:flash.utils.Dictionary):void
        {
            this.iMarketManager.setup(arg1, arg2, arg3, arg4);
            return;
        }

        public function systemLoaded(arg1:Object):void
        {
            this.iMarketManager.systemLoaded(arg1);
            return;
        }

        public function sendLoginRequest(arg1:Object):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            this.iMarketManager.sendLoginRequest(loc1);
            return;
        }

        public function showLoginDialog(arg1:Object):void
        {
            this.iMarketManager.showLoginDialog(arg1);
            return;
        }

        public function loggedInSuccessFull(arg1:Object):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            this.iMarketManager.loggedInSuccessFull(loc1);
            return;
        }

        public function loadGameModule(arg1:Object):void
        {
            this.iMarketManager.loadGameModule(arg1);
            return;
        }

        public function exitGameModule(arg1:Object):void
        {
            this.iMarketManager.exitGameModule(arg1);
            return;
        }

        public function showErrorDialog(arg1:Object):void
        {
            this.iMarketManager.showErrorDialog(arg1);
            return;
        }

        public function casinoTimeout(arg1:Object):void
        {
            Debugger.trace("casinoTimeOut", "SYSTEM");
            this.iMarketManager.casinoTimeout(arg1);
            return;
        }

        public function bankButtonPressed(arg1:Object):void
        {
            this.iMarketManager.bankButtonPressed(arg1);
            return;
        }

        public function returnFromBank(arg1:Object):void
        {
            this.iMarketManager.returnFromBank(arg1);
            return;
        }

        public function helpButtonPressed(arg1:Object):void
        {
            this.iMarketManager.helpButtonPressed(arg1);
            return;
        }

        public function balanceUpdated(arg1:Object):void
        {
            this.iMarketManager.balanceUpdated(arg1);
            return;
        }

        public function sendCloseGameLogoutRequest(arg1:Object):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN]) 
            {
                this.iMarketManager.sendCloseGameLogoutRequest(arg1);
            }
            return;
        }

        public static const NAME:String="MarketManagerMediator";

        internal var _dialogueHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;

        internal var _marketManageri:mgs.aurora.common.interfaces.marketManager.IMarketManager;

        internal var _exitMethod:String;

        internal var _errorObject:Object;

        internal var _casinoClosing:Boolean=false;
    }
}


//            package module
//              class GameModuleMediator
package mgs.aurora.modules.core.view.module 
{
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.net.*;
    import flash.system.*;
    import flash.utils.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.server.*;
    import mgs.aurora.api.module.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.frame.*;
    import mgs.aurora.common.events.comms.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.frames.*;
    import mgs.aurora.common.interfaces.sounds.*;
    import mgs.aurora.common.net.*;
    import mgs.aurora.common.pipes.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.controller.api.banking.*;
    import mgs.aurora.modules.core.controller.api.help.*;
    import mgs.aurora.modules.core.controller.api.preloader.*;
    import mgs.aurora.modules.core.controller.api.server.*;
    import mgs.aurora.modules.core.controller.api.sounds.*;
    import mgs.aurora.modules.core.controller.api.status.*;
    import mgs.aurora.modules.core.controller.files.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.events.api.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.model.api.banking.*;
    import mgs.aurora.modules.core.model.api.branding.*;
    import mgs.aurora.modules.core.model.api.dialogues.*;
    import mgs.aurora.modules.core.model.api.frames.*;
    import mgs.aurora.modules.core.model.api.help.*;
    import mgs.aurora.modules.core.model.api.localized.*;
    import mgs.aurora.modules.core.model.api.module.*;
    import mgs.aurora.modules.core.model.api.multiplayer.*;
    import mgs.aurora.modules.core.model.api.preloader.*;
    import mgs.aurora.modules.core.model.api.profiling.*;
    import mgs.aurora.modules.core.model.api.rightClick.*;
    import mgs.aurora.modules.core.model.api.server.*;
    import mgs.aurora.modules.core.model.api.session.*;
    import mgs.aurora.modules.core.model.api.sounds.*;
    import mgs.aurora.modules.core.model.api.status.*;
    import mgs.aurora.modules.core.model.api.storage.*;
    import mgs.aurora.modules.core.model.api.topbar.*;
    import mgs.aurora.modules.core.model.api.utility.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.scale.*;
    import mgs.aurora.modules.core.view.xman.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.pipes.messages.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class GameModuleMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function GameModuleMediator(arg1:Object)
        {
            this._isCountUpBalanceUpdate = false;
            super(NAME, arg1);
            flash.external.ExternalInterface.addCallback("getGameWideScreen", this.getGameWideScreen);
            return;
        }

        public function get bankButtonState():Boolean
        {
            return this._bankButtonState;
        }

        public function set bankButtonState(arg1:Boolean):void
        {
            this._bankButtonState = arg1;
            return;
        }

        public function get dialogueShowing():Boolean
        {
            return this._dialogueShowing;
        }

        public function set dialogueShowing(arg1:Boolean):void
        {
            this._dialogueShowing = arg1;
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.INITIALIZE_MODULE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_MODULE_SHUTDOWN);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_APISTATUS_INIT);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_START_LOAD);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_TEAR_DOWN_MEDIATOR);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SET_SYSTEM_ERROR_STATE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SET_EXTERNAL_PROGRESS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SHOW);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.STARTUP_DIALOGUE_REMOVED);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=arg1.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.INITIALIZE_MODULE:
                {
                    if (this._exitingModule) 
                    {
                        return;
                    }
                    this.setViewComponent(arg1.getBody());
                    this.initializeModule();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE:
                {
                    this._exitingModule = true;
                    this._exitNotificationBody = arg1.getBody();
                    this._exitNotificationType = arg1.getType();
                    Debugger.trace("[GameModuleMediator] SHUTDOWN_MODULE ", "SYSTEM - ITALIANMARKET");
                    loc1 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_GAME_EXIT, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_MODULE_SHUTDOWN);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.CONTINUE_MODULE_SHUTDOWN:
                {
                    Debugger.trace("[GameModuleMediator] CONTINUE_MODULE_SHUTDOWN : ", "SYSTEM - ITALIANMARKET");
                    this.resetSystemSettings();
                    this.shutdownModule();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_START_LOAD:
                {
                    this._exitingModule = false;
                    this.startModuleLoad();
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_BALANCE);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_TEAR_DOWN_MEDIATOR:
                {
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SET_SYSTEM_ERROR_STATE:
                {
                    if (this._moduleStatus != null) 
                    {
                        this._moduleStatus.setSystemError();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SET_EXTERNAL_PROGRESS:
                {
                    this._preloader.setInternalPreloaderProgress(Number(arg1.getBody()));
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_SHOW:
                {
                    this._showBonusBubble = true;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_BANK_BUTTON_STATE:
                {
                    this._bankButtonState = Boolean(arg1.getBody());
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.STARTUP_DIALOGUE_REMOVED:
                {
                    this._dialogueShowing = false;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function resetSystemSettings():void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME) as mgs.aurora.modules.core.model.CurrenciesProxy;
            loc1.resetISO();
            return;
        }

        public function startModuleLoad():void
        {
            var loc3:*=null;
            Debugger.trace("Start module setup", "SYSTEM - Module");
            this._mainGameSWFLoaded = false;
            this.registerCommands();
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_HIDE);
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            this._gameSet = loc1.gameSet;
            this._gameSwfFiles = new flash.utils.Dictionary();
            if (this._systemSwfFiles == null) 
            {
                this._systemSwfFiles = new flash.utils.Dictionary();
            }
            if (mgs.aurora.modules.core.utils.ModuleUtility.isExternalGame(this._gameSet)) 
            {
                if (mgs.aurora.modules.core.utils.ModuleUtility.getLaunchUrl(this._gameSet) != "") 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_EXTERNAL, this._gameSet);
                }
                else 
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, mgs.aurora.modules.core.enum.GameBlockedMessages.DEFAULT_MESSAGE);
                }
                return;
            }
            var loc2:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            if (loc2.getValue("__combinedsettings__", "") != "") 
            {
                loc3 = XML(loc2.getValue("__combinedsettings__", "") as String);
                this._gameDependencies = XML(loc3.gameSettings);
                this.loadModule();
            }
            else 
            {
                this.seedShineThrough(this._gameSet.art.@id, this._gameSet);
            }
            return;
        }

        internal function initializeModule():void
        {
            var xman:mgs.aurora.common.interfaces.comms.IXManPacketSender;
            var sessionConfig:Object;
            var externalData:mgs.aurora.common.interfaces.IExternalData;
            var apiProxy:mgs.aurora.modules.core.model.api.ApiProxy;
            var diagHandler:mgs.aurora.common.interfaces.dialogues.IDialoguesHandler;
            var gameStringsProxy:mgs.aurora.modules.core.model.GameStringsProxy;
            var gamesList:XML;
            var gameId:String;
            var gameSet:XML;
            var T3Game:Boolean;
            var isSGI:Boolean;
            var brandConfig:XML;
            var bankingProxy:mgs.aurora.modules.core.model.BankingProxy;
            var soundContent:mgs.aurora.common.interfaces.sounds.ISounds;
            var framesBuilderFrames:mgs.aurora.common.interfaces.frames.IFrames;
            var frameTheme:String;
            var engineBadge:XMLList;
            var junction:mgs.aurora.modules.core.view.CoreJunctionMediator;
            var defaultT3Trigger:Array;
            var bbTrigger:Array;

            var loc1:*;
            externalData = null;
            gamesList = null;
            gameSet = null;
            T3Game = false;
            isSGI = false;
            brandConfig = null;
            bankingProxy = null;
            soundContent = null;
            framesBuilderFrames = null;
            frameTheme = null;
            engineBadge = null;
            junction = null;
            defaultT3Trigger = null;
            bbTrigger = null;
            Debugger.trace("Initialize module", "SYSTEM - Module");
            this.saveSwfResponse(flash.display.DisplayObject(viewComponent));
            this._mainGameSWFLoaded = true;
            xman = mgs.aurora.modules.core.view.xman.XManMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.xman.XManMediator.NAME)).getViewComponent() as mgs.aurora.common.interfaces.comms.IXManPacketSender;
            xman.addEventListener(GAME_MODULE_PACKET_EVENT, this.onPacketResponse);
            sessionConfig = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            externalData = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            if (this.facade.hasProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME)) 
            {
                this.facade.removeProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME);
            }
            apiProxy = new mgs.aurora.modules.core.model.api.ApiProxy(new flash.events.EventDispatcher());
            diagHandler = mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            gameStringsProxy = mgs.aurora.modules.core.model.GameStringsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GameStringsProxy.NAME));
            this._dialogues = new mgs.aurora.modules.core.model.api.dialogues.Dialogues(diagHandler);
            this._dialogues.addEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_MODAL, this.onDialogueHandler);
            this._dialogues.addEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.HIDE_MODAL, this.onDialogueHandler);
            this._dialogues.addEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_FADER_MESSAGE, this.onDialogueHandler);
            this._dialogues.addEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_STARTUP_DIALOGUE, this.onDialogueHandler);
            this._moduleStatus = new mgs.aurora.modules.core.model.api.status.ModuleStatus();
            this._moduleStatus.addEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.BUSY_UPDATED, this.onModuleStatusHandler);
            this._moduleStatus.addEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.CLEANEDUP_UPDATED, this.onModuleStatusHandler);
            this._moduleStatus.addEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.INITIALIZED_UPDATED, this.onModuleStatusHandler);
            this._moduleStatus.addEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.EXIT, this.onModuleStatusHandler);
            this._moduleStatus.addEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.LOAD_NEW_MODULE, this.onModuleStatusHandler);
            this._moduleStatus.addEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.COMPLETE_LOAD_BAR, this.onModuleStatusHandler);
            gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            gameId = sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.GAMEID];
            var loc3:*=0;
            var loc4:*=gamesList.gameset.art;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id.toString().toLowerCase() == gameId.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            gameSet = loc2.parent();
            T3Game = gameSet.@avm1Platform == undefined ? false : gameSet.@avm1Platform.toLowerCase() == "t3";
            if (T3Game && !this.moduleStatus.initialized) 
            {
                this.moduleStatus.startupDialogueAllowed = false;
            }
            this._banking = new mgs.aurora.modules.core.model.api.banking.Banking();
            this._banking.balanceUpdate(sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE]);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.GET_HOST_BALANCE, this.onBankingHandler);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.LAUNCH, this.onBankingHandler);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BALANCE, this.onBankingHandler);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_COUNTUP_BALANCE, this.onBankingHandler);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.INSUFFICIENT_FUNDS, this.onBankingHandler);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.CUSTOM_INSUFFICIENT_FUNDS, this.onBankingHandler);
            this._banking.addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BANALCE_NOTIFIER, this.onBankingHandler);
            mgs.aurora.modules.core.model.api.banking.BalanceDisplay(this._banking.display).setCurrencyProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME) as mgs.aurora.modules.core.model.CurrenciesProxy);
            flash.events.IEventDispatcher(this._banking.display).addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_BET_VALUE, this.onBankingHandler);
            flash.events.IEventDispatcher(this._banking.display).addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_WIN_VALUE, this.onBankingHandler);
            flash.events.IEventDispatcher(this._banking.display).addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_DISPLAYTYPE, this.onBankingHandler);
            flash.events.IEventDispatcher(this._banking.display).addEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_COINSIZE_VALUE, this.onBankingHandler);
            isSGI = String(externalData.getValue("isSGI", "false")).toLowerCase() == "true";
            this._extTopBar = new mgs.aurora.modules.core.model.api.topbar.ExtTopBar(isSGI);
            this._extTopBar.addEventListener(mgs.aurora.modules.core.events.api.TopBarEvent.UPDATE, this.onTopBarEvent);
            brandConfig = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            bankingProxy = mgs.aurora.modules.core.model.BankingProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.BankingProxy.NAME));
            bankingProxy.guestBankingAllowed = brandConfig.casino.bank.@allowGuestPurchase.toXMLString() == "1";
            bankingProxy.userType = uint(sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]);
            this._banking.setBankingAvailable(bankingProxy.isAvailable);
            this._help = new mgs.aurora.modules.core.model.api.help.Help();
            this._help.addEventListener(mgs.aurora.modules.core.events.api.HelpEvent.LAUNCH, this.onHelpHandler);
            this._local = new mgs.aurora.modules.core.model.api.localized.Local();
            this._local.localString = new mgs.aurora.modules.core.model.api.localized.LocalString(mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS));
            this._rightClick = new mgs.aurora.modules.core.model.api.rightClick.RightClick();
            this._server = new mgs.aurora.modules.core.model.api.server.Server();
            this._server.addEventListener(mgs.aurora.modules.core.events.api.ServerEvent.FILE_REQUEST, this.onServerHandler);
            this._server.addEventListener(mgs.aurora.modules.core.events.api.ServerEvent.FILE_STOP_REQUEST, this.onServerHandler);
            this._server.addEventListener(mgs.aurora.modules.core.events.api.ServerEvent.PACKET_REQUEST, this.onServerHandler);
            this._server.dependanciesXML = this._gameDependencies;
            this._multiplayer = new mgs.aurora.modules.core.model.api.multiplayer.Multiplayer();
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.AVATAR_FILE_REQUEST, this.onMultiplayerEvent);
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.CANCEL_AVATAR_IMAGE, this.onMultiplayerEvent);
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.FETCH_AVATAR_METADATA, this.onMultiplayerEvent);
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.LAUNCH_AVATAR_EXTERNAL, this.onMultiplayerEvent);
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.SEND_PACKET, this.onMultiplayerEvent);
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.REQUEST_NEW_ALIAS, this.onMultiplayerEvent);
            this._multiplayer.addEventListener(mgs.aurora.modules.core.events.api.MultiplayerEvent.CANCEL_NEW_ALIAS_REQUEST, this.onMultiplayerEvent);
            this._session = new mgs.aurora.modules.core.model.api.session.Session(sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.LOGGEDIN], sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.ID4], sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE]);
            this._storage = mgs.aurora.modules.core.model.FlashStorageProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.FlashStorageProxy.NAME)).getData() as mgs.aurora.modules.core.model.api.storage.FlashStorage;
            soundContent = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.SOUND_ENGINE_MODULE).content as mgs.aurora.common.interfaces.sounds.ISounds;
            this._sounds = new mgs.aurora.modules.core.model.api.sounds.SoundEngine(soundContent);
            framesBuilderFrames = mgs.aurora.modules.core.view.frames.FramesBuilderMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME)).getViewComponent() as mgs.aurora.common.interfaces.frames.IFrames;
            frameTheme = mgs.aurora.modules.core.view.frames.FramesBuilderMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME)).theme;
            this._frames = new mgs.aurora.modules.core.model.api.frames.Frames(framesBuilderFrames, frameTheme);
            this._frames.currentFrame.controls.buttons.enableControls(mgs.aurora.common.enums.frame.SystemButtonTypes.EXIT);
            this._frames.currentFrame.controls.buttons.addEventListener(mgs.aurora.modules.core.events.api.ButtonManagerEvent.LOCK_ALL_BUTTONS, this.onButtonManagerEvent);
            this._frames.currentFrame.controls.buttons.addEventListener(mgs.aurora.modules.core.events.api.ButtonManagerEvent.UNLOCK_ALL_BUTTONS, this.onButtonManagerEvent);
            this._frames.currentFrame.controls.buttons.addEventListener(mgs.aurora.modules.core.events.api.ButtonManagerEvent.SET_PLAYFORREAL_STATE, this.onButtonManagerEvent);
            this._frames.currentFrame.controls.buttons.enableControls(mgs.aurora.common.enums.frame.SystemButtonTypes.EXIT);
            this._frames.addEventListener(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_BUBBLE_TRIGGER_CHANGE, this.onBonusBubbleTriggerChange);
            this._frames.addEventListener(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_BUBBLE_COORDINATES_CHANGE, this.onBonusBubbleCoordinatesChange);
            this._frames.addEventListener(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_ENABLED_SET, this.onBonusBubbleEnabledChange);
            this._frames.addEventListener(mgs.aurora.modules.core.events.api.FramesEvent.MODULE_SWITCHED_FRAME, this.onFrameSwitch);
            this._preloader = new mgs.aurora.modules.core.model.api.preloader.Preloader();
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.CREATE, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.VISIBILE, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.BACKGROUND_ALPHA, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.TEXT_LABEL, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.FILE_COUNT_CHANGE, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.EXTERNAL_LOADER_PROGRESS, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.GET_INTERNAL_LOADER_PROGRESS, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.SHOW_BLOCKER, this.onPreloaderHandler);
            this._preloader.addEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.HIDE_BLOCKER, this.onPreloaderHandler);
            engineBadge = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).brandingFiles.engineBadge;
            this._branding = new mgs.aurora.modules.core.model.api.branding.Branding(mgs.aurora.common.utilities.StringUtils.stringToBoolean(String(engineBadge.@ignoreModuleBadge)));
            this._branding.globalBadge = int(engineBadge.@type);
            this._branding.moduleBadge = int(engineBadge.@type);
            if (this._gameSet.hasOwnProperty("engineBadge")) 
            {
                this._branding.moduleBadge = int(this._gameSet.engineBadge.@type);
            }
            this._utility = new mgs.aurora.modules.core.model.api.utility.Utility();
            this._moduleInformation = new mgs.aurora.modules.core.model.api.module.ModuleInformation();
            this._moduleInformation.gameSet = new XMLList(this._gameSet.toXMLString());
            this._moduleInformation.extraModuleData = facade.hasProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME) ? mgs.aurora.modules.core.model.ExtraModuleDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)).extraData : null;
            this._profiling = new mgs.aurora.modules.core.model.api.profiling.Profiling();
            this._profiling.addEventListener(mgs.aurora.modules.core.events.api.ProfilingEvent.SEND_STEP, this.onSendStep);
            apiProxy.branding = this._branding;
            apiProxy.status = this._moduleStatus;
            apiProxy.banking = this._banking;
            apiProxy.help = this._help;
            apiProxy.localized = this._local;
            apiProxy.rightClick = this._rightClick;
            apiProxy.server = this._server;
            apiProxy.multiplayer = this._multiplayer;
            apiProxy.session = this._session;
            apiProxy.storage = this._storage;
            apiProxy.sounds = this._sounds;
            apiProxy.frame = this._frames;
            apiProxy.preloader = this._preloader;
            apiProxy.dialogues = this._dialogues;
            apiProxy.utility = this._utility;
            apiProxy.moduleInformation = this._moduleInformation;
            apiProxy.extTopBar = this._extTopBar;
            apiProxy.gameStrings = gameStringsProxy.getNewGameStrings();
            apiProxy.profiling = this._profiling;
            this.registerCommands();
            if (String(this._gameSet.art.@frame).toLowerCase() != "default_t3") 
            {
                if (String(this._gameSet.art.@BBTriggerOverRide) != "") 
                {
                    bbTrigger = String(this._gameSet.art.@BBTriggerOverRide).split(":");
                    this.drawTriggerArea(bbTrigger);
                }
            }
            else 
            {
                defaultT3Trigger = ["30", "715", "105", "25"];
                this.drawTriggerArea(defaultT3Trigger);
            }
            junction = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreJunctionMediator.NAME) as mgs.aurora.modules.core.view.CoreJunctionMediator;
            junction.sendPipeMessage(mgs.aurora.common.pipes.PipeNames.TO_AURORA_GAME_MODULE, new org.puremvc.as3.multicore.utilities.pipes.messages.Message("setApi", null, apiProxy as mgs.aurora.api.interfaces.IAuroraApi));
            this.setupExternaleFrame();
            this.facade.registerProxy(apiProxy);
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GAME_MODULE_INIT);
            apiProxy.status.dispatchEvent(new mgs.aurora.api.events.ApiStatusEvent(mgs.aurora.api.events.ApiStatusEvent.MODULE_INIT));
            return;
        }

        internal function drawTriggerArea(arg1:Array):void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_BONUSBUBBLE) as flash.display.Sprite;
            var loc3:*;
            (loc3 = new flash.display.Sprite()).name = "bbTrigger";
            loc3.graphics.beginFill(16777215, 0);
            loc3.graphics.drawRect(0, 0, arg1[2], arg1[3]);
            loc3.graphics.endFill();
            loc3.x = arg1[0];
            loc3.y = arg1[1];
            loc2.addChild(loc3);
            this._BBTrigger = loc3;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BB_OVERRIDE);
            this._frames.bonusBubbleTrigger = flash.display.InteractiveObject(loc3);
            return;
        }

        internal function setupExternaleFrame():void
        {
            var loc1:*=String(this._gameSet.@genre) + " " + String(this._gameSet.art.@name);
            flash.external.ExternalInterface.call("setExternalGameName", loc1);
            return;
        }

        internal function onDialogueHandler(arg1:mgs.aurora.modules.core.events.api.DialogueEvent):void
        {
            var loc1:*=null;
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_MODAL:
                {
                    this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MODAL);
                    break;
                }
                case mgs.aurora.modules.core.events.api.DialogueEvent.HIDE_MODAL:
                {
                    this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL);
                    break;
                }
                case mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_FADER_MESSAGE:
                {
                    this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MSG_FADER, arg1.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_STARTUP_DIALOGUE:
                {
                    loc1 = mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).gameSet;
                    this._dialogueShowing = true;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_STARTUP_DIALOGUE, String(loc1.art.@id));
                    break;
                }
            }
            return;
        }

        public function get moduleInformation():mgs.aurora.modules.core.model.api.module.ModuleInformation
        {
            return this._moduleInformation;
        }

        internal function onButtonManagerEvent(arg1:mgs.aurora.modules.core.events.api.ButtonManagerEvent):void
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.modules.core.events.api.ButtonManagerEvent.LOCK_ALL_BUTTONS:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_GAME_LOCKED_ALL_MODULE_BUTTONS);
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LOCK_ALL_MODULE_BUTTONS);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ButtonManagerEvent.UNLOCK_ALL_BUTTONS:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_GAME_UNLOCKED_ALL_MODULE_BUTTONS);
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UNLOCK_ALL_MODULE_BUTTONS);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ButtonManagerEvent.SET_PLAYFORREAL_STATE:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW_PLAY_FOR_REAL);
                    break;
                }
            }
            return;
        }

        internal function tearDownModule():void
        {
            var loc5:*=null;
            this._tearDown = true;
            Debugger.trace("Tear down module", "SYSTEM - Module");
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_HIDE);
            if (this._moduleStatus) 
            {
                this._moduleStatus.removeEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.BUSY_UPDATED, this.onModuleStatusHandler);
                this._moduleStatus.removeEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.CLEANEDUP_UPDATED, this.onModuleStatusHandler);
                this._moduleStatus.removeEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.INITIALIZED_UPDATED, this.onModuleStatusHandler);
                this._moduleStatus.removeEventListener(mgs.aurora.modules.core.events.api.ModuleStatusEvent.LOAD_NEW_MODULE, this.onModuleStatusHandler);
                this._moduleStatus.removeAllEventListeners();
            }
            if (this._banking) 
            {
                this._banking.display.displayType = mgs.aurora.api.enums.BalanceDisplayType.CREDITS;
                this._banking.removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.GET_HOST_BALANCE, this.onBankingHandler);
                this._banking.removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.LAUNCH, this.onBankingHandler);
                this._banking.removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BALANCE, this.onBankingHandler);
                this._banking.removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.INSUFFICIENT_FUNDS, this.onBankingHandler);
                this._banking.dispose();
                flash.events.IEventDispatcher(this._banking.display).removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_BET_VALUE, this.onBankingHandler);
                flash.events.IEventDispatcher(this._banking.display).removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_WIN_VALUE, this.onBankingHandler);
                flash.events.IEventDispatcher(this._banking.display).removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_DISPLAYTYPE, this.onBankingHandler);
                flash.events.IEventDispatcher(this._banking.display).removeEventListener(mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_COINSIZE_VALUE, this.onBankingHandler);
            }
            if (this._extTopBar) 
            {
                this._extTopBar.dispose();
            }
            if (this._multiplayer) 
            {
                this._multiplayer.removeAllEventListeners();
            }
            if (this._help) 
            {
                this._help.removeEventListener(mgs.aurora.modules.core.events.api.HelpEvent.LAUNCH, this.onHelpHandler);
            }
            if (this._server) 
            {
                this._server.removeEventListener(mgs.aurora.modules.core.events.api.ServerEvent.FILE_REQUEST, this.onServerHandler);
                this._server.removeEventListener(mgs.aurora.modules.core.events.api.ServerEvent.PACKET_REQUEST, this.onServerHandler);
                this._server.removeAllEventListeners();
            }
            if (this._frames) 
            {
                this._frames.currentFrame.controls.buttons.removeEventListener(mgs.aurora.modules.core.events.api.ButtonManagerEvent.LOCK_ALL_BUTTONS, this.onButtonManagerEvent);
                this._frames.currentFrame.controls.buttons.removeEventListener(mgs.aurora.modules.core.events.api.ButtonManagerEvent.UNLOCK_ALL_BUTTONS, this.onButtonManagerEvent);
                this._frames.removeEventListener(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_BUBBLE_TRIGGER_CHANGE, this.onBonusBubbleTriggerChange);
                this._frames.removeEventListener(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_BUBBLE_COORDINATES_CHANGE, this.onBonusBubbleCoordinatesChange);
                this._frames.removeEventListener(mgs.aurora.modules.core.events.api.FramesEvent.BONUS_ENABLED_SET, this.onBonusBubbleEnabledChange);
                this._frames.dispose();
            }
            if (this._preloader) 
            {
                this._preloader.removeEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.CREATE, this.onPreloaderHandler);
                this._preloader.removeEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.VISIBILE, this.onPreloaderHandler);
                this._preloader.removeEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.BACKGROUND_ALPHA, this.onPreloaderHandler);
                this._preloader.removeEventListener(mgs.aurora.modules.core.events.api.PreloaderEvent.TEXT_LABEL, this.onPreloaderHandler);
            }
            if (this._sounds) 
            {
                this._sounds.stopAll("");
                this._sounds.dispose();
            }
            if (this._dialogues) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_ALL_DIALOGUES);
                this._dialogues.removeEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_MODAL, this.onDialogueHandler);
                this._dialogues.removeEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.HIDE_MODAL, this.onDialogueHandler);
                this._dialogues.removeEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_FADER_MESSAGE, this.onDialogueHandler);
                this._dialogues.removeEventListener(mgs.aurora.modules.core.events.api.DialogueEvent.SHOW_STARTUP_DIALOGUE, this.onDialogueHandler);
                this._dialogues.removeAllEventListeners();
            }
            var loc1:*=mgs.aurora.modules.core.view.xman.XManMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.xman.XManMediator.NAME)).getViewComponent() as mgs.aurora.common.interfaces.comms.IXManPacketSender;
            loc1.removeEventListener(GAME_MODULE_PACKET_EVENT, this.onPacketResponse);
            if (this._local) 
            {
                this._local.localString.clearRegisteredList();
            }
            this._moduleStatus = null;
            this._banking = null;
            this._help = null;
            this._local = null;
            this._rightClick = null;
            this._session = null;
            this._storage = null;
            this._sounds = null;
            this._frames = null;
            this._server = null;
            this._preloader = null;
            this._dialogues = null;
            this._branding = null;
            this._utility = null;
            this._gameSet = null;
            this._moduleInformation = null;
            this._appDomain = null;
            this._loaderContext = null;
            this._extTopBar = null;
            this._multiplayer = null;
            this.facade.removeProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_FILE_REQUEST);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_ASSET_LOAD_COMPLETE);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_PACKET_REQUEST);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_PACKET_RESPONSE);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SHOW_HIDE_PRELOADER);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CREATE_PRELOADER);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SOUNDS_UPDATE_MUTE);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_HELP);
            this.facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED);
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc3:*=loc2.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_BONUSBUBBLE) as flash.display.Sprite;
            var loc4:*;
            if ((loc4 = loc3.getChildByName("bbTrigger") as flash.display.Sprite) != null) 
            {
                loc3.removeChild(loc4);
            }
            this._BBTrigger = null;
            if (viewComponent != null) 
            {
                (loc5 = viewComponent as flash.display.DisplayObject).loaderInfo.loader.unloadAndStop();
                if (loc5.parent != null) 
                {
                    loc5.parent.removeChild(loc5);
                }
                viewComponent = null;
            }
            this._gameSwfFiles = this.cleanUpSwfFiles(this._gameSwfFiles);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.FILE_RESPONSE_SAVED, mgs.aurora.modules.core.controller.files.SystemFileResponseCommand);
            return;
        }

        public function cleanUpSwfFiles(arg1:flash.utils.Dictionary):flash.utils.Dictionary
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=arg1;
            for (loc1 in loc4) 
            {
                loc2 = arg1[loc1] as flash.display.DisplayObject;
                if (loc2 != null) 
                {
                    if (loc2.parent != null) 
                    {
                        if (loc2.parent is flash.display.Loader) 
                        {
                            flash.display.Loader(loc2.parent).unload();
                        }
                        else 
                        {
                            loc2.parent.removeChild(loc2);
                        }
                    }
                    if (loc2.loaderInfo != null) 
                    {
                        loc2.loaderInfo.loader.unloadAndStop();
                    }
                    loc2 = null;
                }
                arg1[loc1] = null;
                delete arg1[loc1];
            }
            arg1 = new flash.utils.Dictionary();
            return arg1;
        }

        internal function onBonusBubbleCoordinatesChange(arg1:mgs.aurora.modules.core.events.api.FramesEvent):void
        {
            facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_COORDINATES_CHANGE, this._frames.getBonusBubbleCoordinates());
            return;
        }

        internal function onBonusBubbleTriggerChange(arg1:mgs.aurora.modules.core.events.api.FramesEvent):void
        {
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_TRIGGER_CHANGE, this._frames.bonusBubbleTrigger);
            return;
        }

        internal function onBonusBubbleEnabledChange(arg1:mgs.aurora.modules.core.events.api.FramesEvent):void
        {
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.CUSTOM_BONUS_BUBBLE_ENABLED, Boolean(arg1.data));
            return;
        }

        internal function onFrameSwitch(arg1:mgs.aurora.modules.core.events.api.FramesEvent):void
        {
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_MODULE_CHANGED_FRAME, String(arg1.data));
            return;
        }

        internal function shutdownModule():void
        {
            if (this._shinethroughUrloader) 
            {
                if (this._shinethroughUrloader.bytesLoaded < this._shinethroughUrloader.bytesTotal) 
                {
                    this._shinethroughUrloader.close();
                    this._shinethroughUrloader.removeEventListener(flash.events.Event.COMPLETE, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader = null;
                }
            }
            if (this.moduleStatus == null) 
            {
                if (this._loadingModule) 
                {
                    this._loadingModule = false;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.STOP_LOADING_URL);
                }
                if (!this._tearDown) 
                {
                    this.tearDownModule();
                }
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP, this._exitNotificationBody, this._exitNotificationType);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_CLEANEDUP, true);
            }
            else if (this.moduleStatus.initialized || !(this._gameSet.@avm1Platform == undefined)) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.STOP_LOADING_URL);
                this.moduleStatus.dispatchEvent(new mgs.aurora.api.events.ApiStatusEvent(mgs.aurora.api.events.ApiStatusEvent.MODULE_EXIT));
                this._loadingModule = false;
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.STOP_LOADING_URL);
                if (!this._tearDown) 
                {
                    this.tearDownModule();
                }
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP, this._exitNotificationBody, this._exitNotificationType);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_CLEANEDUP, true);
                this._loadingModule = false;
            }
            return;
        }

        internal function onSendStep(arg1:mgs.aurora.modules.core.events.api.ProfilingEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_GENERIC_STEP, arg1.data, mgs.aurora.modules.core.model.api.profiling.Profiling.GAME_REQUEST);
            return;
        }

        internal function onPreloaderHandler(arg1:mgs.aurora.modules.core.events.api.PreloaderEvent):void
        {
            var e:mgs.aurora.modules.core.events.api.PreloaderEvent;
            var event:mgs.aurora.modules.core.events.api.PreloaderEvent;
            var timer:flash.utils.Timer;

            var loc1:*;
            event = null;
            timer = null;
            e = arg1;
            var loc2:*=e.type;
            switch (loc2) 
            {
                case mgs.aurora.modules.core.events.api.PreloaderEvent.VISIBILE:
                {
                    if (this.moduleStatus.initialized && this.moduleStatus.preloaderComplete) 
                    {
                        event = e;
                        timer = new flash.utils.Timer(50, 1);
                        timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, function (arg1:flash.events.Event):void
                        {
                            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SHOW_HIDE_PRELOADER, event.data);
                            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_SHOW_HIDE_PRELOADER, event.data);
                            return;
                        })
                        timer.start();
                    }
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.CREATE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_PRELOADER);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CREATE_PRELOADER, e.data);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SHOW_HIDE_PRELOADER, true);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_SHOW_HIDE_PRELOADER, true);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.BACKGROUND_ALPHA:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BACKGROUND_ALPHA, e.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.TEXT_LABEL:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_GAME_TEXT_CHANGE, e.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.FILE_COUNT_CHANGE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_FILE_COUNT_CHANGE, e.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.EXTERNAL_LOADER_PROGRESS:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXTERNAL_LOADER_PROGRESS, e.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.HIDE_BLOCKER:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_PRELOADER_MODAL);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.SHOW_BLOCKER:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_PRELOADER_MODAL);
                    break;
                }
                case mgs.aurora.modules.core.events.api.PreloaderEvent.GET_INTERNAL_LOADER_PROGRESS:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GET_INTERNAL_LOADER_PROGRESS);
                    break;
                }
            }
            return;
        }

        internal function onMultiplayerEvent(arg1:mgs.aurora.modules.core.events.api.MultiplayerEvent):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=arg1.type;
            switch (loc3) 
            {
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.REQUEST_NEW_ALIAS:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_REQUEST_NEW_ALIAS);
                    break;
                }
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.CANCEL_NEW_ALIAS_REQUEST:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_CANCEL_NEW_ALIAS_REQUEST);
                    break;
                }
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.AVATAR_FILE_REQUEST:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_SET_AVATAR_FILE_URL, arg1.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.SEND_PACKET:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_SEND_PACKET, arg1.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.LAUNCH_AVATAR_EXTERNAL:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_LAUNCH_AVATAR_EXTERNAL, arg1.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.CANCEL_AVATAR_IMAGE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_CANCEL_AVATAR, arg1.data);
                    break;
                }
                case mgs.aurora.modules.core.events.api.MultiplayerEvent.FETCH_AVATAR_METADATA:
                {
                    loc1 = mgs.aurora.modules.core.model.SessionDetailsProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME));
                    loc2 = loc1.mpfUserID;
                    if (arg1.data != null) 
                    {
                        loc2 = String(arg1.data);
                    }
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_FETCH_AVATAR_METADATA, loc2);
                    break;
                }
            }
            return;
        }

        internal function onServerHandler(arg1:mgs.aurora.modules.core.events.api.ServerEvent):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=arg1.type;
            switch (loc4) 
            {
                case mgs.aurora.modules.core.events.api.ServerEvent.FILE_REQUEST:
                {
                    loc1 = mgs.aurora.api.interfaces.server.IFileRequest(arg1.data);
                    if (loc1.context == null) 
                    {
                        loc1.context = this._loaderContext;
                    }
                    loc2 = loc1.url.substr(loc1.url.lastIndexOf("/") + 1);
                    loc3 = this.getVersionedFilename(loc2);
                    loc1.url = loc1.url.replace(loc2, loc3);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_FILE_REQUEST, loc1);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ServerEvent.FILE_STOP_REQUEST:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.STOP_LOADING_URL);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ServerEvent.PACKET_REQUEST:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_PACKET_REQUEST, arg1.data);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        internal function onHelpHandler(arg1:mgs.aurora.modules.core.events.api.HelpEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_HELP);
            return;
        }

        internal function onBankingHandler(arg1:mgs.aurora.modules.core.events.api.BankingEvent):void
        {
            var loc1:*=null;
            var loc2:*=arg1.type;
            switch (loc2) 
            {
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BALANCE:
                {
                    this._isCountUpBalanceUpdate = false;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOTIFY_UPDATE_BALANCE, this.banking.getTempBalance());
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE, this.banking.getTempBalance());
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_BANALCE_NOTIFIER:
                {
                    this._isCountUpBalanceUpdate = false;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOTIFY_UPDATE_BALANCE, this.banking.balance);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_HOST_COUNTUP_BALANCE:
                {
                    this._isCountUpBalanceUpdate = true;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE, this.banking.getTempBalance());
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_COUNTUP_VALUE, this.banking.getTempBalance());
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.LAUNCH:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_BANK, null, mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_LAUNCH_BANK);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.GET_HOST_BALANCE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_REFRESH_BALANCE);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_BET_VALUE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_BET_VALUE, this._banking.display.betValue);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_WIN_VALUE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_WIN_VALUE, this._banking.display.winValue);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_DISPLAYTYPE:
                {
                    loc1 = mgs.aurora.modules.core.model.BankingConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.BankingConfigProxy.NAME));
                    loc1.displayType = this._banking.display.displayType;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_DISPLAYTYPE);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_DISPLAYTYPE);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.UPDATE_COINSIZE_VALUE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_COINSIZE);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_BALANCE);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.INSUFFICIENT_FUNDS:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_INSUFFICIENT_GAME_FUNDS);
                    break;
                }
                case mgs.aurora.modules.core.events.api.BankingEvent.CUSTOM_INSUFFICIENT_FUNDS:
                {
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_CUSTOM_INSUFFICIENT_GAME_FUNDS, arg1.id);
                    break;
                }
            }
            return;
        }

        internal function onModuleStatusHandler(arg1:mgs.aurora.modules.core.events.api.ModuleStatusEvent):void
        {
            var loc1:*=false;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=arg1.type;
            switch (loc9) 
            {
                case mgs.aurora.modules.core.events.api.ModuleStatusEvent.BUSY_UPDATED:
                {
                    this.sendNotification(this.moduleStatus.busy ? mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BUSY : mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_BUSY);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_BUSY, this.moduleStatus.busy);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ModuleStatusEvent.CLEANEDUP_UPDATED:
                {
                    loc1 = this.moduleStatus.cleanedUp;
                    if (loc1) 
                    {
                        if (!this._tearDown) 
                        {
                            this.tearDownModule();
                        }
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP, this._exitNotificationBody, this._exitNotificationType);
                    }
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_CLEANEDUP, loc1);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ModuleStatusEvent.COMPLETE_LOAD_BAR:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.COMPLETE_LOAD_BAR);
                    this._moduleStatus.preloaderComplete = true;
                    break;
                }
                case mgs.aurora.modules.core.events.api.ModuleStatusEvent.INITIALIZED_UPDATED:
                {
                    if (this.moduleStatus.initialized) 
                    {
                        loc3 = mgs.aurora.modules.core.view.frames.FramesBuilderMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME)).getViewComponent() as mgs.aurora.common.interfaces.frames.IFrames;
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_HIDE_PRELOADER);
                        this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_SHOW);
                        loc3.currentFrame.controls.buttons.enableControls(mgs.aurora.common.enums.frame.SystemButtonTypes.HELP);
                        this._preloader.resetVisible(false);
                        this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.GAME_MODULE_STATUS_INITIALIZE);
                    }
                    loc2 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
                    loc2.stage.stage.frameRate = 25;
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PROCESS_DELAYED_DOWNLOAD);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.AUTOMATION_GAME_INITIALIZED, this.moduleStatus.initialized);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ModuleStatusEvent.EXIT:
                {
                    loc4 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    Debugger.trace("ModuleStatusEvent EXIT", "SYSTEM - ITALIANMARKET");
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_GAME_EXIT, loc4, mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
                    break;
                }
                case mgs.aurora.modules.core.events.api.ModuleStatusEvent.LOAD_NEW_MODULE:
                {
                    loc5 = mgs.aurora.modules.core.model.GamesListProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GamesListProxy.NAME));
                    if (arg1.moduleData["gameid"] == "") 
                    {
                        loc6.clientID = arg1.moduleData["cid"];
                        loc6.moduleID = arg1.moduleData["mid"];
                    }
                    else 
                    {
                        loc6 = loc5.getMIDCID(arg1.moduleData["gameid"]);
                    }
                    loc7 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    (loc8 = new mgs.aurora.api.module.ExtraModuleData()).moduleId = loc7[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID];
                    loc8.clientId = loc7[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID];
                    loc8.extraData = arg1.moduleData["extraData"];
                    if (facade.hasProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)) 
                    {
                        mgs.aurora.modules.core.model.ExtraModuleDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)).extraData = loc8;
                    }
                    else 
                    {
                        facade.registerProxy(new mgs.aurora.modules.core.model.ExtraModuleDataProxy(loc8));
                    }
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, new mgs.aurora.modules.core.model.vo.SwitchModuleParams(uint(loc6.moduleID), uint(loc6.clientID)));
                    break;
                }
            }
            return;
        }

        public function registerCommands():void
        {
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_FILE_REQUEST, mgs.aurora.modules.core.controller.api.server.FileRequestCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_ASSET_LOAD_COMPLETE, mgs.aurora.modules.core.controller.api.server.FileResponseCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_PACKET_REQUEST, mgs.aurora.modules.core.controller.api.server.PacketRequestCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_PACKET_RESPONSE, mgs.aurora.modules.core.controller.api.server.PacketResponseCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SHOW_HIDE_PRELOADER, mgs.aurora.modules.core.controller.api.preloader.ShowHidePreloaderCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CREATE_PRELOADER, mgs.aurora.modules.core.controller.api.preloader.CreatePreloaderCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SOUNDS_UPDATE_MUTE, mgs.aurora.modules.core.controller.api.sounds.UpdateSoundsMuteCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE, mgs.aurora.modules.core.controller.api.banking.UpdateBalanceCommand);
            this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_LAUNCH_HELP, mgs.aurora.modules.core.controller.api.help.LaunchHelpCommand);
            if (!this.facade.hasCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP)) 
            {
                this.facade.registerCommand(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_CLEANED_UP, mgs.aurora.modules.core.controller.api.status.ModuleCleanedUpCommand);
            }
            return;
        }

        internal function onPacketResponse(arg1:mgs.aurora.common.events.comms.PacketEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_PACKET_RESPONSE, arg1);
            return;
        }

        internal function loadModule():void
        {
            this._mainGameSWFLoaded = false;
            Debugger.trace("Load module", "SYSTEM - Module");
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_RESET_KEEPALIVE_BEFORE_GAME_LOAD);
            if (loc1.requiresSockets) 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_KEEPALIVE);
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SHOW_HIDE_PRELOADER, true);
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc3:*=loc2.getViewComponent() as flash.display.Sprite;
            this._appDomain = new flash.system.ApplicationDomain(loc3.loaderInfo.applicationDomain);
            this._loaderContext = new flash.system.LoaderContext(false, this._appDomain, flash.system.SecurityDomain.currentDomain);
            loc2.stage.stage.frameRate = 25;
            var loc4:*;
            var loc5:*=(loc4 = loc1.gameSet).@avm1Platform == undefined ? loc4.@swf + ".swf" : loc4.@avm1swf + ".swf";
            var loc6:*=new mgs.aurora.common.net.URLLoadRequestInfo(loc4.art.@id, loc4.@url + this.getVersionedFilename(loc5), mgs.aurora.common.enums.ContentType.SWF_CONTENT, this._loaderContext);
            var loc7:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher.setSessionData(loc7);
            this._loadingModule = true;
            Debugger.trace("START_LOADING_URL", "SYSTEM");
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL, loc6);
            return;
        }

        internal function seedShineThrough(arg1:String, arg2:XML, arg3:String="Config"):void
        {
            if (this._shinethroughUrloader) 
            {
                if (this._shinethroughUrloader.bytesLoaded < this._shinethroughUrloader.bytesTotal) 
                {
                    this._shinethroughUrloader.close();
                    this._shinethroughUrloader.removeEventListener(flash.events.Event.COMPLETE, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader = null;
                }
            }
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME) as mgs.aurora.modules.core.model.ExternalDataProxy;
            var loc3:*=GAME_SETTINGS_URL + "?gameId=" + loc1.gameId + "&system=aurora";
            if (loc2.language != "") 
            {
                loc3 = loc3 + ("&ul=" + loc2.language);
            }
            if (loc2.theme != "") 
            {
                loc3 = loc3 + ("&theme=" + loc2.theme);
            }
            if (loc2.variant != "") 
            {
                loc3 = loc3 + ("&variant=" + loc2.variant);
            }
            if (loc2.regMarket != "") 
            {
                loc3 = loc3 + ("&regMarket=" + loc2.regMarket);
            }
            Debugger.trace("SEED SHINE THROUGH " + loc1.gameId, "SYSTEM - STATE");
            var loc4:*;
            (loc4 = new flash.net.URLRequest(loc3)).method = flash.net.URLRequestMethod.GET;
            this._shinethroughUrloader = new flash.net.URLLoader();
            this._shinethroughUrloader.dataFormat = flash.net.URLLoaderDataFormat.TEXT;
            this._shinethroughUrloader.addEventListener(flash.events.Event.COMPLETE, this.onSeedShineThroughHandler);
            this._shinethroughUrloader.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSeedShineThroughHandler);
            this._shinethroughUrloader.addEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.onSeedShineThroughHandler);
            this._shinethroughUrloader.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.onSeedShineThroughHandler);
            this._shinethroughUrloader.load(loc4);
            return;
        }

        internal function onSeedShineThroughHandler(arg1:*):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=arg1.type;
            switch (loc3) 
            {
                case flash.events.Event.COMPLETE:
                {
                    loc1 = facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
                    loc2 = new XML(this._shinethroughUrloader.data as String);
                    if (loc2.@gameId.toXMLString().toLowerCase() != loc1.gameId.toLowerCase()) 
                    {
                        return;
                    }
                    this._shinethroughUrloader.removeEventListener(flash.events.Event.COMPLETE, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.HTTPStatusEvent.HTTP_STATUS, this.onSeedShineThroughHandler);
                    this._shinethroughUrloader.removeEventListener(flash.events.IOErrorEvent.IO_ERROR, this.onSeedShineThroughHandler);
                    XML.ignoreWhitespace = true;
                    XML.prettyPrinting = false;
                    this._gameDependencies = new XML(this._shinethroughUrloader.data as String);
                    this._shinethroughUrloader = null;
                    this.loadModule();
                    break;
                }
                case flash.events.SecurityErrorEvent.SECURITY_ERROR:
                case flash.events.HTTPStatusEvent.HTTP_STATUS:
                case flash.events.IOErrorEvent.IO_ERROR:
                {
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function saveSwfResponse(arg1:flash.display.DisplayObject, arg2:String=""):void
        {
            if (arg2 != "") 
            {
                if (arg2.indexOf("System/") == -1) 
                {
                    this._gameSwfFiles[arg2] = flash.display.DisplayObject(arg1);
                }
                else 
                {
                    this._systemSwfFiles[arg2] = flash.display.DisplayObject(arg1);
                }
            }
            else 
            {
                this._gameSwfFiles[arg1.loaderInfo.url] = flash.display.DisplayObject(arg1);
            }
            return;
        }

        public function getVersionedFilename(arg1:String):String
        {
            var filename:String;
            var queryString:String;
            var gameXMLList:XMLList;
            var v:String;
            var connectionid:String;

            var loc1:*;
            queryString = null;
            v = null;
            connectionid = null;
            filename = arg1;
            queryString = "";
            if (filename.indexOf("?") != -1) 
            {
                queryString = filename.substr(filename.indexOf("?"));
                connectionid = filename.lastIndexOf("&") != (filename.length - 1) ? "&" : "";
                filename = filename.substr(0, filename.indexOf("?"));
            }
            var loc3:*=0;
            var loc4:*=this._gameDependencies.dependency;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@file == filename.toLowerCase()) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            gameXMLList = loc2;
            v = "";
            if (gameXMLList.length() > 0) 
            {
                v = gameXMLList.@etag;
            }
            if (v != "") 
            {
                if (v.length > 0) 
                {
                    filename = queryString != "" ? filename + queryString + connectionid + "v=" + v : filename + "?v=" + v;
                }
            }
            return filename;
        }

        public function getGameWideScreen():Object
        {
            var loc1:*=mgs.aurora.modules.core.view.scale.ScaleManagerMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.scale.ScaleManagerMediator.NAME));
            var loc2:*=new Object();
            loc2.height = loc1.scaleManger.initWindowHeight;
            loc2.width = loc1.scaleManger.initWindowWidth;
            return loc2;
        }

        public function get moduleStatus():mgs.aurora.modules.core.model.api.status.ModuleStatus
        {
            return this._moduleStatus;
        }

        public function get banking():mgs.aurora.modules.core.model.api.banking.Banking
        {
            return this._banking;
        }

        public function get help():mgs.aurora.modules.core.model.api.help.Help
        {
            return this._help;
        }

        public function get local():mgs.aurora.modules.core.model.api.localized.Local
        {
            return this._local;
        }

        public function get rightClick():mgs.aurora.modules.core.model.api.rightClick.RightClick
        {
            return this._rightClick;
        }

        public function get session():mgs.aurora.modules.core.model.api.session.Session
        {
            return this._session;
        }

        public function get storage():mgs.aurora.modules.core.model.api.storage.FlashStorage
        {
            return this._storage;
        }

        public function get sounds():mgs.aurora.modules.core.model.api.sounds.SoundEngine
        {
            return this._sounds;
        }

        public function get frames():mgs.aurora.modules.core.model.api.frames.Frames
        {
            return this._frames;
        }

        public function get server():mgs.aurora.modules.core.model.api.server.Server
        {
            return this._server;
        }

        public function get multiplayer():mgs.aurora.modules.core.model.api.multiplayer.Multiplayer
        {
            return this._multiplayer;
        }

        public function get preloader():mgs.aurora.modules.core.model.api.preloader.Preloader
        {
            return this._preloader;
        }

        public function get dialogues():mgs.aurora.modules.core.model.api.dialogues.Dialogues
        {
            return this._dialogues;
        }

        public function get branding():mgs.aurora.modules.core.model.api.branding.Branding
        {
            return this._branding;
        }

        public function get utility():mgs.aurora.modules.core.model.api.utility.Utility
        {
            return this._utility;
        }

        internal function onTopBarEvent(arg1:mgs.aurora.modules.core.events.api.TopBarEvent):void
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.modules.core.events.api.TopBarEvent.UPDATE:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_TOPBAR, arg1.data);
                    break;
                }
            }
            return;
        }

        public function get extTopBar():mgs.aurora.modules.core.model.api.topbar.ExtTopBar
        {
            return this._extTopBar;
        }

        public function get isCountUpBalanceUpdate():Boolean
        {
            return this._isCountUpBalanceUpdate;
        }

        public function get tearDown():Boolean
        {
            return this._tearDown;
        }

        public function set tearDown(arg1:Boolean):void
        {
            this._tearDown = arg1;
            return;
        }

        public function set isCountUpBalanceUpdate(arg1:Boolean):void
        {
            this._isCountUpBalanceUpdate = arg1;
            return;
        }

        public function set systemSwfFiles(arg1:flash.utils.Dictionary):void
        {
            this._systemSwfFiles = arg1;
            return;
        }

        public function get systemSwfFiles():flash.utils.Dictionary
        {
            return this._systemSwfFiles;
        }

        public function get profiling():mgs.aurora.modules.core.model.api.profiling.Profiling
        {
            return this._profiling;
        }

        public function get BBTrigger():flash.display.InteractiveObject
        {
            return this._BBTrigger;
        }

        public function set BBTrigger(arg1:flash.display.InteractiveObject):void
        {
            this._BBTrigger = arg1;
            return;
        }

        public function get showBonusBubble():Boolean
        {
            return this._showBonusBubble;
        }

        public function set showBonusBubble(arg1:Boolean):void
        {
            this._showBonusBubble = arg1;
            return;
        }

        public static const GAME_MODULE_NAME:String="GAME_MODULE";

        public static const NAME:String="GameModuleMediator";

        public static const GAME_SETTINGS_URL:String="GameSettings.ashx";

        public static const GAME_MODULE_PACKET_EVENT:String="GAME_MODULE_PACKET";

        internal var _rightClick:mgs.aurora.modules.core.model.api.rightClick.RightClick;

        internal var _session:mgs.aurora.modules.core.model.api.session.Session;

        internal var _storage:mgs.aurora.modules.core.model.api.storage.FlashStorage;

        internal var _sounds:mgs.aurora.modules.core.model.api.sounds.SoundEngine;

        internal var _frames:mgs.aurora.modules.core.model.api.frames.Frames;

        internal var _server:mgs.aurora.modules.core.model.api.server.Server;

        internal var _preloader:mgs.aurora.modules.core.model.api.preloader.Preloader;

        internal var _dialogues:mgs.aurora.modules.core.model.api.dialogues.Dialogues;

        internal var _utility:mgs.aurora.modules.core.model.api.utility.Utility;

        internal var _moduleInformation:mgs.aurora.modules.core.model.api.module.ModuleInformation;

        internal var _gameSet:XML;

        internal var _exitNotificationType:String;

        internal var _exitNotificationBody:Object;

        internal var _multiplayer:mgs.aurora.modules.core.model.api.multiplayer.Multiplayer;

        internal var _appDomain:flash.system.ApplicationDomain;

        internal var _loaderContext:*;

        internal var _moduleStatus:mgs.aurora.modules.core.model.api.status.ModuleStatus;

        internal var _systemSwfFiles:flash.utils.Dictionary;

        internal var _extTopBar:mgs.aurora.modules.core.model.api.topbar.ExtTopBar;

        internal var _gameDependencies:XML;

        internal var _loadingModule:Boolean=false;

        internal var _mainGameSWFLoaded:Boolean=false;

        internal var _exitingModule:Boolean=false;

        internal var _shinethroughUrloader:flash.net.URLLoader;

        internal var _isCountUpBalanceUpdate:Boolean;

        internal var _profiling:mgs.aurora.modules.core.model.api.profiling.Profiling;

        internal var _BBTrigger:flash.display.InteractiveObject=null;

        internal var _showBonusBubble:Boolean=false;

        internal var _bankButtonState:Boolean;

        internal var _dialogueShowing:Boolean=false;

        public var _tearDown:Boolean=false;

        internal var _branding:mgs.aurora.modules.core.model.api.branding.Branding;

        internal var _banking:mgs.aurora.modules.core.model.api.banking.Banking;

        internal var _help:mgs.aurora.modules.core.model.api.help.Help;

        internal var _local:mgs.aurora.modules.core.model.api.localized.Local;

        internal var _gameSwfFiles:flash.utils.Dictionary;
    }
}


//            package multiplayer
//              class MPFMediator
package mgs.aurora.modules.core.view.multiplayer 
{
    import flash.display.*;
    import flash.utils.*;
    import mgs.aurora.api.interfaces.multiplayer.*;
    import mgs.aurora.api.module.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.enums.magneto.*;
    import mgs.aurora.common.enums.mpf.*;
    import mgs.aurora.common.events.multiplayer.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.interfaces.dialogues.*;
    import mgs.aurora.common.interfaces.magneto.*;
    import mgs.aurora.common.interfaces.multiplayer.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.multiplayer.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.mutiplayer.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.dialogues.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class MPFMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function MPFMediator(arg1:mgs.aurora.common.interfaces.multiplayer.IMPF)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this.addToStage();
            this.addListeners();
            this.setupModule();
            return;
        }

        internal function get mpf():mgs.aurora.common.interfaces.multiplayer.IMPF
        {
            return getViewComponent() as mgs.aurora.common.interfaces.multiplayer.IMPF;
        }

        internal function addListeners():void
        {
            var loc1:*=this.mpf;
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFConnectionEvent.SOCKET_CONNECTED, this.onSocketConnected, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFPacketEvent.PACKET_RECEIVED, this.onPacketReceived, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFNotificationEvent.FORCE_LOGOUT, this.onForcedLogout, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFNotificationEvent.TOURNAMENT_IN_PROGRESS, this.onTournamentNotification, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFPacketEvent.LOGIN_SUCCESSFUL, this.onSuccessfulLogin, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFPacketEvent.LOGIN_ERROR, this.onLoginError, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFLaunchEvent.LAUNCH_GAME, this.onLaunchGame, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFAvatarEvent.AVATAR_RECEIVED, this.onAvatarReceived, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFAvatarEvent.AVATAR_METADATA_RECEIVED, this.onAvatarMetaDataReceived, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFPacketEvent.REGISTRATION_SUCCESSFUL, this.onSuccessfulRegistration);
            loc1.addEventListener(mgs.aurora.common.events.multiplayer.MPFPacketEvent.REGISTRATION_ERROR, this.onFailedRegistration);
            return;
        }

        internal function onLaunchGame(arg1:mgs.aurora.common.events.multiplayer.MPFLaunchEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.GamesListProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GamesListProxy.NAME));
            var loc2:*=loc1.getMIDCID(arg1.gameID);
            var loc3:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc4:*;
            (loc4 = new mgs.aurora.api.module.ExtraModuleData()).moduleId = loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID];
            loc4.clientId = loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID];
            if (facade.hasProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)) 
            {
                mgs.aurora.modules.core.model.ExtraModuleDataProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.ExtraModuleDataProxy.NAME)).extraData = loc4;
            }
            else 
            {
                facade.registerProxy(new mgs.aurora.modules.core.model.ExtraModuleDataProxy(loc4));
            }
            sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_TO_NEW_MODULE, new mgs.aurora.modules.core.model.vo.SwitchModuleParams(uint(loc2.moduleID), uint(loc2.clientID)));
            return;
        }

        internal function onTournamentNotification(arg1:mgs.aurora.common.events.multiplayer.MPFNotificationEvent):void
        {
            return;
        }

        internal function onForcedLogout(arg1:mgs.aurora.common.events.multiplayer.MPFNotificationEvent):void
        {
            Debugger.trace("Forced Logout", "SYSTEM - Core MPF");
            this.showMPFError();
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.MPF_FORCED_LOGOUT + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
            return;
        }

        internal function onLoginError(arg1:mgs.aurora.common.events.multiplayer.MPFPacketEvent):void
        {
            Debugger.trace("MPF Login Error", "SYSTEM - Core MPF");
            this.showMPFError();
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.MPF_LOGIN_ERROR + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
            return;
        }

        internal function onSocketConnected(arg1:mgs.aurora.common.events.multiplayer.MPFConnectionEvent):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            var loc2:*=facade.retrieveProxy(mgs.aurora.modules.core.model.MPFProxy.NAME) as mgs.aurora.modules.core.model.MPFProxy;
            var loc3:*=arg1.socketID;
            switch (loc3) 
            {
                case mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY:
                {
                    Debugger.trace("onSocketConnected - MPV_LOBBY", "SYSTEM - Core MPF");
                    this.lobbyConnected = true;
                    loc2.lobbyConnected = true;
                    if (loc1.isLobbyConnectionRequired && (!loc1.isRouterConnectionRequired || loc1.isRouterConnectionRequired && this.loggedIn)) 
                    {
                        this.mpfConnectionStateComplete();
                    }
                    break;
                }
                case mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER:
                {
                    Debugger.trace("onSocketConnected - MPV_ROUTER", "SYSTEM - Core MPF");
                    loc2.routerConnected = true;
                    break;
                }
            }
            return;
        }

        internal function onAvatarMetaDataReceived(arg1:mgs.aurora.common.events.multiplayer.MPFAvatarEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.view.module.GameModuleMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME));
            if (loc1.multiplayer != null) 
            {
                loc1.multiplayer.avatarMetaDataReceived(arg1.avatarMetaData);
            }
            return;
        }

        internal function onAvatarReceived(arg1:mgs.aurora.common.events.multiplayer.MPFAvatarEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.view.module.GameModuleMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME));
            Debugger.trace("Avatar Received - " + typeof arg1.avatar, "SYSTEM - Core MPF");
            if (loc1.multiplayer != null) 
            {
                loc1.multiplayer.avatarLoaded(arg1.avatar);
            }
            return;
        }

        internal function onSuccessfulLogin(arg1:mgs.aurora.common.events.multiplayer.MPFPacketEvent):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            Debugger.trace("Successfull MPF Login", "SYSTEM - Core MPF");
            if (!this.loggedIn) 
            {
                loc2 = facade.retrieveProxy(mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy.NAME) as mgs.aurora.modules.core.model.mutiplayer.MPFDataProxy;
                loc2.setData(arg1.data);
                if ((loc3 = facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME) as mgs.aurora.modules.core.model.SessionDetailsProxy).userAlias != "") 
                {
                    loc2.alias = loc3.userAlias;
                    loc2.systemGeneratedAlias = "0";
                }
                (loc4 = facade.retrieveProxy(mgs.aurora.modules.core.model.MPFProxy.NAME) as mgs.aurora.modules.core.model.MPFProxy).loggedIn = true;
                this.loggedIn = true;
            }
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            if (!loc1.requiresSockets) 
            {
            };
            if (!loc1.isLobbyConnectionRequired || this.lobbyConnected) 
            {
                this.mpfConnectionStateComplete();
            }
            return;
        }

        internal function mpfConnectionStateComplete():void
        {
            var loc1:*=false;
            var loc2:*=null;
            if (this._connectionComplete) 
            {
            };
            this.lobbyConnected = false;
            this.loggedIn = false;
            if (!this._connectionComplete) 
            {
                this._connectionComplete = true;
                loc1 = mgs.aurora.modules.core.model.GameSetProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).isRegistrationRequired;
                Debugger.trace("MPFMediator : game = " + loc1 + " ; system =  " + this._systemRegRequired, "SYSTEM - MPF");
                if (loc1 && this._systemRegRequired) 
                {
                    this.mpf.attemptRegistration();
                    return;
                }
                loc2 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
                Debugger.trace("MPFMediator : " + loc2.getValue("waitForModuleToLoad"), "SYSTEM - STATES");
                if (loc2.getValue("waitForModuleToLoad") == "true") 
                {
                    return;
                }
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE);
            }
            return;
        }

        internal function onPacketReceived(arg1:mgs.aurora.common.events.multiplayer.MPFPacketEvent):void
        {
            Debugger.trace("MPF Packet - " + arg1.socketID + ", " + arg1.data.toXMLString(), "SYSTEM - Core MPF Packet");
            var loc1:*=mgs.aurora.modules.core.view.module.GameModuleMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME));
            if (arg1.data.Error.toXMLString() != "") 
            {
                var loc2:*=arg1.data.Error.@errCode.toString();
                switch (loc2) 
                {
                    case "1":
                    case "2":
                    case "3":
                    case "4":
                    case "5":
                    case "6":
                    case "7":
                    case "11":
                    case "12":
                    case "13":
                    case "16":
                    {
                        this.showMPFError();
                        return;
                    }
                }
            }
            if (loc1 && loc1.multiplayer) 
            {
                loc1.multiplayer.packetReceived(new mgs.aurora.modules.core.model.api.multiplayer.MPFPacketResponse(arg1.data, arg1.socketID));
            }
            return;
        }

        internal function showMPFError():void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME) as mgs.aurora.modules.core.model.GameSetProxy;
            if (loc1.requiresSockets) 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_KEEPALIVE);
                facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL, "ERRORSTR1");
            }
            return;
        }

        internal function onFailedRegistration(arg1:mgs.aurora.common.events.multiplayer.MPFPacketEvent):void
        {
            if (facade.hasMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)) 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_LAUNCH_EXIT, null, mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_ON_ERROR);
            }
            else 
            {
                sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXIT_MODULE);
            }
            return;
        }

        internal function onSuccessfulRegistration(arg1:mgs.aurora.common.events.multiplayer.MPFPacketEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            if (loc1.getValue("waitForModuleToLoad") == "true") 
            {
                return;
            }
            this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE);
            return;
        }

        internal function setupModule():void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc3:*=loc1.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.MAGNETO_MODULE).content as mgs.aurora.common.interfaces.magneto.IMagneto;
            var loc4:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.SessionDetailsProxy.NAME) as mgs.aurora.modules.core.model.SessionDetailsProxy;
            var loc5:*=mgs.aurora.modules.core.view.dialogues.DialoguesMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.dialogues.DialoguesMediator.NAME)).getNewHandler();
            var loc6:*=mgs.aurora.modules.core.model.GamesListProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GamesListProxy.NAME)).gamesList;
            var loc7:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            var loc8:*=new flash.utils.Dictionary();
            var loc9:*=mgs.aurora.modules.core.model.CurrenciesProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.CurrenciesProxy.NAME));
            loc8[mgs.aurora.common.enums.mpf.mpfConfigKeys.CURRENCY_XML] = loc9.currenciesInfo;
            loc8[mgs.aurora.common.enums.mpf.mpfConfigKeys.STANDARD_CURRENCY_FORMAT] = loc9.standardCurrencyFormat;
            this.mpf.setup(XML(loc2.mpf), loc3, loc4, loc5, loc6, loc7, loc8);
            this._systemRegRequired = loc2.mpf.registration.@systemReg == "1";
            return;
        }

        internal function addToStage():void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(getViewComponent() as flash.display.DisplayObject);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ATTEMPT_CONNECTIONS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_CANCEL_AVATAR);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_FETCH_AVATAR_METADATA);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_LOAD_AVATAR_FILE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_SEND_PACKET);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_END_CONNECTIONS);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=arg1.getName();
            switch (loc5) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ATTEMPT_CONNECTIONS:
                {
                    loc1 = mgs.aurora.modules.core.model.GameSetProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME));
                    loc2 = mgs.aurora.modules.core.model.SessionConfigProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.SessionConfigProxy.NAME));
                    if (loc1.requiresSockets) 
                    {
                        Debugger.trace("Attempt Socket Connections for MPF game", "SYSTEM - Core MPF");
                        this._connectionComplete = false;
                        if (loc1.isRouterConnectionRequired) 
                        {
                            this.mpf.attemptRouterConnection();
                        }
                        if (loc1.isLobbyConnectionRequired) 
                        {
                            this.mpf.attemptLobbyConnection();
                        }
                    }
                    else 
                    {
                        Debugger.trace("Attempt Socket Connections for normal game", "SYSTEM - Core MPF");
                        this._connectionComplete = false;
                        this.mpf.attemptRouterConnection();
                        this.mpfConnectionStateComplete();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MPF_CANCEL_AVATAR:
                {
                    this.mpf.cancelAvatar(String(arg1.getBody()));
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MPF_FETCH_AVATAR_METADATA:
                {
                    this.mpf.fetchAvatarMetadata(String(arg1.getBody()));
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MPF_LOAD_AVATAR_FILE:
                {
                    loc3 = String(arg1.getBody());
                    this.mpf.loadAvatar(loc3);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MPF_SEND_PACKET:
                {
                    loc4 = arg1.getBody() as mgs.aurora.api.interfaces.multiplayer.IMPFPacketRequest;
                    this.mpf.sendPacket(loc4.socketId, loc4.serviceId, loc4.data);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MPF_END_CONNECTIONS:
                {
                    this._connectionComplete = false;
                    this.mpf.closeConnection();
                    break;
                }
            }
            return;
        }

        public static const NAME:String="MPFMediator";

        internal var lobbyConnected:Boolean;

        internal var loggedIn:Boolean;

        internal var _connectionComplete:Boolean=false;

        internal var _systemRegRequired:Boolean;
    }
}


//            package notifier
//              class NotifierMediator
package mgs.aurora.modules.core.view.notifier 
{
    import flash.events.*;
    import flash.net.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.utils.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class NotifierMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function NotifierMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public function get countUpBalance():uint
        {
            return this._countUpBalance;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOTIFY_UPDATE_BALANCE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SYSTEM_UPDATE_BALANCE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.LOGIN_SUCCESSFULLY_COMPLETED);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SYSTEM_READY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SESSIONTIMEOUT);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.NOTIFIER_PING);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_COUNTUP_VALUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_WIN_VALUE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc2:*=0;
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=0;
            var loc6:*=0;
            var loc7:*=0;
            var loc8:*=null;
            var loc1:*=null;
            var loc9:*=arg1.getName();
            switch (loc9) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_WIN_VALUE:
                {
                    loc2 = uint(arg1.getBody());
                    if (loc2 == 0) 
                    {
                        this._winUpdated = false;
                    }
                    else 
                    {
                        this._winUpdated = true;
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_COUNTUP_VALUE:
                {
                    this._winUpdated = false;
                    loc3 = arg1.getBody() as Number;
                    this._countUpBalance = this._countUpBalance + Math.round(loc3 - this._balanceValue);
                    this._balanceValue = loc3;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOTIFY_UPDATE_BALANCE:
                {
                    loc4 = arg1.getBody() as Number;
                    this._winUpdated = false;
                    if (this._countUpBalance == 0) 
                    {
                        if (isNaN(this._balanceValue)) 
                        {
                            Debugger.trace("Cannot send balance update as previous balance is undefined", "NOTIFIER");
                        }
                        else 
                        {
                            if (this._gameModule == null) 
                            {
                                this._gameModule = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
                            }
                            if (loc4 < this._balanceValue) 
                            {
                                Debugger.trace("Try sending balance + bet update", "NOTIFIER");
                                loc6 = Math.round(this._balanceValue - loc4);
                                this.broadcastBalanceAndBet(loc4, loc6);
                            }
                            else if (loc4 > this._balanceValue) 
                            {
                                Debugger.trace("Try sending balance + win update", "NOTIFIER");
                                loc7 = Math.round(loc4 - this._balanceValue);
                                this.broadcastBalanceAndWin(loc4, loc7);
                            }
                            else 
                            {
                                Debugger.trace("Game Balance not sent since it did not change", "NOTIFIER");
                            }
                        }
                    }
                    else 
                    {
                        Debugger.trace("Try sending balance + win countup ", "NOTIFIER");
                        loc5 = this._countUpBalance;
                        this.broadcastBalanceAndWin(loc4, loc5);
                        this._countUpBalance = 0;
                    }
                    this._balanceValue = loc4;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SYSTEM_UPDATE_BALANCE:
                {
                    loc1 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    if (this.facade.hasMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME)) 
                    {
                        this._gameModule = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
                        if (!this._gameModule.isCountUpBalanceUpdate && !this._winUpdated) 
                        {
                            if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE] == this._balanceValue) 
                            {
                                Debugger.trace("System Balance not sent since it did not change", "NOTIFIER");
                            }
                            else 
                            {
                                this._balanceValue = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE];
                                this.broadcastBalanceOnly(this._balanceValue);
                            }
                        }
                        this._winUpdated = false;
                        this._gameModule.isCountUpBalanceUpdate = false;
                    }
                    else if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE] == this._balanceValue) 
                    {
                        Debugger.trace("System Balance not sent since it did not change", "NOTIFIER");
                    }
                    else 
                    {
                        this._balanceValue = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE];
                        this.broadcastBalanceOnly(this._balanceValue);
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.LOGIN_SUCCESSFULLY_COMPLETED:
                {
                    Debugger.trace("Try sending username and server id", "NOTIFIER");
                    loc1 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    loc8 = "";
                    if (String(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.LOGINTYPE]).toUpperCase() != mgs.aurora.common.enums.raptorSession.LoginType.VANGUARD) 
                    {
                        loc8 = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME];
                    }
                    this.broadcastLoginDetails(loc8, loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID].toString());
                    Debugger.trace("Try sending initial balance", "NOTIFIER");
                    this._balanceValue = loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE];
                    this.broadcastBalanceOnly(this._balanceValue);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHUTDOWN_MODULE:
                {
                    Debugger.trace("Clear connection :: current state " + mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentStateName(), "NOTIFIER");
                    if (mgs.aurora.modules.core.utils.StateMachineUtility.getCurrentStateName() != mgs.aurora.modules.core.states.StateNames.LOAD_NEW_MODULE) 
                    {
                        if (!(this._initialConnection == null) && this._initialConnection.hasEventListener(flash.events.StatusEvent.STATUS)) 
                        {
                            this._initialConnection.removeEventListener(flash.events.StatusEvent.STATUS, this.onInitialConnectionStatus);
                        }
                        if (!(this._initialConnection == null) && this._initialConnection.hasEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR)) 
                        {
                            this._initialConnection.removeEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.onInitialConnectionAsyncError);
                        }
                        if (!(this._initialConnection == null) && this._initialConnection.hasEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR)) 
                        {
                            this._initialConnection.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onInitialConnectionSecurityError);
                        }
                        this._initialConnection = null;
                        if (!(this._messageConnection == null) && this._messageConnection.hasEventListener(flash.events.StatusEvent.STATUS)) 
                        {
                            this._messageConnection.removeEventListener(flash.events.StatusEvent.STATUS, this.onMessageConnectionStatus);
                        }
                        if (!(this._messageConnection == null) && this._messageConnection.hasEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR)) 
                        {
                            this._messageConnection.removeEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.onMessageConnectionAsyncError);
                        }
                        if (!(this._messageConnection == null) && this._messageConnection.hasEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR)) 
                        {
                            this._messageConnection.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onMessageConnectionSecurityError);
                        }
                        if (!(this._notifierTimer == null) && this._notifierTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                        {
                            this._notifierTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.onTimerNotify);
                        }
                        this._messageConnection = null;
                        this._messageID = "";
                    }
                    this._winUpdated = false;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SYSTEM_READY:
                {
                    Debugger.trace("Try sending module details, and gameplay_ready", "NOTIFIER");
                    loc1 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    this.broadcastGeneralMessage("gameplay_ready");
                    this.broadcastModuleDetails(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURMID], loc1[mgs.aurora.common.enums.configMapping.SessionConfig.CURCID]);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.MARKET_SESSIONTIMEOUT:
                {
                    Debugger.trace("trying to send session_timed_out");
                    this.broadcastGeneralMessage("session_timed_out");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.NOTIFIER_PING:
                {
                    Debugger.trace("trying to send casino_alive");
                    this.broadcastGeneralMessage("casino_alive");
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            var sessionProxy:mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var sessionConfig:Object;
            var NotifierId:String;
            var notifierTimeout:int;

            var loc1:*;
            super.onRegister();
            sessionProxy = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME));
            sessionConfig = sessionProxy.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            NotifierId = sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.NOTIFIER_ID];
            notifierTimeout = int(sessionConfig[mgs.aurora.common.enums.configMapping.SessionConfig.NOTIFIER_TIMEOUT]);
            if (notifierTimeout != 0) 
            {
                if (!(this._notifierTimer == null) && this._notifierTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._notifierTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.onTimerNotify);
                }
                this._notifierTimer = null;
                this._notifierTimer = new flash.utils.Timer(notifierTimeout);
                this._notifierTimer.addEventListener(flash.events.TimerEvent.TIMER, this.onTimerNotify);
                this._notifierTimer.start();
            }
            if (!(NotifierId == null) && !(NotifierId == "")) 
            {
                Debugger.trace("Generate unique connection ID", "NOTIFIER");
                this._messageID = "_notifier-" + mgs.aurora.common.utilities.GUID.create();
                Debugger.trace("Register unique connection", "NOTIFIER");
                this._initialConnection = new flash.net.LocalConnection();
                this._initialConnection.addEventListener(flash.events.StatusEvent.STATUS, this.onInitialConnectionStatus);
                this._initialConnection.addEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.onInitialConnectionAsyncError);
                this._initialConnection.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onInitialConnectionSecurityError);
                try 
                {
                    Debugger.trace("NotifierMediator NotifierId=" + NotifierId, "NOTIFIER");
                    this._initialConnection.send(NotifierId, "registerConnection", this._messageID);
                }
                catch (err:Error)
                {
                    Debugger.trace("Cannot setup connection " + err.message, "NOTIFIER");
                }
            }
            else 
            {
                Debugger.trace("Cannot setup connection since the connectionID is not properly defined in Config.xml", "NOTIFIER");
            }
            return;
        }

        internal function onTimerNotify(arg1:flash.events.TimerEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.NOTIFIER_PING);
            return;
        }

        internal function onInitialConnectionStatus(arg1:flash.events.StatusEvent):void
        {
            if (arg1.level != "status") 
            {
                if (arg1.level == "error") 
                {
                    Debugger.trace("Failed to register connection due to status error", "NOTIFIER");
                }
            }
            else 
            {
                if (!(this._initialConnection == null) && this._initialConnection.hasEventListener(flash.events.StatusEvent.STATUS)) 
                {
                    this._initialConnection.removeEventListener(flash.events.StatusEvent.STATUS, this.onInitialConnectionStatus);
                }
                if (!(this._initialConnection == null) && this._initialConnection.hasEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR)) 
                {
                    this._initialConnection.removeEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.onInitialConnectionAsyncError);
                }
                if (!(this._initialConnection == null) && this._initialConnection.hasEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR)) 
                {
                    this._initialConnection.removeEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onInitialConnectionSecurityError);
                }
                this._initialConnection = null;
                Debugger.trace("Create connection for messages", "NOTIFIER");
                this._messageConnection = new flash.net.LocalConnection();
                this._messageConnection.addEventListener(flash.events.StatusEvent.STATUS, this.onMessageConnectionStatus);
                this._messageConnection.addEventListener(flash.events.AsyncErrorEvent.ASYNC_ERROR, this.onMessageConnectionAsyncError);
                this._messageConnection.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onMessageConnectionSecurityError);
            }
            return;
        }

        internal function onInitialConnectionAsyncError(arg1:flash.events.AsyncErrorEvent):void
        {
            Debugger.trace("Failed to register connection due to async error", "NOTIFIER");
            return;
        }

        internal function onInitialConnectionSecurityError(arg1:flash.events.SecurityErrorEvent):void
        {
            Debugger.trace("Failed to register connection due to security error", "NOTIFIER");
            return;
        }

        internal function onMessageConnectionStatus(arg1:flash.events.StatusEvent):void
        {
            if (arg1.level == "error") 
            {
                Debugger.trace("Failed to send message due to status error", "NOTIFIER");
            }
            return;
        }

        internal function onMessageConnectionAsyncError(arg1:flash.events.AsyncErrorEvent):void
        {
            Debugger.trace("Failed to send message due to async error", "NOTIFIER");
            return;
        }

        internal function onMessageConnectionSecurityError(arg1:flash.events.SecurityErrorEvent):void
        {
            Debugger.trace("Failed to send message due to security error", "NOTIFIER");
            return;
        }

        internal function broadcastBalanceAndBet(arg1:Number, arg2:uint):void
        {
            if (this._messageConnection == null) 
            {
                Debugger.trace("Failed to send message due to undefined connection", "NOTIFIER");
            }
            else 
            {
                this._messageConnection.send(this._messageID, "setBalanceAndBet", arg1, arg2);
            }
            return;
        }

        internal function broadcastBalanceAndWin(arg1:Number, arg2:uint):void
        {
            if (this._messageConnection == null) 
            {
                Debugger.trace("Failed to send message due to undefined connection", "NOTIFIER");
            }
            else 
            {
                this._messageConnection.send(this._messageID, "setBalanceAndWin", arg1, arg2);
            }
            return;
        }

        internal function broadcastBalanceOnly(arg1:Number):void
        {
            if (this._messageConnection == null) 
            {
                Debugger.trace("Failed to send message due to undefined connection", "NOTIFIER");
            }
            else 
            {
                this._messageConnection.send(this._messageID, "setBalanceOnly", arg1);
            }
            return;
        }

        internal function broadcastLoginDetails(arg1:String, arg2:String):void
        {
            if (this._messageConnection == null) 
            {
                Debugger.trace("Failed to send message due to undefined connection", "NOTIFIER");
            }
            else 
            {
                this._messageConnection.send(this._messageID, "setLoginDetails", arg1, arg2);
            }
            return;
        }

        internal function broadcastModuleDetails(arg1:int, arg2:int):void
        {
            if (this._messageConnection == null) 
            {
                Debugger.trace("Failed to send message due to undefined connection", "NOTIFIER");
            }
            else 
            {
                this._messageConnection.send(this._messageID, "setModuleDetails", arg1, arg2);
            }
            return;
        }

        internal function broadcastGeneralMessage(arg1:String):void
        {
            if (this._messageConnection == null) 
            {
                Debugger.trace("Failed to send message due to undefined connection", "NOTIFIER");
            }
            else 
            {
                this._messageConnection.send(this._messageID, "setGeneralMessage", arg1);
            }
            return;
        }

        public static const NAME:String="NotifierMediator";

        internal var _gameModule:mgs.aurora.modules.core.view.module.GameModuleMediator;

        internal var _initialConnection:flash.net.LocalConnection;

        internal var _messageID:String;

        public var _countUpBalance:uint=0;

        internal var _messageConnection:flash.net.LocalConnection;

        internal var _balanceValue:Number;

        internal var _notifierTimer:flash.utils.Timer;

        internal var _winUpdated:Boolean;
    }
}


//            package scale
//              class ScaleManagerMediator
package mgs.aurora.modules.core.view.scale 
{
    import mgs.aurora.common.scale.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class ScaleManagerMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function ScaleManagerMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }

        public function get scaleManger():mgs.aurora.common.scale.ScaleManager
        {
            return viewComponent as mgs.aurora.common.scale.ScaleManager;
        }

        public static const NAME:String="ScaleManagerMediator";
    }
}


//            package sgi
//              class SGITopbarMediator
package mgs.aurora.modules.core.view.sgi 
{
    import flash.display.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.frame.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.sgi.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.orbis.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.model.vo.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.module.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class SGITopbarMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function SGITopbarMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.DYNAMIC_CONFIG_CREATED);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_BET_VALUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_WIN_VALUE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_UPDATE_BALANCE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_LOGIN_SUCCESSFULL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_MUTE_ICON_GRAPHIC);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_COINSIZE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_DISPLAYTYPE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_TOPBAR_SOUND);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_TOPBAR);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SEND_TOPBAR_DATA);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_BUSY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SET_SGI_GAME_OVERRIDE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_SGI_TOPBAR);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=0;
            var loc9:*=null;
            var loc10:*=null;
            var loc11:*=NaN;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*=null;
            var loc15:*=null;
            var loc16:*=false;
            var loc17:*=false;
            if (this._topBarController == null) 
            {
                this._topBarController = this.getViewComponent() as mgs.aurora.common.orbis.TopBarController;
            }
            this._gameModule = this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
            var loc18:*=arg1.getName();
            switch (loc18) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.DYNAMIC_CONFIG_CREATED:
                {
                    loc1 = mgs.aurora.modules.core.model.SgiConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.SgiConfigProxy.NAME));
                    loc2 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    loc2[mgs.aurora.common.enums.configMapping.SessionConfig.SGI_LOGINTYPE] = loc1.loginType;
                    loc3 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
                    this._systemForceDefault = loc3.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).sgi.settings.@doSystemRGIOperatorNode == "1";
                    this._topBarController.addEventListener(mgs.aurora.common.events.sgi.SgiEvent.CHANGESOUND, this.onTopBarSoundChange);
                    this._topBarController.addEventListener(mgs.aurora.common.events.sgi.SgiEvent.SHOWABOUT, this.onShowAbout);
                    this._topBarController.addEventListener(mgs.aurora.common.events.sgi.SgiEvent.HIDEABOUT, this.onHideAbout);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_BET_VALUE:
                {
                    loc4 = uint(arg1.getBody());
                    loc5 = this.setFormat(loc4);
                    this.setTopbarBet(loc5);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_WIN_VALUE:
                {
                    loc6 = uint(arg1.getBody());
                    loc7 = this.setFormat(loc6);
                    this.setTopbarWin(loc7);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_UPDATE_BALANCE:
                {
                    loc8 = uint(arg1.getBody());
                    loc9 = this.setFormat(loc8);
                    this.setTopbarBalance(loc9);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_LOGIN_SUCCESSFULL:
                case mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_MODULE_UPDATE_BALANCE:
                {
                    if (this._gameModule == null) 
                    {
                        return;
                    }
                    loc11 = (loc10 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE];
                    loc12 = this.setFormat(loc11);
                    this.setTopbarBalance(loc12);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_DISPLAYTYPE:
                {
                    loc13 = this.setFormat(this._gameModule.banking.display.winValue);
                    this.setTopbarWin(loc13);
                    loc14 = this.setFormat(this._gameModule.banking.display.betValue);
                    this.setTopbarBet(loc14);
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.BANKING_UPDATE_COINSIZE:
                {
                    loc15 = this.setFormat(this._gameModule.banking.balance);
                    this.setTopbarBalance(loc15);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_UPDATE_MUTE_ICON_GRAPHIC:
                {
                    loc16 = arg1.getBody() != "1" ? true : false;
                    this._topBarController.setSound(loc16);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.INIT_TOPBAR_SOUND:
                {
                    loc17 = arg1.getBody() != "1" ? true : false;
                    this._topBarController.setSound(loc17);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RESET_SGI_TOPBAR:
                {
                    this._gameModule = null;
                    this.setTopbarBet("");
                    this.setTopbarBalance("");
                    this.setTopbarWin("");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_TOPBAR:
                {
                    this.updateTopBar(mgs.aurora.modules.core.model.vo.TopBarUpdate(arg1.getBody()));
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SEND_TOPBAR_DATA:
                {
                    this.cacheTopbarXML(XML(arg1.getBody()));
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_BUSY:
                {
                    this.checkforUpdates();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SET_SGI_GAME_OVERRIDE:
                {
                    this.setGameOverRide();
                    break;
                }
            }
            return;
        }

        internal function setGameOverRide():void
        {
            var loc1:*=mgs.aurora.modules.core.model.GameSetProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).sgiOverride.toLowerCase();
            this._systemForce = loc1 == "" ? this._systemForceDefault : loc1 == "true";
            Debugger.trace("TOPBAR setGameOverRide (" + this._systemForce + ")", "SYSTEM - TOPBAR_CONTROLLER");
            return;
        }

        internal function cacheTopbarXML(arg1:XML):void
        {
            this._cachedXML = arg1;
            this._isCachedXML = true;
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            if (this._topBarController == null) 
            {
                this._topBarController = this.getViewComponent() as mgs.aurora.common.orbis.TopBarController;
            }
            this._topBarController.addEventListener(mgs.aurora.common.events.sgi.SgiEvent.PLAYFORREAL, this.onTopbarPlayForReal);
            return;
        }

        internal function setTopbarBalance(arg1:String):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).sgi.settings.@useExternalCashBalance;
            var loc3:*=loc2 == "1";
            Debugger.trace("TOPBAR Balance will be ignored (" + loc3 + ")", "SYSTEM - TOPBAR_CONTROLLER");
            var loc4:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (!loc3 || loc4[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.DEMO_USER) 
            {
                Debugger.trace("TOPBAR Balance (" + arg1 + ")", "SYSTEM - TOPBAR_CONTROLLER");
                this._topBarController.setBalance(arg1);
            }
            if (this._isCachedXML && this._systemForce) 
            {
                this.setCachedValuesToTopBar();
            }
            return;
        }

        internal function setTopbarBet(arg1:String):void
        {
            Debugger.trace("TOPBAR Bet  (" + arg1 + ")", "SYSTEM - TOPBAR_CONTROLLER");
            this._topBarController.setBetValue(arg1);
            return;
        }

        internal function setTopbarWin(arg1:String):void
        {
            Debugger.trace("TOPBAR Win (" + arg1 + ")", "SYSTEM - TOPBAR_CONTROLLER");
            this._topBarController.setWinValue(arg1);
            return;
        }

        internal function setTopbarExternalOperatorInfo(arg1:XML):void
        {
            Debugger.trace("TOPBAR Ext Operator Info (" + arg1 + ")", "SYSTEM - TOPBAR_CONTROLLER");
            this._isCachedXML = false;
            this._topBarController.setExternalOperatorInfo(arg1);
            return;
        }

        internal function setCachedValuesToTopBar():void
        {
            this._isCachedXML = false;
            this.setTopbarExternalOperatorInfo(this._cachedXML);
            this._cachedXML = new XML();
            return;
        }

        internal function updateTopBar(arg1:mgs.aurora.modules.core.model.vo.TopBarUpdate):void
        {
            Debugger.trace("TOPBAR UPDATE", "SYSTEM - TOPBAR_CONTROLLER");
            this.setTopbarBalance(this.setFormat(arg1.balance));
            this.setTopbarBet(this.setFormat(arg1.betVal));
            this.setTopbarWin(this.setFormat(arg1.winVal));
            if (this._isCachedXML && this._systemForce) 
            {
                this.setCachedValuesToTopBar();
            }
            else if (!(typeof arg1.xml == "xml") && this._isCachedXML) 
            {
                this.setCachedValuesToTopBar();
            }
            else if (!this._systemForce) 
            {
                this.setTopbarExternalOperatorInfo(arg1.xml);
            }
            return;
        }

        internal function checkforUpdates():void
        {
            if (this._isCachedXML && this._systemForce) 
            {
                this.setCachedValuesToTopBar();
            }
            return;
        }

        internal function setFormat(arg1:uint):String
        {
            var loc1:*=null;
            var loc5:*=0;
            var loc6:*=0;
            var loc2:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc3:*=loc2.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).casino.creditsFormat;
            var loc4:*;
            if ((loc4 = mgs.aurora.modules.core.model.BankingConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.BankingConfigProxy.NAME))).displayType == mgs.aurora.api.enums.BalanceDisplayType.COINS) 
            {
                loc5 = this._gameModule.banking.display.coinSize != 0 ? this._gameModule.banking.display.coinSize : 1;
                loc6 = arg1 / loc5;
                loc1 = mgs.aurora.common.utilities.BalanceUtils.formatNumberToCreditsDisplay(loc6, "# ###", false, false);
            }
            else 
            {
                loc1 = mgs.aurora.common.utilities.BalanceUtils.convertToCredits(arg1, int(loc3.@useTMSeparator) == 1, loc3.@separatorTM, loc3.@separatorF, false);
            }
            return loc1;
        }

        public function onTopBarSoundChange(arg1:mgs.aurora.common.events.sgi.SgiEvent):void
        {
            var loc1:*=this._topBarController.soundOn();
            this.facade.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_SOUNDS_UPDATE_MUTE, loc1 ? mgs.aurora.common.enums.frame.QuickMuteFrameLabels.ON : mgs.aurora.common.enums.frame.QuickMuteFrameLabels.OFF);
            return;
        }

        public function onTopbarPlayForReal(arg1:mgs.aurora.common.events.sgi.SgiEvent):void
        {
            this._topBarController.addEventListener(mgs.aurora.common.events.sgi.SgiEvent.REAL_PLAY, this.onRealPlayClicked);
            this._topBarController.addEventListener(mgs.aurora.common.events.sgi.SgiEvent.DEMO_PLAY, this.onDemoPlayClicked);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PROCESS_SGI_PLAYFORREAL);
            return;
        }

        public function set demoPlayerLoggedIn(arg1:Boolean):void
        {
            this._demoPlayerLoggedIn = arg1;
            return;
        }

        public function get systemForce():Boolean
        {
            return this._systemForce;
        }

        public function onRealPlayClicked(arg1:mgs.aurora.common.events.sgi.SgiEvent):void
        {
            this._topBarController.removeEventListener(mgs.aurora.common.events.sgi.SgiEvent.REAL_PLAY, this.onRealPlayClicked);
            this._topBarController.removeEventListener(mgs.aurora.common.events.sgi.SgiEvent.DEMO_PLAY, this.onDemoPlayClicked);
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc1[mgs.aurora.common.enums.configMapping.SessionConfig.SGI_LOGINTYPE] = "REAL";
            loc1[mgs.aurora.common.enums.configMapping.SessionConfig.EXTAUTHTOKEN] = this._topBarController.token;
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_TEXT_CHANGE, mgs.aurora.api.enums.PreloaderTextLabel.LOADING);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_SHOW_PRELOADER);
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc3:*;
            (loc3 = loc2.getViewComponent() as flash.display.Sprite).visible = true;
            var loc4:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME) as mgs.aurora.modules.core.view.frames.FramesBuilderMediator;
            if (this._demoPlayerLoggedIn) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_PING);
            }
            var loc5:*;
            if ((loc5 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData).getValue("waitForLogin") != "true") 
            {
                if (loc5.getValue("waitForModuleToLoad") != "true") 
                {
                    this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_LOGOUT);
                    loc4.switchFrame();
                }
                else 
                {
                    loc5.setValue("waitForModuleToLoad", "false");
                    this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE);
                    loc4.switchFrame();
                }
            }
            else 
            {
                loc5.setValue("waitForLogin", "false");
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOGIN_PROCESS);
            }
            return;
        }

        public function onDemoPlayClicked(arg1:mgs.aurora.common.events.sgi.SgiEvent):void
        {
            var loc4:*=null;
            this._topBarController.removeEventListener(mgs.aurora.common.events.sgi.SgiEvent.REAL_PLAY, this.onRealPlayClicked);
            this._topBarController.removeEventListener(mgs.aurora.common.events.sgi.SgiEvent.DEMO_PLAY, this.onDemoPlayClicked);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_TEXT_CHANGE, mgs.aurora.api.enums.PreloaderTextLabel.LOADING);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_SHOW_PRELOADER);
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.visible = true;
            var loc3:*;
            if ((loc3 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData).getValue("waitForLogin") != "true") 
            {
                loc3.setValue("waitForModuleToLoad", "false");
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.START_GAME_MODULE);
                (loc4 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME) as mgs.aurora.modules.core.view.frames.FramesBuilderMediator).switchFrame();
            }
            else 
            {
                loc3.setValue("waitForLogin", "false");
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOGIN_PROCESS);
            }
            return;
        }

        public function onShowAbout(arg1:mgs.aurora.common.events.sgi.SgiEvent):void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
            loc2.addChildAt(this._topBarController.About, 1);
            return;
        }

        public function onHideAbout(arg1:mgs.aurora.common.events.sgi.SgiEvent):void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
            loc2.removeChildAt(1);
            return;
        }

        public static const NAME:String="SGITopbarMediator";

        internal var _topBarController:mgs.aurora.common.orbis.TopBarController;

        internal var _demoPlayerLoggedIn:Boolean;

        internal var _aboutDisplaObject:flash.display.DisplayObject;

        internal var _gameModule:mgs.aurora.modules.core.view.module.GameModuleMediator;

        internal var _systemForceDefault:Boolean;

        internal var _systemForce:Boolean;

        internal var _isCachedXML:Boolean=false;

        internal var _cachedXML:XML;
    }
}


//            package sound
//              class SoundEngineMediator
package mgs.aurora.modules.core.view.sound 
{
    import flash.display.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.sounds.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class SoundEngineMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function SoundEngineMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            this.setMute();
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=arg1.getType();
            switch (loc5) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.ADD_SOUND_MODULE:
                {
                    loc1 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
                    loc2 = loc1.getViewComponent() as flash.display.Sprite;
                    loc2.addChild(this.viewComponent as flash.display.DisplayObject);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.REMOVE_SOUND_MODULE:
                {
                    (loc4 = (loc3 = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator).getViewComponent() as flash.display.Sprite).removeChild(this.viewComponent as flash.display.DisplayObject);
                    break;
                }
            }
            return;
        }

        public function set mute(arg1:Boolean):void
        {
            this.sounds.mute = arg1;
            return;
        }

        public function get sounds():mgs.aurora.common.interfaces.sounds.ISounds
        {
            return this.getViewComponent() as mgs.aurora.common.interfaces.sounds.ISounds;
        }

        internal function setMute():void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=String(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.MUTESOUND]);
            if (loc2 != "1") 
            {
                this.sounds.mute = false;
            }
            else 
            {
                this.sounds.mute = true;
            }
            return;
        }

        public static const NAME:String="SoundEngineMediator";
    }
}


//            package switchUserOverlay
//              class SwitchUserOverlayMediator
package mgs.aurora.modules.core.view.switchUserOverlay 
{
    import flash.display.*;
    import flash.text.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.events.funBonus.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.scale.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class SwitchUserOverlayMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function SwitchUserOverlayMediator(arg1:Object)
        {
            this._stage = new flash.display.Sprite();
            this._progressIcon = new flash.display.Sprite();
            this._screenshot = new flash.display.Bitmap();
            this._switchTextField = new flash.text.TextField();
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            this._stage = loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_SCRSHOT) as flash.display.Sprite;
            var loc2:*=mgs.aurora.modules.core.view.scale.ScaleManagerMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.scale.ScaleManagerMediator.NAME));
            this._stageWidth = loc2.scaleManger.initWindowWidth;
            this._stageHeight = loc2.scaleManger.initWindowHeight;
            this._progressIcon = this.viewComponent.getChildAt(0) as flash.display.Sprite;
            this.setStageUp();
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_SHOW_OVERLAY);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_HIDE_OVERLAY);
            return loc1;
        }

        internal function setStageUp():void
        {
            this._progressIcon.scaleX = 2;
            this._progressIcon.scaleY = 2;
            this._progressIcon.x = this._stageWidth / 2 - this._progressIcon.width / 2;
            this._progressIcon.y = this._stageHeight / 2 - this._progressIcon.height / 2;
            this._alpha = new flash.display.Sprite();
            var loc1:*=this._alpha.graphics;
            loc1.beginFill(0, 0.9);
            loc1.drawRect(-2, -2, this._stageWidth + 4, this._stageHeight + 4);
            loc1.endFill();
            return;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var scaleM:mgs.aurora.modules.core.view.scale.ScaleManagerMediator;
            var coreMediator:mgs.aurora.modules.core.view.CoreMediator;
            var dependenciesProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var displayConfig:XML;
            var mainStage:flash.display.Sprite;
            var textFormat:flash.text.TextFormat;
            var msg:String;
            var textColour:uint;
            var embeddedFonts:Boolean;
            var jpgSource:flash.display.BitmapData;

            var loc1:*;
            scaleM = null;
            coreMediator = null;
            dependenciesProxy = null;
            displayConfig = null;
            mainStage = null;
            textFormat = null;
            msg = null;
            textColour = 0;
            embeddedFonts = false;
            jpgSource = null;
            notification = arg1;
            var loc2:*=notification.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_SHOW_OVERLAY:
                {
                    scaleM = mgs.aurora.modules.core.view.scale.ScaleManagerMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.scale.ScaleManagerMediator.NAME));
                    if (!(this._stageWidth == scaleM.scaleManger.initWindowWidth) || !(this._stageHeight == scaleM.scaleManger.initWindowHeight)) 
                    {
                        this._stageWidth = scaleM.scaleManger.initWindowWidth;
                        this._stageHeight = scaleM.scaleManger.initWindowHeight;
                        this.setStageUp();
                    }
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
                    coreMediator = this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
                    dependenciesProxy = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME));
                    displayConfig = dependenciesProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG);
                    mainStage = coreMediator.stage as flash.display.Sprite;
                    textFormat = new flash.text.TextFormat();
                    textFormat.font = displayConfig.switchUser.settings.@font;
                    textFormat.size = displayConfig.switchUser.settings.@size;
                    textFormat.align = flash.text.TextFormatAlign.CENTER;
                    textFormat.bold = displayConfig.switchUser.settings.@bold;
                    textFormat.leading = 2;
                    if (notification.getBody() != mgs.aurora.common.enums.raptorSession.UserTypes.REAL_USER) 
                    {
                        if (notification.getBody() != mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
                        {
                            if (notification.getBody() != mgs.aurora.common.events.funBonus.FunBonusEvents.FB_CHANGE_BONUS_OFFER) 
                            {
                                if (notification.getBody() == mgs.aurora.common.events.funBonus.FunBonusEvents.FB_SWITCH_USER) 
                                {
                                    loc3 = 0;
                                    loc4 = dependenciesProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                                    loc2 = new XMLList("");
                                    for each (loc5 in loc4) 
                                    {
                                        with (loc6 = loc5) 
                                        {
                                            if (@ID == "FUNBONUSEXPIRED") 
                                            {
                                                loc2[loc3] = loc5;
                                            }
                                        }
                                    }
                                    msg = loc2.@text;
                                }
                            }
                            else 
                            {
                                loc3 = 0;
                                loc4 = dependenciesProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                                loc2 = new XMLList("");
                                for each (loc5 in loc4) 
                                {
                                    with (loc6 = loc5) 
                                    {
                                        if (@ID == "CHANGE_BONUS_OFFER") 
                                        {
                                            loc2[loc3] = loc5;
                                        }
                                    }
                                }
                                msg = loc2.@text;
                            }
                        }
                        else 
                        {
                            loc3 = 0;
                            loc4 = dependenciesProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                            loc2 = new XMLList("");
                            for each (loc5 in loc4) 
                            {
                                with (loc6 = loc5) 
                                {
                                    if (@ID == "SWITCHFUNBONUS") 
                                    {
                                        loc2[loc3] = loc5;
                                    }
                                }
                            }
                            msg = loc2.@text;
                        }
                    }
                    else 
                    {
                        var loc3:*=0;
                        var loc4:*=dependenciesProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS).string;
                        loc2 = new XMLList("");
                        for each (var loc5:* in loc4) 
                        {
                            var loc6:*;
                            with (loc6 = loc5) 
                            {
                                if (@ID == "SWITCHREALPLAY") 
                                {
                                    loc2[loc3] = loc5;
                                }
                            }
                        }
                        msg = loc2.@text;
                    }
                    textColour = displayConfig.switchUser.settings.@color;
                    embeddedFonts = displayConfig.switchUser.settings.@embeddedFonts;
                    this._switchTextField = this.createTextField(msg, textFormat, textColour, embeddedFonts, 500);
                    this._switchTextField.x = this._stageWidth / 2 - this._switchTextField.width / 2;
                    this._switchTextField.y = this._stageHeight / 2 + 50;
                    if (this._screenshot == null || !this.viewComponent.contains(this._screenshot)) 
                    {
                        this._screenshot = null;
                        jpgSource = new flash.display.BitmapData(this._stageWidth, this._stageHeight);
                        jpgSource.draw(mainStage);
                        this._screenshot = new flash.display.Bitmap(jpgSource);
                        this.viewComponent.addChildAt(this._switchTextField, 0);
                        this.viewComponent.addChildAt(this._alpha, 0);
                        this.viewComponent.addChildAt(this._screenshot, 0);
                        this._stage.addChild(this.viewComponent as flash.display.DisplayObject);
                        this._stage.visible = true;
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_HIDE_OVERLAY:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ENABLE);
                    this.cleanUpOverlap();
                    this._stage.visible = false;
                    break;
                }
            }
            return;
        }

        internal function cleanUpOverlap():void
        {
            if (this.viewComponent.contains(this._screenshot)) 
            {
                this.viewComponent.removeChild(this._switchTextField);
                this.viewComponent.removeChild(this._alpha);
                this.viewComponent.removeChild(this._screenshot);
                this._stage.removeChild(this.viewComponent as flash.display.DisplayObject);
            }
            return;
        }

        internal function createTextField(arg1:String, arg2:flash.text.TextFormat, arg3:uint, arg4:Boolean=true, arg5:int=400):flash.text.TextField
        {
            this._switchTextField.defaultTextFormat = arg2;
            this._switchTextField.multiline = false;
            this._switchTextField.selectable = false;
            this._switchTextField.embedFonts = arg4;
            this._switchTextField.textColor = arg3;
            this._switchTextField.htmlText = arg1;
            this._switchTextField.autoSize = flash.text.TextFieldAutoSize.CENTER;
            if (this._switchTextField.width > arg5) 
            {
                this._switchTextField.wordWrap = true;
                this._switchTextField.width = arg5;
            }
            return this._switchTextField;
        }

        internal var _stage:flash.display.Sprite;

        internal var _alpha:flash.display.Sprite;

        internal var _progressIcon:flash.display.Sprite;

        internal var _stageWidth:uint;

        internal var _stageHeight:uint;

        internal var _screenshot:flash.display.Bitmap;

        internal var _switchTextField:flash.text.TextField;
    }
}


//            package vpb
//              class VirtualPitBossMediator
package mgs.aurora.modules.core.view.vpb 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.bonusBubble.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.raptorSession.*;
    import mgs.aurora.common.enums.vpb.*;
    import mgs.aurora.common.events.vpb.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.common.interfaces.sounds.*;
    import mgs.aurora.common.interfaces.vpb.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.externalLauncher.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import mgs.aurora.modules.core.view.frames.*;
    import mgs.aurora.modules.core.view.module.*;
    import mgs.aurora.modules.core.view.sound.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class VirtualPitBossMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.vpb.IVPB
    {
        public function VirtualPitBossMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ENABLE);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE:
                {
                    this.disable();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ENABLE:
                {
                    this.enable();
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            this.iVPB = this.getViewComponent() as mgs.aurora.common.interfaces.vpb.IVPB;
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.SETUP_COMPLETE, this.onSetUpComplete);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.ERROR, this.onError);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.IS_GAME_VALID, this.onValidateGame);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.IS_WEB_APP_AVAILABLE, this.onValidateWebApp);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.ACTION_NOTIFICATION, this.onAction);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.UPDATE_BALANCE, this.onUpdateBalance);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.REQUEST_WEB_APP_DETAILS, this.onRequestWebAppDetails);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.DISPLAY_INVALID_GAME_MESSAGE, this.onDisplayInValidGameMessage);
            this.iVPB.addEventListener(mgs.aurora.common.events.vpb.VPBEvent.SWITCH_USER_TYPE, this.onSwitchUserType);
            var loc3:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG);
            var loc4:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc5:*=mgs.aurora.common.interfaces.comms.IXManPacketSender(loc4.getLoaderInfoDependency(mgs.aurora.modules.core.enum.DependencyName.XMAN_MODULE).content);
            var loc6:*;
            var loc7:*=(loc6 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc8:*=mgs.aurora.modules.core.view.sound.SoundEngineMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.sound.SoundEngineMediator.NAME)).sounds;
            var loc9:*;
            var loc10:*=(loc9 = mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher).getWindowParameters();
            this.setup(loc3, loc5, loc7, loc8, loc10);
            var loc11:*=mgs.aurora.modules.core.view.CoreMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME)).stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_VPB) as flash.display.DisplayObjectContainer;
            this.setDialogParent(loc11);
            var loc12:*=mgs.aurora.modules.core.view.frames.FramesBuilderMediator(this.facade.retrieveMediator(mgs.aurora.modules.core.view.frames.FramesBuilderMediator.NAME)).currentFrameType;
            this.setFrameType(loc12);
            var loc13:*=mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getLoaderInfoDependency("dependency/vpb_assets");
            this.setArtAsset(loc13);
            this.enable();
            return;
        }

        public function disable():void
        {
            this.iVPB.disable();
            return;
        }

        public function enable():void
        {
            var loc1:*=new XML(mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.BRAND_CONFIG).vpb);
            if (loc1.@supported == "1") 
            {
                this.iVPB.enable();
            }
            return;
        }

        public function gameIsValid(arg1:Boolean):void
        {
            this.iVPB.gameIsValid(arg1);
            return;
        }

        public function setArtAsset(arg1:flash.display.LoaderInfo):void
        {
            this.iVPB.setArtAsset(arg1);
            return;
        }

        public function setDialogParent(arg1:flash.display.DisplayObjectContainer):void
        {
            this.iVPB.setDialogParent(arg1);
            return;
        }

        public function setFrameType(arg1:String):void
        {
            this.iVPB.setFrameType(arg1);
            return;
        }

        public function setup(arg1:XML, arg2:mgs.aurora.common.interfaces.comms.IXManPacketSender, arg3:Object, arg4:mgs.aurora.common.interfaces.sounds.ISounds, arg5:flash.utils.Dictionary):void
        {
            this.iVPB.setup(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function webAppAvailable(arg1:Boolean):void
        {
            this.iVPB.webAppAvailable(arg1);
            return;
        }

        public function webAppLaunchDetails(arg1:flash.utils.Dictionary):void
        {
            this.iVPB.webAppLaunchDetails(arg1);
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.viewComponent.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.viewComponent.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.viewComponent.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.viewComponent.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.viewComponent.willTrigger(arg1);
        }

        internal function onUpdateBalance(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            var loc2:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.module.GameModuleMediator.NAME) as mgs.aurora.modules.core.view.module.GameModuleMediator;
            if ((loc2 == null || loc2.moduleStatus == null || !loc2.moduleStatus.busy) && !(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS)) 
            {
                loc1[mgs.aurora.common.enums.configMapping.SessionConfig.BALANCE] = arg1.value;
            }
            return;
        }

        internal function onAction(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ACTION, arg1.actionDetails);
            return;
        }

        internal function onValidateWebApp(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            this.webAppAvailable(loc1.isWebAppValid(arg1.webAppName));
            return;
        }

        internal function onValidateGame(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            var e:mgs.aurora.common.events.vpb.VPBEvent;
            var gamesList:XML;
            var result:XMLList;
            var gameSet:XML;
            var hidden:Boolean;

            var loc1:*;
            gamesList = null;
            result = null;
            gameSet = null;
            hidden = false;
            e = arg1;
            gamesList = mgs.aurora.modules.core.model.DependenciesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME)).getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.GAMES_LIST);
            var loc3:*=0;
            var loc4:*=gamesList;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@mid == String(e.gameDetails.moduleID) && @cid == String(e.gameDetails.clientID)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            result = loc2;
            gameSet = new XML();
            if (result.length() <= 1) 
            {
                gameSet = result.parent();
            }
            else 
            {
                gameSet = result[0].parent();
            }
            if (this.facade.hasProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME)) 
            {
                hidden = mgs.aurora.modules.core.model.HiddenGamesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME)).isHidden(String(e.gameDetails.moduleID), String(e.gameDetails.clientID));
                if (hidden) 
                {
                    this.gameIsValid(false);
                    return;
                }
            }
            this.gameIsValid(result.length() > 0);
            return;
        }

        internal function onDisplayInValidGameMessage(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            var loc1:*=0;
            if (arg1.errorType != mgs.aurora.common.enums.vpb.VPBErrorTypes.LAUNCHING_SAME_GAME) 
            {
                if (this.facade.hasProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME)) 
                {
                    loc1 = mgs.aurora.modules.core.model.HiddenGamesProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.HiddenGamesProxy.NAME)).getMessageIDFromMID(String(arg1.gameDetails.moduleID), String(arg1.gameDetails.clientID));
                }
            }
            else 
            {
                loc1 = mgs.aurora.modules.core.enum.GameBlockedMessages.SAME_GAME_MESSAGE;
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_NOT_AVAILABLE, loc1, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ONLY_DIALOGUE);
            return;
        }

        internal function onRequestWebAppDetails(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.ExternalLauncherProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalLauncherProxy.NAME)).externalLauncher;
            var loc2:*=loc1.getLaunchDetails(arg1.value);
            this.webAppLaunchDetails(loc2);
            return;
        }

        internal function onSwitchUserType(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            var loc1:*=mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            if (!(loc1[mgs.aurora.common.enums.configMapping.SessionConfig.FUN_BONUS_TYPE] == mgs.aurora.common.enums.bonusBubble.BonusBubbleTypes.FULL_FUN_BONUS_BUBBLE) && uint(arg1.userType) == mgs.aurora.common.enums.raptorSession.UserTypes.FUN_BONUS) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_FUN_BONUS_UNAVAILABLE_DIALOGUE);
            }
            else 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USERTYPE_REQUEST, arg1.userType, mgs.aurora.modules.core.enum.FunBonusEventSource.RMM);
            }
            return;
        }

        internal function onError(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            return;
        }

        internal function onSetUpComplete(arg1:mgs.aurora.common.events.vpb.VPBEvent):void
        {
            return;
        }

        public static const NAME:String="VirtualPitBossMediator";

        internal var iVPB:mgs.aurora.common.interfaces.vpb.IVPB;
    }
}


//            package xman
//              class XManMediator
package mgs.aurora.modules.core.view.xman 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.enums.genie.*;
    import mgs.aurora.common.events.*;
    import mgs.aurora.common.events.comms.*;
    import mgs.aurora.common.interfaces.comms.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class XManMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator, mgs.aurora.common.interfaces.comms.IXMan
    {
        public function XManMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        internal function onError(arg1:mgs.aurora.common.events.comms.XManEvent):void
        {
            var loc1:*=arg1.errorType;
            switch (loc1) 
            {
                case mgs.aurora.common.enums.CommsErrorTypes.INVALID_PACKET_REQUEST_DATA:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.XMAN_INVALID_PACKET_REQUEST + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
                case mgs.aurora.common.enums.CommsErrorTypes.NO_SERVER_ID_SUPPLIED:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.XMAN_MISSING_SERVER_ID + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
                case mgs.aurora.common.enums.CommsErrorTypes.PACKET_MISMATCH_CORRECTION_FAILED:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.XMAN_PACKET_MISMATCH_CORRECTION_FAIL + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
                case mgs.aurora.common.enums.CommsErrorTypes.DUPLICATE_PACKET_ID:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.XMAN_DUPLICATE_PACKET_ID + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
                case mgs.aurora.common.enums.CommsErrorTypes.INVALID_CONFIG_DATA:
                case mgs.aurora.common.enums.CommsErrorTypes.CONFIG_NOT_INITIALIZED:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.GENERAL_UNKNOWN + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, arg1.responsePacket, mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE);
            return;
        }

        internal function onSessionChanged(arg1:mgs.aurora.common.events.SystemConfigEvent):void
        {
            this.setSessionID(arg1.value);
            return;
        }

        internal function onXmanValueChanged(arg1:mgs.aurora.common.events.SystemConfigEvent):void
        {
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.getViewComponent() as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            this.initXmanModule();
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_SESSIONTIMER);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_SESSIONTIMER);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_PING);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_PING);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SEND_PACKET);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CLEAN_ON_ERROR);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_KEEPALIVE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_KEEPALIVE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_RESET_KEEPALIVE_BEFORE_GAME_LOAD);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SET_SERVERID);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_UPDATE_TIMER_CONFIG);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CASINO_CLOSING);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.END_FUN_BONUS);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=arg1.getName();
            switch (loc7) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_KEEPALIVE:
                {
                    if (!this._keepAlive) 
                    {
                        Debugger.trace("Start \"Keep Alive\" Pings", "SYSTEM - Pings");
                        this.startPing();
                        this._keepAlive = true;
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_KEEPALIVE:
                {
                    if (this._keepAlive) 
                    {
                        Debugger.trace("Stop \"Keep Alive\" Pings", "SYSTEM - Pings");
                        this._keepAlive = false;
                        this.stopPing();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_RESET_KEEPALIVE_BEFORE_GAME_LOAD:
                {
                    Debugger.trace("Reset \"Keep Alive\" Pings before game loads", "SYSTEM - Pings");
                    this._keepAlive = false;
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_SESSIONTIMER:
                {
                    if (!this._sessionTimerStarted) 
                    {
                        this.startSessionTimer();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_SESSIONTIMER:
                {
                    if (this._sessionTimerStarted) 
                    {
                        this.stopSessionTimer();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_PING:
                {
                    if (!this._keepAlive) 
                    {
                        this.startPing();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_PING:
                {
                    if (!this._keepAlive) 
                    {
                        this.stopPing();
                    }
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SEND_PACKET:
                {
                    loc1 = arg1.getBody() as flash.utils.Dictionary;
                    loc1[mgs.aurora.common.enums.XManPacketParameterKeys.PACKET_ID] = mgs.aurora.modules.core.view.CoreMediator.NAME + mgs.aurora.modules.core.view.xman.XManMediator.NAME;
                    loc1[mgs.aurora.common.enums.XManPacketParameterKeys.EVENT_NAME] = mgs.aurora.modules.core.view.CoreMediator.NAME + mgs.aurora.modules.core.view.xman.XManMediator.NAME;
                    this.sendPacket(arg1.getBody() as flash.utils.Dictionary);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CLEAN_ON_ERROR:
                {
                    this.stopPing();
                    this.stopSessionTimer();
                    this.clearPendingPacketQueue();
                    loc2 = this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
                    (loc3 = loc2.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION))[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID] = "";
                    loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTPASSWORD] = "";
                    loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CURRENTUSERNAME] = "";
                    loc3[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_USERID] = "";
                    loc3[mgs.aurora.common.enums.configMapping.SessionConfig.SESSION_AUTHENTICATION_TOKEN] = "";
                    loc3[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE] = "";
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_SET_SERVERID:
                {
                    loc4 = arg1.getBody() as String;
                    this.setServerID(loc4);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_UPDATE_TIMER_CONFIG:
                {
                    Debugger.trace("XMAN_UPDATE_TIMER_CONFIG", "SYSTEM - Xman");
                    loc5 = arg1.getBody() as Object;
                    this.updateTimerConfig(loc5);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CASINO_CLOSING:
                {
                    this.casinoClosing();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.END_FUN_BONUS:
                {
                    (loc6 = new flash.utils.Dictionary())[mgs.aurora.common.enums.XManPacketParameterKeys.CLIENT_ID] = "10001";
                    loc6[mgs.aurora.common.enums.XManPacketParameterKeys.MODULE_ID] = "1";
                    loc6[mgs.aurora.common.enums.XManPacketParameterKeys.PACKET_ID] = "FunBonus";
                    loc6[mgs.aurora.common.enums.XManPacketParameterKeys.VERB] = "GenericXML";
                    loc6[mgs.aurora.common.enums.XManPacketParameterKeys.REQUEST] = new XML("<Request><FunBonusForfeit/></Request>");
                    loc6[mgs.aurora.common.enums.XManPacketParameterKeys.RESET_SESSION_TIMER] = true;
                    loc6[mgs.aurora.common.enums.XManPacketParameterKeys.EVENT_NAME] = "onFunBonusEvent";
                    this.sendPacket(loc6);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function setup(arg1:Object):void
        {
            this.viewComponent.setup(arg1);
            return;
        }

        public function sendPacket(arg1:flash.utils.Dictionary):void
        {
            this.viewComponent.sendPacket(arg1);
            return;
        }

        public function startSessionTimer():void
        {
            this._sessionTimerStarted = true;
            this.viewComponent.startSessionTimer();
            return;
        }

        public function stopSessionTimer():void
        {
            this._sessionTimerStarted = false;
            this.viewComponent.stopSessionTimer();
            return;
        }

        public function stopPacketTimer():void
        {
            this.viewComponent.stopPacketTimer();
            return;
        }

        public function clearPendingPacketQueue():void
        {
            this.viewComponent.clearPendingPacketQueue();
            return;
        }

        public function setClientLang(arg1:String):void
        {
            this.viewComponent.setClientLang(arg1);
            return;
        }

        public function setSessionID(arg1:String):void
        {
            this.viewComponent.setSessionID(arg1);
            return;
        }

        public function setServerID(arg1:String):void
        {
            this.viewComponent.setServerID(arg1);
            return;
        }

        public function startPing():void
        {
            if (!this._pinging) 
            {
                Debugger.trace("Start Pings", "SYSTEM - Pings");
                this._pinging = true;
                this.viewComponent.startPing();
            }
            return;
        }

        public function stopPing():void
        {
            if (this._pinging) 
            {
                Debugger.trace("Stop Pings", "SYSTEM - Pings");
                this.viewComponent.stopPing();
                this._pinging = false;
            }
            return;
        }

        public function updateTimerConfig(arg1:Object):void
        {
            Debugger.trace("updateTimerConfig ", "SYSTEM - Xman");
            Debugger.trace(arg1, "SYSTEM - Xman");
            this.viewComponent.updateTimerConfig(arg1);
            return;
        }

        public function casinoClosing():void
        {
            this.viewComponent.casinoClosing();
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this.viewComponent.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this.viewComponent.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this.viewComponent.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this.viewComponent.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this.viewComponent.willTrigger(arg1);
        }

        internal function initXmanModule():void
        {
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.ERROR, this.onError);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.PACKET_SENT, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.PACKET_TIMEDOUT, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.SESSION_TIMEDOUT, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.SESSION_TIMER_STARTED, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.SESSION_TIMER_STOPPED, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.SETUP_COMPLETE, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.XManEvent.HEADER_NOT_SUPPORTED, this.onGeneralEvent);
            this.addEventListener(mgs.aurora.common.events.comms.PacketEvent.RESPONSE_PACKET_RECEIVED, this.onResponseReceived);
            this.addEventListener(mgs.aurora.modules.core.view.CoreMediator.NAME + mgs.aurora.modules.core.view.xman.XManMediator.NAME, this.onCoreSpecificPacketReceived);
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME) as mgs.aurora.modules.core.model.configMapping.SystemConfigProxy;
            var loc2:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.XMAN);
            var loc3:*=loc1.getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
            loc3[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID] = loc2[mgs.aurora.common.enums.configMapping.SessionConfig.SERVERID];
            loc3[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID] = "";
            loc3[mgs.aurora.common.enums.configMapping.SessionConfig.SESSIONID].addEventListener(mgs.aurora.common.events.SystemConfigEvent.VALUE_CHANGED, this.onSessionChanged);
            loc2[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_CUSTOM_HEADER] = loc3[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_CUSTOM_HEADER];
            if (loc3[mgs.aurora.common.enums.configMapping.SessionConfig.ENABLE_CUSTOM_HEADER] == true) 
            {
                loc2[mgs.aurora.common.enums.configMapping.SessionConfig.CUSTOM_HEADER_VALUE] = loc3[mgs.aurora.common.enums.configMapping.SessionConfig.CUSTOM_HEADER_VALUE];
            }
            this.setup(loc2);
            return;
        }

        internal function onResponseReceived(arg1:mgs.aurora.common.events.comms.PacketEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_STOP_CONNECTION_ANIMATION);
            return;
        }

        internal function onCoreSpecificPacketReceived(arg1:mgs.aurora.common.events.comms.PacketEvent):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_CORE_INVOKED_PACKET_RECEIVED, arg1);
            return;
        }

        internal function onGeneralEvent(arg1:mgs.aurora.common.events.comms.XManEvent):void
        {
            var loc1:*=arg1.type;
            switch (loc1) 
            {
                case mgs.aurora.common.events.comms.XManEvent.SESSION_TIMEDOUT:
                {
                    Debugger.trace("SESSION_TIMEOUT XmanMediator ", "SYSTEM");
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_TIMEOUT, "ERRORSTR3", mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_INFO_ERROR_DIALOGUE_INTERNAL);
                    break;
                }
                case mgs.aurora.common.events.comms.XManEvent.PACKET_TIMEDOUT:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, "ERRORSTR2", mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.XMAN_PACKET_TIMEOUT + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
                case mgs.aurora.common.events.comms.XManEvent.PACKET_SENT:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.FRAME_START_CONNECTION_ANIMATION);
                    break;
                }
                case mgs.aurora.common.events.comms.XManEvent.HEADER_NOT_SUPPORTED:
                {
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SYSTEM_ERROR, "ERRORSTR18", mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_ERROR_DIALOGUE_INTERNAL);
                    this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.GENIE_CASINO_ERROR, mgs.aurora.common.enums.genie.GenieInternalErrorCodes.XMAN_CUSTOM_HEADER_NOT_SUPPORTED + "|" + mgs.aurora.common.enums.genie.GenieCasinoErrorTypes.CLIENT);
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public static const NAME:String="XManMediator";

        internal var _keepAlive:Boolean=false;

        internal var _pinging:Boolean=false;

        internal var _sessionTimerStarted:Boolean=false;
    }
}


//            class CoreJunctionMediator
package mgs.aurora.modules.core.view 
{
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;
    
    public class CoreJunctionMediator extends org.puremvc.as3.multicore.utilities.pipes.plumbing.JunctionMediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function CoreJunctionMediator()
        {
            super(NAME, new org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction());
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CONNECT_MODULE_TO_JUNCTION);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody();
            var loc2:*=arg1.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.CONNECT_MODULE_TO_JUNCTION:
                {
                    this.connectModule(org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeAware(loc1.module), loc1.pipeTo, loc1.pipeFrom, loc1.handlerScope, loc1.handlerMethod);
                    break;
                }
                default:
                {
                    super.handleNotification(arg1);
                    break;
                }
            }
            return;
        }

        public override function handlePipeMessage(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):void
        {
            var loc1:*=arg1.getType();
        }

        public function sendPipeMessage(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            if (this.junction.hasOutputPipe(arg1)) 
            {
                this.junction.sendMessage(arg1, arg2);
                return true;
            }
            return false;
        }

        public function connectModule(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeAware, arg2:String, arg3:String, arg4:*=null, arg5:Function=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            junction.registerPipe(arg2, org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction.OUTPUT, new org.puremvc.as3.multicore.utilities.pipes.plumbing.TeeSplit());
            junction.registerPipe(arg3, org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction.INPUT, new org.puremvc.as3.multicore.utilities.pipes.plumbing.TeeMerge());
            junction.addPipeListener(arg3, arg4, arg5);
            if (arg1 != null) 
            {
                loc1 = new org.puremvc.as3.multicore.utilities.pipes.plumbing.Pipe();
                arg1.acceptOutputPipe(arg3, loc1);
                (loc2 = junction.retrievePipe(arg3) as org.puremvc.as3.multicore.utilities.pipes.plumbing.TeeMerge).connectInput(loc1);
                loc3 = new org.puremvc.as3.multicore.utilities.pipes.plumbing.Pipe();
                arg1.acceptInputPipe(arg2, loc3);
                (loc4 = junction.retrievePipe(arg2) as org.puremvc.as3.multicore.utilities.pipes.plumbing.TeeSplit).connect(loc3);
            }
            return;
        }

        public function disconnectModule(arg1:String, arg2:String):void
        {
            if (junction.hasPipe(arg1)) 
            {
                org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting(junction.retrievePipe(arg1)).disconnect();
                junction.removePipe(arg1);
            }
            if (junction.hasPipe(arg2)) 
            {
                org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting(junction.retrievePipe(arg2)).disconnect();
                junction.removePipe(arg2);
            }
            return;
        }

        public static const NAME:String="CoreJunctionMediator";
    }
}


//            class CoreMediator
package mgs.aurora.modules.core.view 
{
    import flash.display.*;
    import flash.external.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import mgs.aurora.modules.core.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class CoreMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function CoreMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MODAL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_PRELOADER_MODAL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_PRELOADER_MODAL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BACKGROUND_ALPHA);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.SET_CORELAYER_RESIZE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_AFTER_SWITCH);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=NaN;
            var loc3:*=arg1.getName();
            switch (loc3) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_MODAL:
                {
                    this.showModal(false);
                    this.switchFocusToStage();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_MODAL:
                {
                    this.showModal(true);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_PRELOADER_MODAL:
                {
                    loc1 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                    this.showPreloaderModal(false);
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SWITCH_USER_HIDE_OVERLAY);
                    if (loc1[mgs.aurora.common.enums.configMapping.SessionConfig.USERTYPE_SWITCH]) 
                    {
                        if (this._launchAfterSwitch != null) 
                        {
                            this.sendNotification(this._launchAfterSwitch.site, this._launchAfterSwitch.data);
                            this._launchAfterSwitch = null;
                        }
                        sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.UPDATE_FRAME_AFTER_USER_SWITCH);
                    }
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_ENABLE);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_PRELOADER_MODAL:
                {
                    this.showPreloaderModal(true);
                    sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.VPB_DISABLE);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BACKGROUND_ALPHA:
                {
                    loc2 = Number(arg1.getBody());
                    this.setPreloaderModalAlpha(loc2);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.SET_CORELAYER_RESIZE:
                {
                    this.setLayerSizes();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.LAUNCH_AFTER_SWITCH:
                {
                    this._launchAfterSwitch = arg1.getBody();
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public override function onRegister():void
        {
            super.onRegister();
            this.stage.stage.stageFocusRect = false;
            var loc1:*=new flash.display.Sprite();
            loc1.name = LAYER_GAME;
            this.stage.addChild(loc1);
            var loc2:*=new flash.display.Sprite();
            loc2.name = LAYER_FRAME;
            this.stage.addChild(loc2);
            var loc3:*=new flash.display.Sprite();
            loc3.name = LAYER_BONUSBUBBLE;
            this.stage.addChild(loc3);
            var loc4:*=0;
            var loc5:*;
            (loc5 = new flash.display.Sprite()).name = LAYER_TOOLTIP;
            loc5.graphics.beginFill(loc4, 0);
            loc5.graphics.drawRect(0, 0, this.stage.stage.stageWidth, this.stage.stage.stageHeight);
            loc5.graphics.endFill();
            loc5.mouseChildren = false;
            loc5.mouseEnabled = false;
            this.stage.addChild(loc5);
            var loc6:*;
            (loc6 = new flash.display.Sprite()).name = LAYER_MODAL;
            loc6.graphics.beginFill(loc4, 0.5);
            loc6.graphics.drawRect(0, 0, this.stage.stage.stageWidth, this.stage.stage.stageHeight);
            loc6.graphics.endFill();
            loc6.buttonMode = true;
            loc6.useHandCursor = false;
            loc6.visible = false;
            this.stage.addChild(loc6);
            var loc7:*;
            (loc7 = new flash.display.Sprite()).name = LAYER_PRELOADER_MODAL;
            loc7.buttonMode = true;
            loc7.useHandCursor = false;
            loc7.visible = true;
            this.stage.addChild(loc7);
            var loc8:*;
            (loc8 = new flash.display.Sprite()).name = LAYER_PRELOADER;
            this.stage.addChild(loc8);
            var loc9:*;
            (loc9 = new flash.display.Sprite()).name = LAYER_SCRSHOT;
            loc9.visible = false;
            this.stage.addChild(loc9);
            var loc10:*;
            (loc10 = new flash.display.Sprite()).name = LAYER_DIALOGUE;
            this.stage.addChild(loc10);
            var loc11:*;
            (loc11 = new flash.display.Sprite()).name = LAYER_VPB;
            this.stage.addChild(loc11);
            return;
        }

        public function get stage():flash.display.Sprite
        {
            return this.viewComponent as flash.display.Sprite;
        }

        public function setLayerSizes():void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            var loc2:*=loc1.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.FRAMES_FRAMEDISPLAY_CONFIG);
            var loc3:*=mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
            var loc4:*=mgs.aurora.common.utilities.StringUtils.stringToBoolean(String(loc3.getValue("widescreen", "false")).toLowerCase());
            var loc5:*=Number(loc2.systemFrame.@width);
            var loc6:*=Number(loc2.systemFrame.@height);
            Debugger.trace("setLayerSizes width = " + loc5 + " : height  = " + loc6, "SYSTEM");
            Debugger.trace("setLayerSizes widescreen  = " + loc4, "SYSTEM");
            var loc7:*;
            (loc7 = this.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_MODAL) as flash.display.Sprite).width = loc4 ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH : loc5;
            loc7.height = loc4 ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_HEIGHT : loc6;
            var loc8:*;
            (loc8 = this.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_PRELOADER_MODAL) as flash.display.Sprite).width = loc5 + 2;
            loc8.height = loc6 + 2;
            var loc9:*;
            (loc9 = this.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_TOOLTIP) as flash.display.Sprite).width = loc4 ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH : loc5;
            loc9.height = loc4 ? mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_HEIGHT : loc6;
            flash.external.ExternalInterface.call("setExternalInit", loc7.width, loc7.height);
            return;
        }

        public function showModal(arg1:Boolean):void
        {
            var loc1:*=this.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_MODAL) as flash.display.Sprite;
            loc1.visible = arg1;
            loc1.stage.focus = loc1;
            return;
        }

        public function showPreloaderModal(arg1:Boolean):void
        {
            var loc1:*=this.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_PRELOADER_MODAL) as flash.display.Sprite;
            loc1.visible = arg1;
            loc1.stage.focus = loc1;
            return;
        }

        public function setPreloaderModalAlpha(arg1:Number):void
        {
            var loc1:*=this.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_PRELOADER_MODAL) as flash.display.Sprite;
            loc1.alpha = arg1;
            return;
        }

        internal function switchFocusToStage():void
        {
            this.stage.stage.focus = this.stage;
            return;
        }

        public static const NAME:String="CoreMediator";

        public static const LAYER_GAME:String="layer_game";

        public static const LAYER_FRAME:String="layer_frame";

        public static const LAYER_BONUSBUBBLE:String="layer_bonusbubble";

        public static const LAYER_TOOLTIP:String="layer_tooltip";

        public static const LAYER_MODAL:String="layer_modal";

        public static const LAYER_PRELOADER_MODAL:String="layer_preloader_modal";

        public static const LAYER_PRELOADER:String="layer_preloader";

        public static const LAYER_DIALOGUE:String="layer_dialogue";

        public static const LAYER_VPB:String="layer_vpb";

        public static const LAYER_SCRSHOT:String="layer_scrshot";

        internal var _launchAfterSwitch:Object;
    }
}


//            class LoaderMediator
package mgs.aurora.modules.core.view 
{
    import flash.utils.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.interfaces.loader.*;
    import mgs.aurora.modules.contentLoader.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.states.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.statemachine.*;
    
    public class LoaderMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function LoaderMediator(arg1:Object)
        {
            this.gamefiles = new Array();
            this.delayedLoadFiles = new Array();
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            this.contentLoader.onProgress.add(this.onProgress);
            this.contentLoader.onRequriedProgress.add(this.onRequiredProgress);
            this.contentLoader.onPrefetchServedProgress.add(this.onPrefetchServedProgress);
            this.contentLoader.onComplete.add(this.onComplete);
            this.contentLoader.onStarted.add(this.onStarted);
            this.contentLoader.onStopped.add(this.onStopped);
            this.contentLoader.onPrefetchComplete.add(this.onPrefetchComplete);
            return;
        }

        public override function onRemove():void
        {
            this.contentLoader.onProgress.remove(this.onProgress);
            this.contentLoader.onRequriedProgress.remove(this.onRequiredProgress);
            this.contentLoader.onPrefetchServedProgress.remove(this.onPrefetchServedProgress);
            this.contentLoader.onComplete.remove(this.onComplete);
            this.contentLoader.onStarted.remove(this.onStarted);
            this.contentLoader.onStopped.remove(this.onStopped);
            this.contentLoader.onPrefetchComplete.remove(this.onPrefetchComplete);
            this.contentLoader.dispose();
            this.viewComponent = null;
            this.gamefiles = null;
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.STOP_LOADING_URL);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.CLEAR_PREFETCH_DATA);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PROCESS_DELAYED_DOWNLOAD);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=false;
            var loc3:*=false;
            var loc4:*=null;
            var loc5:*=arg1.getName();
            switch (loc5) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.START_LOADING_URL:
                {
                    loc2 = false;
                    loc3 = false;
                    if ((loc4 = this.getClassName(arg1.getBody())) != "Object") 
                    {
                        loc1 = mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo(arg1.getBody());
                    }
                    else 
                    {
                        loc1 = this.getRequestFromNotification(arg1.getBody());
                        loc2 = this.getDelayedFlagFromNotification(arg1.getBody());
                        loc3 = this.getMPFEarlyDownloadFlagFromNotification(arg1.getBody());
                    }
                    this.startUrlLoad(loc1, loc2, loc3);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.STOP_LOADING_URL:
                {
                    this.stopUrlLoad();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.CLEAR_PREFETCH_DATA:
                {
                    this.clearPrefetchData();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.PROCESS_DELAYED_DOWNLOAD:
                {
                    this.loadDelayedFiles();
                    break;
                }
                default:
                {
                    super.handleNotification(arg1);
                }
            }
            return;
        }

        internal function onStarted(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.URL_LOAD_STARTED, arg1);
            Debugger.trace("onStarted - " + arg1.request.url);
            return;
        }

        internal function onStopped(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.URL_LOAD_STOPPED, arg1);
            Debugger.trace("onStopped - " + arg1.request.url);
            return;
        }

        internal function onProgress(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.URL_LOAD_PROGRESS_RECIEVED, arg1);
            return;
        }

        internal function onPrefetchServedProgress(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_SET_PREFETCHSERVED_PROGRESS, arg1);
            return;
        }

        internal function onRequiredProgress(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_SET_REQUIRED_PROGRESS, arg1);
            return;
        }

        internal function onComplete(arg1:mgs.aurora.common.interfaces.loader.IURLLoadResponseInfo):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.UrlLoadResponseProxy.NAME) as mgs.aurora.modules.core.model.UrlLoadResponseProxy;
            loc1.saveResponse(arg1);
            if (arg1.request.id.indexOf("dependency/") != -1) 
            {
                if (this._delayedLoadFilesCount >= 0) 
                {
                    var loc2:*;
                    var loc3:*=((loc2 = this)._delayedLoadFilesCount - 1);
                    loc2._delayedLoadFilesCount = loc3;
                    if (this._delayedLoadFilesCount == 0) 
                    {
                        this.initializeDelayedComponents();
                    }
                }
                Debugger.trace("onComplete - " + arg1.request.url);
            }
            return;
        }

        internal function onPrefetchComplete():void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.PREFETCH_COMPLETED);
            return;
        }

        public function startUrlLoad(arg1:mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo, arg2:Boolean, arg3:Boolean):void
        {
            var loc3:*=null;
            Debugger.trace("startUrlLoad1 - " + arg1.url);
            var loc1:*=this.facade.retrieveMediator(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.NAME) as org.puremvc.as3.multicore.utilities.statemachine.StateMachine;
            var loc2:*;
            if ((loc2 = org.puremvc.as3.multicore.utilities.statemachine.State(loc1.getViewComponent())).name == "core/state/game_module_start_load" || loc2.name == "core/state/game_module_apistatus_init") 
            {
                this.gamefiles.push(mgs.aurora.modules.contentLoader.model.files.Utils.cleanUrl(arg1.url));
            }
            if (arg3) 
            {
                if ((loc3 = mgs.aurora.modules.core.model.ExternalDataProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData).getValue("mpfRequired") == "True") 
                {
                    arg2 = false;
                }
            }
            if (arg2) 
            {
                this.delayedLoadFiles.push(arg1);
                this.sendNotification(org.puremvc.as3.multicore.utilities.statemachine.StateMachine.ACTION, null, mgs.aurora.modules.core.states.StateActions.LOAD_NEXT_DEPENDENCY);
            }
            else 
            {
                this.contentLoader.loadFile(arg1);
            }
            return;
        }

        public function stopUrlLoad():void
        {
            this.contentLoader.stopLoading();
            return;
        }

        internal function get contentLoader():mgs.aurora.modules.contentLoader.ContentLoader
        {
            return this.viewComponent as mgs.aurora.modules.contentLoader.ContentLoader;
        }

        public function clearPrefetchData():void
        {
            this.contentLoader.clearPrefetchData();
            return;
        }

        internal function getClassName(arg1:Object):String
        {
            var loc1:*=flash.utils.getQualifiedClassName(arg1);
            if (loc1 == null) 
            {
                return null;
            }
            return loc1;
        }

        internal function getRequestFromNotification(arg1:Object):mgs.aurora.common.interfaces.loader.IURLLoadRequestInfo
        {
            return arg1.request;
        }

        internal function getDelayedFlagFromNotification(arg1:Object):Boolean
        {
            return arg1.delayed;
        }

        internal function getMPFEarlyDownloadFlagFromNotification(arg1:Object):Boolean
        {
            return arg1.mpfEarlyDownload;
        }

        internal function loadDelayedFiles():void
        {
            var loc1:*=null;
            this._delayedLoadFilesCount = this.delayedLoadFiles.length;
            var loc2:*=0;
            var loc3:*=this.delayedLoadFiles;
            for each (loc1 in loc3) 
            {
                this.contentLoader.loadFile(loc1);
            }
            return;
        }

        internal function initializeDelayedComponents():void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_BONUS_BUBBLE_MODULE);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_VPB_MODULE);
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.core.model.MPFProxy.NAME) as mgs.aurora.modules.core.model.MPFProxy;
            if (loc1 == null) 
            {
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_MAGNETO_MODULE);
                facade.removeCommand(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ATTEMPT_CONNECTIONS);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.INIT_MPF_MODULE);
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.MPF_ATTEMPT_CONNECTIONS);
            }
            return;
        }

        public static const NAME:String="LoaderMediator";

        public var gamefiles:Array;

        internal var delayedLoadFiles:Array;

        internal var _delayedLoadFilesCount:int=0;
    }
}


//            class LoaderProgressMediator
package mgs.aurora.modules.core.view 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.common.enums.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.api.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.loaderProgress.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class LoaderProgressMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function LoaderProgressMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_PRELOADER) as flash.display.Sprite;
            var loc3:*=this.viewComponent as mgs.aurora.modules.loaderProgress.model.vo.LoaderProgressMediatorData;
            this._loaderProgress = loc3.loaderProgressUI;
            loc2.addChild(this._loaderProgress);
            var loc4:*;
            (loc4 = mgs.aurora.modules.core.model.PreloaderProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.PreloaderProxy.NAME))).init(loc3.requiredFiles, loc3.externalLoaderBytes);
            mgs.aurora.common.utilities.EventUtils.addKeyEventsToSingleMethod(loc1.stage.stage, this.onStageKeyboardEvent, false, 1000);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_PROGRESS_CHANGED);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_SHOW_PRELOADER);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_HIDE_PRELOADER);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_TEXT_CHANGE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_GAME_TEXT_CHANGE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_FILE_COUNT_CHANGE);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.EXTERNAL_LOADER_PROGRESS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GET_INTERNAL_LOADER_PROGRESS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BACKGROUND_ALPHA);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_SET_PREFETCHSERVED_PROGRESS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_SET_REQUIRED_PROGRESS);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.COMPLETE_LOAD_BAR);
            loc1.push(mgs.aurora.modules.core.notifications.CoreNotifications.RESET_PRELOADER);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_PROGRESS_CHANGED:
                {
                    this.update(arg1.getBody() as Number);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_SHOW_PRELOADER:
                {
                    this.show();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_HIDE_PRELOADER:
                {
                    this.hide();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_TEXT_CHANGE:
                {
                    this.changeTextLabel(String(arg1.getBody()), false);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_GAME_TEXT_CHANGE:
                {
                    this.changeTextLabel(String(arg1.getBody()), true);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.EXTERNAL_LOADER_PROGRESS:
                {
                    this.setExternalLoaderProgress(arg1.getBody() as Number);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GET_INTERNAL_LOADER_PROGRESS:
                {
                    this.getExternalLoaderProgress();
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_SET_PREFETCHSERVED_PROGRESS:
                {
                    this.setPrefetchServedProgress(arg1.getBody() as mgs.aurora.modules.loaderProgress.model.vo.ProgressData);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.PRELOADER_SET_REQUIRED_PROGRESS:
                {
                    this.setRequiredProgress(arg1.getBody() as mgs.aurora.modules.loaderProgress.model.vo.ProgressData);
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.GAME_MODULE_BACKGROUND_ALPHA:
                {
                    this.alpha(arg1.getBody() as Number);
                    Debugger.trace("[PRELOADER ] CALL ALPHA", "SYSTEM");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.COMPLETE_LOAD_BAR:
                {
                    this.completeLoadBar();
                    Debugger.trace("[PRELOADER ] CALL Complete Load Bar", "SYSTEM");
                    break;
                }
                case mgs.aurora.modules.core.notifications.CoreNotifications.RESET_PRELOADER:
                {
                    this.resetProgressBar();
                    Debugger.trace("[PRELOADER ] CALL Reset Load Bar", "SYSTEM");
                    break;
                }
            }
            return;
        }

        internal function setExternalLoaderProgress(arg1:Number):void
        {
            var loc1:*=mgs.aurora.modules.core.model.PreloaderProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.PreloaderProxy.NAME));
            loc1.updateExternalLoaderProgress(arg1);
            return;
        }

        internal function getExternalLoaderProgress():void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SET_EXTERNAL_PROGRESS, this._progress);
            return;
        }

        internal function setRequiredProgress(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            var loc1:*=mgs.aurora.modules.core.model.PreloaderProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.PreloaderProxy.NAME));
            loc1.updateRequiredProgress(arg1);
            return;
        }

        internal function setPrefetchServedProgress(arg1:mgs.aurora.modules.loaderProgress.model.vo.ProgressData):void
        {
            var loc1:*=mgs.aurora.modules.core.model.PreloaderProxy(facade.retrieveProxy(mgs.aurora.modules.core.model.PreloaderProxy.NAME));
            loc1.updatePrefetchServeProgress(arg1);
            return;
        }

        internal function show():void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_START_PING);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SHOW_PRELOADER_MODAL);
            var loc1:*=mgs.aurora.modules.core.model.GameSetProxy(this.facade.retrieveProxy(mgs.aurora.modules.core.model.GameSetProxy.NAME)).gameSet;
            var loc2:*=String(loc1.@widescreen.toString()).toLowerCase() == "true";
            if (loc2) 
            {
                this.loaderProgress.xpos = mgs.aurora.common.enums.StageSizeConstants.WIDESCREEN_WIDTH / 2 - mgs.aurora.common.enums.StageSizeConstants.STANDARD_WIDTH / 2;
                this.loaderProgress.background = "large";
            }
            else 
            {
                this.loaderProgress.xpos = 0;
                this.loaderProgress.background = "small";
            }
            this.loaderProgress.visible = true;
            this.loaderProgress.parent.visible = true;
            var loc3:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            mgs.aurora.common.utilities.EventUtils.addKeyEventsToSingleMethod(loc3.stage.stage, this.onStageKeyboardEvent, false, 1000);
            return;
        }

        internal function hide():void
        {
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.XMAN_STOP_PING);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.HIDE_PRELOADER_MODAL);
            this.loaderProgress.visible = false;
            this.loaderProgress.parent.visible = false;
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            mgs.aurora.common.utilities.EventUtils.removeKeyEventsFromSingleMethod(loc1.stage.stage, this.onStageKeyboardEvent);
            return;
        }

        internal function onStageKeyboardEvent(arg1:flash.events.KeyboardEvent):void
        {
            arg1.stopImmediatePropagation();
            return;
        }

        internal function update(arg1:Number):void
        {
            if (arg1 <= 0.98 && !(arg1 == Infinity)) 
            {
                var loc1:*;
                this.loaderProgress.progress = loc1 = arg1;
                this._progress = loc1;
            }
            return;
        }

        internal function completeLoadBar():void
        {
            Debugger.trace("Complete Load Bar", "SYSTEM");
            var loc1:*;
            this.loaderProgress.progress = loc1 = 1;
            this._progress = loc1;
            return;
        }

        internal function changeTextLabel(arg1:String, arg2:Boolean):void
        {
            var label:String;
            var forceAlpha:Boolean;
            var dependsProxy:mgs.aurora.modules.core.model.DependenciesProxy;
            var strings:XML;
            var preloaderText:String;
            var alphaManual:Number;
            var apiProxy:mgs.aurora.modules.core.model.api.ApiProxy;

            var loc1:*;
            label = arg1;
            forceAlpha = arg2;
            dependsProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.DependenciesProxy.NAME) as mgs.aurora.modules.core.model.DependenciesProxy;
            strings = dependsProxy.getXmlDependency(mgs.aurora.modules.core.enum.DependencyName.LOCAL_STRINGS);
            preloaderText = "";
            alphaManual = 1;
            apiProxy = this.facade.retrieveProxy(mgs.aurora.modules.core.model.api.ApiProxy.NAME) as mgs.aurora.modules.core.model.api.ApiProxy;
            if (forceAlpha && !apiProxy.status.initialized) 
            {
                forceAlpha = false;
            }
            var loc2:*=label;
            switch (loc2) 
            {
                case mgs.aurora.api.enums.PreloaderTextLabel.LOADING:
                {
                    var loc3:*=0;
                    var loc4:*=strings.string;
                    loc2 = new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@ID == "PRELOADER_LOADING") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    preloaderText = loc2.@text;
                    alphaManual = 1;
                    break;
                }
                case mgs.aurora.api.enums.PreloaderTextLabel.LOADING_BONUS_FEATURE:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "PRELOADER_LOADING_BONUS_FEATURE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    preloaderText = loc2.@text;
                    alphaManual = 0.9;
                    break;
                }
                case mgs.aurora.api.enums.PreloaderTextLabel.LOADING_FEATURE:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "PRELOADER_LOADING_FEATURE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    preloaderText = loc2.@text;
                    alphaManual = 0.9;
                    break;
                }
                case mgs.aurora.api.enums.PreloaderTextLabel.LOADING_PAYTABLE:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "PRELOADER_LOADING_PAYTABLE") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    preloaderText = loc2.@text;
                    alphaManual = 0.9;
                    break;
                }
                default:
                {
                    loc3 = 0;
                    loc4 = strings.string;
                    loc2 = new XMLList("");
                    for each (loc5 in loc4) 
                    {
                        with (loc6 = loc5) 
                        {
                            if (@ID == "PRELOADER_LOADING") 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    preloaderText = loc2.@text;
                    alphaManual = 1;
                }
            }
            this.loaderProgress.textLabel = preloaderText;
            if (forceAlpha) 
            {
                alphaManual = 0.9;
            }
            this.loaderProgress.alphaManual = alphaManual;
            return;
        }

        internal function get loaderProgress():mgs.aurora.modules.loaderProgress.LoaderProgress
        {
            return this._loaderProgress;
        }

        internal function alpha(arg1:Number):void
        {
            Debugger.trace("[PRELOADER ] SET ALPHA " + arg1, "SYSTEM");
            this.loaderProgress.alpha = arg1;
            return;
        }

        internal function resetProgressBar():void
        {
            Debugger.trace("[PRELOADER ] RESET PROGRESS ", "SYSTEM");
            var loc1:*;
            this.loaderProgress.progress = loc1 = 0;
            this._progress = loc1;
            this.loaderProgress.resetProgress();
            return;
        }

        public static const NAME:String="LoaderProgressMediator";

        internal var _loaderProgress:mgs.aurora.modules.loaderProgress.LoaderProgress;

        internal var _progress:Number;
    }
}


//            class MsgFaderMediator
package mgs.aurora.modules.core.view 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.modules.core.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class MsgFaderMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function MsgFaderMediator()
        {
            super(NAME, null);
            return;
        }

        public override function setViewComponent(arg1:Object):void
        {
            this.removeMsgFaderFromStage();
            super.setViewComponent(arg1);
            this.msgFader.addEventListener(flash.events.Event.ADDED_TO_STAGE, this.addedToStage);
            this.msgFader.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.removedFromStage);
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.core.view.CoreMediator.NAME) as mgs.aurora.modules.core.view.CoreMediator;
            var loc2:*=loc1.stage.getChildByName(mgs.aurora.modules.core.view.CoreMediator.LAYER_FRAME) as flash.display.Sprite;
            loc2.addChild(this.viewComponent as flash.display.DisplayObject);
            return;
        }

        public override function onRemove():void
        {
            if (this.msgFader) 
            {
                this.msgFader.removeEventListener(flash.events.Event.ADDED_TO_STAGE, this.addedToStage);
                this.msgFader.removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.removedFromStage);
                if (this.msgFader.stage) 
                {
                    this.msgFader.parent.removeChild(this.msgFader);
                    this.msgFader.stage.removeEventListener(flash.events.Event.ENTER_FRAME, this.fadeMsgAway);
                }
                this.viewComponent = null;
            }
            if (this.timer) 
            {
                this.timer.stop();
                this.timer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startFadeMsg);
            }
            return;
        }

        public function removeMsgFaderFromStage():void
        {
            if (this.msgFader) 
            {
                this.msgFader.removeEventListener(flash.events.Event.ADDED_TO_STAGE, this.addedToStage);
                this.msgFader.removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.removedFromStage);
                if (this.msgFader.stage) 
                {
                    this.msgFader.stage.removeEventListener(flash.events.Event.ENTER_FRAME, this.fadeMsgAway);
                }
                if (this.msgFader.parent != null) 
                {
                    this.msgFader.parent.removeChild(this.msgFader);
                }
            }
            if (this.timer) 
            {
                this.timer.stop();
                this.timer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startFadeMsg);
            }
            return;
        }

        internal function addedToStage(arg1:flash.events.Event):void
        {
            var loc1:*=this.facade.retrieveProxy(mgs.aurora.modules.core.model.MsgFadeProxy.NAME) as mgs.aurora.modules.core.model.MsgFadeProxy;
            this.timer = new flash.utils.Timer(loc1.interval, 1);
            this.timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startFadeMsg);
            this.timer.start();
            return;
        }

        internal function removedFromStage(arg1:flash.events.Event):void
        {
            if (this.msgFader) 
            {
                if (this.msgFader.stage) 
                {
                    this.msgFader.stage.removeEventListener(flash.events.Event.ENTER_FRAME, this.fadeMsgAway);
                }
                this.msgFader.removeEventListener(flash.events.Event.ADDED_TO_STAGE, this.addedToStage);
                this.msgFader.removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.removedFromStage);
                if (arg1.target != this.msgFader) 
                {
                    this.msgFader.parent.removeChild(this.msgFader);
                }
            }
            if (this.timer) 
            {
                this.timer.stop();
                this.timer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startFadeMsg);
            }
            this.viewComponent = null;
            return;
        }

        internal function startFadeMsg(arg1:flash.events.Event):void
        {
            if (this.timer) 
            {
                this.timer.stop();
                this.timer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startFadeMsg);
            }
            this.msgFader.stage.addEventListener(flash.events.Event.ENTER_FRAME, this.fadeMsgAway);
            return;
        }

        internal function fadeMsgAway(arg1:flash.events.Event):void
        {
            this.msgFader.alpha = this.msgFader.alpha - 0.05;
            if (this.msgFader.alpha < 0.05) 
            {
                this.msgFader.alpha = 0;
                this.removeMsgFaderFromStage();
            }
            return;
        }

        internal function get msgFader():flash.display.Sprite
        {
            return this.viewComponent as flash.display.Sprite;
        }

        public static const NAME:String="MsgFaderMediator";

        internal var timer:flash.utils.Timer;
    }
}


//          class Core
package mgs.aurora.modules.core 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.enums.configMapping.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.orbis.*;
    import mgs.aurora.common.scale.*;
    import mgs.aurora.modules.core.enum.*;
    import mgs.aurora.modules.core.model.*;
    import mgs.aurora.modules.core.model.configMapping.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;
    
    public class Core extends flash.display.Sprite implements mgs.aurora.common.interfaces.ICore, org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeAware
    {
        public function Core()
        {
            super();
            if (this.stage) 
            {
                this.init();
            }
            else 
            {
                this.addEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
                this.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.dispose);
            }
            return;
        }

        internal function init(arg1:flash.events.Event=null):void
        {
            this._facade = mgs.aurora.modules.core.CoreFacade.getInstance(Core.NAME);
            this._facade.startup(this);
            return;
        }

        public function dispose(arg1:flash.events.Event=null):void
        {
            return;
        }

        public function setup(arg1:mgs.aurora.common.interfaces.IExternalData, arg2:flash.display.Sprite, arg3:String, arg4:mgs.aurora.common.orbis.TopBarController, arg5:mgs.aurora.common.scale.ScaleManager):void
        {
            this._facade.setup(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function updateExternalData(arg1:Object):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (this._facade.hasProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)) 
            {
                loc1 = mgs.aurora.modules.core.model.ExternalDataProxy(this._facade.retrieveProxy(mgs.aurora.modules.core.model.ExternalDataProxy.NAME)).externalData;
                var loc5:*=0;
                var loc6:*=arg1;
                for (loc2 in loc6) 
                {
                    loc1.setValue(loc2, arg1[loc2]);
                }
            }
            if (this._facade.hasProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)) 
            {
                loc3 = mgs.aurora.modules.core.model.configMapping.SystemConfigProxy(this._facade.retrieveProxy(mgs.aurora.modules.core.model.configMapping.SystemConfigProxy.NAME)).getConfigById(mgs.aurora.modules.core.enum.ConfigMappingModuleIdentifiers.SESSION);
                loc5 = 0;
                loc6 = arg1;
                label261: for (loc4 in loc6) 
                {
                    var loc7:*=loc4;
                    switch (loc7) 
                    {
                        case mgs.aurora.modules.core.enum.JSDataNames.PCMGUID:
                        {
                            loc3[mgs.aurora.common.enums.configMapping.SessionConfig.PCMGUID] = arg1[loc4];
                            continue label261;
                        }
                        default:
                        {
                            continue label261;
                        }
                    }
                }
            }
            return;
        }

        public function acceptInputPipe(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):void
        {
            this._facade.sendNotification(org.puremvc.as3.multicore.utilities.pipes.plumbing.JunctionMediator.ACCEPT_INPUT_PIPE, arg2, arg1);
            return;
        }

        public function acceptOutputPipe(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):void
        {
            this._facade.sendNotification(org.puremvc.as3.multicore.utilities.pipes.plumbing.JunctionMediator.ACCEPT_OUTPUT_PIPE, arg2, arg1);
            return;
        }

        public static const NAME:String="Core";

        internal var _facade:mgs.aurora.modules.core.CoreFacade;
    }
}


//          class CoreFacade
package mgs.aurora.modules.core 
{
    import flash.display.*;
    import mgs.aurora.common.interfaces.*;
    import mgs.aurora.common.orbis.*;
    import mgs.aurora.common.scale.*;
    import mgs.aurora.modules.contentLoader.model.files.*;
    import mgs.aurora.modules.core.controller.*;
    import mgs.aurora.modules.core.notifications.*;
    import mgs.aurora.modules.core.view.scale.*;
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class CoreFacade extends org.puremvc.as3.multicore.patterns.facade.Facade implements org.puremvc.as3.multicore.interfaces.IFacade
    {
        public function CoreFacade(arg1:String)
        {
            super(arg1);
            return;
        }

        public function startup(arg1:flash.display.Sprite):void
        {
            this.sendNotification(mgs.aurora.modules.core.CoreFacade.STARTUP, arg1);
            this.removeCommand(mgs.aurora.modules.core.CoreFacade.STARTUP);
            return;
        }

        protected override function initializeController():void
        {
            super.initializeController();
            this.registerCommand(mgs.aurora.modules.core.CoreFacade.STARTUP, mgs.aurora.modules.core.controller.StartupCommand);
            return;
        }

        public function setup(arg1:mgs.aurora.common.interfaces.IExternalData, arg2:flash.display.Sprite, arg3:String, arg4:mgs.aurora.common.orbis.TopBarController, arg5:mgs.aurora.common.scale.ScaleManager):void
        {
            var loc4:*=null;
            this.registerMediator(new mgs.aurora.modules.core.view.scale.ScaleManagerMediator(arg5));
            var loc1:*=new mgs.aurora.modules.loaderProgress.model.vo.InitLoaderProgressCommandData();
            var loc2:*=XML(arg1.getValue("__combinedsettings__", ""));
            loc1.requiredFiles = mgs.aurora.modules.contentLoader.model.files.Utils.getRequiredFiles(loc2, arg1.getValue("t3game").toLowerCase() == "true");
            loc1.art = arg2;
            loc1.externalLoaderBytes = mgs.aurora.modules.contentLoader.model.files.Utils.getExternallyLoadedBytes(loc2.gameSettings, arg1.getValue("t3game").toLowerCase() == "true");
            if (loc1.requiredFiles.length != 0) 
            {
            };
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.LOADER_RECIEVED, arg1);
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_LOADER_PROGRESS, loc1);
            var loc3:*;
            if ((loc3 = String(arg1.getValue("isSGI", "false")).toLowerCase()) != "false") 
            {
                (loc4 = new Object()).loginType = arg3;
                loc4.topbarController = arg4;
                this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.SETUP_SGI_COMPONENTS, loc4);
            }
            this.sendNotification(mgs.aurora.modules.core.notifications.CoreNotifications.EXTERNAL_DATA_RECIEVED, arg1);
            return;
        }

        public static function getInstance(arg1:String):mgs.aurora.modules.core.CoreFacade
        {
            if (mgs.aurora.modules.core.CoreFacade._instance == null) 
            {
                mgs.aurora.modules.core.CoreFacade._instance = new CoreFacade(arg1);
            }
            return mgs.aurora.modules.core.CoreFacade._instance;
        }

        public static const NAME:String="Core";

        public static const STARTUP:String=NAME + "/notes/startup";

        internal static var _instance:mgs.aurora.modules.core.CoreFacade;
    }
}


//        package loaderProgress
//          package controller
//            class SetupArtMediatorCommand
package mgs.aurora.modules.loaderProgress.controller 
{
    import mgs.aurora.modules.loaderProgress.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupArtMediatorCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupArtMediatorCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            if (this.facade.hasMediator(mgs.aurora.modules.loaderProgress.view.ProgressArtMediator.NAME)) 
            {
                this.facade.removeMediator(mgs.aurora.modules.loaderProgress.view.ProgressArtMediator.NAME);
            }
            Debugger.trace("SetupArtMediatorCommand - " + arg1.getBody());
            this.facade.registerMediator(new mgs.aurora.modules.loaderProgress.view.ProgressArtMediator(arg1.getBody()));
            return;
        }
    }
}


//            class StartupCommand
package mgs.aurora.modules.loaderProgress.controller 
{
    import mgs.aurora.modules.loaderProgress.model.*;
    import mgs.aurora.modules.loaderProgress.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.registerProxy(new mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy());
            this.facade.registerMediator(new mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator(arg1.getBody()));
            return;
        }
    }
}


//            class TeardownCommand
package mgs.aurora.modules.loaderProgress.controller 
{
    import mgs.aurora.modules.loaderProgress.model.*;
    import mgs.aurora.modules.loaderProgress.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class TeardownCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function TeardownCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.facade.removeProxy(mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy.NAME);
            this.facade.removeMediator(mgs.aurora.modules.loaderProgress.view.ProgressArtMediator.NAME);
            this.facade.removeMediator(mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator.NAME);
            return;
        }
    }
}


//          package model
//            package vo
//              class InitLoaderProgressCommandData
package mgs.aurora.modules.loaderProgress.model.vo 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public class InitLoaderProgressCommandData extends Object
    {
        public function InitLoaderProgressCommandData()
        {
            super();
            return;
        }

        public var art:flash.display.Sprite;

        public var requiredFiles:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;

        public var externalLoaderBytes:uint;
    }
}


//              class LoaderProgressData
package mgs.aurora.modules.loaderProgress.model.vo 
{
    public class LoaderProgressData extends Object
    {
        public function LoaderProgressData()
        {
            super();
            return;
        }

        public var progress:Number=0;

        public var visible:Boolean=false;

        public var textLabel:String="";
    }
}


//              class LoaderProgressMediatorData
package mgs.aurora.modules.loaderProgress.model.vo 
{
    import __AS3__.vec.*;
    import mgs.aurora.modules.loaderProgress.*;
    
    public class LoaderProgressMediatorData extends Object
    {
        public function LoaderProgressMediatorData()
        {
            super();
            return;
        }

        public var requiredFiles:__AS3__.vec.Vector.<mgs.aurora.modules.contentLoader.vo.RequiredFile>;

        public var loaderProgressUI:mgs.aurora.modules.loaderProgress.LoaderProgress;

        public var externalLoaderBytes:uint;
    }
}


//              class ProgressData
package mgs.aurora.modules.loaderProgress.model.vo 
{
    public class ProgressData extends Object
    {
        public function ProgressData(arg1:String, arg2:Number)
        {
            super();
            this.progress = arg2;
            this.file = arg1;
            return;
        }

        public var file:String;

        public var progress:Number;
    }
}


//            class LoaderProgressDataProxy
package mgs.aurora.modules.loaderProgress.model 
{
    import mgs.aurora.modules.loaderProgress.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class LoaderProgressDataProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function LoaderProgressDataProxy()
        {
            super(NAME, new mgs.aurora.modules.loaderProgress.model.vo.LoaderProgressData());
            return;
        }

        public function get progress():Number
        {
            return this.loaderData.progress;
        }

        public function set progress(arg1:Number):void
        {
            this.loaderData.progress = arg1;
            return;
        }

        public function get visible():Boolean
        {
            return this.loaderData.visible;
        }

        public function set visible(arg1:Boolean):void
        {
            this.loaderData.visible = arg1;
            return;
        }

        public function get textLabel():String
        {
            return this.loaderData.textLabel;
        }

        public function set textLabel(arg1:String):void
        {
            this.loaderData.textLabel = arg1;
            return;
        }

        internal function get loaderData():mgs.aurora.modules.loaderProgress.model.vo.LoaderProgressData
        {
            return mgs.aurora.modules.loaderProgress.model.vo.LoaderProgressData(this.data);
        }

        public static const NAME:String="LoaderProgressDataProxy";
    }
}


//          package view
//            class LoaderProgressMediator
package mgs.aurora.modules.loaderProgress.view 
{
    import flash.display.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class LoaderProgressMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function LoaderProgressMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }

        public function get stage():flash.display.Sprite
        {
            return this.viewComponent as flash.display.Sprite;
        }

        public static const NAME:String="LoaderProgressMediator";
    }
}


//            class ProgressArtMediator
package mgs.aurora.modules.loaderProgress.view 
{
    import flash.display.*;
    import flash.text.*;
    import mgs.aurora.modules.loaderProgress.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class ProgressArtMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function ProgressArtMediator(arg1:Object)
        {
            super(NAME, arg1);
            return;
        }

        public override function onRegister():void
        {
            var loc1:*=this.facade.retrieveMediator(mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator.NAME) as mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator;
            loc1.stage.addChild(this.progressArt);
            this._attached = true;
            return;
        }

        public override function onRemove():void
        {
            this.progressArt.parent.removeChild(this.progressArt);
            this.viewComponent = null;
            return;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SHOW);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.HIDE);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.UPDATE);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_TEXT);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.BACKGROUND);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_XPOS);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_ALPHA);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_ALPHA_MANUAL);
            loc1.push(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.RESET_PROGRESS);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var notification:org.puremvc.as3.multicore.interfaces.INotification;
            var loaderProgressMediator:mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator;
            var scale:Number;
            var frameNumber:Number;

            var loc1:*;
            loaderProgressMediator = null;
            scale = NaN;
            frameNumber = NaN;
            notification = arg1;
            var loc2:*=notification.getName();
            switch (loc2) 
            {
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SHOW:
                {
                    if (!this._attached) 
                    {
                        this._attached = true;
                        loaderProgressMediator = this.facade.retrieveMediator(mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator.NAME) as mgs.aurora.modules.loaderProgress.view.LoaderProgressMediator;
                        loaderProgressMediator.stage.addChild(this.progressArt);
                    }
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.HIDE:
                {
                    if (this._attached) 
                    {
                        this._attached = false;
                        this.progressArt.parent.removeChild(this.progressArt);
                    }
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.UPDATE:
                {
                    scale = Number(notification.getBody());
                    if (scale >= 0 && scale <= 1) 
                    {
                        if (this.progressArt["maskSlider"] != null) 
                        {
                            frameNumber = Math.round(scale * 100);
                            if (this.progressTrack.currentFrame < frameNumber) 
                            {
                                this.progressTrack.gotoAndStop(frameNumber);
                            }
                        }
                        if (this.progressArt["percBar"] != null) 
                        {
                            this.track.scaleX = scale;
                        }
                    }
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_TEXT:
                {
                    try 
                    {
                        this.gameTextField.text = String(notification.getBody());
                    }
                    catch (e:Error)
                    {
                    };
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.BACKGROUND:
                {
                    if (this.progressArt["background"] != null) 
                    {
                        this.progressArt["background"].gotoAndStop(String(notification.getBody()));
                    }
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_XPOS:
                {
                    this.progressArt.x = Number(notification.getBody());
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_ALPHA:
                {
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_ALPHA_MANUAL:
                {
                    if (this.progressArt["background"] != null) 
                    {
                        this.progressArt["background"].alpha = Number(notification.getBody());
                    }
                    break;
                }
                case mgs.aurora.modules.loaderProgress.LoaderProgressFacade.RESET_PROGRESS:
                {
                    if (this.progressArt["maskSlider"] != null) 
                    {
                        this.progressTrack.gotoAndStop(1);
                    }
                    if (this.progressArt["percBar"] != null) 
                    {
                        this.track.scaleX = 0;
                    }
                    break;
                }
            }
            return;
        }

        internal function get progressArt():flash.display.Sprite
        {
            return this.viewComponent as flash.display.Sprite;
        }

        internal function get progressTrack():flash.display.MovieClip
        {
            return this.progressArt["maskSlider"] as flash.display.MovieClip;
        }

        internal function get track():flash.display.Sprite
        {
            return this.progressArt["percBar"]["bar"] as flash.display.Sprite;
        }

        internal function get textTimeline():flash.display.MovieClip
        {
            return this.progressArt["loadText"] as flash.display.MovieClip;
        }

        internal function get gameTextField():flash.text.TextField
        {
            return this.progressArt["GameLoadingText"];
        }

        public static const NAME:String="ProgressArtMediator";

        internal var _attached:Boolean=false;
    }
}


//          class LoaderProgress
package mgs.aurora.modules.loaderProgress 
{
    import flash.display.*;
    import flash.events.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class LoaderProgress extends flash.display.Sprite
    {
        public function LoaderProgress()
        {
            super();
            this.init();
            return;
        }

        internal function init(arg1:flash.events.Event=null):void
        {
            this.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.dispose);
            this._facade = mgs.aurora.modules.loaderProgress.LoaderProgressFacade.getInstance("LoaderProgress");
            this._facade.startup(this);
            return;
        }

        internal function dispose(arg1:flash.events.Event=null):void
        {
            this.removeEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.dispose);
            this._facade.teardown();
            org.puremvc.as3.multicore.patterns.facade.Facade.removeCore("LoaderProgress");
            return;
        }

        public override function set visible(arg1:Boolean):void
        {
            this._facade.visible = arg1;
            return;
        }

        public override function get visible():Boolean
        {
            return this._facade.visible;
        }

        public function set progress(arg1:Number):void
        {
            this._facade.progress = arg1;
            return;
        }

        public function get progress():Number
        {
            return this._facade.progress;
        }

        public function set textLabel(arg1:String):void
        {
            this._facade.textLabel = arg1;
            return;
        }

        public function get textLabel():String
        {
            return this._facade.textLabel;
        }

        public function set background(arg1:String):void
        {
            this._facade.background = arg1;
            return;
        }

        public function set xpos(arg1:Number):void
        {
            this._facade.xpos = arg1;
            return;
        }

        public function setup(arg1:flash.display.Sprite):void
        {
            this._facade.setup(arg1);
            return;
        }

        public override function set alpha(arg1:Number):void
        {
            this._facade.alpha = arg1;
            return;
        }

        public function set alphaManual(arg1:Number):void
        {
            this._facade.alphaManual = arg1;
            return;
        }

        public function resetProgress():void
        {
            this._facade.resetProgress();
            return;
        }

        internal var _facade:mgs.aurora.modules.loaderProgress.LoaderProgressFacade;
    }
}


//          class LoaderProgressFacade
package mgs.aurora.modules.loaderProgress 
{
    import flash.display.*;
    import mgs.aurora.modules.loaderProgress.controller.*;
    import mgs.aurora.modules.loaderProgress.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class LoaderProgressFacade extends org.puremvc.as3.multicore.patterns.facade.Facade implements org.puremvc.as3.multicore.interfaces.IFacade
    {
        public function LoaderProgressFacade(arg1:String)
        {
            super(arg1);
            return;
        }

        public function startup(arg1:flash.display.Sprite):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.STARTUP, arg1);
            this.removeCommand(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.STARTUP);
            return;
        }

        public function teardown():void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.TEARDOWN);
            this.removeCommand(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.TEARDOWN);
            this.removeCommand(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SETUP);
            return;
        }

        protected override function initializeController():void
        {
            super.initializeController();
            this.registerCommand(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.STARTUP, mgs.aurora.modules.loaderProgress.controller.StartupCommand);
            this.registerCommand(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.TEARDOWN, mgs.aurora.modules.loaderProgress.controller.TeardownCommand);
            this.registerCommand(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SETUP, mgs.aurora.modules.loaderProgress.controller.SetupArtMediatorCommand);
            return;
        }

        public function set visible(arg1:Boolean):void
        {
            this.sendNotification(arg1 ? mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SHOW : mgs.aurora.modules.loaderProgress.LoaderProgressFacade.HIDE);
            return;
        }

        public function get visible():Boolean
        {
            return mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy(this.retrieveProxy(mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy.NAME)).visible;
        }

        public function set progress(arg1:Number):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.UPDATE, arg1);
            return;
        }

        public function get progress():Number
        {
            return mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy(this.retrieveProxy(mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy.NAME)).progress;
        }

        public function set textLabel(arg1:String):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_TEXT, arg1);
            return;
        }

        public function get textLabel():String
        {
            return mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy(this.retrieveProxy(mgs.aurora.modules.loaderProgress.model.LoaderProgressDataProxy.NAME)).textLabel;
        }

        public function set background(arg1:String):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.BACKGROUND, arg1);
            return;
        }

        public function set xpos(arg1:Number):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_XPOS, arg1);
            return;
        }

        public function setup(arg1:flash.display.Sprite):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SETUP, arg1);
            return;
        }

        public function set alpha(arg1:Number):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_ALPHA, arg1);
            return;
        }

        public function set alphaManual(arg1:Number):void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.SET_ALPHA_MANUAL, arg1);
            return;
        }

        public function resetProgress():void
        {
            this.sendNotification(mgs.aurora.modules.loaderProgress.LoaderProgressFacade.RESET_PROGRESS);
            return;
        }

        public static function getInstance(arg1:String):mgs.aurora.modules.loaderProgress.LoaderProgressFacade
        {
            if (mgs.aurora.modules.loaderProgress.LoaderProgressFacade._instance == null) 
            {
                mgs.aurora.modules.loaderProgress.LoaderProgressFacade._instance = new LoaderProgressFacade(arg1);
            }
            return mgs.aurora.modules.loaderProgress.LoaderProgressFacade._instance;
        }

        public static const NAME:String="LoaderProgressFacade";

        public static const STARTUP:String=NAME + "/notes/startup";

        public static const TEARDOWN:String=NAME + "/notes/teardown";

        public static const SETUP:String=NAME + "/notes/setup";

        public static const UPDATE:String=NAME + "/notes/update";

        public static const SET_TEXT:String=NAME + "/notes/set_text";

        public static const SHOW:String=NAME + "/notes/show";

        public static const HIDE:String=NAME + "/notes/hide";

        public static const BACKGROUND:String=NAME + "/notes/background";

        public static const SET_XPOS:String=NAME + "/notes/set_xpos";

        public static const SET_ALPHA:String=NAME + "/notes/set_alpha";

        public static const SET_ALPHA_MANUAL:String=NAME + "/notes/set_alpha_manual";

        public static const RESET_PROGRESS:String=NAME + "/notes/reset_progress";

        internal static var _instance:mgs.aurora.modules.loaderProgress.LoaderProgressFacade;
    }
}


//  package org
//    package flashdevelop
//      package utils
//        class FlashConnect
package org.flashdevelop.utils 
{
    import flash.events.*;
    import flash.net.*;
    import flash.utils.*;
    import flash.xml.*;
    
    public class FlashConnect extends Object
    {
        public function FlashConnect()
        {
            super();
            return;
        }

        public static function send(arg1:flash.xml.XMLNode):void
        {
            if (messages == null) 
            {
                initialize();
            }
            messages.push(arg1);
            return;
        }

        public static function trace(arg1:Object, arg2:Number=1):void
        {
            var loc1:*=createMsgNode(arg1.toString(), arg2);
            org.flashdevelop.utils.FlashConnect.send(loc1);
            return;
        }

        public static function atrace(... rest):void
        {
            var loc1:*=rest.join(",");
            var loc2:*=createMsgNode(loc1, org.flashdevelop.utils.TraceLevel.DEBUG);
            org.flashdevelop.utils.FlashConnect.send(loc2);
            return;
        }

        public static function mtrace(arg1:Object, arg2:String, arg3:String, arg4:Number):void
        {
            var loc1:*;
            var loc2:*=(loc1 = arg3.split("/").join("\\")) + ":" + arg4 + ":" + arg1;
            org.flashdevelop.utils.FlashConnect.trace(loc2, org.flashdevelop.utils.TraceLevel.DEBUG);
            return;
        }

        public static function flush():Boolean
        {
            if (status) 
            {
                sendStack();
                return true;
            }
            return false;
        }

        public static function initialize():int
        {
            if (socket) 
            {
                return status;
            }
            counter = 0;
            messages = new Array();
            socket = new flash.net.XMLSocket();
            socket.addEventListener(flash.events.Event.CLOSE, onClose);
            socket.addEventListener(flash.events.DataEvent.DATA, onData);
            socket.addEventListener(flash.events.Event.CONNECT, onConnect);
            socket.addEventListener(flash.events.IOErrorEvent.IO_ERROR, onIOError);
            socket.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
            interval = flash.utils.setInterval(sendStack, 50);
            socket.connect(host, port);
            return status;
        }

        internal static function onData(arg1:flash.events.DataEvent):void
        {
            org.flashdevelop.utils.FlashConnect.status = 1;
            if (org.flashdevelop.utils.FlashConnect.onReturnData != null) 
            {
                org.flashdevelop.utils.FlashConnect.onReturnData(arg1.data);
            }
            return;
        }

        internal static function onClose(arg1:flash.events.Event):void
        {
            socket = null;
            org.flashdevelop.utils.FlashConnect.status = -1;
            if (org.flashdevelop.utils.FlashConnect.onConnection != null) 
            {
                org.flashdevelop.utils.FlashConnect.onConnection();
            }
            return;
        }

        internal static function onConnect(arg1:flash.events.Event):void
        {
            org.flashdevelop.utils.FlashConnect.status = 1;
            if (org.flashdevelop.utils.FlashConnect.onConnection != null) 
            {
                org.flashdevelop.utils.FlashConnect.onConnection();
            }
            return;
        }

        internal static function onIOError(arg1:flash.events.IOErrorEvent):void
        {
            org.flashdevelop.utils.FlashConnect.status = -1;
            if (org.flashdevelop.utils.FlashConnect.onConnection != null) 
            {
                org.flashdevelop.utils.FlashConnect.onConnection();
            }
            return;
        }

        internal static function onSecurityError(arg1:flash.events.SecurityErrorEvent):void
        {
            org.flashdevelop.utils.FlashConnect.status = -1;
            if (org.flashdevelop.utils.FlashConnect.onConnection != null) 
            {
                org.flashdevelop.utils.FlashConnect.onConnection();
            }
            return;
        }

        internal static function createMsgNode(arg1:String, arg2:Number):flash.xml.XMLNode
        {
            if (isNaN(arg2)) 
            {
                arg2 = org.flashdevelop.utils.TraceLevel.DEBUG;
            }
            var loc1:*=new flash.xml.XMLNode(1, null);
            var loc2:*=new flash.xml.XMLNode(3, encodeURI(arg1));
            loc1.attributes.state = arg2.toString();
            loc1.attributes.cmd = "trace";
            loc1.nodeName = "message";
            loc1.appendChild(loc2);
            return loc1;
        }

        internal static function sendStack():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            if (messages.length > 0 && status == 1) 
            {
                loc1 = new flash.xml.XMLDocument();
                loc2 = loc1.createElement("flashconnect");
                while (messages.length != 0) 
                {
                    var loc6:*;
                    counter++;
                    if (counter > limit) 
                    {
                        flash.utils.clearInterval(interval);
                        loc3 = new String("FlashConnect aborted. You have reached the limit of maximum messages.");
                        loc4 = createMsgNode(loc3, org.flashdevelop.utils.TraceLevel.ERROR);
                        loc2.appendChild(loc4);
                        messages = new Array();
                        break;
                    }
                    loc5 = flash.xml.XMLNode(messages.shift());
                    loc2.appendChild(loc5);
                }
                loc1.appendChild(loc2);
                if (socket && socket.connected) 
                {
                    socket.send(loc1);
                }
                counter = 0;
            }
            return;
        }

        
        {
            status = 0;
            limit = 1000;
            host = "127.0.0.1";
            port = 1978;
        }

        public static var status:Number=0;

        public static var limit:Number=1000;

        public static var host:String="127.0.0.1";

        public static var port:Number=1978;

        internal static var socket:flash.net.XMLSocket;

        internal static var messages:Array;

        internal static var interval:Number;

        internal static var counter:Number;

        public static var onConnection:Function;

        public static var onReturnData:Function;
    }
}


//        class TraceLevel
package org.flashdevelop.utils 
{
    public class TraceLevel extends Object
    {
        public function TraceLevel()
        {
            super();
            return;
        }

        public static const INFO:Number=0;

        public static const DEBUG:Number=1;

        public static const WARNING:Number=2;

        public static const ERROR:Number=3;

        public static const FATAL:Number=4;
    }
}


//    package osflash
//      package signals
//        package events
//          class GenericEvent
package org.osflash.signals.events 
{
    import org.osflash.signals.*;
    
    public class GenericEvent extends Object implements org.osflash.signals.events.IEvent
    {
        public function GenericEvent(arg1:Boolean=false)
        {
            super();
            _bubbles = arg1;
            return;
        }

        public function get target():Object
        {
            return _target;
        }

        public function set currentTarget(arg1:Object):void
        {
            _currentTarget = arg1;
            return;
        }

        public function set bubbles(arg1:Boolean):void
        {
            _bubbles = arg1;
            return;
        }

        public function set signal(arg1:org.osflash.signals.IDeluxeSignal):void
        {
            _signal = arg1;
            return;
        }

        public function set target(arg1:Object):void
        {
            _target = arg1;
            return;
        }

        public function clone():org.osflash.signals.events.IEvent
        {
            return new org.osflash.signals.events.GenericEvent(_bubbles);
        }

        public function get bubbles():Boolean
        {
            return _bubbles;
        }

        public function get signal():org.osflash.signals.IDeluxeSignal
        {
            return _signal;
        }

        public function get currentTarget():Object
        {
            return _currentTarget;
        }

        protected var _signal:org.osflash.signals.IDeluxeSignal;

        protected var _currentTarget:Object;

        protected var _target:Object;

        protected var _bubbles:Boolean;
    }
}


//          class IBubbleEventHandler
package org.osflash.signals.events 
{
    public interface IBubbleEventHandler
    {
        function onEventBubbled(arg1:org.osflash.signals.events.IEvent):void;
    }
}


//          class IEvent
package org.osflash.signals.events 
{
    import org.osflash.signals.*;
    
    public interface IEvent
    {
        function set signal(arg1:org.osflash.signals.IDeluxeSignal):void;

        function get target():Object;

        function set target(arg1:Object):void;

        function set currentTarget(arg1:Object):void;

        function get bubbles():Boolean;

        function get signal():org.osflash.signals.IDeluxeSignal;

        function get currentTarget():Object;

        function clone():org.osflash.signals.events.IEvent;

        function set bubbles(arg1:Boolean):void;
    }
}


//        package natives
//          class INativeDispatcher
package org.osflash.signals.natives 
{
    import flash.events.*;
    
    public interface INativeDispatcher
    {
        function get target():flash.events.IEventDispatcher;

        function dispatch(arg1:flash.events.Event):Boolean;

        function get eventType():String;

        function get eventClass():Class;
    }
}


//          class NativeRelaySignal
package org.osflash.signals.natives 
{
    import flash.events.*;
    import org.osflash.signals.*;
    
    public class NativeRelaySignal extends org.osflash.signals.DeluxeSignal
    {
        public function NativeRelaySignal(arg1:flash.events.IEventDispatcher, arg2:String, arg3:Class=null)
        {
            super(arg1, arg3 || flash.events.Event);
            _eventType = arg2;
            return;
        }

        public override function addOnce(arg1:Function, arg2:int=0):void
        {
            var loc1:*=listenerBoxes.length;
            super.addOnce(arg1);
            if (loc1 == 0 && listenerBoxes.length == 1) 
            {
                flash.events.IEventDispatcher(_target).addEventListener(_eventType, dispatch, false, arg2);
            }
            return;
        }

        public override function remove(arg1:Function):void
        {
            var loc1:*=listenerBoxes.length;
            super.remove(arg1);
            if (loc1 == 1 && listenerBoxes.length == 0) 
            {
                flash.events.IEventDispatcher(_target).removeEventListener(_eventType, dispatch);
            }
            return;
        }

        public override function add(arg1:Function, arg2:int=0):void
        {
            var loc1:*=listenerBoxes.length;
            super.add(arg1);
            if (loc1 == 0 && listenerBoxes.length == 1) 
            {
                flash.events.IEventDispatcher(_target).addEventListener(_eventType, dispatch, false, arg2);
            }
            return;
        }

        protected var _eventType:String;
    }
}


//          class NativeSignal
package org.osflash.signals.natives 
{
    import flash.errors.*;
    import flash.events.*;
    import org.osflash.signals.*;
    
    public class NativeSignal extends Object implements org.osflash.signals.IDeluxeSignal, org.osflash.signals.natives.INativeDispatcher
    {
        public function NativeSignal(arg1:flash.events.IEventDispatcher, arg2:String, arg3:Class=null)
        {
            super();
            _target = arg1;
            _eventType = arg2;
            _eventClass = arg3 || flash.events.Event;
            listenerBoxes = [];
            return;
        }

        public function dispatch(arg1:flash.events.Event):Boolean
        {
            if (!(arg1 is _eventClass)) 
            {
                throw new ArgumentError("Event object " + arg1 + " is not an instance of " + _eventClass + ".");
            }
            if (arg1.type != _eventType) 
            {
                throw new ArgumentError("Event object has incorrect type. Expected <" + _eventType + "> but was <" + arg1.type + ">.");
            }
            return _target.dispatchEvent(arg1);
        }

        public function addOnce(arg1:Function, arg2:int=0):void
        {
            registerListener(arg1, true, arg2);
            return;
        }

        public function remove(arg1:Function):void
        {
            var loc1:*=indexOfListener(arg1);
            if (loc1 == -1) 
            {
                return;
            }
            var loc2:*=listenerBoxes.splice(loc1, 1)[0];
            _target.removeEventListener(_eventType, loc2.execute);
            return;
        }

        public function get eventClass():Class
        {
            return _eventClass;
        }

        public function get valueClasses():Array
        {
            return [_eventClass];
        }

        public function get target():flash.events.IEventDispatcher
        {
            return _target;
        }

        public function add(arg1:Function, arg2:int=0):void
        {
            registerListener(arg1, false, arg2);
            return;
        }

        public function set target(arg1:flash.events.IEventDispatcher):void
        {
            _target = arg1;
            return;
        }

        protected function indexOfListener(arg1:Function):int
        {
            var loc1:*=listenerBoxes.length;
            while (loc1--) 
            {
                if (listenerBoxes[loc1].listener != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return -1;
        }

        public function get numListeners():uint
        {
            return listenerBoxes.length;
        }

        public function get eventType():String
        {
            return _eventType;
        }

        protected function registerListener(arg1:Function, arg2:Boolean=false, arg3:int=0):void
        {
            var once:Boolean=false;
            var prevlistenerBox:Object;
            var signal:org.osflash.signals.natives.NativeSignal;
            var priority:int=0;
            var prevListenerIndex:int;
            var listener:Function;
            var listenerBox:Object;

            var loc1:*;
            prevlistenerBox = null;
            signal = null;
            listener = arg1;
            once = arg2;
            priority = arg3;
            if (listener.length != 1) 
            {
                throw new ArgumentError("Listener for native event must declare exactly 1 argument.");
            }
            prevListenerIndex = indexOfListener(listener);
            if (prevListenerIndex >= 0) 
            {
                prevlistenerBox = listenerBoxes[prevListenerIndex];
                if (prevlistenerBox.once && !once) 
                {
                    throw new flash.errors.IllegalOperationError("You cannot addOnce() then add() the same listener without removing the relationship first.");
                }
                if (!prevlistenerBox.once && once) 
                {
                    throw new flash.errors.IllegalOperationError("You cannot add() then addOnce() the same listener without removing the relationship first.");
                }
                return;
            }
            listenerBox = {"listener":listener, "once":once, "execute":listener};
            if (once) 
            {
                signal = this;
                listenerBox.execute = function (arg1:flash.events.Event):void
                {
                    signal.remove(listener);
                    listener(arg1);
                    return;
                }
            }
            listenerBoxes[listenerBoxes.length] = listenerBox;
            _target.addEventListener(_eventType, listenerBox.execute, false, priority);
            return;
        }

        public function removeAll():void
        {
            var loc1:*=listenerBoxes.length;
            while (loc1--) 
            {
                remove(listenerBoxes[loc1].listener as Function);
            }
            return;
        }

        protected var _eventClass:Class;

        protected var listenerBoxes:Array;

        protected var _target:flash.events.IEventDispatcher;

        protected var _eventType:String;
    }
}


//        class DeluxeSignal
package org.osflash.signals 
{
    import flash.errors.*;
    import org.osflash.signals.events.*;
    
    public class DeluxeSignal extends Object implements org.osflash.signals.IDeluxeSignal, org.osflash.signals.IDispatcher
    {
        public function DeluxeSignal(arg1:Object, ... rest)
        {
            super();
            _target = arg1;
            listenerBoxes = [];
            if (rest.length == 1 && rest[0] is Array) 
            {
                rest = rest[0];
            }
            setValueClasses(rest);
            return;
        }

        public function dispatch(... rest):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc6:*=null;
            var loc8:*=null;
            var loc3:*=_valueClasses.length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                var loc9:*;
                loc1 = loc9 = rest[loc4];
                if (!(loc9 === null)) 
                {
                    loc9 === null;
                    loc2 = loc9 = _valueClasses[loc4];
                }
                if (loc9 !== null) 
                {
                    throw new ArgumentError("Value object <" + loc1 + "> is not an instance of <" + loc2 + ">.");
                }
                ++loc4;
            }
            var loc5:*;
            if (loc5 = rest[0] as org.osflash.signals.events.IEvent) 
            {
                if (loc5.target) 
                {
                    loc5 = loc9 = loc5.clone();
                    rest[0] = loc9;
                }
                loc5.target = this.target;
                loc5.currentTarget = this.target;
                loc5.signal = this;
            }
            listenersNeedCloning = true;
            if (listenerBoxes.length) 
            {
                loc9 = 0;
                var loc10:*=listenerBoxes;
                for each (loc8 in loc10) 
                {
                    loc6 = loc8.listener;
                    if (loc8.once) 
                    {
                        remove(loc6);
                    }
                    loc6.apply(null, rest);
                }
            }
            listenersNeedCloning = false;
            if (!loc5 || !loc5.bubbles) 
            {
                return;
            }
            var loc7:*=this.target;
            for (;;) 
            {
                if (loc7 && loc7.hasOwnProperty("parent")) 
                {
                    loc7 && loc7.hasOwnProperty("parent");
                    loc7 = loc9 = loc7.parent;
                }
                if (!(loc7 && loc7.hasOwnProperty("parent"))) 
                {
                    break;
                }
                if (!(loc7 is org.osflash.signals.events.IBubbleEventHandler)) 
                {
                    continue;
                }
                loc5.currentTarget = loc9 = loc7;
                org.osflash.signals.events.IBubbleEventHandler(loc9).onEventBubbled(loc5);
                break;
            }
            return;
        }

        public function addOnce(arg1:Function, arg2:int=0):void
        {
            registerListener(arg1, true, arg2);
            return;
        }

        public function remove(arg1:Function):void
        {
            if (indexOfListener(arg1) == -1) 
            {
                return;
            }
            if (listenersNeedCloning) 
            {
                listenerBoxes = listenerBoxes.slice();
                listenersNeedCloning = false;
            }
            listenerBoxes.splice(indexOfListener(arg1), 1);
            return;
        }

        public function get target():Object
        {
            return _target;
        }

        public function get numListeners():uint
        {
            return listenerBoxes.length;
        }

        protected function indexOfListener(arg1:Function):int
        {
            var loc1:*=listenerBoxes.length;
            while (loc1--) 
            {
                if (listenerBoxes[loc1].listener != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return -1;
        }

        public function add(arg1:Function, arg2:int=0):void
        {
            registerListener(arg1, false, arg2);
            return;
        }

        public function set target(arg1:Object):void
        {
            if (arg1 == _target) 
            {
                return;
            }
            removeAll();
            _target = arg1;
            return;
        }

        protected function setValueClasses(arg1:Array):void
        {
            _valueClasses = arg1 || [];
            var loc1:*=_valueClasses.length;
            while (loc1--) 
            {
                if (_valueClasses[loc1] is Class) 
                {
                    continue;
                }
                throw new ArgumentError("Invalid valueClasses argument: item at index " + loc1 + " should be a Class but was:<" + _valueClasses[loc1] + ">.");
            }
            return;
        }

        public function get valueClasses():Array
        {
            return _valueClasses;
        }

        public function removeAll():void
        {
            var loc1:*=listenerBoxes.length;
            while (loc1--) 
            {
                remove(listenerBoxes[loc1].listener as Function);
            }
            return;
        }

        protected function registerListener(arg1:Function, arg2:Boolean=false, arg3:int=0):void
        {
            var loc5:*=null;
            var loc6:*=null;
            if (arg1.length < _valueClasses.length) 
            {
                loc5 = arg1.length != 1 ? "arguments" : "argument";
                throw new ArgumentError("Listener has " + arg1.length + " " + loc5 + " but it needs at least " + _valueClasses.length + " to match the given value classes.");
            }
            var loc1:*={"listener":arg1, "once":arg2, "priority":arg3};
            if (!listenerBoxes.length) 
            {
                listenerBoxes[0] = loc1;
                return;
            }
            var loc2:*;
            if ((loc2 = indexOfListener(arg1)) >= 0) 
            {
                if ((loc6 = listenerBoxes[loc2]).once && !arg2) 
                {
                    throw new flash.errors.IllegalOperationError("You cannot addOnce() then add() the same listener without removing the relationship first.");
                }
                if (!loc6.once && arg2) 
                {
                    throw new flash.errors.IllegalOperationError("You cannot add() then addOnce() the same listener without removing the relationship first.");
                }
                return;
            }
            if (listenersNeedCloning) 
            {
                listenerBoxes = listenerBoxes.slice();
                listenersNeedCloning = false;
            }
            var loc3:*=listenerBoxes.length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                if (arg3 > listenerBoxes[loc4].priority) 
                {
                    listenerBoxes.splice(loc4, 0, loc1);
                    return;
                }
                ++loc4;
            }
            listenerBoxes[listenerBoxes.length] = loc1;
            return;
        }

        protected var _valueClasses:Array;

        protected var listenerBoxes:Array;

        protected var listenersNeedCloning:Boolean=false;

        protected var _target:Object;
    }
}


//        class IDeluxeSignal
package org.osflash.signals 
{
    public interface IDeluxeSignal
    {
        function add(arg1:Function, arg2:int=0):void;

        function addOnce(arg1:Function, arg2:int=0):void;

        function remove(arg1:Function):void;

        function get valueClasses():Array;

        function get numListeners():uint;
    }
}


//        class IDispatcher
package org.osflash.signals 
{
    public interface IDispatcher
    {
        function dispatch(... rest):void;
    }
}


//        class ISignal
package org.osflash.signals 
{
    public interface ISignal
    {
        function add(arg1:Function):void;

        function addOnce(arg1:Function):void;

        function remove(arg1:Function):void;

        function get valueClasses():Array;

        function get numListeners():uint;
    }
}


//        class Signal
package org.osflash.signals 
{
    import flash.errors.*;
    import flash.utils.*;
    
    public class Signal extends Object implements org.osflash.signals.ISignal, org.osflash.signals.IDispatcher
    {
        public function Signal(... rest)
        {
            super();
            listeners = [];
            onceListeners = new flash.utils.Dictionary();
            if (rest.length == 1 && rest[0] is Array) 
            {
                rest = rest[0];
            }
            setValueClasses(rest);
            return;
        }

        public function add(arg1:Function):void
        {
            registerListener(arg1);
            return;
        }

        public function addOnce(arg1:Function):void
        {
            registerListener(arg1, true);
            return;
        }

        public function remove(arg1:Function):void
        {
            var loc1:*=listeners.indexOf(arg1);
            if (loc1 == -1) 
            {
                return;
            }
            if (listenersNeedCloning) 
            {
                listeners = listeners.slice();
                listenersNeedCloning = false;
            }
            listeners.splice(loc1, 1);
            delete onceListeners[arg1];
            return;
        }

        protected function registerListener(arg1:Function, arg2:Boolean=false):void
        {
            var loc1:*=null;
            if (arg1.length < _valueClasses.length) 
            {
                loc1 = arg1.length != 1 ? "arguments" : "argument";
                throw new ArgumentError("Listener has " + arg1.length + " " + loc1 + " but it needs at least " + _valueClasses.length + " to match the given value classes.");
            }
            if (!listeners.length) 
            {
                listeners[0] = arg1;
                if (arg2) 
                {
                    onceListeners[arg1] = true;
                }
                return;
            }
            if (listeners.indexOf(arg1) >= 0) 
            {
                if (onceListeners[arg1] && !arg2) 
                {
                    throw new flash.errors.IllegalOperationError("You cannot addOnce() then add() the same listener without removing the relationship first.");
                }
                if (!onceListeners[arg1] && arg2) 
                {
                    throw new flash.errors.IllegalOperationError("You cannot add() then addOnce() the same listener without removing the relationship first.");
                }
                return;
            }
            if (listenersNeedCloning) 
            {
                listeners = listeners.slice();
                listenersNeedCloning = false;
            }
            listeners[listeners.length] = arg1;
            if (arg2) 
            {
                onceListeners[arg1] = true;
            }
            return;
        }

        protected function setValueClasses(arg1:Array):void
        {
            _valueClasses = arg1 || [];
            var loc1:*=_valueClasses.length;
            while (loc1--) 
            {
                if (_valueClasses[loc1] is Class) 
                {
                    continue;
                }
                throw new ArgumentError("Invalid valueClasses argument: item at index " + loc1 + " should be a Class but was:<" + _valueClasses[loc1] + ">.");
            }
            return;
        }

        public function get numListeners():uint
        {
            return listeners.length;
        }

        public function dispatch(... rest):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc5:*=null;
            var loc3:*=_valueClasses.length;
            var loc4:*=0;
            while (loc4 < loc3) 
            {
                var loc6:*;
                loc1 = loc6 = rest[loc4];
                if (!(loc6 === null)) 
                {
                    loc6 === null;
                    loc2 = loc6 = _valueClasses[loc4];
                }
                if (loc6 !== null) 
                {
                    throw new ArgumentError("Value object <" + loc1 + "> is not an instance of <" + loc2 + ">.");
                }
                ++loc4;
            }
            if (!listeners.length) 
            {
                return;
            }
            listenersNeedCloning = true;
            loc6 = rest.length;
            switch (loc6) 
            {
                case 0:
                {
                    loc6 = 0;
                    var loc7:*=listeners;
                    for each (loc5 in loc7) 
                    {
                        if (onceListeners[loc5]) 
                        {
                            remove(loc5);
                        }
                        loc5();
                    }
                    break;
                }
                case 1:
                {
                    loc6 = 0;
                    loc7 = listeners;
                    for each (loc5 in loc7) 
                    {
                        if (onceListeners[loc5]) 
                        {
                            remove(loc5);
                        }
                        loc5(rest[0]);
                    }
                    break;
                }
                default:
                {
                    loc6 = 0;
                    loc7 = listeners;
                    for each (loc5 in loc7) 
                    {
                        if (onceListeners[loc5]) 
                        {
                            remove(loc5);
                        }
                        loc5.apply(null, rest);
                    }
                }
            }
            listenersNeedCloning = false;
            return;
        }

        public function get valueClasses():Array
        {
            return _valueClasses;
        }

        public function removeAll():void
        {
            var loc1:*=listeners.length;
            while (loc1--) 
            {
                remove(listeners[loc1] as Function);
            }
            return;
        }

        protected var listenersNeedCloning:Boolean=false;

        protected var onceListeners:flash.utils.Dictionary;

        protected var _valueClasses:Array;

        protected var listeners:Array;
    }
}


//    package puremvc
//      package as3
//        package multicore
//          package core
//            class Controller
package org.puremvc.as3.multicore.core 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class Controller extends Object implements org.puremvc.as3.multicore.interfaces.IController
    {
        public function Controller(arg1:String)
        {
            super();
            if (instanceMap[arg1] != null) 
            {
                throw Error(MULTITON_MSG);
            }
            multitonKey = arg1;
            instanceMap[multitonKey] = this;
            commandMap = new Array();
            initializeController();
            return;
        }

        public function removeCommand(arg1:String):void
        {
            if (hasCommand(arg1)) 
            {
                view.removeObserver(arg1, this);
                commandMap[arg1] = null;
            }
            return;
        }

        public function registerCommand(arg1:String, arg2:Class):void
        {
            if (commandMap[arg1] == null) 
            {
                view.registerObserver(arg1, new org.puremvc.as3.multicore.patterns.observer.Observer(executeCommand, this));
            }
            commandMap[arg1] = arg2;
            return;
        }

        protected function initializeController():void
        {
            view = org.puremvc.as3.multicore.core.View.getInstance(multitonKey);
            return;
        }

        public function hasCommand(arg1:String):Boolean
        {
            return !(commandMap[arg1] == null);
        }

        public function executeCommand(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=commandMap[arg1.getName()];
            if (loc1 == null) 
            {
                return;
            }
            var loc2:*=new loc1();
            loc2.initializeNotifier(multitonKey);
            loc2.execute(arg1);
            return;
        }

        public static function removeController(arg1:String):void
        {
            delete instanceMap[arg1];
            return;
        }

        public static function getInstance(arg1:String):org.puremvc.as3.multicore.interfaces.IController
        {
            if (instanceMap[arg1] == null) 
            {
                instanceMap[arg1] = new Controller(arg1);
            }
            return instanceMap[arg1];
        }

        
        {
            instanceMap = new Array();
        }

        protected const MULTITON_MSG:String="Controller instance for this Multiton key already constructed!";

        protected var commandMap:Array;

        protected var view:org.puremvc.as3.multicore.interfaces.IView;

        protected var multitonKey:String;

        protected static var instanceMap:Array;
    }
}


//            class Model
package org.puremvc.as3.multicore.core 
{
    import org.puremvc.as3.multicore.interfaces.*;
    
    public class Model extends Object implements org.puremvc.as3.multicore.interfaces.IModel
    {
        public function Model(arg1:String)
        {
            super();
            if (instanceMap[arg1] != null) 
            {
                throw Error(MULTITON_MSG);
            }
            multitonKey = arg1;
            instanceMap[multitonKey] = this;
            proxyMap = new Array();
            initializeModel();
            return;
        }

        protected function initializeModel():void
        {
            return;
        }

        public function removeProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy
        {
            var loc1:*=proxyMap[arg1] as org.puremvc.as3.multicore.interfaces.IProxy;
            if (loc1) 
            {
                proxyMap[arg1] = null;
                loc1.onRemove();
            }
            return loc1;
        }

        public function hasProxy(arg1:String):Boolean
        {
            return !(proxyMap[arg1] == null);
        }

        public function retrieveProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy
        {
            return proxyMap[arg1];
        }

        public function registerProxy(arg1:org.puremvc.as3.multicore.interfaces.IProxy):void
        {
            arg1.initializeNotifier(multitonKey);
            proxyMap[arg1.getProxyName()] = arg1;
            arg1.onRegister();
            return;
        }

        public static function getInstance(arg1:String):org.puremvc.as3.multicore.interfaces.IModel
        {
            if (instanceMap[arg1] == null) 
            {
                instanceMap[arg1] = new Model(arg1);
            }
            return instanceMap[arg1];
        }

        public static function removeModel(arg1:String):void
        {
            delete instanceMap[arg1];
            return;
        }

        
        {
            instanceMap = new Array();
        }

        protected const MULTITON_MSG:String="Model instance for this Multiton key already constructed!";

        protected var multitonKey:String;

        protected var proxyMap:Array;

        protected static var instanceMap:Array;
    }
}


//            class View
package org.puremvc.as3.multicore.core 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class View extends Object implements org.puremvc.as3.multicore.interfaces.IView
    {
        public function View(arg1:String)
        {
            super();
            if (instanceMap[arg1] != null) 
            {
                throw Error(MULTITON_MSG);
            }
            multitonKey = arg1;
            instanceMap[multitonKey] = this;
            mediatorMap = new Array();
            observerMap = new Array();
            initializeView();
            return;
        }

        public function removeObserver(arg1:String, arg2:Object):void
        {
            var loc1:*=observerMap[arg1] as Array;
            var loc2:*=0;
            while (loc2 < loc1.length) 
            {
                if (org.puremvc.as3.multicore.patterns.observer.Observer(loc1[loc2]).compareNotifyContext(arg2) == true) 
                {
                    loc1.splice(loc2, 1);
                    break;
                }
                ++loc2;
            }
            if (loc1.length == 0) 
            {
                delete observerMap[arg1];
            }
            return;
        }

        public function hasMediator(arg1:String):Boolean
        {
            return !(mediatorMap[arg1] == null);
        }

        public function notifyObservers(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=NaN;
            if (observerMap[arg1.getName()] != null) 
            {
                loc1 = observerMap[arg1.getName()] as Array;
                loc2 = new Array();
                loc4 = 0;
                while (loc4 < loc1.length) 
                {
                    loc3 = loc1[loc4] as org.puremvc.as3.multicore.interfaces.IObserver;
                    loc2.push(loc3);
                    ++loc4;
                }
                loc4 = 0;
                while (loc4 < loc2.length) 
                {
                    (loc3 = loc2[loc4] as org.puremvc.as3.multicore.interfaces.IObserver).notifyObserver(arg1);
                    ++loc4;
                }
            }
            return;
        }

        protected function initializeView():void
        {
            return;
        }

        public function registerMediator(arg1:org.puremvc.as3.multicore.interfaces.IMediator):void
        {
            var loc2:*=null;
            var loc3:*=NaN;
            if (mediatorMap[arg1.getMediatorName()] != null) 
            {
                return;
            }
            arg1.initializeNotifier(multitonKey);
            mediatorMap[arg1.getMediatorName()] = arg1;
            var loc1:*=arg1.listNotificationInterests();
            if (loc1.length > 0) 
            {
                loc2 = new org.puremvc.as3.multicore.patterns.observer.Observer(arg1.handleNotification, arg1);
                loc3 = 0;
                while (loc3 < loc1.length) 
                {
                    registerObserver(loc1[loc3], loc2);
                    ++loc3;
                }
            }
            arg1.onRegister();
            return;
        }

        public function removeMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator
        {
            var loc2:*=null;
            var loc3:*=NaN;
            var loc1:*=mediatorMap[arg1] as org.puremvc.as3.multicore.interfaces.IMediator;
            if (loc1) 
            {
                loc2 = loc1.listNotificationInterests();
                loc3 = 0;
                while (loc3 < loc2.length) 
                {
                    removeObserver(loc2[loc3], loc1);
                    ++loc3;
                }
                delete mediatorMap[arg1];
                loc1.onRemove();
            }
            return loc1;
        }

        public function registerObserver(arg1:String, arg2:org.puremvc.as3.multicore.interfaces.IObserver):void
        {
            if (observerMap[arg1] == null) 
            {
                observerMap[arg1] = [arg2];
            }
            else 
            {
                observerMap[arg1].push(arg2);
            }
            return;
        }

        public function retrieveMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator
        {
            return mediatorMap[arg1];
        }

        public static function removeView(arg1:String):void
        {
            delete instanceMap[arg1];
            return;
        }

        public static function getInstance(arg1:String):org.puremvc.as3.multicore.interfaces.IView
        {
            if (instanceMap[arg1] == null) 
            {
                instanceMap[arg1] = new View(arg1);
            }
            return instanceMap[arg1];
        }

        
        {
            instanceMap = new Array();
        }

        protected const MULTITON_MSG:String="View instance for this Multiton key already constructed!";

        protected var multitonKey:String;

        protected var observerMap:Array;

        protected var mediatorMap:Array;

        protected static var instanceMap:Array;
    }
}


//          package interfaces
//            class IAsyncCommand
package org.puremvc.as3.multicore.interfaces 
{
    public interface IAsyncCommand extends org.puremvc.as3.multicore.interfaces.ICommand
    {
        function setOnComplete(arg1:Function):void;
    }
}


//            class ICommand
package org.puremvc.as3.multicore.interfaces 
{
    public interface ICommand extends org.puremvc.as3.multicore.interfaces.INotifier
    {
        function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void;
    }
}


//            class IController
package org.puremvc.as3.multicore.interfaces 
{
    public interface IController
    {
        function registerCommand(arg1:String, arg2:Class):void;

        function hasCommand(arg1:String):Boolean;

        function executeCommand(arg1:org.puremvc.as3.multicore.interfaces.INotification):void;

        function removeCommand(arg1:String):void;
    }
}


//            class IFacade
package org.puremvc.as3.multicore.interfaces 
{
    public interface IFacade extends org.puremvc.as3.multicore.interfaces.INotifier
    {
        function removeCommand(arg1:String):void;

        function registerCommand(arg1:String, arg2:Class):void;

        function removeProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy;

        function registerProxy(arg1:org.puremvc.as3.multicore.interfaces.IProxy):void;

        function hasMediator(arg1:String):Boolean;

        function retrieveMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator;

        function hasCommand(arg1:String):Boolean;

        function retrieveProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy;

        function notifyObservers(arg1:org.puremvc.as3.multicore.interfaces.INotification):void;

        function registerMediator(arg1:org.puremvc.as3.multicore.interfaces.IMediator):void;

        function removeMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator;

        function hasProxy(arg1:String):Boolean;
    }
}


//            class IMediator
package org.puremvc.as3.multicore.interfaces 
{
    public interface IMediator extends org.puremvc.as3.multicore.interfaces.INotifier
    {
        function listNotificationInterests():Array;

        function onRegister():void;

        function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void;

        function getMediatorName():String;

        function setViewComponent(arg1:Object):void;

        function getViewComponent():Object;

        function onRemove():void;
    }
}


//            class IModel
package org.puremvc.as3.multicore.interfaces 
{
    public interface IModel
    {
        function removeProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy;

        function retrieveProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy;

        function registerProxy(arg1:org.puremvc.as3.multicore.interfaces.IProxy):void;

        function hasProxy(arg1:String):Boolean;
    }
}


//            class INotification
package org.puremvc.as3.multicore.interfaces 
{
    public interface INotification
    {
        function getType():String;

        function getName():String;

        function toString():String;

        function setBody(arg1:Object):void;

        function getBody():Object;

        function setType(arg1:String):void;
    }
}


//            class INotifier
package org.puremvc.as3.multicore.interfaces 
{
    public interface INotifier
    {
        function sendNotification(arg1:String, arg2:Object=null, arg3:String=null):void;

        function initializeNotifier(arg1:String):void;
    }
}


//            class IObserver
package org.puremvc.as3.multicore.interfaces 
{
    public interface IObserver
    {
        function compareNotifyContext(arg1:Object):Boolean;

        function setNotifyContext(arg1:Object):void;

        function setNotifyMethod(arg1:Function):void;

        function notifyObserver(arg1:org.puremvc.as3.multicore.interfaces.INotification):void;
    }
}


//            class IProxy
package org.puremvc.as3.multicore.interfaces 
{
    public interface IProxy extends org.puremvc.as3.multicore.interfaces.INotifier
    {
        function getData():Object;

        function onRegister():void;

        function getProxyName():String;

        function onRemove():void;

        function setData(arg1:Object):void;
    }
}


//            class IView
package org.puremvc.as3.multicore.interfaces 
{
    public interface IView
    {
        function notifyObservers(arg1:org.puremvc.as3.multicore.interfaces.INotification):void;

        function registerMediator(arg1:org.puremvc.as3.multicore.interfaces.IMediator):void;

        function removeMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator;

        function registerObserver(arg1:String, arg2:org.puremvc.as3.multicore.interfaces.IObserver):void;

        function removeObserver(arg1:String, arg2:Object):void;

        function hasMediator(arg1:String):Boolean;

        function retrieveMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator;
    }
}


//          package patterns
//            package command
//              class AsyncCommand
package org.puremvc.as3.multicore.patterns.command 
{
    import org.puremvc.as3.multicore.interfaces.*;
    
    public class AsyncCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.IAsyncCommand
    {
        public function AsyncCommand()
        {
            super();
            return;
        }

        public function setOnComplete(arg1:Function):void
        {
            onComplete = arg1;
            return;
        }

        protected function commandComplete():void
        {
            onComplete();
            return;
        }

        internal var onComplete:Function;
    }
}


//              class AsyncMacroCommand
package org.puremvc.as3.multicore.patterns.command 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class AsyncMacroCommand extends org.puremvc.as3.multicore.patterns.observer.Notifier implements org.puremvc.as3.multicore.interfaces.IAsyncCommand, org.puremvc.as3.multicore.interfaces.INotifier
    {
        public function AsyncMacroCommand()
        {
            super();
            subCommands = new Array();
            initializeAsyncMacroCommand();
            return;
        }

        public function setOnComplete(arg1:Function):void
        {
            onComplete = arg1;
            return;
        }

        protected function initializeAsyncMacroCommand():void
        {
            return;
        }

        protected function addSubCommand(arg1:Class):void
        {
            subCommands.push(arg1);
            return;
        }

        internal function nextCommand():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=false;
            if (subCommands.length > 0) 
            {
                loc1 = subCommands.shift();
                loc2 = new loc1();
                loc3 = loc2 is org.puremvc.as3.multicore.interfaces.IAsyncCommand;
                if (loc3) 
                {
                    org.puremvc.as3.multicore.interfaces.IAsyncCommand(loc2).setOnComplete(nextCommand);
                }
                org.puremvc.as3.multicore.interfaces.ICommand(loc2).initializeNotifier(multitonKey);
                org.puremvc.as3.multicore.interfaces.ICommand(loc2).execute(note);
                if (!loc3) 
                {
                    nextCommand();
                }
            }
            else 
            {
                if (onComplete != null) 
                {
                    onComplete();
                }
                note = null;
                onComplete = null;
            }
            return;
        }

        public final function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            note = arg1;
            nextCommand();
            return;
        }

        internal var subCommands:Array;

        internal var note:org.puremvc.as3.multicore.interfaces.INotification;

        internal var onComplete:Function;
    }
}


//              class MacroCommand
package org.puremvc.as3.multicore.patterns.command 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class MacroCommand extends org.puremvc.as3.multicore.patterns.observer.Notifier implements org.puremvc.as3.multicore.interfaces.ICommand, org.puremvc.as3.multicore.interfaces.INotifier
    {
        public function MacroCommand()
        {
            super();
            subCommands = new Array();
            initializeMacroCommand();
            return;
        }

        public final function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            while (subCommands.length > 0) 
            {
                loc1 = subCommands.shift();
                loc2 = new loc1();
                loc2.initializeNotifier(multitonKey);
                loc2.execute(arg1);
            }
            return;
        }

        protected function addSubCommand(arg1:Class):void
        {
            subCommands.push(arg1);
            return;
        }

        protected function initializeMacroCommand():void
        {
            return;
        }

        internal var subCommands:Array;
    }
}


//              class SimpleCommand
package org.puremvc.as3.multicore.patterns.command 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class SimpleCommand extends org.puremvc.as3.multicore.patterns.observer.Notifier implements org.puremvc.as3.multicore.interfaces.ICommand, org.puremvc.as3.multicore.interfaces.INotifier
    {
        public function SimpleCommand()
        {
            super();
            return;
        }

        public function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }
    }
}


//            package facade
//              class Facade
package org.puremvc.as3.multicore.patterns.facade 
{
    import org.puremvc.as3.multicore.core.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class Facade extends Object implements org.puremvc.as3.multicore.interfaces.IFacade
    {
        public function Facade(arg1:String)
        {
            super();
            if (instanceMap[arg1] != null) 
            {
                throw Error(MULTITON_MSG);
            }
            initializeNotifier(arg1);
            instanceMap[multitonKey] = this;
            initializeFacade();
            return;
        }

        public function removeProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy
        {
            var loc1:*=null;
            if (model != null) 
            {
                loc1 = model.removeProxy(arg1);
            }
            return loc1;
        }

        public function registerProxy(arg1:org.puremvc.as3.multicore.interfaces.IProxy):void
        {
            model.registerProxy(arg1);
            return;
        }

        protected function initializeController():void
        {
            if (controller != null) 
            {
                return;
            }
            controller = org.puremvc.as3.multicore.core.Controller.getInstance(multitonKey);
            return;
        }

        protected function initializeFacade():void
        {
            initializeModel();
            initializeController();
            initializeView();
            return;
        }

        public function retrieveProxy(arg1:String):org.puremvc.as3.multicore.interfaces.IProxy
        {
            return model.retrieveProxy(arg1);
        }

        public function sendNotification(arg1:String, arg2:Object=null, arg3:String=null):void
        {
            notifyObservers(new org.puremvc.as3.multicore.patterns.observer.Notification(arg1, arg2, arg3));
            return;
        }

        public function notifyObservers(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            if (view != null) 
            {
                view.notifyObservers(arg1);
            }
            return;
        }

        protected function initializeView():void
        {
            if (view != null) 
            {
                return;
            }
            view = org.puremvc.as3.multicore.core.View.getInstance(multitonKey);
            return;
        }

        public function retrieveMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator
        {
            return view.retrieveMediator(arg1) as org.puremvc.as3.multicore.interfaces.IMediator;
        }

        public function initializeNotifier(arg1:String):void
        {
            multitonKey = arg1;
            return;
        }

        public function removeMediator(arg1:String):org.puremvc.as3.multicore.interfaces.IMediator
        {
            var loc1:*=null;
            if (view != null) 
            {
                loc1 = view.removeMediator(arg1);
            }
            return loc1;
        }

        public function hasCommand(arg1:String):Boolean
        {
            return controller.hasCommand(arg1);
        }

        public function removeCommand(arg1:String):void
        {
            controller.removeCommand(arg1);
            return;
        }

        public function registerCommand(arg1:String, arg2:Class):void
        {
            controller.registerCommand(arg1, arg2);
            return;
        }

        public function hasMediator(arg1:String):Boolean
        {
            return view.hasMediator(arg1);
        }

        public function registerMediator(arg1:org.puremvc.as3.multicore.interfaces.IMediator):void
        {
            if (view != null) 
            {
                view.registerMediator(arg1);
            }
            return;
        }

        protected function initializeModel():void
        {
            if (model != null) 
            {
                return;
            }
            model = org.puremvc.as3.multicore.core.Model.getInstance(multitonKey);
            return;
        }

        public function hasProxy(arg1:String):Boolean
        {
            return model.hasProxy(arg1);
        }

        public static function hasCore(arg1:String):Boolean
        {
            return !(instanceMap[arg1] == null);
        }

        public static function getInstance(arg1:String):org.puremvc.as3.multicore.interfaces.IFacade
        {
            if (instanceMap[arg1] == null) 
            {
                instanceMap[arg1] = new Facade(arg1);
            }
            return instanceMap[arg1];
        }

        public static function removeCore(arg1:String):void
        {
            if (instanceMap[arg1] == null) 
            {
                return;
            }
            org.puremvc.as3.multicore.core.Model.removeModel(arg1);
            org.puremvc.as3.multicore.core.View.removeView(arg1);
            org.puremvc.as3.multicore.core.Controller.removeController(arg1);
            delete instanceMap[arg1];
            return;
        }

        
        {
            instanceMap = new Array();
        }

        protected const MULTITON_MSG:String="Facade instance for this Multiton key already constructed!";

        protected var multitonKey:String;

        protected var controller:org.puremvc.as3.multicore.interfaces.IController;

        protected var model:org.puremvc.as3.multicore.interfaces.IModel;

        protected var view:org.puremvc.as3.multicore.interfaces.IView;

        protected static var instanceMap:Array;
    }
}


//            package mediator
//              class Mediator
package org.puremvc.as3.multicore.patterns.mediator 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class Mediator extends org.puremvc.as3.multicore.patterns.observer.Notifier implements org.puremvc.as3.multicore.interfaces.IMediator, org.puremvc.as3.multicore.interfaces.INotifier
    {
        public function Mediator(arg1:String=null, arg2:Object=null)
        {
            super();
            this.mediatorName = arg1 == null ? NAME : arg1;
            this.viewComponent = arg2;
            return;
        }

        public function listNotificationInterests():Array
        {
            return [];
        }

        public function onRegister():void
        {
            return;
        }

        public function onRemove():void
        {
            return;
        }

        public function getViewComponent():Object
        {
            return viewComponent;
        }

        public function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            return;
        }

        public function getMediatorName():String
        {
            return mediatorName;
        }

        public function setViewComponent(arg1:Object):void
        {
            this.viewComponent = arg1;
            return;
        }

        public static const NAME:String="Mediator";

        protected var viewComponent:Object;

        protected var mediatorName:String;
    }
}


//            package observer
//              class Notification
package org.puremvc.as3.multicore.patterns.observer 
{
    import org.puremvc.as3.multicore.interfaces.*;
    
    public class Notification extends Object implements org.puremvc.as3.multicore.interfaces.INotification
    {
        public function Notification(arg1:String, arg2:Object=null, arg3:String=null)
        {
            super();
            this.name = arg1;
            this.body = arg2;
            this.type = arg3;
            return;
        }

        public function setBody(arg1:Object):void
        {
            this.body = arg1;
            return;
        }

        public function getName():String
        {
            return name;
        }

        public function toString():String
        {
            var loc1:*="Notification Name: " + getName();
            loc1 = loc1 + ("\nBody:" + (body != null ? body.toString() : "null"));
            loc1 = loc1 + ("\nType:" + (type != null ? type : "null"));
            return loc1;
        }

        public function getType():String
        {
            return type;
        }

        public function setType(arg1:String):void
        {
            this.type = arg1;
            return;
        }

        public function getBody():Object
        {
            return body;
        }

        internal var body:Object;

        internal var name:String;

        internal var type:String;
    }
}


//              class Notifier
package org.puremvc.as3.multicore.patterns.observer 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class Notifier extends Object implements org.puremvc.as3.multicore.interfaces.INotifier
    {
        public function Notifier()
        {
            super();
            return;
        }

        public function sendNotification(arg1:String, arg2:Object=null, arg3:String=null):void
        {
            if (facade != null) 
            {
                facade.sendNotification(arg1, arg2, arg3);
            }
            return;
        }

        protected function get facade():org.puremvc.as3.multicore.interfaces.IFacade
        {
            if (multitonKey == null) 
            {
                throw Error(MULTITON_MSG);
            }
            return org.puremvc.as3.multicore.patterns.facade.Facade.getInstance(multitonKey);
        }

        public function initializeNotifier(arg1:String):void
        {
            multitonKey = arg1;
            return;
        }

        protected const MULTITON_MSG:String="multitonKey for this Notifier not yet initialized!";

        protected var multitonKey:String;
    }
}


//              class Observer
package org.puremvc.as3.multicore.patterns.observer 
{
    import org.puremvc.as3.multicore.interfaces.*;
    
    public class Observer extends Object implements org.puremvc.as3.multicore.interfaces.IObserver
    {
        public function Observer(arg1:Function, arg2:Object)
        {
            super();
            setNotifyMethod(arg1);
            setNotifyContext(arg2);
            return;
        }

        internal function getNotifyMethod():Function
        {
            return notify;
        }

        public function compareNotifyContext(arg1:Object):Boolean
        {
            return arg1 === this.context;
        }

        public function setNotifyContext(arg1:Object):void
        {
            context = arg1;
            return;
        }

        internal function getNotifyContext():Object
        {
            return context;
        }

        public function setNotifyMethod(arg1:Function):void
        {
            notify = arg1;
            return;
        }

        public function notifyObserver(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            this.getNotifyMethod().apply(this.getNotifyContext(), [arg1]);
            return;
        }

        internal var notify:Function;

        internal var context:Object;
    }
}


//            package proxy
//              class Proxy
package org.puremvc.as3.multicore.patterns.proxy 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class Proxy extends org.puremvc.as3.multicore.patterns.observer.Notifier implements org.puremvc.as3.multicore.interfaces.IProxy, org.puremvc.as3.multicore.interfaces.INotifier
    {
        public function Proxy(arg1:String=null, arg2:Object=null)
        {
            super();
            this.proxyName = arg1 == null ? NAME : arg1;
            if (arg2 != null) 
            {
                setData(arg2);
            }
            return;
        }

        public function getData():Object
        {
            return data;
        }

        public function setData(arg1:Object):void
        {
            this.data = arg1;
            return;
        }

        public function onRegister():void
        {
            return;
        }

        public function getProxyName():String
        {
            return proxyName;
        }

        public function onRemove():void
        {
            return;
        }

        
        {
            NAME = "Proxy";
        }

        protected var data:Object;

        protected var proxyName:String;

        public static var NAME:String="Proxy";
    }
}


//          package utilities
//            package pipes
//              package interfaces
//                class IPipeAware
package org.puremvc.as3.multicore.utilities.pipes.interfaces 
{
    public interface IPipeAware
    {
        function acceptInputPipe(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):void;

        function acceptOutputPipe(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):void;
    }
}


//                class IPipeFitting
package org.puremvc.as3.multicore.utilities.pipes.interfaces 
{
    public interface IPipeFitting
    {
        function connect(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):Boolean;

        function disconnect():org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting;

        function write(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean;
    }
}


//                class IPipeMessage
package org.puremvc.as3.multicore.utilities.pipes.interfaces 
{
    public interface IPipeMessage
    {
        function getType():String;

        function getHeader():Object;

        function setBody(arg1:Object):void;

        function setPriority(arg1:int):void;

        function getBody():Object;

        function getPriority():int;

        function setType(arg1:String):void;

        function setHeader(arg1:Object):void;
    }
}


//              package messages
//                class FilterControlMessage
package org.puremvc.as3.multicore.utilities.pipes.messages 
{
    public class FilterControlMessage extends org.puremvc.as3.multicore.utilities.pipes.messages.Message
    {
        public function FilterControlMessage(arg1:String, arg2:String, arg3:Function=null, arg4:Object=null)
        {
            super(arg1);
            setName(arg2);
            setFilter(arg3);
            setParams(arg4);
            return;
        }

        public function getName():String
        {
            return this.name;
        }

        public function setParams(arg1:Object):void
        {
            this.params = arg1;
            return;
        }

        public function setName(arg1:String):void
        {
            this.name = arg1;
            return;
        }

        public function getFilter():Function
        {
            return this.filter;
        }

        public function setFilter(arg1:Function):void
        {
            this.filter = arg1;
            return;
        }

        public function getParams():Object
        {
            return this.params;
        }

        protected static const BASE:String=org.puremvc.as3.multicore.utilities.pipes.messages.Message.BASE + "filter-control/";

        public static const SET_PARAMS:String=BASE + "setparams";

        public static const SET_FILTER:String=BASE + "setfilter";

        public static const BYPASS:String=BASE + "bypass";

        public static const FILTER:String=BASE + "filter";

        protected var params:Object;

        protected var name:String;

        protected var filter:Function;
    }
}


//                class Message
package org.puremvc.as3.multicore.utilities.pipes.messages 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class Message extends Object implements org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage
    {
        public function Message(arg1:String, arg2:Object=null, arg3:Object=null, arg4:int=5)
        {
            super();
            setType(arg1);
            setHeader(arg2);
            setBody(arg3);
            setPriority(arg4);
            return;
        }

        public function setPriority(arg1:int):void
        {
            this.priority = arg1;
            return;
        }

        public function getPriority():int
        {
            return priority;
        }

        public function getHeader():Object
        {
            return header;
        }

        public function setHeader(arg1:Object):void
        {
            this.header = arg1;
            return;
        }

        public function getType():String
        {
            return this.type;
        }

        public function setBody(arg1:Object):void
        {
            this.body = arg1;
            return;
        }

        public function getBody():Object
        {
            return body;
        }

        public function setType(arg1:String):void
        {
            this.type = arg1;
            return;
        }

        public static const PRIORITY_MED:int=5;

        public static const NORMAL:String=BASE + "normal/";

        protected static const BASE:String="http://puremvc.org/namespaces/pipes/messages/";

        public static const PRIORITY_LOW:int=10;

        public static const PRIORITY_HIGH:int=1;

        protected var body:Object;

        protected var priority:int;

        protected var header:Object;

        protected var type:String;
    }
}


//                class QueueControlMessage
package org.puremvc.as3.multicore.utilities.pipes.messages 
{
    public class QueueControlMessage extends org.puremvc.as3.multicore.utilities.pipes.messages.Message
    {
        public function QueueControlMessage(arg1:String)
        {
            super(arg1);
            return;
        }

        protected static const BASE:String=org.puremvc.as3.multicore.utilities.pipes.messages.Message.BASE + "/queue/";

        public static const FIFO:String=BASE + "fifo";

        public static const FLUSH:String=BASE + "flush";

        public static const SORT:String=BASE + "sort";
    }
}


//              package plumbing
//                class Filter
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.messages.*;
    
    public class Filter extends org.puremvc.as3.multicore.utilities.pipes.plumbing.Pipe
    {
        public function Filter(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null, arg3:Function=null, arg4:Object=null)
        {
            mode = org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage.FILTER;
            filter = function (arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage, arg2:Object):void
            {
                return;
            }
            params = {};
            super(arg2);
            this.name = arg1;
            if (arg3 != null) 
            {
                setFilter(arg3);
            }
            if (arg4 != null) 
            {
                setParams(arg4);
            }
            return;
        }

        public function setParams(arg1:Object):void
        {
            this.params = arg1;
            return;
        }

        protected function applyFilter(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage
        {
            filter.apply(this, [arg1, params]);
            return arg1;
        }

        public function setFilter(arg1:Function):void
        {
            this.filter = arg1;
            return;
        }

        protected function isTarget(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            return org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage(arg1).getName() == this.name;
        }

        public override function write(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            var success:Boolean;
            var outputMessage:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage;
            var message:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage;

            var loc1:*;
            outputMessage = null;
            message = arg1;
            success = true;
            var loc2:*=message.getType();
            switch (loc2) 
            {
                case org.puremvc.as3.multicore.utilities.pipes.messages.Message.NORMAL:
                {
                    try 
                    {
                        if (mode != org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage.FILTER) 
                        {
                            outputMessage = message;
                        }
                        else 
                        {
                            outputMessage = applyFilter(message);
                        }
                        success = output.write(outputMessage);
                    }
                    catch (e:Error)
                    {
                        success = false;
                    }
                    break;
                }
                case org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage.SET_PARAMS:
                {
                    if (isTarget(message)) 
                    {
                        setParams(org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage(message).getParams());
                    }
                    else 
                    {
                        success = output.write(outputMessage);
                    }
                    break;
                }
                case org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage.SET_FILTER:
                {
                    if (isTarget(message)) 
                    {
                        setFilter(org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage(message).getFilter());
                    }
                    else 
                    {
                        success = output.write(outputMessage);
                    }
                    break;
                }
                case org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage.BYPASS:
                case org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage.FILTER:
                {
                    if (isTarget(message)) 
                    {
                        mode = org.puremvc.as3.multicore.utilities.pipes.messages.FilterControlMessage(message).getType();
                    }
                    else 
                    {
                        success = output.write(outputMessage);
                    }
                    break;
                }
                default:
                {
                    success = output.write(outputMessage);
                }
            }
            return success;
        }

        protected var mode:String;

        protected var name:String;

        protected var params:Object;

        protected var filter:Function;
    }
}


//                class Junction
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class Junction extends Object
    {
        public function Junction()
        {
            inputPipes = new Array();
            outputPipes = new Array();
            pipesMap = new Array();
            pipeTypesMap = new Array();
            super();
            return;
        }

        public function addPipeListener(arg1:String, arg2:Object, arg3:Function):Boolean
        {
            var loc2:*=null;
            var loc1:*=false;
            if (hasInputPipe(arg1)) 
            {
                loc1 = (loc2 = pipesMap[arg1] as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting).connect(new org.puremvc.as3.multicore.utilities.pipes.plumbing.PipeListener(arg2, arg3));
            }
            return loc1;
        }

        public function hasPipe(arg1:String):Boolean
        {
            return !(pipesMap[arg1] == null);
        }

        public function hasOutputPipe(arg1:String):Boolean
        {
            return hasPipe(arg1) && pipeTypesMap[arg1] == OUTPUT;
        }

        public function retrievePipe(arg1:String):org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
        {
            return pipesMap[arg1] as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting;
        }

        public function registerPipe(arg1:String, arg2:String, arg3:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):Boolean
        {
            var loc1:*=true;
            if (pipesMap[arg1] != null) 
            {
                loc1 = false;
            }
            else 
            {
                pipesMap[arg1] = arg3;
                pipeTypesMap[arg1] = arg2;
                var loc2:*=arg2;
                switch (loc2) 
                {
                    case INPUT:
                    {
                        inputPipes.push(arg1);
                        break;
                    }
                    case OUTPUT:
                    {
                        outputPipes.push(arg1);
                        break;
                    }
                    default:
                    {
                        loc1 = false;
                    }
                }
            }
            return loc1;
        }

        public function removePipe(arg1:String):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            if (hasPipe(arg1)) 
            {
                loc1 = pipeTypesMap[arg1];
                var loc4:*=loc1;
                switch (loc4) 
                {
                    case INPUT:
                    {
                        loc2 = inputPipes;
                        break;
                    }
                    case OUTPUT:
                    {
                        loc2 = outputPipes;
                        break;
                    }
                }
                loc3 = 0;
                while (loc3 < loc2.length) 
                {
                    if (loc2[loc3] == arg1) 
                    {
                        loc2.splice(loc3, 1);
                        break;
                    }
                    ++loc3;
                }
                delete pipesMap[arg1];
                delete pipeTypesMap[arg1];
            }
            return;
        }

        public function hasInputPipe(arg1:String):Boolean
        {
            return hasPipe(arg1) && pipeTypesMap[arg1] == INPUT;
        }

        public function sendMessage(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            var loc2:*=null;
            var loc1:*=false;
            if (hasOutputPipe(arg1)) 
            {
                loc1 = (loc2 = pipesMap[arg1] as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting).write(arg2);
            }
            return loc1;
        }

        public static const OUTPUT:String="output";

        public static const INPUT:String="input";

        protected var outputPipes:Array;

        protected var pipesMap:Array;

        protected var pipeTypesMap:Array;

        protected var inputPipes:Array;
    }
}


//                class JunctionMediator
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class JunctionMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator
    {
        public function JunctionMediator(arg1:String, arg2:org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction)
        {
            super(arg1, arg2);
            return;
        }

        public override function listNotificationInterests():Array
        {
            return [JunctionMediator.ACCEPT_INPUT_PIPE, JunctionMediator.ACCEPT_OUTPUT_PIPE];
        }

        public function handlePipeMessage(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):void
        {
            return;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=arg1.getName();
            switch (loc5) 
            {
                case JunctionMediator.ACCEPT_INPUT_PIPE:
                {
                    loc1 = arg1.getType();
                    loc2 = arg1.getBody() as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting;
                    if (junction.registerPipe(loc1, org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction.INPUT, loc2)) 
                    {
                        junction.addPipeListener(loc1, this, handlePipeMessage);
                    }
                    break;
                }
                case JunctionMediator.ACCEPT_OUTPUT_PIPE:
                {
                    loc3 = arg1.getType();
                    loc4 = arg1.getBody() as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting;
                    junction.registerPipe(loc3, org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction.OUTPUT, loc4);
                    break;
                }
            }
            return;
        }

        protected function get junction():org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction
        {
            return viewComponent as org.puremvc.as3.multicore.utilities.pipes.plumbing.Junction;
        }

        public static const ACCEPT_INPUT_PIPE:String="acceptInputPipe";

        public static const ACCEPT_OUTPUT_PIPE:String="acceptOutputPipe";
    }
}


//                class Pipe
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class Pipe extends Object implements org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
    {
        public function Pipe(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null)
        {
            super();
            if (arg1) 
            {
                connect(arg1);
            }
            return;
        }

        public function connect(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):Boolean
        {
            var loc1:*=false;
            if (this.output == null) 
            {
                this.output = arg1;
                loc1 = true;
            }
            return loc1;
        }

        public function disconnect():org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
        {
            var loc1:*=this.output;
            this.output = null;
            return loc1;
        }

        public function write(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            return output.write(arg1);
        }

        protected var output:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting;
    }
}


//                class PipeListener
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class PipeListener extends Object implements org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
    {
        public function PipeListener(arg1:Object, arg2:Function)
        {
            super();
            this.context = arg1;
            this.listener = arg2;
            return;
        }

        public function write(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            listener.apply(context, [arg1]);
            return true;
        }

        public function connect(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):Boolean
        {
            return false;
        }

        public function disconnect():org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
        {
            return null;
        }

        internal var listener:Function;

        internal var context:Object;
    }
}


//                class Queue
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.messages.*;
    
    public class Queue extends org.puremvc.as3.multicore.utilities.pipes.plumbing.Pipe
    {
        public function Queue(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null)
        {
            mode = org.puremvc.as3.multicore.utilities.pipes.messages.QueueControlMessage.SORT;
            messages = new Array();
            super(arg1);
            return;
        }

        protected function store(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):void
        {
            messages.push(arg1);
            if (mode == org.puremvc.as3.multicore.utilities.pipes.messages.QueueControlMessage.SORT) 
            {
                messages.sort(sortMessagesByPriority);
            }
            return;
        }

        protected function flush():Boolean
        {
            var loc3:*=false;
            var loc1:*=true;
            var loc2:*=messages.shift() as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage;
            while (loc2 != null) 
            {
                loc3 = output.write(loc2);
                if (!loc3) 
                {
                    loc1 = false;
                }
                loc2 = messages.shift() as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage;
            }
            return loc1;
        }

        protected function sortMessagesByPriority(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Number
        {
            var loc1:*=0;
            if (arg1.getPriority() < arg2.getPriority()) 
            {
                loc1 = -1;
            }
            if (arg1.getPriority() > arg2.getPriority()) 
            {
                loc1 = 1;
            }
            return loc1;
        }

        public override function write(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            var loc1:*=true;
            var loc2:*=arg1.getType();
            switch (loc2) 
            {
                case org.puremvc.as3.multicore.utilities.pipes.messages.Message.NORMAL:
                {
                    this.store(arg1);
                    break;
                }
                case org.puremvc.as3.multicore.utilities.pipes.messages.QueueControlMessage.FLUSH:
                {
                    loc1 = this.flush();
                    break;
                }
                case org.puremvc.as3.multicore.utilities.pipes.messages.QueueControlMessage.SORT:
                case org.puremvc.as3.multicore.utilities.pipes.messages.QueueControlMessage.FIFO:
                {
                    mode = arg1.getType();
                    break;
                }
            }
            return loc1;
        }

        protected var mode:String;

        protected var messages:Array;
    }
}


//                class TeeMerge
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class TeeMerge extends org.puremvc.as3.multicore.utilities.pipes.plumbing.Pipe
    {
        public function TeeMerge(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null)
        {
            super();
            if (arg1) 
            {
                connectInput(arg1);
            }
            if (arg2) 
            {
                connectInput(arg2);
            }
            return;
        }

        public function connectInput(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):Boolean
        {
            return arg1.connect(this);
        }
    }
}


//                class TeeSplit
package org.puremvc.as3.multicore.utilities.pipes.plumbing 
{
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    
    public class TeeSplit extends Object implements org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
    {
        public function TeeSplit(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null, arg2:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting=null)
        {
            outputs = new Array();
            super();
            if (arg1) 
            {
                connect(arg1);
            }
            if (arg2) 
            {
                connect(arg2);
            }
            return;
        }

        public function disconnectFitting(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
        {
            var loc1:*=null;
            var loc3:*=null;
            var loc2:*=0;
            while (loc2 < outputs.length) 
            {
                if ((loc3 = outputs[loc2]) === arg1) 
                {
                    outputs.splice(loc2, 1);
                    loc1 = loc3;
                    break;
                }
                ++loc2;
            }
            return loc1;
        }

        public function connect(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting):Boolean
        {
            outputs.push(arg1);
            return true;
        }

        public function disconnect():org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting
        {
            return outputs.pop() as org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeFitting;
        }

        public function write(arg1:org.puremvc.as3.multicore.utilities.pipes.interfaces.IPipeMessage):Boolean
        {
            var loc3:*=null;
            var loc1:*=true;
            var loc2:*=0;
            while (loc2 < outputs.length) 
            {
                if (!(loc3 = outputs[loc2]).write(arg1)) 
                {
                    loc1 = false;
                }
                ++loc2;
            }
            return loc1;
        }

        protected var outputs:Array;
    }
}


//            package statemachine
//              class FSMInjector
package org.puremvc.as3.multicore.utilities.statemachine 
{
    import org.puremvc.as3.multicore.patterns.observer.*;
    
    public class FSMInjector extends org.puremvc.as3.multicore.patterns.observer.Notifier
    {
        public function FSMInjector(arg1:XML)
        {
            super();
            this.fsm = arg1;
            return;
        }

        public function inject():void
        {
            var loc2:*=null;
            var loc1:*=new org.puremvc.as3.multicore.utilities.statemachine.StateMachine();
            var loc3:*=0;
            var loc4:*=states;
            for each (loc2 in loc4) 
            {
                loc1.registerState(loc2, isInitial(loc2.name));
            }
            facade.registerMediator(loc1);
            return;
        }

        protected function get states():Array
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            if (stateList == null) 
            {
                stateList = new Array();
                loc1 = fsm;
                while (loc2 < loc1.length()) 
                {
                    loc3 = loc1[loc2];
                    loc4 = createState(loc3);
                    stateList.push(loc4);
                    ++loc2;
                }
            }
            return stateList;
        }

        protected function createState(arg1:XML):org.puremvc.as3.multicore.utilities.statemachine.State
        {
            var loc7:*=0;
            var loc8:*=null;
            var loc1:*=arg1.@name.toString();
            var loc2:*=arg1.@exiting.toString();
            var loc3:*=arg1.@entering.toString();
            var loc4:*=arg1.@changed.toString();
            var loc5:*=new org.puremvc.as3.multicore.utilities.statemachine.State(loc1, loc3, loc2, loc4);
            var loc6:*=arg1 as XMLList;
            while (loc7 < loc6.length()) 
            {
                loc8 = loc6[loc7];
                loc5.defineTrans(String(loc8.@action), String(loc8.@target));
                ++loc7;
            }
            return loc5;
        }

        protected function isInitial(arg1:String):Boolean
        {
            var loc1:*=XML(fsm.@initial).toString();
            return arg1 == loc1;
        }

        protected var fsm:XML;

        protected var stateList:Array;
    }
}


//              class State
package org.puremvc.as3.multicore.utilities.statemachine 
{
    public class State extends Object
    {
        public function State(arg1:String, arg2:String=null, arg3:String=null, arg4:String=null)
        {
            transitions = new Object();
            super();
            this.name = arg1;
            if (arg2) 
            {
                this.entering = arg2;
            }
            if (arg3) 
            {
                this.exiting = arg3;
            }
            if (arg4) 
            {
                this.changed = arg4;
            }
            return;
        }

        public function removeTrans(arg1:String):void
        {
            transitions[arg1] = null;
            return;
        }

        public function getTarget(arg1:String):String
        {
            return transitions[arg1];
        }

        public function defineTrans(arg1:String, arg2:String):void
        {
            if (getTarget(arg1) != null) 
            {
                return;
            }
            transitions[arg1] = arg2;
            return;
        }

        public var entering:String;

        public var exiting:String;

        public var name:String;

        public var changed:String;

        protected var transitions:Object;
    }
}


//              class StateMachine
package org.puremvc.as3.multicore.utilities.statemachine 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class StateMachine extends org.puremvc.as3.multicore.patterns.mediator.Mediator
    {
        public function StateMachine()
        {
            states = new Object();
            super(NAME);
            return;
        }

        public override function listNotificationInterests():Array
        {
            return [ACTION, CANCEL];
        }

        public override function onRegister():void
        {
            if (initial) 
            {
                transitionTo(initial, null);
            }
            return;
        }

        public function removeState(arg1:String):void
        {
            var loc1:*=states[arg1];
            if (loc1 == null) 
            {
                return;
            }
            states[arg1] = null;
            return;
        }

        public function registerState(arg1:org.puremvc.as3.multicore.utilities.statemachine.State, arg2:Boolean=false):void
        {
            if (arg1 == null || !(states[arg1.name] == null)) 
            {
                return;
            }
            states[arg1.name] = arg1;
            if (arg2) 
            {
                this.initial = arg1;
            }
            return;
        }

        protected function transitionTo(arg1:org.puremvc.as3.multicore.utilities.statemachine.State, arg2:Object=null):void
        {
            if (arg1 == null) 
            {
                return;
            }
            canceled = false;
            if (currentState && currentState.exiting) 
            {
                sendNotification(currentState.exiting, arg2, arg1.name);
            }
            if (canceled) 
            {
                canceled = false;
                return;
            }
            if (arg1.entering) 
            {
                sendNotification(arg1.entering, arg2);
            }
            currentState = arg1;
            if (arg1.changed) 
            {
                sendNotification(currentState.changed, arg2);
            }
            sendNotification(CHANGED, currentState, currentState.name);
            return;
        }

        protected function set currentState(arg1:org.puremvc.as3.multicore.utilities.statemachine.State):void
        {
            viewComponent = arg1;
            return;
        }

        protected function get currentState():org.puremvc.as3.multicore.utilities.statemachine.State
        {
            return viewComponent as org.puremvc.as3.multicore.utilities.statemachine.State;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=arg1.getName();
            switch (loc4) 
            {
                case ACTION:
                {
                    loc1 = arg1.getType();
                    loc2 = currentState.getTarget(loc1);
                    if (loc3 = states[loc2]) 
                    {
                        transitionTo(loc3, arg1.getBody());
                    }
                    break;
                }
                case CANCEL:
                {
                    canceled = true;
                    break;
                }
            }
            return;
        }

        public static const CHANGED:String=NAME + "/notes/changed";

        public static const ACTION:String=NAME + "/notes/action";

        public static const CANCEL:String=NAME + "/notes/cancel";

        public static const NAME:String="StateMachine";

        protected var states:Object;

        protected var canceled:Boolean;

        protected var initial:org.puremvc.as3.multicore.utilities.statemachine.State;
    }
}


//  class Button_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_disabledSkin extends flash.display.MovieClip
    {
        public function Button_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_downSkin extends flash.display.MovieClip
    {
        public function Button_downSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_emphasizedSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_emphasizedSkin extends flash.display.MovieClip
    {
        public function Button_emphasizedSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_overSkin extends flash.display.MovieClip
    {
        public function Button_overSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_selectedDisabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_selectedDisabledSkin extends flash.display.MovieClip
    {
        public function Button_selectedDisabledSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_selectedDownSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_selectedDownSkin extends flash.display.MovieClip
    {
        public function Button_selectedDownSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_selectedOverSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_selectedOverSkin extends flash.display.MovieClip
    {
        public function Button_selectedOverSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_selectedUpSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_selectedUpSkin extends flash.display.MovieClip
    {
        public function Button_selectedUpSkin()
        {
            super();
            return;
        }
    }
}


//  class Button_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class Button_upSkin extends flash.display.MovieClip
    {
        public function Button_upSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_disabledSkin extends flash.display.MovieClip
    {
        public function CellRenderer_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_downSkin extends flash.display.MovieClip
    {
        public function CellRenderer_downSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_overSkin extends flash.display.MovieClip
    {
        public function CellRenderer_overSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_selectedDisabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_selectedDisabledSkin extends flash.display.MovieClip
    {
        public function CellRenderer_selectedDisabledSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_selectedDownSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_selectedDownSkin extends flash.display.MovieClip
    {
        public function CellRenderer_selectedDownSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_selectedOverSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_selectedOverSkin extends flash.display.MovieClip
    {
        public function CellRenderer_selectedOverSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_selectedUpSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_selectedUpSkin extends flash.display.MovieClip
    {
        public function CellRenderer_selectedUpSkin()
        {
            super();
            return;
        }
    }
}


//  class CellRenderer_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class CellRenderer_upSkin extends flash.display.MovieClip
    {
        public function CellRenderer_upSkin()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_disabledIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_disabledIcon extends flash.display.MovieClip
    {
        public function CheckBox_disabledIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_downIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_downIcon extends flash.display.MovieClip
    {
        public function CheckBox_downIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_overIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_overIcon extends flash.display.MovieClip
    {
        public function CheckBox_overIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_selectedDisabledIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_selectedDisabledIcon extends flash.display.MovieClip
    {
        public function CheckBox_selectedDisabledIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_selectedDownIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_selectedDownIcon extends flash.display.MovieClip
    {
        public function CheckBox_selectedDownIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_selectedOverIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_selectedOverIcon extends flash.display.MovieClip
    {
        public function CheckBox_selectedOverIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_selectedUpIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_selectedUpIcon extends flash.display.MovieClip
    {
        public function CheckBox_selectedUpIcon()
        {
            super();
            return;
        }
    }
}


//  class CheckBox_upIcon
package 
{
    import flash.display.*;
    
    public dynamic class CheckBox_upIcon extends flash.display.MovieClip
    {
        public function CheckBox_upIcon()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_backgroundSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_backgroundSkin extends flash.display.MovieClip
    {
        public function ColorPicker_backgroundSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_colorWell
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_colorWell extends flash.display.MovieClip
    {
        public function ColorPicker_colorWell()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_disabledSkin extends flash.display.MovieClip
    {
        public function ColorPicker_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_downSkin extends flash.display.MovieClip
    {
        public function ColorPicker_downSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_overSkin extends flash.display.MovieClip
    {
        public function ColorPicker_overSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_swatchSelectedSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_swatchSelectedSkin extends flash.display.MovieClip
    {
        public function ColorPicker_swatchSelectedSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_swatchSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_swatchSkin extends flash.display.Sprite
    {
        public function ColorPicker_swatchSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_textFieldSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_textFieldSkin extends flash.display.MovieClip
    {
        public function ColorPicker_textFieldSkin()
        {
            super();
            return;
        }
    }
}


//  class ColorPicker_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class ColorPicker_upSkin extends flash.display.MovieClip
    {
        public function ColorPicker_upSkin()
        {
            super();
            return;
        }
    }
}


//  class ColumnStretch_cursor
package 
{
    import flash.display.*;
    
    public dynamic class ColumnStretch_cursor extends flash.display.MovieClip
    {
        public function ColumnStretch_cursor()
        {
            super();
            return;
        }
    }
}


//  class ComboBox_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class ComboBox_disabledSkin extends flash.display.MovieClip
    {
        public function ComboBox_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class ComboBox_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class ComboBox_downSkin extends flash.display.MovieClip
    {
        public function ComboBox_downSkin()
        {
            super();
            return;
        }
    }
}


//  class ComboBox_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class ComboBox_overSkin extends flash.display.MovieClip
    {
        public function ComboBox_overSkin()
        {
            super();
            return;
        }
    }
}


//  class ComboBox_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class ComboBox_upSkin extends flash.display.MovieClip
    {
        public function ComboBox_upSkin()
        {
            super();
            return;
        }
    }
}


//  class DataGridCellEditor_skin
package 
{
    import flash.display.*;
    
    public dynamic class DataGridCellEditor_skin extends flash.display.MovieClip
    {
        public function DataGridCellEditor_skin()
        {
            super();
            return;
        }
    }
}


//  class DataGrid_skin
package 
{
    import flash.display.*;
    
    public dynamic class DataGrid_skin extends flash.display.MovieClip
    {
        public function DataGrid_skin()
        {
            super();
            return;
        }
    }
}


//  class Debugger
package 
{
    import com.demonsters.debugger.*;
    import flash.external.*;
    import flash.utils.*;
    import org.flashdevelop.utils.*;
    
    public class Debugger extends Object
    {
        public function Debugger()
        {
            super();
            return;
        }

        public static function createMonsterDebugger(arg1:Object):void
        {
            if (ALLOW) 
            {
                com.demonsters.debugger.MonsterDebugger.initialize(arg1);
            }
            return;
        }

        public static function clearTraces():void
        {
            com.demonsters.debugger.MonsterDebugger.clear();
            return;
        }

        public static function trace(arg1:*, arg2:String="", arg3:Object=null, arg4:uint=1118481):void
        {
            var loc1:*=undefined;
            arg2 = arg2 != null ? arg2 : "";
            if (Debugger.ALLOW == false) 
            {
                return;
            }
            if (Debugger.doLevelfilter) 
            {
                if (!(Debugger.onlyAllowed && Debugger.levels[arg2.toLowerCase()])) 
                {
                    return;
                }
                if (Debugger.levels[arg2.toLowerCase()] == null || Debugger.levels[arg2.toLowerCase()] == undefined) 
                {
                    return;
                }
            }
            if (Debugger.doLevelfilter) 
            {
                arg4 = !(Debugger.levelColors[arg2.toLowerCase()] == undefined) && arg4 == 1118481 ? Debugger.levelColors[arg2.toLowerCase()] : arg4;
            }
            arg2 = arg2 != "" ? "[" + arg2 + "]" : arg2;
            if (USE_MONSTER) 
            {
                loc1 = arg2.length > 0 && typeof arg1 == "string" && Debugger.showLevel ? arg2 + " : " + arg1 : arg1;
                com.demonsters.debugger.MonsterDebugger.trace(arg3, loc1, null, null, arg4);
            }
            else if (USE_IDE_TRACE) 
            {
                trace(arg1.toString());
            }
            else if (USE_FIREBUG) 
            {
                flash.external.ExternalInterface.call("console." + arg2, arg1.toString());
            }
            else 
            {
                org.flashdevelop.utils.FlashConnect.trace(arg1, Number(arg2));
            }
            return;
        }

        public static function setLevelsData(arg1:XML):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            Debugger.levels = new flash.utils.Dictionary();
            Debugger.levelColors = new flash.utils.Dictionary();
            var loc4:*=0;
            var loc5:*=arg1.level;
            for each (loc1 in loc5) 
            {
                loc2 = loc1.@id.toString().toLowerCase();
                loc3 = loc1.@allow.toString();
                if (loc1.@color.length() == 1) 
                {
                    Debugger.levelColors[loc2] = parseInt(loc1.@color.toString(), 16);
                }
                Debugger.levels[loc2] = loc3 == "1";
            }
            Debugger.onlyAllowed = arg1.@showOnlyAllowed.toString() == "1";
            Debugger.doLevelfilter = arg1.@filter.toString() == "1";
            Debugger.showLevel = arg1.@showLevel.toString() == "1";
            return;
        }

        
        {
            USE_FLASHDEVELOP = true;
            USE_FIREBUG = false;
            USE_IDE_TRACE = false;
            USE_MONSTER = false;
            ALLOW = false;
            doLevelfilter = false;
            onlyAllowed = false;
            showLevel = false;
        }

        public static var USE_FLASHDEVELOP:Boolean=true;

        public static var USE_FIREBUG:Boolean=false;

        public static var USE_IDE_TRACE:Boolean=false;

        public static var USE_MONSTER:Boolean=false;

        public static var ALLOW:Boolean=false;

        internal static var doLevelfilter:Boolean=false;

        internal static var levels:flash.utils.Dictionary;

        internal static var levelColors:flash.utils.Dictionary;

        internal static var onlyAllowed:Boolean=false;

        internal static var showLevel:Boolean=false;
    }
}


//  class HeaderRenderer_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_disabledSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_downSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_downSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_overSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_overSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_selectedDisabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_selectedDisabledSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_selectedDisabledSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_selectedDownSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_selectedDownSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_selectedDownSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_selectedOverSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_selectedOverSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_selectedOverSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_selectedUpSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_selectedUpSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_selectedUpSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderRenderer_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class HeaderRenderer_upSkin extends flash.display.MovieClip
    {
        public function HeaderRenderer_upSkin()
        {
            super();
            return;
        }
    }
}


//  class HeaderSortArrow_ascIcon
package 
{
    import flash.display.*;
    
    public dynamic class HeaderSortArrow_ascIcon extends flash.display.MovieClip
    {
        public function HeaderSortArrow_ascIcon()
        {
            super();
            return;
        }
    }
}


//  class HeaderSortArrow_descIcon
package 
{
    import flash.display.*;
    
    public dynamic class HeaderSortArrow_descIcon extends flash.display.MovieClip
    {
        public function HeaderSortArrow_descIcon()
        {
            super();
            return;
        }
    }
}


//  class List_skin
package 
{
    import flash.display.*;
    
    public dynamic class List_skin extends flash.display.MovieClip
    {
        public function List_skin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperDownArrow_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperDownArrow_disabledSkin extends flash.display.MovieClip
    {
        public function NumericStepperDownArrow_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperDownArrow_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperDownArrow_downSkin extends flash.display.MovieClip
    {
        public function NumericStepperDownArrow_downSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperDownArrow_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperDownArrow_overSkin extends flash.display.MovieClip
    {
        public function NumericStepperDownArrow_overSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperDownArrow_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperDownArrow_upSkin extends flash.display.MovieClip
    {
        public function NumericStepperDownArrow_upSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperUpArrow_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperUpArrow_disabledSkin extends flash.display.MovieClip
    {
        public function NumericStepperUpArrow_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperUpArrow_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperUpArrow_downSkin extends flash.display.MovieClip
    {
        public function NumericStepperUpArrow_downSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperUpArrow_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperUpArrow_overSkin extends flash.display.MovieClip
    {
        public function NumericStepperUpArrow_overSkin()
        {
            super();
            return;
        }
    }
}


//  class NumericStepperUpArrow_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class NumericStepperUpArrow_upSkin extends flash.display.MovieClip
    {
        public function NumericStepperUpArrow_upSkin()
        {
            super();
            return;
        }
    }
}


//  class ProgressBar_barSkin
package 
{
    import flash.display.*;
    
    public dynamic class ProgressBar_barSkin extends flash.display.MovieClip
    {
        public function ProgressBar_barSkin()
        {
            super();
            return;
        }
    }
}


//  class ProgressBar_indeterminateSkin
package 
{
    import flash.display.*;
    
    public dynamic class ProgressBar_indeterminateSkin extends flash.display.MovieClip
    {
        public function ProgressBar_indeterminateSkin()
        {
            super();
            return;
        }
    }
}


//  class ProgressBar_trackSkin
package 
{
    import flash.display.*;
    
    public dynamic class ProgressBar_trackSkin extends flash.display.MovieClip
    {
        public function ProgressBar_trackSkin()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_disabledIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_disabledIcon extends flash.display.MovieClip
    {
        public function RadioButton_disabledIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_downIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_downIcon extends flash.display.MovieClip
    {
        public function RadioButton_downIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_overIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_overIcon extends flash.display.MovieClip
    {
        public function RadioButton_overIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_selectedDisabledIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_selectedDisabledIcon extends flash.display.MovieClip
    {
        public function RadioButton_selectedDisabledIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_selectedDownIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_selectedDownIcon extends flash.display.MovieClip
    {
        public function RadioButton_selectedDownIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_selectedOverIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_selectedOverIcon extends flash.display.MovieClip
    {
        public function RadioButton_selectedOverIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_selectedUpIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_selectedUpIcon extends flash.display.MovieClip
    {
        public function RadioButton_selectedUpIcon()
        {
            super();
            return;
        }
    }
}


//  class RadioButton_upIcon
package 
{
    import flash.display.*;
    
    public dynamic class RadioButton_upIcon extends flash.display.MovieClip
    {
        public function RadioButton_upIcon()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowDown_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowDown_disabledSkin extends flash.display.MovieClip
    {
        public function ScrollArrowDown_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowDown_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowDown_downSkin extends flash.display.MovieClip
    {
        public function ScrollArrowDown_downSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowDown_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowDown_overSkin extends flash.display.MovieClip
    {
        public function ScrollArrowDown_overSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowDown_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowDown_upSkin extends flash.display.MovieClip
    {
        public function ScrollArrowDown_upSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowUp_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowUp_disabledSkin extends flash.display.MovieClip
    {
        public function ScrollArrowUp_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowUp_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowUp_downSkin extends flash.display.MovieClip
    {
        public function ScrollArrowUp_downSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowUp_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowUp_overSkin extends flash.display.MovieClip
    {
        public function ScrollArrowUp_overSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollArrowUp_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollArrowUp_upSkin extends flash.display.MovieClip
    {
        public function ScrollArrowUp_upSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollBar_thumbIcon
package 
{
    import flash.display.*;
    
    public dynamic class ScrollBar_thumbIcon extends flash.display.MovieClip
    {
        public function ScrollBar_thumbIcon()
        {
            super();
            return;
        }
    }
}


//  class ScrollPane_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollPane_disabledSkin extends flash.display.MovieClip
    {
        public function ScrollPane_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollPane_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollPane_upSkin extends flash.display.MovieClip
    {
        public function ScrollPane_upSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollThumb_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollThumb_downSkin extends flash.display.MovieClip
    {
        public function ScrollThumb_downSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollThumb_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollThumb_overSkin extends flash.display.MovieClip
    {
        public function ScrollThumb_overSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollThumb_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollThumb_upSkin extends flash.display.MovieClip
    {
        public function ScrollThumb_upSkin()
        {
            super();
            return;
        }
    }
}


//  class ScrollTrack_skin
package 
{
    import flash.display.*;
    
    public dynamic class ScrollTrack_skin extends flash.display.MovieClip
    {
        public function ScrollTrack_skin()
        {
            super();
            return;
        }
    }
}


//  class SliderThumb_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class SliderThumb_disabledSkin extends flash.display.MovieClip
    {
        public function SliderThumb_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class SliderThumb_downSkin
package 
{
    import flash.display.*;
    
    public dynamic class SliderThumb_downSkin extends flash.display.MovieClip
    {
        public function SliderThumb_downSkin()
        {
            super();
            return;
        }
    }
}


//  class SliderThumb_overSkin
package 
{
    import flash.display.*;
    
    public dynamic class SliderThumb_overSkin extends flash.display.MovieClip
    {
        public function SliderThumb_overSkin()
        {
            super();
            return;
        }
    }
}


//  class SliderThumb_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class SliderThumb_upSkin extends flash.display.MovieClip
    {
        public function SliderThumb_upSkin()
        {
            super();
            return;
        }
    }
}


//  class SliderTick_skin
package 
{
    import flash.display.*;
    
    public dynamic class SliderTick_skin extends flash.display.MovieClip
    {
        public function SliderTick_skin()
        {
            super();
            return;
        }
    }
}


//  class SliderTrack_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class SliderTrack_disabledSkin extends flash.display.MovieClip
    {
        public function SliderTrack_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class SliderTrack_skin
package 
{
    import flash.display.*;
    
    public dynamic class SliderTrack_skin extends flash.display.MovieClip
    {
        public function SliderTrack_skin()
        {
            super();
            return;
        }
    }
}


//  class TextArea_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class TextArea_disabledSkin extends flash.display.MovieClip
    {
        public function TextArea_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class TextArea_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class TextArea_upSkin extends flash.display.MovieClip
    {
        public function TextArea_upSkin()
        {
            super();
            return;
        }
    }
}


//  class TextInput_disabledSkin
package 
{
    import flash.display.*;
    
    public dynamic class TextInput_disabledSkin extends flash.display.MovieClip
    {
        public function TextInput_disabledSkin()
        {
            super();
            return;
        }
    }
}


//  class TextInput_upSkin
package 
{
    import flash.display.*;
    
    public dynamic class TextInput_upSkin extends flash.display.MovieClip
    {
        public function TextInput_upSkin()
        {
            super();
            return;
        }
    }
}


//  class TileList_skin
package 
{
    import flash.display.*;
    
    public dynamic class TileList_skin extends flash.display.MovieClip
    {
        public function TileList_skin()
        {
            super();
            return;
        }
    }
}


//  class _6d5aefd83374485e65620be5d943db0acb06fdaf01168bcdff941cf5c2bf8a58_flash_display_Sprite
package 
{
    import flash.display.*;
    import flash.system.*;
    
    public class _6d5aefd83374485e65620be5d943db0acb06fdaf01168bcdff941cf5c2bf8a58_flash_display_Sprite extends flash.display.Sprite
    {
        public function _6d5aefd83374485e65620be5d943db0acb06fdaf01168bcdff941cf5c2bf8a58_flash_display_Sprite()
        {
            super();
            return;
        }

        public function allowDomainInRSL(... rest):void
        {
            flash.system.Security.allowDomain(rest);
            return;
        }

        public function allowInsecureDomainInRSL(... rest):void
        {
            flash.system.Security.allowInsecureDomain(rest);
            return;
        }
    }
}


//  class _7b7e4e6f5f76275cf0c2562e90fe71eabc843c54607ed29acd7adac4401b6f19_flash_display_Sprite
package 
{
    import flash.display.*;
    import flash.system.*;
    
    public class _7b7e4e6f5f76275cf0c2562e90fe71eabc843c54607ed29acd7adac4401b6f19_flash_display_Sprite extends flash.display.Sprite
    {
        public function _7b7e4e6f5f76275cf0c2562e90fe71eabc843c54607ed29acd7adac4401b6f19_flash_display_Sprite()
        {
            super();
            return;
        }

        public function allowDomainInRSL(... rest):void
        {
            flash.system.Security.allowDomain(rest);
            return;
        }

        public function allowInsecureDomainInRSL(... rest):void
        {
            flash.system.Security.allowInsecureDomain(rest);
            return;
        }
    }
}


//  class _a1d6677c0facf0c9cfd79553d2e8dbe625778f28bd4b3f1faa7dac11ff9e4888_flash_display_Sprite
package 
{
    import flash.display.*;
    import flash.system.*;
    
    public class _a1d6677c0facf0c9cfd79553d2e8dbe625778f28bd4b3f1faa7dac11ff9e4888_flash_display_Sprite extends flash.display.Sprite
    {
        public function _a1d6677c0facf0c9cfd79553d2e8dbe625778f28bd4b3f1faa7dac11ff9e4888_flash_display_Sprite()
        {
            super();
            return;
        }

        public function allowDomainInRSL(... rest):void
        {
            flash.system.Security.allowDomain(rest);
            return;
        }

        public function allowInsecureDomainInRSL(... rest):void
        {
            flash.system.Security.allowInsecureDomain(rest);
            return;
        }
    }
}


//  class _f96d63aefad1c608e4627f1ddbada70bf2f9af7ac16497e797303bc69c9715ca_flash_display_Sprite
package 
{
    import flash.display.*;
    import flash.system.*;
    
    public class _f96d63aefad1c608e4627f1ddbada70bf2f9af7ac16497e797303bc69c9715ca_flash_display_Sprite extends flash.display.Sprite
    {
        public function _f96d63aefad1c608e4627f1ddbada70bf2f9af7ac16497e797303bc69c9715ca_flash_display_Sprite()
        {
            super();
            return;
        }

        public function allowDomainInRSL(... rest):void
        {
            flash.system.Security.allowDomain(rest);
            return;
        }

        public function allowInsecureDomainInRSL(... rest):void
        {
            flash.system.Security.allowInsecureDomain(rest);
            return;
        }
    }
}


//  class _fef13db75c522e9deb82eaceba03a695e4e64af2a882cd9068d0177efdfcf111_flash_display_Sprite
package 
{
    import flash.display.*;
    import flash.system.*;
    
    public class _fef13db75c522e9deb82eaceba03a695e4e64af2a882cd9068d0177efdfcf111_flash_display_Sprite extends flash.display.Sprite
    {
        public function _fef13db75c522e9deb82eaceba03a695e4e64af2a882cd9068d0177efdfcf111_flash_display_Sprite()
        {
            super();
            return;
        }

        public function allowDomainInRSL(... rest):void
        {
            flash.system.Security.allowDomain(rest);
            return;
        }

        public function allowInsecureDomainInRSL(... rest):void
        {
            flash.system.Security.allowInsecureDomain(rest);
            return;
        }
    }
}


//  class focusRectSkin
package 
{
    import flash.display.*;
    
    public dynamic class focusRectSkin extends flash.display.MovieClip
    {
        public function focusRectSkin()
        {
            super();
            return;
        }
    }
}


