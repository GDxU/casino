//ActionScript 3.0
//  package caurina
//    package transitions
//      class AuxFunctions
package caurina.transitions 
{
    public class AuxFunctions extends Object
    {
        public function AuxFunctions()
        {
            super();
            return;
        }

        public static function getObjectLength(arg1:Object):uint
        {
            var loc2:*=null;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=arg1;
            for (loc2 in loc4) 
            {
                ++loc1;
            }
            return loc1;
        }

        public static function numberToG(arg1:Number):Number
        {
            return (arg1 & 65280) >> 8;
        }

        public static function numberToB(arg1:Number):Number
        {
            return arg1 & 255;
        }

        public static function numberToR(arg1:Number):Number
        {
            return (arg1 & 16711680) >> 16;
        }

        public static function concatObjects(... rest):Object
        {
            var loc2:*=null;
            var loc4:*=null;
            var loc1:*={};
            var loc3:*=0;
            while (loc3 < rest.length) 
            {
                loc2 = rest[loc3];
                var loc5:*=0;
                var loc6:*=loc2;
                for (loc4 in loc6) 
                {
                    if (loc2[loc4] == null) 
                    {
                        delete loc1[loc4];
                        continue;
                    }
                    loc1[loc4] = loc2[loc4];
                }
                ++loc3;
            }
            return loc1;
        }
    }
}


//      class Equations
package caurina.transitions 
{
    public class Equations extends Object
    {
        public function Equations()
        {
            super();
            trace("Equations is a static class and should not be instantiated.");
            return;
        }

        public static function easeOutBounce(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            if (loc1 < 1 / 2.75) 
            {
                return arg3 * 7.5625 * arg1 * arg1 + arg2;
            }
            if (arg1 < 2 / 2.75) 
            {
                arg1 = loc1 = arg1 - 1.5 / 2.75;
                return arg3 * (7.5625 * loc1 * arg1 + 0.75) + arg2;
            }
            if (arg1 < 2.5 / 2.75) 
            {
                arg1 = loc1 = arg1 - 2.25 / 2.75;
                return arg3 * (7.5625 * loc1 * arg1 + 0.9375) + arg2;
            }
            arg1 = loc1 = arg1 - 2.625 / 2.75;
            return arg3 * (7.5625 * loc1 * arg1 + 0.984375) + arg2;
        }

        public static function easeInOutElastic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc2:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc4:*;
            arg1 = loc4 = arg1 / (arg4 / 2);
            if (loc4 == 2) 
            {
                return arg2 + arg3;
            }
            var loc1:*=!Boolean(arg5) || isNaN(arg5.period) ? arg4 * 0.3 * 1.5 : arg5.period;
            var loc3:*=!Boolean(arg5) || isNaN(arg5.amplitude) ? 0 : arg5.amplitude;
            if (!Boolean(loc3) || loc3 < Math.abs(arg3)) 
            {
                loc3 = arg3;
                loc2 = loc1 / 4;
            }
            else 
            {
                loc2 = loc1 / (2 * Math.PI) * Math.asin(arg3 / loc3);
            }
            if (arg1 < 1) 
            {
                --arg1;
                return -0.5 * loc3 * Math.pow(2, 10 * loc4) * Math.sin((arg1 * arg4 - loc2) * 2 * Math.PI / loc1) + arg2;
            }
            --arg1;
            return loc3 * Math.pow(2, -10 * loc4) * Math.sin((arg1 * arg4 - loc2) * 2 * Math.PI / loc1) * 0.5 + arg3 + arg2;
        }

        public static function easeInOutQuad(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 + arg2;
            }
            return (-arg3) / 2 * (--arg1 * (arg1 - 2) - 1) + arg2;
        }

        public static function easeInOutBounce(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeInBounce(arg1 * 2, 0, arg3, arg4) * 0.5 + arg2;
            }
            return easeOutBounce(arg1 * 2 - arg4, 0, arg3, arg4) * 0.5 + arg3 * 0.5 + arg2;
        }

        public static function easeInOutBack(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*=!Boolean(arg5) || isNaN(arg5.overshoot) ? 1.70158 : arg5.overshoot;
            var loc2:*;
            arg1 = loc2 = arg1 / (arg4 / 2);
            if (loc2 < 1) 
            {
                loc1 = loc2 = loc1 * 1.525;
                return arg3 / 2 * arg1 * arg1 * ((loc2 + 1) * arg1 - loc1) + arg2;
            }
            arg1 = loc2 = arg1 - 2;
            loc1 = loc2 = loc1 * 1.525;
            return arg3 / 2 * (loc2 * arg1 * ((loc2 + 1) * arg1 + loc1) + 2) + arg2;
        }

        public static function easeOutInCubic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutCubic(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInCubic(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeNone(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return arg3 * arg1 / arg4 + arg2;
        }

        public static function easeOutBack(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*=!Boolean(arg5) || isNaN(arg5.overshoot) ? 1.70158 : arg5.overshoot;
            var loc2:*;
            arg1 = loc2 = (arg1 / arg4 - 1);
            return arg3 * (loc2 * arg1 * ((loc1 + 1) * arg1 + loc1) + 1) + arg2;
        }

        public static function easeInOutSine(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return (-arg3) / 2 * (Math.cos(Math.PI * arg1 / arg4) - 1) + arg2;
        }

        public static function easeInBack(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*=!Boolean(arg5) || isNaN(arg5.overshoot) ? 1.70158 : arg5.overshoot;
            var loc2:*;
            arg1 = loc2 = arg1 / arg4;
            return arg3 * loc2 * arg1 * ((loc1 + 1) * arg1 - loc1) + arg2;
        }

        public static function easeInQuart(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 * arg1 + arg2;
        }

        public static function easeOutInQuint(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutQuint(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInQuint(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeOutInBounce(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutBounce(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInBounce(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function init():void
        {
            caurina.transitions.Tweener.registerTransition("easenone", easeNone);
            caurina.transitions.Tweener.registerTransition("linear", easeNone);
            caurina.transitions.Tweener.registerTransition("easeinquad", easeInQuad);
            caurina.transitions.Tweener.registerTransition("easeoutquad", easeOutQuad);
            caurina.transitions.Tweener.registerTransition("easeinoutquad", easeInOutQuad);
            caurina.transitions.Tweener.registerTransition("easeoutinquad", easeOutInQuad);
            caurina.transitions.Tweener.registerTransition("easeincubic", easeInCubic);
            caurina.transitions.Tweener.registerTransition("easeoutcubic", easeOutCubic);
            caurina.transitions.Tweener.registerTransition("easeinoutcubic", easeInOutCubic);
            caurina.transitions.Tweener.registerTransition("easeoutincubic", easeOutInCubic);
            caurina.transitions.Tweener.registerTransition("easeinquart", easeInQuart);
            caurina.transitions.Tweener.registerTransition("easeoutquart", easeOutQuart);
            caurina.transitions.Tweener.registerTransition("easeinoutquart", easeInOutQuart);
            caurina.transitions.Tweener.registerTransition("easeoutinquart", easeOutInQuart);
            caurina.transitions.Tweener.registerTransition("easeinquint", easeInQuint);
            caurina.transitions.Tweener.registerTransition("easeoutquint", easeOutQuint);
            caurina.transitions.Tweener.registerTransition("easeinoutquint", easeInOutQuint);
            caurina.transitions.Tweener.registerTransition("easeoutinquint", easeOutInQuint);
            caurina.transitions.Tweener.registerTransition("easeinsine", easeInSine);
            caurina.transitions.Tweener.registerTransition("easeoutsine", easeOutSine);
            caurina.transitions.Tweener.registerTransition("easeinoutsine", easeInOutSine);
            caurina.transitions.Tweener.registerTransition("easeoutinsine", easeOutInSine);
            caurina.transitions.Tweener.registerTransition("easeincirc", easeInCirc);
            caurina.transitions.Tweener.registerTransition("easeoutcirc", easeOutCirc);
            caurina.transitions.Tweener.registerTransition("easeinoutcirc", easeInOutCirc);
            caurina.transitions.Tweener.registerTransition("easeoutincirc", easeOutInCirc);
            caurina.transitions.Tweener.registerTransition("easeinexpo", easeInExpo);
            caurina.transitions.Tweener.registerTransition("easeoutexpo", easeOutExpo);
            caurina.transitions.Tweener.registerTransition("easeinoutexpo", easeInOutExpo);
            caurina.transitions.Tweener.registerTransition("easeoutinexpo", easeOutInExpo);
            caurina.transitions.Tweener.registerTransition("easeinelastic", easeInElastic);
            caurina.transitions.Tweener.registerTransition("easeoutelastic", easeOutElastic);
            caurina.transitions.Tweener.registerTransition("easeinoutelastic", easeInOutElastic);
            caurina.transitions.Tweener.registerTransition("easeoutinelastic", easeOutInElastic);
            caurina.transitions.Tweener.registerTransition("easeinback", easeInBack);
            caurina.transitions.Tweener.registerTransition("easeoutback", easeOutBack);
            caurina.transitions.Tweener.registerTransition("easeinoutback", easeInOutBack);
            caurina.transitions.Tweener.registerTransition("easeoutinback", easeOutInBack);
            caurina.transitions.Tweener.registerTransition("easeinbounce", easeInBounce);
            caurina.transitions.Tweener.registerTransition("easeoutbounce", easeOutBounce);
            caurina.transitions.Tweener.registerTransition("easeinoutbounce", easeInOutBounce);
            caurina.transitions.Tweener.registerTransition("easeoutinbounce", easeOutInBounce);
            return;
        }

        public static function easeOutExpo(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return arg1 != arg4 ? arg3 * 1.001 * (-Math.pow(2, -10 * arg1 / arg4) + 1) + arg2 : arg2 + arg3;
        }

        public static function easeOutInBack(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutBack(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInBack(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeInExpo(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return arg1 != 0 ? arg3 * Math.pow(2, 10 * (arg1 / arg4 - 1)) + arg2 - arg3 * 0.001 : arg2;
        }

        public static function easeInCubic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 + arg2;
        }

        public static function easeInQuint(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 * arg1 * arg1 * arg1 + arg2;
        }

        public static function easeInOutCirc(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return (-arg3) / 2 * (Math.sqrt(1 - arg1 * arg1) - 1) + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (Math.sqrt(1 - loc1 * arg1) + 1) + arg2;
        }

        public static function easeInQuad(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return arg3 * loc1 * arg1 + arg2;
        }

        public static function easeInBounce(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return arg3 - easeOutBounce(arg4 - arg1, 0, arg3, arg4) + arg2;
        }

        public static function easeOutInExpo(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutExpo(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInExpo(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeOutQuart(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return (-arg3) * (loc1 * arg1 * arg1 * arg1 - 1) + arg2;
        }

        public static function easeInSine(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return (-arg3) * Math.cos(arg1 / arg4 * Math.PI / 2) + arg3 + arg2;
        }

        public static function easeInOutQuart(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return (-arg3) / 2 * (loc1 * arg1 * arg1 * arg1 - 2) + arg2;
        }

        public static function easeOutQuad(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return (-arg3) * loc1 * (arg1 - 2) + arg2;
        }

        public static function easeOutInElastic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutElastic(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInElastic(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeInElastic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc2:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc4:*;
            arg1 = loc4 = arg1 / arg4;
            if (loc4 == 1) 
            {
                return arg2 + arg3;
            }
            var loc1:*=!Boolean(arg5) || isNaN(arg5.period) ? arg4 * 0.3 : arg5.period;
            var loc3:*=!Boolean(arg5) || isNaN(arg5.amplitude) ? 0 : arg5.amplitude;
            if (!Boolean(loc3) || loc3 < Math.abs(arg3)) 
            {
                loc3 = arg3;
                loc2 = loc1 / 4;
            }
            else 
            {
                loc2 = loc1 / (2 * Math.PI) * Math.asin(arg3 / loc3);
            }
            --arg1;
            return -loc3 * Math.pow(2, 10 * loc4) * Math.sin((arg1 * arg4 - loc2) * 2 * Math.PI / loc1) + arg2;
        }

        public static function easeOutCubic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * arg1 + 1) + arg2;
        }

        public static function easeOutQuint(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * (loc1 * arg1 * arg1 * arg1 * arg1 + 1) + arg2;
        }

        public static function easeOutInQuad(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutQuad(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInQuad(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeOutSine(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            return arg3 * Math.sin(arg1 / arg4 * Math.PI / 2) + arg2;
        }

        public static function easeInOutCubic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (loc1 * arg1 * arg1 + 2) + arg2;
        }

        public static function easeInOutQuint(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * arg1 * arg1 * arg1 * arg1 * arg1 + arg2;
            }
            arg1 = loc1 = arg1 - 2;
            return arg3 / 2 * (loc1 * arg1 * arg1 * arg1 * arg1 + 2) + arg2;
        }

        public static function easeInCirc(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = arg1 / arg4;
            return (-arg3) * (Math.sqrt(1 - loc1 * arg1) - 1) + arg2;
        }

        public static function easeOutInSine(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutSine(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInSine(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeInOutExpo(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 == 0) 
            {
                return arg2;
            }
            if (arg1 == arg4) 
            {
                return arg2 + arg3;
            }
            var loc1:*;
            arg1 = loc1 = arg1 / (arg4 / 2);
            if (loc1 < 1) 
            {
                return arg3 / 2 * Math.pow(2, 10 * (arg1 - 1)) + arg2 - arg3 * 0.0005;
            }
            return arg3 / 2 * 1.0005 * (-Math.pow(2, -10 * --arg1) + 2) + arg2;
        }

        public static function easeOutElastic(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc2:*=NaN;
            if (arg1 == 0) 
            {
                return arg2;
            }
            var loc4:*;
            arg1 = loc4 = arg1 / arg4;
            if (loc4 == 1) 
            {
                return arg2 + arg3;
            }
            var loc1:*=!Boolean(arg5) || isNaN(arg5.period) ? arg4 * 0.3 : arg5.period;
            var loc3:*=!Boolean(arg5) || isNaN(arg5.amplitude) ? 0 : arg5.amplitude;
            if (!Boolean(loc3) || loc3 < Math.abs(arg3)) 
            {
                loc3 = arg3;
                loc2 = loc1 / 4;
            }
            else 
            {
                loc2 = loc1 / (2 * Math.PI) * Math.asin(arg3 / loc3);
            }
            return loc3 * Math.pow(2, -10 * arg1) * Math.sin((arg1 * arg4 - loc2) * 2 * Math.PI / loc1) + arg3 + arg2;
        }

        public static function easeOutCirc(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            var loc1:*;
            arg1 = loc1 = (arg1 / arg4 - 1);
            return arg3 * Math.sqrt(1 - loc1 * arg1) + arg2;
        }

        public static function easeOutInQuart(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutQuart(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInQuart(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }

        public static function easeOutInCirc(arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Object=null):Number
        {
            if (arg1 < arg4 / 2) 
            {
                return easeOutCirc(arg1 * 2, arg2, arg3 / 2, arg4, arg5);
            }
            return easeInCirc(arg1 * 2 - arg4, arg2 + arg3 / 2, arg3 / 2, arg4, arg5);
        }
    }
}


//      class PropertyInfoObj
package caurina.transitions 
{
    public class PropertyInfoObj extends Object
    {
        public function PropertyInfoObj(arg1:Number, arg2:Number, arg3:Object, arg4:Number, arg5:Object, arg6:Boolean, arg7:Function, arg8:Array)
        {
            super();
            valueStart = arg1;
            valueComplete = arg2;
            originalValueComplete = arg3;
            arrayIndex = arg4;
            extra = arg5;
            isSpecialProperty = arg6;
            hasModifier = Boolean(arg7);
            modifierFunction = arg7;
            modifierParameters = arg8;
            return;
        }

        public function toString():String
        {
            var loc1:*="\n[PropertyInfoObj ";
            loc1 = loc1 + ("valueStart:" + String(valueStart));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("valueComplete:" + String(valueComplete));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("originalValueComplete:" + String(originalValueComplete));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("arrayIndex:" + String(arrayIndex));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("extra:" + String(extra));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("isSpecialProperty:" + String(isSpecialProperty));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("hasModifier:" + String(hasModifier));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("modifierFunction:" + String(modifierFunction));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("modifierParameters:" + String(modifierParameters));
            loc1 = loc1 + "]\n";
            return loc1;
        }

        public function clone():caurina.transitions.PropertyInfoObj
        {
            var loc1:*=new caurina.transitions.PropertyInfoObj(valueStart, valueComplete, originalValueComplete, arrayIndex, extra, isSpecialProperty, modifierFunction, modifierParameters);
            return loc1;
        }

        public var modifierParameters:Array;

        public var isSpecialProperty:Boolean;

        public var valueComplete:Number;

        public var modifierFunction:Function;

        public var extra:Object;

        public var valueStart:Number;

        public var hasModifier:Boolean;

        public var arrayIndex:Number;

        public var originalValueComplete:Object;
    }
}


//      class SpecialProperty
package caurina.transitions 
{
    public class SpecialProperty extends Object
    {
        public function SpecialProperty(arg1:Function, arg2:Function, arg3:Array=null, arg4:Function=null)
        {
            super();
            getValue = arg1;
            setValue = arg2;
            parameters = arg3;
            preProcess = arg4;
            return;
        }

        public function toString():String
        {
            var loc1:*="";
            loc1 = loc1 + "[SpecialProperty ";
            loc1 = loc1 + ("getValue:" + String(getValue));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("setValue:" + String(setValue));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("parameters:" + String(parameters));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("preProcess:" + String(preProcess));
            loc1 = loc1 + "]";
            return loc1;
        }

        public var parameters:Array;

        public var getValue:Function;

        public var preProcess:Function;

        public var setValue:Function;
    }
}


//      class SpecialPropertyModifier
package caurina.transitions 
{
    public class SpecialPropertyModifier extends Object
    {
        public function SpecialPropertyModifier(arg1:Function, arg2:Function)
        {
            super();
            modifyValues = arg1;
            getValue = arg2;
            return;
        }

        public function toString():String
        {
            var loc1:*="";
            loc1 = loc1 + "[SpecialPropertyModifier ";
            loc1 = loc1 + ("modifyValues:" + String(modifyValues));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("getValue:" + String(getValue));
            loc1 = loc1 + "]";
            return loc1;
        }

        public var getValue:Function;

        public var modifyValues:Function;
    }
}


//      class SpecialPropertySplitter
package caurina.transitions 
{
    public class SpecialPropertySplitter extends Object
    {
        public function SpecialPropertySplitter(arg1:Function, arg2:Array)
        {
            super();
            splitValues = arg1;
            parameters = arg2;
            return;
        }

        public function toString():String
        {
            var loc1:*="";
            loc1 = loc1 + "[SpecialPropertySplitter ";
            loc1 = loc1 + ("splitValues:" + String(splitValues));
            loc1 = loc1 + ", ";
            loc1 = loc1 + ("parameters:" + String(parameters));
            loc1 = loc1 + "]";
            return loc1;
        }

        public var parameters:Array;

        public var splitValues:Function;
    }
}


//      class TweenListObj
package caurina.transitions 
{
    public class TweenListObj extends Object
    {
        public function TweenListObj(arg1:Object, arg2:Number, arg3:Number, arg4:Boolean, arg5:Function, arg6:Object)
        {
            super();
            scope = arg1;
            timeStart = arg2;
            timeComplete = arg3;
            useFrames = arg4;
            transition = arg5;
            transitionParams = arg6;
            properties = new Object();
            isPaused = false;
            timePaused = undefined;
            isCaller = false;
            updatesSkipped = 0;
            timesCalled = 0;
            skipUpdates = 0;
            hasStarted = false;
            return;
        }

        public function toString():String
        {
            var loc3:*=null;
            var loc1:*="\n[TweenListObj ";
            loc1 = loc1 + ("scope:" + String(scope));
            loc1 = loc1 + ", properties:";
            var loc2:*=true;
            var loc4:*=0;
            var loc5:*=properties;
            for (loc3 in loc5) 
            {
                if (!loc2) 
                {
                    loc1 = loc1 + ",";
                }
                loc1 = loc1 + ("[name:" + properties[loc3].name);
                loc1 = loc1 + (",valueStart:" + properties[loc3].valueStart);
                loc1 = loc1 + (",valueComplete:" + properties[loc3].valueComplete);
                loc1 = loc1 + "]";
                loc2 = false;
            }
            loc1 = loc1 + (", timeStart:" + String(timeStart));
            loc1 = loc1 + (", timeComplete:" + String(timeComplete));
            loc1 = loc1 + (", useFrames:" + String(useFrames));
            loc1 = loc1 + (", transition:" + String(transition));
            loc1 = loc1 + (", transitionParams:" + String(transitionParams));
            if (skipUpdates) 
            {
                loc1 = loc1 + (", skipUpdates:" + String(skipUpdates));
            }
            if (updatesSkipped) 
            {
                loc1 = loc1 + (", updatesSkipped:" + String(updatesSkipped));
            }
            if (Boolean(onStart)) 
            {
                loc1 = loc1 + (", onStart:" + String(onStart));
            }
            if (Boolean(onUpdate)) 
            {
                loc1 = loc1 + (", onUpdate:" + String(onUpdate));
            }
            if (Boolean(onComplete)) 
            {
                loc1 = loc1 + (", onComplete:" + String(onComplete));
            }
            if (Boolean(onOverwrite)) 
            {
                loc1 = loc1 + (", onOverwrite:" + String(onOverwrite));
            }
            if (Boolean(onError)) 
            {
                loc1 = loc1 + (", onError:" + String(onError));
            }
            if (onStartParams) 
            {
                loc1 = loc1 + (", onStartParams:" + String(onStartParams));
            }
            if (onUpdateParams) 
            {
                loc1 = loc1 + (", onUpdateParams:" + String(onUpdateParams));
            }
            if (onCompleteParams) 
            {
                loc1 = loc1 + (", onCompleteParams:" + String(onCompleteParams));
            }
            if (onOverwriteParams) 
            {
                loc1 = loc1 + (", onOverwriteParams:" + String(onOverwriteParams));
            }
            if (onStartScope) 
            {
                loc1 = loc1 + (", onStartScope:" + String(onStartScope));
            }
            if (onUpdateScope) 
            {
                loc1 = loc1 + (", onUpdateScope:" + String(onUpdateScope));
            }
            if (onCompleteScope) 
            {
                loc1 = loc1 + (", onCompleteScope:" + String(onCompleteScope));
            }
            if (onOverwriteScope) 
            {
                loc1 = loc1 + (", onOverwriteScope:" + String(onOverwriteScope));
            }
            if (onErrorScope) 
            {
                loc1 = loc1 + (", onErrorScope:" + String(onErrorScope));
            }
            if (rounded) 
            {
                loc1 = loc1 + (", rounded:" + String(rounded));
            }
            if (isPaused) 
            {
                loc1 = loc1 + (", isPaused:" + String(isPaused));
            }
            if (timePaused) 
            {
                loc1 = loc1 + (", timePaused:" + String(timePaused));
            }
            if (isCaller) 
            {
                loc1 = loc1 + (", isCaller:" + String(isCaller));
            }
            if (count) 
            {
                loc1 = loc1 + (", count:" + String(count));
            }
            if (timesCalled) 
            {
                loc1 = loc1 + (", timesCalled:" + String(timesCalled));
            }
            if (waitFrames) 
            {
                loc1 = loc1 + (", waitFrames:" + String(waitFrames));
            }
            if (hasStarted) 
            {
                loc1 = loc1 + (", hasStarted:" + String(hasStarted));
            }
            loc1 = loc1 + "]\n";
            return loc1;
        }

        public static function makePropertiesChain(arg1:Object):Object
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=NaN;
            var loc6:*=NaN;
            var loc7:*=NaN;
            var loc1:*=arg1.base;
            if (loc1) 
            {
                loc2 = {};
                if (loc1 is Array) 
                {
                    loc3 = [];
                    loc7 = 0;
                    while (loc7 < loc1.length) 
                    {
                        loc3.push(loc1[loc7]);
                        ++loc7;
                    }
                }
                else 
                {
                    loc3 = [loc1];
                }
                loc3.push(arg1);
                loc5 = loc3.length;
                loc6 = 0;
                while (loc6 < loc5) 
                {
                    if (loc3[loc6]["base"]) 
                    {
                        loc4 = caurina.transitions.AuxFunctions.concatObjects(makePropertiesChain(loc3[loc6]["base"]), loc3[loc6]);
                    }
                    else 
                    {
                        loc4 = loc3[loc6];
                    }
                    loc2 = caurina.transitions.AuxFunctions.concatObjects(loc2, loc4);
                    ++loc6;
                }
                if (loc2["base"]) 
                {
                    delete loc2["base"];
                }
                return loc2;
            }
            return arg1;
        }

        public function clone(arg1:Boolean):caurina.transitions.TweenListObj
        {
            var loc2:*=null;
            var loc1:*=new caurina.transitions.TweenListObj(scope, timeStart, timeComplete, useFrames, transition, transitionParams);
            loc1.properties = new Array();
            var loc3:*=0;
            var loc4:*=properties;
            for (loc2 in loc4) 
            {
                loc1.properties[loc2] = properties[loc2].clone();
            }
            loc1.skipUpdates = skipUpdates;
            loc1.updatesSkipped = updatesSkipped;
            if (!arg1) 
            {
                loc1.onStart = onStart;
                loc1.onUpdate = onUpdate;
                loc1.onComplete = onComplete;
                loc1.onOverwrite = onOverwrite;
                loc1.onError = onError;
                loc1.onStartParams = onStartParams;
                loc1.onUpdateParams = onUpdateParams;
                loc1.onCompleteParams = onCompleteParams;
                loc1.onOverwriteParams = onOverwriteParams;
                loc1.onStartScope = onStartScope;
                loc1.onUpdateScope = onUpdateScope;
                loc1.onCompleteScope = onCompleteScope;
                loc1.onOverwriteScope = onOverwriteScope;
                loc1.onErrorScope = onErrorScope;
            }
            loc1.rounded = rounded;
            loc1.isPaused = isPaused;
            loc1.timePaused = timePaused;
            loc1.isCaller = isCaller;
            loc1.count = count;
            loc1.timesCalled = timesCalled;
            loc1.waitFrames = waitFrames;
            loc1.hasStarted = hasStarted;
            return loc1;
        }

        public var hasStarted:Boolean;

        public var onUpdate:Function;

        public var useFrames:Boolean;

        public var count:Number;

        public var onOverwriteParams:Array;

        public var timeStart:Number;

        public var timeComplete:Number;

        public var onStartParams:Array;

        public var onUpdateScope:Object;

        public var rounded:Boolean;

        public var onUpdateParams:Array;

        public var properties:Object;

        public var onComplete:Function;

        public var transitionParams:Object;

        public var updatesSkipped:Number;

        public var onStart:Function;

        public var scope:Object;

        public var isCaller:Boolean;

        public var timePaused:Number;

        public var transition:Function;

        public var skipUpdates:Number;

        public var onCompleteParams:Array;

        public var onError:Function;

        public var timesCalled:Number;

        public var onErrorScope:Object;

        public var onOverwrite:Function;

        public var onStartScope:Object;

        public var isPaused:Boolean;

        public var waitFrames:Boolean;

        public var onCompleteScope:Object;

        public var onOverwriteScope:Object;
    }
}


//      class Tweener
package caurina.transitions 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    
    public class Tweener extends Object
    {
        public function Tweener()
        {
            super();
            trace("Tweener is a static class and should not be instantiated.");
            return;
        }

        public static function registerSpecialPropertyModifier(arg1:String, arg2:Function, arg3:Function):void
        {
            if (!_inited) 
            {
                init();
            }
            var loc1:*=new caurina.transitions.SpecialPropertyModifier(arg2, arg3);
            _specialPropertyModifierList[arg1] = loc1;
            return;
        }

        public static function getCurrentTweeningTime(arg1:Object):Number
        {
            return arg1.useFrames ? _currentTimeFrame : _currentTime;
        }

        public static function getTweenCount(arg1:Object):Number
        {
            var loc1:*=0;
            if (!Boolean(_tweenList)) 
            {
                return 0;
            }
            var loc2:*=0;
            loc1 = 0;
            while (loc1 < _tweenList.length) 
            {
                if (Boolean(_tweenList[loc1]) && _tweenList[loc1].scope == arg1) 
                {
                    loc2 = loc2 + caurina.transitions.AuxFunctions.getObjectLength(_tweenList[loc1].properties);
                }
                ++loc1;
            }
            return loc2;
        }

        public static function registerSpecialProperty(arg1:String, arg2:Function, arg3:Function, arg4:Array=null, arg5:Function=null):void
        {
            if (!_inited) 
            {
                init();
            }
            var loc1:*=new caurina.transitions.SpecialProperty(arg2, arg3, arg4, arg5);
            _specialPropertyList[arg1] = loc1;
            return;
        }

        public static function init(... rest):void
        {
            _inited = true;
            _transitionList = new Object();
            caurina.transitions.Equations.init();
            _specialPropertyList = new Object();
            _specialPropertyModifierList = new Object();
            _specialPropertySplitterList = new Object();
            return;
        }

        internal static function updateTweens():Boolean
        {
            var loc1:*=0;
            if (_tweenList.length == 0) 
            {
                return false;
            }
            loc1 = 0;
            while (loc1 < _tweenList.length) 
            {
                if (_tweenList[loc1] == undefined || !_tweenList[loc1].isPaused) 
                {
                    if (!updateTweenByIndex(loc1)) 
                    {
                        removeTweenByIndex(loc1);
                    }
                    if (_tweenList[loc1] == null) 
                    {
                        removeTweenByIndex(loc1, true);
                        --loc1;
                    }
                }
                ++loc1;
            }
            return true;
        }

        public static function addCaller(arg1:Object=null, arg2:Object=null):Boolean
        {
            var loc1:*=NaN;
            var loc2:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=NaN;
            var loc9:*=null;
            if (!Boolean(arg1)) 
            {
                return false;
            }
            if (arg1 is Array) 
            {
                loc2 = arg1.concat();
            }
            else 
            {
                loc2 = [arg1];
            }
            var loc3:*=arg2;
            if (!_inited) 
            {
                init();
            }
            if (!_engineExists || !Boolean(__tweener_controller__)) 
            {
                startEngine();
            }
            var loc4:*=isNaN(loc3.time) ? 0 : loc3.time;
            var loc5:*=isNaN(loc3.delay) ? 0 : loc3.delay;
            if (typeof loc3.transition != "string") 
            {
                loc6 = loc3.transition;
            }
            else 
            {
                loc9 = loc3.transition.toLowerCase();
                loc6 = _transitionList[loc9];
            }
            if (!Boolean(loc6)) 
            {
                loc6 = _transitionList["easeoutexpo"];
            }
            loc1 = 0;
            while (loc1 < loc2.length) 
            {
                if (loc3.useFrames != true) 
                {
                    loc7 = new caurina.transitions.TweenListObj(loc2[loc1], _currentTime + loc5 * 1000 / _timeScale, _currentTime + (loc5 * 1000 + loc4 * 1000) / _timeScale, false, loc6, loc3.transitionParams);
                }
                else 
                {
                    loc7 = new caurina.transitions.TweenListObj(loc2[loc1], _currentTimeFrame + loc5 / _timeScale, _currentTimeFrame + (loc5 + loc4) / _timeScale, true, loc6, loc3.transitionParams);
                }
                loc7.properties = null;
                loc7.onStart = loc3.onStart;
                loc7.onUpdate = loc3.onUpdate;
                loc7.onComplete = loc3.onComplete;
                loc7.onOverwrite = loc3.onOverwrite;
                loc7.onStartParams = loc3.onStartParams;
                loc7.onUpdateParams = loc3.onUpdateParams;
                loc7.onCompleteParams = loc3.onCompleteParams;
                loc7.onOverwriteParams = loc3.onOverwriteParams;
                loc7.onStartScope = loc3.onStartScope;
                loc7.onUpdateScope = loc3.onUpdateScope;
                loc7.onCompleteScope = loc3.onCompleteScope;
                loc7.onOverwriteScope = loc3.onOverwriteScope;
                loc7.onErrorScope = loc3.onErrorScope;
                loc7.isCaller = true;
                loc7.count = loc3.count;
                loc7.waitFrames = loc3.waitFrames;
                _tweenList.push(loc7);
                if (loc4 == 0 && loc5 == 0) 
                {
                    loc8 = (_tweenList.length - 1);
                    updateTweenByIndex(loc8);
                    removeTweenByIndex(loc8);
                }
                ++loc1;
            }
            return true;
        }

        internal static function stopEngine():void
        {
            _engineExists = false;
            _tweenList = null;
            _currentTime = 0;
            _currentTimeFrame = 0;
            __tweener_controller__.removeEventListener(flash.events.Event.ENTER_FRAME, caurina.transitions.Tweener.onEnterFrame);
            __tweener_controller__ = null;
            return;
        }

        public static function pauseAllTweens():Boolean
        {
            var loc2:*=0;
            if (!Boolean(_tweenList)) 
            {
                return false;
            }
            var loc1:*=false;
            loc2 = 0;
            while (loc2 < _tweenList.length) 
            {
                pauseTweenByIndex(loc2);
                loc1 = true;
                ++loc2;
            }
            return loc1;
        }

        public static function removeTweens(arg1:Object, ... rest):Boolean
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc1:*=new Array();
            loc2 = 0;
            while (loc2 < rest.length) 
            {
                if (typeof rest[loc2] == "string" && loc1.indexOf(rest[loc2]) == -1) 
                {
                    if (_specialPropertySplitterList[rest[loc2]]) 
                    {
                        loc4 = (loc3 = _specialPropertySplitterList[rest[loc2]]).splitValues(arg1, null);
                        loc5 = 0;
                        while (loc5 < loc4.length) 
                        {
                            loc1.push(loc4[loc5].name);
                            ++loc5;
                        }
                    }
                    else 
                    {
                        loc1.push(rest[loc2]);
                    }
                }
                ++loc2;
            }
            return affectTweens(removeTweenByIndex, arg1, loc1);
        }

        
        {
            _engineExists = false;
            _inited = false;
            _timeScale = 1;
        }

        public static function registerSpecialPropertySplitter(arg1:String, arg2:Function, arg3:Array=null):void
        {
            if (!_inited) 
            {
                init();
            }
            var loc1:*=new caurina.transitions.SpecialPropertySplitter(arg2, arg3);
            _specialPropertySplitterList[arg1] = loc1;
            return;
        }

        public static function removeTweenByIndex(arg1:Number, arg2:Boolean=false):Boolean
        {
            _tweenList[arg1] = null;
            if (arg2) 
            {
                _tweenList.splice(arg1, 1);
            }
            return true;
        }

        public static function splitTweens(arg1:Number, arg2:Array):uint
        {
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=false;
            var loc1:*=_tweenList[arg1];
            var loc2:*=loc1.clone(false);
            loc3 = 0;
            while (loc3 < arg2.length) 
            {
                loc4 = arg2[loc3];
                if (Boolean(loc1.properties[loc4])) 
                {
                    loc1.properties[loc4] = undefined;
                    delete loc1.properties[loc4];
                }
                ++loc3;
            }
            var loc6:*=0;
            var loc7:*=loc2.properties;
            for (loc4 in loc7) 
            {
                loc5 = false;
                loc3 = 0;
                while (loc3 < arg2.length) 
                {
                    if (arg2[loc3] == loc4) 
                    {
                        loc5 = true;
                        break;
                    }
                    ++loc3;
                }
                if (loc5) 
                {
                    continue;
                }
                loc2.properties[loc4] = undefined;
                delete loc2.properties[loc4];
            }
            _tweenList.push(loc2);
            return (_tweenList.length - 1);
        }

        public static function resumeTweens(arg1:Object, ... rest):Boolean
        {
            var loc2:*=0;
            var loc1:*=new Array();
            loc2 = 0;
            while (loc2 < rest.length) 
            {
                if (typeof rest[loc2] == "string" && loc1.indexOf(rest[loc2]) == -1) 
                {
                    loc1.push(rest[loc2]);
                }
                ++loc2;
            }
            return affectTweens(resumeTweenByIndex, arg1, loc1);
        }

        public static function updateFrame():void
        {
            var loc1:*;
            _currentTimeFrame++;
            return;
        }

        public static function resumeTweenByIndex(arg1:Number):Boolean
        {
            var loc1:*=_tweenList[arg1];
            if (loc1 == null || !loc1.isPaused) 
            {
                return false;
            }
            var loc2:*=getCurrentTweeningTime(loc1);
            loc1.timeStart = loc1.timeStart + (loc2 - loc1.timePaused);
            loc1.timeComplete = loc1.timeComplete + (loc2 - loc1.timePaused);
            loc1.timePaused = undefined;
            loc1.isPaused = false;
            return true;
        }

        internal static function updateTweenByIndex(arg1:Number):Boolean
        {
            var tScope:Object;
            var nv:Number;
            var pv:Number;
            var cTime:Number;
            var eventScope:Object;
            var pName:String;
            var isOver:Boolean;
            var b:Number;
            var c:Number;
            var i:Number;
            var tTweening:caurina.transitions.TweenListObj;
            var tProperty:Object;
            var mustUpdate:Boolean;
            var d:Number;
            var t:Number;

            var loc1:*;
            tTweening = null;
            mustUpdate = false;
            nv = NaN;
            t = NaN;
            b = NaN;
            c = NaN;
            d = NaN;
            pName = null;
            eventScope = null;
            tScope = null;
            tProperty = null;
            pv = NaN;
            i = arg1;
            tTweening = _tweenList[i];
            if (tTweening == null || !Boolean(tTweening.scope)) 
            {
                return false;
            }
            isOver = false;
            cTime = getCurrentTweeningTime(tTweening);
            if (cTime >= tTweening.timeStart) 
            {
                tScope = tTweening.scope;
                if (tTweening.isCaller) 
                {
                    do 
                    {
                        t = (tTweening.timeComplete - tTweening.timeStart) / tTweening.count * (tTweening.timesCalled + 1);
                        b = tTweening.timeStart;
                        c = tTweening.timeComplete - tTweening.timeStart;
                        d = tTweening.timeComplete - tTweening.timeStart;
                        nv = tTweening.transition(t, b, c, d);
                        if (cTime >= nv) 
                        {
                            if (Boolean(tTweening.onUpdate)) 
                            {
                                eventScope = Boolean(tTweening.onUpdateScope) ? tTweening.onUpdateScope : tScope;
                                try 
                                {
                                    tTweening.onUpdate.apply(eventScope, tTweening.onUpdateParams);
                                }
                                catch (e1:Error)
                                {
                                    handleError(tTweening, e1, "onUpdate");
                                }
                            }
                            var loc3:*=((loc2 = tTweening).timesCalled + 1);
                            loc2.timesCalled = loc3;
                            if (tTweening.timesCalled >= tTweening.count) 
                            {
                                isOver = true;
                                break;
                            }
                            if (tTweening.waitFrames) 
                            {
                                break;
                            }
                        }
                    }
                    while (cTime >= nv);
                }
                else 
                {
                    mustUpdate = tTweening.skipUpdates < 1 || !tTweening.skipUpdates || tTweening.updatesSkipped >= tTweening.skipUpdates;
                    if (cTime >= tTweening.timeComplete) 
                    {
                        isOver = true;
                        mustUpdate = true;
                    }
                    if (!tTweening.hasStarted) 
                    {
                        if (Boolean(tTweening.onStart)) 
                        {
                            eventScope = Boolean(tTweening.onStartScope) ? tTweening.onStartScope : tScope;
                            try 
                            {
                                tTweening.onStart.apply(eventScope, tTweening.onStartParams);
                            }
                            catch (e2:Error)
                            {
                                handleError(tTweening, e2, "onStart");
                            }
                        }
                        loc2 = 0;
                        loc3 = tTweening.properties;
                        for (pName in loc3) 
                        {
                            if (tTweening.properties[pName].isSpecialProperty) 
                            {
                                if (Boolean(_specialPropertyList[pName].preProcess)) 
                                {
                                    tTweening.properties[pName].valueComplete = _specialPropertyList[pName].preProcess(tScope, _specialPropertyList[pName].parameters, tTweening.properties[pName].originalValueComplete, tTweening.properties[pName].extra);
                                }
                                pv = _specialPropertyList[pName].getValue(tScope, _specialPropertyList[pName].parameters, tTweening.properties[pName].extra);
                            }
                            else 
                            {
                                pv = tScope[pName];
                            }
                            tTweening.properties[pName].valueStart = isNaN(pv) ? tTweening.properties[pName].valueComplete : pv;
                        }
                        mustUpdate = true;
                        tTweening.hasStarted = true;
                    }
                    if (mustUpdate) 
                    {
                        loc2 = 0;
                        loc3 = tTweening.properties;
                        for (pName in loc3) 
                        {
                            tProperty = tTweening.properties[pName];
                            if (isOver) 
                            {
                                nv = tProperty.valueComplete;
                            }
                            else if (tProperty.hasModifier) 
                            {
                                t = cTime - tTweening.timeStart;
                                d = tTweening.timeComplete - tTweening.timeStart;
                                nv = tTweening.transition(t, 0, 1, d, tTweening.transitionParams);
                                nv = tProperty.modifierFunction(tProperty.valueStart, tProperty.valueComplete, nv, tProperty.modifierParameters);
                            }
                            else 
                            {
                                t = cTime - tTweening.timeStart;
                                b = tProperty.valueStart;
                                c = tProperty.valueComplete - tProperty.valueStart;
                                d = tTweening.timeComplete - tTweening.timeStart;
                                nv = tTweening.transition(t, b, c, d, tTweening.transitionParams);
                            }
                            if (tTweening.rounded) 
                            {
                                nv = Math.round(nv);
                            }
                            if (tProperty.isSpecialProperty) 
                            {
                                _specialPropertyList[pName].setValue(tScope, nv, _specialPropertyList[pName].parameters, tTweening.properties[pName].extra);
                                continue;
                            }
                            tScope[pName] = nv;
                        }
                        tTweening.updatesSkipped = 0;
                        if (Boolean(tTweening.onUpdate)) 
                        {
                            eventScope = Boolean(tTweening.onUpdateScope) ? tTweening.onUpdateScope : tScope;
                            try 
                            {
                                tTweening.onUpdate.apply(eventScope, tTweening.onUpdateParams);
                            }
                            catch (e3:Error)
                            {
                                handleError(tTweening, e3, "onUpdate");
                            }
                        }
                    }
                    else 
                    {
                        loc3 = ((loc2 = tTweening).updatesSkipped + 1);
                        loc2.updatesSkipped = loc3;
                    }
                }
                if (isOver && Boolean(tTweening.onComplete)) 
                {
                    eventScope = Boolean(tTweening.onCompleteScope) ? tTweening.onCompleteScope : tScope;
                    try 
                    {
                        tTweening.onComplete.apply(eventScope, tTweening.onCompleteParams);
                    }
                    catch (e4:Error)
                    {
                        handleError(tTweening, e4, "onComplete");
                    }
                }
                return !isOver;
            }
            return true;
        }

        public static function getVersion():String
        {
            return "AS3 1.31.74";
        }

        public static function pauseTweens(arg1:Object, ... rest):Boolean
        {
            var loc2:*=0;
            var loc1:*=new Array();
            loc2 = 0;
            while (loc2 < rest.length) 
            {
                if (typeof rest[loc2] == "string" && loc1.indexOf(rest[loc2]) == -1) 
                {
                    loc1.push(rest[loc2]);
                }
                ++loc2;
            }
            return affectTweens(pauseTweenByIndex, arg1, loc1);
        }

        public static function onEnterFrame(arg1:flash.events.Event):void
        {
            updateTime();
            updateFrame();
            var loc1:*=false;
            loc1 = updateTweens();
            if (!loc1) 
            {
                stopEngine();
            }
            return;
        }

        public static function updateTime():void
        {
            _currentTime = flash.utils.getTimer();
            return;
        }

        public static function removeAllTweens():Boolean
        {
            var loc2:*=0;
            if (!Boolean(_tweenList)) 
            {
                return false;
            }
            var loc1:*=false;
            loc2 = 0;
            while (loc2 < _tweenList.length) 
            {
                removeTweenByIndex(loc2);
                loc1 = true;
                ++loc2;
            }
            return loc1;
        }

        public static function setTimeScale(arg1:Number):void
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            if (isNaN(arg1)) 
            {
                arg1 = 1;
            }
            if (arg1 < 1e-005) 
            {
                arg1 = 1e-005;
            }
            if (arg1 != _timeScale) 
            {
                if (_tweenList != null) 
                {
                    loc1 = 0;
                    while (loc1 < _tweenList.length) 
                    {
                        loc2 = getCurrentTweeningTime(_tweenList[loc1]);
                        _tweenList[loc1].timeStart = loc2 - (loc2 - _tweenList[loc1].timeStart) * _timeScale / arg1;
                        _tweenList[loc1].timeComplete = loc2 - (loc2 - _tweenList[loc1].timeComplete) * _timeScale / arg1;
                        if (_tweenList[loc1].timePaused != undefined) 
                        {
                            _tweenList[loc1].timePaused = loc2 - (loc2 - _tweenList[loc1].timePaused) * _timeScale / arg1;
                        }
                        ++loc1;
                    }
                }
                _timeScale = arg1;
            }
            return;
        }

        public static function resumeAllTweens():Boolean
        {
            var loc2:*=0;
            if (!Boolean(_tweenList)) 
            {
                return false;
            }
            var loc1:*=false;
            loc2 = 0;
            while (loc2 < _tweenList.length) 
            {
                resumeTweenByIndex(loc2);
                loc1 = true;
                ++loc2;
            }
            return loc1;
        }

        internal static function handleError(arg1:caurina.transitions.TweenListObj, arg2:Error, arg3:String):void
        {
            var pTweening:caurina.transitions.TweenListObj;
            var pError:Error;
            var eventScope:Object;
            var pCallBackName:String;

            var loc1:*;
            eventScope = null;
            pTweening = arg1;
            pError = arg2;
            pCallBackName = arg3;
            if (Boolean(pTweening.onError) && pTweening.onError is Function) 
            {
                eventScope = Boolean(pTweening.onErrorScope) ? pTweening.onErrorScope : pTweening.scope;
                try 
                {
                    pTweening.onError.apply(eventScope, [pTweening.scope, pError]);
                }
                catch (metaError:Error)
                {
                    printError(String(pTweening.scope) + " raised an error while executing the \'onError\' handler. Original error:\n " + pError.getStackTrace() + "\nonError error: " + metaError.getStackTrace());
                }
            }
            else if (!Boolean(pTweening.onError)) 
            {
                printError(String(pTweening.scope) + " raised an error while executing the \'" + pCallBackName + "\'handler. \n" + pError.getStackTrace());
            }
            return;
        }

        internal static function startEngine():void
        {
            _engineExists = true;
            _tweenList = new Array();
            __tweener_controller__ = new flash.display.MovieClip();
            __tweener_controller__.addEventListener(flash.events.Event.ENTER_FRAME, caurina.transitions.Tweener.onEnterFrame);
            _currentTimeFrame = 0;
            updateTime();
            return;
        }

        public static function addTween(arg1:Object=null, arg2:Object=null):Boolean
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            var loc3:*=null;
            var loc4:*=null;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*=NaN;
            var loc15:*=null;
            var loc16:*=null;
            var loc17:*=null;
            var loc18:*=null;
            if (!Boolean(arg1)) 
            {
                return false;
            }
            if (arg1 is Array) 
            {
                loc4 = arg1.concat();
            }
            else 
            {
                loc4 = [arg1];
            }
            var loc5:*=caurina.transitions.TweenListObj.makePropertiesChain(arg2);
            if (!_inited) 
            {
                init();
            }
            if (!_engineExists || !Boolean(__tweener_controller__)) 
            {
                startEngine();
            }
            var loc6:*=isNaN(loc5.time) ? 0 : loc5.time;
            var loc7:*=isNaN(loc5.delay) ? 0 : loc5.delay;
            var loc8:*=new Array();
            var loc9:*={"time":true, "delay":true, "useFrames":true, "skipUpdates":true, "transition":true, "transitionParams":true, "onStart":true, "onUpdate":true, "onComplete":true, "onOverwrite":true, "onError":true, "rounded":true, "onStartParams":true, "onUpdateParams":true, "onCompleteParams":true, "onOverwriteParams":true, "onStartScope":true, "onUpdateScope":true, "onCompleteScope":true, "onOverwriteScope":true, "onErrorScope":true};
            var loc10:*=new Object();
            var loc19:*=0;
            var loc20:*=loc5;
            for (loc3 in loc20) 
            {
                if (loc9[loc3]) 
                {
                    continue;
                }
                if (_specialPropertySplitterList[loc3]) 
                {
                    loc15 = _specialPropertySplitterList[loc3].splitValues(loc5[loc3], _specialPropertySplitterList[loc3].parameters);
                    loc1 = 0;
                    while (loc1 < loc15.length) 
                    {
                        if (_specialPropertySplitterList[loc15[loc1].name]) 
                        {
                            loc16 = _specialPropertySplitterList[loc15[loc1].name].splitValues(loc15[loc1].value, _specialPropertySplitterList[loc15[loc1].name].parameters);
                            loc2 = 0;
                            while (loc2 < loc16.length) 
                            {
                                loc8[loc16[loc2].name] = {"valueStart":undefined, "valueComplete":loc16[loc2].value, "arrayIndex":loc16[loc2].arrayIndex, "isSpecialProperty":false};
                                ++loc2;
                            }
                        }
                        else 
                        {
                            loc8[loc15[loc1].name] = {"valueStart":undefined, "valueComplete":loc15[loc1].value, "arrayIndex":loc15[loc1].arrayIndex, "isSpecialProperty":false};
                        }
                        ++loc1;
                    }
                    continue;
                }
                if (_specialPropertyModifierList[loc3] != undefined) 
                {
                    loc17 = _specialPropertyModifierList[loc3].modifyValues(loc5[loc3]);
                    loc1 = 0;
                    while (loc1 < loc17.length) 
                    {
                        loc10[loc17[loc1].name] = {"modifierParameters":loc17[loc1].parameters, "modifierFunction":_specialPropertyModifierList[loc3].getValue};
                        ++loc1;
                    }
                    continue;
                }
                loc8[loc3] = {"valueStart":undefined, "valueComplete":loc5[loc3]};
            }
            loc19 = 0;
            loc20 = loc8;
            for (loc3 in loc20) 
            {
                if (_specialPropertyList[loc3] != undefined) 
                {
                    loc8[loc3].isSpecialProperty = true;
                    continue;
                }
                if (loc4[0][loc3] != undefined) 
                {
                    continue;
                }
                printError("The property \'" + loc3 + "\' doesn\'t seem to be a normal object property of " + String(loc4[0]) + " or a registered special property.");
            }
            loc19 = 0;
            loc20 = loc10;
            for (loc3 in loc20) 
            {
                if (loc8[loc3] == undefined) 
                {
                    continue;
                }
                loc8[loc3].modifierParameters = loc10[loc3].modifierParameters;
                loc8[loc3].modifierFunction = loc10[loc3].modifierFunction;
            }
            if (typeof loc5.transition != "string") 
            {
                loc11 = loc5.transition;
            }
            else 
            {
                loc18 = loc5.transition.toLowerCase();
                loc11 = _transitionList[loc18];
            }
            if (!Boolean(loc11)) 
            {
                loc11 = _transitionList["easeoutexpo"];
            }
            loc1 = 0;
            while (loc1 < loc4.length) 
            {
                loc12 = new Object();
                loc19 = 0;
                loc20 = loc8;
                for (loc3 in loc20) 
                {
                    loc12[loc3] = new caurina.transitions.PropertyInfoObj(loc8[loc3].valueStart, loc8[loc3].valueComplete, loc8[loc3].valueComplete, loc8[loc3].arrayIndex, {}, loc8[loc3].isSpecialProperty, loc8[loc3].modifierFunction, loc8[loc3].modifierParameters);
                }
                if (loc5.useFrames != true) 
                {
                    loc13 = new caurina.transitions.TweenListObj(loc4[loc1], _currentTime + loc7 * 1000 / _timeScale, _currentTime + (loc7 * 1000 + loc6 * 1000) / _timeScale, false, loc11, loc5.transitionParams);
                }
                else 
                {
                    loc13 = new caurina.transitions.TweenListObj(loc4[loc1], _currentTimeFrame + loc7 / _timeScale, _currentTimeFrame + (loc7 + loc6) / _timeScale, true, loc11, loc5.transitionParams);
                }
                loc13.properties = loc12;
                loc13.onStart = loc5.onStart;
                loc13.onUpdate = loc5.onUpdate;
                loc13.onComplete = loc5.onComplete;
                loc13.onOverwrite = loc5.onOverwrite;
                loc13.onError = loc5.onError;
                loc13.onStartParams = loc5.onStartParams;
                loc13.onUpdateParams = loc5.onUpdateParams;
                loc13.onCompleteParams = loc5.onCompleteParams;
                loc13.onOverwriteParams = loc5.onOverwriteParams;
                loc13.onStartScope = loc5.onStartScope;
                loc13.onUpdateScope = loc5.onUpdateScope;
                loc13.onCompleteScope = loc5.onCompleteScope;
                loc13.onOverwriteScope = loc5.onOverwriteScope;
                loc13.onErrorScope = loc5.onErrorScope;
                loc13.rounded = loc5.rounded;
                loc13.skipUpdates = loc5.skipUpdates;
                removeTweensByTime(loc13.scope, loc13.properties, loc13.timeStart, loc13.timeComplete);
                _tweenList.push(loc13);
                if (loc6 == 0 && loc7 == 0) 
                {
                    loc14 = (_tweenList.length - 1);
                    updateTweenByIndex(loc14);
                    removeTweenByIndex(loc14);
                }
                ++loc1;
            }
            return true;
        }

        public static function registerTransition(arg1:String, arg2:Function):void
        {
            if (!_inited) 
            {
                init();
            }
            _transitionList[arg1] = arg2;
            return;
        }

        public static function printError(arg1:String):void
        {
            trace("## [Tweener] Error: " + arg1);
            return;
        }

        internal static function affectTweens(arg1:Function, arg2:Object, arg3:Array):Boolean
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            var loc1:*=false;
            if (!Boolean(_tweenList)) 
            {
                return false;
            }
            loc2 = 0;
            while (loc2 < _tweenList.length) 
            {
                if (_tweenList[loc2] && _tweenList[loc2].scope == arg2) 
                {
                    if (arg3.length != 0) 
                    {
                        loc3 = new Array();
                        loc4 = 0;
                        while (loc4 < arg3.length) 
                        {
                            if (Boolean(_tweenList[loc2].properties[arg3[loc4]])) 
                            {
                                loc3.push(arg3[loc4]);
                            }
                            ++loc4;
                        }
                        if (loc3.length > 0) 
                        {
                            if ((loc5 = caurina.transitions.AuxFunctions.getObjectLength(_tweenList[loc2].properties)) != loc3.length) 
                            {
                                loc6 = splitTweens(loc2, loc3);
                                arg1(loc6);
                                loc1 = true;
                            }
                            else 
                            {
                                arg1(loc2);
                                loc1 = true;
                            }
                        }
                    }
                    else 
                    {
                        arg1(loc2);
                        loc1 = true;
                    }
                }
                ++loc2;
            }
            return loc1;
        }

        public static function getTweens(arg1:Object):Array
        {
            var loc1:*=0;
            var loc2:*=null;
            if (!Boolean(_tweenList)) 
            {
                return [];
            }
            var loc3:*=new Array();
            loc1 = 0;
            while (loc1 < _tweenList.length) 
            {
                if (Boolean(_tweenList[loc1]) && _tweenList[loc1].scope == arg1) 
                {
                    var loc4:*=0;
                    var loc5:*=_tweenList[loc1].properties;
                    for (loc2 in loc5) 
                    {
                        loc3.push(loc2);
                    }
                }
                ++loc1;
            }
            return loc3;
        }

        public static function isTweening(arg1:Object):Boolean
        {
            var loc1:*=0;
            if (!Boolean(_tweenList)) 
            {
                return false;
            }
            loc1 = 0;
            while (loc1 < _tweenList.length) 
            {
                if (Boolean(_tweenList[loc1]) && _tweenList[loc1].scope == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public static function removeTweensByTime(arg1:Object, arg2:Object, arg3:Number, arg4:Number):Boolean
        {
            var removed:Boolean;
            var p_properties:Object;
            var p_scope:Object;
            var p_timeStart:Number;
            var i:uint;
            var p_timeComplete:Number;
            var removedLocally:Boolean;
            var eventScope:Object;
            var pName:String;
            var tl:uint;

            var loc1:*;
            removedLocally = false;
            i = 0;
            pName = null;
            eventScope = null;
            p_scope = arg1;
            p_properties = arg2;
            p_timeStart = arg3;
            p_timeComplete = arg4;
            removed = false;
            tl = _tweenList.length;
            i = 0;
            while (i < tl) 
            {
                if (Boolean(_tweenList[i]) && p_scope == _tweenList[i].scope) 
                {
                    if (p_timeComplete > _tweenList[i].timeStart && p_timeStart < _tweenList[i].timeComplete) 
                    {
                        removedLocally = false;
                        var loc2:*=0;
                        var loc3:*=_tweenList[i].properties;
                        for (pName in loc3) 
                        {
                            if (!Boolean(p_properties[pName])) 
                            {
                                continue;
                            }
                            if (Boolean(_tweenList[i].onOverwrite)) 
                            {
                                eventScope = Boolean(_tweenList[i].onOverwriteScope) ? _tweenList[i].onOverwriteScope : _tweenList[i].scope;
                                try 
                                {
                                    _tweenList[i].onOverwrite.apply(eventScope, _tweenList[i].onOverwriteParams);
                                }
                                catch (e:Error)
                                {
                                    handleError(_tweenList[i], e, "onOverwrite");
                                }
                            }
                            _tweenList[i].properties[pName] = undefined;
                            delete _tweenList[i].properties[pName];
                            removedLocally = true;
                            removed = true;
                        }
                        if (removedLocally) 
                        {
                            if (caurina.transitions.AuxFunctions.getObjectLength(_tweenList[i].properties) == 0) 
                            {
                                removeTweenByIndex(i);
                            }
                        }
                    }
                }
                ++i;
            }
            return removed;
        }

        public static function pauseTweenByIndex(arg1:Number):Boolean
        {
            var loc1:*=_tweenList[arg1];
            if (loc1 == null || loc1.isPaused) 
            {
                return false;
            }
            loc1.timePaused = getCurrentTweeningTime(loc1);
            loc1.isPaused = true;
            return true;
        }

        internal static var _timeScale:Number=1;

        internal static var _currentTimeFrame:Number;

        internal static var _specialPropertySplitterList:Object;

        internal static var _engineExists:Boolean=false;

        internal static var _specialPropertyModifierList:Object;

        internal static var _currentTime:Number;

        internal static var _tweenList:Array;

        internal static var _transitionList:Object;

        internal static var _inited:Boolean=false;

        internal static var _specialPropertyList:Object;

        internal static var __tweener_controller__:flash.display.MovieClip;
    }
}


//  package com
//    package jac
//      package mouse
//        class BrowserInfo
package com.jac.mouse 
{
    public class BrowserInfo extends Object
    {
        public function BrowserInfo(arg1:Object, arg2:Object, arg3:String)
        {
            var loc1:*=null;
            var loc2:*=null;
            super();
            if (!arg1 || !arg2 || !arg3) 
            {
                return;
            }
            this._version = arg1.version;
            var loc3:*=0;
            var loc4:*=arg1;
            for (loc1 in loc4) 
            {
                if (loc1 == "version") 
                {
                    continue;
                }
                if (arg1[loc1] != true) 
                {
                    continue;
                }
                this._browser = loc1;
                break;
            }
            loc3 = 0;
            loc4 = arg2;
            for (loc2 in loc4) 
            {
                if (arg2[loc2] != true) 
                {
                    continue;
                }
                this._platform = loc2;
            }
            return;
        }

        public function get platform():String
        {
            return this._platform;
        }

        public function get browser():String
        {
            return this._browser;
        }

        public function get version():String
        {
            return this._version;
        }

        public static const WIN_PLATFORM:String="win";

        public static const MAC_PLATFORM:String="mac";

        public static const SAFARI_AGENT:String="safari";

        public static const OPERA_AGENT:String="opera";

        public static const IE_AGENT:String="msie";

        public static const MOZILLA_AGENT:String="mozilla";

        public static const CHROME_AGENT:String="chrome";

        internal var _platform:String="undefined";

        internal var _browser:String="undefined";

        internal var _version:String="undefined";
    }
}


//        class MouseWheelEnabler
package com.jac.mouse 
{
    import flash.display.*;
    import flash.events.*;
    import flash.external.*;
    import flash.utils.*;
    
    public class MouseWheelEnabler extends Object
    {
        public function MouseWheelEnabler()
        {
            super();
            return;
        }

        public static function init(arg1:flash.display.Stage, arg2:Boolean=false):void
        {
            if (!initialised) 
            {
                initialised = true;
                registerListenerForMouseMove(arg1);
                registerJS();
            }
            useRawValues = arg2;
            return;
        }

        internal static function registerListenerForMouseMove(arg1:flash.display.Stage):void
        {
            var stage:flash.display.Stage;

            var loc1:*;
            stage = arg1;
            stage.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, function (arg1:flash.events.MouseEvent):void
            {
                currentItem = flash.display.InteractiveObject(arg1.target);
                browserMouseEvent = flash.events.MouseEvent(arg1);
                return;
            })
            return;
        }

        internal static function registerJS():void
        {
            var id:String;

            var loc1:*;
            id = null;
            if (flash.external.ExternalInterface.available) 
            {
                id = "mws_" + Math.floor(Math.random() * 1000000);
                flash.external.ExternalInterface.addCallback(id, function ():void
                {
                    return;
                })
                flash.external.ExternalInterface.call(MouseWheelEnabler_JavaScript.CODE);
                flash.external.ExternalInterface.call("mws.InitMouseWheelSupport", id);
                flash.external.ExternalInterface.addCallback("externalMouseEvent", handleExternalMouseEvent);
            }
            return;
        }

        internal static function handleExternalMouseEvent(arg1:Number, arg2:Number):void
        {
            var loc1:*=NaN;
            var loc2:*;
            if ((loc2 = flash.utils.getTimer()) >= eventTimeout + lastEventTime) 
            {
                if (useRawValues) 
                {
                    loc1 = arg1;
                }
                else 
                {
                    loc1 = arg2;
                }
                if (currentItem && browserMouseEvent) 
                {
                    currentItem.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.MOUSE_WHEEL, true, false, browserMouseEvent.localX, browserMouseEvent.localY, browserMouseEvent.relatedObject, browserMouseEvent.ctrlKey, browserMouseEvent.altKey, browserMouseEvent.shiftKey, browserMouseEvent.buttonDown, int(loc1)));
                }
                lastEventTime = loc2;
            }
            return;
        }

        public static function getBrowserInfo():com.jac.mouse.BrowserInfo
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (flash.external.ExternalInterface.available) 
            {
                loc1 = flash.external.ExternalInterface.call("mws.getBrowserInfo");
                loc2 = flash.external.ExternalInterface.call("mws.getPlatformInfo");
                loc3 = flash.external.ExternalInterface.call("mws.getAgentInfo");
                return new com.jac.mouse.BrowserInfo(loc1, loc2, loc3);
            }
            return null;
        }

        
        {
            initialised = false;
            lastEventTime = 0;
            eventTimeout = 50;
        }

        internal static var initialised:Boolean=false;

        internal static var currentItem:flash.display.InteractiveObject;

        internal static var browserMouseEvent:flash.events.MouseEvent;

        internal static var lastEventTime:uint=0;

        public static var useRawValues:Boolean;

        public static var eventTimeout:Number=50;
    }
}


class MouseWheelEnabler_JavaScript extends Object
{
    public function MouseWheelEnabler_JavaScript()
    {
        super();
        return;
    }

    public static const CODE:XML=new XML("<script><![CDATA[\n\t\tfunction()\n\t\t{\n\t\t\t// create unique namespace\n\t\t\tif(typeof mws == \"undefined\" || !mws)\t\n\t\t\t{\n\t\t\t\tmws = {};\n\t\t\t}\n\t\t\t\n\t\t\tvar userAgent = navigator.userAgent.toLowerCase();\n\t\t\tmws.agent = userAgent;\n\t\t\tmws.platform = \n\t\t\t{\n\t\t\t\twin:/win/.test(userAgent),\n\t\t\t\tmac:/mac/.test(userAgent),\n\t\t\t\tother:!/win/.test(userAgent) && !/mac/.test(userAgent)\n\t\t\t};\n\t\t\t\n\t\t\tmws.vars = {};\n\t\t\t\n\t\t\tmws.browser = \n\t\t\t{\n\t\t\t\tversion: (userAgent.match(/.+(?:rv|it|ra|ie)[\\/: ]([\\d.]+)/) || [])[1],\n\t\t\t\tsafari: /webkit/.test(userAgent) && !/chrome/.test(userAgent),\n\t\t\t\topera: /opera/.test(userAgent),\n\t\t\t\tmsie: /msie/.test(userAgent) && !/opera/.test(userAgent),\n\t\t\t\tmozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent),\n\t\t\t\tchrome: /chrome/.test(userAgent)\n\t\t\t};\n\t\t\t\n\t\t\t// find the function we added\n\t\t\tmws.findSwf = function(id) \n\t\t\t{\n\t\t\t\tvar objects = document.getElementsByTagName(\"object\");\n\t\t\t\tfor(var i = 0; i < objects.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif(typeof objects[i][id] != \"undefined\")\n\t\t\t\t\t{\n\t\t\t\t\t\treturn objects[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar embeds = document.getElementsByTagName(\"embed\");\n\t\t\t\t\n\t\t\t\tfor(var j = 0; j < embeds.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif(typeof embeds[j][id] != \"undefined\")\n\t\t\t\t\t{\n\t\t\t\t\t\treturn embeds[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\tmws.usingWmode = function( swf )\n\t\t\t{\n\t\t\t\tif( typeof swf.getAttribute == \"undefined\" )\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar wmode = swf.getAttribute( \"wmode\" );\n\t\t\t\tif( typeof wmode == \"undefined\" )\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t//Debug logging\n\t\t\tmws.log = function( message ) \n\t\t\t{\n\t\t\t\tif( typeof console != \"undefined\" )\n\t\t\t\t{\n\t\t\t\t\tconsole.log( message );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//alert( message );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmws.shouldAddHandler = function( swf )\n\t\t\t{\n\t\t\t\tif( !swf )\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tmws.getBrowserInfo = function()\n\t\t\t{//getBrowserObj\n\t\t\t\treturn mws.browser;\n\t\t\t}//getBrowserObj\n\t\t\t\n\t\t\tmws.getAgentInfo = function()\n\t\t\t{//getAgentInfo\n\t\t\t\treturn mws.agent;\n\t\t\t}//getAgentInfo\n\t\t\t\n\t\t\tmws.getPlatformInfo = function()\n\t\t\t{//getPlatformInfo\n\t\t\t\treturn mws.platform;\n\t\t\t}//getPlatformInfo\n\t\t\t\n\t\t\tmws.addScrollListeners = function()\n\t\t\t{//addScrollListeners\n\t\t\t\t\n\t\t\t\t// install mouse listeners\n\t\t\t\tif(typeof window.addEventListener != \'undefined\') \n\t\t\t\t{\n\t\t\t\t\twindow.addEventListener(\'DOMMouseScroll\', _mousewheel, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.onmousewheel = document.onmousewheel = _mousewheel;\n\t\t\t\t\n\t\t\t}//addScrollListeners\n\t\t\t\n\t\t\tmws.removeScrollListeners = function()\n\t\t\t{//removeScrollListeners\n\t\t\t\t// install mouse listeners\n\t\t\t\tif(typeof window.removeEventListener != \'undefined\') \n\t\t\t\t{\n\t\t\t\t\twindow.removeEventListener(\'DOMMouseScroll\', _mousewheel, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twindow.onmousewheel = document.onmousewheel = null;\n\t\t\t}//removeScrollListeners\n\t\t\t\n\t\t\tmws.InitMouseWheelSupport = function(id) \n\t\t\t{//InitMouseWheelSupport\n\t\t\t\t//grab reference to the swf\n\t\t\t\tvar swf = mws.findSwf(id);\n\t\t\t\t\n\t\t\t\t//see if we can add the mouse listeners\n\t\t\t\tvar shouldAdd = mws.shouldAddHandler( swf );\n\t\t\t\t\n\t\t\t\tif( shouldAdd ) \n\t\t\t\t{\n\t\t\t\t\t/// Mousewheel support\n\t\t\t\t\t_mousewheel = function(event) \n\t\t\t\t\t{//Mouse Wheel\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t//Cover for IE\n\t\t\t\t\t\tif (!event) event = window.event;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar rawDelta = 0;\n\t\t\t\t\t\tvar divisor = 1;\n\t\t\t\t\t\tvar scaledDelta = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Handle scaling the delta.\n\t\t\t\t\t\t//This is becoming less and less useful as more browser/hardware combos emerge.\n\t\t\t\t\t\tif(event.wheelDelta)\t\n\t\t\t\t\t\t{//normal event\n\t\t\t\t\t\t\trawDelta = event.wheelDelta;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(mws.browser.opera)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivisor = 12;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(mws.browser.safari && mws.browser.version.split(\".\")[0] >= 528)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivisor = 12;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivisor = 120;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}//normal event\n\t\t\t\t\t\telse if(event.detail)\t\t\n\t\t\t\t\t\t{//special event\n\t\t\t\t\t\t\trawDelta = -event.detail;\n\t\t\t\t\t\t}//special event\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{//odd event\n\t\t\t\t\t\t\t//Unhandled event type (future browser graceful fail)\n\t\t\t\t\t\t\trawDelta = 0;\n\t\t\t\t\t\t\tscaledDelta = 0;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//alert(\'Odd Event\');\n\t\t\t\t\t\t}//odd event\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(Math.abs(rawDelta) >= divisor)\n\t\t\t\t\t\t{//divide\n\t\t\t\t\t\t\tscaledDelta = rawDelta/divisor;\n\t\t\t\t\t\t}//divide\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{//don\'t scale\n\t\t\t\t\t\t\tscaledDelta = rawDelta;\n\t\t\t\t\t\t}//don\'t scale\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Call into the swf to fire a mouse event\n\t\t\t\t\t\tswf.externalMouseEvent(rawDelta, scaledDelta);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(event.preventDefault)\t\n\t\t\t\t\t\t{//Stop default action\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}//Stop default action\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{//stop default action (IE)\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}//stop default action (IE)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}//MouseWheel\n\n\t\t\t\t\t//set up listeners\n\t\t\t\t\tswf.onmouseover = mws.addScrollListeners;\n\t\t\t\t\tswf.onmouseout = mws.removeScrollListeners;\n\t\t\t\t\tmws.addScrollListeners();\n\t\t\t\t}//Should Add\n\t\t\t\t\t\n\t\t\t}//InitMouseWheelSupport\n\t\t\t\n\t\t}\n\t]]></script>");
}

//  package mgs
//    package aurora
//      package games
//        package base
//          class BaseClass
package mgs.aurora.games.base 
{
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.framework.*;
    
    public class BaseClass extends Object implements mgs.aurora.games.common.components.generic.IDisposable
    {
        public function BaseClass()
        {
            super();
            this.setClassDescription("mgs.aurora.games.framework.BaseClass");
            return;
        }

        public function toString():String
        {
            return "[" + this._instanceDescription + "]";
        }

        public function get classPath():String
        {
            return this._instanceDescription;
        }

        public function get className():String
        {
            var loc1:*=this._instanceDescription.split(".");
            return loc1[(loc1.length - 1)];
        }

        protected function setClassDescription(arg1:String):void
        {
            this._instanceDescription = arg1;
            return;
        }

        public function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        public function dispose():void
        {
            this._instanceDescription = null;
            delete this;
            return;
        }

        public function _trace(arg1:*, arg2:String="GCL", arg3:*=null, arg4:Number=0):void
        {
            arg3 = arg3 != null ? arg3 : this;
            mgs.aurora.games.framework.AuroraReference.aurora.server.trace(arg1, arg2, arg3, arg4);
            return;
        }

        public static function trace(arg1:*, arg2:String="GCL", arg3:*=null, arg4:Number=0):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.server.trace(arg1, arg2, arg3, arg4);
            return;
        }

        internal var _instanceDescription:String;
    }
}


//          class BaseEventDispatcherClass
package mgs.aurora.games.base 
{
    import flash.events.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.framework.*;
    
    public class BaseEventDispatcherClass extends flash.events.EventDispatcher implements flash.events.IEventDispatcher, mgs.aurora.games.common.components.generic.IDisposable
    {
        public function BaseEventDispatcherClass()
        {
            super();
            this.setClassDescription("mgs.aurora.games.framework.BaseEventDispatcherClass");
            return;
        }

        public override function toString():String
        {
            return "[" + this._instanceDescription + "]";
        }

        public function get classPath():String
        {
            return this._instanceDescription;
        }

        public function get className():String
        {
            var loc1:*=this._instanceDescription.split(".");
            return loc1[(loc1.length - 1)];
        }

        protected function setClassDescription(arg1:String):void
        {
            this._instanceDescription = arg1;
            return;
        }

        public function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        public function dispose():void
        {
            this._instanceDescription = null;
            delete this;
            return;
        }

        public function _trace(arg1:*, arg2:String="GCL", arg3:*=null, arg4:Number=0):void
        {
            arg3 = arg3 != null ? arg3 : this;
            mgs.aurora.games.framework.AuroraReference.aurora.server.trace(arg1, arg2, arg3, arg4);
            return;
        }

        public static function trace(arg1:*, arg2:String="GCL", arg3:*=null, arg4:Number=0):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.server.trace(arg1, arg2, arg3, arg4);
            return;
        }

        internal var _instanceDescription:String;
    }
}


//        package common
//          package components
//            package generic
//              package collections
//                class Iterator
package mgs.aurora.games.common.components.generic.collections 
{
    public interface Iterator
    {
        function reset():void;

        function hasNext():Boolean;

        function next():Object;
    }
}


//              package events
//                class CounterEvent
package mgs.aurora.games.common.components.generic.events 
{
    import flash.events.*;
    
    public class CounterEvent extends flash.events.Event
    {
        public function CounterEvent(arg1:String, arg2:Number)
        {
            super(arg1);
            this._value = arg2;
            return;
        }

        public function get value():Number
        {
            return this._value;
        }

        internal var _value:Number;
    }
}


//              class IDisposable
package mgs.aurora.games.common.components.generic 
{
    public interface IDisposable
    {
        function dispose():void;
    }
}


//            package loader
//              class BlockLoaderQueueItem
package mgs.aurora.games.common.components.loader 
{
    public class BlockLoaderQueueItem extends Object
    {
        public function BlockLoaderQueueItem(arg1:String, arg2:String, arg3:String)
        {
            super();
            this._id = arg1;
            this._name = arg2;
            this._type = arg3;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function set id(arg1:String):void
        {
            this._id = arg1;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function set name(arg1:String):void
        {
            this._name = arg1;
            return;
        }

        public function get type():String
        {
            return this._type;
        }

        internal var _id:String;

        internal var _name:String;

        internal var _type:String;
    }
}


//              class BlockLoaderQueueManager
package mgs.aurora.games.common.components.loader 
{
    public class BlockLoaderQueueManager extends Object
    {
        public function BlockLoaderQueueManager()
        {
            super();
            this._blQueue = new mgs.aurora.games.common.components.loader.Queue();
            return;
        }

        public function add(arg1:mgs.aurora.games.common.components.loader.BlockLoaderQueueItem):void
        {
            this._blQueue.enqueue(arg1);
            return;
        }

        public function get current():mgs.aurora.games.common.components.loader.BlockLoaderQueueItem
        {
            return this._current;
        }

        public function get hasQueuedItems():Boolean
        {
            this._hasQueuedItems = false;
            if (this._blQueue.length > 0) 
            {
                this._hasQueuedItems = true;
            }
            return this._hasQueuedItems;
        }

        public function get blQueue():mgs.aurora.games.common.components.loader.Queue
        {
            return this._blQueue;
        }

        public function get queue():Array
        {
            return this._blQueue.queue;
        }

        public function reprioritiseItemsByIndex(arg1:Array):Boolean
        {
            return this._blQueue.reprioritiseByIndex(arg1);
        }

        public function reprioritiseItemsByReference(arg1:Array):Boolean
        {
            return this._blQueue.reprioritiseByReference(arg1);
        }

        public function reprioritiseItemsByName(arg1:Array, arg2:String):Boolean
        {
            var loc3:*=0;
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc3 = 0;
                while (loc3 < this._blQueue.queue.length) 
                {
                    if (this._blQueue.queue[loc3].name == arg1[loc2] && this._blQueue.queue[loc3].type == arg2) 
                    {
                        loc1.push(this._blQueue.queue[loc3]);
                    }
                    ++loc3;
                }
                ++loc2;
            }
            return this._blQueue.reprioritiseByReference(loc1);
        }

        public function reprioritiseItemsByLevel(arg1:Array):Boolean
        {
            var loc3:*=null;
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                if ((loc3 = this.findItemByLevel(arg1[loc2])) != null) 
                {
                    loc1.push(loc3);
                }
                ++loc2;
            }
            return this._blQueue.reprioritiseByReference(loc1);
        }

        internal function findItemByName(arg1:String, arg2:String):mgs.aurora.games.common.components.loader.BlockLoaderQueueItem
        {
            var loc1:*=null;
            var loc2:*=0;
            while (loc2 < this._blQueue.length) 
            {
                loc1 = this._blQueue.getObject(loc2) as mgs.aurora.games.common.components.loader.BlockLoaderQueueItem;
                if (loc1.name == arg1 && loc1.type == arg2) 
                {
                    return loc1;
                }
                ++loc2;
            }
            return null;
        }

        internal function findItemByLevel(arg1:String):mgs.aurora.games.common.components.loader.BlockLoaderQueueItem
        {
            var loc1:*=null;
            var loc2:*=0;
            while (loc2 < this._blQueue.length) 
            {
                loc1 = this._blQueue.getObject(loc2) as mgs.aurora.games.common.components.loader.BlockLoaderQueueItem;
                if (loc1.type == arg1) 
                {
                    return loc1;
                }
                ++loc2;
            }
            return null;
        }

        public function reprioritiseItemsByIDName(arg1:String):Boolean
        {
            return this._blQueue.reprioritiseByReference(this.findListByName(arg1));
        }

        public function reprioritiseItemsByID(arg1:String):Boolean
        {
            return this._blQueue.reprioritiseByReference(this.findItemByID(arg1));
        }

        internal function findItemByID(arg1:String):Array
        {
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < this._blQueue.queue.length) 
            {
                if (this._blQueue.queue[loc2].id == arg1) 
                {
                    loc1.push(this._blQueue.queue[loc2]);
                }
                ++loc2;
            }
            return loc1;
        }

        internal function findListByName(arg1:String):Array
        {
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < this._blQueue.queue.length) 
            {
                if (this._blQueue.queue[loc2].name == arg1) 
                {
                    loc1.push(this._blQueue.queue[loc2]);
                }
                ++loc2;
            }
            return loc1;
        }

        public function getNextItem():mgs.aurora.games.common.components.loader.BlockLoaderQueueItem
        {
            this._current = this._blQueue.dequeue() as mgs.aurora.games.common.components.loader.BlockLoaderQueueItem;
            return this._current;
        }

        internal var _current:mgs.aurora.games.common.components.loader.BlockLoaderQueueItem;

        internal var _blQueue:mgs.aurora.games.common.components.loader.Queue;

        internal var _hasQueuedItems:Boolean;
    }
}


//              class FContainer
package mgs.aurora.games.common.components.loader 
{
    public class FContainer extends Object
    {
        public function FContainer(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String=null, arg6:Number=0, arg7:Number=0)
        {
            super();
            this._name = arg1;
            this._resource = arg2;
            this._class = arg3;
            this._type = arg4;
            this._proxy = arg5 != "" ? arg5 : null;
            this._x = arg6;
            this._y = arg7;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function get resource():String
        {
            return this._resource;
        }

        public function get className():String
        {
            return this._class;
        }

        public function get proxy():String
        {
            return this._proxy;
        }

        public function get type():String
        {
            return this._type;
        }

        public function get x():Number
        {
            return this._x;
        }

        public function get y():Number
        {
            return this._y;
        }

        internal var _name:String;

        internal var _resource:String;

        internal var _class:String;

        internal var _proxy:String;

        internal var _type:String;

        internal var _x:Number;

        internal var _y:Number;
    }
}


//              class ILoaderProxy
package mgs.aurora.games.common.components.loader 
{
    import flash.display.*;
    import flash.media.*;
    
    public interface ILoaderProxy
    {
        function addAsset(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String=null, arg6:Number=0, arg7:Number=0):mgs.aurora.games.common.components.loader.FContainer;

        function getAsset(arg1:String):mgs.aurora.games.common.components.loader.FContainer;

        function removeAsset(arg1:String):void;

        function addResource(arg1:String, arg2:String, arg3:String, arg4:uint=0, arg5:String=null, arg6:Boolean=false):mgs.aurora.games.common.components.loader.LoaderContainer;

        function removeResource(arg1:String):void;

        function removeAllResources():void;

        function removeAllAssets():void;

        function getResourceContainer(arg1:String):mgs.aurora.games.common.components.loader.LoaderContainer;

        function getMovieClip(arg1:String):flash.display.MovieClip;

        function getSprite(arg1:String):flash.display.Sprite;

        function getXml(arg1:String):XML;

        function getBitmap(arg1:String):flash.display.Bitmap;

        function getBitmapData(arg1:String):flash.display.BitmapData;

        function getSound(arg1:String):flash.media.Sound;

        function isAsset(arg1:String):Boolean;

        function isResource(arg1:String):Boolean;
    }
}


//              class LoaderContainer
package mgs.aurora.games.common.components.loader 
{
    import __AS3__.vec.*;
    
    public class LoaderContainer extends Object
    {
        public function LoaderContainer(arg1:String, arg2:String, arg3:String, arg4:uint=0, arg5:String=null, arg6:Boolean=false)
        {
            super();
            this._idName = arg1;
            this._type = arg3;
            this._proxy = arg5;
            this._isLoaded = arg6;
            this._fileSize = arg4;
            this._data = null;
            this._url = arg2;
            this._assets = new Vector.<mgs.aurora.games.common.components.loader.FContainer>();
            return;
        }

        public function set loaded(arg1:Boolean):void
        {
            this._isLoaded = arg1;
            return;
        }

        public function set resource(arg1:*):void
        {
            this._data = arg1;
            return;
        }

        public function get loaded():Boolean
        {
            return this._isLoaded;
        }

        public function get idName():String
        {
            return this._idName;
        }

        public function get type():String
        {
            return this._type;
        }

        public function addAsset(arg1:mgs.aurora.games.common.components.loader.FContainer):void
        {
            if (this.findAssetByName(arg1.name) == null) 
            {
                this._assets.push(arg1);
            }
            return;
        }

        public function findAssetByName(arg1:String):mgs.aurora.games.common.components.loader.FContainer
        {
            var loc1:*=0;
            while (loc1 < this._assets.length) 
            {
                if (this._assets[loc1].name == arg1) 
                {
                    return this._assets[loc1];
                }
                ++loc1;
            }
            return null;
        }

        public function get data():*
        {
            return this._data;
        }

        public function set data(arg1:*):void
        {
            this._data = arg1;
            return;
        }

        public function get proxy():String
        {
            return this._proxy;
        }

        public function get fileSize():uint
        {
            return this._fileSize;
        }

        public function get fileName():String
        {
            return this._url;
        }

        public static const TYPE_XML:String="xml";

        public static const TYPE_SWF:String="swf";

        internal var _idName:String;

        internal var _type:String;

        internal var _data:*;

        internal var _proxy:String;

        internal var _isLoaded:Boolean;

        internal var _fileSize:uint;

        internal var _url:String;

        internal var _assets:__AS3__.vec.Vector.<mgs.aurora.games.common.components.loader.FContainer>;
    }
}


//              class Queue
package mgs.aurora.games.common.components.loader 
{
    public class Queue extends Object
    {
        public function Queue()
        {
            super();
            this._queue = new Array();
            return;
        }

        public function enqueue(arg1:Object):Number
        {
            return (this._queue.push(arg1) - 1);
        }

        public function dequeue():Object
        {
            return this._queue.shift();
        }

        public function clear():void
        {
            this._queue = null;
            this._queue = new Array();
            return;
        }

        public function jumpByReference(arg1:Object):Boolean
        {
            var loc5:*=null;
            var loc1:*=false;
            var loc2:*=new Array();
            var loc3:*=arg1;
            var loc4:*=0;
            while (loc4 < this._queue.length) 
            {
                if (loc3 == this._queue[loc4]) 
                {
                    loc1 = true;
                    loc5 = this._queue.splice(loc4, 1);
                    loc2.push(loc5[0]);
                    break;
                }
                ++loc4;
            }
            this._queue = loc2.concat(this._queue);
            loc2 = null;
            return loc1;
        }

        public function jumpByIndex(arg1:Number):Boolean
        {
            var loc2:*=null;
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc1:*=false;
            if (arg1 > 0 && arg1 < this._queue.length) 
            {
                loc2 = new Array();
                loc3 = 0;
                while (loc3 < this._queue.length) 
                {
                    loc2[0] = this._queue[arg1];
                    loc1 = true;
                    ++loc3;
                }
                loc4 = 0;
                while (loc4 < 1) 
                {
                    this._queue.splice(arg1, 1);
                    ++loc4;
                }
                this._queue = loc2.concat(this._queue);
                loc2 = null;
                return loc1;
            }
            return loc1;
        }

        public function reprioritiseByReference(arg1:Array):Boolean
        {
            var loc4:*=null;
            var loc5:*=NaN;
            var loc6:*=null;
            var loc1:*=false;
            var loc2:*=new Array();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc4 = arg1[loc3];
                loc5 = 0;
                while (loc5 < this._queue.length) 
                {
                    if (loc4 == this._queue[loc5]) 
                    {
                        loc1 = true;
                        loc6 = this._queue.splice(loc5, 1);
                        loc2.push(loc6[0]);
                        break;
                    }
                    ++loc5;
                }
                ++loc3;
            }
            this._queue = loc2.concat(this._queue);
            loc2 = null;
            return loc1;
        }

        public function reprioritiseByIndex(arg1:Array):Boolean
        {
            var loc1:*=false;
            var loc2:*=new Array();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc1 = true;
                loc2[loc3] = this._queue[arg1[loc3]];
                ++loc3;
            }
            arg1.sortOn(Array.NUMERIC, Array.DESCENDING);
            var loc4:*=0;
            while (loc4 < arg1.length) 
            {
                this._queue.splice(arg1[loc4], 1);
                ++loc4;
            }
            this._queue = loc2.concat(this._queue);
            loc2 = null;
            return loc1;
        }

        public function removeByReference(arg1:Object):Boolean
        {
            var loc1:*=this.getIndex(arg1);
            if (loc1 != -1) 
            {
                return this.removeByIndex(loc1);
            }
            return false;
        }

        public function removeByIndex(arg1:Number):Boolean
        {
            if (arg1 >= 0 && arg1 < this._queue.length) 
            {
                this._queue.splice(arg1, 1);
                return true;
            }
            return false;
        }

        public function getIndex(arg1:Object):Number
        {
            var loc1:*=0;
            while (loc1 < this._queue.length) 
            {
                if (arg1 == this._queue[loc1]) 
                {
                    return loc1;
                }
                ++loc1;
            }
            return -1;
        }

        public function getObject(arg1:Number):Object
        {
            return this._queue[arg1];
        }

        public function get length():Number
        {
            return this._queue.length;
        }

        public function get queue():Array
        {
            return this._queue;
        }

        public function dispose():void
        {
            this._queue = null;
            return;
        }

        internal var _queue:Array;
    }
}


//              class StateLoadObject
package mgs.aurora.games.common.components.loader 
{
    public class StateLoadObject extends Object
    {
        public function StateLoadObject(arg1:String, arg2:Array=null, arg3:Array=null, arg4:Array=null, arg5:Array=null, arg6:Array=null, arg7:Array=null)
        {
            this._mustHave = [];
            this._niceToHave = [];
            this._componentsMust = [];
            this._componentsNice = [];
            this._componentsOther = [];
            this._other = [];
            super();
            this._id = arg1;
            this._mustHave = arg2;
            this._niceToHave = arg3;
            this._other = arg4;
            this._componentsMust = arg5;
            this._componentsNice = arg6;
            this._componentsOther = arg7;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get componentsMust():Array
        {
            return this._componentsMust;
        }

        public function get componentsNice():Array
        {
            return this._componentsNice;
        }

        public function get componentsOther():Array
        {
            return this._componentsOther;
        }

        public function get niceToHave():Array
        {
            return this._niceToHave;
        }

        public function get mustHave():Array
        {
            return this._mustHave;
        }

        public function get other():Array
        {
            return this._other;
        }

        internal var _id:String;

        internal var _mustHave:Array;

        internal var _niceToHave:Array;

        internal var _componentsMust:Array;

        internal var _componentsNice:Array;

        internal var _componentsOther:Array;

        internal var _other:Array;
    }
}


//              class TheMostIntelligentLoader
package mgs.aurora.games.common.components.loader 
{
    import flash.display.*;
    import flash.media.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    
    public final class TheMostIntelligentLoader extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.common.components.loader.ILoaderProxy
    {
        public function TheMostIntelligentLoader(arg1:singletonEnforcer)
        {
            super();
            if (arg1 == null) 
            {
                throw new Error("Can\'t Instantiate TheMostIntelligentLoader");
            }
            return;
        }

        public override function dispose():void
        {
            this.removeAllAssets();
            this.removeAllResources();
            this._fileMap = null;
            this._resourceMap = null;
            super.dispose();
            return;
        }

        public static function get instance():mgs.aurora.games.common.components.loader.TheMostIntelligentLoader
        {
            if (_instance == null) 
            {
                _instance = new TheMostIntelligentLoader(new singletonEnforcer());
                _instance.setClassDescription("mgs.aurora.games.common.components.loader.TheMostIntelligentLoader");
                _instance._resourceMap = {};
                _instance._fileMap = {};
                _instance._stateLoadList = {};
            }
            return _instance;
        }

        
        {
            _instance = null;
        }

        public function get resourceMap():Object
        {
            return this._resourceMap;
        }

        public function get fileMap():Object
        {
            return this._fileMap;
        }

        public function get stateLoadList():Object
        {
            return this._stateLoadList;
        }

        public function addStateToLoad(arg1:String, arg2:Array=null, arg3:Array=null, arg4:Array=null, arg5:Array=null, arg6:Array=null, arg7:Array=null):mgs.aurora.games.common.components.loader.StateLoadObject
        {
            this._stateLoadList[arg1] = new mgs.aurora.games.common.components.loader.StateLoadObject(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            return this._stateLoadList[arg1];
        }

        public function getStateToLoad(arg1:String):mgs.aurora.games.common.components.loader.StateLoadObject
        {
            return this._stateLoadList[arg1];
        }

        public function removeStateToLoad(arg1:String):void
        {
            delete this._stateLoadList[arg1];
            return;
        }

        public function removeAllStateToLoad():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._stateLoadList;
            for each (loc1 in loc3) 
            {
                this.removeStateToLoad(loc1.id);
            }
            return;
        }

        public function addAsset(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String=null, arg6:Number=0, arg7:Number=0):mgs.aurora.games.common.components.loader.FContainer
        {
            this._fileMap[arg1] = new mgs.aurora.games.common.components.loader.FContainer(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            if (this._resourceMap[arg2] != null) 
            {
                this._resourceMap[arg2].addAsset(this._fileMap[arg1]);
            }
            return this._fileMap[arg1];
        }

        public function getAsset(arg1:String):mgs.aurora.games.common.components.loader.FContainer
        {
            this.testAsset(arg1);
            return this._fileMap[arg1];
        }

        public function removeAsset(arg1:String):void
        {
            if (this.isAsset[arg1]) 
            {
                this._fileMap[arg1] = null;
                delete this._fileMap[arg1];
            }
            return;
        }

        public function addResource(arg1:String, arg2:String, arg3:String, arg4:uint=0, arg5:String=null, arg6:Boolean=false):mgs.aurora.games.common.components.loader.LoaderContainer
        {
            if (arg1 == null) 
            {
                throw new Error("Empty names NOT allowed. - " + toString());
            }
            if (this._resourceMap[arg1] == null) 
            {
                this._resourceMap[arg1] = new mgs.aurora.games.common.components.loader.LoaderContainer(arg1, arg2, arg3, arg4, arg5, arg6);
            }
            return this._resourceMap[arg1];
        }

        public function removeResource(arg1:String):void
        {
            var idName:String;
            var res:mgs.aurora.games.common.components.loader.LoaderContainer;

            var loc1:*;
            res = null;
            idName = arg1;
            if (this.isResource(idName)) 
            {
                res = this._resourceMap[idName];
                if (res.type != mgs.aurora.games.common.components.loader.LoaderContainer.TYPE_XML) 
                {
                    if (res.type == mgs.aurora.games.common.components.loader.LoaderContainer.TYPE_SWF) 
                    {
                        try 
                        {
                            res.data.loaderInfo.loader.unload();
                            res.data = null;
                        }
                        catch (e:Error)
                        {
                            _trace("Issue while removing [" + res + "] .", "error", this, 16711680);
                        }
                    }
                }
                else 
                {
                    res.data = null;
                }
                res = null;
                _trace("NOTE: Resource with name [" + idName + "] was removed.", "test", this, 8421376);
                delete this._resourceMap[idName];
            }
            return;
        }

        public function removeAllResources():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._resourceMap;
            for (loc1 in loc3) 
            {
                this.removeResource(loc1);
            }
            this._resourceMap = new flash.utils.Dictionary(true);
            return;
        }

        public function removeAllAssets():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._fileMap;
            for (loc1 in loc3) 
            {
                this.removeAsset(loc1);
            }
            this._fileMap = new flash.utils.Dictionary(true);
            return;
        }

        public function getResourceContainer(arg1:String):mgs.aurora.games.common.components.loader.LoaderContainer
        {
            if (!this.isResource(arg1)) 
            {
                throw new Error("No ResourceMap by name [" + arg1 + "] registered. - " + toString());
            }
            return this._resourceMap[arg1];
        }

        internal function getMovie(arg1:String, arg2:String):flash.display.MovieClip
        {
            var loc4:*=null;
            var loc5:*=null;
            this.testAsset(arg1);
            var loc1:*=this._fileMap[arg1];
            var loc2:*=this._resourceMap[loc1.resource];
            if (loc1.type != "movieclip") 
            {
                throw new Error("Asset [" + arg1 + "] not of type movieclip. Problem in config? - " + toString());
            }
            var loc3:*;
            (loc3 = new flash.display.MovieClip()).name = arg1;
            if (loc2.loaded) 
            {
                loc3 = loc2.data as flash.display.MovieClip;
                loc4 = flash.utils.getDefinitionByName(loc1.className) as Class;
                (loc5 = flash.display.MovieClip(new loc4())).name = arg1;
                if (loc1.x != 0) 
                {
                    loc5.x = loc1.x;
                }
                if (loc1.y != 0) 
                {
                    loc5.y = loc1.y;
                }
                return loc5;
            }
            if (!loc2.loaded) 
            {
                if (loc1.proxy != null) 
                {
                    (loc3 = this.getMovie(loc1.proxy, arg2)).name = arg1;
                    return loc3;
                }
            }
            _trace("Asset [" + arg1 + "] not loaded and no proxy found! Returning empty movie.", "error", this, 16711680);
            return loc3;
        }

        public function getMovieClip(arg1:String):flash.display.MovieClip
        {
            return this.getMovie(arg1, "movieclip");
        }

        public function getSprite(arg1:String):flash.display.Sprite
        {
            return this.getMovie(arg1, "sprite") as flash.display.Sprite;
        }

        public function getXml(arg1:String):XML
        {
            this.testResource(arg1);
            var loc1:*=this._resourceMap[arg1];
            return loc1.data;
        }

        public function getBitmap(arg1:String):flash.display.Bitmap
        {
            return this.getMovie(arg1, "bitmap") as flash.display.Bitmap;
        }

        public function getBitmapData(arg1:String):flash.display.BitmapData
        {
            return this.getMovie(arg1, "bitmapdata").bitmapData;
        }

        public function getSound(arg1:String):flash.media.Sound
        {
            var loc3:*=null;
            this.testAsset(arg1);
            var loc1:*=this._fileMap[arg1];
            var loc2:*=this._resourceMap[loc1.resource];
            if (loc1.type != "sound") 
            {
                throw new Error("Asset [" + arg1 + "] not of type sound. Problem in config? - " + toString());
            }
            if (loc2.loaded) 
            {
                return new (loc3 = flash.utils.getDefinitionByName(loc1.className) as Class)() as flash.media.Sound;
            }
            if (!loc2.loaded) 
            {
                if (loc2.proxy != null) 
                {
                    return this.getSound(loc2.proxy);
                }
            }
            _trace("Asset [" + arg1 + "] not loaded and no proxy found! Returning empty Sound.", "error", this, 16711680);
            return new flash.media.Sound();
        }

        public function isAsset(arg1:String):Boolean
        {
            if (this._fileMap[arg1] != null) 
            {
                return true;
            }
            return false;
        }

        public function isAssetLoaded(arg1:String):Boolean
        {
            if (!this.isAsset(arg1)) 
            {
                return false;
            }
            var loc1:*=this.getAsset(arg1);
            if (!this.isResource(loc1.resource)) 
            {
                return false;
            }
            var loc2:*=this.getResourceContainer(loc1.resource);
            if (loc2.loaded) 
            {
                return true;
            }
            return false;
        }

        public function isResource(arg1:String):Boolean
        {
            if (this._resourceMap[arg1] != null) 
            {
                return true;
            }
            return false;
        }

        internal function testAsset(arg1:String):void
        {
            if (!this.isAsset(arg1)) 
            {
                throw new Error("No Instance with name [" + arg1 + "] registered. Check your config. - " + toString());
            }
            return;
        }

        internal function testResource(arg1:String):void
        {
            if (!this.isResource(arg1)) 
            {
                throw new Error("No resource with name [" + arg1 + "] registered. Check your config. - " + toString());
            }
            return;
        }

        internal var _resourceMap:Object;

        internal var _fileMap:Object;

        internal var _stateLoadList:Object;

        internal static var _instance:mgs.aurora.games.common.components.loader.TheMostIntelligentLoader=null;
    }
}


class singletonEnforcer extends Object
{
    public function singletonEnforcer()
    {
        super();
        return;
    }
}

//            package resourceProxy
//              class Assets
package mgs.aurora.games.common.components.resourceProxy 
{
    import flash.display.*;
    import flash.media.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.loader.*;
    
    public class Assets extends Object
    {
        public function Assets()
        {
            super();
            throw new Error("Can’t instantiate Assets!");
        }

        public static function isAsset(arg1:String):Boolean
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.isAsset(arg1);
        }

        public static function isAssetLoaded(arg1:String):Boolean
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.isAssetLoaded(arg1);
        }

        public static function getXML(arg1:String):XML
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getXml(arg1);
        }

        public static function getSound(arg1:String):flash.media.Sound
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getSound(arg1);
        }

        public static function getMovieClip(arg1:String):flash.display.MovieClip
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getMovieClip(arg1);
        }

        public static function getBitmap(arg1:String):flash.display.Bitmap
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getBitmap(arg1);
        }

        public static function getBitmapData(arg1:String):flash.display.BitmapData
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getBitmapData(arg1);
        }

        public static function getSprite(arg1:String):flash.display.Sprite
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getSprite(arg1);
        }

        public static function getDefinitionMovieClip(arg1:String):flash.display.MovieClip
        {
            var loc1:*=flash.utils.getDefinitionByName(arg1) as Class;
            return new loc1() as flash.display.MovieClip;
        }

        public static function getResource(arg1:String):flash.display.MovieClip
        {
            return mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer(arg1).data as flash.display.MovieClip;
        }
    }
}


//            package timing
//              package events
//                class GameLoopEvent
package mgs.aurora.games.common.components.timing.events 
{
    import flash.events.*;
    
    public class GameLoopEvent extends flash.events.Event
    {
        public function GameLoopEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.games.common.components.timing.events.GameLoopEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("GameLoopEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const RECALCULATE:String="recalculate";

        public static const RENDER:String="render";

        public static const REDRAW:String="redraw";
    }
}


//              class GameLoop
package mgs.aurora.games.common.components.timing 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.timing.events.*;
    
    public class GameLoop extends flash.events.EventDispatcher
    {
        public function GameLoop(arg1:Singleton)
        {
            super();
            return;
        }

        public function pause():void
        {
            this._running = false;
            return;
        }

        public function isRunning():Boolean
        {
            return this._running;
        }

        public function resume():void
        {
            this.setDelayPeriod(this._period);
            this.startLoop();
            return;
        }

        public function setDelayPeriod(arg1:int=20):void
        {
            this._period = arg1;
            return;
        }

        public function getDelayPeriod():int
        {
            return this._period;
        }

        internal function startLoop():void
        {
            this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.RECALCULATE));
            this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.RENDER));
            this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.REDRAW));
            this.gameTimer = new flash.utils.Timer(this._period, 1);
            this.gameTimer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.runGame, false, 0, true);
            this.gameTimer.start();
            this._running = true;
            return;
        }

        internal function runGame(arg1:flash.events.TimerEvent):void
        {
            this._beforeTime = flash.utils.getTimer();
            this._overSleepTime = this._beforeTime - this._afterTime - this._sleepTime;
            this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.RECALCULATE));
            this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.RENDER));
            this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.REDRAW));
            this._afterTime = flash.utils.getTimer();
            this._timeDiff = this._afterTime - this._beforeTime;
            this._sleepTime = this._period - this._timeDiff - this._overSleepTime;
            if (this._sleepTime <= 0) 
            {
                this._excess = this._excess - this._sleepTime;
                this._sleepTime = 2;
            }
            try 
            {
                this.gameTimer.reset();
            }
            catch (e:Error)
            {
            };
            if (this._running == true) 
            {
                this.gameTimer.delay = this._sleepTime;
                this.gameTimer.start();
            }
            while (this._excess > this._period) 
            {
                this.dispatchEvent(new mgs.aurora.games.common.components.timing.events.GameLoopEvent(mgs.aurora.games.common.components.timing.events.GameLoopEvent.RECALCULATE));
                this._excess = this._excess - this._period;
            }
            arg1.updateAfterEvent();
            return;
        }

        public function dispose():void
        {
            this.gameTimer.stop();
            this._running = false;
            this.gameTimer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.runGame);
            this.gameTimer = null;
            mgs.aurora.games.common.components.timing.GameLoop.instance = null;
            return;
        }

        public static function getInstance():mgs.aurora.games.common.components.timing.GameLoop
        {
            if (mgs.aurora.games.common.components.timing.GameLoop.instance == null) 
            {
                mgs.aurora.games.common.components.timing.GameLoop.instance = new GameLoop(new Singleton());
            }
            return mgs.aurora.games.common.components.timing.GameLoop.instance;
        }

        internal var _running:Boolean=false;

        internal var _period:Number=20;

        internal var _beforeTime:int=0;

        internal var _afterTime:int=0;

        internal var _timeDiff:int=0;

        internal var _sleepTime:int=0;

        internal var _overSleepTime:int=0;

        internal var _excess:int=0;

        internal var delta:int=0;

        internal var gameTimer:flash.utils.Timer;

        internal static var instance:mgs.aurora.games.common.components.timing.GameLoop;
    }
}


class Singleton extends Object
{
    public function Singleton()
    {
        super();
        return;
    }
}

//            package ui
//              package assetPooling
//                class ConsoleAssetProvider
package mgs.aurora.games.common.components.ui.assetPooling 
{
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.ui.components.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.containers.console.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public class ConsoleAssetProvider extends Object implements mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider
    {
        public function ConsoleAssetProvider()
        {
            this._buttons = new flash.utils.Dictionary();
            this._sprites = new flash.utils.Dictionary();
            this._textFormats = new flash.utils.Dictionary();
            this._texts = new flash.utils.Dictionary();
            this._graphicalFonts = new flash.utils.Dictionary();
            this._consoles = new flash.utils.Dictionary();
            this._ucs = new flash.utils.Dictionary();
            super();
            return;
        }

        public function addButton(arg1:mgs.aurora.games.common.components.ui.components.button.IComponentButton):void
        {
            var loc1:*=arg1.name;
            this._buttons[loc1] = arg1;
            return;
        }

        public function getButton(arg1:String):mgs.aurora.games.common.components.ui.components.button.IComponentButton
        {
            if (this._buttons[arg1] != null) 
            {
                return this._buttons[arg1];
            }
            return null;
        }

        public function get buttons():flash.utils.Dictionary
        {
            return this._buttons;
        }

        public function addSprite(arg1:mgs.aurora.games.common.components.ui.components.IComponent):void
        {
            var loc1:*=arg1.name;
            this._sprites[loc1] = arg1;
            return;
        }

        public function getSprite(arg1:String):mgs.aurora.games.common.components.ui.components.IComponent
        {
            if (this._sprites[arg1] != null) 
            {
                return this._sprites[arg1];
            }
            return null;
        }

        public function get sprites():flash.utils.Dictionary
        {
            return this._sprites;
        }

        public function addGraphicalFont(arg1:String, arg2:mgs.aurora.games.common.components.utils.CustomFont, arg3:int=0):void
        {
            var loc1:*=arg1;
            this._graphicalFonts[loc1] = new mgs.aurora.games.common.components.ui.components.text.FontContainer(arg2, arg3);
            return;
        }

        public function getGraphicalFont(arg1:String):mgs.aurora.games.common.components.utils.CustomFont
        {
            if (this._graphicalFonts[arg1] != null) 
            {
                return mgs.aurora.games.common.components.ui.components.text.FontContainer(this._graphicalFonts[arg1]).customFont;
            }
            return null;
        }

        public function get graphicalFonts():flash.utils.Dictionary
        {
            return this._graphicalFonts;
        }

        public function addTextFormat(arg1:String, arg2:flash.text.TextFormat):void
        {
            var loc1:*=arg1;
            this._textFormats[loc1] = arg2;
            return;
        }

        public function getTextFormat(arg1:String):flash.text.TextFormat
        {
            if (this._textFormats[arg1] != null) 
            {
                return this._textFormats[arg1];
            }
            return null;
        }

        public function get textFormats():flash.utils.Dictionary
        {
            return this._textFormats;
        }

        public function addText(arg1:mgs.aurora.games.common.components.ui.components.text.IComponentText):void
        {
            var loc1:*=arg1.name;
            this._texts[loc1] = arg1;
            return;
        }

        public function getText(arg1:String):mgs.aurora.games.common.components.ui.components.text.IComponentText
        {
            if (this._texts[arg1] != null) 
            {
                return this._texts[arg1];
            }
            return null;
        }

        public function get texts():flash.utils.Dictionary
        {
            return this._texts;
        }

        public function addConsole(arg1:mgs.aurora.games.common.components.ui.containers.console.IConsole):void
        {
            var loc1:*=arg1.name;
            this._consoles[loc1] = arg1;
            return;
        }

        public function getConsole(arg1:String):mgs.aurora.games.common.components.ui.containers.console.IConsole
        {
            if (this._consoles[arg1] != null) 
            {
                return this._consoles[arg1];
            }
            return null;
        }

        public function get consoles():flash.utils.Dictionary
        {
            return this._consoles;
        }

        public function addUCS(arg1:mgs.aurora.games.common.components.ui.containers.ucs.IUCS):void
        {
            var loc1:*=arg1.name;
            this._ucs[loc1] = arg1;
            return;
        }

        public function getUCS(arg1:String):mgs.aurora.games.common.components.ui.containers.ucs.IUCS
        {
            if (this._ucs[arg1] != null) 
            {
                return this._ucs[arg1];
            }
            return null;
        }

        public function get allUCSs():flash.utils.Dictionary
        {
            return this._ucs;
        }

        internal var _buttons:flash.utils.Dictionary;

        internal var _sprites:flash.utils.Dictionary;

        internal var _textFormats:flash.utils.Dictionary;

        internal var _texts:flash.utils.Dictionary;

        internal var _graphicalFonts:flash.utils.Dictionary;

        internal var _consoles:flash.utils.Dictionary;

        internal var _ucs:flash.utils.Dictionary;
    }
}


//                class IConsoleAssetProvider
package mgs.aurora.games.common.components.ui.assetPooling 
{
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.ui.components.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.containers.console.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public interface IConsoleAssetProvider
    {
        function addButton(arg1:mgs.aurora.games.common.components.ui.components.button.IComponentButton):void;

        function getButton(arg1:String):mgs.aurora.games.common.components.ui.components.button.IComponentButton;

        function get buttons():flash.utils.Dictionary;

        function addSprite(arg1:mgs.aurora.games.common.components.ui.components.IComponent):void;

        function getSprite(arg1:String):mgs.aurora.games.common.components.ui.components.IComponent;

        function get sprites():flash.utils.Dictionary;

        function addGraphicalFont(arg1:String, arg2:mgs.aurora.games.common.components.utils.CustomFont, arg3:int=0):void;

        function getGraphicalFont(arg1:String):mgs.aurora.games.common.components.utils.CustomFont;

        function get graphicalFonts():flash.utils.Dictionary;

        function addTextFormat(arg1:String, arg2:flash.text.TextFormat):void;

        function getTextFormat(arg1:String):flash.text.TextFormat;

        function get textFormats():flash.utils.Dictionary;

        function addText(arg1:mgs.aurora.games.common.components.ui.components.text.IComponentText):void;

        function getText(arg1:String):mgs.aurora.games.common.components.ui.components.text.IComponentText;

        function get texts():flash.utils.Dictionary;

        function addConsole(arg1:mgs.aurora.games.common.components.ui.containers.console.IConsole):void;

        function getConsole(arg1:String):mgs.aurora.games.common.components.ui.containers.console.IConsole;

        function get consoles():flash.utils.Dictionary;

        function addUCS(arg1:mgs.aurora.games.common.components.ui.containers.ucs.IUCS):void;

        function getUCS(arg1:String):mgs.aurora.games.common.components.ui.containers.ucs.IUCS;

        function get allUCSs():flash.utils.Dictionary;
    }
}


//              package builders
//                class ConsolesBuilder
package mgs.aurora.games.common.components.ui.builders 
{
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.ui.assetPooling.*;
    import mgs.aurora.games.common.components.ui.components.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.sprite.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.containers.console.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public class ConsolesBuilder extends flash.events.EventDispatcher implements mgs.aurora.games.common.components.ui.builders.IConsolesBuilder
    {
        public function ConsolesBuilder(arg1:XML, arg2:flash.display.LoaderInfo, arg3:flash.utils.Dictionary, arg4:mgs.aurora.api.interfaces.controls.IControlManager, arg5:mgs.aurora.games.common.components.ui.containers.ucs.IUCSModel)
        {
            super();
            this._consolesXML = arg1;
            this._artClassLib = arg2;
            this._assetPools = arg3;
            this._buttons = arg4;
            this._ucsModel = arg5;
            return;
        }

        public function build():void
        {
            this.addAssetsToPool();
            this.addUCSsToPool();
            this.addConsoles();
            this.dispatchEvent(new flash.events.Event(flash.events.Event.COMPLETE));
            return;
        }

        internal function addConsoles():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=new flash.utils.Dictionary();
            var loc6:*=0;
            var loc7:*=this._consolesXML.consoles.console;
            for each (loc2 in loc7) 
            {
                loc3 = loc2.@assetProvider;
                loc4 = this._assetPools[loc3];
                loc5 = new mgs.aurora.games.common.components.ui.containers.console.Console(loc2, loc4, this._buttons);
                loc4.addConsole(loc5);
            }
            return;
        }

        internal function addUCSsToPool():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=this._consolesXML.assetProviders.assetProvider;
            for each (loc1 in loc7) 
            {
                loc2 = loc1.@id;
                loc3 = this._assetPools[loc2];
                var loc8:*=0;
                var loc9:*=loc1.ucs.ucs;
                for each (loc4 in loc9) 
                {
                };
            }
            return;
        }

        internal function addAssetsToPool():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=0;
            var loc11:*=this._consolesXML.assetProviders.assetProvider;
            for each (loc1 in loc11) 
            {
                loc2 = loc1.@id;
                loc3 = this._assetPools[loc2];
                var loc12:*=0;
                var loc13:*=loc1.graphicalFonts.graphicalFont;
                for each (loc4 in loc13) 
                {
                    this.addGraphicalFont(loc4, loc3);
                }
                loc12 = 0;
                loc13 = loc1.textFormats.textFormat;
                for each (loc5 in loc13) 
                {
                    this.addTextFormats(loc5, loc3);
                }
                loc12 = 0;
                loc13 = loc1.buttons.button;
                for each (loc6 in loc13) 
                {
                    this.addButton(loc6, loc3);
                }
                loc12 = 0;
                loc13 = loc1.sprites.sprite;
                for each (loc7 in loc13) 
                {
                    this.addSprite(loc7, loc3);
                }
                loc12 = 0;
                loc13 = loc1.seperators.seperator;
                for each (loc8 in loc13) 
                {
                    this.addSeperator(loc8, loc3);
                }
                loc12 = 0;
                loc13 = loc1.texts.text;
                for each (loc9 in loc13) 
                {
                    this.addText(loc9, loc3);
                }
            }
            return;
        }

        internal function addGraphicalFont(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider):Boolean
        {
            var graphicalFontXML:XML;
            var assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;
            var doneWithoutError:Boolean;
            var custFont:mgs.aurora.games.common.components.utils.CustomFont;

            var loc1:*;
            custFont = null;
            graphicalFontXML = arg1;
            assetPool = arg2;
            doneWithoutError = false;
            try 
            {
                custFont = new mgs.aurora.games.common.components.utils.CustomFont(this._artClassLib.applicationDomain, graphicalFontXML.@id);
                assetPool.addGraphicalFont(graphicalFontXML.@id, custFont, int(graphicalFontXML.@maxWidth));
                doneWithoutError = true;
            }
            catch (err:Error)
            {
                mgs.aurora.games.base.BaseClass.trace("ERROR: Font [" + graphicalFontXML.@id + "] not found", "error", this, 16711680);
                doneWithoutError = false;
            }
            return doneWithoutError;
        }

        internal function addTextFormats(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider):Boolean
        {
            var formatXML:XML;
            var assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;
            var doneWithoutError:Boolean;
            var format:flash.text.TextFormat;
            var formatName:String;

            var loc1:*;
            format = null;
            formatName = null;
            formatXML = arg1;
            assetPool = arg2;
            doneWithoutError = false;
            try 
            {
                format = new flash.text.TextFormat();
                if (formatXML.hasOwnProperty("@font")) 
                {
                    format.font = formatXML.@font;
                }
                if (formatXML.hasOwnProperty("@size")) 
                {
                    format.size = formatXML.@size;
                }
                if (formatXML.hasOwnProperty("@color")) 
                {
                    format.color = formatXML.@color;
                }
                if (formatXML.hasOwnProperty("@bold")) 
                {
                    format.bold = mgs.aurora.games.common.components.utils.DataTypeConversion.stringToBoolean(formatXML.@bold);
                }
                if (formatXML.hasOwnProperty("@italic")) 
                {
                    format.italic = mgs.aurora.games.common.components.utils.DataTypeConversion.stringToBoolean(formatXML.@italic);
                }
                if (formatXML.hasOwnProperty("@underline")) 
                {
                    format.underline = mgs.aurora.games.common.components.utils.DataTypeConversion.stringToBoolean(formatXML.@underline);
                }
                if (formatXML.hasOwnProperty("@align")) 
                {
                    format.align = formatXML.@align;
                }
                if (formatXML.hasOwnProperty("@kerning")) 
                {
                    format.kerning = mgs.aurora.games.common.components.utils.DataTypeConversion.stringToBoolean(formatXML.@kerning);
                }
                if (formatXML.hasOwnProperty("@letterSpacing")) 
                {
                    format.letterSpacing = int(formatXML.@letterSpacing);
                }
                formatName = String(formatXML.@id);
                assetPool.addTextFormat(formatName, format);
                doneWithoutError = true;
            }
            catch (err:Error)
            {
                doneWithoutError = false;
            }
            return doneWithoutError;
        }

        internal function addText(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider):Boolean
        {
            var textXML:XML;
            var assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;
            var doneWithoutError:Boolean;
            var compTextField:mgs.aurora.games.common.components.ui.components.text.IComponentText;
            var custFont:mgs.aurora.games.common.components.utils.CustomFont;
            var compTextSprite:mgs.aurora.games.common.components.ui.components.text.IComponentText;

            var loc1:*;
            compTextField = null;
            custFont = null;
            compTextSprite = null;
            textXML = arg1;
            assetPool = arg2;
            doneWithoutError = false;
            try 
            {
                if (textXML.@type != "textField") 
                {
                    if (textXML.@type != "sprite") 
                    {
                        doneWithoutError = true;
                    }
                    else 
                    {
                        custFont = assetPool.getGraphicalFont(textXML.@font);
                        compTextSprite = new mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite(custFont, String(textXML.@align), int(textXML.@maxWidth));
                        compTextSprite.name = String(textXML.@id);
                        assetPool.addText(compTextSprite);
                        doneWithoutError = true;
                    }
                }
                else 
                {
                    compTextField = new mgs.aurora.games.common.components.ui.components.text.ComponentTextField();
                    compTextField.name = String(textXML.@id);
                    if (textXML.hasOwnProperty("@width")) 
                    {
                        if (textXML.@width != "") 
                        {
                            compTextField.autoSize = "NONE";
                            compTextField.width = textXML.@width;
                        }
                    }
                    if (textXML.hasOwnProperty("@height")) 
                    {
                        if (textXML.@height != "") 
                        {
                            compTextField.height = textXML.@height;
                        }
                    }
                    assetPool.addText(compTextField);
                    doneWithoutError = true;
                }
            }
            catch (err:Error)
            {
                doneWithoutError = false;
            }
            return doneWithoutError;
        }

        internal function addButton(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider):Boolean
        {
            var buttonXML:XML;
            var assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;
            var doneWithoutError:Boolean;
            var btnClass:Class;
            var compBtn:mgs.aurora.games.common.components.ui.components.button.IComponentButton;

            var loc1:*;
            btnClass = null;
            compBtn = null;
            buttonXML = arg1;
            assetPool = arg2;
            doneWithoutError = false;
            try 
            {
                btnClass = this._artClassLib.applicationDomain.getDefinition(buttonXML.@id) as Class;
                compBtn = new mgs.aurora.games.common.components.ui.components.button.ComponentButton(btnClass);
                compBtn.name = String(buttonXML.@id);
                assetPool.addButton(compBtn);
                doneWithoutError = true;
            }
            catch (err:Error)
            {
                doneWithoutError = false;
            }
            return doneWithoutError;
        }

        internal function addSprite(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider):Boolean
        {
            var spriteXML:XML;
            var assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;
            var doneWithoutError:Boolean;
            var spriteClass:Class;
            var compSprite:mgs.aurora.games.common.components.ui.components.IComponent;

            var loc1:*;
            spriteClass = null;
            compSprite = null;
            spriteXML = arg1;
            assetPool = arg2;
            doneWithoutError = false;
            try 
            {
                spriteClass = this._artClassLib.applicationDomain.getDefinition(spriteXML.@id) as Class;
                compSprite = new mgs.aurora.games.common.components.ui.components.sprite.ComponentSprite(spriteClass);
                compSprite.name = String(spriteXML.@id);
                assetPool.addSprite(compSprite);
                doneWithoutError = true;
            }
            catch (err:Error)
            {
                doneWithoutError = false;
            }
            return doneWithoutError;
        }

        internal function addSeperator(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider):Boolean
        {
            var seperatorXML:XML;
            var assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;
            var doneWithoutError:Boolean;
            var seperatorClass:Class;
            var compSeperator:mgs.aurora.games.common.components.ui.components.IComponent;

            var loc1:*;
            seperatorClass = null;
            compSeperator = null;
            seperatorXML = arg1;
            assetPool = arg2;
            doneWithoutError = false;
            try 
            {
                seperatorClass = this._artClassLib.applicationDomain.getDefinition(seperatorXML.@id) as Class;
                compSeperator = new mgs.aurora.games.common.components.ui.components.sprite.ComponentSeperator(seperatorClass);
                compSeperator.name = String(seperatorXML.@id);
                assetPool.addSprite(compSeperator);
                doneWithoutError = true;
            }
            catch (err:Error)
            {
                doneWithoutError = false;
            }
            return doneWithoutError;
        }

        internal var _consolesXML:XML;

        internal var _artClassLib:flash.display.LoaderInfo;

        internal var _assetPools:flash.utils.Dictionary;

        internal var _buttons:mgs.aurora.api.interfaces.controls.IControlManager;

        internal var _ucsModel:mgs.aurora.games.common.components.ui.containers.ucs.IUCSModel;
    }
}


//                class IConsolesBuilder
package mgs.aurora.games.common.components.ui.builders 
{
    import flash.events.*;
    
    public interface IConsolesBuilder extends flash.events.IEventDispatcher
    {
        function build():void;
    }
}


//              package components
//                package button
//                  class ArtButton
package mgs.aurora.games.common.components.ui.components.button 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    
    public class ArtButton extends mgs.aurora.games.base.BaseClass
    {
        public function ArtButton(arg1:flash.display.MovieClip, arg2:Function=null, arg3:Boolean=true, arg4:String=null, arg5:int=-1)
        {
            var target:flash.display.MovieClip;
            var callback:Function=null;
            var active:Boolean=true;
            var hitareaName:String=null;
            var shortCut:int=-1;
            var sp:flash.display.Sprite;

            var loc1:*;
            sp = null;
            target = arg1;
            callback = arg2;
            active = arg3;
            hitareaName = arg4;
            shortCut = arg5;
            super();
            setClassDescription("mgs.aurora.games.common.components.ui.components.button.ArtButton");
            this._target = target;
            this._callback = callback;
            this._hitareaName = hitareaName;
            this._target.mouseChildren = false;
            this._shortCut = shortCut;
            if (this._hitareaName != null) 
            {
                try 
                {
                    sp = this._target.getChildByName(this._hitareaName) as flash.display.Sprite;
                    sp.mouseEnabled = false;
                    this._target.hitArea = sp;
                }
                catch (e:Error)
                {
                    throw new Error("Error in finding [" + _hitareaName + "]. Missing hitArea in art of type Sprite in [" + _target.name + "].");
                }
            }
            if (this._shortCut > -1) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.canvas.stage.addEventListener(flash.events.KeyboardEvent.KEY_UP, this.onKeyInteraction);
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.canvas.stage.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, this.onKeyDown);
            }
            if (active) 
            {
                this.enable();
            }
            return;
        }

        protected function onKeyDown(arg1:flash.events.KeyboardEvent):void
        {
            if (arg1.keyCode == this._shortCut) 
            {
                this._target.gotoAndStop(this.BUTTON_DOWN_FRAME);
            }
            return;
        }

        protected function onKeyInteraction(arg1:flash.events.KeyboardEvent):void
        {
            if (arg1.keyCode == this._shortCut) 
            {
                this._target.gotoAndStop(this.BUTTON_ACTIVE_FRAME);
                if (this._callback != null) 
                {
                    this._callback();
                }
            }
            return;
        }

        public function enable():void
        {
            this._target.gotoAndStop(this.BUTTON_ACTIVE_FRAME);
            this._target.mouseEnabled = true;
            this._target.addEventListener(flash.events.MouseEvent.MOUSE_OVER, this.onMouseOver);
            this._target.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onMouseDown);
            this._target.addEventListener(flash.events.MouseEvent.MOUSE_OUT, this.onMouseOut);
            this._target.addEventListener(flash.events.MouseEvent.MOUSE_UP, this.onMouseUp);
            if (this._shortCut > -1) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.canvas.stage.addEventListener(flash.events.KeyboardEvent.KEY_UP, this.onKeyInteraction);
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.canvas.stage.addEventListener(flash.events.KeyboardEvent.KEY_DOWN, this.onKeyDown);
            }
            return;
        }

        public function disable():void
        {
            this._target.gotoAndStop(this.BUTTON_DISABLE_FRAME);
            this._target.mouseEnabled = false;
            this._target.removeEventListener(flash.events.MouseEvent.MOUSE_OVER, this.onMouseOver);
            this._target.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onMouseDown);
            this._target.removeEventListener(flash.events.MouseEvent.MOUSE_OUT, this.onMouseOut);
            this._target.removeEventListener(flash.events.MouseEvent.MOUSE_UP, this.onMouseUp);
            if (this._shortCut > -1) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.canvas.stage.removeEventListener(flash.events.KeyboardEvent.KEY_UP, this.onKeyInteraction);
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.canvas.stage.removeEventListener(flash.events.KeyboardEvent.KEY_DOWN, this.onKeyDown);
            }
            return;
        }

        public function hide(arg1:Boolean=false):void
        {
            if (arg1) 
            {
                this.disable();
                this._target.gotoAndStop(this.BUTTON_HIDDEN_FRAME);
            }
            else 
            {
                this.enable();
            }
            return;
        }

        protected function onMouseOver(arg1:flash.events.MouseEvent):void
        {
            this._isDown = false;
            this._target.gotoAndStop(this.BUTTON_OVER_FRAME);
            return;
        }

        protected function onMouseOut(arg1:flash.events.MouseEvent):void
        {
            this._target.gotoAndStop(this.BUTTON_ACTIVE_FRAME);
            return;
        }

        protected function onMouseDown(arg1:flash.events.MouseEvent):void
        {
            this._isDown = true;
            this._originalTarget = arg1.currentTarget;
            this._target.gotoAndStop(this.BUTTON_DOWN_FRAME);
            this._target.stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, this.onStageMouseUp);
            return;
        }

        protected function onStageMouseUp(arg1:flash.events.MouseEvent):void
        {
            var e:flash.events.MouseEvent;

            var loc1:*;
            e = arg1;
            if (this._originalTarget) 
            {
                this._originalTarget = null;
            }
            if (this._target && this._target.stage) 
            {
                try 
                {
                    this._target.stage.removeEventListener(flash.events.MouseEvent.MOUSE_UP, this.onStageMouseUp);
                }
                catch (error:Error)
                {
                };
            }
            return;
        }

        protected function onMouseUp(arg1:flash.events.MouseEvent):void
        {
            this._target.gotoAndStop(this.BUTTON_OVER_FRAME);
            if (this._isDown || this._originalTarget == arg1.currentTarget) 
            {
                if (this._callback != null) 
                {
                    this._callback();
                }
            }
            this._originalTarget = null;
            this._isDown = false;
            return;
        }

        public function get target():flash.display.MovieClip
        {
            return this._target;
        }

        public override function dispose():void
        {
            this.disable();
            this._target = null;
            super.dispose();
            return;
        }

        public const BUTTON_HIDDEN_FRAME:String="Hidden";

        public const BUTTON_DISABLE_FRAME:String="Inactive";

        public const BUTTON_ACTIVE_FRAME:String="Active";

        public const BUTTON_OVER_FRAME:String="Over";

        public const BUTTON_DOWN_FRAME:String="Depressed";

        internal var _originalTarget:Object;

        protected var _target:flash.display.MovieClip;

        protected var _callback:Function;

        protected var _name:String;

        protected var _hitareaName:String;

        protected var _shortCut:int;

        protected var _isDown:Boolean=false;
    }
}


//                  class ArtCheckBox
package mgs.aurora.games.common.components.ui.components.button 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    
    public class ArtCheckBox extends mgs.aurora.games.base.BaseClass
    {
        public function ArtCheckBox(arg1:flash.display.MovieClip, arg2:Function=null)
        {
            super();
            setClassDescription("mgs.aurora.games.common.components.ui.components.button.ArtCheckBox");
            this._target = arg1;
            this._target.buttonMode = true;
            this._callback = arg2;
            return;
        }

        public function enable():void
        {
            this._target.gotoAndStop(this.UNCHECKED_FRAME);
            this._target.buttonMode = true;
            if (!this._target.hasEventListener(flash.events.MouseEvent.MOUSE_UP)) 
            {
                this._target.addEventListener(flash.events.MouseEvent.MOUSE_UP, this.onMouseUp);
            }
            return;
        }

        public function disable():void
        {
            this._target.gotoAndStop(this.DISABLED_FRAME);
            this._target.buttonMode = false;
            this._target.removeEventListener(flash.events.MouseEvent.MOUSE_UP, this.onMouseUp);
            return;
        }

        internal function onMouseUp(arg1:flash.events.MouseEvent):void
        {
            if (this._checked) 
            {
                this.uncheck();
            }
            else 
            {
                this.check();
            }
            if (this._callback != null) 
            {
                this._callback(this);
            }
            return;
        }

        public function check():void
        {
            this._target.gotoAndStop(this.CHECKED_FRAME);
            this._checked = true;
            return;
        }

        public function uncheck():void
        {
            this._target.gotoAndStop(this.UNCHECKED_FRAME);
            this._checked = false;
            return;
        }

        public function get checked():Boolean
        {
            return this._checked;
        }

        internal const CHECKED_FRAME:String="Checked";

        internal const UNCHECKED_FRAME:String="UnChecked";

        internal const DISABLED_FRAME:String="Disabled";

        internal var _target:flash.display.MovieClip;

        internal var _checked:Boolean=false;

        internal var _callback:Function;
    }
}


//                  class ComponentButton
package mgs.aurora.games.common.components.ui.components.button 
{
    import flash.display.*;
    
    public class ComponentButton extends Object implements mgs.aurora.games.common.components.ui.components.button.IComponentButton
    {
        public function ComponentButton(arg1:Class, arg2:String="")
        {
            super();
            this._hitAreaName = arg2;
            this._btnMovieClip = new arg1() as flash.display.MovieClip;
            this._btnMovieClip.mouseChildren = false;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function set name(arg1:String):void
        {
            this._name = arg1;
            this._btnMovieClip.name = arg1;
            return;
        }

        public function set event(arg1:String):void
        {
            this._event = arg1;
            return;
        }

        public function get event():String
        {
            return this._event;
        }

        public function show():void
        {
            this._btnMovieClip.visible = true;
            return;
        }

        public function hide():void
        {
            this._btnMovieClip.visible = false;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._btnMovieClip;
        }

        public function set shortCut(arg1:String):void
        {
            this._shortCut = arg1;
            return;
        }

        public function get shortCut():String
        {
            return this._shortCut;
        }

        public function set activationRule(arg1:String):void
        {
            this._activationRule = arg1;
            return;
        }

        public function get activationRule():String
        {
            return this._activationRule;
        }

        public function set x(arg1:Number):void
        {
            this._btnMovieClip.x = arg1;
            return;
        }

        public function get x():Number
        {
            return this._btnMovieClip.x;
        }

        public function set y(arg1:Number):void
        {
            this._btnMovieClip.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this._btnMovieClip.y;
        }

        public function get hitAreaName():String
        {
            return this._hitAreaName;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this._btnMovieClip);
            return;
        }

        public function removeFromContainer():void
        {
            if (this._btnMovieClip.parent != null) 
            {
                this._btnMovieClip.parent.removeChild(this._btnMovieClip);
            }
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return this._btnMovieClip.addChild(arg1);
        }

        internal var _btnMovieClip:flash.display.MovieClip;

        internal var _name:String;

        internal var _shortCut:String="";

        internal var _event:String="";

        internal var _activationRule:String="";

        internal var _hitAreaName:String;
    }
}


//                  class IComponentButton
package mgs.aurora.games.common.components.ui.components.button 
{
    import mgs.aurora.games.common.components.ui.components.*;
    
    public interface IComponentButton extends mgs.aurora.games.common.components.ui.components.IComponent
    {
        function set shortCut(arg1:String):void;

        function get shortCut():String;

        function set event(arg1:String):void;

        function get event():String;

        function set activationRule(arg1:String):void;

        function get activationRule():String;
    }
}


//                package sprite
//                  class ComponentSeperator
package mgs.aurora.games.common.components.ui.components.sprite 
{
    import flash.display.*;
    import mgs.aurora.games.common.components.ui.components.*;
    
    public class ComponentSeperator extends Object implements mgs.aurora.games.common.components.ui.components.IComponent
    {
        public function ComponentSeperator(arg1:Class)
        {
            super();
            this._spriteMovieClip = new arg1() as flash.display.MovieClip;
            return;
        }

        public function set name(arg1:String):void
        {
            this._name = arg1;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function show():void
        {
            this._spriteMovieClip.visible = true;
            return;
        }

        public function hide():void
        {
            this._spriteMovieClip.visible = false;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._spriteMovieClip;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this._spriteMovieClip);
            return;
        }

        public function removeFromContainer():void
        {
            this._spriteMovieClip.parent.removeChild(this._spriteMovieClip);
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return this._spriteMovieClip.addChild(arg1);
        }

        public function set x(arg1:Number):void
        {
            this._spriteMovieClip.x = arg1;
            return;
        }

        public function get x():Number
        {
            return this._spriteMovieClip.x;
        }

        public function set y(arg1:Number):void
        {
            this._spriteMovieClip.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this._spriteMovieClip.y;
        }

        internal var _spriteMovieClip:flash.display.MovieClip;

        internal var _name:String;
    }
}


//                  class ComponentSprite
package mgs.aurora.games.common.components.ui.components.sprite 
{
    import flash.display.*;
    import mgs.aurora.games.common.components.ui.components.*;
    
    public class ComponentSprite extends Object implements mgs.aurora.games.common.components.ui.components.IComponent
    {
        public function ComponentSprite(arg1:Class)
        {
            super();
            this._spriteMovieClip = new arg1() as flash.display.MovieClip;
            return;
        }

        public function set name(arg1:String):void
        {
            this._name = arg1;
            this._spriteMovieClip.name = arg1;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function show():void
        {
            this._spriteMovieClip.visible = true;
            return;
        }

        public function hide():void
        {
            this._spriteMovieClip.visible = false;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._spriteMovieClip;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this._spriteMovieClip);
            return;
        }

        public function removeFromContainer():void
        {
            if (!(this._spriteMovieClip == null) && !(this._spriteMovieClip.parent == null)) 
            {
                this._spriteMovieClip.parent.removeChild(this._spriteMovieClip);
            }
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return this._spriteMovieClip.addChild(arg1);
        }

        public function set x(arg1:Number):void
        {
            this._spriteMovieClip.x = arg1;
            return;
        }

        public function get x():Number
        {
            return this._spriteMovieClip.x;
        }

        public function set y(arg1:Number):void
        {
            this._spriteMovieClip.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this._spriteMovieClip.y;
        }

        internal var _spriteMovieClip:flash.display.MovieClip;

        internal var _name:String;
    }
}


//                package text
//                  package factories
//                    class CachedTextfield
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    import flash.display.*;
    import flash.text.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    
    public class CachedTextfield extends Object implements mgs.aurora.games.common.components.ui.components.text.IComponentText
    {
        public function CachedTextfield(arg1:String, arg2:String, arg3:mgs.aurora.games.common.components.ui.components.text.IComponentText)
        {
            super();
            this.id = arg1;
            this.type = arg2;
            this.field = arg3;
            return;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            this.field.addTo(arg1);
            return;
        }

        public function removeFromContainer():void
        {
            this.field.removeFromContainer();
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return this.field.addChild(arg1);
        }

        public function clear():void
        {
            this.field.clear();
            return;
        }

        public function appendText(arg1:String):void
        {
            this.field.appendText(arg1);
            return;
        }

        public function set text(arg1:String):void
        {
            this.field.text = arg1;
            return;
        }

        public function get text():String
        {
            return this.field.text;
        }

        public function set format(arg1:flash.text.TextFormat):void
        {
            this.field.format = arg1;
            return;
        }

        public function get format():flash.text.TextFormat
        {
            return this.field.format;
        }

        public function set selectable(arg1:Boolean):void
        {
            this.field.selectable = arg1;
            return;
        }

        public function get selectable():Boolean
        {
            return this.field.selectable;
        }

        public function set autoSize(arg1:String):void
        {
            this.field.autoSize = arg1;
            return;
        }

        public function get autoSize():String
        {
            return this.field.autoSize;
        }

        public function set border(arg1:Boolean):void
        {
            this.field.border = arg1;
            return;
        }

        public function get border():Boolean
        {
            return this.field.border;
        }

        public function set borderColor(arg1:uint):void
        {
            this.field.borderColor = arg1;
            return;
        }

        public function get borderColor():uint
        {
            return this.field.borderColor;
        }

        public function set background(arg1:Boolean):void
        {
            this.field.background = arg1;
            return;
        }

        public function get background():Boolean
        {
            return this.field.background;
        }

        public function set backgroundColor(arg1:uint):void
        {
            this.field.backgroundColor = arg1;
            return;
        }

        public function get backgroundColor():uint
        {
            return this.field.backgroundColor;
        }

        public function set width(arg1:Number):void
        {
            this.field.width = arg1;
            return;
        }

        public function get width():Number
        {
            return this.field.width;
        }

        public function set height(arg1:Number):void
        {
            this.field.height = arg1;
            return;
        }

        public function get height():Number
        {
            return this.field.height;
        }

        public function set aliasType(arg1:String):void
        {
            this.field.aliasType = arg1;
            return;
        }

        public function get aliasType():String
        {
            return this.field.aliasType;
        }

        public function set name(arg1:String):void
        {
            this.field.name = arg1;
            return;
        }

        public function get name():String
        {
            return this.field.name;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this.field.displayObject;
        }

        public function set x(arg1:Number):void
        {
            this.field.x = arg1;
            return;
        }

        public function get x():Number
        {
            return this.field.x;
        }

        public function set y(arg1:Number):void
        {
            this.field.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this.field.y;
        }

        public function show():void
        {
            this.field.show();
            return;
        }

        public function hide():void
        {
            this.field.hide();
            return;
        }

        public var id:String;

        public var type:String;

        public var field:mgs.aurora.games.common.components.ui.components.text.IComponentText;
    }
}


//                    class ITextFieldFactory
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    
    public interface ITextFieldFactory
    {
        function createTextField(arg1:*, arg2:String=null):mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText;

        function buildConfig(arg1:XML):*;
    }
}


//                    class TextFieldAbstractFactory
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    import flash.utils.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    
    public class TextFieldAbstractFactory extends Object
    {
        public function TextFieldAbstractFactory()
        {
            super();
            if (!staticInstantiation) 
            {
                throw new Error("TextFieldAbstractFactory can not be instantiated");
            }
            staticInstantiation = false;
            this.textFieldDefinitions = new flash.utils.Dictionary();
            this.textFieldCache = new flash.utils.Dictionary();
            return;
        }

        internal function parseDefinitions(arg1:XML):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=undefined;
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=arg1.definitions.field;
            var loc7:*=0;
            var loc8:*=loc1;
            for each (loc6 in loc8) 
            {
                loc2 = loc6.@id.toXMLString();
                loc3 = loc6.@type.toXMLString();
                loc4 = this.buildConfig(loc3, loc6);
                loc5 = new mgs.aurora.games.common.components.ui.components.text.factories.TextFieldTemplate(loc2, loc3, loc4);
                this.textFieldDefinitions[loc2] = loc5;
            }
            return;
        }

        internal function parseCacheInstances(arg1:XML):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=arg1.cache.instance;
            var loc7:*=0;
            var loc8:*=loc1;
            for each (loc6 in loc8) 
            {
                loc2 = loc6.@id.toXMLString();
                loc3 = loc6.@type.toXMLString();
                loc4 = this.createTextFieldFromFactory(loc3, loc2);
                loc5 = new mgs.aurora.games.common.components.ui.components.text.factories.CachedTextfield(loc2, loc3, loc4);
                this.textFieldCache[loc2] = loc5;
            }
            return;
        }

        internal function buildConfig(arg1:String, arg2:XML):Object
        {
            var loc1:*=this.getFactory(arg1);
            return loc1.buildConfig(arg2);
        }

        internal function getFactory(arg1:String):mgs.aurora.games.common.components.ui.components.text.factories.ITextFieldFactory
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.games.common.components.ui.components.text.factories.TextFieldType.VECTOR:
                {
                    return VectorStringFactory.instance;
                }
            }
            return null;
        }

        internal function getTemplate(arg1:String):mgs.aurora.games.common.components.ui.components.text.factories.TextFieldTemplate
        {
            return this.textFieldDefinitions[arg1] as mgs.aurora.games.common.components.ui.components.text.factories.TextFieldTemplate;
        }

        internal function createTextFieldFromFactory(arg1:String, arg2:String=null):mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText
        {
            var loc1:*=this.getTemplate(arg1);
            if (!loc1) 
            {
                return null;
            }
            var loc2:*;
            return (loc2 = this.getFactory(loc1.type)).createTextField(loc1.config, arg2);
        }

        public static function initialize(arg1:XML):void
        {
            staticInstantiation = true;
            instance = new TextFieldAbstractFactory();
            instance.parseDefinitions(arg1);
            instance.parseCacheInstances(arg1);
            return;
        }

        public static function getTextField(arg1:String):mgs.aurora.games.common.components.ui.components.text.IComponentText
        {
            var loc2:*=null;
            var loc1:*=instance.textFieldCache[arg1] as mgs.aurora.games.common.components.ui.components.text.factories.CachedTextfield;
            if (loc1) 
            {
                loc2 = loc1.field;
            }
            else 
            {
                loc2 = instance.createTextFieldFromFactory(arg1);
            }
            if (loc2 == null) 
            {
                return null;
            }
            loc2.name = arg1;
            return loc2;
        }

        internal var textFieldDefinitions:flash.utils.Dictionary;

        internal var textFieldCache:flash.utils.Dictionary;

        internal static var staticInstantiation:Boolean;

        internal static var instance:mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory;
    }
}


//                    class TextFieldTemplate
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    public class TextFieldTemplate extends Object
    {
        public function TextFieldTemplate(arg1:String, arg2:String, arg3:*)
        {
            super();
            this.id = arg1;
            this.type = arg2;
            this.config = arg3;
            return;
        }

        public var id:String;

        public var type:String;

        public var config:*;
    }
}


//                    class TextFieldType
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    public class TextFieldType extends Object
    {
        public function TextFieldType()
        {
            super();
            throw new Error("TextFieldType is not intended to be instantiated.");
        }

        public static const VECTOR:String="0";
    }
}


//                    class VectorStringConfig
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    
    public class VectorStringConfig extends mgs.aurora.games.base.BaseClass
    {
        public function VectorStringConfig(arg1:XML)
        {
            var loc1:*=null;
            super();
            setClassDescription("mgs.aurora.games.common.components.ui.components.text.factories.VectorStringConfig");
            this.id = arg1.@id.toXMLString();
            if (this.id == "") 
            {
                throw new Error("Invalid container specified for textfield " + arg1.@id.toXMLString() + ".");
            }
            this.prefix = arg1.@prefix.toXMLString();
            if (this.prefix != "") 
            {
            };
            this.container = arg1.@resource.toXMLString();
            if (this.container == "") 
            {
                throw new Error("Invalid container specified for textfield " + arg1.@id.toXMLString() + ".");
            }
            this.initialText = arg1.@text.toXMLString();
            this.horizontalGap = int(arg1.@horizontalGap.toXMLString());
            this.verticalGap = int(arg1.@verticalGap.toXMLString());
            loc1 = arg1.@horizontalAlign.toXMLString();
            if (loc1 == "") 
            {
                this.horizontalAlign = mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_CENTER;
            }
            else 
            {
                this.horizontalAlign = int(loc1);
            }
            loc1 = arg1.@verticalAlign.toXMLString();
            if (loc1 == "") 
            {
                this.verticalAlign = mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_CENTER;
            }
            else 
            {
                this.verticalAlign = int(loc1);
            }
            this.direction = int(arg1.@direction.toXMLString());
            this.resizable = arg1.@resizable.toXMLString() == "1";
            this.maxWidth = uint(arg1.@maxWidth.toXMLString());
            this.minScale = Number(arg1.@minScale.toXMLString());
            loc1 = arg1.@autoResize.toXMLString();
            if (loc1 != "") 
            {
                this.autoResize = loc1 == "1";
            }
            else 
            {
                this.autoResize = true;
            }
            this.formatter = arg1.@formatter.toXMLString();
            if (this.formatter == "") 
            {
                this.formatter = null;
            }
            this.group = arg1.@group.toXMLString();
            if (this.group == "") 
            {
                this.group = null;
            }
            this.region = arg1.@region.toXMLString();
            if (this.region == "") 
            {
                this.region = null;
            }
            return;
        }

        public var prefix:String;

        public var container:String;

        public var id:String;

        public var initialText:String;

        public var horizontalGap:int;

        public var verticalGap:int;

        public var horizontalAlign:int;

        public var verticalAlign:int;

        public var direction:int;

        public var resizable:Boolean;

        public var maxWidth:uint;

        public var minScale:Number;

        public var autoResize:Boolean;

        public var formatter:String;

        public var group:String;

        public var region:String;
    }
}


//                    class VectorStringFactory
package mgs.aurora.games.common.components.ui.components.text.factories 
{
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    
    internal class VectorStringFactory extends Object implements mgs.aurora.games.common.components.ui.components.text.factories.ITextFieldFactory
    {
        public function VectorStringFactory()
        {
            super();
            if (!staticConstruction) 
            {
                throw new Error("VectorStringFactory is singleton and may not be instantiated.");
            }
            staticConstruction = false;
            return;
        }

        public function createTextField(arg1:*, arg2:String=null):mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.factories.VectorStringConfig(arg1);
            var loc2:*=new mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont(loc1.prefix, loc1.container);
            var loc3:*=new mgs.aurora.games.common.components.ui.components.text.resizable.VectorString(loc2, loc1.initialText, loc1.horizontalGap, loc1.verticalGap, loc1.horizontalAlign, loc1.verticalAlign, loc1.direction, loc1.resizable, loc1.maxWidth, loc1.minScale, loc1.autoResize);
            if (loc1.formatter) 
            {
                loc5 = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter(loc1.formatter);
            }
            var loc4:*=new mgs.aurora.games.common.components.ui.components.text.resizable.StringTextFieldBridge(arg2 ? arg2 : loc1.id + new Date().valueOf().toString(), loc3, loc5, mgs.aurora.games.common.components.ui.components.text.resizable.RegionIndex.getRegion(loc1.region));
            if (loc1.group) 
            {
                (loc6 = mgs.aurora.games.common.components.ui.components.text.resizable.TextFieldGroupIndex.getGroup(loc1.group)).addTextField(loc4);
            }
            if (loc1.region) 
            {
                mgs.aurora.games.common.components.ui.components.text.resizable.RegionIndex.addField(loc1.region, loc4);
            }
            return loc4;
        }

        public function buildConfig(arg1:XML):*
        {
            var loc1:*=new mgs.aurora.games.common.components.ui.components.text.factories.VectorStringConfig(arg1);
            return loc1;
        }

        public static function get instance():mgs.aurora.games.common.components.ui.components.text.factories.ITextFieldFactory
        {
            if (!_instance) 
            {
                staticConstruction = true;
                _instance = new VectorStringFactory();
            }
            return _instance;
        }

        internal static var _instance:VectorStringFactory;

        internal static var staticConstruction:Boolean;
    }
}


//                  package resizable
//                    class BaseFont
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    
    public class BaseFont extends mgs.aurora.games.base.BaseClass
    {
        public function BaseFont()
        {
            super();
            return;
        }

        protected var _charImages:flash.utils.Dictionary;
    }
}


//                    class BaseString
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.display.*;
    
    public class BaseString extends flash.display.Sprite
    {
        public function BaseString(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.BaseFont, arg2:String="", arg3:int=0, arg4:int=0, arg5:uint=2, arg6:uint=2, arg7:uint=0)
        {
            super();
            this._horizontalAlign = arg5;
            this._verticalAlign = arg6;
            this._direction = arg7;
            this._font = arg1;
            this._text = arg2;
            this._horizontalGap = arg3;
            this._verticalGap = arg4;
            return;
        }

        public function get horizontalAlign():uint
        {
            return this._horizontalAlign;
        }

        public function set horizontalAlign(arg1:uint):void
        {
            this._horizontalAlign = arg1;
            this.updateScreen(this._text);
            return;
        }

        public function get verticalAlign():uint
        {
            return this._verticalAlign;
        }

        public function set verticalAlign(arg1:uint):void
        {
            this._verticalAlign = arg1;
            this.updateScreen(this._text);
            return;
        }

        public function get direction():uint
        {
            return this._direction;
        }

        public function set direction(arg1:uint):void
        {
            this._direction = arg1;
            this.updateScreen(this._text);
            return;
        }

        public function get font():mgs.aurora.games.common.components.ui.components.text.resizable.BaseFont
        {
            return this._font;
        }

        public function set font(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.BaseFont):void
        {
            this._font = arg1;
            if (this._font != null) 
            {
                this.updateScreen(this._text);
            }
            return;
        }

        public function get text():String
        {
            return this._text;
        }

        public function set text(arg1:String):void
        {
            var loc1:*=this._text;
            this._text = arg1;
            this.updateScreen(loc1);
            return;
        }

        public function get horizontalGap():int
        {
            return this._horizontalGap;
        }

        public function set horizontalGap(arg1:int):void
        {
            this._horizontalGap = arg1;
            this.updateScreen(this._text);
            return;
        }

        public function get verticalGap():int
        {
            return this._verticalGap;
        }

        public function set verticalGap(arg1:int):void
        {
            this._verticalGap = arg1;
            this.updateScreen(this._text);
            return;
        }

        public function get scaleValue():Number
        {
            throw new Error("BaseString.scaleValue: needs to implemented by subclass");
        }

        public function resize(arg1:Number=0, arg2:Boolean=false):void
        {
            throw new Error("BaseString.resize: needs to implemented by subclass");
        }

        public function updateScreen(arg1:String):void
        {
            throw new Error("BaseString.updateScreen: needs to implemented by subclass");
        }

        protected function updateOffset():void
        {
            throw new Error("BaseString.updateScreen: needs to implemented by subclass");
        }

        protected var _horizontalAlign:uint;

        protected var _verticalAlign:uint;

        protected var _direction:uint;

        protected var _font:mgs.aurora.games.common.components.ui.components.text.resizable.BaseFont;

        protected var _text:String;

        protected var _horizontalGap:int;

        protected var _verticalGap:int;
    }
}


//                    class IResizableComponentText
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import mgs.aurora.games.common.components.ui.components.text.*;
    
    public interface IResizableComponentText extends mgs.aurora.games.common.components.ui.components.text.IComponentText
    {
        function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void;

        function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void;

        function get scaleValue():Number;

        function get idealScale():Number;

        function calculateIdealScale():Number;

        function get minScale():Number;

        function resize(arg1:Number=0, arg2:Boolean=false):void;

        function get id():String;

        function reformat():void;

        function testOverflowState():Boolean;
    }
}


//                    class Region
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    
    public class Region extends Object
    {
        public function Region(arg1:String, arg2:String, arg3:String)
        {
            super();
            this.id = arg1;
            this.fields = new Vector.<mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText>();
            this.overflowFormat = arg2;
            this.lockedFormat = arg3;
            this.overflowingFields = new flash.utils.Dictionary();
            this.overflowCount = 0;
            return;
        }

        public function addField(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText):void
        {
            arg1.addEventListener(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.OVERFLOWED, this.onOverflow, false, 0, true);
            arg1.addEventListener(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.UNDERFLOWED, this.onUnderflow, false, 0, true);
            this.fields.push(arg1);
            return;
        }

        internal function onUnderflow(arg1:mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent):void
        {
            var loc2:*=false;
            var loc3:*=false;
            var loc4:*=null;
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText(arg1.currentTarget);
            var loc5:*;
            var loc6:*=((loc5 = this).overflowCount - 1);
            loc5.overflowCount = loc6;
            delete this.overflowingFields[loc1.id];
            if (this.overflowCount == 0) 
            {
                loc2 = false;
                loc3 = false;
                loc5 = 0;
                loc6 = this.fields;
                for each (loc4 in loc6) 
                {
                    loc3 = loc4.testOverflowState();
                    loc2 = loc2 || loc3;
                    if (!loc3) 
                    {
                        continue;
                    }
                    this.overflowingFields[loc4.id] = loc4;
                    var loc7:*;
                    var loc8:*=((loc7 = this).overflowCount + 1);
                    loc7.overflowCount = loc8;
                }
                this.overflowing = loc2;
                if (!this.overflowing) 
                {
                    loc5 = 0;
                    loc6 = this.fields;
                    for each (loc4 in loc6) 
                    {
                        loc4.reformat();
                    }
                }
            }
            return;
        }

        internal function onOverflow(arg1:mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText(arg1.currentTarget);
            this.overflowingFields[loc1.id] = loc1;
            var loc3:*;
            var loc4:*=((loc3 = this).overflowCount + 1);
            loc3.overflowCount = loc4;
            if (!this.overflowing) 
            {
                this.overflowing = true;
                loc3 = 0;
                loc4 = this.fields;
                for each (loc2 in loc4) 
                {
                    if (loc2 == loc1) 
                    {
                        continue;
                    }
                    loc2.reformat();
                }
            }
            return;
        }

        public var id:String;

        public var fields:__AS3__.vec.Vector.<mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText>;

        internal var overflowingFields:flash.utils.Dictionary;

        internal var overflowCount:Number;

        public var overflowing:Boolean;

        public var overflowFormat:String;

        public var lockedFormat:String;
    }
}


//                    class RegionIndex
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.utils.*;
    
    public class RegionIndex extends Object
    {
        public function RegionIndex()
        {
            super();
            if (!staticInit) 
            {
                throw new Error("RegionIndex cannot be initialised.");
            }
            this.regions = new flash.utils.Dictionary();
            return;
        }

        internal function initialize(arg1:XML):void
        {
            var config:XML;
            var regions:XMLList;
            var id:String;
            var overflowFormat:String;
            var lockedFormat:String;
            var region:mgs.aurora.games.common.components.ui.components.text.resizable.Region;
            var overrideLock:String;
            var regionNode:XML;

            var loc1:*;
            id = null;
            overflowFormat = null;
            lockedFormat = null;
            region = null;
            overrideLock = null;
            regionNode = null;
            config = arg1;
            regions = config.region;
            var loc2:*=0;
            var loc3:*=regions;
            for each (regionNode in loc3) 
            {
                id = regionNode.@id.toXMLString();
                overflowFormat = regionNode.@overflowFormat.toXMLString();
                lockedFormat = regionNode.@lockedFormat.toXMLString();
                if (_regionOverrides) 
                {
                    var loc5:*=0;
                    var loc6:*=_regionOverrides.region;
                    var loc4:*=new XMLList("");
                    for each (var loc7:* in loc6) 
                    {
                        var loc8:*;
                        with (loc8 = loc7) 
                        {
                            if (attribute("id") == id) 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    overrideLock = loc4.@lockedFormat.toXMLString();
                    if (overrideLock != "") 
                    {
                        lockedFormat = overrideLock;
                    }
                }
                region = new mgs.aurora.games.common.components.ui.components.text.resizable.Region(id, overflowFormat, lockedFormat);
                this.regions[id] = region;
            }
            return;
        }

        internal function addField(arg1:String, arg2:mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText):void
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.resizable.Region(this.regions[arg1]);
            loc1.addField(arg2);
            return;
        }

        public static function initialize(arg1:XML):void
        {
            instance.initialize(arg1);
            return;
        }

        public static function addField(arg1:String, arg2:mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText):void
        {
            instance.addField(arg1, arg2);
            return;
        }

        public static function getRegion(arg1:String):mgs.aurora.games.common.components.ui.components.text.resizable.Region
        {
            return mgs.aurora.games.common.components.ui.components.text.resizable.Region(instance.regions[arg1]);
        }

        public static function set regionOverrides(arg1:XML):void
        {
            _regionOverrides = arg1;
            return;
        }

        
        {
            staticInit = false;
            staticInit = true;
            instance = new RegionIndex();
        }

        internal var regions:flash.utils.Dictionary;

        internal static var instance:mgs.aurora.games.common.components.ui.components.text.resizable.RegionIndex;

        internal static var staticInit:Boolean=false;

        internal static var _regionOverrides:XML;
    }
}


//                    class ResizableString
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import mgs.aurora.games.common.components.ui.components.text.*;
    
    public class ResizableString extends mgs.aurora.games.common.components.ui.components.text.resizable.BaseString
    {
        public function ResizableString(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.BaseFont, arg2:String="", arg3:int=0, arg4:int=0, arg5:uint=2, arg6:uint=2, arg7:uint=0, arg8:Boolean=false, arg9:int=0, arg10:Number=0, arg11:Boolean=true)
        {
            super(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            this._resizable = arg8;
            this._maxSize = arg9;
            this._minScale = arg10;
            this._autoResizes = arg11;
            this._scaleValue = 1;
            this.scaleX = this._scaleValue;
            this.scaleY = this._scaleValue;
            return;
        }

        public override function get text():String
        {
            return super.text;
        }

        public override function set text(arg1:String):void
        {
            this._scaleValue = 1;
            this.scaleX = this._scaleValue;
            this.scaleY = this._scaleValue;
            super.text = arg1;
            if (!(this._text == "") && this._autoResizes) 
            {
                this.resize();
            }
            return;
        }

        public override function get scaleValue():Number
        {
            return this._scaleValue;
        }

        public function get currentSize():Number
        {
            throw new Error("ResizableString.currentSize: needs to implemented by subclass");
        }

        public function get minScale():Number
        {
            return this._minScale;
        }

        public function get maxSize():int
        {
            return this._maxSize;
        }

        public function get resizable():Boolean
        {
            return this._resizable;
        }

        public function get idealScale():Number
        {
            return this._idealScale;
        }

        public override function updateScreen(arg1:String):void
        {
            throw new Error("ResizableString.updateScreen: needs to implemented by subclass");
        }

        protected override function updateOffset():void
        {
            throw new Error("ResizableString.updateOffset: needs to implemented by subclass");
        }

        public override function resize(arg1:Number=0, arg2:Boolean=false):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=arg1;
            if (this._resizable) 
            {
                if (this._autoResizes || arg2) 
                {
                    if (loc3 == 0) 
                    {
                        if ((loc3 = Math.floor(this._maxSize / this.currentSize * 100) / 100) < this._minScale) 
                        {
                            loc3 = this._minScale;
                        }
                        else if (loc3 > 1) 
                        {
                            loc3 = 1;
                        }
                    }
                }
                if (loc3 != 0) 
                {
                    this._idealScale = loc3;
                }
                if (loc3 > 0) 
                {
                    scaleX = loc3;
                    scaleY = loc3;
                    this._scaleValue = loc3;
                }
                if (!arg2) 
                {
                    dispatchEvent(new mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.RESIZED));
                }
            }
            return;
        }

        public function clone():mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString
        {
            return new mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString(font, this.text, horizontalGap, verticalGap, horizontalAlign, verticalAlign, direction, this.resizable, this.maxSize, this.minScale, this._autoResizes);
        }

        public function calculateIdealScale():Number
        {
            var loc1:*=Math.floor(this._maxSize / this.currentSize * 100) / 100;
            if (loc1 < this._minScale) 
            {
                loc1 = this._minScale;
            }
            else if (loc1 > 1) 
            {
                loc1 = 1;
            }
            return loc1;
        }

        internal var _resizable:Boolean;

        internal var _maxSize:int;

        internal var _minScale:Number;

        internal var _scaleValue:Number;

        internal var _idealScale:Number=1;

        protected var _autoResizes:Boolean;
    }
}


//                    class StringAlign
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import __AS3__.vec.*;
    
    public final class StringAlign extends Object
    {
        public function StringAlign()
        {
            super();
            return;
        }

        public static function getString(arg1:uint):String
        {
            if (arg1 > mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.STRING_VALUES.length) 
            {
                throw new Error("pValue > StringAlign.STRING_VALUES.length");
            }
            return mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.STRING_VALUES[arg1];
        }

        public static const ALIGN_NEAR:uint=0;

        public static const ALIGN_FAR:uint=1;

        public static const ALIGN_CENTER:uint=2;

        internal static const STRING_VALUES:__AS3__.vec.Vector.<String>=Vector.<String>(["near", "far", "center"]);
    }
}


//                    class StringDirection
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import __AS3__.vec.*;
    
    public final class StringDirection extends Object
    {
        public function StringDirection()
        {
            super();
            return;
        }

        public static function getString(arg1:uint):String
        {
            if (arg1 > mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.STRING_VALUES.length) 
            {
                throw new Error("pValue > StringDirection.STRING_VALUES.length");
            }
            return mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.STRING_VALUES[arg1];
        }

        public static const DIRECTION_HORIZONTAL:uint=0;

        public static const DIRECTION_VERTICAL:uint=1;

        internal static const STRING_VALUES:__AS3__.vec.Vector.<String>=Vector.<String>(["horizontal", "vertical"]);
    }
}


//                    class StringTextFieldBridge
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class StringTextFieldBridge extends flash.events.EventDispatcher implements mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function StringTextFieldBridge(arg1:String, arg2:mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString, arg3:mgs.aurora.games.common.components.utils.text.format.ITextFormatter=null, arg4:mgs.aurora.games.common.components.ui.components.text.resizable.Region=null)
        {
            super();
            this.field = arg2;
            this._id = arg1;
            arg2.addEventListener(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.RESIZED, this.onResize, false, 0, true);
            if (this.isFontAssetLoaded()) 
            {
                mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFileLoaded, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_FILE_LOADED);
                mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFGClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            }
            this.formatter = arg3;
            if (arg3) 
            {
                arg3.addEventListener(mgs.aurora.games.common.components.utils.text.format.TextFormatEvent.REFORMAT, this.onReformat, false, 0, true);
            }
            this.region = arg4;
            return;
        }

        public function reformat():void
        {
            this.text = this.unformattedText;
            return;
        }

        public function calculateIdealScale():Number
        {
            return this.field.calculateIdealScale();
        }

        public function get id():String
        {
            return this._id;
        }

        public function get minScale():Number
        {
            return this.field.minScale;
        }

        public function get scaleValue():Number
        {
            return this.field.scaleValue;
        }

        public function get idealScale():Number
        {
            return this.field.idealScale;
        }

        internal function onFileLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (this.fontAssetName == loc1.request.id) 
            {
                this.reformat();
            }
            return;
        }

        internal function onFGClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.reformat();
            return;
        }

        internal function get fontAssetName():String
        {
            return mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont(this.field.font).fontResourceContainer;
        }

        internal function isFontAssetLoaded():Boolean
        {
            var available:Boolean;

            var loc1:*;
            available = false;
            try 
            {
                available = !(mgs.aurora.games.common.components.resourceProxy.Assets.getResource(this.fontAssetName) == null);
            }
            catch (e:Error)
            {
                return false;
            }
            return available;
        }

        internal function onReformat(arg1:mgs.aurora.games.common.components.utils.text.format.TextFormatEvent):void
        {
            this.reformat();
            return;
        }

        internal function onResize(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            if (this.region && this.isOverflowing(this.field) && !this.overflowing) 
            {
                this.overflowing = true;
                dispatchEvent(new mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.OVERFLOWED));
                this.reformat();
            }
            else if (this.overflowing) 
            {
                if (!this.testOverflowState()) 
                {
                    this.overflowing = false;
                    dispatchEvent(new mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.UNDERFLOWED));
                }
            }
            return;
        }

        public function testOverflowState():Boolean
        {
            var loc1:*=null;
            if (this.formatter) 
            {
                loc1 = this.formatter.format(this.unformattedText);
            }
            else 
            {
                loc1 = this.unformattedText;
            }
            var loc2:*=this.field.clone();
            loc2.text = loc1;
            return this.isOverflowing(loc2);
        }

        internal function isOverflowing(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString):Boolean
        {
            return arg1.scaleValue <= arg1.minScale && arg1.maxSize < arg1.width && arg1.resizable;
        }

        public function set text(arg1:String):void
        {
            if (arg1 == null) 
            {
                return;
            }
            if (arg1 == " " || arg1 == "") 
            {
                this.field.text = "";
            }
            else 
            {
                this.unformattedText = arg1;
                this.field.text = this.formatter ? this.formatter.format(arg1, this.region) : arg1;
                dispatchEvent(new mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.TEXT_CHANGED));
            }
            return;
        }

        public function get text():String
        {
            return this.field.text;
        }

        public function set format(arg1:flash.text.TextFormat):void
        {
            return;
        }

        public function get format():flash.text.TextFormat
        {
            return null;
        }

        public function set selectable(arg1:Boolean):void
        {
            return;
        }

        public function get selectable():Boolean
        {
            return false;
        }

        public function set autoSize(arg1:String):void
        {
            return;
        }

        public function get autoSize():String
        {
            return null;
        }

        public function set border(arg1:Boolean):void
        {
            return;
        }

        public function get border():Boolean
        {
            return false;
        }

        public function set borderColor(arg1:uint):void
        {
            return;
        }

        public function get borderColor():uint
        {
            return 0;
        }

        public function set background(arg1:Boolean):void
        {
            return;
        }

        public function get background():Boolean
        {
            return false;
        }

        public function set backgroundColor(arg1:uint):void
        {
            return;
        }

        public function get backgroundColor():uint
        {
            return 0;
        }

        public function set width(arg1:Number):void
        {
            this.field.width = arg1;
            return;
        }

        public function get width():Number
        {
            return this.field.width;
        }

        public function set height(arg1:Number):void
        {
            this.field.height = arg1;
            return;
        }

        public function get height():Number
        {
            return this.field.height;
        }

        public function set aliasType(arg1:String):void
        {
            throw new Error("mgs.aurora.games.common.components.ui.components.text.resizable.StringTextFieldBridge.aliasType not implemented.");
        }

        public function get aliasType():String
        {
            throw new Error("mgs.aurora.games.common.components.ui.components.text.resizable.StringTextFieldBridge.aliasType not implemented.");
        }

        public function clear():void
        {
            this.text = "";
            return;
        }

        public function appendText(arg1:String):void
        {
            this.field.text = this.field.text + arg1;
            return;
        }

        public function set name(arg1:String):void
        {
            this.field.name = arg1;
            return;
        }

        public function get name():String
        {
            return this.field.name;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this.field;
        }

        public function set x(arg1:Number):void
        {
            this.field.x = arg1;
            return;
        }

        public function get x():Number
        {
            return this.field.x;
        }

        public function set y(arg1:Number):void
        {
            this.field.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this.field.y;
        }

        public function show():void
        {
            this.field.visible = true;
            return;
        }

        public function hide():void
        {
            this.field.visible = false;
            return;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this.field);
            return;
        }

        public function removeFromContainer():void
        {
            if (this.field.parent) 
            {
                this.field.parent.removeChild(this.field);
            }
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return this.field.addChild(arg1);
        }

        public function resize(arg1:Number=0, arg2:Boolean=false):void
        {
            this.field.resize(arg1, arg2);
            return;
        }

        internal var field:mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString;

        internal var formatter:mgs.aurora.games.common.components.utils.text.format.ITextFormatter;

        internal var unformattedText:String;

        internal var _id:String;

        internal var region:mgs.aurora.games.common.components.ui.components.text.resizable.Region;

        internal var overflowing:Boolean;
    }
}


//                    class TextFieldGroup
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    
    public class TextFieldGroup extends Object
    {
        public function TextFieldGroup(arg1:String)
        {
            super();
            this.id = arg1;
            this.fields = new Vector.<mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText>();
            this.minScale = -1;
            return;
        }

        public function addTextField(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText):void
        {
            var loc1:*=this.fields.indexOf(arg1);
            if (loc1 == -1) 
            {
                if (this.minScale < arg1.minScale) 
                {
                    this.minScale = arg1.minScale;
                }
                arg1.addEventListener(mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent.RESIZED, this.fieldResized, false, 0, true);
                arg1.addEventListener(mgs.aurora.games.common.components.ui.components.text.TextFieldLifecycleEvent.DISPOSED, this.onFieldDisposed);
                if (this.lastScaled) 
                {
                    arg1.resize(this.lastScaledValue, true);
                }
                else 
                {
                    this.lastScaled = arg1;
                    this.lastScaledValue = arg1.scaleValue;
                }
                this.fields.push(arg1);
            }
            return;
        }

        public function removeTextField(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText):void
        {
            var loc1:*=this.fields.indexOf(arg1, 0);
            if (loc1 != -1) 
            {
                this.fields = this.fields.splice(loc1, 1);
                arg1.removeEventListener(mgs.aurora.games.common.components.ui.components.text.TextFieldLifecycleEvent.DISPOSED, this.onFieldDisposed);
            }
            return;
        }

        internal function onFieldDisposed(arg1:mgs.aurora.games.common.components.ui.components.text.TextFieldLifecycleEvent):void
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText(arg1.currentTarget);
            this.removeTextField(loc1);
            return;
        }

        internal function fieldResized(arg1:mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText(arg1.currentTarget);
            if (loc1 == this.lastScaled && loc1.scaleValue > this.lastScaledValue) 
            {
                this.scaleAllFieldsToIdeal();
            }
            else if (!this.lastScaled || !(loc1.scaleValue == this.lastScaledValue)) 
            {
                if (loc1.scaleValue < this.minScale) 
                {
                    loc1.resize(this.minScale, true);
                }
                else if (loc1.scaleValue > this.lastScaledValue) 
                {
                    loc1.resize(this.lastScaledValue, true);
                }
                else 
                {
                    var loc3:*=0;
                    var loc4:*=this.fields;
                    for each (loc2 in loc4) 
                    {
                        if (loc2 == loc1) 
                        {
                            continue;
                        }
                        loc2.resize(loc1.scaleValue, true);
                    }
                    this.lastScaled = loc1;
                    this.lastScaledValue = this.lastScaled.scaleValue;
                }
            }
            return;
        }

        internal function scaleAllFieldsToIdeal():void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=this.lastScaled.idealScale;
            if (isNaN(loc1)) 
            {
                loc1 = 1;
            }
            var loc2:*=0;
            var loc3:*=1;
            var loc7:*=0;
            var loc8:*=this.fields;
            for each (loc5 in loc8) 
            {
                loc2 = loc5.calculateIdealScale();
                if (!(loc2 < loc3)) 
                {
                    continue;
                }
                loc3 = loc2;
                loc4 = loc5;
            }
            loc1 = loc7 = loc3;
            this.lastScaledValue = loc7;
            this.lastScaled = loc4;
            if (loc1 < this.minScale) 
            {
                loc1 = this.minScale;
            }
            loc7 = 0;
            loc8 = this.fields;
            for each (loc6 in loc8) 
            {
                loc6.resize(loc1, true);
            }
            return;
        }

        public var id:String;

        internal var fields:__AS3__.vec.Vector.<mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText>;

        internal var minScale:Number;

        internal var lastScaled:mgs.aurora.games.common.components.ui.components.text.resizable.IResizableComponentText;

        internal var lastScaledValue:Number;
    }
}


//                    class TextFieldGroupIndex
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    
    public class TextFieldGroupIndex extends mgs.aurora.games.base.BaseClass
    {
        public function TextFieldGroupIndex()
        {
            super();
            setClassDescription("mgs.aurora.games.common.components.ui.components.text.resizable.TextFieldGroupIndex");
            this.index = new flash.utils.Dictionary();
            return;
        }

        public static function getGroup(arg1:String):mgs.aurora.games.common.components.ui.components.text.resizable.TextFieldGroup
        {
            var loc1:*=instance.index[arg1];
            if (!loc1) 
            {
                loc1 = new mgs.aurora.games.common.components.ui.components.text.resizable.TextFieldGroup(arg1);
                instance.index[arg1] = loc1;
            }
            return loc1;
        }

        public static function addGroup(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.TextFieldGroup):void
        {
            if (arg1 && !instance.index[arg1.id]) 
            {
                instance.index[arg1.id] = arg1;
            }
            return;
        }

        
        {
            if (!instance) 
            {
                instance = new TextFieldGroupIndex();
            }
        }

        internal var index:flash.utils.Dictionary;

        internal static var instance:mgs.aurora.games.common.components.ui.components.text.resizable.TextFieldGroupIndex;
    }
}


//                    class VectorFont
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.display.*;
    import flash.system.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.text.*;
    
    public class VectorFont extends mgs.aurora.games.common.components.ui.components.text.resizable.BaseFont
    {
        public function VectorFont(arg1:String, arg2:String)
        {
            super();
            setClassDescription("mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont");
            this.prefix = arg1;
            this._fontResourceContainer = arg2;
            _charImages = new flash.utils.Dictionary();
            this._charWidth = new flash.utils.Dictionary();
            this._charHeight = new flash.utils.Dictionary();
            return;
        }

        internal function cacheCharacter(arg1:String):Class
        {
            var char:String;
            var container:flash.display.MovieClip;
            var library:flash.system.ApplicationDomain;
            var Character:Class;
            var friendlyName:String;
            var tempChar:flash.display.Sprite;

            var loc1:*;
            container = null;
            library = null;
            Character = null;
            friendlyName = null;
            tempChar = null;
            char = arg1;
            if (!_charImages[char]) 
            {
                container = mgs.aurora.games.common.components.resourceProxy.Assets.getResource(this.fontResourceContainer);
                if (!container) 
                {
                    return null;
                }
                library = container.loaderInfo.applicationDomain;
                try 
                {
                    if (this.isLowercaseChar(char) && library.hasDefinition(this.prefix + mgs.aurora.games.common.components.utils.text.CharacterFriendlyName.LOWER_CASE + char.toUpperCase())) 
                    {
                        Character = Class(library.getDefinition(this.prefix + mgs.aurora.games.common.components.utils.text.CharacterFriendlyName.LOWER_CASE + char.toUpperCase()));
                    }
                    else if (library.hasDefinition(this.prefix + char)) 
                    {
                        Character = Class(library.getDefinition(this.prefix + char));
                    }
                    else 
                    {
                        friendlyName = mgs.aurora.games.common.components.utils.text.CharacterFriendlyName.getFriendlyName(char);
                        if (library.hasDefinition(this.prefix + friendlyName)) 
                        {
                            Character = Class(library.getDefinition(this.prefix + friendlyName));
                        }
                        else if (library.hasDefinition(this.prefix + mgs.aurora.games.common.components.utils.text.CharacterFriendlyName.getLegacyName(char))) 
                        {
                            Character = Class(library.getDefinition(this.prefix + mgs.aurora.games.common.components.utils.text.CharacterFriendlyName.getLegacyName(char)));
                        }
                        else 
                        {
                            Character = Class(library.getDefinition(this.prefix + char.charCodeAt()));
                        }
                    }
                }
                catch (error:Error)
                {
                    mgs.aurora.games.base.BaseClass.trace("Character \"" + char + "\" not found in " + fontResourceContainer + ".", "error", this, 16711680);
                }
                if (Character) 
                {
                    _charImages[char] = Character;
                    tempChar = flash.display.Sprite(new Character());
                    this._charWidth[char] = tempChar.width;
                    this._charHeight[char] = tempChar.height;
                }
                else 
                {
                    _charImages[char] = -1;
                    this._charWidth[char] = 0;
                    this._charHeight[char] = 0;
                }
            }
            if (_charImages[char] == -1) 
            {
                return null;
            }
            return _charImages[char];
        }

        internal function isLowercaseChar(arg1:String):Boolean
        {
            var loc1:*=arg1.toUpperCase();
            return !(loc1 == arg1);
        }

        public function getCharacterImage(arg1:String):flash.display.Sprite
        {
            var loc1:*=null;
            var loc2:*=null;
            if (_charImages[arg1]) 
            {
                if (_charImages[arg1] == -1) 
                {
                    return null;
                }
                loc2 = Class(_charImages[arg1]);
                loc1 = flash.display.Sprite(new loc2());
            }
            else 
            {
                loc2 = this.cacheCharacter(arg1);
                if (!loc2) 
                {
                    return null;
                }
                loc1 = flash.display.Sprite(new loc2());
            }
            return loc1;
        }

        public function getCharacterWidth(arg1:String):int
        {
            var loc1:*=0;
            if (this._charWidth[arg1] != null) 
            {
                loc1 = this._charWidth[arg1];
            }
            return loc1;
        }

        public function getCharacterHeight(arg1:String):int
        {
            var loc1:*=0;
            if (this._charHeight[arg1] != null) 
            {
                loc1 = this._charHeight[arg1];
            }
            return loc1;
        }

        public function get fontResourceContainer():String
        {
            return this._fontResourceContainer;
        }

        internal var _charWidth:flash.utils.Dictionary;

        internal var _charHeight:flash.utils.Dictionary;

        internal var prefix:String;

        internal var _fontResourceContainer:String;
    }
}


//                    class VectorString
package mgs.aurora.games.common.components.ui.components.text.resizable 
{
    import flash.display.*;
    
    public class VectorString extends mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString
    {
        public function VectorString(arg1:mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont, arg2:String="", arg3:int=0, arg4:int=0, arg5:uint=2, arg6:uint=2, arg7:uint=0, arg8:Boolean=false, arg9:int=0, arg10:Number=0, arg11:Boolean=true)
        {
            super(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
            this._totalWidth = 0;
            this._totalHeight = 0;
            return;
        }

        public override function get currentSize():Number
        {
            if (this._direction == mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.DIRECTION_HORIZONTAL) 
            {
                return this._totalWidth;
            }
            return this._totalHeight;
        }

        public override function updateScreen(arg1:String):void
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=null;
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            if (this._text == null) 
            {
                return;
            }
            loc2 = this._text.length;
            loc1 = 0;
            while (loc1 < loc2) 
            {
                loc5 = this._text.charAt(loc1);
                loc6 = this.getChildByName("char" + loc1) as flash.display.Sprite;
                if (!(loc5 == arg1.charAt(loc1)) || !loc6) 
                {
                    if (loc7 = this.getChildByName("char" + loc1) as flash.display.Sprite) 
                    {
                        this.removeChild(loc7);
                    }
                    if (!(loc8 = mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont(_font).getCharacterImage(loc5))) 
                    {
                        loc8 = new flash.display.Sprite();
                    }
                    loc8.name = "char" + loc1;
                    loc6 = loc8;
                    addChildAt(loc8, loc1);
                }
                loc6.x = loc3;
                loc6.y = loc4;
                if (this._direction != mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.DIRECTION_HORIZONTAL) 
                {
                    if (this._direction == mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.DIRECTION_VERTICAL) 
                    {
                        loc4 = loc4 + (this._verticalGap + (this._font as mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont).getCharacterHeight(loc5));
                    }
                }
                else 
                {
                    loc3 = loc3 + (this._horizontalGap + (this._font as mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont).getCharacterWidth(loc5));
                }
                ++loc1;
            }
            if (this._text.length > 0) 
            {
                loc9 = (this._text.length - 1);
                loc10 = this._text.charAt(loc9);
                loc11 = this.getChildByName("char" + loc9) as flash.display.Sprite;
                this._totalWidth = loc11.x + (this._font as mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont).getCharacterWidth(loc10);
                this._totalHeight = loc11.y + (this._font as mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont).getCharacterHeight(loc10);
            }
            loc2 = this.numChildren;
            loc1 = this._text.length;
            while (loc1 < loc2) 
            {
                if ((loc12 = this.getChildByName("char" + loc1) as flash.display.Sprite) != null) 
                {
                    this.removeChild(loc12);
                }
                ++loc1;
            }
            this.updateOffset();
            return;
        }

        protected override function updateOffset():void
        {
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            if (this._direction != mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.DIRECTION_HORIZONTAL) 
            {
                if (this._direction == mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.DIRECTION_VERTICAL) 
                {
                    if (this._verticalAlign != mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_FAR) 
                    {
                        if (this._verticalAlign == mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_CENTER) 
                        {
                            loc4 = 0 - this._totalHeight / 2;
                        }
                    }
                    else 
                    {
                        loc4 = 0 - this._totalHeight;
                    }
                }
            }
            else if (this._horizontalAlign != mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_FAR) 
            {
                if (this._horizontalAlign == mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_CENTER) 
                {
                    loc3 = 0 - this._totalWidth / 2;
                }
            }
            else 
            {
                loc3 = 0 - this._totalWidth;
            }
            if (!(loc3 == 0) || !(loc4 == 0)) 
            {
                loc2 = this._text.length;
                loc1 = 0;
                while (loc1 < loc2) 
                {
                    loc7 = this.getChildByName("char" + loc1) as flash.display.Sprite;
                    loc7.x = loc7.x + loc3;
                    loc7.y = loc7.y + loc4;
                    ++loc1;
                }
            }
            var loc5:*=0;
            var loc6:*=0;
            if (this._direction != mgs.aurora.games.common.components.ui.components.text.resizable.StringDirection.DIRECTION_HORIZONTAL) 
            {
                if (this._horizontalAlign != mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_CENTER) 
                {
                    if (this._horizontalAlign == mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_FAR) 
                    {
                        loc6 = this.width;
                    }
                }
                else 
                {
                    loc6 = this.width / 2;
                }
                loc5 = 0;
            }
            else 
            {
                if (this._verticalAlign != mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_CENTER) 
                {
                    if (this._verticalAlign == mgs.aurora.games.common.components.ui.components.text.resizable.StringAlign.ALIGN_FAR) 
                    {
                        loc5 = this.height;
                    }
                }
                else 
                {
                    loc5 = this.height / 2;
                }
                loc6 = 0;
            }
            loc2 = this._text.length;
            loc1 = 0;
            while (loc1 < loc2) 
            {
                loc8 = this.getChildByName("char" + loc1) as flash.display.Sprite;
                loc8.x = loc8.x - loc6;
                loc8.y = loc8.y - loc5;
                ++loc1;
            }
            return;
        }

        public override function clone():mgs.aurora.games.common.components.ui.components.text.resizable.ResizableString
        {
            return new mgs.aurora.games.common.components.ui.components.text.resizable.VectorString(mgs.aurora.games.common.components.ui.components.text.resizable.VectorFont(font), text, horizontalGap, verticalGap, horizontalAlign, verticalAlign, direction, resizable, maxSize, minScale, _autoResizes);
        }

        internal var _totalWidth:int;

        internal var _totalHeight:int;
    }
}


//                  class ComponentTextField
package mgs.aurora.games.common.components.ui.components.text 
{
    import flash.display.*;
    import flash.text.*;
    
    public class ComponentTextField extends Object implements mgs.aurora.games.common.components.ui.components.text.IComponentText
    {
        public function ComponentTextField()
        {
            this._textField = new flash.text.TextField();
            super();
            this._textField.autoSize = flash.text.TextFieldAutoSize.CENTER;
            var loc1:*=this._textField.getTextFormat();
            this._textField.setTextFormat(loc1);
            this._textField.defaultTextFormat = loc1;
            return;
        }

        public function get aliasType():String
        {
            return this._textField.antiAliasType;
        }

        public function set y(arg1:Number):void
        {
            this._textField.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this._textField.y;
        }

        public function clear():void
        {
            this._textField.text = "";
            return;
        }

        public function set text(arg1:String):void
        {
            this._textField.htmlText = arg1;
            this.format = this._textFormat;
            return;
        }

        public function get text():String
        {
            return this._textField.text;
        }

        public function appendText(arg1:String):void
        {
            this._textField.appendText(arg1);
            this.format = this._textFormat;
            return;
        }

        public function set format(arg1:flash.text.TextFormat):void
        {
            this._textFormat = arg1;
            this._textField.setTextFormat(arg1);
            this._textField.defaultTextFormat = arg1;
            return;
        }

        public function get format():flash.text.TextFormat
        {
            return this._textField.getTextFormat();
        }

        public function set selectable(arg1:Boolean):void
        {
            this._textField.selectable = arg1;
            return;
        }

        public function get selectable():Boolean
        {
            return this._textField.selectable;
        }

        public function set autoSize(arg1:String):void
        {
            var loc1:*=arg1.toLocaleUpperCase;
            switch (loc1) 
            {
                case "LEFT":
                {
                    this._textField.autoSize = flash.text.TextFieldAutoSize.LEFT;
                    break;
                }
                case "RIGHT":
                {
                    this._textField.autoSize = flash.text.TextFieldAutoSize.RIGHT;
                    break;
                }
                case "CENTER":
                {
                    this._textField.autoSize = flash.text.TextFieldAutoSize.CENTER;
                    break;
                }
                case "NONE":
                {
                    this._textField.autoSize = flash.text.TextFieldAutoSize.NONE;
                    break;
                }
                default:
                {
                    this._textField.autoSize = flash.text.TextFieldAutoSize.NONE;
                    break;
                }
            }
            return;
        }

        public function get autoSize():String
        {
            return this._textField.autoSize;
        }

        public function set border(arg1:Boolean):void
        {
            this._textField.border = arg1;
            return;
        }

        public function get border():Boolean
        {
            return this._textField.border;
        }

        public function set borderColor(arg1:uint):void
        {
            this._textField.borderColor = arg1;
            return;
        }

        public function get borderColor():uint
        {
            return this._textField.borderColor;
        }

        public function set background(arg1:Boolean):void
        {
            this._textField.background = arg1;
            return;
        }

        public function get background():Boolean
        {
            return this._textField.background;
        }

        public function set backgroundColor(arg1:uint):void
        {
            this._textField.backgroundColor = arg1;
            return;
        }

        public function get backgroundColor():uint
        {
            return this._textField.backgroundColor;
        }

        public function set width(arg1:Number):void
        {
            this._textField.width = arg1;
            return;
        }

        public function get width():Number
        {
            return this._textField.width;
        }

        public function set height(arg1:Number):void
        {
            this._textField.height = arg1;
            return;
        }

        public function get height():Number
        {
            return this._textField.height;
        }

        public function set name(arg1:String):void
        {
            this._name = arg1;
            this._textField.name = arg1;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function show():void
        {
            this._textField.visible = true;
            return;
        }

        public function hide():void
        {
            this._textField.visible = false;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._textField;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this._textField);
            return;
        }

        public function removeFromContainer():void
        {
            this._textField.parent.removeChild(this._textField);
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return null;
        }

        public function set x(arg1:Number):void
        {
            this._textField.x = arg1 - this._textField.width / 2;
            return;
        }

        public function get x():Number
        {
            return this._textField.x + this._textField.width / 2;
        }

        public function set aliasType(arg1:String):void
        {
            this._textField.antiAliasType = arg1;
            return;
        }

        internal var _textField:flash.text.TextField;

        internal var _name:String;

        internal var _textFormat:flash.text.TextFormat;
    }
}


//                  class ComponentTextSprite
package mgs.aurora.games.common.components.ui.components.text 
{
    import flash.display.*;
    import flash.text.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public class ComponentTextSprite extends Object implements mgs.aurora.games.common.components.ui.components.text.IComponentText
    {
        public function ComponentTextSprite(arg1:mgs.aurora.games.common.components.utils.CustomFont, arg2:String="left", arg3:int=0)
        {
            super();
            this._textSprite = new mgs.aurora.games.common.components.utils.CustomFontLabelExt(arg1, "", arg2, 0, arg3);
            return;
        }

        public function set aliasType(arg1:String):void
        {
            return;
        }

        public function get aliasType():String
        {
            return "";
        }

        public function set height(arg1:Number):void
        {
            return;
        }

        public function get height():Number
        {
            var loc1:*=NaN;
            return loc1;
        }

        internal function displayString():void
        {
            this._textSprite.text = this._text;
            return;
        }

        public function clear():void
        {
            this._text = "";
            this.displayString();
            return;
        }

        public function set text(arg1:String):void
        {
            this._text = arg1;
            this.displayString();
            return;
        }

        public function get text():String
        {
            return this._text;
        }

        public function appendText(arg1:String):void
        {
            this._text = this._text + arg1;
            this.displayString();
            return;
        }

        public function set autoSize(arg1:String):void
        {
            var loc1:*=arg1.toLocaleUpperCase;
            switch (loc1) 
            {
                case "LEFT":
                {
                    this._textSprite.align = mgs.aurora.games.common.components.utils.CustomFontLabel.LEFT_ALIGN;
                    break;
                }
                case "RIGHT":
                {
                    this._textSprite.align = mgs.aurora.games.common.components.utils.CustomFontLabel.RIGHT_ALIGN;
                    break;
                }
                case "CENTER":
                {
                    this._textSprite.align = mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN;
                    break;
                }
                default:
                {
                    this._textSprite.align = mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN;
                    break;
                }
            }
            return;
        }

        public function get autoSize():String
        {
            return this._textSprite.align;
        }

        public function set name(arg1:String):void
        {
            this._name = arg1;
            this._textSprite.name = arg1;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function show():void
        {
            this._textSprite.visible = true;
            return;
        }

        public function hide():void
        {
            this._textSprite.visible = false;
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this._textSprite;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this._textSprite);
            return;
        }

        public function removeFromContainer():void
        {
            if (this._textSprite.parent != null) 
            {
                this._textSprite.parent.removeChild(this._textSprite);
            }
            return;
        }

        public function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return null;
        }

        public function set x(arg1:Number):void
        {
            this._textSprite.x = arg1;
            return;
        }

        public function get x():Number
        {
            return this._textSprite.x;
        }

        public function set y(arg1:Number):void
        {
            this._textSprite.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this._textSprite.y;
        }

        public function set format(arg1:flash.text.TextFormat):void
        {
            return;
        }

        public function get format():flash.text.TextFormat
        {
            var loc1:*=null;
            return loc1;
        }

        public function set selectable(arg1:Boolean):void
        {
            return;
        }

        public function get selectable():Boolean
        {
            var loc1:*=false;
            return loc1;
        }

        public function set border(arg1:Boolean):void
        {
            return;
        }

        public function get border():Boolean
        {
            var loc1:*=false;
            return loc1;
        }

        public function set borderColor(arg1:uint):void
        {
            return;
        }

        public function get borderColor():uint
        {
            var loc1:*=0;
            return loc1;
        }

        public function set background(arg1:Boolean):void
        {
            return;
        }

        public function get background():Boolean
        {
            var loc1:*=false;
            return loc1;
        }

        public function set backgroundColor(arg1:uint):void
        {
            return;
        }

        public function get backgroundColor():uint
        {
            var loc1:*=0;
            return loc1;
        }

        public function set width(arg1:Number):void
        {
            return;
        }

        public function get width():Number
        {
            var loc1:*=NaN;
            return loc1;
        }

        internal var _textSprite:mgs.aurora.games.common.components.utils.CustomFontLabelExt;

        internal var _font:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _name:String;

        internal var _text:String;
    }
}


//                  class FontContainer
package mgs.aurora.games.common.components.ui.components.text 
{
    import mgs.aurora.games.common.components.utils.*;
    
    public class FontContainer extends Object
    {
        public function FontContainer(arg1:mgs.aurora.games.common.components.utils.CustomFont, arg2:int=0)
        {
            super();
            this._maxWidth = arg2;
            this._customFont = arg1;
            return;
        }

        public function get customFont():mgs.aurora.games.common.components.utils.CustomFont
        {
            return this._customFont;
        }

        public function get maxWidth():int
        {
            return this._maxWidth;
        }

        internal var _customFont:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _maxWidth:int;
    }
}


//                  class IComponentText
package mgs.aurora.games.common.components.ui.components.text 
{
    import flash.text.*;
    import mgs.aurora.games.common.components.ui.components.*;
    
    public interface IComponentText extends mgs.aurora.games.common.components.ui.components.IComponent
    {
        function clear():void;

        function appendText(arg1:String):void;

        function set text(arg1:String):void;

        function get text():String;

        function set format(arg1:flash.text.TextFormat):void;

        function get format():flash.text.TextFormat;

        function set selectable(arg1:Boolean):void;

        function get selectable():Boolean;

        function set autoSize(arg1:String):void;

        function get autoSize():String;

        function set border(arg1:Boolean):void;

        function get border():Boolean;

        function set borderColor(arg1:uint):void;

        function get borderColor():uint;

        function set background(arg1:Boolean):void;

        function get background():Boolean;

        function set backgroundColor(arg1:uint):void;

        function get backgroundColor():uint;

        function set width(arg1:Number):void;

        function get width():Number;

        function set height(arg1:Number):void;

        function get height():Number;

        function set aliasType(arg1:String):void;

        function get aliasType():String;
    }
}


//                  class TextFieldChangedEvent
package mgs.aurora.games.common.components.ui.components.text 
{
    import flash.events.*;
    
    public class TextFieldChangedEvent extends flash.events.Event
    {
        public function TextFieldChangedEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.games.common.components.ui.components.text.TextFieldChangedEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("TextFieldChangedEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="TextFieldChangedEvent";

        public static const TEXT_CHANGED:String=NAME + "/type/text_changed";

        public static const RESIZED:String=NAME + "/type/resized";

        public static const OVERFLOWED:String=NAME + "/type/overflowed";

        public static const UNDERFLOWED:String=NAME + "/type/underflowed";
    }
}


//                  class TextFieldLifecycleEvent
package mgs.aurora.games.common.components.ui.components.text 
{
    import flash.events.*;
    
    public class TextFieldLifecycleEvent extends flash.events.Event
    {
        public function TextFieldLifecycleEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.games.common.components.ui.components.text.TextFieldLifecycleEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("TextFieldLifecycleEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="TextFieldLifecycleEvent";

        public static const DISPOSED:String=NAME + "/type/disposed";
    }
}


//                class IComponent
package mgs.aurora.games.common.components.ui.components 
{
    import flash.display.*;
    
    public interface IComponent
    {
        function set name(arg1:String):void;

        function get name():String;

        function show():void;

        function hide():void;

        function get displayObject():flash.display.DisplayObject;

        function addTo(arg1:flash.display.DisplayObjectContainer):void;

        function removeFromContainer():void;

        function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject;

        function set x(arg1:Number):void;

        function get x():Number;

        function set y(arg1:Number):void;

        function get y():Number;
    }
}


//              package containers
//                package console
//                  class ActivationRules
package mgs.aurora.games.common.components.ui.containers.console 
{
    import __AS3__.vec.*;
    
    public class ActivationRules extends Object
    {
        public function ActivationRules(arg1:Number=0, arg2:Number=0, arg3:Number=0)
        {
            super();
            this._disabledButtons = new Vector.<String>();
            this._enabledButtons = new Vector.<String>();
            this._hiddenButtons = new Vector.<String>();
            this._maxBet = arg1;
            this._currentBet = arg2;
            this._balance = arg3;
            return;
        }

        public function checkRules(arg1:String, arg2:String):void
        {
            var loc1:*=arg2;
            switch (loc1) 
            {
                case "AlwaysEnabled":
                {
                    this._enabledButtons.push(arg1);
                    break;
                }
                case "AlwaysDisabled":
                {
                    this._disabledButtons.push(arg1);
                    break;
                }
                case "BalanceGreaterThanBet":
                {
                    if (this._balance >= this._currentBet) 
                    {
                        this._enabledButtons.push(arg1);
                    }
                    else 
                    {
                        this._disabledButtons.push(arg1);
                    }
                    break;
                }
                case "BalanceGreaterThanMaxBet":
                {
                    if (this._balance >= this._maxBet) 
                    {
                        this._enabledButtons.push(arg1);
                    }
                    else 
                    {
                        this._disabledButtons.push(arg1);
                    }
                    break;
                }
                case "AlwaysHidden":
                {
                    this._hiddenButtons.push(arg1);
                    break;
                }
            }
            return;
        }

        public function returnEnabledButtonList():String
        {
            var loc1:*=new String();
            var loc2:*=0;
            while (loc2 < this._enabledButtons.length) 
            {
                if (loc2 < (this._enabledButtons.length - 1)) 
                {
                    loc1 = loc1 + (this._enabledButtons[loc2] + ",");
                }
                else 
                {
                    loc1 = loc1 + this._enabledButtons[loc2];
                }
                ++loc2;
            }
            return loc1;
        }

        public function returnDisabledButtonList():String
        {
            var loc1:*=new String();
            var loc2:*=0;
            while (loc2 < this._disabledButtons.length) 
            {
                if (loc2 < (this._disabledButtons.length - 1)) 
                {
                    loc1 = loc1 + (this._disabledButtons[loc2] + ",");
                }
                else 
                {
                    loc1 = loc1 + this._disabledButtons[loc2];
                }
                ++loc2;
            }
            return loc1;
        }

        public function returnHiddenButtonList():String
        {
            var loc1:*=new String();
            var loc2:*=0;
            while (loc2 < this._hiddenButtons.length) 
            {
                if (loc2 < (this._hiddenButtons.length - 1)) 
                {
                    loc1 = loc1 + (this._hiddenButtons[loc2] + ",");
                }
                else 
                {
                    loc1 = loc1 + this._hiddenButtons[loc2];
                }
                ++loc2;
            }
            return loc1;
        }

        public var _enabledButtons:__AS3__.vec.Vector.<String>;

        public var _disabledButtons:__AS3__.vec.Vector.<String>;

        public var _hiddenButtons:__AS3__.vec.Vector.<String>;

        internal var _maxBet:Number;

        internal var _currentBet:Number;

        internal var _balance:Number;
    }
}


//                  class Console
package mgs.aurora.games.common.components.ui.containers.console 
{
    import flash.display.*;
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.api.ui.controls.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.ui.assetPooling.*;
    import mgs.aurora.games.common.components.ui.components.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    import mgs.aurora.games.common.components.ui.events.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public class Console extends flash.display.Sprite implements mgs.aurora.games.common.components.ui.containers.console.IConsole
    {
        public function Console(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider, arg3:mgs.aurora.api.interfaces.controls.IControlManager)
        {
            this._consoleButtons = new flash.utils.Dictionary();
            this._consoleSprites = new flash.utils.Dictionary();
            this._consoleTexts = new flash.utils.Dictionary();
            this._consoleUCSs = new flash.utils.Dictionary();
            this._controls = new flash.utils.Dictionary();
            super();
            this._consoleXML = arg1;
            this._assetPool = arg2;
            this._buttons = arg3;
            this.name = String(this._consoleXML.@id);
            return;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this);
            return;
        }

        public function removeFromContainer():void
        {
            this.parent.removeChild(this);
            return;
        }

        public override function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return super.addChild(arg1);
        }

        public function get texts():flash.utils.Dictionary
        {
            return this._consoleTexts;
        }

        public function get consoleXML():XML
        {
            return this._consoleXML;
        }

        internal function onMouseEventRollOut(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            this.sendConsoleEvent(arg1);
            return;
        }

        public function set consoleXML(arg1:XML):void
        {
            this._consoleXML = arg1;
            return;
        }

        public function text(arg1:String):mgs.aurora.games.common.components.ui.components.text.IComponentText
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.IComponentText(this._consoleTexts[arg1]);
            return loc1;
        }

        public function lockControls():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._controls;
            for (loc1 in loc5) 
            {
                loc3 = this._controls[loc1] as mgs.aurora.api.ui.controls.SimpleFrameButton;
                loc3.locked = true;
            }
            loc4 = 0;
            loc5 = this._consoleUCSs;
            for each (loc2 in loc5) 
            {
                loc2.lockControls();
            }
            return;
        }

        public function unLockControls():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._controls;
            for (loc1 in loc5) 
            {
                loc3 = this._controls[loc1] as mgs.aurora.api.ui.controls.SimpleFrameButton;
                loc3.locked = false;
            }
            loc4 = 0;
            loc5 = this._consoleUCSs;
            for each (loc2 in loc5) 
            {
                loc2.unLockControls();
            }
            return;
        }

        public function setActive():void
        {
            this.show();
            return;
        }

        public function getButton(arg1:String):mgs.aurora.api.ui.controls.SimpleFrameButton
        {
            return this._controls[arg1];
        }

        internal function onMouseEventRollOver(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            this.sendConsoleEvent(arg1);
            return;
        }

        public function wireButtons():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            this._controls = new flash.utils.Dictionary();
            this._buttons.createGroups("consoleGroup");
            var loc1:*=0;
            this._csvButttonList = new String("");
            var loc9:*=0;
            var loc10:*=this._consoleXML.buttons.button;
            for each (loc2 in loc10) 
            {
                loc4 = loc2.@id;
                (loc6 = (loc5 = this._consoleButtons[loc4]).displayObject as flash.display.MovieClip).mouseChildren = false;
                (loc7 = new mgs.aurora.api.ui.controls.SimpleFrameButton(loc5.name, loc6, mgs.aurora.games.common.components.utils.DataTypeConversion.csvToVectorUint(loc5.shortCut))).addEventListener(mgs.aurora.api.events.ApiMouseEvent.CLICK, this.onMouseEventClick);
                loc7.addEventListener(mgs.aurora.api.events.ApiMouseEvent.ROLL_OVER, this.onMouseEventRollOver);
                loc7.addEventListener(mgs.aurora.api.events.ApiMouseEvent.ROLL_OUT, this.onMouseEventRollOut);
                loc7.addEventListener(mgs.aurora.api.events.ApiKeyboardEvent.KEY_UP, this.onKeyUpEvent);
                if (this._csvButttonList != "") 
                {
                    this._csvButttonList = this._csvButttonList + ("," + loc5.name);
                }
                else 
                {
                    this._csvButttonList = loc5.name;
                }
                if (this._consoleXML.buttons.button[loc1].@activationRule != "") 
                {
                    loc5.activationRule = this._consoleXML.buttons.button[loc1].@activationRule;
                }
                else 
                {
                    loc5.activationRule = "AlwaysEnabled";
                }
                this._buttons.addControl(loc7, this, "consoleGroup");
                this._controls[loc7.id] = loc7;
                this._buttons.enableControls(loc5.name);
                if ((loc8 = loc6.getChildByName("HitArea") as flash.display.Sprite) != null) 
                {
                    loc8.mouseChildren = false;
                    loc8.mouseEnabled = false;
                    loc6.hitArea = loc8;
                }
                ++loc1;
            }
            loc9 = 0;
            loc10 = this._consoleUCSs;
            for each (loc3 in loc10) 
            {
                loc3.wireButtons();
                loc3.addEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_MOUSE_EVENT, this.onUCSMouseEvent);
                loc3.addEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_KEYBOARD_EVENT, this.onUCSKeyboardEvent);
                loc3.addEventListener(mgs.aurora.api.events.ApiMouseEvent.CLICK, this.onMouseEventClick);
                loc3.setup();
            }
            return;
        }

        public function unWireButtons():void
        {
            var btn:mgs.aurora.games.common.components.ui.components.button.IComponentButton;
            var ucs:mgs.aurora.games.common.components.ui.containers.ucs.IUCS;
            var iBtn:mgs.aurora.api.interfaces.controls.IControl;

            var loc1:*;
            btn = null;
            ucs = null;
            iBtn = null;
            var loc2:*=0;
            var loc3:*=this._consoleButtons;
            for each (btn in loc3) 
            {
            };
            loc2 = 0;
            loc3 = this._consoleUCSs;
            for each (ucs in loc3) 
            {
                ucs.removeEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_KEYBOARD_EVENT, this.onUCSKeyboardEvent);
                ucs.removeEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_MOUSE_EVENT, this.onUCSMouseEvent);
                ucs.removeEventListener(mgs.aurora.api.events.ApiMouseEvent.CLICK, this.onMouseEventClick);
                ucs.unWireButtons();
            }
            this._controls = null;
            return;
        }

        public function get buttons():mgs.aurora.api.interfaces.controls.IControlManager
        {
            return this._buttons;
        }

        public function button(arg1:String):mgs.aurora.games.common.components.ui.components.button.IComponentButton
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.button.IComponentButton(this._consoleButtons[arg1]);
            return loc1;
        }

        public function get sprites():flash.utils.Dictionary
        {
            return this._consoleSprites;
        }

        public function sprite(arg1:String):mgs.aurora.games.common.components.ui.components.IComponent
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.IComponent(this._consoleSprites[arg1]);
            return loc1;
        }

        public function get allUCSs():flash.utils.Dictionary
        {
            return this._consoleUCSs;
        }

        public function ucs(arg1:String):mgs.aurora.games.common.components.ui.containers.ucs.IUCS
        {
            var loc1:*=mgs.aurora.games.common.components.ui.containers.ucs.IUCS(this._consoleUCSs[arg1]);
            return loc1;
        }

        internal function onUCSMouseEvent(arg1:*):void
        {
            dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        internal function onUCSKeyboardEvent(arg1:*):void
        {
            dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        internal function onMouseEventClick(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            flash.display.MovieClip(this.getButton(arg1.id).displayObject).gotoAndStop("Active");
            this.sendConsoleEvent(arg1);
            return;
        }

        internal function onKeyUpEvent(arg1:mgs.aurora.api.events.ApiKeyboardEvent):void
        {
            var loc1:*=flash.display.MovieClip(this.getButton(arg1.id).displayObject);
            if (mgs.aurora.api.ui.controls.SimpleFrameButton(this.getButton(arg1.id)).enabled && mgs.aurora.api.ui.controls.SimpleFrameButton(this.getButton(arg1.id)).visible) 
            {
                this.sendConsoleEvent(arg1);
            }
            return;
        }

        internal function sendConsoleEvent(arg1:*):void
        {
            this.dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        public function show():void
        {
            this.showSprites();
            this.showButtons();
            this.showTexts();
            this.showUCSs();
            return;
        }

        public function hide():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=this._consoleButtons;
            for each (loc1 in loc6) 
            {
                this._buttons.hideControls(loc1.event);
                loc1.removeFromContainer();
            }
            loc5 = 0;
            loc6 = this._consoleSprites;
            for each (loc2 in loc6) 
            {
                loc2.removeFromContainer();
            }
            loc5 = 0;
            loc6 = this._consoleTexts;
            for each (loc3 in loc6) 
            {
                loc3.removeFromContainer();
            }
            loc5 = 0;
            loc6 = this._consoleUCSs;
            for each (loc4 in loc6) 
            {
                loc4.removeFromContainer();
            }
            return;
        }

        internal function showButtons():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            this._consoleButtons = new flash.utils.Dictionary(true);
            var loc4:*=0;
            var loc5:*=this._consoleXML.buttons.button;
            for each (loc1 in loc5) 
            {
                loc2 = loc1.@id;
                this._consoleButtons[loc2] = this._assetPool.getButton(loc2);
                if (this._consoleButtons[loc2] != null) 
                {
                    loc3 = this._consoleButtons[loc2];
                    loc3.x = loc1.@x;
                    loc3.y = loc1.@y;
                    loc3.shortCut = loc1.@shortcut;
                    loc3.event = loc1.@event;
                    loc3.addTo(this);
                    continue;
                }
                mgs.aurora.games.base.BaseClass.trace("Console Button Object " + loc1.@id + " not found", "GCL", this, 16711680);
            }
            return;
        }

        internal function showSprites():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._consoleXML.sprites.sprite;
            for each (loc1 in loc5) 
            {
                loc2 = loc1.@id;
                this._consoleSprites[loc2] = this._assetPool.getSprite(loc2);
                if (this._consoleSprites[loc2] != null) 
                {
                    loc3 = mgs.aurora.games.common.components.ui.components.IComponent(this._consoleSprites[loc2]);
                    loc3.x = loc1.@x;
                    loc3.y = loc1.@y;
                    loc3.addTo(this);
                    continue;
                }
                mgs.aurora.games.base.BaseClass.trace("Console Sprite Object " + loc1.@id + " not found", "GCL", this, 16711680);
            }
            return;
        }

        internal function showTexts():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=this._consoleXML.textLayout.text;
            for each (loc1 in loc7) 
            {
                loc2 = loc1.@id;
                loc3 = loc1.@graphicFont;
                if (loc3 == "") 
                {
                    this._consoleTexts[loc2] = this._assetPool.getText(loc2);
                }
                else 
                {
                    this._consoleTexts[loc2] = this._assetPool.getText(loc3);
                    this._consoleTexts[loc2].name = loc2;
                }
                if (this._consoleTexts[loc2] != null) 
                {
                    if ((loc4 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2)) == null) 
                    {
                        loc4 = mgs.aurora.games.common.components.ui.components.text.IComponentText(this._consoleTexts[loc2]);
                    }
                    if ((loc5 = this._assetPool.getTextFormat(loc1.@textFormat)) != null) 
                    {
                        loc4.format = loc5;
                    }
                    loc4.x = loc1.@x;
                    loc4.y = loc1.@y;
                    if (loc1.@value != "") 
                    {
                        loc4.text = loc1.@value.toString();
                    }
                    loc4.selectable = false;
                    loc4.addTo(this);
                    continue;
                }
                mgs.aurora.games.base.BaseClass.trace("Console text Object [" + loc1.@id + "] not found", "GCL", this, 16711680);
            }
            return;
        }

        internal function showUCSs():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._consoleXML.ucs;
            for each (loc1 in loc5) 
            {
                loc2 = loc1.@id;
                this._consoleUCSs[loc2] = this._assetPool.getUCS(loc2);
                if (this._consoleUCSs[loc2] != null) 
                {
                    loc3 = mgs.aurora.games.common.components.ui.containers.ucs.IUCS(this._consoleUCSs[loc2]);
                    loc3.show();
                    loc3.x = loc1.@x;
                    loc3.y = loc1.@y;
                    loc3.addTo(this);
                    continue;
                }
                mgs.aurora.games.base.BaseClass.trace("Console UCS Object " + loc1.@id + " not found", "GCL", this, 16711680);
            }
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this;
        }

        public override function get x():Number
        {
            return super.x;
        }

        public override function set x(arg1:Number):void
        {
            super.x = arg1;
            return;
        }

        public override function get y():Number
        {
            return super.y;
        }

        public override function set y(arg1:Number):void
        {
            super.y = arg1;
            return;
        }

        internal var _consoleXML:XML;

        internal var _assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;

        internal var _consoleButtons:flash.utils.Dictionary;

        internal var _consoleSprites:flash.utils.Dictionary;

        internal var _consoleTexts:flash.utils.Dictionary;

        internal var _buttons:mgs.aurora.api.interfaces.controls.IControlManager;

        internal var _buttonsActRules:flash.utils.Dictionary;

        internal var _csvButttonList:String;

        internal var _controls:flash.utils.Dictionary;

        internal var _consoleUCSs:flash.utils.Dictionary;
    }
}


//                  class ConsoleController
package mgs.aurora.games.common.components.ui.containers.console 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    import mgs.aurora.games.common.components.ui.events.*;
    
    public class ConsoleController extends flash.events.EventDispatcher
    {
        public function ConsoleController(arg1:flash.display.MovieClip)
        {
            this._consoles = new flash.utils.Dictionary();
            super();
            this._art = arg1;
            return;
        }

        public function setConsoles(arg1:flash.utils.Dictionary):void
        {
            this._consoles = arg1;
            return;
        }

        public function getConsole(arg1:String):mgs.aurora.games.common.components.ui.containers.console.IConsole
        {
            return this._consoles[arg1];
        }

        public function setActiveConsole(arg1:String):void
        {
            this._currentConsole = this._consoles[arg1];
            this._currentConsole.setActive();
            this._currentConsole.addTo(this._art);
            this._currentConsole.wireButtons();
            this._currentConsole.addEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, this.onConsoleButtonEvent);
            return;
        }

        internal function onConsoleButtonEvent(arg1:*):void
        {
            this.dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_CONTROLER_BUTTON, arg1.event));
            return;
        }

        public function getActiveConsole():mgs.aurora.games.common.components.ui.containers.console.IConsole
        {
            return this._currentConsole;
        }

        public function removeActiveConsole():void
        {
            if (this._currentConsole != null) 
            {
                this._currentConsole.unWireButtons();
                this._currentConsole.removeEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, this.onConsoleButtonEvent);
                this._currentConsole.hide();
                this._currentConsole.removeFromContainer();
                this._currentConsole = null;
            }
            return;
        }

        public function switchConsole(arg1:String):void
        {
            this.removeActiveConsole();
            this.setActiveConsole(arg1);
            return;
        }

        public function enableButtons(arg1:String):void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=[];
            var loc2:*=arg1.split(",");
            var loc3:*=0;
            while (loc3 < loc2.length) 
            {
                if (loc2[loc3] && !(this.getActiveConsole().getButton(loc2[loc3]) == null)) 
                {
                    if (this.getActiveConsole().getButton(loc2[loc3]).visible) 
                    {
                        loc1.push(loc2[loc3]);
                        if ((loc5 = (loc4 = this.getActiveConsole().getButton(loc2[loc3]).displayObject as flash.display.MovieClip).getChildByName("HitArea") as flash.display.Sprite) != null) 
                        {
                            loc5.mouseChildren = false;
                            loc5.mouseEnabled = false;
                            loc4.hitArea = loc5;
                        }
                    }
                }
                ++loc3;
            }
            this._currentConsole.buttons.enableControls(loc1.join(","));
            return;
        }

        public function enableButtonsUAR(arg1:String, arg2:Number=0, arg3:Number=0, arg4:Number=0):void
        {
            var loc5:*=null;
            var loc1:*=new Array();
            loc1 = arg1.split(",");
            var loc2:*=new mgs.aurora.games.common.components.ui.containers.console.ActivationRules(arg2, arg3, arg4);
            var loc3:*=0;
            while (loc3 < loc1.length) 
            {
                loc5 = this._currentConsole.button(loc1[loc3]);
                loc2.checkRules(loc1[loc3], loc5.activationRule);
                ++loc3;
            }
            var loc4:*;
            if ((loc4 = new String(loc2.returnEnabledButtonList())) != "") 
            {
                this.enableButtons(loc4);
            }
            if ((loc4 = loc2.returnDisabledButtonList()) != "") 
            {
                this.disableButtons(loc4);
            }
            if ((loc4 = loc2.returnHiddenButtonList()) != "") 
            {
                this.hideButtons(loc4);
            }
            loc4 = null;
            loc2 = null;
            loc5 = null;
            loc1 = null;
            return;
        }

        public function disableButtons(arg1:String):void
        {
            this._currentConsole.buttons.disableControls(arg1);
            return;
        }

        public function enableAllButtons():void
        {
            var loc1:*=null;
            this._currentConsole.buttons.enableAllControls();
            var loc2:*=0;
            var loc3:*=this._currentConsole.allUCSs;
            for each (loc1 in loc3) 
            {
                loc1.enable();
            }
            return;
        }

        public function disableAllButtons():void
        {
            this._currentConsole.buttons.disableAllControls();
            return;
        }

        public function hideButtons(arg1:String):void
        {
            var loc3:*=null;
            var loc1:*=arg1.split(",");
            var loc2:*=0;
            while (loc2 < loc1.length) 
            {
                if (loc1[loc2] && !(this.getActiveConsole().getButton(loc1[loc2]) == null)) 
                {
                    if ((loc3 = this.getActiveConsole().getButton(loc1[loc2]).displayObject as flash.display.MovieClip).hitArea != null) 
                    {
                        loc3.hitArea = new flash.display.Sprite();
                    }
                }
                ++loc2;
            }
            this._currentConsole.buttons.hideControls(arg1);
            return;
        }

        public function hideAllButtons():void
        {
            this._currentConsole.buttons.hideAllControls();
            return;
        }

        public function showButtons(arg1:String):void
        {
            this._currentConsole.buttons.showControls(arg1);
            return;
        }

        public function showAllButtons():void
        {
            this._currentConsole.buttons.showAllControls();
            return;
        }

        public function consoleText(arg1:String):mgs.aurora.games.common.components.ui.components.text.IComponentText
        {
            return this._currentConsole.text(arg1);
        }

        public function dispose():void
        {
            this.removeActiveConsole();
            this._consoleXML = null;
            this._consoles = null;
            this._currentConsole = null;
            this._art = null;
            this._buttons = null;
            return;
        }

        internal var _consoleXML:XML;

        internal var _consoles:flash.utils.Dictionary;

        internal var _currentConsole:mgs.aurora.games.common.components.ui.containers.console.IConsole;

        internal var _art:flash.display.MovieClip;

        internal var _buttons:mgs.aurora.api.interfaces.controls.IControlManager;
    }
}


//                  class IConsole
package mgs.aurora.games.common.components.ui.containers.console 
{
    import flash.utils.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.api.ui.controls.*;
    import mgs.aurora.games.common.components.ui.components.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    
    public interface IConsole extends mgs.aurora.games.common.components.ui.components.IComponent
    {
        function setActive():void;

        function wireButtons():void;

        function unWireButtons():void;

        function get buttons():mgs.aurora.api.interfaces.controls.IControlManager;

        function button(arg1:String):mgs.aurora.games.common.components.ui.components.button.IComponentButton;

        function get allUCSs():flash.utils.Dictionary;

        function ucs(arg1:String):mgs.aurora.games.common.components.ui.containers.ucs.IUCS;

        function get texts():flash.utils.Dictionary;

        function text(arg1:String):mgs.aurora.games.common.components.ui.components.text.IComponentText;

        function get sprites():flash.utils.Dictionary;

        function sprite(arg1:String):mgs.aurora.games.common.components.ui.components.IComponent;

        function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void;

        function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void;

        function lockControls():void;

        function unLockControls():void;

        function getButton(arg1:String):mgs.aurora.api.ui.controls.SimpleFrameButton;
    }
}


//                package ucs
//                  class IUCS
package mgs.aurora.games.common.components.ui.containers.ucs 
{
    import mgs.aurora.games.common.components.ui.components.*;
    
    public interface IUCS extends mgs.aurora.games.common.components.ui.components.IComponent
    {
        function setup():void;

        function changeDisplay(arg1:String):void;

        function wireButtons():void;

        function unWireButtons():void;

        function enable():void;

        function hideFixedValue():void;

        function disable():void;

        function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void;

        function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void;

        function lockControls():void;

        function unLockControls():void;
    }
}


//                  class IUCSModel
package mgs.aurora.games.common.components.ui.containers.ucs 
{
    public interface IUCSModel
    {
        function set ucsIsEnabled(arg1:Boolean):void;

        function get ucsIsEnabled():Boolean;

        function set chipRange(arg1:Array):void;

        function get chipRange():Array;

        function set defaultChipSize(arg1:Number):void;

        function get defaultChipSize():Number;

        function set chipSize(arg1:Number):void;

        function get chipSize():Number;

        function set pointer(arg1:Number):void;

        function get pointer():Number;

        function get displayValue():String;

        function set displayValue(arg1:String):void;
    }
}


//                  class UCS
package mgs.aurora.games.common.components.ui.containers.ucs 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.controls.*;
    import mgs.aurora.api.ui.controls.*;
    import mgs.aurora.games.common.components.ui.assetPooling.*;
    import mgs.aurora.games.common.components.ui.components.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.ui.events.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    
    public class UCS extends flash.display.Sprite implements mgs.aurora.games.common.components.ui.containers.ucs.IUCS
    {
        public function UCS(arg1:XML, arg2:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider, arg3:mgs.aurora.api.interfaces.controls.IControlManager, arg4:mgs.aurora.games.common.components.ui.containers.ucs.IUCSModel)
        {
            this._ucsSprites = new flash.utils.Dictionary();
            this._ucsButtons = new flash.utils.Dictionary();
            this._ucsTexts = new flash.utils.Dictionary();
            super();
            this._ucsXML = arg1;
            this.setupModelFromXML();
            this._spritesContainer = new flash.display.Sprite();
            this._spritesContainer.name = "SpritesContainer";
            this._buttonsContainer = new flash.display.Sprite();
            this._buttonsContainer.name = "ButtonsContainer";
            this._sizesContainer = new flash.display.Sprite();
            this._sizesContainer.name = "SizesContainer";
            this.addChild(this._spritesContainer);
            this.addChild(this._buttonsContainer);
            this.addChild(this._sizesContainer);
            this._ucsFontFallBack.addTo(this._sizesContainer);
            this._ucsFontFallBack.x = int(this._ucsXML.@ucsFontFallBackX);
            this._ucsFontFallBack.y = int(this._ucsXML.@ucsFontFallBackY);
            this.name = this._ucsXML.@id;
            this._buttons = arg3;
            this._assetPool = arg2;
            this._ucsModel = arg4;
            this._controls = new Vector.<mgs.aurora.api.ui.controls.SimpleFrameButton>();
            return;
        }

        public function unWireButtons():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=this._ucsButtons;
            for each (loc1 in loc4) 
            {
            };
            this._controls = null;
            return;
        }

        internal function onMouseEventClick(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            flash.display.MovieClip(mgs.aurora.games.common.components.ui.components.button.IComponentButton(this._ucsButtons[arg1.id]).displayObject).gotoAndStop("Active");
            this.doButtonAction(arg1.id);
            this.dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        internal function onKeyUpEvent(arg1:mgs.aurora.api.events.ApiKeyboardEvent):void
        {
            this.doButtonAction(arg1.id);
            this.dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        internal function doButtonAction(arg1:String):void
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case this._incEvent:
                {
                    break;
                }
                case this._decEvent:
                {
                    break;
                }
            }
            return;
        }

        public function incBet():void
        {
            var loc1:*;
            var loc2:*=((loc1 = this._ucsModel).pointer + 1);
            loc1.pointer = loc2;
            if (this._ucsModel.pointer >= (this._ucsModel.chipRange.length - 1)) 
            {
                this._ucsModel.pointer = (this._ucsModel.chipRange.length - 1);
                this.disableInc();
            }
            if (this._ucsModel.pointer == 1) 
            {
                this.enableDec();
            }
            this._ucsModel.chipSize = this._ucsModel.chipRange[this._ucsModel.pointer];
            this.changeDisplay(this._ucsModel.chipSize.toString());
            return;
        }

        public function decBet():void
        {
            var loc1:*;
            var loc2:*=((loc1 = this._ucsModel).pointer - 1);
            loc1.pointer = loc2;
            if (this._ucsModel.pointer <= 0) 
            {
                this._ucsModel.pointer = 0;
                this.disableDec();
            }
            if (this._ucsModel.pointer == this._ucsModel.chipRange.length - 2) 
            {
                this.enableInc();
            }
            this._ucsModel.chipSize = this._ucsModel.chipRange[this._ucsModel.pointer];
            this.changeDisplay(this._ucsModel.chipSize.toString());
            return;
        }

        public function hideFixedValue():void
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.IComponent(this._ucsSprites[this._fixedValueID]);
            loc1.removeFromContainer();
            return;
        }

        internal function showSprites():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=this._ucsXML.sprite;
            for each (loc1 in loc6) 
            {
                loc2 = loc1.@id;
                this._ucsSprites[loc2] = this._assetPool.getSprite(loc2);
                if (this._ucsSprites[loc2] == null) 
                {
                    continue;
                }
                loc3 = mgs.aurora.games.common.components.ui.components.IComponent(this._ucsSprites[loc2]);
                loc3.x = loc1.@x;
                loc3.y = loc1.@y;
                loc3.addTo(this._spritesContainer);
            }
            this._fixedValueID = this._ucsXML.fixedValue.sprite.@id;
            this._ucsSprites[this._fixedValueID] = this._assetPool.getSprite(this._fixedValueID);
            if (this._ucsSprites[this._fixedValueID] != null) 
            {
                (loc4 = mgs.aurora.games.common.components.ui.components.IComponent(this._ucsSprites[this._fixedValueID])).x = loc1.@x;
                loc4.y = loc1.@y;
            }
            return;
        }

        internal function showButtons():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (!this._ucsButtons[this._decID] || !this._ucsButtons[this._incID]) 
            {
                var loc4:*=0;
                var loc5:*=this._ucsXML;
                for each (loc1 in loc5) 
                {
                    loc2 = loc1.@id;
                    if (this._ucsButtons[loc2]) 
                    {
                        break;
                    }
                    else 
                    {
                        this._ucsButtons[loc2] = this._assetPool.getButton(loc2);
                    }
                    if (!this._ucsButtons[loc2]) 
                    {
                        continue;
                    }
                    loc3 = mgs.aurora.games.common.components.ui.components.button.IComponentButton(this._ucsButtons[loc2]);
                    loc3.x = loc1.@x;
                    loc3.y = loc1.@y;
                    loc3.shortCut = loc1.@shortcut;
                    loc3.event = loc1.@event;
                    loc3.addTo(this._buttonsContainer);
                }
            }
            return;
        }

        internal function showTexts():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=this._ucsXML.text;
            for each (loc1 in loc6) 
            {
                loc2 = loc1.@id;
                if (this._ucsTexts[loc2]) 
                {
                    break;
                }
                else 
                {
                    this._ucsTexts[loc2] = this._assetPool.getText(loc2);
                }
                if (!this._ucsTexts[loc2]) 
                {
                    continue;
                }
                loc3 = mgs.aurora.games.common.components.ui.components.text.IComponentText(this._ucsTexts[loc2]);
                if (loc4 = this._assetPool.getTextFormat(loc1.@textFormat)) 
                {
                    loc3.format = loc4;
                }
                loc3.x = loc1.@x;
                loc3.y = loc1.@y;
                loc3.selectable = false;
                loc3.addTo(this._sizesContainer);
            }
            return;
        }

        internal function showCoinSizeDeck():void
        {
            var loc1:*=null;
            if (!this._ucsCoinSizesComponent) 
            {
                this._ucsSprites[this._ucsCoinSizesSpriteID] = this._assetPool.getSprite(this._ucsCoinSizesSpriteID);
                if (this._ucsSprites[this._ucsCoinSizesSpriteID]) 
                {
                    loc1 = this._ucsXML.coinSizeDeck[0];
                    this._ucsCoinSizesComponent = mgs.aurora.games.common.components.ui.components.IComponent(this._ucsSprites[this._ucsCoinSizesSpriteID]);
                    flash.display.MovieClip(this._ucsCoinSizesComponent.displayObject).stop();
                    this._ucsCoinSizesComponent.x = loc1.@x;
                    this._ucsCoinSizesComponent.y = loc1.@y;
                    this._ucsCoinSizesComponent.addTo(this._sizesContainer);
                }
            }
            return;
        }

        public function get displayObject():flash.display.DisplayObject
        {
            return this;
        }

        public override function get x():Number
        {
            return super.x;
        }

        public override function get y():Number
        {
            return super.y;
        }

        public override function set y(arg1:Number):void
        {
            super.y = arg1;
            return;
        }

        public function addTo(arg1:flash.display.DisplayObjectContainer):void
        {
            arg1.addChild(this);
            return;
        }

        public function removeFromContainer():void
        {
            this.parent.removeChild(this);
            return;
        }

        public override function addChild(arg1:flash.display.DisplayObject):flash.display.DisplayObject
        {
            return super.addChild(arg1);
        }

        public function lockControls():void
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < this._controls.length) 
            {
                loc2 = this._controls[loc1];
                loc2.locked = true;
                ++loc1;
            }
            return;
        }

        public function unLockControls():void
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < this._controls.length) 
            {
                loc2 = this._controls[loc1];
                loc2.locked = false;
                ++loc1;
            }
            return;
        }

        internal function setupModelFromXML():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            this._decID = this._ucsXML.dec.button.@id;
            this._decEvent = this._ucsXML.dec.button.@id;
            this._incEvent = this._ucsXML.inc.button.@id;
            this._incID = this._ucsXML.inc.button.@id;
            var loc1:*=this._ucsXML.coinSizeDeck;
            if (loc1[0]) 
            {
                var loc5:*=0;
                var loc6:*=loc1;
                for each (loc2 in loc6) 
                {
                    this._ucsCoinSizesSpriteID = String(loc2.@spriteId);
                    this._ucsCoinSizesValues = new flash.utils.Dictionary();
                    loc3 = String(loc2.@sizes).split(",");
                    loc4 = loc3.length;
                    do 
                    {
                        --loc4;
                        this._ucsCoinSizesValues[String(Number(loc3[loc4]) / 100)] = loc4 + 1;
                    }
                    while (loc4 > 0);
                    break;
                }
            }
            this._ucsFontFallBack = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._ucsXML.@ucsFontFallBack);
            this._ucsFontFallBack.text = " ";
            return;
        }

        public function setup():void
        {
            this.checkForFixedValue();
            if (this._ucsModel.ucsIsEnabled != false) 
            {
                this.enable();
            }
            else 
            {
                this.disable();
            }
            return;
        }

        internal function checkForFixedValue():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            try 
            {
                loc1 = mgs.aurora.games.common.components.ui.components.IComponent(this._ucsSprites[this._fixedValueID]);
                if (this._ucsModel.chipRange.length != 1) 
                {
                    loc1.removeFromContainer();
                }
                else 
                {
                    loc1.addTo(this._buttonsContainer);
                    loc2 = int(this._ucsXML.fixedValue.sprite.@x);
                    loc3 = int(this._ucsXML.fixedValue.sprite.@y);
                    loc1.x = loc2;
                    loc1.y = loc3;
                }
            }
            catch (err:Error)
            {
            };
            return;
        }

        public function show():void
        {
            this.showSprites();
            this.showButtons();
            if (this._ucsXML.text[0]) 
            {
                this.showTexts();
            }
            if (this._ucsCoinSizesValues) 
            {
                this.showCoinSizeDeck();
            }
            this.changeDisplay(this._ucsModel.chipSize.toString());
            return;
        }

        public function hide():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=0;
            while (loc1 < this._ucsButtons.length) 
            {
                loc3 = mgs.aurora.games.common.components.ui.components.button.IComponentButton(this._ucsButtons[loc1]);
                this._buttons.hideControls(loc3.name);
                loc3.removeFromContainer();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < this._ucsSprites.length) 
            {
                loc2 = mgs.aurora.games.common.components.ui.components.IComponent(this._ucsSprites[loc1]);
                loc2.removeFromContainer();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < this._ucsTexts.length) 
            {
                loc2 = mgs.aurora.games.common.components.ui.components.IComponent(this._ucsTexts[loc1]);
                loc2.removeFromContainer();
                ++loc1;
            }
            return;
        }

        public function changeDisplay(arg1:String):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=arg1.split(".");
            if (loc1[1] == null) 
            {
                loc1[1] = "00";
            }
            while (loc1[1].length < 2) 
            {
                loc1[1] = loc1[1] + "0";
            }
            if (int(arg1) > 999) 
            {
                arg1 = int(arg1).toString();
                this._ucsModel.displayValue = arg1.substr(0, arg1.length - 3) + "K";
            }
            if (int(arg1) >= 1 && int(arg1) < 999) 
            {
                this._ucsModel.displayValue = loc1[0];
            }
            else if (int(arg1) < 1) 
            {
                this._ucsModel.displayValue = loc1[0] + "." + loc1[1];
            }
            var loc4:*=0;
            var loc5:*=this._ucsTexts;
            for each (loc2 in loc5) 
            {
                loc2.text = this._ucsModel.displayValue;
            }
            if ("formatUCSChipsSize" in mgs.aurora.games.framework.AuroraReference.aurora.banking.display) 
            {
                loc3 = mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatUCSChipsSize(Number(arg1) * 100);
                if (this._ucsCoinSizesComponent) 
                {
                    if (this._ucsCoinSizesValues[loc3]) 
                    {
                        flash.display.MovieClip(this._ucsCoinSizesComponent.displayObject).gotoAndStop(this._ucsCoinSizesValues[loc3]);
                        this._ucsCoinSizesComponent.show();
                        this._ucsFontFallBack.text = "";
                    }
                    else 
                    {
                        this._ucsCoinSizesComponent.hide();
                        this._ucsFontFallBack.text = loc3;
                    }
                }
            }
            else if (this._ucsCoinSizesComponent) 
            {
                if (this._ucsCoinSizesValues[arg1]) 
                {
                    flash.display.MovieClip(this._ucsCoinSizesComponent.displayObject).gotoAndStop(this._ucsCoinSizesValues[arg1]);
                    this._ucsCoinSizesComponent.show();
                }
                else 
                {
                    this._ucsCoinSizesComponent.hide();
                }
            }
            return;
        }

        public function enable():void
        {
            this._ucsModel.ucsIsEnabled = true;
            this.checkForFixedValue();
            if (this._ucsModel.pointer > 0) 
            {
                this.enableDec();
            }
            else 
            {
                this.disableDec();
            }
            if (this._ucsModel.pointer < (this._ucsModel.chipRange.length - 1)) 
            {
                this.enableInc();
            }
            else 
            {
                this.disableInc();
            }
            return;
        }

        public override function set x(arg1:Number):void
        {
            super.x = arg1;
            return;
        }

        public function disable():void
        {
            var loc1:*=null;
            this._ucsModel.ucsIsEnabled = false;
            var loc2:*=0;
            var loc3:*=this._ucsButtons;
            for each (loc1 in loc3) 
            {
                this._buttons.disableControls(loc1.name);
            }
            return;
        }

        internal function disableInc():void
        {
            try 
            {
                this._buttons.disableControls(this._incEvent);
            }
            catch (err:Error)
            {
            };
            return;
        }

        internal function enableInc():void
        {
            try 
            {
                this._buttons.enableControls(this._incEvent);
            }
            catch (err:Error)
            {
            };
            return;
        }

        internal function disableDec():void
        {
            try 
            {
                this._buttons.disableControls(this._decEvent);
            }
            catch (err:Error)
            {
            };
            return;
        }

        internal function enableDec():void
        {
            try 
            {
                this._buttons.enableControls(this._decEvent);
            }
            catch (err:Error)
            {
            };
            return;
        }

        internal function onRollOver(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            this.dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        internal function onRollOut(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            this.dispatchEvent(new mgs.aurora.games.common.components.ui.events.ConsoleEvent(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_BUTTON, arg1));
            return;
        }

        public function wireButtons():void
        {
            var loc1:*=null;
            var loc2:*=null;
            this._controls = new Vector.<mgs.aurora.api.ui.controls.SimpleFrameButton>();
            this._buttons.createGroups("ucsGroup");
            var loc3:*=0;
            var loc4:*=this._ucsButtons;
            for each (loc1 in loc4) 
            {
                loc2 = new mgs.aurora.api.ui.controls.SimpleFrameButton(loc1.name, loc1.displayObject as flash.display.MovieClip, mgs.aurora.games.common.components.utils.DataTypeConversion.csvToVectorUint(loc1.shortCut));
                this._buttons.addControl(loc2, this, "ucsGroup");
                this._controls.push(loc2);
                loc2.addEventListener(mgs.aurora.api.events.ApiMouseEvent.CLICK, this.onMouseEventClick);
                loc2.addEventListener(mgs.aurora.api.events.ApiKeyboardEvent.KEY_UP, this.onKeyUpEvent);
                loc2.addEventListener(mgs.aurora.api.events.ApiMouseEvent.ROLL_OUT, this.onRollOut);
                loc2.addEventListener(mgs.aurora.api.events.ApiMouseEvent.ROLL_OVER, this.onRollOver);
                this._buttons.enableControls(loc1.name);
            }
            return;
        }

        internal var _ucsXML:XML;

        internal var _buttons:mgs.aurora.api.interfaces.controls.IControlManager;

        internal var _assetPool:mgs.aurora.games.common.components.ui.assetPooling.IConsoleAssetProvider;

        internal var _ucsSprites:flash.utils.Dictionary;

        internal var _ucsButtons:flash.utils.Dictionary;

        internal var _ucsTexts:flash.utils.Dictionary;

        internal var _fixedValueID:String;

        internal var _ucsCoinSizesComponent:mgs.aurora.games.common.components.ui.components.IComponent;

        internal var _ucsCoinSizesValues:flash.utils.Dictionary;

        internal var _ucsCoinSizesSpriteID:String;

        internal var _decID:String;

        internal var _incID:String;

        internal var _decEvent:String;

        internal var _incEvent:String;

        internal var _controls:__AS3__.vec.Vector.<mgs.aurora.api.ui.controls.SimpleFrameButton>;

        internal var _spritesContainer:flash.display.Sprite;

        internal var _buttonsContainer:flash.display.Sprite;

        internal var _sizesContainer:flash.display.Sprite;

        internal var _ucsFontFallBack:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _ucsModel:mgs.aurora.games.common.components.ui.containers.ucs.IUCSModel;
    }
}


//                  class UCSModel
package mgs.aurora.games.common.components.ui.containers.ucs 
{
    import mgs.aurora.games.base.*;
    
    public class UCSModel extends Object implements mgs.aurora.games.common.components.ui.containers.ucs.IUCSModel
    {
        public function UCSModel()
        {
            this._chipRange = new Array();
            super();
            return;
        }

        public function set ucsIsEnabled(arg1:Boolean):void
        {
            this._ucsIsEnabled = arg1;
            return;
        }

        public function get ucsIsEnabled():Boolean
        {
            return this._ucsIsEnabled;
        }

        public function set chipRange(arg1:Array):void
        {
            this._chipRange = arg1;
            return;
        }

        public function get chipRange():Array
        {
            return this._chipRange;
        }

        public function set defaultChipSize(arg1:Number):void
        {
            this._defaultChip = arg1;
            if (this.chipSize == 0) 
            {
                this.chipSize = this._defaultChip;
            }
            return;
        }

        public function get defaultChipSize():Number
        {
            return this._defaultChip;
        }

        public function set chipSize(arg1:Number):void
        {
            this._chipSize = arg1;
            this.pointer = this.findPositionInRange(this._chipSize);
            mgs.aurora.games.base.BaseClass.trace(this.pointer);
            return;
        }

        public function get chipSize():Number
        {
            return this._chipSize;
        }

        internal function findPositionInRange(arg1:Number):Number
        {
            var loc1:*=-1;
            var loc2:*=0;
            while (loc2 < this._chipRange.length) 
            {
                if (arg1 == this._chipRange[loc2]) 
                {
                    loc1 = loc2;
                    return loc1;
                }
                ++loc2;
            }
            if (arg1 <= this._chipRange[0]) 
            {
                return 0;
            }
            if (arg1 >= this._chipRange[(this._chipRange.length - 1)]) 
            {
                return (this._chipRange.length - 1);
            }
            return loc1;
        }

        public function set pointer(arg1:Number):void
        {
            this._pointer = arg1;
            return;
        }

        public function get pointer():Number
        {
            return this._pointer;
        }

        public function get displayValue():String
        {
            return this._displayValue;
        }

        public function set displayValue(arg1:String):void
        {
            this._displayValue = arg1;
            return;
        }

        internal var _chipRange:Array;

        internal var _pointer:Number=0;

        internal var _chipSize:Number=0;

        internal var _defaultChip:Number=0;

        internal var _displayValue:String="";

        internal var _ucsIsEnabled:Boolean=true;
    }
}


//              package events
//                class ConsoleEvent
package mgs.aurora.games.common.components.ui.events 
{
    import flash.events.*;
    
    public class ConsoleEvent extends flash.events.Event
    {
        public function ConsoleEvent(arg1:String, arg2:*)
        {
            super(arg1, true);
            this._event = arg2;
            return;
        }

        public function get event():*
        {
            return this._event;
        }

        public function customClone():*
        {
            return new mgs.aurora.games.common.components.ui.events.ConsoleEvent(type, this._event);
        }

        public static const CONSOLE_CONTROLER_BUTTON:String="console_controler_button";

        public static const CONSOLE_BUTTON:String="console_button";

        public static const UCS_BUTTON:String="ucs_button";

        public static const UCS_MOUSE_EVENT:String="ucs_mouseEvent";

        public static const UCS_KEYBOARD_EVENT:String="ucs_keyboardEvent";

        internal var _event:*;
    }
}


//              package transitions
//                package data
//                  class TransitionData
package mgs.aurora.games.common.components.ui.transitions.data 
{
    import flash.display.*;
    import flash.utils.*;
    
    public class TransitionData extends Object
    {
        public function TransitionData(arg1:String, arg2:flash.display.Sprite, arg3:flash.display.Sprite, arg4:Boolean, arg5:String, arg6:String, arg7:Number, arg8:Number, arg9:XMLList)
        {
            super();
            this._id = arg1;
            this._destScene = arg2;
            this._maskLayer = arg3;
            this._revealDestination = arg4;
            this._type = this.ValidateType(arg5);
            this._direction = this.ValidateDirection(arg6);
            this._startDelay = arg7;
            this._duration = arg8;
            if (arg9) 
            {
                this.setTypicalAttributes(arg9);
            }
            return;
        }

        public function get ID():String
        {
            return this._id;
        }

        public function get DestinationScene():flash.display.Sprite
        {
            return this._destScene;
        }

        public function get MaskLayer():flash.display.Sprite
        {
            return this._maskLayer;
        }

        public function get Type():String
        {
            return this._type;
        }

        public function get Direction():String
        {
            return this._direction;
        }

        public function get ShowDestination():Boolean
        {
            return this._revealDestination;
        }

        public function get HideDestination():Boolean
        {
            return !this._revealDestination;
        }

        public function get StartDelay():Number
        {
            return this._startDelay;
        }

        public function get Duration():Number
        {
            return this._duration;
        }

        public function getTypicalAttributeValue(arg1:String):String
        {
            if (!this._typicalAttributes || !this._typicalAttributes[arg1]) 
            {
                return null;
            }
            return this._typicalAttributes[arg1];
        }

        internal function setTypicalAttributes(arg1:XMLList):void
        {
            var loc1:*=null;
            this._typicalAttributes = new flash.utils.Dictionary();
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._typicalAttributes[loc1.@id.toString()] = loc1.@val.toString();
            }
            return;
        }

        protected function ValidateType(arg1:String):String
        {
            arg1 = arg1.toLowerCase();
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionType.VENETIAN:
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionType.WIPE:
                {
                    return arg1;
                }
                default:
                {
                    return mgs.aurora.games.common.components.ui.transitions.data.TransitionType.WIPE;
                }
            }
        }

        protected function ValidateDirection(arg1:String):String
        {
            arg1 = arg1.toLowerCase();
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.LEFT_TO_RIGHT:
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.RIGHT_TO_LEFT:
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.TOP_TO_BOTTOM:
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.BOTTOM_TO_TOP:
                {
                    return arg1;
                }
                default:
                {
                    return mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.LEFT_TO_RIGHT;
                }
            }
        }

        protected var _id:String;

        protected var _destScene:flash.display.Sprite;

        protected var _maskLayer:flash.display.Sprite;

        protected var _revealDestination:Boolean;

        protected var _type:String;

        protected var _direction:String;

        protected var _startDelay:Number;

        protected var _duration:Number;

        protected var _typicalAttributes:flash.utils.Dictionary;
    }
}


//                  class TransitionDirection
package mgs.aurora.games.common.components.ui.transitions.data 
{
    public class TransitionDirection extends Object
    {
        public function TransitionDirection()
        {
            super();
            return;
        }

        public static const LEFT_TO_RIGHT:String="lefttoright";

        public static const RIGHT_TO_LEFT:String="righttoleft";

        public static const BOTTOM_TO_TOP:String="bottomtotop";

        public static const TOP_TO_BOTTOM:String="toptobottom";
    }
}


//                  class TransitionType
package mgs.aurora.games.common.components.ui.transitions.data 
{
    public class TransitionType extends Object
    {
        public function TransitionType()
        {
            super();
            return;
        }

        public static const VENETIAN:String="venetian";

        public static const WIPE:String="wipe";
    }
}


//                package factories
//                  class TransitionRunnerFactory
package mgs.aurora.games.common.components.ui.transitions.factories 
{
    import mgs.aurora.games.common.components.ui.transitions.*;
    import mgs.aurora.games.common.components.ui.transitions.data.*;
    
    public class TransitionRunnerFactory extends Object
    {
        public function TransitionRunnerFactory()
        {
            super();
            return;
        }

        public function createRunner(arg1:mgs.aurora.games.common.components.ui.transitions.data.TransitionData):mgs.aurora.games.common.components.ui.transitions.TransitionRunner
        {
            if (arg1.Type == mgs.aurora.games.common.components.ui.transitions.data.TransitionType.VENETIAN) 
            {
                return new mgs.aurora.games.common.components.ui.transitions.VenetianTransitionRunner(arg1);
            }
            if (arg1.Type == mgs.aurora.games.common.components.ui.transitions.data.TransitionType.WIPE) 
            {
                return new mgs.aurora.games.common.components.ui.transitions.WipeTransitionRunner(arg1);
            }
            return null;
        }
    }
}


//                class TransitionRunner
package mgs.aurora.games.common.components.ui.transitions 
{
    import mgs.aurora.games.common.components.generic.*;
    
    public interface TransitionRunner extends mgs.aurora.games.common.components.generic.IDisposable
    {
        function set delegateComplete(arg1:Function):void;

        function set delegateFail(arg1:Function):void;

        function run():void;
    }
}


//                class VenetianTransitionRunner
package mgs.aurora.games.common.components.ui.transitions 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.ui.transitions.data.*;
    
    public class VenetianTransitionRunner extends Object implements mgs.aurora.games.common.components.ui.transitions.TransitionRunner
    {
        public function VenetianTransitionRunner(arg1:mgs.aurora.games.common.components.ui.transitions.data.TransitionData)
        {
            super();
            this.transition_data = arg1;
            this.widthOfBar = Number(arg1.getTypicalAttributeValue(ATTRIBUTE_ID__WIDTH_OF_BARS));
            this.heightOfBar = Number(arg1.getTypicalAttributeValue(ATTRIBUTE_ID__HEIGHT_OF_BARS));
            this.numberOfBars = int(arg1.getTypicalAttributeValue(ATTRIBUTE_ID__NO_OF_BARS));
            return;
        }

        public function set delegateComplete(arg1:Function):void
        {
            this.completion_delegate = arg1;
            return;
        }

        public function set delegateFail(arg1:Function):void
        {
            this.failure_delegate = arg1;
            return;
        }

        public function run():void
        {
            if (this.transition_data.ShowDestination) 
            {
                this.transition_data.DestinationScene.visible = false;
                this.createBlinds(this.transition_data.MaskLayer, this.transition_data.ShowDestination);
                this.transition_data.DestinationScene.visible = true;
                this.transition_data.DestinationScene.mask = this.transition_data.MaskLayer;
                this.doBlindTweens();
            }
            return;
        }

        internal function doBlindTweens():void
        {
            this.numberOfCompletedTweens = 0;
            var loc1:*=this.transition_data.StartDelay;
            var loc2:*=this.transition_data.Duration;
            var loc3:*=0;
            while (loc3 < this.numberOfBars) 
            {
                caurina.transitions.Tweener.addTween(this.blinds[loc3], {"alpha":1, "delay":loc1 * loc3, "time":loc2, "transition":EASING, "onComplete":this.onTweenInComplete, "onCompleteParams":[loc3]});
                ++loc3;
            }
            return;
        }

        internal function onTweenInComplete(arg1:int):void
        {
            caurina.transitions.Tweener.removeTweens(this.blinds[arg1]);
            var loc1:*;
            var loc2:*;
            if ((loc1.numberOfCompletedTweens = loc2 = ((loc1 = this).numberOfCompletedTweens + 1)) == this.numberOfBars) 
            {
                this.onTransitionCompleted();
            }
            return;
        }

        internal function onTransitionCompleted():void
        {
            this.transition_data.DestinationScene.mask = null;
            this.transition_data.MaskLayer.visible = false;
            if (this.completion_delegate != null) 
            {
                this.completion_delegate();
            }
            this.cleanupBlinds();
            return;
        }

        internal function createBlinds(arg1:flash.display.Sprite, arg2:Boolean):void
        {
            var loc2:*=null;
            this.blinds = new Vector.<flash.display.Shape>(this.numberOfBars, true);
            var loc1:*=0;
            while (loc1 < this.numberOfBars) 
            {
                (loc2 = this.createNewBlind(this.widthOfBar, this.heightOfBar)).name = BLIND_PREFIX + loc1.toString();
                loc2.alpha = arg2 ? 0 : 1;
                loc2.y = 0 + loc1 * this.heightOfBar;
                arg1.addChild(loc2);
                this.blinds[loc1] = loc2;
                ++loc1;
            }
            return;
        }

        internal function createNewBlind(arg1:Number, arg2:Number):flash.display.Shape
        {
            var loc1:*=new flash.display.Shape();
            loc1.graphics.beginFill(0);
            loc1.graphics.drawRect(0, 0, arg1, arg2);
            loc1.graphics.endFill();
            return loc1;
        }

        internal function cleanupBlinds(arg1:Boolean=false):void
        {
            var loc1:*=0;
            var loc2:*=this.blinds.length;
            while (loc1 < loc2) 
            {
                if (arg1) 
                {
                    caurina.transitions.Tweener.removeTweens(this.blinds[loc1]);
                }
                this.blinds[loc1].parent.removeChild(this.blinds[loc1]);
                this.blinds[loc1] = null;
                ++loc1;
            }
            this.blinds = null;
            return;
        }

        public function dispose():void
        {
            this.cleanupBlinds(true);
            if (this.completion_delegate != null) 
            {
                this.completion_delegate = null;
            }
            if (this.failure_delegate != null) 
            {
                this.failure_delegate = null;
            }
            this.transition_data = null;
            return;
        }

        internal static const EASING:String="linear";

        internal static const BLIND_PREFIX:String="venetian_transition_blind";

        internal static const ATTRIBUTE_ID__NO_OF_BARS:String="numberOfBars";

        internal static const ATTRIBUTE_ID__WIDTH_OF_BARS:String="widthOfBar";

        internal static const ATTRIBUTE_ID__HEIGHT_OF_BARS:String="heightOfBar";

        internal var transition_data:mgs.aurora.games.common.components.ui.transitions.data.TransitionData;

        internal var failure_delegate:Function;

        internal var completion_delegate:Function;

        internal var blinds:__AS3__.vec.Vector.<flash.display.Shape>;

        internal var numberOfCompletedTweens:uint;

        internal var numberOfBars:int;

        internal var heightOfBar:Number;

        internal var widthOfBar:Number;
    }
}


//                class WipeTransitionRunner
package mgs.aurora.games.common.components.ui.transitions 
{
    import caurina.transitions.*;
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.games.common.components.ui.transitions.data.*;
    
    public class WipeTransitionRunner extends Object implements mgs.aurora.games.common.components.ui.transitions.TransitionRunner
    {
        public function WipeTransitionRunner(arg1:mgs.aurora.games.common.components.ui.transitions.data.TransitionData)
        {
            super();
            this.transition_data = arg1;
            this.maskWidth = Number(arg1.getTypicalAttributeValue(ATTRIBUTE_ID__MASK_WIDTH));
            this.maskHeight = Number(arg1.getTypicalAttributeValue(ATTRIBUTE_ID__MASK_HEIGHT));
            this.gradientSpan = Number(arg1.getTypicalAttributeValue(ATTRIBUTE_ID__GRADIENT_SPAN));
            return;
        }

        public function set delegateComplete(arg1:Function):void
        {
            this.completion_delegate = arg1;
            return;
        }

        public function set delegateFail(arg1:Function):void
        {
            this.failure_delegate = arg1;
            return;
        }

        public function run():void
        {
            if (this.transition_data.ShowDestination) 
            {
                this.transition_data.DestinationScene.visible = false;
                this.createMask();
                this.transition_data.DestinationScene.mask = this.transition_data.MaskLayer;
                this.transition_data.DestinationScene.visible = true;
                this.animate();
            }
            return;
        }

        internal function animate():void
        {
            var loc1:*={"delay":this.transition_data.StartDelay, "time":this.transition_data.Duration, "transition":EASING, "onComplete":this.onTweenComplete};
            if (this.slideAlongX) 
            {
                loc1.x = 0;
            }
            else 
            {
                loc1.y = 0;
            }
            caurina.transitions.Tweener.addTween(this.transition_data.MaskLayer, loc1);
            return;
        }

        internal function onTweenComplete():void
        {
            caurina.transitions.Tweener.removeTweens(this.transition_data.MaskLayer);
            this.onTransitionCompleted();
            return;
        }

        internal function onTransitionCompleted():void
        {
            this.transition_data.DestinationScene.mask = null;
            this.transition_data.MaskLayer.visible = false;
            if (this.completion_delegate != null) 
            {
                this.completion_delegate();
            }
            this.cleanupMask();
            return;
        }

        internal function createMask():void
        {
            var loc2:*=null;
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=NaN;
            var loc1:*=this.transition_data.MaskLayer.graphics;
            loc1.beginFill(0);
            loc1.drawRect(0, 0, this.maskWidth, this.maskHeight);
            loc1.endFill();
            var loc6:*=this.transition_data.Direction;
            var loc8:*=loc6;
            switch (loc8) 
            {
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.LEFT_TO_RIGHT:
                {
                    loc2 = new flash.geom.Point(this.maskWidth, 0);
                    loc3 = this.gradientSpan;
                    loc4 = this.maskHeight;
                    loc5 = Math.PI;
                    this.transition_data.MaskLayer.x = 0 - (this.maskWidth + loc3);
                    this.slideAlongX = true;
                    break;
                }
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.RIGHT_TO_LEFT:
                {
                    loc2 = new flash.geom.Point(0 - this.gradientSpan, 0);
                    loc3 = this.gradientSpan;
                    loc4 = this.maskHeight;
                    loc5 = 0;
                    this.transition_data.MaskLayer.x = loc3 + this.maskWidth;
                    this.slideAlongX = true;
                    break;
                }
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.TOP_TO_BOTTOM:
                {
                    loc2 = new flash.geom.Point(0, this.maskHeight);
                    loc3 = this.maskWidth;
                    loc4 = this.gradientSpan;
                    loc5 = Math.PI * 1.5;
                    this.transition_data.MaskLayer.y = 0 - (loc4 + this.maskHeight);
                    this.slideAlongX = false;
                    break;
                }
                case mgs.aurora.games.common.components.ui.transitions.data.TransitionDirection.BOTTOM_TO_TOP:
                {
                    loc2 = new flash.geom.Point(0, 0 - this.gradientSpan);
                    loc3 = this.maskWidth;
                    loc4 = this.gradientSpan;
                    loc5 = Math.PI / 2;
                    this.transition_data.MaskLayer.y = loc4 + this.maskHeight;
                    this.slideAlongX = false;
                    break;
                }
            }
            var loc7:*;
            (loc7 = new flash.geom.Matrix()).createGradientBox(this.gradientSpan, this.gradientSpan, loc5, loc2.x, loc2.y);
            loc1.beginGradientFill(flash.display.GradientType.LINEAR, [0, 0], [0, 1], [0, 255], loc7);
            loc1.drawRect(loc2.x, loc2.y, loc3, loc4);
            loc1.endFill();
            return;
        }

        internal function cleanupMask():void
        {
            this.transition_data.MaskLayer.graphics.clear();
            return;
        }

        public function dispose():void
        {
            this.cleanupMask();
            if (this.completion_delegate != null) 
            {
                this.completion_delegate = null;
            }
            if (this.failure_delegate != null) 
            {
                this.failure_delegate = null;
            }
            this.transition_data = null;
            return;
        }

        internal static const EASING:String="easeOutSine";

        internal static const ATTRIBUTE_ID__MASK_WIDTH:String="maskWidth";

        internal static const ATTRIBUTE_ID__MASK_HEIGHT:String="maskHeight";

        internal static const ATTRIBUTE_ID__GRADIENT_SPAN:String="gradientSpan";

        internal var transition_data:mgs.aurora.games.common.components.ui.transitions.data.TransitionData;

        internal var failure_delegate:Function;

        internal var completion_delegate:Function;

        internal var maskWidth:Number;

        internal var maskHeight:Number;

        internal var gradientSpan:Number;

        internal var slideAlongX:Boolean;
    }
}


//            package utils
//              package counters
//                package curves
//                  class ICurve
package mgs.aurora.games.common.components.utils.counters.curves 
{
    import __AS3__.vec.*;
    
    public interface ICurve
    {
        function solveX(arg1:Number=0):__AS3__.vec.Vector.<Number>;

        function solveY(arg1:Number=0):Number;

        function dispose():void;
    }
}


//                  class PolyCurve
package mgs.aurora.games.common.components.utils.counters.curves 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.common.components.generic.*;
    
    public class PolyCurve extends Object implements mgs.aurora.games.common.components.utils.counters.curves.ICurve, mgs.aurora.games.common.components.generic.IDisposable
    {
        public function PolyCurve(... rest)
        {
            super();
            this.setCoefficients(Vector.<Number>(rest));
            return;
        }

        public function setCoefficients(arg1:__AS3__.vec.Vector.<Number>):void
        {
            this.coefficients = arg1;
            return;
        }

        public function solveX(arg1:Number=0):__AS3__.vec.Vector.<Number>
        {
            return null;
        }

        public function solveY(arg1:Number=0):Number
        {
            var loc1:*=0;
            var loc2:*=this.coefficients.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc1 = loc1 + Math.pow(arg1, loc3) * this.coefficients[loc3];
                ++loc3;
            }
            return loc1;
        }

        public function dispose():void
        {
            this.coefficients = null;
            return;
        }

        public var coefficients:__AS3__.vec.Vector.<Number>;
    }
}


//              package text
//                package format
//                  class BigWinCreditsFormatter
package mgs.aurora.games.common.components.utils.text.format 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public class BigWinCreditsFormatter extends mgs.aurora.games.common.components.utils.text.format.CreditsFormatter
    {
        public function BigWinCreditsFormatter(arg1:XML)
        {
            super(arg1);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            this.onResponse();
            return;
        }

        protected override function onBetData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        protected function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME));
            this._chipSize = loc1.chipSize;
            return;
        }

        protected override function formatAsCoins(arg1:String):String
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=null;
            arg1 = (Number(arg1) / this._chipSize).toString();
            if ("formatCoinsDisplay" in mgs.aurora.games.framework.AuroraReference.aurora.banking.display) 
            {
                return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatCoinsDisplay(Number(arg1));
            }
            loc1 = arg1.length;
            if (loc1 > 3) 
            {
                while (loc1 > 2) 
                {
                    loc1 = loc1 - 3;
                    loc2 = arg1.substring(0, loc1);
                    loc3 = arg1.substring(loc1);
                    arg1 = loc2 + " " + loc3;
                }
            }
            var loc4:*=_postfixCoins;
            switch (loc4) 
            {
                case "1":
                {
                    arg1 = arg1 + " " + COINS;
                    break;
                }
                case "2":
                {
                    arg1 = COINS + " " + arg1;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return arg1;
        }

        public static const NAME:String="BigWinCreditsFormatter";

        internal var _chipSize:Number;
    }
}


//                  class CoinsFormatter
package mgs.aurora.games.common.components.utils.text.format 
{
    import mgs.aurora.games.common.statics.formatting.*;
    import mgs.aurora.games.framework.*;
    
    public class CoinsFormatter extends mgs.aurora.games.common.components.utils.text.format.CreditsFormatter
    {
        public function CoinsFormatter(arg1:XML)
        {
            super(arg1);
            currentFormat = mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS;
            return;
        }

        protected override function onOptionUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        public static const NAME:String="CoinsFormatter";
    }
}


//                  class CreditsFormatter
package mgs.aurora.games.common.components.utils.text.format 
{
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.common.statics.formatting.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public class CreditsFormatter extends flash.events.EventDispatcher implements mgs.aurora.games.common.components.utils.text.format.ITextFormatter, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function CreditsFormatter(arg1:XML)
        {
            super();
            this.id = arg1.@id.toXMLString();
            this.overflow = arg1.@overflow.toXMLString();
            this.manipulator = arg1.@manipulator.toXMLString();
            this._postfixCoins = arg1.@postfixCoins.toXMLString();
            this._isTrueTypeFont = arg1.@isTrueTypeFont != "true" ? false : true;
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_COINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BETMAX);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptionUpdate, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            var loc1:*=mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
            this.currentFormat = loc1.displayAsCoins ? mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS : mgs.aurora.games.common.statics.formatting.CreditFormattingMode.CREDITS;
            return;
        }

        protected function onOptionUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.OptionsData(arg1.data).displayAsCoins;
            var loc2:*=loc1 ? mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS : mgs.aurora.games.common.statics.formatting.CreditFormattingMode.CREDITS;
            if (loc2 != this.currentFormat) 
            {
                this.currentFormat = loc2;
                this.reformat();
            }
            return;
        }

        protected function onBetData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.reformat();
            return;
        }

        protected function reformat():void
        {
            dispatchEvent(new mgs.aurora.games.common.components.utils.text.format.TextFormatEvent(mgs.aurora.games.common.components.utils.text.format.TextFormatEvent.REFORMAT));
            return;
        }

        public function format(arg1:String, arg2:mgs.aurora.games.common.components.ui.components.text.resizable.Region=null):String
        {
            if (this.manipulator && !(this.manipulator == "")) 
            {
                arg1 = this.applyManipulator(arg1);
            }
            if (arg2 && (arg2.lockedFormat == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS || arg2.overflowing && arg2.overflowFormat == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS) || this.currentFormat == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS) 
            {
                return this.formatAsCoins(arg1);
            }
            if (arg2 && (arg2.lockedFormat == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS || arg2.overflowing && arg2.overflowFormat == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS) || this.currentFormat == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.CREDITS) 
            {
                return this.formatAsCredits(arg1);
            }
            return arg1;
        }

        protected function applyManipulator(arg1:String):String
        {
            var loc3:*=null;
            var loc1:*=Number(arg1);
            var loc2:*=mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME));
            var loc4:*=this.manipulator;
            switch (loc4) 
            {
                case mgs.aurora.games.common.components.utils.text.format.CreditsFormatterManipulatorType.BET_COINS:
                {
                    loc1 = loc1 * loc2.numChips * loc2.chipSize;
                    break;
                }
                case mgs.aurora.games.common.components.utils.text.format.CreditsFormatterManipulatorType.MAX_COIN_SIZE:
                {
                    loc3 = loc2.validChips;
                    loc1 = loc1 * Number(loc3[(loc3.length - 1)]);
                    break;
                }
                case mgs.aurora.games.common.components.utils.text.format.CreditsFormatterManipulatorType.TOTAL_BET:
                {
                    loc1 = loc1 * loc2.betValue;
                    break;
                }
            }
            return loc1.toString();
        }

        protected function formatAsCredits(arg1:String):String
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            if (mgs.aurora.games.common.dataTypes.CreditFormatModel.useCurrency) 
            {
                if (this._isTrueTypeFont) 
                {
                    return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatToCurrency(Number(arg1), mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC, null, true);
                }
                loc1 = mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatToCurrency(Number(arg1), mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC, null, true);
                loc2 = loc1.indexOf(" ");
                loc3 = loc1.substring(0, loc2);
                loc4 = loc1.substring(loc2 + 1);
                return loc3.concat(loc4);
            }
            return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.getCreditsDisplayText(Number(arg1));
        }

        protected function formatAsCoins(arg1:String):String
        {
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME));
            var loc2:*=loc1.chipSize;
            if (this.manipulator == mgs.aurora.games.common.components.utils.text.format.CreditsFormatterManipulatorType.MAX_COIN_SIZE) 
            {
                loc2 = Number(loc1.validChips[(loc1.validChips.length - 1)]);
            }
            arg1 = (Number(arg1) / loc2).toString();
            if ("formatCoinsDisplay" in mgs.aurora.games.framework.AuroraReference.aurora.banking.display) 
            {
                return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatCoinsDisplay(Number(arg1));
            }
            if ((loc3 = arg1.length) > 3) 
            {
                while (loc3 > 2) 
                {
                    loc3 = loc3 - 3;
                    loc4 = arg1.substring(0, loc3);
                    loc5 = arg1.substring(loc3);
                    arg1 = loc4 + " " + loc5;
                }
            }
            var loc6:*=this._postfixCoins;
            switch (loc6) 
            {
                case "1":
                {
                    arg1 = arg1 + " " + COINS;
                    break;
                }
                case "2":
                {
                    arg1 = COINS + " " + arg1;
                    break;
                }
                default:
                {
                    break;
                }
            }
            return arg1;
        }

        public function get name():String
        {
            return NAME;
        }

        public static const NAME:String="CreditsFormatter";

        public static const COINS:String="¢";

        public var id:String;

        public var overflow:Number;

        protected var currentFormat:String;

        protected var manipulator:String;

        protected var _postfixCoins:String;

        protected var _isTrueTypeFont:Boolean=false;
    }
}


//                  class CreditsFormatterManipulatorType
package mgs.aurora.games.common.components.utils.text.format 
{
    public class CreditsFormatterManipulatorType extends Object
    {
        public function CreditsFormatterManipulatorType()
        {
            super();
            throw new Error("CreditsFormatterManipulatorType cannot instantiated.");
        }

        public static const BET_COINS:String="betCoins";

        public static const TOTAL_BET:String="totalBet";

        public static const MAX_COIN_SIZE:String="maxCoinSize";
    }
}


//                  class ITextFormatter
package mgs.aurora.games.common.components.utils.text.format 
{
    import flash.events.*;
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    
    public interface ITextFormatter extends flash.events.IEventDispatcher
    {
        function get name():String;

        function format(arg1:String, arg2:mgs.aurora.games.common.components.ui.components.text.resizable.Region=null):String;
    }
}


//                  class StatisticsDialogCreditFormatter
package mgs.aurora.games.common.components.utils.text.format 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.framework.*;
    
    public class StatisticsDialogCreditFormatter extends mgs.aurora.games.common.components.utils.text.format.CreditsFormatter
    {
        public function StatisticsDialogCreditFormatter(arg1:XML)
        {
            this._original_postfixCoins = arg1.@postfixCoins.toXMLString();
            this._useCurrencySymbol = arg1.@useCurrencySymbol.toXMLString().toLowerCase() == "true";
            arg1.@postfixCoins = "";
            super(arg1);
            return;
        }

        protected override function formatAsCredits(arg1:String):String
        {
            var loc1:*=null;
            if (this._useCurrencySymbol) 
            {
                return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatToCurrency(Number(arg1), mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC, null, true);
            }
            loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("CREDITSBOX_START").toLowerCase();
            return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.getCreditsDisplayText(Number(arg1)) + " " + loc1;
        }

        protected override function formatAsCoins(arg1:String):String
        {
            var loc1:*=super.formatAsCoins(arg1);
            var loc2:*=this._original_postfixCoins;
            switch (loc2) 
            {
                case "1":
                {
                    loc1 = loc1 + " " + mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("COINSBOX_START").toLowerCase();
                    break;
                }
                case "2":
                {
                    loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("COINSBOX_START").toLowerCase() + " " + loc1;
                    break;
                }
            }
            return loc1;
        }

        public static const NAME:String="StatisticsDialogCreditFormatter";

        internal var _original_postfixCoins:String;

        internal var _useCurrencySymbol:Boolean;
    }
}


//                  class TextFormat
package mgs.aurora.games.common.components.utils.text.format 
{
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    
    public class TextFormat extends mgs.aurora.games.base.BaseClass
    {
        public function TextFormat(arg1:XML)
        {
            super();
            setClassDescription("mgs.aurora.games.common.components.utils.text.format.TextFormat");
            if (!staticInit) 
            {
                throw new Error("TextFormat cannot be instantiated");
            }
            staticInit = false;
            this.config = arg1;
            this.cachedFormatters = new flash.utils.Dictionary();
            return;
        }

        public function getFormatter(arg1:String):mgs.aurora.games.common.components.utils.text.format.ITextFormatter
        {
            if (!this.cachedFormatters[arg1]) 
            {
                this.cacheFormatter(arg1);
            }
            var loc1:*=mgs.aurora.games.common.components.utils.text.format.ITextFormatter(this.cachedFormatters[arg1]);
            return loc1;
        }

        internal function cacheFormatter(arg1:String):mgs.aurora.games.common.components.utils.text.format.ITextFormatter
        {
            var id:String;
            var results:XMLList;
            var formatterSettings:XML;
            var type:String;
            var formatter:mgs.aurora.games.common.components.utils.text.format.ITextFormatter;

            var loc1:*;
            results = null;
            formatterSettings = null;
            type = null;
            formatter = null;
            id = arg1;
            var loc3:*=0;
            var loc4:*=this.config.format;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == id) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            results = loc2;
            formatterSettings = XML(results[0]);
            if (formatterSettings.toXMLString() == "") 
            {
                throw new Error("Formatter " + id + " does not exist.");
            }
            type = formatterSettings.@type.toXMLString();
            loc2 = type;
            switch (loc2) 
            {
                case mgs.aurora.games.common.components.utils.text.format.CreditsFormatter.NAME:
                {
                    formatter = new mgs.aurora.games.common.components.utils.text.format.CreditsFormatter(formatterSettings);
                    this.cachedFormatters[id] = formatter;
                    break;
                }
                case mgs.aurora.games.common.components.utils.text.format.StatisticsDialogCreditFormatter.NAME:
                {
                    formatter = new mgs.aurora.games.common.components.utils.text.format.StatisticsDialogCreditFormatter(formatterSettings);
                    this.cachedFormatters[id] = formatter;
                    break;
                }
                case mgs.aurora.games.common.components.utils.text.format.CoinsFormatter.NAME:
                {
                    formatter = new mgs.aurora.games.common.components.utils.text.format.CoinsFormatter(formatterSettings);
                    this.cachedFormatters[id] = formatter;
                    break;
                }
                case mgs.aurora.games.common.components.utils.text.format.BigWinCreditsFormatter.NAME:
                {
                    formatter = new mgs.aurora.games.common.components.utils.text.format.BigWinCreditsFormatter(formatterSettings);
                    this.cachedFormatters[id] = formatter;
                    break;
                }
                default:
                {
                    _trace("WARNING: Unhandled formatting [" + id + "]", "error", this, 12673280);
                    break;
                }
            }
            return formatter;
        }

        public static function initialize(arg1:XML):void
        {
            staticInit = true;
            _instance = new TextFormat(arg1);
            return;
        }

        public static function get instance():mgs.aurora.games.common.components.utils.text.format.TextFormat
        {
            return _instance;
        }

        internal var cachedFormatters:flash.utils.Dictionary;

        internal var config:XML;

        internal static var staticInit:Boolean;

        internal static var _instance:mgs.aurora.games.common.components.utils.text.format.TextFormat;
    }
}


//                  class TextFormatEvent
package mgs.aurora.games.common.components.utils.text.format 
{
    import flash.events.*;
    
    public class TextFormatEvent extends flash.events.Event
    {
        public function TextFormatEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.games.common.components.utils.text.format.TextFormatEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("TextFormatEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="TextFormatEvent";

        public static const REFORMAT:String=NAME + "/type/textformatevent";
    }
}


//                class CharacterFriendlyName
package mgs.aurora.games.common.components.utils.text 
{
    import flash.utils.*;
    
    public class CharacterFriendlyName extends Object
    {
        public function CharacterFriendlyName()
        {
            super();
            throw new Error("CharacterFriendlyName is not intended to be instantiated.");
        }

        
        {
            charToString = new flash.utils.Dictionary();
            charToString[CHAR_SPACE] = SPACE;
            charToString[CHAR_EXCLAMATION] = EXCLAMATION;
            charToString[CHAR_QUOTATION] = QUOTATION;
            charToString[CHAR_HASH] = HASH;
            charToString[CHAR_PERCENT] = PERCENT;
            charToString[CHAR_AMPERSAND] = AMPERSAND;
            charToString[CHAR_APOSTROPHE] = APOSTROPHE;
            charToString[CHAR_LEFT_PARENTHESIS] = LEFT_PARENTHESIS;
            charToString[CHAR_RIGHT_PARENTHESIS] = RIGHT_PARENTHESIS;
            charToString[CHAR_ASTERISK] = ASTERISK;
            charToString[CHAR_PLUS] = PLUS;
            charToString[CHAR_COMMA] = COMMA;
            charToString[CHAR_HYPHEN] = HYPHEN;
            charToString[CHAR_FULL_STOP] = FULL_STOP;
            charToString[CHAR_FORWARD_SLASH] = FORWARD_SLASH;
            charToString[CHAR_COLON] = COLON;
            charToString[CHAR_SEMICOLON] = SEMICOLON;
            charToString[CHAR_LESSTHAN] = LESSTHAN;
            charToString[CHAR_GREATERTHAN] = GREATERTHAN;
            charToString[CHAR_EQUALS] = EQUALS;
            charToString[CHAR_QUESTION_MARK] = QUESTION_MARK;
            charToString[CHAR_AT] = AT;
            charToString[CHAR_LEFT_SQUARE_BRACKET] = LEFT_SQUARE_BRACKET;
            charToString[CHAR_RIGHT_SQUARE_BRACKET] = RIGHT_SQUARE_BRACKET;
            charToString[CHAR_BACKSLASH] = BACKSLASH;
            charToString[CHAR_UNDERSCORE] = UNDERSCORE;
            charToString[CHAR_KAPPIE] = KAPPIE;
            charToString[CHAR_LEFT_CURLY_BRACKET] = LEFT_CURLY_BRACKET;
            charToString[CHAR_RIGHT_CURLY_BRACKET] = RIGHT_CURLY_BRACKET;
            charToString[CHAR_PIPE] = PIPE;
            charToString[CHAR_TRADE_MARK] = TRADE_MARK;
            charToString[CHAR_COPYRIGHT] = COPYRIGHT;
            charToString[CHAR_REGISTERED] = REGISTERED;
            charToString[CHAR_DOLLAR] = DOLLAR;
            charToString[CHAR_EURO] = EURO;
            charToString[CHAR_POUND] = POUND;
            charToString[CHAR_KRONER] = KRONER;
            charToString[CHAR_RAND] = RAND;
            charToString[CHAR_CENT] = COINS;
        }

        public static function getFriendlyName(arg1:String):String
        {
            return charToString[arg1];
        }

        public static function getLegacyName(arg1:String):String
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case " ":
                {
                    return "SP";
                }
                case ".":
                {
                    return "FS";
                }
            }
            return null;
        }

        public static function getFriendlyNameByCharCode(arg1:Number):String
        {
            return charToString[String.fromCharCode(arg1)];
        }

        internal static const CHAR_PERCENT:String="%";

        internal static const CHAR_AMPERSAND:String="&";

        internal static const CHAR_APOSTROPHE:String="\'";

        internal static const CHAR_LEFT_PARENTHESIS:String="(";

        internal static const CHAR_RIGHT_PARENTHESIS:String=")";

        internal static const CHAR_ASTERISK:String="*";

        internal static const CHAR_PLUS:String="+";

        internal static const CHAR_COMMA:String=",";

        internal static const CHAR_HYPHEN:String="-";

        internal static const CHAR_FULL_STOP:String=".";

        internal static const CHAR_FORWARD_SLASH:String="/";

        internal static const CHAR_COLON:String=":";

        internal static const CHAR_SEMICOLON:String=";";

        internal static const CHAR_LESSTHAN:String="<";

        internal static const CHAR_GREATERTHAN:String=">";

        internal static const CHAR_EQUALS:String="=";

        internal static const CHAR_QUESTION_MARK:String="?";

        internal static const CHAR_AT:String="@";

        internal static const CHAR_LEFT_SQUARE_BRACKET:String="[";

        internal static const CHAR_RIGHT_SQUARE_BRACKET:String="]";

        internal static const CHAR_BACKSLASH:String="\\";

        internal static const CHAR_UNDERSCORE:String="_";

        internal static const CHAR_KAPPIE:String="^";

        internal static const CHAR_LEFT_CURLY_BRACKET:String="{";

        internal static const CHAR_RIGHT_CURLY_BRACKET:String="}";

        internal static const CHAR_PIPE:String="|";

        internal static const CHAR_TRADE_MARK:String="™";

        internal static const CHAR_COPYRIGHT:String="©";

        internal static const CHAR_REGISTERED:String="®";

        internal static const CHAR_DOLLAR:String="$";

        internal static const CHAR_EURO:String="€";

        internal static const CHAR_POUND:String="£";

        internal static const CHAR_RAND:String="R";

        internal static const CHAR_KRONER:String="r";

        internal static const CHAR_CENT:String="¢";

        public static const SPACE:String="Space";

        public static const EXCLAMATION:String="Exclamation";

        public static const QUOTATION:String="Quotation";

        public static const HASH:String="Hash";

        public static const PERCENT:String="Percent";

        public static const AMPERSAND:String="Ampersand";

        public static const APOSTROPHE:String="Apostrophe";

        public static const LEFT_PARENTHESIS:String="LeftParenthesis";

        public static const RIGHT_PARENTHESIS:String="RightParenthesis";

        public static const ASTERISK:String="Asterisk";

        public static const PLUS:String="Plus";

        public static const COMMA:String="Comma";

        public static const HYPHEN:String="Hyphen";

        public static const FULL_STOP:String="FullStop";

        public static const FORWARD_SLASH:String="ForwardSlash";

        public static const COLON:String="Colon";

        public static const SEMICOLON:String="Semicolon";

        public static const LESSTHAN:String="Lessthan";

        public static const GREATERTHAN:String="Greaterthan";

        public static const EQUALS:String="Equals";

        public static const QUESTION_MARK:String="QuestionMark";

        public static const AT:String="At";

        public static const LEFT_SQUARE_BRACKET:String="LeftSquareBracket";

        public static const RIGHT_SQUARE_BRACKET:String="RightSquareBracket";

        internal static const CHAR_SPACE:String=" ";

        public static const UNDERSCORE:String="Underscore";

        public static const KAPPIE:String="Kappie";

        public static const LEFT_CURLY_BRACKET:String="LeftCurlyBracket";

        public static const RIGHT_CURLY_BRACKET:String="RightCurlyBracket";

        public static const PIPE:String="Pipe";

        public static const TRADE_MARK:String="TradeMark";

        public static const COPYRIGHT:String="Copyright";

        public static const REGISTERED:String="Registered";

        public static const DOLLAR:String="Dollar";

        public static const BACKSLASH:String="BackSlash";

        public static const POUND:String="Pound";

        public static const RAND:String="Rand";

        public static const KRONER:String="Kroner";

        public static const COINS:String="Coins";

        public static const LOWER_CASE:String="Lower";

        internal static const CHAR_EXCLAMATION:String="!";

        internal static const CHAR_QUOTATION:String="\"";

        internal static const CHAR_HASH:String="#";

        public static const EURO:String="Euro";

        internal static var charToString:flash.utils.Dictionary;
    }
}


//              class CustomFont
package mgs.aurora.games.common.components.utils 
{
    import flash.display.*;
    import flash.system.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.framework.*;
    
    public class CustomFont extends Object implements mgs.aurora.games.common.components.generic.IDisposable
    {
        public function CustomFont(arg1:flash.system.ApplicationDomain, arg2:String, arg3:Number=4)
        {
            super();
            var loc1:*=mgs.aurora.games.framework.StageReference.stage;
            this.appDomain = arg1 != null ? arg1 : flash.system.ApplicationDomain.currentDomain;
            this.fontPrefix = arg2;
            this.widthOfAspace = arg3;
            if (this.appDomain.hasDefinition(this.fontPrefix + "FS")) 
            {
                this.fullstop_suffix = "FS";
            }
            else 
            {
                this.fullstop_suffix = "FullStop";
            }
            if (this.appDomain.hasDefinition(this.fontPrefix + "SP")) 
            {
                this.space_suffix = "SP";
            }
            else 
            {
                this.space_suffix = "Space";
            }
            mgs.aurora.games.common.components.utils.CustomFont.addFont(this);
            return;
        }

        public function getCharacter(arg1:String):flash.display.Sprite
        {
            var character:String;
            var C:Class;

            var loc1:*;
            character = arg1;
            C = null;
            if (character != ".") 
            {
                if (character != " ") 
                {
                    if (character != ",") 
                    {
                        if (character != "$") 
                        {
                            if (character != "€") 
                            {
                                if (character != "£") 
                                {
                                    if (character != "R") 
                                    {
                                        if (character != "k") 
                                        {
                                            if (character != "-") 
                                            {
                                                if (character == "/") 
                                                {
                                                    character = "Slash";
                                                }
                                            }
                                            else 
                                            {
                                                character = "Hyphen";
                                            }
                                        }
                                        else 
                                        {
                                            character = "Kroner";
                                        }
                                    }
                                    else 
                                    {
                                        character = "Rand";
                                    }
                                }
                                else 
                                {
                                    character = "Pound";
                                }
                            }
                            else 
                            {
                                character = "Euro";
                            }
                        }
                        else 
                        {
                            character = "Dollar";
                        }
                    }
                    else 
                    {
                        character = "Comma";
                    }
                }
                else 
                {
                    character = this.space_suffix;
                }
            }
            else 
            {
                character = this.fullstop_suffix;
            }
            try 
            {
                C = this.appDomain.getDefinition(this.fontPrefix + character) as Class;
            }
            catch (error:ReferenceError)
            {
            }
            finally
            {
                if (C == null) 
                {
                    var loc4:*=null;
                    1;
                    return loc4;
                }
                loc4 = new C();
                2;
                return loc4;
            }
        }

        public function getSpaceWidth():Number
        {
            return this.widthOfAspace;
        }

        public function toString():String
        {
            return this.fontPrefix;
        }

        public function dispose():void
        {
            this.appDomain = null;
            this.fontPrefix = null;
            return;
        }

        internal static function addFont(arg1:mgs.aurora.games.common.components.utils.CustomFont):void
        {
            if (mgs.aurora.games.common.components.utils.CustomFont.fonts == null) 
            {
                mgs.aurora.games.common.components.utils.CustomFont.fonts = new Object();
            }
            mgs.aurora.games.common.components.utils.CustomFont.fonts[arg1.toString()] = arg1;
            return;
        }

        public static function getFont(arg1:String):mgs.aurora.games.common.components.utils.CustomFont
        {
            return mgs.aurora.games.common.components.utils.CustomFont.fonts[arg1];
        }

        internal var appDomain:flash.system.ApplicationDomain;

        internal var fontPrefix:String;

        internal var space_suffix:String;

        internal var fullstop_suffix:String;

        internal var widthOfAspace:Number;

        internal static var fonts:Object;
    }
}


//              class CustomFontExt
package mgs.aurora.games.common.components.utils 
{
    public class CustomFontExt extends mgs.aurora.games.common.components.utils.CustomFont
    {
        public function CustomFontExt(arg1:String, arg2:Number=4)
        {
            this._fontPrefix = arg1;
            super(null, arg1, arg2);
            return;
        }

        internal var _fontPrefix:String;
    }
}


//              class CustomFontLabel
package mgs.aurora.games.common.components.utils 
{
    import flash.display.*;
    import mgs.aurora.games.common.components.generic.*;
    
    public class CustomFontLabel extends flash.display.Sprite implements mgs.aurora.games.common.components.generic.IDisposable
    {
        public function CustomFontLabel(arg1:mgs.aurora.games.common.components.utils.CustomFont, arg2:String="", arg3:String="left", arg4:int=0)
        {
            super();
            mouseChildren = false;
            mouseEnabled = false;
            this.container = new mgs.aurora.games.common.components.utils.FontContainerSprite();
            this.container.name = "text";
            this.container.x = 0;
            this.container.y = 0;
            this.container.mouseEnabled = false;
            this.container.mouseChildren = false;
            this.addChild(this.container);
            this.textChanged = false;
            this.trackingChanged = false;
            this.fontChanged = false;
            this.lock();
            this.font = arg1;
            this.text = arg2;
            this.align = arg3;
            this.tracking = arg4;
            this.unlock();
            return;
        }

        public function get font():mgs.aurora.games.common.components.utils.CustomFont
        {
            return this._font;
        }

        public function set font(arg1:mgs.aurora.games.common.components.utils.CustomFont):void
        {
            if (arg1 != this._font) 
            {
                this._font = arg1;
                this.fontChanged = true;
                this.render();
            }
            return;
        }

        public function get align():String
        {
            return this._align;
        }

        public function get fontContainer():flash.display.Sprite
        {
            return this.container;
        }

        public function set align(arg1:String):void
        {
            if (arg1 != this._align) 
            {
                this._align = arg1;
                this.realign();
            }
            return;
        }

        public function get length():int
        {
            return this._length;
        }

        public function get tracking():int
        {
            return this._tracking;
        }

        public function set tracking(arg1:int):void
        {
            if (arg1 != this._tracking) 
            {
                this._tracking = arg1;
                this.trackingChanged = true;
                this.render();
            }
            return;
        }

        public function get text():String
        {
            return this._text;
        }

        public function set text(arg1:String):void
        {
            this.textChanged = !(this._text == arg1);
            this.container.text = arg1;
            if (this.textChanged == true) 
            {
                this._text = arg1;
                this._length = this._text.length;
                this.render();
            }
            return;
        }

        internal function clear():void
        {
            var loc1:*=0;
            if (this.container.numChildren > 0) 
            {
                loc1 = this.container.numChildren;
                while (--loc1 >= 0) 
                {
                    this.container.removeChildAt(loc1);
                }
            }
            return;
        }

        internal function render():void
        {
            var loc1:*=false;
            var loc2:*=0;
            var loc3:*=null;
            if (this.font == null || this.locked == true) 
            {
                return;
            }
            if (this.textChanged || this.trackingChanged || this.fontChanged) 
            {
                this.clear();
                if (this.length > 0) 
                {
                    loc1 = false;
                    loc2 = 0;
                    while (loc2 < this._length) 
                    {
                        loc3 = this.font.getCharacter(this._text.charAt(loc2));
                        if (loc3 == null) 
                        {
                            if (this._text.charAt(loc2) == " ") 
                            {
                                loc1 = true;
                            }
                        }
                        else 
                        {
                            loc3.name = "val" + loc2;
                            if (loc2 > 0 && this.tracking > 0) 
                            {
                                loc3.x = loc3.x + (this.container.width + this.tracking);
                            }
                            else 
                            {
                                loc3.x = loc3.x + this.container.width;
                            }
                            if (loc1 == true) 
                            {
                                loc3.x = loc3.x + this.font.getSpaceWidth();
                                loc1 = false;
                            }
                            this.container.addChild(loc3);
                        }
                        ++loc2;
                    }
                    var loc4:*=this.align;
                    switch (loc4) 
                    {
                        case CustomFontLabel.LEFT_ALIGN:
                        case CustomFontLabel.CENTRE_ALIGN:
                        case CustomFontLabel.RIGHT_ALIGN:
                        {
                            this.realign();
                            break;
                        }
                    }
                }
                this.textChanged = false;
                this.trackingChanged = false;
                this.fontChanged = false;
            }
            return;
        }

        protected function realign():void
        {
            var loc1:*=NaN;
            if (this.container.width > 0) 
            {
                loc1 = 0;
                var loc2:*=this.align;
                switch (loc2) 
                {
                    case CustomFontLabel.LEFT_ALIGN:
                    {
                        this.container.x = 0;
                        break;
                    }
                    case CustomFontLabel.CENTRE_ALIGN:
                    {
                        this.container.x = Math.floor(this.container.width / 2) * -1;
                        break;
                    }
                    case CustomFontLabel.RIGHT_ALIGN:
                    {
                        this.container.x = this.container.width * -1;
                        break;
                    }
                }
            }
            return;
        }

        public function lock():void
        {
            this.locked = true;
            return;
        }

        public function unlock():void
        {
            this.locked = false;
            this.render();
            return;
        }

        public function dispose():void
        {
            this.clear();
            this._font = null;
            this._align = null;
            this.text = null;
            return;
        }

        public static const LEFT_ALIGN:String="left";

        public static const CENTRE_ALIGN:String="center";

        public static const RIGHT_ALIGN:String="right";

        internal var _align:String;

        internal var _font:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _length:int;

        internal var _text:String;

        internal var _tracking:int;

        internal var container:mgs.aurora.games.common.components.utils.FontContainerSprite;

        internal var locked:Boolean;

        internal var textChanged:Boolean;

        internal var trackingChanged:Boolean;

        internal var fontChanged:Boolean;
    }
}


//              class CustomFontLabelExt
package mgs.aurora.games.common.components.utils 
{
    public class CustomFontLabelExt extends mgs.aurora.games.common.components.utils.CustomFontLabel
    {
        public function CustomFontLabelExt(arg1:mgs.aurora.games.common.components.utils.CustomFont, arg2:String="", arg3:String="left", arg4:int=0, arg5:int=0)
        {
            super(arg1, arg2, arg3, arg4);
            this._maxWidth = arg5;
            fontContainer.mouseChildren = false;
            fontContainer.mouseEnabled = false;
            return;
        }

        public override function set text(arg1:String):void
        {
            fontContainer.scaleX = 1;
            fontContainer.scaleY = 1;
            super.text = arg1;
            var loc1:*=fontContainer.height;
            var loc2:*=1;
            if (this._maxWidth > 0) 
            {
                loc2 = this._maxWidth / fontContainer.width;
                if (loc2 > 1) 
                {
                    loc2 = 1;
                }
            }
            var loc3:*=loc1 * loc2;
            if (this._maxWidth > 0) 
            {
                fontContainer.y = int((loc1 - loc3) / 2);
            }
            fontContainer.scaleX = loc2;
            fontContainer.scaleY = loc2;
            super.realign();
            return;
        }

        internal var _maxWidth:int=0;
    }
}


//              class DataTypeConversion
package mgs.aurora.games.common.components.utils 
{
    import __AS3__.vec.*;
    
    public class DataTypeConversion extends Object
    {
        public function DataTypeConversion()
        {
            super();
            return;
        }

        public static function stringToBoolean(arg1:String):Boolean
        {
            return arg1.toLocaleLowerCase() == "true";
        }

        public static function csvToVectorUint(arg1:String):__AS3__.vec.Vector.<uint>
        {
            var loc1:*=arg1.split(",");
            var loc2:*=new Vector.<uint>();
            var loc3:*=0;
            while (loc3 < loc1.length) 
            {
                loc2.push(uint(loc1[loc3]));
                ++loc3;
            }
            return loc2;
        }
    }
}


//              class FontContainerSprite
package mgs.aurora.games.common.components.utils 
{
    import flash.display.*;
    
    public class FontContainerSprite extends flash.display.Sprite
    {
        public function FontContainerSprite()
        {
            super();
            this._text = null;
            return;
        }

        public function get text():String
        {
            return this._text;
        }

        public function set text(arg1:String):void
        {
            this._text = arg1;
            return;
        }

        internal var _text:String;
    }
}


//              class GameHelper
package mgs.aurora.games.common.components.utils 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public final class GameHelper extends Object
    {
        public function GameHelper()
        {
            super();
            throw new Error("Can’t instantiate GameHelper!");
        }

        public static function resetWinOnFreeGameSwitch():Boolean
        {
            var conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

            var loc1:*;
            conductor = mgs.aurora.games.logicBlocks.agents.ConductorAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME));
            try 
            {
                if (conductor.isReady) 
                {
                    if (conductor.freeGamesData.isFreeGameActive) 
                    {
                        if (conductor.freeGamesData.lastPlayedFreeGameId != conductor.freeGamesData.activeGame.uniqueId) 
                        {
                            return true;
                        }
                        return false;
                    }
                    if (conductor.freeGamesData.previousFreeGameTest || conductor.freeGamesData.previousFreeGameSelectedTest) 
                    {
                        return true;
                    }
                }
                else 
                {
                    throw new Error("Conductor not Ready yet. Try to use it in a \'isReady\' \'if\' clause instead.");
                }
            }
            catch (e:Error)
            {
                mgs.aurora.games.base.BaseClass.trace(e.message, "GCL", null, 16711680);
            }
            return false;
        }
    }
}


//              class SaveDelay
package mgs.aurora.games.common.components.utils 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    
    public class SaveDelay extends mgs.aurora.games.base.BaseClass
    {
        public function SaveDelay(arg1:String, arg2:int, arg3:String)
        {
            super();
            setClassDescription("mgs.aurora.games.common.components.utils.SaveDelay");
            this._delay = arg2;
            this._storageName = arg1;
            this._keyName = arg3;
            this._timer = new flash.utils.Timer(arg2, 1);
            return;
        }

        public function save(arg1:*):void
        {
            this._keyValue = arg1;
            if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
            {
                this._timer.stop();
                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.saveValues);
            }
            this._timer = new flash.utils.Timer(this._delay, 1);
            this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.saveValues);
            this._timer.start();
            return;
        }

        internal function saveValues(arg1:flash.events.TimerEvent):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(this._storageName, this._keyName, this._keyValue);
            return;
        }

        internal function cleanup(arg1:flash.events.TimerEvent=null):void
        {
            if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
            {
                this._timer.stop();
                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.saveValues);
            }
            return;
        }

        public override function dispose():void
        {
            this.cleanup();
            this._timer = null;
            super.dispose();
            return;
        }

        internal var _timer:flash.utils.Timer;

        internal var _storageName:String;

        internal var _delay:int;

        internal var _keyName:String;

        internal var _keyValue:*;
    }
}


//              class Scrambler
package mgs.aurora.games.common.components.utils 
{
    import __AS3__.vec.*;
    
    public class Scrambler extends Object
    {
        public function Scrambler()
        {
            super();
            return;
        }

        public static function unscrambleArray(arg1:String):String
        {
            var loc6:*=NaN;
            var loc7:*=null;
            var loc1:*=Vector.<String>(arg1.split(""));
            loc1.reverse();
            var loc2:*=parseInt(loc1.slice(0, 2).join(""), 26);
            var loc3:*="";
            var loc4:*="";
            var loc5:*=2;
            while (loc5 < loc1.length) 
            {
                if ((loc3 = loc3 + loc1[loc5]).length >= 2) 
                {
                    loc6 = parseInt(loc3, 30);
                    loc7 = (loc7 = Scrambler.convertToDigitString(loc6.toString(2), 9)).substring(0, 7);
                    loc6 = (loc6 = parseInt(loc7, 2)) ^ loc2;
                    loc4 = loc4 + String.fromCharCode(loc6 + 13);
                    loc3 = "";
                }
                ++loc5;
            }
            return loc4;
        }

        internal static function convertToDigitString(arg1:String, arg2:Number):String
        {
            var loc1:*="";
            var loc2:*=arg2 - arg1.length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc1 = loc1 + "0";
                ++loc3;
            }
            return loc1 + arg1;
        }
    }
}


//              class StringFormatting
package mgs.aurora.games.common.components.utils 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    
    public class StringFormatting extends Object
    {
        public function StringFormatting()
        {
            super();
            return;
        }

        public static function formatAsCoins(arg1:Number, arg2:Number):String
        {
            var loc1:*=NaN;
            if ("formatCoinsDisplay" in mgs.aurora.games.framework.AuroraReference.aurora.banking.display) 
            {
                loc1 = Math.floor(arg1 / arg2);
                return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatCoinsDisplay(loc1);
            }
            return String(Math.floor(arg1 / arg2));
        }

        public static function formatAsCredits(arg1:Number, arg2:String=".", arg3:Boolean=true):String
        {
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=null;
            var loc7:*=null;
            var loc1:*;
            var loc2:*=(loc1 = String(arg1)).length > 2 ? loc1.slice(0, loc1.length - 2) : "0";
            var loc3:*=loc1.length > 1 ? loc1.slice(loc1.length - 2) : "0" + loc1;
            if (mgs.aurora.games.common.dataTypes.CreditFormatModel.useCurrency) 
            {
                if (arg3) 
                {
                    return mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatToCurrency(arg1, mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC, null, true);
                }
                loc5 = (loc4 = mgs.aurora.games.framework.AuroraReference.aurora.banking.display.formatToCurrency(arg1, mgs.aurora.api.enums.CurrencyFormat.SYMBOL_GENERIC, null, true)).indexOf(" ");
                loc6 = loc4.substring(0, loc5);
                loc7 = loc4.substring(loc5 + 1);
                return loc6.concat(loc7);
            }
            return loc2 + arg2 + loc3;
        }

        public static function insertArgs(arg1:String, ... rest):String
        {
            var loc1:*=0;
            while (loc1 < rest.length) 
            {
                arg1 = arg1.split("{" + loc1 + "}").join(rest[loc1]);
                ++loc1;
            }
            return arg1;
        }

        public static function insertObjectStrings(arg1:String, arg2:Object):String
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=arg2;
            for (loc1 in loc5) 
            {
                loc2 = "{" + loc1 + "}";
                loc3 = getPlaceHolderStartAndEndIndex(arg1, loc2);
                while (loc3.startIndex != -1) 
                {
                    arg1 = mgs.aurora.games.common.components.utils.StringFormatting.insertNextValue(arg1, arg2[loc1], loc3);
                    loc3 = getPlaceHolderStartAndEndIndex(arg1, loc2);
                }
            }
            return arg1;
        }

        internal static function insertNextValue(arg1:String, arg2:String, arg3:Object):String
        {
            var loc1:*=arg1.substring(0, arg3.startIndex);
            var loc2:*=arg1.substring(arg3.endIndex);
            return loc1 + arg2 + loc2;
        }

        internal static function getPlaceHolderStartAndEndIndex(arg1:String, arg2:String):Object
        {
            var loc1:*=new Object();
            loc1.startIndex = arg1.indexOf(arg2);
            loc1.endIndex = loc1.startIndex + arg2.length;
            return loc1;
        }

        internal static function numberFormat(arg1:*, arg2:int=2, arg3:Boolean=false, arg4:Boolean=true):String
        {
            var loc7:*=0;
            var loc1:*=0;
            var loc2:*=Math.pow(10, arg2);
            var loc3:*;
            var loc4:*;
            var loc5:*=(loc4 = (loc3 = String(Math.round(loc2 * Number(arg1)) / loc2)).indexOf(".") == -1) ? loc3.length : loc3.indexOf(".");
            var loc6:*=(loc4 && !arg3 ? "" : arg4 ? "," : ".") + loc3.substr(loc5 + 1);
            if (arg3) 
            {
                loc7 = 0;
                while (loc7 <= arg2 - (loc3.length - (loc4 ? (loc5 - 1) : loc5))) 
                {
                    loc6 = loc6 + "0";
                    ++loc7;
                }
            }
            while (loc1 + 3 < (loc3.substr(0, 1) != "-" ? loc5 : (loc5 - 1))) 
            {
                var loc8:*;
                loc1 = loc8 = loc1 + 3;
                loc6 = (arg4 ? "." : ",") + loc3.substr(loc5 - loc8, 3) + loc6;
            }
            return loc3.substr(0, loc5 - loc1) + loc6;
        }
    }
}


//              class Toolbox
package mgs.aurora.games.common.components.utils 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    import org.as3lib.kitchensync.action.*;
    
    public final class Toolbox extends Object
    {
        public function Toolbox()
        {
            super();
            throw new Error("Can’t instantiate Toolbox!");
        }

        public static function timeLineWatcher(arg1:flash.display.MovieClip, arg2:Function, arg3:int=1, arg4:*=1, arg5:*=-1):void
        {
            var target:flash.display.MovieClip;
            var callback:Function;
            var delay:int=1;
            var start:*=1;
            var end:*=-1;
            var killme:Function;

            var loc1:*;
            killme = null;
            target = arg1;
            callback = arg2;
            delay = arg3;
            start = arg4;
            end = arg5;
            target.gotoAndStop(start);
            delay = delay <= 0 ? 1 : delay;
            killme = function (arg1:flash.events.Event):void
            {
                if (arg1.target.currentFrameLabel == end || arg1.target.currentFrame == end) 
                {
                    if (callback != null) 
                    {
                        callback(arg1.target);
                    }
                    arg1.target.removeEventListener(flash.events.Event.ENTER_FRAME, killme);
                }
                else if (arg1.target.currentFrame == arg1.target.totalFrames) 
                {
                    if (callback != null) 
                    {
                        callback(arg1.target);
                    }
                    arg1.target.removeEventListener(flash.events.Event.ENTER_FRAME, killme);
                }
                return;
            }
            target.addEventListener(flash.events.Event.ENTER_FRAME, killme);
            new org.as3lib.kitchensync.action.KSFunction(target.play, delay).start();
            return;
        }

        public static function getMonths(arg1:int):String
        {
            return mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("MONTHS").split(",")[(arg1 - 1)];
        }

        public static function to(arg1:*, arg2:String, arg3:Number, arg4:Number, arg5:Function=null):void
        {
            var target:*;
            var property:String;
            var increment:Number;
            var end:Number;
            var callback:Function=null;

            var loc1:*;
            target = arg1;
            property = arg2;
            increment = arg3;
            end = arg4;
            callback = arg5;
            if (eventMap[target] === target) 
            {
                mgs.aurora.games.framework.StageReference.stage.addEventListener(flash.events.Event.ENTER_FRAME, eventMap[target]);
            }
            with ({}) 
            {
            };
            target[
#error('pushwith') {}
            ] = 
#error('pushwith') {}
            .killme = function (arg1:flash.events.Event):void
            {
                if (target[property] <= end) 
                {
                    target[property] = target[property] + increment;
                    if (target[property] >= end) 
                    {
                        if (callback != null) 
                        {
                            callback();
                        }
                        mgs.aurora.games.framework.StageReference.stage.addEventListener(flash.events.Event.ENTER_FRAME, eventMap[target]);
                        eventMap[target] = null;
                    }
                }
                else 
                {
                    target[property] = target[property] - increment;
                    if (target[property] <= end) 
                    {
                        if (callback != null) 
                        {
                            callback();
                        }
                        mgs.aurora.games.framework.StageReference.stage.addEventListener(flash.events.Event.ENTER_FRAME, eventMap[target]);
                        eventMap[target] = null;
                    }
                }
                return;
            }
            mgs.aurora.games.framework.StageReference.stage.addEventListener(flash.events.Event.ENTER_FRAME, eventMap[target]);
            return;
        }

        public static function coinShapeAdder(arg1:String):String
        {
            var loc1:*=new String();
            var loc2:*=0;
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc1 = loc1 + arg1.charAt(arg1.length - loc3);
                if (loc2 == 3) 
                {
                    if (arg1.charAt(arg1.length - loc3) != ".") 
                    {
                        loc1 = loc1 + " ";
                    }
                    loc2 = 0;
                }
                ++loc2;
                ++loc3;
            }
            loc1 = loc1 + arg1.charAt(0);
            arg1 = new String();
            var loc4:*=0;
            while (loc4 < loc1.length) 
            {
                arg1 = arg1 + loc1.charAt(loc1.length - loc4);
                ++loc4;
            }
            arg1 = arg1 + loc1.charAt(0);
            return arg1;
        }

        public static function framesToSeconds(arg1:flash.display.MovieClip, arg2:Number):Number
        {
            mgs.aurora.games.base.BaseClass.trace(arg1.totalFrames);
            mgs.aurora.games.base.BaseClass.trace(arg1.currentFrame);
            return Math.abs((arg1.totalframes - arg1.currentframe - 1)) / arg2;
        }

        public static function traceChildren(arg1:*, arg2:String="", arg3:int=0, arg4:int=0):void
        {
            var target:*;
            var indent:String="";
            var movieLevel:int=0;
            var level:int=0;
            var i:int;
            var mov:*;

            var loc1:*;
            i = 0;
            mov = undefined;
            target = arg1;
            indent = arg2;
            movieLevel = arg3;
            level = arg4;
            try 
            {
                mgs.aurora.games.base.BaseClass.trace(indent + "+Element [" + target.name + "] has [" + target.numChildren + "] children . Level:" + target.parent.getChildIndex(target) + " type:" + target.toString(), "test", null, 128);
                indent = indent + "|   ";
                i = 0;
                while (i < target.numChildren) 
                {
                    mov = target.getChildAt(i);
                    Toolbox.traceChildren(mov, indent, mov.parent.getChildIndex(mov), level + 1);
                    ++i;
                }
            }
            catch (e:ReferenceError)
            {
                mgs.aurora.games.base.BaseClass.trace(indent + "+Element [" + target.name + "]. Level:" + target.parent.getChildIndex(target) + " type:" + target.toString(), "test", null, 128);
            }
            return;
        }

        
        {
            eventMap = new flash.utils.Dictionary(true);
        }

        public static const ENDFRAME_EVENT:String="endFrame";

        internal static var eventMap:flash.utils.Dictionary;
    }
}


//          package dataTypes
//            class CommonModalRules
package mgs.aurora.games.common.dataTypes 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class CommonModalRules extends Object
    {
        public function CommonModalRules()
        {
            super();
            throw new Error("Can\'t Instantiate CommonModalRules");
        }

        public static function logo(arg1:String="false"):Boolean
        {
            var showDuringFreeSpins:String="false";
            var freespins:mgs.aurora.games.logicBlocks.data.FreeSpinsData;
            var state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            var response:mgs.aurora.games.logicBlocks.data.ResponseData;

            var loc1:*;
            freespins = null;
            state = null;
            response = null;
            showDuringFreeSpins = arg1;
            try 
            {
                freespins = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeSpinsData;
                state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
                response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
                loc2 = state.state;
                switch (loc2) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    {
                        if (state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY || state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY) 
                        {
                            return true;
                        }
                        if (response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                        {
                            return false;
                        }
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                    {
                        return false;
                        break;
                    }
                }
                if (state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUSPEND || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUSPEND) 
                {
                    return false;
                }
                if (showDuringFreeSpins == "false" && freespins.isFreespinsActive) 
                {
                    return false;
                }
            }
            catch (e:Error)
            {
                mgs.aurora.games.base.BaseClass.trace(e.getStackTrace(), "error", null, 16711680);
            }
            return true;
        }

        public static function fiveOfKind(arg1:String="false", arg2:Number=-1):Boolean
        {
            var showDuringFreeSpins:String="false";
            var randomChance:Number=-1;
            var freespins:mgs.aurora.games.logicBlocks.data.FreeSpinsData;
            var state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            var response:mgs.aurora.games.logicBlocks.data.ResponseData;
            var options:mgs.aurora.games.logicBlocks.data.OptionsData;
            var autoPlayActive:Boolean;
            var i:int;
            var random:Number;

            var loc1:*;
            freespins = null;
            state = null;
            response = null;
            options = null;
            autoPlayActive = false;
            i = 0;
            random = NaN;
            showDuringFreeSpins = arg1;
            randomChance = arg2;
            try 
            {
                freespins = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeSpinsData;
                state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
                response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
                options = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.OptionsData;
                autoPlayActive = mgs.aurora.games.logicBlocks.agents.ConductorAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME)).autoplay.autoPlayActive;
                if (freespins.isFreespinsActive && showDuringFreeSpins == "false" || options.isQuickSpin && autoPlayActive) 
                {
                    return false;
                }
                if (state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) 
                {
                    return false;
                }
                loc2 = state.state;
                switch (loc2) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    {
                        return false;
                        break;
                    }
                }
                if (!freespins.isFreespinsActive) 
                {
                    i = 0;
                    while (i < response.wins.numberOf) 
                    {
                        if (response.wins.wins[i].matchPos.length >= 5 && !(response.wins.wins[i].id == -1)) 
                        {
                            return true;
                        }
                        ++i;
                    }
                }
                if (randomChance > 0) 
                {
                    random = Math.random() * 100;
                    if (random <= randomChance) 
                    {
                        return true;
                    }
                }
            }
            catch (e:Error)
            {
                mgs.aurora.games.base.BaseClass.trace(e.getStackTrace(), "error", null, 16711680);
            }
            return false;
        }

        public static function freespinFiveOfKind(arg1:String="true", arg2:Number=-1):Boolean
        {
            var showDuringFreeSpins:String="true";
            var randomChance:Number=-1;
            var freespins:mgs.aurora.games.logicBlocks.data.FreeSpinsData;
            var state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            var response:mgs.aurora.games.logicBlocks.data.ResponseData;
            var options:mgs.aurora.games.logicBlocks.data.OptionsData;
            var autoPlayActive:Boolean;
            var i:int;
            var random:Number;

            var loc1:*;
            freespins = null;
            state = null;
            response = null;
            options = null;
            autoPlayActive = false;
            i = 0;
            random = NaN;
            showDuringFreeSpins = arg1;
            randomChance = arg2;
            try 
            {
                freespins = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeSpinsData;
                state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
                response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
                options = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.OptionsData;
                autoPlayActive = mgs.aurora.games.logicBlocks.agents.ConductorAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME)).autoplay.autoPlayActive;
                loc2 = state.state;
                switch (loc2) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    {
                        return false;
                        break;
                    }
                }
                if (state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) 
                {
                    return false;
                }
                if (options.isQuickSpin && autoPlayActive) 
                {
                    return false;
                }
                if (freespins.isFreespinsActive && showDuringFreeSpins == "true") 
                {
                    i = 0;
                    while (i < response.wins.numberOf) 
                    {
                        if (response.wins.wins[i].matchPos.length >= 5 && !(response.wins.wins[i].id == -1)) 
                        {
                            return true;
                        }
                        ++i;
                    }
                }
                if (randomChance > 0) 
                {
                    random = Math.random() * 100;
                    if (random <= randomChance) 
                    {
                        return true;
                    }
                }
            }
            catch (e:Error)
            {
                mgs.aurora.games.base.BaseClass.trace(e.getStackTrace(), "error", null, 16711680);
            }
            return false;
        }

        public static function reTriggerFreeSpins(arg1:String="true", arg2:String="2", arg3:Number=-1):Boolean
        {
            var showDuringFreeSpins:String="true";
            var minimumNeeded:String="2";
            var randomChance:Number=-1;
            var freespins:mgs.aurora.games.logicBlocks.data.FreeSpinsData;
            var state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            var response:mgs.aurora.games.logicBlocks.data.ResponseData;
            var options:mgs.aurora.games.logicBlocks.data.OptionsData;
            var min:int;
            var i:int;
            var random:Number;

            var loc1:*;
            freespins = null;
            state = null;
            response = null;
            options = null;
            min = 0;
            i = 0;
            random = NaN;
            showDuringFreeSpins = arg1;
            minimumNeeded = arg2;
            randomChance = arg3;
            try 
            {
                freespins = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeSpinsData;
                state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
                response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
                options = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.OptionsData;
                loc2 = state.state;
                switch (loc2) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                    {
                        return false;
                        break;
                    }
                }
                if (options.isQuickSpin) 
                {
                    return false;
                }
                if (state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) 
                {
                    return false;
                }
                if (freespins.isFreespinsActive && showDuringFreeSpins == "true") 
                {
                    min = int(minimumNeeded);
                    i = 0;
                    while (i < response.wins.numberOf) 
                    {
                        if (response.wins.wins[i].payline == -1 && response.wins.wins[i].matchPos.length >= min) 
                        {
                            return true;
                        }
                        ++i;
                    }
                }
                else 
                {
                    return false;
                }
                if (randomChance > 0) 
                {
                    random = Math.random() * 100;
                    if (random <= randomChance) 
                    {
                        return true;
                    }
                }
            }
            catch (e:Error)
            {
                mgs.aurora.games.base.BaseClass.trace(e.getStackTrace(), "error", null, 16711680);
            }
            return false;
        }

        public static function scatterWins(arg1:String="false", arg2:String="2", arg3:Number=-1):Boolean
        {
            var showDuringFreeSpins:String="false";
            var minimumNeeded:String="2";
            var randomChance:Number=-1;
            var freespins:mgs.aurora.games.logicBlocks.data.FreeSpinsData;
            var response:mgs.aurora.games.logicBlocks.data.ResponseData;
            var state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            var options:mgs.aurora.games.logicBlocks.data.OptionsData;
            var autoplay:mgs.aurora.games.logicBlocks.data.AutoPlayData;
            var min:int;
            var i:int;
            var random:Number;

            var loc1:*;
            freespins = null;
            response = null;
            state = null;
            options = null;
            autoplay = null;
            min = 0;
            i = 0;
            random = NaN;
            showDuringFreeSpins = arg1;
            minimumNeeded = arg2;
            randomChance = arg3;
            try 
            {
                freespins = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeSpinsData;
                response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
                state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
                options = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.OptionsData;
                autoplay = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.AutoPlayData;
                if (freespins.isFreespinsActive && showDuringFreeSpins == "false") 
                {
                    return false;
                }
                if (state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) 
                {
                    return false;
                }
                if (options.isQuickSpin && autoplay.autoPlayActive) 
                {
                    return false;
                }
                min = int(minimumNeeded);
                i = 0;
                while (i < response.wins.numberOf) 
                {
                    if (response.wins.wins[i].payline == -1 && response.wins.wins[i].matchPos.length >= min) 
                    {
                        return true;
                    }
                    ++i;
                }
                if (randomChance > 0) 
                {
                    random = Math.random() * 100;
                    if (random <= randomChance) 
                    {
                        return true;
                    }
                }
            }
            catch (e:Error)
            {
                mgs.aurora.games.base.BaseClass.trace(e.getStackTrace(), "error", null, 16711680);
            }
            return false;
        }

        public static const LOGO:String="logo";

        public static const FIVEOFKIND:String="fiveOfKind";

        public static const FREESPINS_FIVEOFKIND:String="freespinFiveOfKind";

        public static const TRIGGER_FREESPINS:String="reTriggerFreeSpins";

        public static const SCATTERWINS:String="scatterWins";
    }
}


//            class CreditFormatModel
package mgs.aurora.games.common.dataTypes 
{
    import mgs.aurora.games.common.statics.formatting.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public class CreditFormatModel extends Object
    {
        public function CreditFormatModel(arg1:XML)
        {
            super();
            if (!initializing) 
            {
                throw new Error("CreditFormatModel can not be instantiated");
            }
            initializing = false;
            this.parseConfig(arg1);
            return;
        }

        internal function parseConfig(arg1:XML):void
        {
            this._mode = arg1.@mode.toXMLString();
            this._defaultMode = arg1.@default.toXMLString();
            this._useCurrency = arg1.@useCurrency.toXMLString() != "1" ? false : true;
            this.sanityCheckCreditConfig(this._mode, this._defaultMode);
            var loc1:*=mgs.aurora.games.logicBlocks.data.CustomRuleSet(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.CustomRuleSet.PUBLISHER_NAME));
            return;
        }

        internal function sanityCheckCreditConfig(arg1:String, arg2:String):void
        {
            if (arg1 == "" || !(arg1 == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS) && !(arg1 == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.CREDITS) && !(arg1 == mgs.aurora.games.common.statics.formatting.CreditFormattingConfigMode.SWITCHABLE)) 
            {
                throw new Error("Invalid credit formatting mode supplied.");
            }
            if (!(arg1 == mgs.aurora.games.common.statics.formatting.CreditFormattingConfigMode.SWITCHABLE) && arg1 == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS && !(arg2 == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.COINS) || arg1 == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.CREDITS && !(arg2 == mgs.aurora.games.common.statics.formatting.CreditFormattingMode.CREDITS)) 
            {
                throw new Error("Default does not match mode " + arg1 + ".");
            }
            return;
        }

        public static function initialize(arg1:XML):void
        {
            initializing = true;
            _instance = new CreditFormatModel(arg1);
            return;
        }

        public static function get configuredFormattingMode():String
        {
            return _instance._mode;
        }

        public static function get defaultMode():String
        {
            return _instance._defaultMode;
        }

        public static function get useCurrency():Boolean
        {
            return _instance._useCurrency;
        }

        internal var _mode:String;

        internal var _defaultMode:String;

        internal var _useCurrency:Boolean=false;

        internal static var _instance:mgs.aurora.games.common.dataTypes.CreditFormatModel;

        internal static var initializing:Boolean;
    }
}


//            class FormattingConfig
package mgs.aurora.games.common.dataTypes 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class FormattingConfig extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function FormattingConfig()
        {
            super();
            if (!singletonCheck) 
            {
                throw new Error("Singleton class FormattingConfig cant be instantiated.");
            }
            singletonCheck = false;
            setClassDescription("mgs.aurora.games.common.dataTypes.FormattingConfig");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_FORMATTING);
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=XMLList(arg1.data)[0];
            mgs.aurora.games.common.dataTypes.CreditFormatModel.initialize(loc1.settings.CreditsFormatter[0]);
            mgs.aurora.games.common.components.utils.text.format.TextFormat.initialize(loc1);
            mgs.aurora.games.common.components.ui.components.text.resizable.RegionIndex.initialize(loc1.regions[0]);
            return;
        }

        public static function initialize():void
        {
            singletonCheck = true;
            instance = new FormattingConfig();
            return;
        }

        internal static var instance:mgs.aurora.games.common.dataTypes.FormattingConfig;

        internal static var singletonCheck:Boolean;
    }
}


//            class FreeSpinsSummaryCharacterAnimationData
package mgs.aurora.games.common.dataTypes 
{
    import flash.geom.*;
    
    public class FreeSpinsSummaryCharacterAnimationData extends Object
    {
        public function FreeSpinsSummaryCharacterAnimationData(arg1:String, arg2:String, arg3:String, arg4:Number, arg5:Number, arg6:Number, arg7:Number, arg8:Number, arg9:Number, arg10:Number, arg11:Number, arg12:String)
        {
            super();
            this._id = arg1;
            this._resourceId = arg2;
            this._layerName = arg3;
            this._startAlpha = arg4;
            this._endAlpha = arg5;
            this._startPosition = new flash.geom.Point(arg6, arg7);
            this._endPosition = new flash.geom.Point(arg8, arg9);
            this._delayToStart = arg10;
            this._duration = arg11;
            this._easing = arg12;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get resourceId():String
        {
            return this._resourceId;
        }

        public function get layerName():String
        {
            return this._layerName;
        }

        public function get startPosition():flash.geom.Point
        {
            return this._startPosition;
        }

        public function get endPosition():flash.geom.Point
        {
            return this._endPosition;
        }

        public function get delayToStart():Number
        {
            return this._delayToStart;
        }

        public function get duration():Number
        {
            return this._duration;
        }

        public function get easing():String
        {
            return this._easing;
        }

        public function get startAlpha():Number
        {
            return this._startAlpha;
        }

        public function get endAlpha():Number
        {
            return this._endAlpha;
        }

        internal var _id:String;

        internal var _resourceId:String;

        internal var _layerName:String;

        internal var _startPosition:flash.geom.Point;

        internal var _endPosition:flash.geom.Point;

        internal var _delayToStart:Number;

        internal var _duration:Number;

        internal var _easing:String;

        internal var _startAlpha:Number;

        internal var _endAlpha:Number;
    }
}


//            class FreeSpinsSummaryData
package mgs.aurora.games.common.dataTypes 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    
    public class FreeSpinsSummaryData extends mgs.aurora.games.base.BaseClass
    {
        public function FreeSpinsSummaryData(arg1:XML, arg2:Function)
        {
            var summaryNode:XML;
            var callback:Function;
            var list:XMLList;

            var loc1:*;
            list = null;
            summaryNode = arg1;
            callback = arg2;
            super();
            setClassDescription("mgs.aurora.games.common.dataTypes.FreeSpinsSummaryData");
            this._id = summaryNode.@id.toString();
            this._views = summaryNode.@views.toString().split(",");
            this._callback = callback;
            var loc3:*=0;
            var loc4:*=summaryNode.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "hasOwnSummaryButton") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._hasOwnBtn = Boolean(loc2.@val);
            if (this._hasOwnBtn) 
            {
                loc3 = 0;
                loc4 = summaryNode.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "buttonX") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._btnX = loc2.@val;
                loc3 = 0;
                loc4 = summaryNode.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "buttonY") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._btnY = loc2.@val;
                loc3 = 0;
                loc4 = summaryNode.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "buttonName") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._btnName = loc2.@val.toString();
            }
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "summaryScreenFadeInTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._summaryScreenFadeInTime = Number(loc2.@val);
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "summaryScreenFadeOutTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._summaryScreenFadeOutTime = Number(loc2.@val);
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "summaryScreenFadeOutEasing") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._summaryScreenFadeOutEasing = loc2.@val.toString();
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "level") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._level = loc2.@val.toString();
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "x") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._x = Number(loc2.@val);
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "y") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._y = Number(loc2.@val);
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "displayAs") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._currency = loc2.@val.toString();
            this._currency = this._currency == COINS || this._currency == CREDITS || this._currency == BOTH ? this._currency : BOTH;
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "summaryScreen") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._summaryScreen = loc2.@val.toString();
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "summaryFontLinkage") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._customFontLabelLinkage = loc2.@val.toString();
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "creditFormatXOffset") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._creditFormatXOffset = Number(loc2.@val);
            loc3 = 0;
            loc4 = summaryNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "creditFormatYOffset") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._creditFormatYOffset = Number(loc2.@val);
            list = summaryNode.characterAnimations.characterAnimation;
            if (list && list.length() > 0) 
            {
                this.populateCharacterAnimationSettings(list);
            }
            return;
        }

        public function get creditFormatXOffset():Number
        {
            return this._creditFormatXOffset;
        }

        public function activeInView(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._views.length) 
            {
                if (this._views[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get views():Array
        {
            return this._views;
        }

        public function get btnMovie():flash.display.MovieClip
        {
            return this._btnMovie;
        }

        public function get summaryBtn():mgs.aurora.games.common.components.ui.components.button.ArtButton
        {
            return this._summaryBtn;
        }

        public function get hasOwnBtn():Boolean
        {
            return this._hasOwnBtn;
        }

        public function get btnName():String
        {
            return this._btnName;
        }

        public function get summaryScreen():String
        {
            return this._summaryScreen;
        }

        public function get x():Number
        {
            return this._x;
        }

        public function get y():Number
        {
            return this._y;
        }

        public function get btnX():Number
        {
            return this._btnX;
        }

        public function get btnY():Number
        {
            return this._btnY;
        }

        public function get summaryScreenFadeInTime():Number
        {
            return this._summaryScreenFadeInTime;
        }

        public function get summaryScreenFadeOutTime():Number
        {
            return this._summaryScreenFadeOutTime;
        }

        public function get summaryScreenFadeOutEasing():String
        {
            return this._summaryScreenFadeOutEasing;
        }

        public function get level():String
        {
            return this._level;
        }

        public function get currency():String
        {
            return this._currency;
        }

        public function get movieClip():flash.display.MovieClip
        {
            return this._movieClip;
        }

        public function get customFontLabelLinkage():String
        {
            return this._customFontLabelLinkage;
        }

        public function cleanup():void
        {
            this._summaryBtn = null;
            this._movieClip = null;
            this._totalWin = null;
            return;
        }

        public function get totalWin():mgs.aurora.games.common.components.ui.components.text.IComponentText
        {
            return this._totalWin;
        }

        public function get creditFormatYOffset():Number
        {
            return this._creditFormatYOffset;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        internal function populateCharacterAnimationSettings(arg1:XMLList):void
        {
            var list:XMLList;
            var node:XML;
            var i:int;
            var len:int;

            var loc1:*;
            node = null;
            list = arg1;
            this.characterAnimationSettings = new Vector.<mgs.aurora.games.common.dataTypes.FreeSpinsSummaryCharacterAnimationData>(list.length(), true);
            i = 0;
            len = list.length();
            while (i < len) 
            {
                node = list[i];
                var loc3:*=0;
                var loc4:*=node.setting;
                var loc2:*=new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@variable == "resource") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "layer") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "startAlpha") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "endAlpha") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "startX") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "startY") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "endX") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "endY") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "startDelay") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "duration") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                loc3 = 0;
                loc4 = node.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@variable == "easing") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this.characterAnimationSettings[i] = new mgs.aurora.games.common.dataTypes.FreeSpinsSummaryCharacterAnimationData(node.@id.toString(), loc2.@val.toString(), loc2.@val.toString(), Number(loc2.@val), Number(loc2.@val), Number(loc2.@val), Number(loc2.@val), Number(loc2.@val), Number(loc2.@val), Number(loc2.@val), Number(loc2.@val), loc2.@val.toString());
                ++i;
            }
            return;
        }

        public function init():void
        {
            if (this._inited) 
            {
                return;
            }
            if (this._hasOwnBtn) 
            {
                this._btnMovie = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._btnName);
                this._btnMovie.x = this._btnX;
                this._btnMovie.y = this._btnY;
                this._summaryBtn = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this._btnMovie, this._callback, false, null, 13);
                this._summaryBtn.hide(true);
            }
            this._inited = true;
            this._movieClip = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._summaryScreen);
            this._totalWin = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._customFontLabelLinkage);
            var loc1:*=this._movieClip.getChildByName("num") as flash.display.MovieClip;
            this._totalWin.addTo(loc1);
            this._movieClip.x = this.x;
            this._movieClip.y = this.y;
            return;
        }

        public static const COINS:String="coins";

        public static const CREDITS:String="credits";

        public static const BOTH:String="both";

        public static const MODALS:String="Modals";

        internal var _id:String;

        internal var _views:Array;

        internal var _level:String;

        internal var _currency:String;

        internal var _summaryScreen:String;

        internal var _summaryScreenFadeOutTime:Number;

        internal var _summaryScreenFadeOutEasing:String="linear";

        internal var _movieClip:flash.display.MovieClip;

        internal var _hasOwnBtn:Boolean;

        internal var _summaryBtn:mgs.aurora.games.common.components.ui.components.button.ArtButton=null;

        internal var _btnName:String;

        internal var _btnMovie:flash.display.MovieClip;

        internal var _x:Number;

        internal var _y:Number;

        internal var _btnX:Number;

        internal var _btnY:Number;

        internal var _callback:Function;

        internal var _totalWin:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _customFontLabelLinkage:String;

        internal var _creditFormatYOffset:Number=0;

        internal var _inited:Boolean=false;

        public var characterAnimationSettings:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.FreeSpinsSummaryCharacterAnimationData>;

        internal var _creditFormatXOffset:Number=0;

        internal var _summaryScreenFadeInTime:Number;
    }
}


//            class PayLineWinIndicator
package mgs.aurora.games.common.dataTypes 
{
    import __AS3__.vec.*;
    
    public class PayLineWinIndicator extends Object
    {
        public function PayLineWinIndicator(arg1:__AS3__.vec.Vector.<int>, arg2:__AS3__.vec.Vector.<int>, arg3:int, arg4:int)
        {
            super();
            this._matchPos = arg1;
            this._paylines = arg2;
            this._coinsWon = arg3;
            this._id = arg4;
            return;
        }

        public function get coinsWon():int
        {
            return this._coinsWon;
        }

        public function get paylines():__AS3__.vec.Vector.<int>
        {
            return this._paylines;
        }

        public function get matchPos():__AS3__.vec.Vector.<int>
        {
            return this._matchPos;
        }

        public function get id():int
        {
            return this._id;
        }

        internal var _coinsWon:int;

        internal var _paylines:__AS3__.vec.Vector.<int>;

        internal var _matchPos:__AS3__.vec.Vector.<int>;

        internal var _id:int;
    }
}


//            class ReelConfig
package mgs.aurora.games.common.dataTypes 
{
    public class ReelConfig extends Object
    {
        public function ReelConfig(arg1:int, arg2:Number, arg3:Number, arg4:String, arg5:Number, arg6:Number, arg7:Number, arg8:Number, arg9:Number, arg10:Number, arg11:String, arg12:Number, arg13:Number, arg14:Number, arg15:String, arg16:Number, arg17:Number, arg18:Number, arg19:Number, arg20:Number, arg21:Number, arg22:String, arg23:Number)
        {
            super();
            this._id = arg1;
            this._breatheStrength = arg2;
            this._breatheTime = arg3;
            this._breatheTransition = arg4;
            this._breatheBlur = arg5;
            this._breathePause = arg6;
            this._spinSpeed = arg7;
            this._spinBlur = arg8;
            this._bounceStrength = arg9;
            this._bounceTime = arg10;
            this._bounceTransition = arg11;
            this._bounceBlurAmount = arg12;
            this._quickBreatheStrength = arg13;
            this._quickBreatheTime = arg14;
            this._quickBreatheTransition = arg15;
            this._quickBreatheBlur = arg16;
            this._quickBreathePause = arg17;
            this._quickSpinSpeed = arg18;
            this._quickSpinBlur = arg19;
            this._quickBounceStrength = arg20;
            this._quickBounceTime = arg21;
            this._quickBounceTransition = arg22;
            this._quickBounceBlurAmount = arg23;
            return;
        }

        public function get spinSpeed():Number
        {
            return this._spinSpeed;
        }

        public function get quickBreatheTransition():String
        {
            return this._quickBreatheTransition;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get breatheStrength():Number
        {
            return this._breatheStrength;
        }

        public function get breatheTime():Number
        {
            return this._breatheTime;
        }

        public function get breatheTransition():String
        {
            return this._breatheTransition;
        }

        public function get breatheBlur():Number
        {
            return this._breatheBlur;
        }

        public function get spinBlur():Number
        {
            return this._spinBlur;
        }

        public function get bounceStrength():Number
        {
            return this._bounceStrength;
        }

        public function get bounceTime():Number
        {
            return this._bounceTime;
        }

        public function get bounceTransition():String
        {
            return this._bounceTransition;
        }

        public function get bounceBlurAmount():Number
        {
            return this._bounceBlurAmount;
        }

        public function get quickBounceAmount():Number
        {
            return this._quickBounceAmount;
        }

        public function get quickBounceTime():Number
        {
            return this._quickBounceTime;
        }

        public function get quickBounceBlur():Number
        {
            return this._quickBounceBlur;
        }

        public function get quickBounceTransition():String
        {
            return this._quickBounceTransition;
        }

        public function get breathePause():Number
        {
            return this._breathePause;
        }

        public function get quickBreatheStrength():Number
        {
            return this._quickBreatheStrength;
        }

        public function get quickBreatheTime():Number
        {
            return this._quickBreatheTime;
        }

        public function get quickBreatheBlur():Number
        {
            return this._quickBreatheBlur;
        }

        public function get quickSpinSpeed():Number
        {
            return this._quickSpinSpeed;
        }

        public function get quickSpinBlur():Number
        {
            return this._quickSpinBlur;
        }

        public function get quickBounceStrength():Number
        {
            return this._quickBounceStrength;
        }

        public function get quickBounceBlurAmount():Number
        {
            return this._quickBounceBlurAmount;
        }

        public function get quickBreathePause():Number
        {
            return this._quickBreathePause;
        }

        internal var _id:int;

        internal var _breatheStrength:Number;

        internal var _breatheTime:Number;

        internal var _breatheTransition:String;

        internal var _breatheBlur:Number;

        internal var _quickBounceBlur:Number;

        internal var _spinBlur:Number;

        internal var _bounceStrength:Number;

        internal var _bounceTime:Number;

        internal var _bounceTransition:String;

        internal var _bounceBlurAmount:Number;

        internal var _breathePause:Number;

        internal var _quickBreatheStrength:Number;

        internal var _quickBreatheTime:Number;

        internal var _quickBreatheTransition:String;

        internal var _quickBreatheBlur:Number;

        internal var _quickSpinSpeed:Number;

        internal var _quickSpinBlur:Number;

        internal var _quickBounceStrength:Number;

        internal var _quickBounceTime:Number;

        internal var _quickBounceTransition:String;

        internal var _quickBounceBlurAmount:Number;

        internal var _quickBreathePause:Number;

        internal var _quickBounceAmount:Number;

        internal var _spinSpeed:Number;
    }
}


//            class ReelSetConfig
package mgs.aurora.games.common.dataTypes 
{
    import __AS3__.vec.*;
    
    public class ReelSetConfig extends Object
    {
        public function ReelSetConfig(arg1:int, arg2:int, arg3:int, arg4:int, arg5:int, arg6:String, arg7:int, arg8:int, arg9:int, arg10:int, arg11:String, arg12:String)
        {
            super();
            this._delayBetweenSpins = arg1;
            this._delayToStart = arg2;
            this._minimumSpinTime = arg3;
            this._reelConfig = new Vector.<Vector.<mgs.aurora.games.common.dataTypes.ReelConfig>>(arg4, true);
            this._anticipationDelay = arg5;
            this._delayBetweenStops = Vector.<uint>(arg6.split(","));
            this._quickBetweenSpins = arg7;
            this._quickToStart = arg8;
            this._quickSpinTime = arg9;
            this._quickAnticipationDelay = arg10;
            this._quickBetweenStops = Vector.<uint>(arg11.split(","));
            if (arg12 != "") 
            {
                this._reelOrder = Vector.<uint>(arg12.split(","));
            }
            else 
            {
                this._reelOrder = Vector.<uint>();
                this._reelOrder.push(0, 1, 2, 3, 4);
            }
            return;
        }

        public function addReel(arg1:int, arg2:mgs.aurora.games.common.dataTypes.ReelConfig):void
        {
            if (this._reelConfig[arg1] == null) 
            {
                this._reelConfig[arg1] = new Vector.<mgs.aurora.games.common.dataTypes.ReelConfig>();
            }
            this._reelConfig[arg1].push(arg2);
            return;
        }

        public function get delayBetweenSpins():int
        {
            return this._delayBetweenSpins;
        }

        public function get delayToStart():int
        {
            return this._delayToStart;
        }

        public function get minimumSpinTime():int
        {
            return this._minimumSpinTime;
        }

        public function getReelSetConfig(arg1:int, arg2:int):mgs.aurora.games.common.dataTypes.ReelConfig
        {
            return this._reelConfig[arg1][arg2];
        }

        public function get anticipationDelay():int
        {
            return this._anticipationDelay;
        }

        public function get delayBetweenStops():__AS3__.vec.Vector.<uint>
        {
            return this._delayBetweenStops;
        }

        public function get configs():__AS3__.vec.Vector.<__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.ReelConfig>>
        {
            return this._reelConfig;
        }

        public function get quickBetweenSpins():int
        {
            return this._quickBetweenSpins;
        }

        public function get quickToStart():int
        {
            return this._quickToStart;
        }

        public function get quickSpinTime():int
        {
            return this._quickSpinTime;
        }

        public function get quickAnticipationDelay():int
        {
            return this._quickAnticipationDelay;
        }

        public function get quickBetweenStops():__AS3__.vec.Vector.<uint>
        {
            return this._quickBetweenStops;
        }

        public function get reelOrder():__AS3__.vec.Vector.<uint>
        {
            return this._reelOrder;
        }

        internal var _reelConfig:__AS3__.vec.Vector.<__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.ReelConfig>>;

        internal var _delayBetweenSpins:int;

        internal var _delayToStart:int;

        internal var _minimumSpinTime:int;

        internal var _anticipationDelay:int;

        internal var _delayBetweenStops:__AS3__.vec.Vector.<uint>;

        internal var _quickBetweenSpins:int;

        internal var _quickToStart:int;

        internal var _quickSpinTime:int;

        internal var _quickAnticipationDelay:int;

        internal var _quickBetweenStops:__AS3__.vec.Vector.<uint>;

        internal var _reelOrder:__AS3__.vec.Vector.<uint>;
    }
}


//            class ReelsToSymbolsTrans
package mgs.aurora.games.common.dataTypes 
{
    public class ReelsToSymbolsTrans extends Object
    {
        public function ReelsToSymbolsTrans(arg1:int)
        {
            super();
            this._reelId = arg1;
            return;
        }

        public function get reelId():int
        {
            return this._reelId;
        }

        internal var _reelId:int;
    }
}


//            class RollingReelsConfig
package mgs.aurora.games.common.dataTypes 
{
    import mgs.aurora.games.base.*;
    
    public class RollingReelsConfig extends mgs.aurora.games.base.BaseClass
    {
        public function RollingReelsConfig(arg1:XML)
        {
            var rollingReelNode:XML;
            var i:int;

            var loc1:*;
            i = 0;
            rollingReelNode = arg1;
            super();
            setClassDescription("mgs.aurora.games.common.dataTypes.RollingReelsConfig");
            this._id = rollingReelNode.@id.toString();
            this._views = rollingReelNode.@views.toString().split(",");
            var loc3:*=0;
            var loc4:*=rollingReelNode.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "reelDropSpeed") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._reelDropSpeed = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "bounceHeight") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._bounceHeight = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "bounceTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._bounceTime = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "delayBetweenReelDrop") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._delayBetweenReelDrop = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "delayBetweenSymbolExplode") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._delayBetweenSymbolExplode = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "delayBeforeStartWins") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._delayBeforeStartWins = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "delayBeforeStartNextStep") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._delayBeforeStartNextStep = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "multiplierHeader") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._multiplierHeader = loc2.@val;
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "maxMultiplierValue") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._maxMultiplierValue = int(loc2.@val);
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "explosionMovie") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._explosionMovieName = loc2.@val;
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "multiplierMovieNames") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._multiplierMovieNames = loc2.@val.toString().split(",");
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "layer") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._layer = loc2.@val.toString();
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "multiplierLayer") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._multiplierLayer = loc2.@val.toString();
            loc3 = 0;
            loc4 = rollingReelNode.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "maskLayer") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._maskLayer = loc2.@val.toString();
            i = 0;
            while (i < this._maxMultiplierValue) 
            {
                ++i;
            }
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get views():Array
        {
            return this._views;
        }

        public function get maxMultiplierValue():int
        {
            return this._maxMultiplierValue;
        }

        public function get delayBetweenReelDrop():int
        {
            return this._delayBetweenReelDrop;
        }

        public function get reelDropSpeed():int
        {
            return this._reelDropSpeed;
        }

        public function get bounceHeight():int
        {
            return this._bounceHeight;
        }

        public function get bounceTime():int
        {
            return this._bounceTime;
        }

        public function get delayBetweenSymbolExplode():int
        {
            return this._delayBetweenSymbolExplode;
        }

        public function get delayBeforeStartWins():int
        {
            return this._delayBeforeStartWins;
        }

        public function get delayBeforeStartNextStep():int
        {
            return this._delayBeforeStartNextStep;
        }

        public function get explosionMovieName():String
        {
            return this._explosionMovieName;
        }

        public function get multiplierHeader():String
        {
            return this._multiplierHeader;
        }

        public function get layer():String
        {
            return this._layer;
        }

        public function get multiplierLayer():String
        {
            return this._multiplierLayer;
        }

        public function get maskLayer():String
        {
            return this._maskLayer;
        }

        public function getMultiplierMovieName(arg1:uint):String
        {
            if (arg1 < this._multiplierMovieNames.length) 
            {
                return this._multiplierMovieNames[arg1];
            }
            return null;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public function activeInView(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._views.length) 
            {
                if (this._views[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        internal var _id:String;

        internal var _views:Array;

        internal var _layer:String;

        internal var _multiplierLayer:String;

        internal var _maskLayer:String;

        internal var _explosionMovieName:String;

        internal var _multiplierHeader:String;

        internal var _maxMultiplierValue:int;

        internal var _reelDropSpeed:int;

        internal var _bounceHeight:int;

        internal var _bounceTime:int;

        internal var _delayBetweenReelDrop:int;

        internal var _delayBetweenSymbolExplode:int;

        internal var _delayBeforeStartWins:int;

        internal var _delayBeforeStartNextStep:int;

        internal var _multiplierMovieNames:Array;

        internal var _inited:Boolean=false;
    }
}


//            class SlotSoundActionData
package mgs.aurora.games.common.dataTypes 
{
    public class SlotSoundActionData extends Object
    {
        public function SlotSoundActionData()
        {
            super();
            return;
        }

        public function set endVolume(arg1:uint):void
        {
            this._endVolume = arg1;
            return;
        }

        public function set time(arg1:uint):void
        {
            this._time = arg1;
            return;
        }

        public function set amount(arg1:Number):void
        {
            this._amount = arg1;
            return;
        }

        public function set id(arg1:int):void
        {
            this._id = arg1;
            return;
        }

        public function set callback(arg1:Function):void
        {
            this._callback = arg1;
            return;
        }

        public static function createPlayAction(arg1:String, arg2:String, arg3:Boolean=false, arg4:Function=null):mgs.aurora.games.common.dataTypes.SlotSoundActionData
        {
            var loc1:*;
            (loc1 = new SlotSoundActionData()).soundName = arg1;
            loc1.soundCat = arg2;
            loc1.loop = arg3;
            loc1.action = SlotSoundActionData.ACTION_PLAY;
            loc1.callback = arg4;
            return loc1;
        }

        public static function createPlayRangeAction(arg1:String, arg2:int, arg3:Number, arg4:Function=null):mgs.aurora.games.common.dataTypes.SlotSoundActionData
        {
            var loc1:*;
            (loc1 = new SlotSoundActionData()).soundCat = arg1;
            loc1.id = arg2;
            loc1.amount = arg3;
            loc1.action = SlotSoundActionData.ACTION_PLAY;
            loc1.callback = arg4;
            return loc1;
        }

        public static function createStopAction(arg1:String, arg2:String):mgs.aurora.games.common.dataTypes.SlotSoundActionData
        {
            var loc1:*=new SlotSoundActionData();
            loc1.soundName = arg1;
            loc1.soundCat = arg2;
            loc1.action = SlotSoundActionData.ACTION_STOP;
            return loc1;
        }

        public static function createSetVolumeAction(arg1:String, arg2:String, arg3:uint):mgs.aurora.games.common.dataTypes.SlotSoundActionData
        {
            var loc1:*;
            (loc1 = new SlotSoundActionData()).soundName = arg1;
            loc1.soundCat = arg2;
            loc1.endVolume = arg3;
            loc1.action = SlotSoundActionData.ACTION_SET_VOLUME;
            return loc1;
        }

        public static function createSetVolumeOverTimeAction(arg1:String, arg2:String, arg3:uint, arg4:uint, arg5:uint):mgs.aurora.games.common.dataTypes.SlotSoundActionData
        {
            var loc1:*;
            (loc1 = new SlotSoundActionData()).soundName = arg1;
            loc1.soundCat = arg2;
            loc1.endVolume = arg4;
            loc1.startVolume = arg3;
            loc1.time = arg5;
            loc1.action = SlotSoundActionData.ACTION_SET_VOLUME_OVER_TIME;
            return loc1;
        }

        public function get soundName():String
        {
            return this._sndName;
        }

        public function get soundCat():String
        {
            return this._sndCat;
        }

        public function get action():String
        {
            return this._action;
        }

        public function get loop():Boolean
        {
            return this._loop;
        }

        public function get startVolume():uint
        {
            return this._startVolume;
        }

        public function get endVolume():uint
        {
            return this._endVolume;
        }

        public function get time():uint
        {
            return this._time;
        }

        public function get amount():Number
        {
            return this._amount;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get callback():Function
        {
            return this._callback;
        }

        public function set soundName(arg1:String):void
        {
            this._sndName = arg1;
            return;
        }

        public function set soundCat(arg1:String):void
        {
            this._sndCat = arg1;
            return;
        }

        public function set action(arg1:String):void
        {
            this._action = arg1;
            return;
        }

        public function set loop(arg1:Boolean):void
        {
            this._loop = arg1;
            return;
        }

        public function set startVolume(arg1:uint):void
        {
            this._startVolume = arg1;
            return;
        }

        public static const ACTION_STOP:String="stop";

        public static const ACTION_SET_VOLUME:String="set_volume";

        public static const ACTION_SET_VOLUME_OVER_TIME:String="set_volume_over_time";

        public static const ACTION_PLAY:String="play";

        protected var _sndName:String="";

        protected var _sndCat:String="";

        protected var _action:String="";

        protected var _loop:Boolean=false;

        protected var _startVolume:uint=100;

        protected var _endVolume:uint=100;

        protected var _time:uint=1;

        protected var _id:int=-1;

        protected var _amount:Number=0;

        protected var _callback:Function=null;
    }
}


//            class SymbolEntity
package mgs.aurora.games.common.dataTypes 
{
    public class SymbolEntity extends Object
    {
        public function SymbolEntity(arg1:int, arg2:String, arg3:Number=-1)
        {
            super();
            this._visId = arg3;
            this._id = arg1;
            this._assetName = arg2;
            return;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get assetName():String
        {
            return this._assetName;
        }

        public function get visId():Number
        {
            return this._visId;
        }

        public function set visId(arg1:Number):void
        {
            this._visId = arg1;
            return;
        }

        internal var _id:int;

        internal var _assetName:String;

        internal var _visId:Number;
    }
}


//            class SymbolViewSetData
package mgs.aurora.games.common.dataTypes 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    
    public class SymbolViewSetData extends Object
    {
        public function SymbolViewSetData()
        {
            this._priorityLayerSymbols = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>(0, true);
            super();
            this._staticList = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
            this._fallbackList = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
            this._animList = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
            this._landList = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
            this._triggerAnimList = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
            this._specialList = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
            this._triggerList = new Vector.<mgs.aurora.slots.components.triggercontroller.Trigger>();
            this._staticListDic = new flash.utils.Dictionary(true);
            this._fallbackListDic = new flash.utils.Dictionary(true);
            this._animListDic = new flash.utils.Dictionary(true);
            this._landListDic = new flash.utils.Dictionary(true);
            this._triggerAnimListDic = new flash.utils.Dictionary(true);
            this._specialListDic = new flash.utils.Dictionary(true);
            this._triggerListDic = new flash.utils.Dictionary(true);
            this._wildListDic = new flash.utils.Dictionary(true);
            return;
        }

        public function get isPostSummary():Boolean
        {
            return this._isPostSummary;
        }

        public function getStaticSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this._staticListDic[arg1.toString()];
        }

        public function init(arg1:XML):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            this._id = arg1.@id.toString();
            this._views = arg1.@views.toString().split(",");
            this._lateLoadingFiles = arg1.@lateLoadingFiles.toString().split(",");
            var loc4:*=0;
            var loc5:*=arg1.mainstatic.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._staticList.push(loc2);
                this._staticListDic[loc1.@symbolID.toString()] = loc2;
                if (loc1.@isWild.toString() != "true") 
                {
                    continue;
                }
                if (this._wildListDic[loc1.@symbolID.toString()] != null) 
                {
                    continue;
                }
                this._wildListDic[loc1.@symbolID.toString()] = true;
            }
            loc4 = 0;
            loc5 = arg1.fallback.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._fallbackList.push(loc2);
                this._fallbackListDic[loc1.@symbolID.toString()] = loc2;
            }
            loc4 = 0;
            loc5 = arg1.mainanim.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._animList.push(loc2);
                this._animListDic[loc1.@symbolID.toString()] = loc2;
            }
            loc4 = 0;
            loc5 = arg1.landanim.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._landList.push(loc2);
                this._landListDic[loc1.@symbolID.toString()] = loc2;
            }
            loc4 = 0;
            loc5 = arg1.triggeranim.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._triggerAnimList.push(loc2);
                this._triggerAnimListDic[loc1.@symbolID.toString()] = loc2;
            }
            loc4 = 0;
            loc5 = arg1.triggeranim.symbolState;
            for each (loc1 in loc5) 
            {
                loc3 = new mgs.aurora.slots.components.triggercontroller.Trigger(int(loc1.@symbolID), int(loc1.@rank), loc1.@adjacency.toString() == "true", loc1.@direction.toString(), int(loc1.@minNumNeeded), loc1.@anticipate.toString() == "true", loc1.@minAnticipateReel != undefined ? int(loc1.@minAnticipateReel) : 0, int(loc1.@featureTriggerID), loc1.@spinStopOverride.toString() == "true", loc1.@maxAnticipateReel != undefined ? int(loc1.@maxAnticipateReel) : -1);
                this._triggerList.push(loc3);
                this._triggerListDic[loc1.@symbolID.toString()] = loc3;
            }
            loc4 = 0;
            loc5 = arg1.special.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._specialList.push(loc2);
                this._specialListDic[loc1.@symbolID.toString()] = loc2;
            }
            this._numIterations = int(arg1.@numIterations);
            this._iterationShowDelay = int(arg1.@iterationShowDelay);
            this._iterationHideDelay = int(arg1.@iterationHideDelay);
            this._summaryShowDelay = int(arg1.@summaryShowDelay);
            this._summaryHideDelay = int(arg1.@summaryHideDelay);
            this._hasWinSummary = arg1.@hasWinSummary.toString().toLowerCase() == "true";
            this._repeatWinSummary = arg1.@repeatWinSummary.toString().toLowerCase() == "true";
            this._isPostSummary = arg1.@isPostSummary.toString().toLowerCase() == "true";
            loc4 = 0;
            loc5 = arg1.fallback.symbolState;
            for each (loc1 in loc5) 
            {
                loc2 = new mgs.aurora.games.common.dataTypes.SymbolEntity(int(loc1.@symbolID), loc1.@assetName.toString());
                this._fallbackList.push(loc2);
                this._fallbackListDic[loc1.@symbolID.toString()] = loc2;
            }
            if (arg1.layering) 
            {
                this._priorityLayerOrder = Vector.<uint>(String(arg1.layering.@order).split(","));
                this._priorityLayerSymbols = new Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>();
                loc4 = 0;
                loc5 = arg1.layering.breakoutSymbol;
                for each (loc1 in loc5) 
                {
                    this._priorityLayerSymbols.push(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc1.@symbolID, loc1.@type));
                }
            }
            return;
        }

        public function activeInView(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._views.length) 
            {
                if (this._views[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function isLateLoadingFile(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._lateLoadingFiles.length) 
            {
                if (this._lateLoadingFiles[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get views():Array
        {
            return this._views;
        }

        public function get staticList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._staticList;
        }

        public function get animList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._animList;
        }

        public function getAnimSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this._animListDic[arg1.toString()];
        }

        public function get landList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._landList;
        }

        public function getLandSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this._landListDic[arg1.toString()];
        }

        public function getSpecialSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this._specialListDic[arg1.toString()];
        }

        public function getTriggerSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this._triggerAnimListDic[arg1.toString()];
        }

        public function get triggerAnimList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._triggerAnimList;
        }

        public function get triggerList():__AS3__.vec.Vector.<mgs.aurora.slots.components.triggercontroller.Trigger>
        {
            return this._triggerList;
        }

        public function get numIterations():int
        {
            return this._numIterations;
        }

        public function get iterationShowDelay():int
        {
            return this._iterationShowDelay;
        }

        public function get iterationHideDelay():int
        {
            return this._iterationHideDelay;
        }

        public function get hasWinSummary():Boolean
        {
            return this._hasWinSummary;
        }

        public function get repeatWinSummary():Boolean
        {
            return this._repeatWinSummary;
        }

        public function get summaryShowDelay():int
        {
            return this._summaryShowDelay;
        }

        public function get summaryHideDelay():int
        {
            return this._summaryHideDelay;
        }

        public function get specialList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._specialList;
        }

        public function get fallbackList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._fallbackList;
        }

        public function getTrigger(arg1:int):mgs.aurora.slots.components.triggercontroller.Trigger
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._triggerList;
            for each (loc1 in loc3) 
            {
                if (loc1.id != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public function get priorityLayerOrder():__AS3__.vec.Vector.<uint>
        {
            return this._priorityLayerOrder;
        }

        public function get priorityLayerSymbols():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this._priorityLayerSymbols;
        }

        internal var _staticList:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _fallbackList:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _animList:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _landList:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _triggerAnimList:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _specialList:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _priorityLayerSymbols:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>;

        internal var _staticListDic:flash.utils.Dictionary;

        internal var _fallbackListDic:flash.utils.Dictionary;

        internal var _animListDic:flash.utils.Dictionary;

        internal var _landListDic:flash.utils.Dictionary;

        internal var _triggerAnimListDic:flash.utils.Dictionary;

        internal var _specialListDic:flash.utils.Dictionary;

        internal var _triggerListDic:flash.utils.Dictionary;

        internal var _wildListDic:flash.utils.Dictionary;

        internal var _numIterations:int=3;

        internal var _iterationShowDelay:int=300;

        internal var _iterationHideDelay:int=300;

        internal var _hasWinSummary:Boolean=false;

        internal var _repeatWinSummary:Boolean=false;

        internal var _isPostSummary:Boolean=false;

        internal var _summaryShowDelay:int=300;

        internal var _summaryHideDelay:int=300;

        internal var _id:String;

        internal var _views:Array;

        internal var _lateLoadingFiles:Array;

        internal var _priorityLayerOrder:__AS3__.vec.Vector.<uint>;

        internal var _triggerList:__AS3__.vec.Vector.<mgs.aurora.slots.components.triggercontroller.Trigger>;
    }
}


//            class TextfieldConfig
package mgs.aurora.games.common.dataTypes 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class TextfieldConfig extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function TextfieldConfig()
        {
            super();
            if (!singletonCheck) 
            {
                throw new Error("Singleton class TextfieldConfig cant be instantiated.");
            }
            singletonCheck = false;
            setClassDescription("mgs.aurora.games.common.dataTypes.TextfieldConfig");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_TEXTFIELD_CONFIG);
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=XMLList(arg1.data)[0];
            mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.initialize(loc1);
            return;
        }

        public static function initialize():void
        {
            singletonCheck = true;
            instance = new TextfieldConfig();
            return;
        }

        
        {
            singletonCheck = false;
        }

        internal static var singletonCheck:Boolean=false;

        internal static var instance:mgs.aurora.games.common.dataTypes.TextfieldConfig;
    }
}


//            class TransAutoPlayData
package mgs.aurora.games.common.dataTypes 
{
    public class TransAutoPlayData extends Object
    {
        public function TransAutoPlayData(arg1:int, arg2:Number, arg3:Boolean)
        {
            super();
            this._numAutoPlay = arg1;
            this._stopOnWin = arg2;
            this._stopOnWinSelected = arg3;
            return;
        }

        public function get numAutoPlay():int
        {
            return this._numAutoPlay;
        }

        public function get stopOnWin():Number
        {
            return this._stopOnWin;
        }

        public function get stopOnWinSelected():Boolean
        {
            return this._stopOnWinSelected;
        }

        internal var _numAutoPlay:int;

        internal var _stopOnWin:Number;

        internal var _stopOnWinSelected:Boolean;
    }
}


//            class TransBetChanged
package mgs.aurora.games.common.dataTypes 
{
    import mgs.aurora.games.framework.*;
    
    public class TransBetChanged extends Object
    {
        public function TransBetChanged(arg1:String, arg2:mgs.aurora.games.framework.ITransportLayer)
        {
            super();
            this._transport = arg2;
            this._service = arg1;
            return;
        }

        public function get transport():mgs.aurora.games.framework.ITransportLayer
        {
            return this._transport;
        }

        public function get service():String
        {
            return this._service;
        }

        internal var _transport:mgs.aurora.games.framework.ITransportLayer;

        internal var _service:String;
    }
}


//            class TransBigWinData
package mgs.aurora.games.common.dataTypes 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    
    public class TransBigWinData extends Object
    {
        public function TransBigWinData(arg1:String, arg2:String, arg3:flash.geom.Point, arg4:Number, arg5:Number, arg6:uint, arg7:uint, arg8:Number, arg9:Boolean, arg10:Number, arg11:Number, arg12:flash.geom.Point, arg13:uint, arg14:uint, arg15:uint, arg16:Boolean, arg17:Number, arg18:Number, arg19:Boolean, arg20:String, arg21:String, arg22:String, arg23:XMLList, arg24:String, arg25:XML, arg26:Boolean)
        {
            var loc2:*=null;
            var loc3:*=0;
            super();
            this._id = arg1;
            this._assetId = arg24;
            this._views = arg2.split(",");
            this._startPos = arg3;
            this._stopX = arg4;
            this._stopY = arg5;
            this._width = arg6;
            this._height = arg7;
            this._increment = arg8;
            this._fadeInOut = arg9;
            this._fadeInOutRate = arg10;
            this._numCounterPoint = arg12;
            this._timer = arg11;
            this._numCounterWidth = arg13;
            this._numCounterHeight = arg14;
            this._counterCompletedDelay = arg15;
            this._bigWinResourceLinkage = arg20;
            this._bigWinBoxMCLinkage = arg21;
            this._customFontLabelLinkage = arg22;
            this._useMultiplier = arg16;
            this._multiplier = arg17;
            this._totalValueWidth = arg18;
            this._autoRemove = arg19;
            this._thresholds = arg23;
            this._bigWinBox = this.bigWinBox;
            this._playCountupSound = arg26;
            this._coinRushEnabled = arg25.@enabled.toString().toLowerCase() == "true";
            var loc1:*;
            if ((loc1 = arg25.@excludedWinCombinations.toString()).length) 
            {
                loc2 = Vector.<int>(loc1.split(","));
                this._coinRushExcludedWinCombinations = new flash.utils.Dictionary();
                loc3 = loc2.length;
                while (--loc3 > -1) 
                {
                    this._coinRushExcludedWinCombinations[loc2[loc3]] = true;
                }
            }
            return;
        }

        public function get bigWinBox():flash.display.MovieClip
        {
            return this._bigWinBox;
        }

        public function get increment():Number
        {
            return this._increment;
        }

        public function activeInView(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._views.length) 
            {
                if (this._views[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function get startPos():flash.geom.Point
        {
            return this._startPos;
        }

        public function get stopX():Number
        {
            return this._stopX;
        }

        public function get stopY():Number
        {
            return this._stopY;
        }

        public function get width():uint
        {
            return this._width;
        }

        public function get height():uint
        {
            return this._height;
        }

        public function get fadeInOut():Boolean
        {
            return this._fadeInOut;
        }

        public function get fadeInOutRate():Number
        {
            return this._fadeInOutRate;
        }

        public function get numCounterPoint():flash.geom.Point
        {
            return this._numCounterPoint;
        }

        public function get numCounterWidth():uint
        {
            return this._numCounterWidth;
        }

        public function get numCounterHeight():uint
        {
            return this._numCounterHeight;
        }

        public function get counterCompletedDelay():uint
        {
            return this._counterCompletedDelay;
        }

        public function get useMultiplier():Boolean
        {
            return this._useMultiplier;
        }

        public function get multiplier():Number
        {
            return this._multiplier;
        }

        public function get totalValueWidth():Number
        {
            return this._totalValueWidth;
        }

        public function get autoRemove():Boolean
        {
            return this._autoRemove;
        }

        public function get bigWinResourceLinkage():String
        {
            return this._bigWinResourceLinkage;
        }

        public function get bigWinBoxMCLinkage():String
        {
            return this._bigWinBoxMCLinkage;
        }

        public function get customFontLabelLinkage():String
        {
            return this._customFontLabelLinkage;
        }

        public function get customFontLbl():mgs.aurora.games.common.components.ui.components.text.IComponentText
        {
            return this._customFontLbl;
        }

        public function get timer():Number
        {
            return this._timer;
        }

        public function get thresholds():XMLList
        {
            return this._thresholds;
        }

        public function get assetId():String
        {
            return this._assetId;
        }

        public function get playCountupSound():Boolean
        {
            return this._playCountupSound;
        }

        public function get coinRushEnabled():Boolean
        {
            return this._coinRushEnabled;
        }

        public function get coinRushExcludedWinCombinations():flash.utils.Dictionary
        {
            return this._coinRushExcludedWinCombinations;
        }

        public function get id():String
        {
            return this._id;
        }

        internal var _startPos:flash.geom.Point;

        internal var _stopX:Number;

        internal var _stopY:Number;

        internal var _width:uint;

        internal var _height:uint;

        internal var _increment:Number;

        internal var _playCountupSound:Boolean;

        internal var _fadeInOutRate:Number;

        internal var _numCounterPoint:flash.geom.Point;

        internal var _numCounterWidth:uint;

        internal var _numCounterHeight:uint;

        internal var _counterCompletedDelay:uint;

        internal var _useMultiplier:Boolean;

        internal var _multiplier:Number;

        internal var _totalValueWidth:Number;

        internal var _autoRemove:Boolean;

        internal var _bigWinResourceLinkage:String;

        internal var _bigWinBoxMCLinkage:String;

        internal var _customFontLabelLinkage:String;

        internal var _customFontLbl:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _bigWinBox:flash.display.MovieClip;

        internal var _timer:Number;

        internal var _thresholds:XMLList;

        internal var _assetId:String;

        internal var _coinRushEnabled:Boolean;

        internal var _coinRushExcludedWinCombinations:flash.utils.Dictionary;

        internal var _views:Array;

        internal var _id:String;

        internal var _fadeInOut:Boolean;
    }
}


//            class TransBonusAnimationData
package mgs.aurora.games.common.dataTypes 
{
    public class TransBonusAnimationData extends Object
    {
        public function TransBonusAnimationData(arg1:Number)
        {
            super();
            this._totalWon = arg1;
            return;
        }

        public function get totalWon():Number
        {
            return this._totalWon;
        }

        internal var _totalWon:Number;
    }
}


//            class TransCoins
package mgs.aurora.games.common.dataTypes 
{
    public class TransCoins extends Object
    {
        public function TransCoins(arg1:uint)
        {
            super();
            this._coins = arg1;
            return;
        }

        public function get coins():uint
        {
            return this._coins;
        }

        internal var _coins:uint;
    }
}


//            class TransEvent
package mgs.aurora.games.common.dataTypes 
{
    public class TransEvent extends Object
    {
        public function TransEvent(arg1:String)
        {
            super();
            this._eventType = arg1;
            return;
        }

        public function get eventType():String
        {
            return this._eventType;
        }

        internal var _eventType:String;
    }
}


//            class TransGambleData
package mgs.aurora.games.common.dataTypes 
{
    public class TransGambleData extends Object
    {
        public function TransGambleData(arg1:uint, arg2:uint)
        {
            super();
            this._method = arg1;
            this._size = arg2;
            return;
        }

        public function get method():uint
        {
            return this._method;
        }

        public function get size():uint
        {
            return this._size;
        }

        public function dispose():void
        {
            return;
        }

        internal var _method:uint;

        internal var _size:uint;
    }
}


//            class TransOptionsData
package mgs.aurora.games.common.dataTypes 
{
    public class TransOptionsData extends Object
    {
        public function TransOptionsData(arg1:Boolean, arg2:Boolean, arg3:Boolean, arg4:Boolean, arg5:Boolean, arg6:Boolean, arg7:Boolean, arg8:Boolean=false)
        {
            super();
            this._switchOffAllGameSounds = arg1;
            this._switchOffAllSounds = arg2;
            this._switchOffBgSounds = arg3;
            this._switchOffWinSounds = arg4;
            this._isQuickSpin = arg5;
            this._isFreespinsQuickSpin = arg6;
            this._displayAsCoins = arg7;
            this._hideRespinCost = arg8;
            return;
        }

        public function get switchOffAllSounds():Boolean
        {
            return this._switchOffAllSounds;
        }

        public function get switchOffAllGameSounds():Boolean
        {
            return this._switchOffAllGameSounds;
        }

        public function get switchOffWinSounds():Boolean
        {
            return this._switchOffWinSounds;
        }

        public function get switchOffBgSounds():Boolean
        {
            return this._switchOffBgSounds;
        }

        public function get displayAsCoins():Boolean
        {
            return this._displayAsCoins;
        }

        public function get isQuickSpin():Boolean
        {
            return this._isQuickSpin;
        }

        public function get isFreespinsQuickSpin():Boolean
        {
            return this._isFreespinsQuickSpin;
        }

        public function get hideRespinCost():Boolean
        {
            return this._hideRespinCost;
        }

        internal var _switchOffAllSounds:Boolean;

        internal var _switchOffAllGameSounds:Boolean;

        internal var _switchOffWinSounds:Boolean;

        internal var _switchOffBgSounds:Boolean;

        internal var _displayAsCoins:Boolean;

        internal var _isQuickSpin:Boolean;

        internal var _isFreespinsQuickSpin:Boolean;

        internal var _hideRespinCost:Boolean;
    }
}


//            class TransParticleInterrupt
package mgs.aurora.games.common.dataTypes 
{
    public class TransParticleInterrupt extends Object
    {
        public function TransParticleInterrupt(arg1:String, arg2:Function=null)
        {
            super();
            this._id = arg1;
            this._method = arg2;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get method():Function
        {
            return this._method;
        }

        public function dispose():void
        {
            return;
        }

        internal var _id:String;

        internal var _method:Function;
    }
}


//            class TransReelAVEvent
package mgs.aurora.games.common.dataTypes 
{
    public class TransReelAVEvent extends mgs.aurora.games.common.dataTypes.TransEvent
    {
        public function TransReelAVEvent(arg1:int, arg2:String)
        {
            super(arg2);
            this._id = arg1;
            return;
        }

        public function get id():int
        {
            return this._id;
        }

        internal var _id:int;

        internal var _event:String;
    }
}


//            class TransSpinData
package mgs.aurora.games.common.dataTypes 
{
    public class TransSpinData extends Object
    {
        public function TransSpinData(arg1:Number, arg2:int, arg3:int, arg4:String, arg5:int=-1, arg6:int=-1, arg7:int=-1, arg8:String=null, arg9:String=null, arg10:String=null)
        {
            super();
            this._chipSize = arg1;
            this._numChips = arg2;
            this._numSpins = arg3;
            this._activePaylines = arg4;
            this._offerId = arg5;
            this._instanceId = arg6;
            this._sideBetConstant = arg7;
            this._gamePayIds = arg8;
            this._jackpotNumbers = arg9;
            this._wildSymbols = arg10;
            return;
        }

        public function get chipSize():Number
        {
            return this._chipSize;
        }

        public function get numChips():int
        {
            return this._numChips;
        }

        public function get numSpins():int
        {
            return this._numSpins;
        }

        public function get activePaylines():String
        {
            return this._activePaylines;
        }

        public function get offerId():int
        {
            return this._offerId;
        }

        public function get instanceId():int
        {
            return this._instanceId;
        }

        public function get sideBetConstant():Number
        {
            return this._sideBetConstant;
        }

        public function get gamePayIds():String
        {
            return this._gamePayIds;
        }

        public function get jackpotNumbers():String
        {
            return this._jackpotNumbers;
        }

        public function get wildSymbols():String
        {
            return this._wildSymbols;
        }

        internal var _chipSize:Number;

        internal var _numChips:int;

        internal var _numSpins:int;

        internal var _activePaylines:String;

        internal var _offerId:int;

        internal var _instanceId:int;

        internal var _sideBetConstant:Number;

        internal var _gamePayIds:String;

        internal var _jackpotNumbers:String;

        internal var _wildSymbols:String;
    }
}


//            class TransViewReady
package mgs.aurora.games.common.dataTypes 
{
    public class TransViewReady extends Object
    {
        public function TransViewReady(arg1:String, arg2:String, arg3:Array)
        {
            super();
            this._components = arg3;
            this._view = arg1;
            this._level = arg2;
            return;
        }

        public function get view():String
        {
            return this._view;
        }

        public function get components():Array
        {
            return this._components;
        }

        public function get level():String
        {
            return this._level;
        }

        internal var _view:String;

        internal var _components:Array;

        internal var _level:String;
    }
}


//            class TransWinIndicator
package mgs.aurora.games.common.dataTypes 
{
    import __AS3__.vec.*;
    
    public class TransWinIndicator extends Object
    {
        public function TransWinIndicator(arg1:__AS3__.vec.Vector.<int>, arg2:int, arg3:Number, arg4:int)
        {
            super();
            this._symbols = arg1;
            this._payline = arg2;
            this._coinsWon = arg3;
            this._id = arg4;
            return;
        }

        public function get coinsWon():Number
        {
            return this._coinsWon;
        }

        public function get payline():int
        {
            return this._payline;
        }

        public function get symbols():__AS3__.vec.Vector.<int>
        {
            return this._symbols;
        }

        public function get id():int
        {
            return this._id;
        }

        internal var _coinsWon:Number;

        internal var _payline:int;

        internal var _symbols:__AS3__.vec.Vector.<int>;

        internal var _id:int;
    }
}


//            class WinComboData
package mgs.aurora.games.common.dataTypes 
{
    public class WinComboData extends Object
    {
        public function WinComboData(arg1:int, arg2:String, arg3:int, arg4:int, arg5:Boolean, arg6:Boolean)
        {
            super();
            this._id = arg1;
            this._direction = arg2;
            this._numRequired = arg3;
            this._symbolId = arg4;
            this._trigger = arg5;
            this._anticipate = arg6;
            return;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get direction():String
        {
            return this._direction;
        }

        public function get numRequired():int
        {
            return this._numRequired;
        }

        public function get symbolId():int
        {
            return this._symbolId;
        }

        public function get trigger():Boolean
        {
            return this._trigger;
        }

        public function get anticipate():Boolean
        {
            return this._anticipate;
        }

        internal var _id:int;

        internal var _direction:String;

        internal var _numRequired:int;

        internal var _symbolId:int;

        internal var _trigger:Boolean;

        internal var _anticipate:Boolean;
    }
}


//            class WinRangeSoundContainer
package mgs.aurora.games.common.dataTypes 
{
    public class WinRangeSoundContainer extends Object
    {
        public function WinRangeSoundContainer(arg1:Number, arg2:Number, arg3:String, arg4:Array, arg5:String, arg6:String=null, arg7:Boolean=false)
        {
            super();
            this._min = arg1;
            this._max = arg2;
            this._sound = arg3.split(",");
            this._Ids = arg4;
            this._group = arg5;
            if (arg6 && arg6.length > 0) 
            {
                this._prefix = arg6;
                if (arg7) 
                {
                    this._prefixDelaysSound = arg7;
                }
            }
            return;
        }

        public function getSound(arg1:int):String
        {
            return this._sound[arg1];
        }

        public function get sound():String
        {
            return this._sound[this._active];
        }

        public function get group():String
        {
            return this._group;
        }

        public function get Ids():Array
        {
            return this._Ids;
        }

        public function get min():Number
        {
            return this._min;
        }

        public function get max():Number
        {
            return this._max;
        }

        public function get prefix():String
        {
            return this._prefix;
        }

        public function get prefixDelaysSound():Boolean
        {
            return this._prefixDelaysSound;
        }

        public function get randomSound():String
        {
            this._active = Math.floor(Math.random() * this._sound.length);
            return this._sound[this._active];
        }

        public function resolve(arg1:int, arg2:Number):Boolean
        {
            var loc1:*=false;
            var loc2:*=0;
            while (loc2 < this._Ids.length) 
            {
                if (arg1 == int(this._Ids[loc2])) 
                {
                    loc1 = true;
                    break;
                }
                ++loc2;
            }
            if (!loc1) 
            {
                return false;
            }
            if (arg2 <= this.max && arg2 >= this.min) 
            {
                return true;
            }
            return false;
        }

        internal var _sound:Array;

        internal var _Ids:Array;

        internal var _group:String;

        internal var _min:Number;

        internal var _max:Number;

        internal var _active:int=0;

        internal var _prefix:String;

        internal var _prefixDelaysSound:Boolean;
    }
}


//            class WinSoundContainer
package mgs.aurora.games.common.dataTypes 
{
    public class WinSoundContainer extends Object
    {
        public function WinSoundContainer(arg1:String, arg2:Array, arg3:String)
        {
            super();
            this._sound = arg1;
            this._id = arg2;
            this._group = arg3;
            return;
        }

        public function get sound():String
        {
            return this._sound;
        }

        public function get id():Array
        {
            return this._id;
        }

        public function get group():String
        {
            return this._group;
        }

        internal var _sound:String;

        internal var _id:Array;

        internal var _group:String;
    }
}


//          package interfaces
//            class IVisareaData
package mgs.aurora.games.common.interfaces 
{
    import __AS3__.vec.*;
    
    public interface IVisareaData
    {
        function get canAnticipate():Boolean;

        function get anticipateList():__AS3__.vec.Vector.<Boolean>;

        function get symbolList():__AS3__.vec.Vector.<Array>;

        function get symbolCounter():Array;

        function get twoOfKind():Boolean;

        function get threeOfKind():Boolean;

        function get fourOfKind():Boolean;

        function get fiveOfKind():Boolean;

        function get triggerIdList():__AS3__.vec.Vector.<int>;

        function get totalNumberOfTriggers():int;
    }
}


//          package statics
//            package formatting
//              class CreditFormattingConfigMode
package mgs.aurora.games.common.statics.formatting 
{
    public class CreditFormattingConfigMode extends mgs.aurora.games.common.statics.formatting.CreditFormattingMode
    {
        public function CreditFormattingConfigMode()
        {
            super();
            return;
        }

        public static const SWITCHABLE:String="0";
    }
}


//              class CreditFormattingMode
package mgs.aurora.games.common.statics.formatting 
{
    public class CreditFormattingMode extends Object
    {
        public function CreditFormattingMode()
        {
            super();
            throw new Error("Cannot instantiate CreditFormattingMode");
        }

        public static const CREDITS:String="2";

        public static const COINS:String="1";
    }
}


//            class TweenStatics
package mgs.aurora.games.common.statics 
{
    public class TweenStatics extends Object
    {
        public function TweenStatics()
        {
            super();
            throw new Error("Cannot instantiate TweenStatics");
        }

        public static const TWEEN_LINEAR:String="linear";

        public static const TWEEN_EASE_IN_SINE:String="easeInSine";

        public static const TWEEN_EASE_OUT_SINE:String="easeOutSine";

        public static const TWEEN_EASE_IN_OUT_SINE:String="easeInOutSine";

        public static const TWEEN_EASE_OUT_IN_SINE:String="easeOutInSine";

        public static const TWEEN_EASE_IN_QUAD:String="easeInQuad";

        public static const TWEEN_EASE_OUT_QUAD:String="easeOutQuad";

        public static const TWEEN_EASE_IN_OUT_QUAD:String="easeInOutQuad";

        public static const TWEEN_EASE_OUT_IN_QUAD:String="easeOutInQuad";

        public static const TWEEN_EASE_IN_CUBIC:String="easeInCubic";

        public static const TWEEN_EASE_OUT_CUBIC:String="easeOutCubic";

        public static const TWEEN_EASE_IN_OUT_CUBIC:String="easeInOutCubic";

        public static const TWEEN_EASE_OUT_IN_CUBIC:String="easeOutInCubic";

        public static const TWEEN_EASE_IN_QUART:String="easeInQuart";

        public static const TWEEN_EASE_OUT_QUART:String="easeOutQuart";

        public static const TWEEN_EASE_IN_OUT_QUART:String="easeInOutQuart";

        public static const TWEEN_EASE_OUT_IN_QUART:String="easeOutInQuart";

        public static const TWEEN_EASE_IN_QUINT:String="easeInQuint";

        public static const TWEEN_EASE_OUT_QUINT:String="easeOutQuint";

        public static const TWEEN_EASE_IN_OUT_QUINT:String="easeInOutQuint";

        public static const TWEEN_EASE_OUT_IN_QUINT:String="easeOutInQuint";

        public static const TWEEN_EASE_IN_EXPO:String="easeInExpo";

        public static const TWEEN_EASE_OUT_EXPO:String="easeOutExpo";

        public static const TWEEN_EASE_IN_OUT_EXPO:String="easeInOutExpo";

        public static const TWEEN_EASE_OUT_IN_EXPO:String="easeOutInExpo";

        public static const TWEEN_EASE_IN_CIRC:String="easeInCirc";

        public static const TWEEN_EASE_OUT_CIRC:String="easeOutCirc";

        public static const TWEEN_EASE_IN_OUT_CIRC:String="easeInOutCirc";

        public static const TWEEN_EASE_OUT_IN_CIRC:String="easeOutInCirc";

        public static const TWEEN_EASE_IN_ELASTIC:String="easeInElastic";

        public static const TWEEN_EASE_OUT_ELASTIC:String="easeOutElastic";

        public static const TWEEN_EASE_IN_OUT_ELASTIC:String="easeInOutElastic";

        public static const TWEEN_EASE_OUT_IN_ELASTIC:String="easeOutInElastic";

        public static const TWEEN_EASE_IN_BACK:String="easeInBack";

        public static const TWEEN_EASE_OUT_BACK:String="easeOutBack";

        public static const TWEEN_EASE_IN_OUT_BACK:String="easeInOutBack";

        public static const TWEEN_EASE_OUT_IN_BACK:String="easeOutInBack";

        public static const TWEEN_EASE_IN_BOUNCE:String="easeInBounce";

        public static const TWEEN_EASE_OUT_BOUNCE:String="easeOutBounce";

        public static const TWEEN_EASE_IN_OUT_BOUNCE:String="easeInOutBounce";

        public static const TWEEN_EASE_OUT_IN_BOUNCE:String="easeOutInBounce";
    }
}


//        package componentTests
//          class TheTestButton
package mgs.aurora.games.componentTests 
{
    import flash.display.*;
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.games.logicBlocks.subscribers.*;
    
    public class TheTestButton extends mgs.aurora.games.logicBlocks.subscribers.DebugSubscriber
    {
        public function TheTestButton()
        {
            super(mgs.aurora.games.componentTests.TheTestButton.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.componentTests.TheTestButton");
            align = ALIGN_RIGHT;
            return;
        }

        public override function defineServices():void
        {
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "print_All", null, "Print a list of all registered services");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "integrity__Check", null, "Do an Integrity check on the system");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "publishers", null, "Print all registered components");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "toggle_debug", null, "Enable or disable debugging");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "hide_Debug", null, "Hide the Debug Layer");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "print_Grfx", null, "Pring all elements as they appear on the stage");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "generate_Visual_Report", null, "Generate a report on all visual elements");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "generate_Publisher", null, "Generate a report on all registered Publishers");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "loadReport", null, "Generate a Report on all loaded elements");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "toggle_QuickSpin", null, "Toggle QuickSpin on and off");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "showActiveHookAgents", null, "Show Active Hook Agents");
            addCustomService(mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "swapSymbol", null, "swap a symbol");
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_ACTIVE_HOOK_AGENTS));
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.swapSymbol, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "swapSymbol");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.printAll, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "print_All");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.integrityCheck, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "integrity__Check");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.publishers, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "publishers");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.toggle, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "toggle_debug");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.getStageElm, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "print_Grfx");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.visReport, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "generate_Visual_Report");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.pubReport, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "generate_Publisher");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.loadReport, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "loadReport");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hideDebug, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "hide_Debug");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.toggleQuickSpin, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "toggle_QuickSpin");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showActiveHookAgents, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, "showActiveHookAgents");
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllreels, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_ALL_REELS_STOPPED);
            super.defineSubscriptions();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.isReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_OPTIONS_UPDATE);
            return;
        }

        internal function swapSymbol(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.logicBlocks.publishers.ReelsServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME)).reels.reels[0].swapSymbol(15, 1, 0);
            mgs.aurora.games.logicBlocks.publishers.ReelsServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME)).reels.reels[0].swapSymbol(15, 1, 1);
            mgs.aurora.games.logicBlocks.publishers.ReelsServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME)).reels.reels[0].swapSymbol(15, 1, 2);
            return;
        }

        internal function showActiveHookAgents(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_SHOW_ACTIVE_HOOK_AGENTS);
            return;
        }

        internal function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._op = mgs.aurora.games.common.dataTypes.TransOptionsData(arg1.data);
            return;
        }

        internal function toggleQuickSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(mgs.aurora.games.framework.server.Publisher(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME)), mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_OPTIONS_UPDATE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransOptionsData(this._op.switchOffAllGameSounds, this._op.switchOffAllSounds, this._op.switchOffBgSounds, this._op.switchOffWinSounds, this._op.isQuickSpin ? false : true, this._op.displayAsCoins, this._op.hideRespinCost)));
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._spintime = flash.utils.getTimer();
            return;
        }

        internal function onAllreels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("Time spinned =" + (flash.utils.getTimer() - this._spintime) / 1000 + " s");
            return;
        }

        internal function testConsole(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.logicBlocks.agents.DialogAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME)).callMethod("syndicateUpdatedOptions");
            return;
        }

        internal function hideDebug(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.StageReference.getLevel("Debug").visible = false;
            return;
        }

        internal function isReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        internal function drawTextBox():void
        {
            var loc1:*=mgs.aurora.games.framework.StageReference.getLevel("Debug") as flash.display.Sprite;
            var loc2:*=0;
            var loc3:*=200;
            this._textBox = new flash.text.TextField();
            this._textBox.width = 200;
            this._textBox.type = flash.text.TextFieldType.INPUT;
            this._textBox.height = 200;
            this._textBox.border = true;
            this._textBox.background = true;
            this._textBox.x = loc2;
            this._textBox.y = loc3;
            this._textBox.selectable = true;
            this._textBox.wordWrap = true;
            this._textBox.text = "";
            loc1.addChild(this._textBox);
            return;
        }

        internal function loadReport(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        internal function pubReport(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=0;
            var loc13:*=null;
            if (this._textBox == null) 
            {
                this.drawTextBox();
            }
            var loc1:*="rgb(190, 190, 255);";
            var loc2:*="rgb(210, 210, 255);";
            var loc3:*="rgb(230, 230, 255);";
            var loc4:*=new XML("<html>\r\n\t\t\t\t\t\t\t<head>\r\n\t\t\t\t\t\t\t<meta content=\"text/html; charset=ISO-8859-1\" http-equiv=\"content-type\"/>\r\n\t\t\t\t\t\t\t<title>\"Visual List\"</title>\r\n\t\t\t\t\t\t\t</head>\r\n\t\t\t\t\t\t\t<body>\r\n\t\t\t\t\t\t\t</body>\r\n\t\t\t\t\t\t</html>");
            var loc5:*=new XML("<font size=\"-1\"><span style=\"font-weight: bold; text-decoration: underline; font-family: Helvetica,Arial,sans-serif;\">Publishers</span></font>");
            loc4.body.appendChild(loc5);
            loc5 = new XML("<table style=\"text-align: left; height: 10px; width: 711px;\" border=\"1\" cellpadding=\"1\" cellspacing=\"0\">\r\n\t\t\t\t  <tbody>\r\n\t\t\t\t  </tbody>\r\n\t\t\t\t</table>");
            loc4.body.appendChild(loc5);
            var loc6:*=new XML("<tr>\r\n\t\t\t\t\t\t\t\t<td style=\"font-family: Helvetica,Arial,sans-serif; background-color: rgb(148, 149, 221); font-weight: bold; color: rgb(251, 253, 253); width: 10px;\"><small>#</small></td>\r\n\t\t\t\t\t\t\t\t<td style=\"font-family: Helvetica,Arial,sans-serif; background-color: rgb(148, 149, 221); font-weight: bold; color: rgb(251, 253, 253); width: 176px;\"><small>Name</small></td>\r\n\t\t\t\t\t\t\t\t<td style=\"font-family: Helvetica,Arial,sans-serif; background-color: rgb(148, 149, 221); font-weight: bold; color: rgb(251, 253, 253); width: 205px;\"><small>Services</small></td>\r\n\t\t\t\t\t\t\t\t<td style=\"font-family: Helvetica,Arial,sans-serif; background-color: rgb(148, 149, 221); font-weight: bold; color: rgb(251, 253, 253); width: 183px;\"><small>ClassName</small></td>\r\n\t\t\t\t\t\t\t\t<td style=\"font-family: Helvetica,Arial,sans-serif; background-color: rgb(148, 149, 221); font-weight: bold; color: rgb(251, 253, 253); width: 183px;\"><small>TransportLayer</small></td>\r\n\t\t\t\t\t\t\t\t</tr>");
            loc5.tbody.appendChild(loc6);
            var loc7:*=0;
            var loc14:*=0;
            var loc15:*=mgs.aurora.games.framework.Broker.instance.publisherMap;
            for each (loc8 in loc15) 
            {
                loc9 = 0;
                var loc16:*=0;
                var loc17:*=loc8.serviceList;
                for each (loc10 in loc17) 
                {
                    if ((loc12 = loc7 % 3) != 0) 
                    {
                        if (loc12 != 1) 
                        {
                            if (loc12 == 2) 
                            {
                                loc11 = loc3;
                            }
                        }
                        else 
                        {
                            loc11 = loc2;
                        }
                    }
                    else 
                    {
                        loc11 = loc1;
                    }
                    if (loc9 != 0) 
                    {
                        loc13 = new XML("<tr>\r\n\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 10px; background-color: " + loc11) + "\">" + ("<small>" + (loc7 + "." + loc9) + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 176px; background-color: " + loc11) + "\"><small></small></td>") + "\r\n\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 205px; background-color: " + loc11) + "\">" + ("<small>" + loc10.name + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 183px; background-color: " + loc11) + "\"><small></small></td>") + "\r\n\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 172px; background-color: " + loc11) + "\"><small>null</small></td>") + "\r\n\t\t\t\t\t\t\t\t</tr>");
                    }
                    else 
                    {
                        loc13 = new XML("<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 10px; background-color: " + loc11) + "\">" + ("<small>" + (loc7 + "." + loc9) + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 176px; background-color: " + loc11) + "\">" + ("<small>" + loc8.name + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 205px; background-color: " + loc11) + "\">" + ("<small>" + loc10.name + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 172px; background-color: " + loc11) + "\">" + ("<small>" + loc8.className + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t\t\t" + ("<td style=\"" + ("font-family: Helvetica,Arial,sans-serif; width: 172px; background-color: " + loc11) + "\"><small>null</small></td>") + "\r\n\t\t\t\t\t\t\t\t\t\t</tr>");
                    }
                    loc5.tbody.appendChild(loc13);
                    ++loc9;
                }
                loc5.tbody.appendChild(new XML("<tr><td colspan=\"4\"/></tr>"));
                ++loc7;
            }
            this._textBox.text = loc4.toString();
            return;
        }

        internal function visReport(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._textBox == null) 
            {
                this.drawTextBox();
            }
            var loc1:*=new XML("<html>\r\n\t\t\t\t\t\t\t<head>\r\n\t\t\t\t\t\t\t<meta content=\"text/html; charset=ISO-8859-1\" http-equiv=\"content-type\"/>\r\n\t\t\t\t\t\t\t<title></title>\r\n\t\t\t\t\t\t\t</head>\r\n\t\t\t\t\t\t\t<body>\r\n\t\t\t\t\t\t\t</body>\r\n\t\t\t\t\t\t</html>");
            var loc2:*=new XML("<font size=\"-1\"><span style=\"font-weight: bold; text-decoration: underline; font-family: Helvetica,Arial,sans-serif;\">Visual Elements</span></font>");
            loc1.body.appendChild(loc2);
            loc2 = new XML("<table style=\"text-align: left; height: 10px; width: 511px;\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n\t\t\t\t  <tbody>\r\n\t\t\t\t  </tbody>\r\n\t\t\t\t</table>");
            loc1.body.appendChild(loc2);
            this.traceVis(mgs.aurora.games.framework.StageReference.stage, loc2.tbody);
            this._textBox.text = loc1.toString();
            return;
        }

        public function traceVis(arg1:*, arg2:XMLList, arg3:String="", arg4:int=0, arg5:int=0):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=undefined;
            try 
            {
                if (!(arg1.name.indexOf("instance") == 0) || arg3 == "") 
                {
                    mgs.aurora.games.base.BaseClass.trace(arg3 + arg1.name, "test", null, 128);
                    loc1 = new XML("<tr>\r\n\t\t\t\t\t\t\t\t\t\t" + ("<td>" + ("<small>" + (arg3 + arg1.name) + "</small>") + "</td>") + "\r\n\t\t\t\t\t\t\t\t\t</tr>");
                    arg2.appendChild(loc1);
                    arg3 = arg3 + (arg3 != "" ? arg1.name + "." : "moduleMain._base.");
                    loc2 = 0;
                    while (loc2 < arg1.numChildren) 
                    {
                        loc3 = arg1.getChildAt(loc2);
                        this.traceVis(loc3, arg2, arg3, loc3.parent.getChildIndex(loc3), arg5 + 1);
                        ++loc2;
                    }
                }
            }
            catch (e:ReferenceError)
            {
            };
            return;
        }

        internal function getStageElm(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.common.components.utils.Toolbox.traceChildren(mgs.aurora.games.framework.StageReference.stage);
            return;
        }

        internal function toggle(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.framework.Broker.debug) 
            {
                _trace("NOTE: Debug is now disabled", "GCL", this, 16711808);
                mgs.aurora.games.framework.Broker.debug = false;
            }
            else 
            {
                _trace("NOTE: Debug is now enabled", "GCL", this, 16711808);
                mgs.aurora.games.framework.Broker.debug = true;
            }
            return;
        }

        internal function publishers(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.Broker.instance.printAllPublisherObjects();
            return;
        }

        internal function integrityCheck(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.Diplomat.integrityCheck();
            return;
        }

        internal function printAll(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.Diplomat.printAll();
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_TEST_BUTTON";

        public static const SERVICE_SHOW_ACTIVE_HOOK_AGENTS:String="SHOW_ACTIVE_HOOK_AGENTS";

        internal var _textBox:flash.text.TextField;

        internal var _spintime:int=0;

        internal var _op:mgs.aurora.games.common.dataTypes.TransOptionsData;
    }
}


//        package framework
//          package client
//            class SubscriberObject
package mgs.aurora.games.framework.client 
{
    import mgs.aurora.games.framework.userInterface.*;
    
    public class SubscriberObject extends Object
    {
        public function SubscriberObject(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:int, arg4:int=0)
        {
            super();
            this._priority = arg4;
            this._subscriber = arg1;
            this._method = arg2;
            this._id = arg3;
            return;
        }

        public function get subscriber():mgs.aurora.games.framework.userInterface.ISubscriber
        {
            return this._subscriber;
        }

        public function get method():Function
        {
            return this._method;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get priority():int
        {
            return this._priority;
        }

        internal var _subscriber:mgs.aurora.games.framework.userInterface.ISubscriber;

        internal var _method:Function;

        internal var _id:int;

        internal var _priority:int;
    }
}


//          package gameData
//            class ModuleInfo
package mgs.aurora.games.framework.gameData 
{
    import mgs.aurora.games.framework.*;
    
    public class ModuleInfo extends Object
    {
        public function ModuleInfo(arg1:XMLList)
        {
            super();
            this._platform = String(arg1.@platform);
            this._type = String(arg1.@type);
            this._genre = String(arg1.@genre);
            this._url = String(arg1.@url);
            this._swf = String(arg1.@swf);
            this._comp = int(arg1.@comp);
            this._langTypes = String(arg1.@langTypes);
            this._id = String(arg1.art.@id);
            this._mid = String(arg1.art.@mid);
            this._cid = String(arg1.art.@cid);
            this._artUrl = String(arg1.art.@url);
            this._artSwf = String(arg1.art.@swf);
            this._name = String(arg1.art.@name);
            this._frame = String(arg1.art.@frame);
            this._config = String(arg1.art.@config);
            this._ruleSet = String(arg1.art.@ruleset);
            this._engineBadge = mgs.aurora.games.framework.AuroraReference.aurora.branding.engineBadge == 1;
            if (this._ruleSet != "") 
            {
                this._hasRuleSet = true;
            }
            return;
        }

        public function get platform():String
        {
            return this._platform;
        }

        public function get type():String
        {
            return this._type;
        }

        public function get genre():String
        {
            return this._genre;
        }

        public function get url():String
        {
            return this._url;
        }

        public function get swf():String
        {
            return this._swf;
        }

        public function get comp():int
        {
            return this._comp;
        }

        public function get langTypes():String
        {
            return this._langTypes;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get mid():String
        {
            return this._mid;
        }

        public function get cid():String
        {
            return this._cid;
        }

        public function get artUrl():String
        {
            return this._artUrl;
        }

        public function get artSwf():String
        {
            return this._artSwf;
        }

        public function get name():String
        {
            return this._name;
        }

        public function get frame():String
        {
            return this._frame;
        }

        public function get config():String
        {
            return this._config;
        }

        public function get engineBadge():Boolean
        {
            return this._engineBadge;
        }

        public function get ruleSet():String
        {
            return this._ruleSet;
        }

        public function get hasRuleSet():Boolean
        {
            return this._hasRuleSet;
        }

        internal var _platform:String;

        internal var _type:String;

        internal var _genre:String;

        internal var _url:String;

        internal var _swf:String;

        internal var _comp:int;

        internal var _langTypes:String;

        internal var _id:String;

        internal var _mid:String;

        internal var _cid:String;

        internal var _artUrl:String;

        internal var _artSwf:String;

        internal var _name:String;

        internal var _frame:String;

        internal var _config:String;

        internal var _engineBadge:Boolean;

        internal var _ruleSet:String;

        internal var _hasRuleSet:Boolean=false;
    }
}


//          package server
//            class ClientList
package mgs.aurora.games.framework.server 
{
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.client.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class ClientList extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.framework.server.IClientList
    {
        public function ClientList()
        {
            super();
            setClassDescription("mgs.aurora.games.framework.server.ClientList");
            this._publisherMap = new flash.utils.Dictionary(true);
            return;
        }

        public function getBridge(arg1:String, arg2:String):mgs.aurora.games.framework.Bridge
        {
            if (this._publisherMap[arg1] == null) 
            {
                this._publisherMap[arg1] = new flash.utils.Dictionary(true);
            }
            if (this._publisherMap[arg1][arg2] == null) 
            {
                this._publisherMap[arg1][arg2] = {};
                this._publisherMap[arg1][arg2] = new mgs.aurora.games.framework.Bridge(arg1, arg2);
            }
            return this._publisherMap[arg1][arg2];
        }

        public function get dict():flash.utils.Dictionary
        {
            return this._publisherMap;
        }

        public function unSubscribeAllFromService(arg1:String, arg2:String):void
        {
            if (this._publisherMap[arg1] == null) 
            {
                throw new Error("ERROR: Unknown Publisher [" + arg1 + "] - " + toString());
            }
            if (this._publisherMap[arg1][arg2] == null) 
            {
                throw new Error("ERROR: Unknown Service [" + arg2 + "] - " + toString());
            }
            this._publisherMap[arg1][arg2].unSubscribeAll();
            this._publisherMap[arg1][arg2].dispose();
            this._publisherMap[arg1][arg2] = null;
            delete this._publisherMap[arg1][arg2];
            _trace("NOTE: Unsubscribed all Subscribers from Service [" + arg2 + "]", null, this, 32960);
            return;
        }

        public function unSubscribeAllFromPublisher(arg1:String):void
        {
            var loc1:*=null;
            if (this._publisherMap[arg1] == null) 
            {
                throw new Error("ERROR: Unknown Publisher [" + arg1 + "] - " + toString());
            }
            var loc2:*=0;
            var loc3:*=this._publisherMap[arg1];
            for (loc1 in loc3) 
            {
                this._publisherMap[arg1][loc1].unSubscribeAll();
                this._publisherMap[arg1][loc1].dispose();
                this._publisherMap[arg1][loc1] = null;
                delete this._publisherMap[arg1][loc1];
            }
            _trace("NOTE: Unsubscribed all Subscribers from Publisher [" + arg1 + "]", null, this, 32960);
            return;
        }

        public function unSubscribeAll():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._publisherMap;
            for (loc1 in loc5) 
            {
                var loc6:*=0;
                var loc7:*=this._publisherMap[loc1];
                for (loc2 in loc7) 
                {
                    loc3 = this._publisherMap[loc1][loc2];
                    loc3.unSubscribeAll();
                    loc3.dispose();
                    this._publisherMap[loc1][loc2] = null;
                    delete this._publisherMap[loc1][loc2];
                }
                delete this._publisherMap[loc1];
            }
            _trace("NOTE: All subscribers removed!", null, this, 32960);
            return;
        }

        public function removeSubscriber(arg1:mgs.aurora.games.framework.userInterface.ISubscriber):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc8:*=this._publisherMap;
            for (loc1 in loc8) 
            {
                var loc9:*=0;
                var loc10:*=this._publisherMap[loc1];
                for (loc2 in loc10) 
                {
                    loc4 = (loc3 = this._publisherMap[loc1][loc2]).returnSubscribers();
                    var loc11:*=0;
                    var loc12:*=loc4;
                    for (loc5 in loc12) 
                    {
                        if ((loc6 = loc4[loc5]).subscriber != arg1) 
                        {
                            continue;
                        }
                        loc3.unSubscribe(loc6.subscriber, loc6.method);
                    }
                }
            }
            return;
        }

        public function printAllSubscribers():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=this._publisherMap;
            for (loc1 in loc5) 
            {
                var loc6:*=0;
                var loc7:*=this._publisherMap[loc1];
                for (loc2 in loc7) 
                {
                    loc3 = this._publisherMap[loc1][loc2];
                    loc3.printSubscribers();
                }
            }
            return;
        }

        public function integrityCheck():Number
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc1:*=0;
            var loc10:*=0;
            var loc11:*=this._publisherMap;
            for (loc2 in loc11) 
            {
                var loc12:*=0;
                var loc13:*=this._publisherMap[loc2];
                for (loc3 in loc13) 
                {
                    loc5 = (loc4 = this._publisherMap[loc2][loc3]).returnSubscribers();
                    if (!(loc4.numberSubscribers > 0)) 
                    {
                        continue;
                    }
                    if (!mgs.aurora.games.framework.Broker.instance.isPublisher(loc2)) 
                    {
                        _trace("The following Subscribers subscribed to a Publisher [" + loc2 + "] that don\'t exist:", "test", this, 32768);
                        ++loc1;
                        var loc14:*=0;
                        var loc15:*=loc5;
                        for (loc6 in loc15) 
                        {
                            _trace("      " + loc5[loc6].subscriber.toString(), "test", this, 32768);
                        }
                        continue;
                    }
                    if ((loc7 = mgs.aurora.games.framework.Broker.instance.publisherByName(loc2) as mgs.aurora.games.framework.server.Publisher).registeredServices == 0) 
                    {
                        _trace("The Publisher [" + loc2 + "] has the following subscribers but no Services:  CLASS:" + loc7.toString(), "test", this, 32768);
                        ++loc1;
                        loc14 = 0;
                        loc15 = loc5;
                        for (loc8 in loc15) 
                        {
                            _trace("      " + loc5[loc8].subscriber.toString(), "test", this, 32768);
                        }
                        continue;
                    }
                    if (loc7.serviceList[loc3] != null) 
                    {
                        continue;
                    }
                    _trace("The following Subscribers subscribes to a Service [" + loc3 + "] that don\'t exist:  CLASS:" + loc7.toString(), "test", this, 32768);
                    ++loc1;
                    loc14 = 0;
                    loc15 = loc5;
                    for (loc9 in loc15) 
                    {
                        _trace("      " + loc5[loc9].subscriber.toString(), "test", this, 32768);
                    }
                }
            }
            return loc1;
        }

        public override function dispose():void
        {
            this.unSubscribeAll();
            this._publisherMap = null;
            super.dispose();
            return;
        }

        protected var _publisherMap:flash.utils.Dictionary;
    }
}


//            class IClientList
package mgs.aurora.games.framework.server 
{
    import mgs.aurora.games.framework.*;
    
    public interface IClientList
    {
        function getBridge(arg1:String, arg2:String):mgs.aurora.games.framework.Bridge;

        function unSubscribeAllFromService(arg1:String, arg2:String):void;

        function unSubscribeAllFromPublisher(arg1:String):void;

        function unSubscribeAll():void;

        function printAllSubscribers():void;

        function integrityCheck():Number;

        function dispose():void;
    }
}


//            class IServiceLayer
package mgs.aurora.games.framework.server 
{
    public interface IServiceLayer
    {
        function get name():String;
    }
}


//            class Publisher
package mgs.aurora.games.framework.server 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class Publisher extends mgs.aurora.games.framework.server.ServiceMap implements mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function Publisher(arg1:String)
        {
            super();
            setClassDescription("mgs.aurora.games.framework.server.Publisher");
            _publisherName = arg1;
            this._internalID = mgs.aurora.games.framework.Broker.internalID;
            return;
        }

        public function get name():String
        {
            return _publisherName;
        }

        public function get internalID():Number
        {
            return this._internalID;
        }

        public function syndicate(arg1:mgs.aurora.games.framework.server.Publisher, arg2:String, arg3:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.Broker.instance.syndicate(arg1, arg2, arg3);
            return;
        }

        protected function testView(arg1:Array):Boolean
        {
            if (this._foundView) 
            {
                return true;
            }
            var loc1:*=arg1.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                if (arg1[loc2] == _publisherName) 
                {
                    this._foundView = true;
                    return true;
                }
                ++loc2;
            }
            return false;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        internal var _internalID:Number;

        internal var _foundView:Boolean=false;
    }
}


//            class ServiceLayer
package mgs.aurora.games.framework.server 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class ServiceLayer extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.framework.server.IServiceLayer
    {
        public function ServiceLayer(arg1:mgs.aurora.games.framework.userInterface.IPublisher, arg2:String)
        {
            super();
            setClassDescription("mgs.aurora.games.framework.server.ServiceLayer");
            this._name = arg2;
            this._publisher = arg1;
            this._internalID = mgs.aurora.games.framework.Broker.internalID;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function get publisherService():*
        {
            return this._publisher;
        }

        public function get internalID():Number
        {
            return this._internalID;
        }

        internal var _name:String;

        internal var _publisher:mgs.aurora.games.framework.userInterface.IPublisher;

        internal var _internalID:Number;
    }
}


//            class ServiceMap
package mgs.aurora.games.framework.server 
{
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    
    public class ServiceMap extends mgs.aurora.games.base.BaseClass
    {
        public function ServiceMap()
        {
            super();
            setClassDescription("mgs.aurora.games.framework.server.ServiceMap");
            this._serviceMap = new flash.utils.Dictionary(true);
            return;
        }

        public function registerService(arg1:mgs.aurora.games.framework.server.ServiceLayer):void
        {
            if (this._serviceMap[arg1.name] != null) 
            {
                throw new Error("ERROR: Service [" + arg1.name + "] could not be registered. Name already taken. - " + arg1.toString());
            }
            this._serviceMap[arg1.name] = arg1;
            return;
        }

        public function unRegisterService(arg1:String):void
        {
            if (this._serviceMap[arg1] == null) 
            {
                throw new Error("ERROR: Service don\'t exist. Unable to remove " + arg1 + " - " + toString());
            }
            this._serviceMap[arg1].dispose();
            delete this._serviceMap[arg1];
            _trace("NOTE: Service [" + arg1 + "] removed - " + toString());
            return;
        }

        public function unRegisterAll():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=this._serviceMap;
            for (loc1 in loc4) 
            {
                loc2 = this._serviceMap[loc1];
                this.unRegisterService(loc2.name);
            }
            this._serviceMap = new flash.utils.Dictionary(true);
            return;
        }

        public function getService(arg1:String):mgs.aurora.games.framework.server.ServiceLayer
        {
            if (this._serviceMap[arg1] == null) 
            {
                throw new Error("ERROR: Service [" + arg1 + "] not found - " + toString());
            }
            return this._serviceMap[arg1];
        }

        public function printServices():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this.registeredServices == 0) 
            {
                _trace("NOTE: No services registered.", "test");
                return;
            }
            _trace("*** Services for [" + toString() + "] ***", "test");
            var loc3:*=0;
            var loc4:*=this._serviceMap;
            for (loc1 in loc4) 
            {
                loc2 = this._serviceMap[loc1];
                _trace("   SERVICE_NAME:" + loc2.name + "  INTERNAL_ID:" + loc2.internalID + " PUBLISHER:" + this._publisherName + " - " + loc2.publisherService, "test");
            }
            _trace("******", "test");
            return;
        }

        public function get registeredServices():Number
        {
            var loc2:*=null;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._serviceMap;
            for (loc2 in loc4) 
            {
                ++loc1;
            }
            return loc1;
        }

        public function get serviceList():flash.utils.Dictionary
        {
            return this._serviceMap;
        }

        public function isService(arg1:String):Boolean
        {
            return this._serviceMap[arg1] == null ? false : true;
        }

        public override function dispose():void
        {
            this.unRegisterAll();
            this._serviceMap = null;
            super.dispose();
            return;
        }

        protected var _serviceMap:flash.utils.Dictionary;

        protected var _publisherName:String;
    }
}


//          package tip
//            class ToolTipController
package mgs.aurora.games.framework.tip 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    
    public final class ToolTipController extends mgs.aurora.games.base.BaseClass
    {
        public function ToolTipController(arg1:singletonEnforcer)
        {
            super();
            if (arg1 == null) 
            {
                throw new Error("Can\'t Instantiate ToolTipController");
            }
            return;
        }

        public function init():void
        {
            _timer = new flash.utils.Timer(500, 1);
            return;
        }

        public override function dispose():void
        {
            hide(null);
            super.dispose();
            return;
        }

        public static function get instance():mgs.aurora.games.framework.tip.ToolTipController
        {
            if (_instance == null) 
            {
                _instance = new ToolTipController(new singletonEnforcer());
                _instance.setClassDescription("mgs.aurora.games.framework.tip.ToolTipController");
                _instance.init();
            }
            return _instance;
        }

        public static function showToolTip(arg1:String):void
        {
            if (!(arg1 == "") && !(arg1 == " ")) 
            {
                if (_timer.hasEventListener(flash.events.TimerEvent.TIMER_COMPLETE)) 
                {
                    _timer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, show);
                }
                _tip = arg1;
                _timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, show, false, 0, true);
                _timer.start();
            }
            return;
        }

        public static function hideToolTip():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.tooltip.remove();
            _timer.stop();
            return;
        }

        internal static function show(arg1:flash.events.TimerEvent):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.tooltip.show(_tip);
            return;
        }

        internal static function hide(arg1:flash.events.TimerEvent=null):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.tooltip.remove();
            return;
        }

        
        {
            _instance = null;
        }

        internal static var _instance:mgs.aurora.games.framework.tip.ToolTipController=null;

        internal static var _timer:flash.utils.Timer;

        internal static var _tip:String;
    }
}


class singletonEnforcer extends Object
{
    public function singletonEnforcer()
    {
        super();
        return;
    }
}

//          package userInterface
//            class IPublisher
package mgs.aurora.games.framework.userInterface 
{
    public interface IPublisher
    {
        function get name():String;

        function get internalID():Number;

        function defineServices():void;
    }
}


//            class ISubscriber
package mgs.aurora.games.framework.userInterface 
{
    public interface ISubscriber
    {
    }
}


//          class AuroraReference
package mgs.aurora.games.framework 
{
    import mgs.aurora.api.interfaces.*;
    
    public class AuroraReference extends Object
    {
        public function AuroraReference()
        {
            super();
            return;
        }

        public static function get aurora():mgs.aurora.api.interfaces.IAuroraApi
        {
            if (_aurora == null) 
            {
                throw new Error("Cannot get Aurora before it has been set.");
            }
            return _aurora;
        }

        public static function setAurora(arg1:mgs.aurora.api.interfaces.IAuroraApi):void
        {
            _aurora = arg1;
            return;
        }

        protected static var _aurora:mgs.aurora.api.interfaces.IAuroraApi;
    }
}


//          class Bridge
package mgs.aurora.games.framework 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.client.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class Bridge extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.framework.IBridge
    {
        public function Bridge(arg1:String, arg2:String)
        {
            super();
            setClassDescription("mgs.aurora.games.framework.Bridge");
            this._publisher = arg1;
            this._service = arg2;
            this._subscriberMap = new flash.utils.Dictionary(true);
            this._subscriberList = new Vector.<mgs.aurora.games.framework.client.SubscriberObject>();
            return;
        }

        public function debugForwardMessage(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var dataP:mgs.aurora.games.framework.ITransportLayer=null;
            var obj:mgs.aurora.games.framework.client.SubscriberObject;
            var lngth:int;
            var i:int;

            var loc1:*;
            obj = null;
            dataP = arg1;
            if (!mgs.aurora.games.framework.Broker.instance.isPublisher(this._publisher)) 
            {
                throw new Error("ERROR: null Publisher exception");
            }
            lngth = this._subscriberList.length;
            i = 0;
            while (i < lngth) 
            {
                obj = this._subscriberList[i];
                if (mgs.aurora.games.framework.Broker.publisherToTest == null || mgs.aurora.games.framework.Broker.publisherToTest == this._publisher) 
                {
                    _trace("[" + this._publisher + "] syndicated Service [" + this._service + "] to " + obj.subscriber + "priority:" + obj.priority, "test", this, 8421504);
                }
                try 
                {
                    obj.method.apply(obj.subscriber, [dataP]);
                }
                catch (e:Error)
                {
                    _trace("ERROR: Problem in component " + obj.subscriber + ". This must be fixed or the component needs to be unregistered!", "error", this, 16711680);
                    _trace(e.getStackTrace(), "error", this, 16711680);
                }
                ++i;
            }
            if (mgs.aurora.games.framework.Broker.publisherToTest == null || mgs.aurora.games.framework.Broker.publisherToTest == this._publisher) 
            {
                if (dataP.data == null) 
                {
                    _trace(this._publisher + " , service [" + this._service + "] has no transport layer", "test", this, 8421568);
                }
                else 
                {
                    _trace(this._publisher + " , service [" + this._service + "] transport layer:", "test", this, 8421568);
                    _trace(dataP.data, "test", this, 8421504);
                }
            }
            return;
        }

        public function forwardMessage(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var dataP:mgs.aurora.games.framework.ITransportLayer=null;
            var obj:mgs.aurora.games.framework.client.SubscriberObject;
            var lngth:int;
            var i:int;

            var loc1:*;
            obj = null;
            dataP = arg1;
            lngth = this._subscriberList.length;
            i = 0;
            while (i < lngth) 
            {
                obj = this._subscriberList[i];
                try 
                {
                    obj.method.apply(obj.subscriber, [dataP]);
                }
                catch (e:Error)
                {
                    _trace("ERROR: Problem in component " + obj.subscriber + ". This must be fixed or the component needs to be unregistered!", "error", this, 16711680);
                    _trace(e.getStackTrace(), "error", this, 16711680);
                }
                ++i;
            }
            return;
        }

        public function subscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:int=0):void
        {
            var loc1:*=null;
            var loc2:*=NaN;
            var loc3:*=0;
            var loc4:*=this._subscriberMap;
            for each (loc1 in loc4) 
            {
                if (arg1 != loc1.subscriber) 
                {
                    continue;
                }
                throw new Error("ERROR: Duplicate subscriptions for service [" + this.service + "] in Publisher [" + this._publisher + "]. From - " + arg1);
            }
            loc2 = mgs.aurora.games.framework.Broker.internalID;
            this._subscriberMap[String(loc2)] = new mgs.aurora.games.framework.client.SubscriberObject(arg1, arg2, loc2, arg3);
            this._subscriberList.push(this._subscriberMap[String(loc2)]);
            this.prioritize();
            return;
        }

        public function unSubscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=this._subscriberMap;
            for (loc1 in loc4) 
            {
                if (!((loc2 = this._subscriberMap[loc1]).subscriber == arg1 && loc2.method == arg2)) 
                {
                    continue;
                }
                if (mgs.aurora.games.framework.Broker.debug) 
                {
                    _trace("NOTE: Subscription intID [" + loc1 + "] with SCOPE:" + loc2.subscriber + " was removed");
                }
                this.removeSubscriberFromList(loc1);
                delete this._subscriberMap[loc1];
            }
            return;
        }

        internal function removeSubscriberFromList(arg1:String):void
        {
            var loc1:*=this._subscriberList.indexOf(this._subscriberMap[arg1]);
            this._subscriberMap[arg1] = null;
            this._subscriberList.splice(loc1, 1);
            return;
        }

        internal function prioritize():void
        {
            this._subscriberList.sort(this.sort);
            return;
        }

        internal function sort(arg1:mgs.aurora.games.framework.client.SubscriberObject, arg2:mgs.aurora.games.framework.client.SubscriberObject):int
        {
            if (arg1.priority > arg2.priority) 
            {
                return -1;
            }
            if (arg1.priority < arg2.priority) 
            {
                return 1;
            }
            return 0;
        }

        public function unSubscribeAll():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._subscriberMap;
            for (loc1 in loc3) 
            {
                this.unSubscribe(this._subscriberMap[loc1].subscriber, this._subscriberMap[loc1].method);
            }
            return;
        }

        public function printSubscribers():void
        {
            var loc2:*=null;
            _trace("PUBLISHER:[" + this._publisher + "]  SERVICE:[" + this._service + "]", "test", this, 8404992);
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._subscriberMap;
            for (loc2 in loc4) 
            {
                ++loc1;
                _trace("     " + loc1 + ") Subcsriber METHOD:" + this._subscriberMap[loc2].subscriber, "test", this, 8404992);
            }
            if (loc1 == 0) 
            {
                _trace("       No subscribers found", "test", this, 16711935);
            }
            return;
        }

        public function returnSubscribers():Object
        {
            return this._subscriberMap;
        }

        public function returnSubscribersAsList():__AS3__.vec.Vector.<mgs.aurora.games.framework.client.SubscriberObject>
        {
            return this._subscriberList;
        }

        public function get numberSubscribers():Number
        {
            var loc2:*=null;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._subscriberMap;
            for (loc2 in loc4) 
            {
                ++loc1;
            }
            return loc1;
        }

        public function get publisher():String
        {
            return this._publisher;
        }

        public function get service():String
        {
            return this._service;
        }

        public override function dispose():void
        {
            super.dispose();
            this.unSubscribeAll();
            this._subscriberMap = null;
            return;
        }

        internal var _subscriberMap:flash.utils.Dictionary;

        internal var _subscriberList:__AS3__.vec.Vector.<mgs.aurora.games.framework.client.SubscriberObject>;

        internal var _publisher:String=null;

        internal var _service:String=null;
    }
}


//          class Broker
package mgs.aurora.games.framework 
{
    import flash.utils.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public final class Broker extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.framework.IBroker
    {
        public function Broker(arg1:singletonEnforcer)
        {
            super();
            if (arg1 == null) 
            {
                throw new Error("Can\'t Instantiate Broker");
            }
            return;
        }

        
        {
            _instance = null;
            _inc = 0;
            _debug = false;
        }

        public function registerPublisher(arg1:mgs.aurora.games.framework.server.Publisher):void
        {
            var loc1:*=null;
            if (this.isPublisher(arg1.name)) 
            {
                throw new Error("ERROR: Duplicate Publishers Names exist - " + arg1.toString());
            }
            this._publisherMap[arg1.name] = arg1;
            this._publisherMap[arg1.name].defineServices();
            var loc2:*=0;
            var loc3:*=arg1.serviceList;
            for (loc1 in loc3) 
            {
                _clientList.getBridge(arg1.name, loc1);
            }
            return;
        }

        public function unRegisterAll():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._publisherMap;
            for (loc1 in loc3) 
            {
                this.unRegisterPublisher(loc1);
            }
            this._publisherMap = new flash.utils.Dictionary(true);
            return;
        }

        public function unRegisterPublisher(arg1:String):void
        {
            var publisherNameP:String;
            var p:mgs.aurora.games.framework.server.Publisher;
            var clnts:Number;
            var i:String;

            var loc1:*;
            p = null;
            clnts = NaN;
            i = null;
            publisherNameP = arg1;
            if (this.isPublisher(publisherNameP)) 
            {
                p = this._publisherMap[publisherNameP];
                _clientList.removeSubscriber(p);
                clnts = 0;
                var loc2:*=0;
                var loc3:*=p.serviceList;
                for (i in loc3) 
                {
                    clnts = clnts + _clientList.getBridge(publisherNameP, p.serviceList[i].name).numberSubscribers;
                }
                if (p.registeredServices > 1) 
                {
                    _trace("WARNING: Publisher [" + publisherNameP + "] was removed but offered " + p.registeredServices + " services and had " + clnts + " Subscriptions", null, this, 16711680);
                }
                try 
                {
                    p.dispose();
                }
                catch (e:Error)
                {
                    _trace("ERROR: Could not cleanup [" + publisherNameP + "]. Improper dispose.", "error", this, 16711680);
                    _trace(e.getStackTrace(), "error", this, 16711680);
                }
                p = null;
                this._publisherMap[publisherNameP] = null;
                delete this._publisherMap[publisherNameP];
            }
            else 
            {
                _trace("ERROR: Publisher don\'t exist. Unable to remove [" + publisherNameP + "]", "error", this, 16711680);
            }
            return;
        }

        public function printPublishers():void
        {
            var loc2:*=null;
            _trace("*** PUBLISHERS LIST ***");
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._publisherMap;
            for (loc2 in loc4) 
            {
                ++loc1;
                _trace("   " + loc1 + ") " + loc2 + "   internalID:" + this._publisherMap[loc2].internalID);
            }
            _trace("*** END PUBLISHERS LIST ***");
            return;
        }

        public function printAllPublisherObjects():void
        {
            var loc2:*=null;
            _trace("*** PUBLISHERS OBJECTS ***");
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._publisherMap;
            for each (loc2 in loc4) 
            {
                _trace(loc2, "test", this, 8404992);
            }
            return;
        }

        public function printServices(arg1:String):void
        {
            var loc1:*=this.publisherByName(arg1) as mgs.aurora.games.framework.server.Publisher;
            loc1.printServices();
            return;
        }

        public function addServicesToPublisher(arg1:mgs.aurora.games.framework.server.Publisher, arg2:mgs.aurora.games.framework.server.ServiceLayer):void
        {
            arg1.registerService(arg2);
            return;
        }

        public function printAll():void
        {
            var i:String;
            var p:mgs.aurora.games.framework.server.Publisher;
            var sT:String;
            var svce:mgs.aurora.games.framework.server.ServiceLayer;
            var brdge:mgs.aurora.games.framework.Bridge;
            var lst:Object;
            var subsc:String;

            var loc1:*;
            i = null;
            p = null;
            sT = null;
            svce = null;
            brdge = null;
            lst = null;
            subsc = null;
            try 
            {
                _trace("****** BEGIN LIST ALL ******", "test", this, 8421504);
                _trace("------ Publishers -------", "test", this, 128);
                loc2 = 0;
                var loc3:*=this._publisherMap;
                for (i in loc3) 
                {
                    p = this._publisherMap[i] as mgs.aurora.games.framework.server.Publisher;
                    _trace("  +PUBLISHER:" + p.name + " - " + p.toString(), "test", this, 128);
                    var loc4:*=0;
                    var loc5:*=p.serviceList;
                    for (sT in loc5) 
                    {
                        svce = p.serviceList[sT];
                        brdge = _clientList.getBridge(p.name, sT);
                        lst = brdge.returnSubscribers();
                        _trace("  |  +--SERVICE_NAME:[" + svce.name + "] ID:[" + svce.internalID + "] PUBLISHER:" + svce.publisherService + " NUM_SUBSCRIBERS:" + brdge.numberSubscribers, "test", this, 128);
                        var loc6:*=0;
                        var loc7:*=lst;
                        for (subsc in loc7) 
                        {
                            _trace("  |  |  +--Subcsriber SCOPE:" + lst[subsc].subscriber, "test", this, 128);
                        }
                    }
                }
                _trace("------ Subscribers -------", "test", this, 8404992);
                _clientList.printAllSubscribers();
                _trace("****** END LIST ALL ******", "test", this, 8421504);
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        public function publisherID(arg1:String):int
        {
            if (!this.isPublisher(arg1)) 
            {
                _trace("WARNING: Publisher name [" + arg1 + "] not found.");
            }
            var loc1:*=this._publisherMap[arg1];
            return loc1.internalID;
        }

        public function publisherByName(arg1:String):mgs.aurora.games.framework.userInterface.IPublisher
        {
            if (!this.isPublisher(arg1)) 
            {
                throw new Error("ERROR: No Publisher named [" + arg1 + "]");
            }
            return this._publisherMap[arg1] as mgs.aurora.games.framework.userInterface.IPublisher;
        }

        public function isPublisher(arg1:String):Boolean
        {
            if (this._publisherMap[arg1] == null) 
            {
                return false;
            }
            return true;
        }

        public function integrityCheck():Boolean
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc1:*=true;
            var loc2:*=0;
            _trace("Check integrity...", "test", this, 32768);
            var loc8:*=0;
            var loc9:*=this._publisherMap;
            for (loc3 in loc9) 
            {
                if ((loc4 = this._publisherMap[loc3] as mgs.aurora.games.framework.server.Publisher).registeredServices == 0) 
                {
                    _trace("Publisher [" + loc4.name + "] has no Services registerd!", "test", this, 32768);
                    ++loc2;
                    continue;
                }
                var loc10:*=0;
                var loc11:*=loc4.serviceList;
                for (loc5 in loc11) 
                {
                    loc6 = loc4.serviceList[loc5];
                    if ((loc7 = _clientList.getBridge(loc4.name, loc5)).numberSubscribers != 0) 
                    {
                        continue;
                    }
                    _trace("Publisher\'s [" + loc4.name + "] Service [" + loc6.name + "] has no subscribers! CLASS:" + loc4.toString(), "test", this, 32768);
                    ++loc2;
                }
            }
            loc2 = loc2 + _clientList.integrityCheck();
            if (loc2 != 0) 
            {
                _trace(loc2 + " Issues was found.", "test", this, 16711680);
                loc1 = false;
            }
            else 
            {
                _trace("No issues found.", "test", this, 32768);
            }
            return loc1;
        }

        public function subscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:String, arg4:String, arg5:int=0):void
        {
            _clientList.getBridge(arg3, arg4).subscribe(arg1, arg2, arg5);
            return;
        }

        public function unSubscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:String, arg4:String):void
        {
            var loc1:*=this.publisherByName(arg3) as mgs.aurora.games.framework.server.Publisher;
            _clientList.getBridge(loc1.name, arg4).unSubscribe(arg1, arg2);
            return;
        }

        public function unSubscribeAllFromPublisher(arg1:String):void
        {
            _clientList.unSubscribeAllFromPublisher(arg1);
            return;
        }

        public function unSubscribeAllFromService(arg1:String, arg2:String):void
        {
            _clientList.unSubscribeAllFromService(arg1, arg2);
            return;
        }

        public function unSubscribeAll():void
        {
            _clientList.unSubscribeAll();
            return;
        }

        public function syndicate(arg1:mgs.aurora.games.framework.server.Publisher, arg2:String, arg3:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var publisherP:mgs.aurora.games.framework.server.Publisher;
            var serviceNameP:String;
            var transportLayerP:mgs.aurora.games.framework.ITransportLayer=null;

            var loc1:*;
            publisherP = arg1;
            serviceNameP = arg2;
            transportLayerP = arg3;
            transportLayerP = transportLayerP != null ? transportLayerP : new mgs.aurora.games.framework.TransportLayer(null);
            mgs.aurora.games.framework.TransportLayer(transportLayerP).publisher = publisherP.name;
            mgs.aurora.games.framework.TransportLayer(transportLayerP).service = serviceNameP;
            if (!_instance.isPublisher(publisherP.name)) 
            {
                throw new Error("ERROR: Publisher [" + publisherP.name + "] not registered.");
            }
            if (publisherP.getService(serviceNameP) == null) 
            {
                throw new Error("ERROR: Service [" + serviceNameP + "] not registered for Publisher [" + publisherP.name + "].");
            }
            try 
            {
                if (mgs.aurora.games.framework.Broker.debug) 
                {
                    _clientList.getBridge(publisherP.name, serviceNameP).debugForwardMessage(transportLayerP);
                }
                else 
                {
                    _clientList.getBridge(publisherP.name, serviceNameP).forwardMessage(transportLayerP);
                }
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        public function get publisherMap():flash.utils.Dictionary
        {
            return this._publisherMap;
        }

        public override function dispose():void
        {
            this.unRegisterAll();
            this.unSubscribeAll();
            _clientList.dispose();
            _clientList = null;
            this._publisherMap = null;
            super.dispose();
            return;
        }

        public static function get instance():mgs.aurora.games.framework.Broker
        {
            if (_instance == null) 
            {
                _instance = new Broker(new singletonEnforcer());
                _instance.setClassDescription("mgs.aurora.games.framework.Broker");
                _instance._publisherMap = new flash.utils.Dictionary(true);
                _clientList = new mgs.aurora.games.framework.server.ClientList();
            }
            return _instance;
        }

        public static function get internalID():Number
        {
            var loc1:*;
            _inc++;
            return _inc;
        }

        public static function set debug(arg1:Boolean):void
        {
            _debug = arg1;
            return;
        }

        public static function get debug():Boolean
        {
            return _debug;
        }

        public static function set publisherToTest(arg1:String):void
        {
            _publisherToTest = arg1;
            return;
        }

        public static function get publisherToTest():String
        {
            return _publisherToTest;
        }

        internal var _publisherMap:flash.utils.Dictionary;

        internal static var _inc:Number=0;

        internal static var _debug:Boolean=false;

        internal static var _publisherToTest:String;

        internal static var _instance:mgs.aurora.games.framework.Broker=null;

        internal static var _clientList:mgs.aurora.games.framework.server.ClientList;
    }
}


class singletonEnforcer extends Object
{
    public function singletonEnforcer()
    {
        super();
        return;
    }
}

//          class Diplomat
package mgs.aurora.games.framework 
{
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public final class Diplomat extends Object
    {
        public function Diplomat()
        {
            super();
            throw new Error("Can’t instantiate Diplomat!");
        }

        public static function syndicate(arg1:mgs.aurora.games.framework.userInterface.IPublisher, arg2:String, arg3:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1 as mgs.aurora.games.framework.server.Publisher;
            mgs.aurora.games.framework.Broker.instance.syndicate(loc1, arg2, arg3);
            return;
        }

        public static function subscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:String, arg4:String, arg5:int=0):void
        {
            mgs.aurora.games.framework.Broker.instance.subscribe(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public static function unSubscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:String, arg4:String):void
        {
            mgs.aurora.games.framework.Broker.instance.unSubscribe(arg1, arg2, arg3, arg4);
            return;
        }

        public static function integrityCheck():Boolean
        {
            return mgs.aurora.games.framework.Broker.instance.integrityCheck();
        }

        public static function isPublisher(arg1:String):Boolean
        {
            return mgs.aurora.games.framework.Broker.instance.isPublisher(arg1);
        }

        public static function publisherByName(arg1:String):mgs.aurora.games.framework.userInterface.IPublisher
        {
            return mgs.aurora.games.framework.Broker.instance.publisherByName(arg1);
        }

        public static function printAll():void
        {
            mgs.aurora.games.framework.Broker.instance.printAll();
            return;
        }

        public static function printServices(arg1:String):void
        {
            mgs.aurora.games.framework.Broker.instance.printServices(arg1);
            return;
        }

        public static function printPublishers():void
        {
            mgs.aurora.games.framework.Broker.instance.printPublishers();
            return;
        }
    }
}


//          class GameInfoReference
package mgs.aurora.games.framework 
{
    public class GameInfoReference extends Object
    {
        public function GameInfoReference()
        {
            super();
            return;
        }

        public static function get gameTypeID():String
        {
            if (_gameTypeID == null) 
            {
                throw new Error("Cannot get GameType before it has been set.");
            }
            return _gameTypeID;
        }

        public static function get packetVersion():String
        {
            if (_packetVersion == null) 
            {
                throw new Error("Cannot get Packet Version before it has been set.");
            }
            return _packetVersion;
        }

        public static function setGameTypeID(arg1:String):void
        {
            _gameTypeID = arg1;
            return;
        }

        public static function setPacketVersion(arg1:String):void
        {
            _packetVersion = arg1;
            return;
        }

        protected static var _packetVersion:String;

        protected static var _gameTypeID:String;
    }
}


//          class IActor
package mgs.aurora.games.framework 
{
    public interface IActor
    {
        function get canShow():Boolean;

        function get canDo():Boolean;

        function get isReady():Boolean;

        function get canConfig():Boolean;
    }
}


//          class IBridge
package mgs.aurora.games.framework 
{
    import mgs.aurora.games.framework.userInterface.*;
    
    public interface IBridge
    {
        function forwardMessage(arg1:mgs.aurora.games.framework.ITransportLayer=null):void;

        function subscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:int=0):void;

        function unSubscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function):void;

        function unSubscribeAll():void;

        function printSubscribers():void;

        function returnSubscribers():Object;

        function get numberSubscribers():Number;

        function get publisher():String;

        function get service():String;

        function dispose():void;
    }
}


//          class IBroker
package mgs.aurora.games.framework 
{
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public interface IBroker extends mgs.aurora.games.common.components.generic.IDisposable
    {
        function registerPublisher(arg1:mgs.aurora.games.framework.server.Publisher):void;

        function unRegisterAll():void;

        function unRegisterPublisher(arg1:String):void;

        function printPublishers():void;

        function printServices(arg1:String):void;

        function addServicesToPublisher(arg1:mgs.aurora.games.framework.server.Publisher, arg2:mgs.aurora.games.framework.server.ServiceLayer):void;

        function printAll():void;

        function printAllPublisherObjects():void;

        function publisherID(arg1:String):int;

        function publisherByName(arg1:String):mgs.aurora.games.framework.userInterface.IPublisher;

        function isPublisher(arg1:String):Boolean;

        function integrityCheck():Boolean;

        function subscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:String, arg4:String, arg5:int=0):void;

        function unSubscribe(arg1:mgs.aurora.games.framework.userInterface.ISubscriber, arg2:Function, arg3:String, arg4:String):void;

        function unSubscribeAllFromPublisher(arg1:String):void;

        function unSubscribeAllFromService(arg1:String, arg2:String):void;

        function unSubscribeAll():void;

        function syndicate(arg1:mgs.aurora.games.framework.server.Publisher, arg2:String, arg3:mgs.aurora.games.framework.ITransportLayer=null):void;
    }
}


//          class IKickStart
package mgs.aurora.games.framework 
{
    import mgs.aurora.api.events.*;
    
    public interface IKickStart
    {
        function onInit(arg1:mgs.aurora.api.events.ApiStatusEvent):void;

        function onSystemReady(arg1:mgs.aurora.api.events.ApiStatusEvent):void;

        function onExit(arg1:mgs.aurora.api.events.ApiStatusEvent):void;

        function registerPublishers():void;
    }
}


//          class ITransportLayer
package mgs.aurora.games.framework 
{
    public interface ITransportLayer
    {
        function get data():*;
    }
}


//          class KickStart
package mgs.aurora.games.framework 
{
    import flash.display.*;
    import flash.system.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.server.*;
    import mgs.aurora.common.interfaces.module.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.loader.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.gameData.*;
    import mgs.aurora.games.framework.tip.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import org.as3lib.kitchensync.*;
    import org.as3lib.kitchensync.core.*;
    
    public class KickStart extends mgs.aurora.games.base.BaseClass implements mgs.aurora.common.interfaces.module.IModuleMain, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function KickStart()
        {
            super();
            setClassDescription("mgs.aurora.games.framework.KickStart");
            return;
        }

        public function setup(arg1:mgs.aurora.api.interfaces.IAuroraApi, arg2:flash.display.DisplayObjectContainer):void
        {
            _aurora = arg1;
            _base = arg2 as flash.display.Sprite;
            this._broker = mgs.aurora.games.framework.Broker.instance;
            this._loader = mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance;
            this._tooltipControler = mgs.aurora.games.framework.tip.ToolTipController.instance;
            _aurora.status.addEventListener(mgs.aurora.api.events.ApiStatusEvent.MODULE_INIT, this.onInit);
            _aurora.status.addEventListener(mgs.aurora.api.events.ApiStatusEvent.SYSTEM_READY, this.onSystemReady);
            _aurora.status.addEventListener(mgs.aurora.api.events.ApiStatusEvent.MODULE_EXIT, this.onExit);
            _aurora.status.addEventListener(mgs.aurora.api.events.ApiStatusEvent.SYSTEM_ERROR, this.onSystemError);
            _aurora.server.addEventListener(mgs.aurora.api.events.ApiPacketEvent.RECEIVED, this.onPacketReceived);
            _aurora.server.addEventListener(mgs.aurora.api.events.ApiFileLoadEvent.COMPLETE, this.onFileLoaded);
            _aurora.sounds.addEventListener(mgs.aurora.api.events.ApiSoundEvent.MUTE, this.onMuteSound);
            _aurora.banking.addEventListener(mgs.aurora.api.events.ApiBankingEvent.BALANCE_CHANGE, this.updateBalance);
            _aurora.dialogues.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_DISPLAYED, this.dialogOpen);
            _aurora.dialogues.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_REMOVED, this.dialogRemoved);
            _aurora.dialogues.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.dialogOpen);
            _aurora.dialogues.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.dialogRemoved);
            org.as3lib.kitchensync.KitchenSync.initialize(arg2);
            mgs.aurora.games.common.dataTypes.FormattingConfig.initialize();
            mgs.aurora.games.common.dataTypes.TextfieldConfig.initialize();
            mgs.aurora.games.framework.StageReference.setStage(_base);
            mgs.aurora.games.framework.AuroraReference.setAurora(_aurora);
            _modInfo = new mgs.aurora.games.framework.gameData.ModuleInfo(_aurora.moduleInformation.gameSet);
            mgs.aurora.games.framework.ModuleReference.setModuleInfo(_modInfo);
            return;
        }

        internal function onSystemError(arg1:mgs.aurora.api.events.ApiStatusEvent):void
        {
            mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_ERROR);
            return;
        }

        internal function dialogRemoved(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            try 
            {
                mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_CLOSED);
            }
            catch (e:Error)
            {
            };
            return;
        }

        internal function dialogOpen(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            try 
            {
                mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_OPEN);
            }
            catch (e:Error)
            {
            };
            return;
        }

        public function onInit(arg1:mgs.aurora.api.events.ApiStatusEvent):void
        {
            var e:mgs.aurora.api.events.ApiStatusEvent;
            var fileRequest:mgs.aurora.api.server.FileRequest;

            var loc1:*;
            fileRequest = null;
            e = arg1;
            try 
            {
                this.registerPublishers();
                this._broker.subscribe(this, this.exit, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_EXIT, 10000);
                this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.GameEngineRegistered());
                fileRequest = new mgs.aurora.api.server.FileRequest("defaultRuleset", mgs.aurora.games.framework.ModuleReference.moduleInfo.url + "RuleSet.xml", mgs.aurora.api.enums.ContentType.XML_CONTENT);
                mgs.aurora.games.framework.AuroraReference.aurora.server.loadFile(fileRequest);
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        public function registerPublishers():void
        {
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ResponseServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.RequestServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.NeoLoadServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.BigWinServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ConsoleServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.DynamicMiniPaytableServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ParticlesServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.PaylineServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ReelsServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.SymbolsServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.UserInterruptServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ViewChangeServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.GambleServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.WinLogicServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.ConfigAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.DrawLayersAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.GameStateAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.DialogAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.MessengerAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.WayWinsSliderAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.AuroraLocalizeAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.RespinAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.CountUpAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.FreeGameSliderAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.ConductorAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PreSpinCleanupAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.SgiAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.SlotSoundServer());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.BaseGameSoundAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.BaseBonusSoundAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.RollingReelsAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostConsoleAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostBigWinAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostPaylineAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostReelsAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostRespinAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostBonusAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostGambleAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.BorderAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PreReelsAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PreBonusAgent());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.ResponseData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.FreeGamesData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.SettingsData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.OptionsData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.AutoPlayData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.StatisticsData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.ReelsData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.FreeSpinsData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.BetData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.VisAreaData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.CustomRuleSet());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.RollingReelsData());
            this._broker.registerPublisher(new mgs.aurora.games.logicBlocks.data.SymbolsData());
            return;
        }

        public function onSystemReady(arg1:mgs.aurora.api.events.ApiStatusEvent):void
        {
            mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_SYSTEM_READY);
            return;
        }

        public function onExit(arg1:mgs.aurora.api.events.ApiStatusEvent):void
        {
            if (mgs.aurora.games.framework.AuroraReference.aurora.server.platform == mgs.aurora.api.enums.PlatformType.VIPER) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.status.cancelExit();
            }
            mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_REQUEST_EXIT);
            return;
        }

        public function onPacketReceived(arg1:mgs.aurora.api.events.ApiPacketEvent):void
        {
            var e:mgs.aurora.api.events.ApiPacketEvent;
            var packet:XML;

            var loc1:*;
            e = arg1;
            packet = e.response.packet;
            try 
            {
                mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_ON_REFRESH, new mgs.aurora.games.framework.TransportLayer(packet));
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        public function onFileLoaded(arg1:mgs.aurora.api.events.ApiFileLoadEvent):void
        {
            var file:mgs.aurora.api.events.ApiFileLoadEvent;
            var fileRequest:mgs.aurora.api.server.FileRequest;

            var loc1:*;
            fileRequest = null;
            file = arg1;
            try 
            {
                if (file.response.request.id != "config") 
                {
                    if (file.response.request.id != "defaultRuleset") 
                    {
                        if (file.response.request.id != "ruleset") 
                        {
                            mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME), "GOT_IT", new mgs.aurora.games.framework.TransportLayer(file.response));
                        }
                        else 
                        {
                            mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_RULESET_RECEIVED, new mgs.aurora.games.framework.TransportLayer(file.response));
                            fileRequest = new mgs.aurora.api.server.FileRequest("config", mgs.aurora.games.framework.ModuleReference.moduleInfo.url + mgs.aurora.games.framework.ModuleReference.moduleInfo.config, mgs.aurora.api.enums.ContentType.XML_CONTENT);
                            mgs.aurora.games.framework.AuroraReference.aurora.server.loadFile(fileRequest);
                        }
                    }
                    else 
                    {
                        mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_RULESET_RECEIVED, new mgs.aurora.games.framework.TransportLayer(file.response));
                        if (mgs.aurora.games.framework.ModuleReference.moduleInfo.hasRuleSet) 
                        {
                            fileRequest = new mgs.aurora.api.server.FileRequest("ruleset", mgs.aurora.games.framework.ModuleReference.moduleInfo.url + mgs.aurora.games.framework.ModuleReference.moduleInfo.ruleSet + "_ruleset.xml", mgs.aurora.api.enums.ContentType.XML_CONTENT);
                            mgs.aurora.games.framework.AuroraReference.aurora.server.loadFile(fileRequest);
                        }
                        else 
                        {
                            fileRequest = new mgs.aurora.api.server.FileRequest("config", mgs.aurora.games.framework.ModuleReference.moduleInfo.url + mgs.aurora.games.framework.ModuleReference.moduleInfo.config, mgs.aurora.api.enums.ContentType.XML_CONTENT);
                            mgs.aurora.games.framework.AuroraReference.aurora.server.loadFile(fileRequest);
                        }
                    }
                }
                else 
                {
                    mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_CONFIG_RECEIVED, new mgs.aurora.games.framework.TransportLayer(file.response));
                }
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        internal function updateBalance(arg1:mgs.aurora.api.events.ApiBankingEvent):void
        {
            mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_BANK_BALANCE, new mgs.aurora.games.framework.TransportLayer(arg1.target.balance));
            return;
        }

        internal function onMuteSound(arg1:mgs.aurora.api.events.ApiSoundEvent):void
        {
            var e:mgs.aurora.api.events.ApiSoundEvent;

            var loc1:*;
            e = arg1;
            try 
            {
                mgs.aurora.games.framework.Diplomat.syndicate(this._broker.publisherByName(mgs.aurora.games.logicBlocks.publishers.SoundServer.PUBLISHER_NAME), mgs.aurora.games.logicBlocks.publishers.SoundServer.SERVICE_ON_MUTE, new mgs.aurora.games.framework.TransportLayer(e));
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find the SoundAgent. The sound component might have been unregistered.", "error", this, 16711680);
            }
            return;
        }

        public function exit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.dispose();
            return;
        }

        public override function dispose():void
        {
            var index:int;

            var loc1:*;
            index = 0;
            mgs.aurora.games.framework.AuroraReference.aurora.preloader.backgroundAlpha = 1;
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiStatusEvent.MODULE_INIT, this.onInit);
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiStatusEvent.SYSTEM_READY, this.onSystemReady);
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiStatusEvent.MODULE_EXIT, this.onExit);
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiStatusEvent.SYSTEM_ERROR, this.onSystemError);
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiPacketEvent.RECEIVED, this.onPacketReceived);
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiFileLoadEvent.COMPLETE, this.onFileLoaded);
            _aurora.status.removeEventListener(mgs.aurora.api.events.ApiSoundEvent.MUTE, this.onMuteSound);
            _aurora.banking.removeEventListener(mgs.aurora.api.events.ApiBankingEvent.BALANCE_CHANGE, this.updateBalance);
            _aurora.banking.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_DISPLAYED, this.dialogOpen);
            _aurora.banking.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.OTHER_DIALOGUE_REMOVED, this.dialogRemoved);
            try 
            {
                if (org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime > 0) 
                {
                    org.as3lib.kitchensync.core.Synchronizer.getInstance().core.stop();
                }
                _base.visible = false;
                index = _base.numChildren;
                while ((index = (index - 1)) >= 0) 
                {
                    _base.removeChildAt(index);
                }
                _base.visible = true;
                this._broker.dispose();
                this._loader.dispose();
                this._broker = null;
                this._loader = null;
                this._tooltipControler = null;
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            _modInfo = null;
            super.dispose();
            flash.system.System.gc();
            try 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.status.cleanedUp = true;
            }
            catch (e:Error)
            {
                _trace("NOT CLEANING UP!!!!", "error", this, 16711680);
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        protected var _broker:mgs.aurora.games.framework.Broker;

        protected var _loader:mgs.aurora.games.common.components.loader.TheMostIntelligentLoader;

        internal var _tooltipControler:mgs.aurora.games.framework.tip.ToolTipController;

        protected static var _aurora:mgs.aurora.api.interfaces.IAuroraApi;

        protected static var _modInfo:mgs.aurora.games.framework.gameData.ModuleInfo;

        protected static var _base:flash.display.Sprite;
    }
}


//          class ModuleReference
package mgs.aurora.games.framework 
{
    import mgs.aurora.games.framework.gameData.*;
    
    public class ModuleReference extends Object
    {
        public function ModuleReference()
        {
            super();
            return;
        }

        public static function get moduleInfo():mgs.aurora.games.framework.gameData.ModuleInfo
        {
            if (_moduleInfo == null) 
            {
                throw new Error("Cannot get ModuleInfo before it has been set.");
            }
            return _moduleInfo;
        }

        public static function setModuleInfo(arg1:mgs.aurora.games.framework.gameData.ModuleInfo):void
        {
            _moduleInfo = arg1;
            return;
        }

        protected static var _moduleInfo:mgs.aurora.games.framework.gameData.ModuleInfo;
    }
}


//          class StageReference
package mgs.aurora.games.framework 
{
    import flash.display.*;
    
    public class StageReference extends Object
    {
        public function StageReference()
        {
            super();
            return;
        }

        public static function get stage():flash.display.Sprite
        {
            if (_stage == null) 
            {
                throw new Error("Cannot get Stage before it has been set.");
            }
            return _stage;
        }

        public static function setStage(arg1:flash.display.Sprite):void
        {
            _stage = arg1;
            return;
        }

        public static function getLevel(arg1:String):flash.display.DisplayObjectContainer
        {
            return _stage.getChildByName(arg1) as flash.display.DisplayObjectContainer;
        }

        protected static var _stage:flash.display.Sprite;
    }
}


//          class TransportLayer
package mgs.aurora.games.framework 
{
    public class TransportLayer extends Object implements mgs.aurora.games.framework.ITransportLayer
    {
        public function TransportLayer(arg1:*)
        {
            super();
            this._data = arg1;
            return;
        }

        public function get data():*
        {
            return this._data;
        }

        public function get service():String
        {
            return this._service;
        }

        public function get publisher():String
        {
            return this._publisher;
        }

        public function set service(arg1:String):void
        {
            this._service = arg1;
            return;
        }

        public function set publisher(arg1:String):void
        {
            this._publisher = arg1;
            return;
        }

        internal var _data:*;

        internal var _service:String;

        internal var _publisher:String;
    }
}


//        package logicBlocks
//          package agents
//            package BonusGameTypes
//              class AnimatedBonusPickButton
package mgs.aurora.games.logicBlocks.agents.BonusGameTypes 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class AnimatedBonusPickButton extends mgs.aurora.games.base.BaseClass
    {
        public function AnimatedBonusPickButton(arg1:int, arg2:int, arg3:XMLList, arg4:Boolean, arg5:String, arg6:String="", arg7:String="", arg8:int=0, arg9:Function=null, arg10:Function=null, arg11:Function=null, arg12:String="")
        {
            super();
            this._item = arg2;
            this._clickCallback = arg9;
            this._processResultCallback = arg10;
            this._rolloverCallback = arg11;
            this._bonusID = arg1;
            this._layer = arg5;
            this._showWinAmount = arg4;
            this._fontResLinkage = arg6;
            this._fontName = arg7;
            this._fontYOffsetSpecialWin = arg8;
            this._buttonState = this.STATE_WAITING_FOR_PICK;
            this._uniqueName = arg12;
            this.getSettings(arg3);
            this.createAssets(arg3);
            this.onChangeButtonState();
            return;
        }

        public function showButton(arg1:Boolean):void
        {
            if (arg1) 
            {
                if (this._buttonContainer.parent == null) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(this._buttonContainer);
                }
            }
            else if (this._buttonContainer.parent) 
            {
                this._buttonContainer.parent.removeChild(this._buttonContainer);
            }
            return;
        }

        public function processResult_pickAgain(arg1:String, arg2:Boolean=false):void
        {
            this._buttonState = this.STATE_DISPLAYING_PICK_AGAIN;
            this._winString = arg1;
            if (arg2) 
            {
                this.onChangeButtonState();
                this.showWinValue();
            }
            else if (this._revealMovie != null) 
            {
                this.showAnim(this._revealClip);
                this._buttonMovie.addChild(this._revealMovie);
                this._scheduledActions = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                this._scheduledActions.autoDelete = true;
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.clearRevealMovie));
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.onChangeButtonState));
                if (this._showWinAmount) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.showWinValue));
                }
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.setCanInterrupt, 0, false));
                if (this._processResultCallback != null) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this._processResultCallback));
                }
                this._revealMovie.gotoAndStop("startAnim");
                this._revealMovie.addEventListener(flash.events.Event.ENTER_FRAME, this.revealWatcher);
                this.setCanInterrupt(true);
                this._revealMovie.play();
            }
            else 
            {
                this.onChangeButtonState();
                this.showWinValue();
                this._processResultCallback.apply(this._processResultCallback);
            }
            return;
        }

        public function processResult_winAll(arg1:String, arg2:Boolean=false):void
        {
            this._buttonState = this.STATE_DISPLAYING_WIN_ALL;
            this._winString = arg1;
            if (arg2) 
            {
                this.onChangeButtonState();
                this.showWinValue();
            }
            else if (this._revealMovie != null) 
            {
                this.showAnim(this._revealClip);
                this._buttonMovie.addChild(this._revealMovie);
                this._scheduledActions = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                this._scheduledActions.autoDelete = true;
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.clearRevealMovie));
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.onChangeButtonState));
                if (this._showWinAmount) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.showWinValue));
                }
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.setCanInterrupt, 0, false));
                if (this._processResultCallback != null) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this._processResultCallback));
                }
                this._revealMovie.gotoAndStop("startAnim");
                this._revealMovie.addEventListener(flash.events.Event.ENTER_FRAME, this.revealWatcher);
                this.setCanInterrupt(true);
                this._revealMovie.play();
            }
            else 
            {
                this.onChangeButtonState();
                this.showWinValue();
                this._processResultCallback.apply(this._processResultCallback);
            }
            return;
        }

        public function processResult_win(arg1:String, arg2:Boolean=false):void
        {
            this._buttonState = this.STATE_DISPLAYING_WIN;
            this._winString = arg1;
            if (arg2) 
            {
                this.onChangeButtonState();
                this.showWinValue();
            }
            else if (this._revealMovie != null) 
            {
                this.showAnim(this._revealClip);
                this._buttonMovie.addChild(this._revealMovie);
                this._scheduledActions = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                this._scheduledActions.autoDelete = true;
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.clearRevealMovie));
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.onChangeButtonState));
                if (this._showWinAmount) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.showWinValue));
                }
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.setCanInterrupt, 0, false));
                if (this._processResultCallback != null) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this._processResultCallback));
                }
                this._revealMovie.gotoAndStop("startAnim");
                this._revealMovie.addEventListener(flash.events.Event.ENTER_FRAME, this.revealWatcher);
                this.setCanInterrupt(true);
                this._revealMovie.play();
            }
            else 
            {
                this.onChangeButtonState();
                this.showWinValue();
                this._processResultCallback.apply(this._processResultCallback);
            }
            return;
        }

        protected function revealWatcher(arg1:flash.events.Event):void
        {
            if (arg1.target.currentFrameLabel == "endAnim" || arg1.target.currentFrame == "endAnim" || arg1.target.currentFrame == arg1.target.totalFrames) 
            {
                this._revealMovie.removeEventListener(flash.events.Event.ENTER_FRAME, this.revealWatcher);
                _trace("Starting Actions", "test", this, 4227200);
                this._scheduledActions.start();
            }
            return;
        }

        protected function setCanInterrupt(arg1:Boolean):void
        {
            this._canInterrupt = arg1;
            _trace("Setting Can Interrupt", "test", this, 4227200);
            return;
        }

        protected function showWinValue():void
        {
            if (this._customFontLbl) 
            {
                this._customFontLbl.text = this._winString;
            }
            return;
        }

        protected function onMouseClick(arg1:flash.events.MouseEvent):void
        {
            if (!this._canInteract) 
            {
                return;
            }
            if (this._clickCallback != null) 
            {
                this._clickCallback(this._item);
            }
            return;
        }

        protected function clearRevealMovie():void
        {
            if (this._revealMovie != null) 
            {
                if (this._revealMovie.parent != null) 
                {
                    this._revealMovie.parent.removeChild(this._revealMovie);
                }
            }
            return;
        }

        protected function onMouseOut(arg1:flash.events.MouseEvent):void
        {
            if (!this._canInteract) 
            {
                return;
            }
            if (this._buttonState == this.STATE_WAITING_FOR_PICK_HOVER) 
            {
                this._buttonState = this.STATE_WAITING_FOR_PICK;
            }
            this.onChangeButtonState();
            return;
        }

        protected function onMouseOver(arg1:flash.events.MouseEvent):void
        {
            if (!this._canInteract) 
            {
                return;
            }
            if (this._buttonState == this.STATE_WAITING_FOR_PICK) 
            {
                this._buttonState = this.STATE_WAITING_FOR_PICK_HOVER;
            }
            if (this._rolloverCallback != null) 
            {
                this._rolloverCallback(this._item);
            }
            this.onChangeButtonState();
            return;
        }

        protected function onChangeButtonState():void
        {
            var loc1:*=this._buttonState;
            switch (loc1) 
            {
                case this.STATE_WAITING_FOR_PICK:
                {
                    if (this._canInteract || this._remainHighlightedOnDisabled) 
                    {
                        this.showAnim(this._waitingForPickClip);
                    }
                    else 
                    {
                        this.showAnim(this._waitingForPickDisabledClip);
                    }
                    break;
                }
                case this.STATE_WAITING_FOR_PICK_HOVER:
                {
                    if (this._canInteract || this._remainHighlightedOnDisabled) 
                    {
                        this.showAnim(this._waitingForPickHoverClip);
                    }
                    else 
                    {
                        this.showAnim(this._waitingForPickDisabledClip);
                    }
                    break;
                }
                case this.STATE_DISPLAYING_WIN:
                {
                    this.showAnim(this._winClip);
                    break;
                }
                case this.STATE_DISPLAYING_WIN_ALL:
                {
                    this.showAnim(this._winAllClip);
                    break;
                }
                case this.STATE_DISPLAYING_PICK_AGAIN:
                {
                    this.showAnim(this._pickAgainClip);
                    break;
                }
            }
            return;
        }

        protected function addFont():void
        {
            if (this._buttonMovie && this._showWinAmount && this._customFontLbl) 
            {
                this._buttonMovie.addChild(this._customFontLbl);
                this._customFontLbl.x = this._buttonMovie.width / 2;
                if (this._buttonState == this.STATE_DISPLAYING_PICK_AGAIN || this._buttonState == this.STATE_DISPLAYING_PICK_AGAIN_HOVER || this._buttonState == this.STATE_DISPLAYING_WIN_ALL) 
                {
                    this._customFontLbl.y = this._buttonMovie.height / 2 + this._fontYOffsetSpecialWin;
                }
                else 
                {
                    this._customFontLbl.y = this._buttonMovie.height / 2;
                }
            }
            return;
        }

        protected function getButtonName():String
        {
            var loc1:*="anim_button_bonus_" + this._bonusID + "_item_" + this._item;
            if (this._uniqueName != "") 
            {
                loc1 = loc1 + "_" + this._uniqueName;
            }
            return loc1;
        }

        protected function removeEventListeners():void
        {
            this._buttonContainer.removeEventListener(flash.events.MouseEvent.MOUSE_OVER, this.onMouseOver);
            this._buttonContainer.removeEventListener(flash.events.MouseEvent.MOUSE_OUT, this.onMouseOut);
            this._buttonContainer.removeEventListener(flash.events.MouseEvent.CLICK, this.onMouseClick);
            return;
        }

        protected function addEventListeners():void
        {
            this._buttonContainer.addEventListener(flash.events.MouseEvent.MOUSE_OVER, this.onMouseOver);
            this._buttonContainer.addEventListener(flash.events.MouseEvent.MOUSE_OUT, this.onMouseOut);
            this._buttonContainer.addEventListener(flash.events.MouseEvent.CLICK, this.onMouseClick);
            return;
        }

        protected function setMouseOverStates(arg1:Boolean):void
        {
            if (arg1) 
            {
                this._buttonHitArea.mouseChildren = true;
            }
            else 
            {
                this._buttonHitArea.mouseChildren = false;
            }
            return;
        }

        public function set y(arg1:int):void
        {
            this._y = arg1;
            if (this._buttonMovie) 
            {
                this._buttonMovie.y = this._y;
            }
            return;
        }

        public function enableInteraction(arg1:Boolean, arg2:Boolean=false):void
        {
            if (!this._buttonMovie) 
            {
                return;
            }
            if (arg1 == this._canInteract) 
            {
                return;
            }
            if (arg1) 
            {
                this.addEventListeners();
                this.setMouseOverStates(true);
                this._canInteract = true;
            }
            else 
            {
                this._canInteract = false;
                this.setMouseOverStates(false);
                this.removeEventListeners();
            }
            this._remainHighlightedOnDisabled = arg2;
            this.onChangeButtonState();
            return;
        }

        protected function createAssets(arg1:XMLList):void
        {
            var xmlData:XMLList;
            var buttonNum:mgs.aurora.games.common.components.utils.CustomFont;

            var loc1:*;
            buttonNum = null;
            xmlData = arg1;
            this._buttonMovie = this.getAsset(xmlData, "animButton_movie");
            this._revealMovie = this.getAsset(xmlData, "animButton_reveal");
            if (this._buttonMovie) 
            {
                this._buttonMovie.x = this._x;
                this._buttonMovie.y = this._y;
                this._buttonContainer = new flash.display.Sprite();
                this._buttonContainer.name = this._buttonMovie.name;
                this._buttonContainer.addChild(this._buttonMovie);
                this._buttonContainer.mouseChildren = false;
                this._buttonContainer.useHandCursor = false;
                this._buttonHitArea = this._buttonMovie.getChildByName("hitAreaItem") as flash.display.Sprite;
                if (this._buttonHitArea == null) 
                {
                    this._buttonHitArea = this._buttonMovie;
                }
                this._buttonHitArea.mouseChildren = true;
                this._buttonHitArea.mouseEnabled = false;
                this._buttonContainer.hitArea = this._buttonHitArea;
            }
            var loc3:*=0;
            var loc4:*=xmlData.settings.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("revealClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._revealClip = loc2.@res.toString();
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("winClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._winClip = loc2.@res.toString();
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("winAllClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._winAllClip = loc2.@res.toString();
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("waitingForPickClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._waitingForPickClip = loc2.@res.toString();
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("waitingForPickHoverClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._waitingForPickHoverClip = loc2.@res.toString();
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("waitingForPickDisabledClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._waitingForPickDisabledClip = loc2.@res.toString();
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == makeUniqueString("pickAgainClip", false)) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._pickAgainClip = loc2.@res.toString();
            if (this._showWinAmount && this._buttonMovie) 
            {
                buttonNum = new mgs.aurora.games.common.components.utils.CustomFont(mgs.aurora.games.common.components.resourceProxy.Assets.getResource(this._fontResLinkage).loaderInfo.applicationDomain, this._fontName);
                this._customFontLbl = new mgs.aurora.games.common.components.utils.CustomFontLabelExt(buttonNum, "", mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN, 3, this._buttonMovie.width);
                this._customFontLbl.mouseEnabled = false;
                this._customFontLbl.mouseChildren = false;
            }
            return;
        }

        protected function getAsset(arg1:XMLList, arg2:String):flash.display.MovieClip
        {
            var xmlData:XMLList;
            var name:String;
            var uniqueName:String;
            var str:String;

            var loc1:*;
            uniqueName = null;
            str = null;
            xmlData = arg1;
            name = arg2;
            uniqueName = this.makeUniqueString(name);
            var loc3:*=0;
            var loc4:*=xmlData.assets.asset;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == uniqueName) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            str = loc2.@res.toString();
            if (str) 
            {
                return mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(str) as flash.display.MovieClip;
            }
            return null;
        }

        protected function getSettings(arg1:XMLList):void
        {
            var xmlData:XMLList;
            var str:String;

            var loc1:*;
            xmlData = arg1;
            str = this.makeUniqueString("xPos");
            var loc3:*=0;
            var loc4:*=xmlData.settings.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._x = int(loc2.@res.toString());
            str = this.makeUniqueString("yPos");
            loc3 = 0;
            loc4 = xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._y = int(loc2.@res.toString());
            return;
        }

        protected function makeUniqueString(arg1:String, arg2:Boolean=true):String
        {
            var loc1:*=arg1 + "_bonus" + this._bonusID;
            if (arg2) 
            {
                loc1 = loc1 + "_item" + this._item;
            }
            if (this._uniqueName != "") 
            {
                loc1 = loc1 + "_" + this._uniqueName;
            }
            return loc1;
        }

        public function set x(arg1:int):void
        {
            this._x = arg1;
            if (this._buttonMovie) 
            {
                this._buttonMovie.x = this._x;
            }
            return;
        }

        protected function showAnim(arg1:String):void
        {
            if (!this._buttonMovie || arg1 == this._currentlyActiveClip || arg1 == "") 
            {
                return;
            }
            this.showButton(true);
            this.removeFont();
            this._buttonMovie.gotoAndPlay(arg1);
            this._currentlyActiveClip = arg1;
            this.addFont();
            return;
        }

        protected function removeFont():void
        {
            if (this._buttonMovie && this._showWinAmount && this._customFontLbl) 
            {
                if (this._customFontLbl.parent != null) 
                {
                    this._customFontLbl.parent.removeChild(this._customFontLbl);
                }
            }
            return;
        }

        public override function dispose():void
        {
            try 
            {
                this.enableInteraction(false);
                this.removeFont();
                this._customFontLbl = null;
                if (this._buttonMovie) 
                {
                    if (this._buttonMovie != this._buttonHitArea) 
                    {
                        this._buttonHitArea = null;
                    }
                    this._buttonMovie.parent.removeChild(this._buttonMovie);
                    this._buttonMovie = null;
                    this._buttonContainer.parent.removeChild(this._buttonContainer);
                    this._buttonContainer = null;
                }
                this._revealMovie = null;
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        protected function clearScheduledActions():void
        {
            var seq:int;

            var loc1:*;
            seq = 0;
            if (this._scheduledActions != null) 
            {
                if (this._scheduledActions.isRunning) 
                {
                    this._scheduledActions.stop();
                }
                seq = 0;
                while (seq < this._scheduledActions.childActions.length) 
                {
                    try 
                    {
                        this._scheduledActions.removeAction(this._scheduledActions.childActions[seq]);
                    }
                    catch (e:Error)
                    {
                        _trace("Error in removing scheduled actions. -" + toString(), "error", this, 16711680);
                        _trace(e.getStackTrace(), "error", this, 16711680);
                    }
                    ++seq;
                }
                this._scheduledActions.kill();
            }
            return;
        }

        public function interrupt():void
        {
            if (!this._canInterrupt) 
            {
                return;
            }
            this.setCanInterrupt(false);
            this._revealMovie.removeEventListener(flash.events.Event.ENTER_FRAME, this.revealWatcher);
            this._revealMovie.stop();
            this.clearScheduledActions();
            this.clearRevealMovie();
            return;
        }

        protected const BUTTON_OVER_FRAME:String="Over";

        protected const BUTTON_DOWN_FRAME:String="Depressed";

        protected const STATE_WAITING_FOR_PICK_HOVER:int=1;

        protected const STATE_DISPLAYING_WIN:int=2;

        protected const STATE_DISPLAYING_WIN_ALL:int=3;

        protected const STATE_DISPLAYING_PICK_AGAIN:int=4;

        protected const STATE_DISPLAYING_PICK_AGAIN_HOVER:int=5;

        protected const STATE_WAITING_FOR_PICK:int=0;

        protected const BUTTON_HIDDEN_FRAME:String="Hidden";

        protected const BUTTON_DISABLE_FRAME:String="Inactive";

        protected const BUTTON_ACTIVE_FRAME:String="Active";

        protected var _showWinAmount:Boolean;

        protected var _remainHighlightedOnDisabled:Boolean;

        protected var _scheduledActions:org.as3lib.kitchensync.action.group.KSSequenceGroup;

        protected var _canInteract:Boolean=false;

        protected var _canInterrupt:Boolean=false;

        protected var _customFontLbl:mgs.aurora.games.common.components.utils.CustomFontLabelExt;

        protected var _customFontLabelLinkage:String;

        protected var _winString:String;

        protected var _fontName:String;

        protected var _fontResLinkage:String;

        protected var _y:int;

        protected var _x:int;

        protected var _buttonState:int;

        protected var _item:int=-1;

        protected var _rolloverCallback:Function;

        protected var _processResultCallback:Function;

        protected var _clickCallback:Function;

        protected var _target:flash.display.MovieClip;

        protected var _waitingForPickHoverClip:String;

        protected var _currentlyActiveClip:String="";

        protected var _pickAgainClip:String;

        protected var _waitingForPickDisabledClip:String;

        protected var _waitingForPickClip:String;

        protected var _winAllClip:String;

        protected var _bonusID:int;

        protected var _winClip:String;

        protected var _revealClip:String;

        protected var _revealMovie:flash.display.MovieClip;

        internal var _buttonContainer:flash.display.Sprite;

        internal var _buttonHitArea:flash.display.Sprite;

        protected var _buttonMovie:flash.display.MovieClip;

        protected var _layer:String=null;

        protected var _uniqueName:String;

        protected var _fontYOffsetSpecialWin:int;
    }
}


//              class SimplePickXofYBonusAgent
package mgs.aurora.games.logicBlocks.agents.BonusGameTypes 
{
    import caurina.transitions.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class SimplePickXofYBonusAgent extends mgs.aurora.games.logicBlocks.publishers.BonusServer
    {
        public function SimplePickXofYBonusAgent()
        {
            this._buttons = [];
            super();
            _publisherName = mgs.aurora.games.logicBlocks.agents.BonusGameTypes.SimplePickXofYBonusAgent.PUBLISHER_NAME;
            setClassDescription("mgs.aurora.games.slots.agents.bonus.SimplePickXofYBonusAgent");
            return;
        }

        internal function fadeOutScreen():void
        {
            caurina.transitions.Tweener.addTween(mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer), {"alpha":0, "time":2, "onComplete":this.cleanupComplete});
            return;
        }

        protected function cleanupComplete():void
        {
            mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer).alpha = 1;
            this.freeButtons();
            this.showBackground(false);
            this.showForeground(false);
            this._background = null;
            this._foreground = null;
            return;
        }

        protected function ConvertCreditsToCoins(arg1:Number):int
        {
            return arg1 / _conductor.betData.chipSize;
        }

        protected function ConvertCoinsToCredits(arg1:int):Number
        {
            return arg1 * _conductor.betData.chipSize;
        }

        protected function getWinValueString(arg1:Number):String
        {
            var loc1:*=null;
            loc1 = String(arg1);
            loc1 = mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(loc1);
            return loc1;
        }

        protected function handleSystemPick(arg1:int):void
        {
            var loc1:*=bonusData.bonusPicks.picks[arg1];
            this.playPickSound();
            mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1.item]).processResult_win(this.getWinValueString(loc1.totalWin));
            return;
        }

        protected function showBackground(arg1:Boolean):void
        {
            if (this._background != null) 
            {
                if (arg1) 
                {
                    if (this._background.parent == null) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer).addChild(this._background);
                    }
                }
                else if (this._background.parent != null) 
                {
                    this._background.parent.removeChild(this._background);
                }
            }
            return;
        }

        protected function showForeground(arg1:Boolean):void
        {
            if (this._foreground != null) 
            {
                if (arg1) 
                {
                    if (this._foreground.parent == null) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer).addChild(this._foreground);
                    }
                }
                else if (this._foreground.parent != null) 
                {
                    this._foreground.parent.removeChild(this._foreground);
                }
            }
            return;
        }

        protected function playBackgroundSound(arg1:Boolean, arg2:int=0):void
        {
            var loc1:*=null;
            if (arg1) 
            {
                if (arg2 > 0) 
                {
                    loc1 = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                    loc1.autoDelete = true;
                    loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(doSoundAction, 0, mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_BACKGROUND), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, true)));
                    loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(doSoundAction, 0, mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(makeUniqueBonusString(SND_BACKGROUND), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, 0, 100, arg2)));
                    loc1.start();
                }
                else 
                {
                    doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_BACKGROUND), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, true));
                }
            }
            else if (arg2 > 0) 
            {
                loc1 = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                loc1.autoDelete = true;
                loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(doSoundAction, 0, mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(makeUniqueBonusString(SND_BACKGROUND), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, 100, 0, arg2)));
                loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(doSoundAction, arg2 + 10, mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(makeUniqueBonusString(SND_BACKGROUND), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND)));
                loc1.start();
            }
            else 
            {
                doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(makeUniqueBonusString(SND_BACKGROUND), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND));
            }
            return;
        }

        protected function playPickSound():void
        {
            doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_PICK), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function playRolloverSound():void
        {
            doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_ROLLOVER), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        public override function dispose():void
        {
            try 
            {
                if (this._foreground) 
                {
                    if (this._foreground.parent) 
                    {
                        this._foreground.parent.removeChild(this._foreground);
                    }
                    this._foreground = null;
                }
                if (this._background) 
                {
                    if (this._background.parent) 
                    {
                        this._background.parent.removeChild(this._background);
                    }
                    this._background = null;
                }
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.cleanupBonus, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_START_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTransitionComplete, mgs.aurora.games.logicBlocks.agents.TransitionAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_COMPLETE);
            return;
        }

        protected override function setupBonusSpecificData():void
        {
            var str:String;
            var backgroundName:String;
            var foregroundName:String;

            var loc1:*;
            str = null;
            backgroundName = null;
            foregroundName = null;
            super.setupBonusSpecificData();
            this.populateSpecialIds();
            str = makeUniqueBonusString("showPickWinAmount");
            var loc3:*=0;
            var loc4:*=_xmlData.settings.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._showPickWinAmount = loc2.@val.toString() == "true";
            str = makeUniqueBonusString("showCompleteResultsOnRefresh");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._showCompleteResultsOnRefresh = loc2.@val.toString() == "true";
            str = makeUniqueBonusString("background");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            backgroundName = loc2.@val.toString();
            if (backgroundName != "") 
            {
                this._background = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(backgroundName);
            }
            str = makeUniqueBonusString("foreground");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            foregroundName = loc2.@val.toString();
            if (foregroundName != "") 
            {
                this._foreground = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(foregroundName);
            }
            if (this._showPickWinAmount) 
            {
                str = makeUniqueBonusString("fontResLinkage");
                loc3 = 0;
                loc4 = _xmlData.settings.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("id") == str) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._fontResLinkage = loc2.@val.toString();
                str = makeUniqueBonusString("fontName");
                loc3 = 0;
                loc4 = _xmlData.settings.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("id") == str) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._fontName = loc2.@val.toString();
                str = makeUniqueBonusString("fontYOffsetSpecialWin");
                loc3 = 0;
                loc4 = _xmlData.settings.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("id") == str) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._fontYOffsetSpecialWin = loc2.@val.toString();
            }
            return;
        }

        protected override function onBonusStart():void
        {
            this.showBackground(true);
            this.playBackgroundSound(true);
            this.createItemPickButtons();
            if (!hasEntryTransitions) 
            {
                this.enableItemPickButtons();
            }
            this.showForeground(true);
            this._bonusVisible = true;
            super.onBonusStart();
            return;
        }

        protected override function onTransitionComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (isWaitingForTransitionToReturn) 
            {
                this.enableItemPickButtons();
                super.onTransitionComplete(arg1);
            }
            return;
        }

        protected override function onBonusRefresh():void
        {
            if (_currentbonusState != BONUS_STATE_REFRESH_COMPLETE) 
            {
                this.showBackground(true);
                this.createItemPickButtons();
                this.enableItemPickButtons();
                this.showForeground(true);
                this.playBackgroundSound(true);
                this.updateButtonStatesOnRefresh();
                super.onBonusRefresh();
                this._bonusVisible = true;
            }
            else if (this._showCompleteResultsOnRefresh) 
            {
                this.showBackground(true);
                this.createItemPickButtons();
                this.disableItemPickButtons();
                this.showForeground(true);
                this.updateButtonStatesOnRefresh();
                this._bonusVisible = true;
            }
            return;
        }

        protected function updateButtonStatesOnRefresh():void
        {
            var loc4:*=null;
            var loc1:*=bonusData.picksNumberOf;
            var loc2:*=lastPlayerMadePickIndex;
            var loc3:*=0;
            while (loc3 < loc1) 
            {
                loc4 = bonusData.bonusPicks.picks[loc3];
                if (loc3 < loc2) 
                {
                    if (this.isWinAllResult(loc4.result[0].id)) 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4.item]).processResult_winAll(this.getWinValueString(loc4.totalWin), true);
                    }
                    else 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4.item]).processResult_win(this.getWinValueString(loc4.totalWin), true);
                    }
                }
                else if (this.isPickAgainResult(loc4.result[0].id)) 
                {
                    if (_conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE || _conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS) 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4.item]).processResult_win(this.getWinValueString(loc4.totalWin), true);
                    }
                    else 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4.item]).processResult_pickAgain(this.getWinValueString(loc4.totalWin), true);
                    }
                }
                else if (this.isWinAllResult(loc4.result[0].id)) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4.item]).processResult_winAll(this.getWinValueString(loc4.totalWin), true);
                }
                else 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4.item]).processResult_win(this.getWinValueString(loc4.totalWin), true);
                }
                ++loc3;
            }
            return;
        }

        protected function populateSpecialIds():void
        {
            var str:String;
            var strToSplit:String;

            var loc1:*;
            str = null;
            strToSplit = null;
            str = makeUniqueBonusString("pickAgainResultIds");
            var loc3:*=0;
            var loc4:*=_xmlData.settings.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            strToSplit = loc2.@val.toString();
            this._pickAgainResultIds = strToSplit.split(",");
            str = makeUniqueBonusString("winAllResultIds");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            strToSplit = loc2.@val.toString();
            this._winAllResultIds = strToSplit.split(",");
            return;
        }

        protected function isPickAgainResult(arg1:int):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._pickAgainResultIds.length) 
            {
                if (this._pickAgainResultIds[loc1] == arg1.toString()) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        protected function isWinAllResult(arg1:int):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._winAllResultIds.length) 
            {
                if (this._winAllResultIds[loc1] == arg1.toString()) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        protected override function onBonusPickResponse(arg1:int):void
        {
            var loc1:*=bonusData.bonusPicks.picks[arg1];
            this._numServerPicksToProcess = bonusData.bonusPicks.numberOf - (arg1 + 1);
            this.playPickSound();
            if (this.isPickAgainResult(loc1.result[0].id)) 
            {
                mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1.item]).processResult_pickAgain(this.getWinValueString(loc1.totalWin));
            }
            else if (this.isWinAllResult(loc1.result[0].id)) 
            {
                mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1.item]).processResult_winAll(this.getWinValueString(loc1.totalWin));
            }
            else 
            {
                mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1.item]).processResult_win(this.getWinValueString(loc1.totalWin));
            }
            return;
        }

        public function onProcessButtonPickResultComplete():void
        {
            var loc1:*=0;
            if (this._numServerPicksToProcess > 0) 
            {
                loc1 = bonusData.bonusPicks.numberOf - this._numServerPicksToProcess;
                --this._numServerPicksToProcess;
                this.handleSystemPick(loc1);
            }
            else 
            {
                if (_currentbonusState != BONUS_STATE_DISPLAYING_PICK_COMPLETE) 
                {
                    this.enableItemPickButtons();
                }
                onBonusPickResponseComplete();
            }
            return;
        }

        protected function stopPickSound():void
        {
            doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(makeUniqueBonusString(SND_PICK), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function freeButtons():void
        {
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                if (this._buttons[loc1] != null) 
                {
                    this._buttons[loc1].dispose();
                    this._buttons[loc1] = null;
                }
                ++loc1;
            }
            return;
        }

        protected function createItemPickButtons():void
        {
            var loc1:*=bonusData.items.length;
            this.freeButtons();
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                this._buttons[loc2] = this.createPickButtonForItem(loc2);
                ++loc2;
            }
            return;
        }

        protected function createPickButtonForItem(arg1:int):mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton
        {
            return new mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(_activeBonusId, arg1, _xmlData, this._showPickWinAmount, _bonusLayer, this._fontResLinkage, this._fontName, this._fontYOffsetSpecialWin, this.itemButtonClick, this.onProcessButtonPickResultComplete, this.itemButtonRollover);
        }

        protected function disableItemPickButtons(arg1:int=-1):void
        {
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                if (loc1 != arg1) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1]).enableInteraction(false);
                }
                else 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1]).enableInteraction(false, true);
                }
                ++loc1;
            }
            return;
        }

        protected function enableItemPickButtons():void
        {
            var loc4:*=0;
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc1]).enableInteraction(true);
                ++loc1;
            }
            var loc2:*=bonusData.picksNumberOf;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = bonusData.bonusPicks.picks[loc3].item;
                mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc4]).enableInteraction(false);
                ++loc3;
            }
            return;
        }

        protected function itemButtonClick(arg1:int):void
        {
            _trace("clicked on item : " + arg1);
            this.disableItemPickButtons(arg1);
            this.updateButtonsOnPick();
            sendItemPick(arg1);
            return;
        }

        protected function itemButtonRollover(arg1:int):void
        {
            _trace("rollover item : " + arg1);
            this.playRolloverSound();
            return;
        }

        protected function updateButtonsOnPick():void
        {
            var loc3:*=null;
            var loc1:*=bonusData.picksNumberOf;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                loc3 = bonusData.bonusPicks.picks[loc2];
                if (this.isPickAgainResult(loc3.result[0].id)) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc3.item]).processResult_win(this.getWinValueString(loc3.totalWin), true);
                }
                else if (this.isWinAllResult(loc3.result[0].id)) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc3.item]).processResult_winAll(this.getWinValueString(loc3.totalWin), true);
                }
                else 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._buttons[loc3.item]).processResult_win(this.getWinValueString(loc3.totalWin), true);
                }
                ++loc2;
            }
            return;
        }

        protected function cleanupBonus(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._bonusVisible || !(_activeBonusId == arg1.data) && !(_activeBonusId == -1)) 
            {
                return;
            }
            this.playBackgroundSound(false);
            this.fadeOutScreen();
            this._bonusVisible = false;
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_SimplePickXofYBonus";

        public static const SND_PICK:String="pick";

        public static const SND_ROLLOVER:String="rollover";

        public static const SND_BACKGROUND:String="background";

        protected var _buttons:Array;

        protected var _pickAgainResultIds:Array;

        protected var _winAllResultIds:Array;

        protected var _fontResLinkage:String="";

        protected var _fontName:String="";

        protected var _showPickWinAmount:Boolean=false;

        protected var _showCompleteResultsOnRefresh:Boolean=false;

        protected var _background:flash.display.MovieClip=null;

        protected var _foreground:flash.display.MovieClip=null;

        protected var _numServerPicksToProcess:int=0;

        protected var _bonusVisible:Boolean=false;

        protected var _fontYOffsetSpecialWin:int=0;
    }
}


//            class AchievementNotification
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import org.as3lib.kitchensync.action.*;
    
    public class AchievementNotification extends mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent
    {
        public function AchievementNotification()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.slots.components.achievements.AchievementNotification");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NOTIFICATION_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NOTIFICATION_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NOTIFICATION_CLICKED));
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNotification, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ACHIEVEMENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNotificationNoAssets, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ACHIEVEMENT_NO_ASSETS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNotificationToBeServed, mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.SERVICE_ACHIEVEMENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            return;
        }

        protected override function DoProcessing():void
        {
            if (_currentHookEvent != mgs.aurora.games.logicBlocks.publishers.ReelsServer.HOOK_EVENT_ALL_REELS_STOPPED) 
            {
                CompleteHookEvent();
            }
            else 
            {
                this._allReelsStopped = true;
                this.setupNotifications();
            }
            return;
        }

        internal function onNotificationToBeServed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._notificationToBeServed = true;
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._notification = null;
            this._allReelsStopped = false;
            this._notificationToBeServed = false;
            this.onInterrupt();
            return;
        }

        internal function onNotification(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._notification = Vector.<String>(arg1.data.assets);
            this._notificationPosn = flash.geom.Point(arg1.data.posn);
            this._notificationLayer = mgs.aurora.games.framework.StageReference.getLevel(String(arg1.data.layer));
            this._notificationFadeTime = Number(arg1.data.time);
            this._notificationFadeTransition = String(arg1.data.transition);
            this._notificationAutoFadeWinIds = Vector.<uint>(arg1.data.winIds);
            this._notificationAutoFadeTime = Number(arg1.data.autoFadeTime);
            this.setupNotifications();
            return;
        }

        internal function onNotificationNoAssets(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._notificationToBeServed = false;
            this.setupNotifications();
            return;
        }

        internal function setupNotifications():void
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=0;
            if (_conductor.options.isQuickSpin && _conductor.autoplay.autoPlayActive) 
            {
                CompleteHookEvent();
            }
            else if (this._notification && this._allReelsStopped) 
            {
                this._notificationLayer.alpha = 0.1;
                this._delayComplete = false;
                loc1 = 0;
                while (loc1 < this._notification.length) 
                {
                    loc3 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._notification[loc1]);
                    this._notificationLayer.addChild(loc3);
                    loc3.x = this._notificationPosn.x;
                    loc3.y = this._notificationPosn.y - loc3.height * 0.5 * (this._notification.length - 1) + loc1 * loc3.height;
                    if ((loc4 = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent).state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT || loc4.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT) 
                    {
                        loc3.addEventListener(flash.events.MouseEvent.CLICK, this.onClick);
                    }
                    ++loc1;
                }
                var loc6:*=0;
                var loc7:*=_conductor.response.wins.wins;
                for each (loc2 in loc7) 
                {
                    loc5 = 0;
                    while (loc5 < this._notificationAutoFadeWinIds.length) 
                    {
                        if (this._notificationAutoFadeWinIds[loc5] == loc2.id) 
                        {
                            this._delayComplete = true;
                            continue;
                        }
                        ++loc5;
                    }
                }
                this.fadeInNotification();
                syndicate(this, SERVICE_NOTIFICATION_OPEN, new mgs.aurora.games.framework.TransportLayer(this._delayComplete));
            }
            else if (!this._notificationToBeServed) 
            {
                CompleteHookEvent();
            }
            return;
        }

        internal function onClick(arg1:flash.events.MouseEvent):void
        {
            if (this._notificationShowing) 
            {
                syndicate(this, SERVICE_NOTIFICATION_CLICKED);
                this.removeNotification();
            }
            return;
        }

        internal function fadeInNotification():void
        {
            this._notificationShowing = true;
            caurina.transitions.Tweener.addTween(this._notificationLayer, {"alpha":1, "time":this._notificationFadeTime, "transition":this._notificationFadeTransition, "onComplete":this.checkForAutoFade});
            return;
        }

        internal function fadeOutNotification():void
        {
            caurina.transitions.Tweener.addTween(this._notificationLayer, {"alpha":0, "time":this._notificationFadeTime, "transition":this._notificationFadeTransition, "onComplete":this.removeNotification});
            return;
        }

        internal function checkForAutoFade():void
        {
            if (this._delayComplete) 
            {
                new org.as3lib.kitchensync.action.KSFunction(this.autoFadeNotification, this._notificationAutoFadeTime).start();
            }
            else 
            {
                CompleteHookEvent();
            }
            return;
        }

        internal function autoFadeNotification():void
        {
            this._delayComplete = false;
            CompleteHookEvent();
            this.removeNotification();
            return;
        }

        internal function removeNotification():void
        {
            var loc1:*=null;
            while (this._notificationLayer.numChildren > 0) 
            {
                loc1 = flash.display.MovieClip(this._notificationLayer.getChildAt(0));
                loc1.removeEventListener(flash.events.MouseEvent.CLICK, this.onClick);
                this._notificationLayer.removeChild(loc1);
            }
            this._notificationShowing = false;
            syndicate(this, SERVICE_NOTIFICATION_CLOSED);
            return;
        }

        internal function onInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._notificationShowing) 
            {
                this.fadeOutNotification();
            }
            return;
        }

        
        {
            SERVICE_NOTIFICATION_OPEN = "SERVICE_NOTIFICATION_OPEN";
            SERVICE_NOTIFICATION_CLOSED = "SERVICE_NOTIFICATION_CLOSED";
            SERVICE_NOTIFICATION_CLICKED = "SERVICE_NOTIFICATION_CLICKED";
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_ACHIEVEMENT_NOTIFICATIONS";

        internal var _notification:__AS3__.vec.Vector.<String>;

        internal var _allReelsStopped:Boolean;

        internal var _notificationPosn:flash.geom.Point;

        internal var _notificationLayer:flash.display.DisplayObjectContainer;

        internal var _notificationShowing:Boolean=false;

        internal var _notificationFadeTime:Number;

        internal var _notificationFadeTransition:String;

        internal var _notificationAutoFadeWinIds:__AS3__.vec.Vector.<uint>;

        internal var _delayComplete:Boolean;

        internal var _notificationAutoFadeTime:Number;

        internal var _notificationToBeServed:Boolean;

        public static var SERVICE_NOTIFICATION_OPEN:String="SERVICE_NOTIFICATION_OPEN";

        public static var SERVICE_NOTIFICATION_CLOSED:String="SERVICE_NOTIFICATION_CLOSED";

        public static var SERVICE_NOTIFICATION_CLICKED:String="SERVICE_NOTIFICATION_CLICKED";
    }
}


//            class AchievementsDataManager
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    
    public class AchievementsDataManager extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function AchievementsDataManager()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.slots.components.achievements.AchievementsManager");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACHIEVEMENT));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 900);
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._data = arg1.data.achievements;
            var loc1:*=new Vector.<String>();
            var loc2:*=0;
            while (loc2 < this._data.numberOf) 
            {
                if (this._data.achievements[loc2].wasJustAwarded) 
                {
                    loc1.push(this._data.achievements[loc2].name);
                }
                ++loc2;
            }
            if (loc1.length > 0) 
            {
                syndicate(this, mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.SERVICE_ACHIEVEMENT, new mgs.aurora.games.framework.TransportLayer(loc1));
            }
            return;
        }

        public function isCompleteByName(arg1:String):Boolean
        {
            if (!this._data) 
            {
                return false;
            }
            var loc1:*=0;
            while (loc1 < this._data.numberOf) 
            {
                if (this._data.achievements[loc1].name == arg1 && this._data.achievements[loc1].isComplete) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function isCompleteById(arg1:uint):Boolean
        {
            if (!this._data) 
            {
                return false;
            }
            if (this._data.achievements[arg1] && this._data.achievements[arg1].isComplete) 
            {
                return true;
            }
            return false;
        }

        public function wasJustAwardedByName(arg1:String):Boolean
        {
            if (!this._data) 
            {
                return false;
            }
            var loc1:*=0;
            while (loc1 < this._data.numberOf) 
            {
                if (this._data.achievements[loc1].name == arg1 && this._data.achievements[loc1].wasJustAwarded) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function wasJustAwardedById(arg1:uint):Boolean
        {
            if (!this._data) 
            {
                return false;
            }
            if (this._data.achievements[arg1] && this._data.achievements[arg1].wasJustAwarded) 
            {
                return true;
            }
            return false;
        }

        public function tokensCollectedByName(arg1:String):int
        {
            if (!this._data) 
            {
                return -1;
            }
            var loc1:*=0;
            while (loc1 < this._data.numberOf) 
            {
                if (this._data.achievements[loc1].name == arg1) 
                {
                    return this._data.achievements[loc1].tokensCollected;
                }
                ++loc1;
            }
            return -1;
        }

        public function tokensCollectedById(arg1:uint):int
        {
            if (!this._data) 
            {
                return -1;
            }
            if (this._data.achievements[arg1]) 
            {
                return this._data.achievements[arg1].tokensCollected;
            }
            return -1;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_ACHIEVEMENTS";

        public static const SERVICE_ACHIEVEMENT:String="SERVICE_ACHIEVEMENT";

        internal var _data:mgs.aurora.games.logicBlocks.data.types.AchievementsPacket;
    }
}


//            class AuroraConsoleAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class AuroraConsoleAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function AuroraConsoleAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent");
            this.defineSubscribers();
            return;
        }

        public function handleEvent(arg1:mgs.aurora.api.events.ApiMouseEvent):void
        {
            var loc1:*=arg1.id;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    this.showExpertButton();
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.api.enums.SystemButtonTypes.REGULAR));
                    this._consoleSaver.save(mgs.aurora.api.enums.SystemButtonTypes.REGULAR);
                    this._frameMode = mgs.aurora.api.enums.SystemButtonTypes.REGULAR;
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                {
                    this.showRegularButton();
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.api.enums.SystemButtonTypes.EXPERT));
                    this._consoleSaver.save(mgs.aurora.api.enums.SystemButtonTypes.EXPERT);
                    this._frameMode = mgs.aurora.api.enums.SystemButtonTypes.EXPERT;
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.OPTIONS:
                {
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.api.enums.SystemButtonTypes.OPTIONS));
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.BANK:
                {
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.api.enums.SystemButtonTypes.BANK));
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.STATS:
                {
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.api.enums.SystemButtonTypes.STATS));
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXIT:
                {
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.api.enums.SystemButtonTypes.EXIT));
                    break;
                }
            }
            return;
        }

        internal function showRegularButton():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.EXPERT);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.hideControls(mgs.aurora.api.enums.SystemButtonTypes.EXPERT);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.showControls(mgs.aurora.api.enums.SystemButtonTypes.REGULAR);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.REGULAR);
            return;
        }

        internal function showExpertButton():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.REGULAR);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.hideControls(mgs.aurora.api.enums.SystemButtonTypes.REGULAR);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.showControls(mgs.aurora.api.enums.SystemButtonTypes.EXPERT);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.EXPERT);
            return;
        }

        internal function setLock():void
        {
            if (!this._isReelSpinning) 
            {
                if (this._lockControls) 
                {
                    mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.lockAllControls();
                }
                else 
                {
                    mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.unlockAllControls();
                }
                syndicate(this, SERVICE_LOCK, new mgs.aurora.games.framework.TransportLayer(this._lockControls));
            }
            return;
        }

        internal function enableBank():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.BANK);
            return;
        }

        internal function onLoadScreenUp(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._loaderUp = true;
            this.update();
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function get lockReason():String
        {
            return this._lockReason;
        }

        public function get lockMiniReason():String
        {
            return this._lockMiniReason;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LOCK));
            return;
        }

        public function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_FREE_SPINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.update, mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.AutoPlayData.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.update, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_OPEN, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.update, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.update, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_FREESPINS_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleAction, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleComplete, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.RespinDisclaimerAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinDisclaimerAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.RespinDisclaimerAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinDisclaimerAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_BONUS_GAME_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLoadScreenUp, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_SHOW_LOADER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLoadScreenDown, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_HIDE_LOADER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusSummary, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegamesBackToGame, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDiscardOfferScreenOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_DISCARD_OFFER_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDiscardOfferScreenClosed, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_DISCARD_OFFER_SCREEN_CLOSED);
            this._consoleSaver = new mgs.aurora.games.common.components.utils.SaveDelay(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, 600, "Console");
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function update(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.consoleCheck();
            this.setLock();
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this.setupExpertRegular();
            return;
        }

        internal function onAllReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isReelSpinning = false;
            this.update();
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isReelSpinning = true;
            this.disableAllButtons();
            this.setLock();
            return;
        }

        internal function onDiscardOfferScreenOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._lockControls = true;
            this.disableAllButtons();
            this.setLock();
            return;
        }

        internal function onDiscardOfferScreenClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.consoleCheck();
            this.setLock();
            return;
        }

        internal function onDialogOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data == mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SCREEN_LAST_GAME_EXIT) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.EXIT);
            }
            var loc1:*;
            var loc2:*=((loc1 = this)._dialogCounter + 1);
            loc1._dialogCounter = loc2;
            this.update();
            return;
        }

        internal function onDialogClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._dialogCounter - 1);
            loc1._dialogCounter = loc2;
            this.update();
            return;
        }

        internal function onLoadScreenDown(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._loaderUp = false;
            this.update();
            return;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        internal function onFreegamesBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.update();
            return;
        }

        internal function onBonusSummary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME)).id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME)).id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
            {
                this.onDialogOpen(arg1);
            }
            return;
        }

        internal function onGambleAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_START_CARD_FLIP) 
            {
                if (loc1 == mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_END_CARD_FLIP) 
                {
                    this.enableBank();
                    mgs.aurora.games.framework.AuroraReference.aurora.status.busy = false;
                }
            }
            else 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.BANK);
                mgs.aurora.games.framework.AuroraReference.aurora.status.busy = true;
            }
            return;
        }

        internal function onGambleComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._gambleBusy = false;
            this.update();
            return;
        }

        internal function onGambleOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._gambleBusy = true;
            this.update();
            return;
        }

        internal function consoleCheck():void
        {
            if (this.isReady) 
            {
                if (this.canEnable()) 
                {
                    this.enableAllButtons();
                }
                else 
                {
                    this.disableAllButtons();
                }
            }
            return;
        }

        internal function canEnable():Boolean
        {
            if (this._dialogCounter <= 0) 
            {
                this._dialogCounter = 0;
            }
            if (this._dialogCounter > 0 || this._isReelSpinning || this._loaderUp || mgs.aurora.games.framework.AuroraReference.aurora.dialogues.globalNumDisplayed > 0) 
            {
                this._lockControls = true;
                this._lockReason = "Dialog:" + this._dialogCounter + " reelsSpinning:" + this._isReelSpinning + " loaderUp:" + this._loaderUp + " System Dialogs:" + mgs.aurora.games.framework.AuroraReference.aurora.dialogues.numDisplayed + " gambleBusy:" + this._gambleBusy;
                this._lockMiniReason = this._lockReason;
                return false;
            }
            if (this._conductor.autoplay.autoplaysLeft > 0 || this._gambleBusy) 
            {
                this._lockReason = "autoplays:" + this._conductor.autoplay.autoplaysLeft + " _gambleBusy:" + this._gambleBusy;
                this._lockMiniReason = "Autoplay or Gamble state";
                this._lockControls = false;
                return false;
            }
            if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS || this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE || this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) 
            {
                if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS) 
                {
                    this._lockReason = "Freespins or Choosing a Bonus";
                    this._lockControls = true;
                }
                else 
                {
                    this._lockReason = "Not locked";
                    this._lockControls = false;
                }
                this._lockMiniReason = "FrameState:" + this._conductor.response.framework.state;
                return false;
            }
            if (this._conductor.freeGamesData.isFreeGameActive && this._conductor.freeGamesData.activeGame.gamesRemaining == 0) 
            {
                this._lockMiniReason = "Freegames:" + this._conductor.freeGamesData.isFreeGameActive + " and gamesRemaining:" + this._conductor.freeGamesData.activeGame.gamesRemaining;
                if (this._conductor.response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    this._lockControls = true;
                    this._lockReason = this._lockMiniReason;
                }
                else 
                {
                    this._lockControls = false;
                    this._lockReason = "Not locked";
                }
                return false;
            }
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    this._lockReason = "Not locked. STATE:" + this._conductor.state.state;
                    this._lockMiniReason = "STATE:" + this._conductor.state.state;
                    this._lockControls = false;
                    return false;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SELECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SELECT:
                {
                    this._lockReason = "STATE:" + this._conductor.state.state;
                    this._lockMiniReason = "STATE:" + this._conductor.state.state;
                    this._lockControls = true;
                    return false;
                }
            }
            this._lockReason = "Not Locked";
            this._lockMiniReason = "Not Locked";
            this._lockControls = false;
            return true;
        }

        public function setupExpertRegular():void
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "Console");
            if (loc1 != mgs.aurora.api.enums.SystemButtonTypes.EXPERT) 
            {
                this._frameMode = mgs.aurora.api.enums.SystemButtonTypes.REGULAR;
            }
            else 
            {
                this._frameMode = mgs.aurora.api.enums.SystemButtonTypes.EXPERT;
            }
            this._consoleSaver.save(this._frameMode);
            if (this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT) 
            {
                this.showExpertButton();
            }
            else 
            {
                this.showRegularButton();
            }
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.addEventListener(mgs.aurora.api.events.ApiMouseEvent.CLICK, this.handleEvent);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.OPTIONS);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.STATS);
            this.enableBank();
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.HELP);
            mgs.aurora.games.framework.AuroraReference.aurora.status.busy = false;
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._frameMode));
            return;
        }

        internal function disableAllButtons():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.OPTIONS);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.STATS);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.EXPERT);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.REGULAR);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.HELP);
            if (!this._gambleBusy) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.disableControls(mgs.aurora.api.enums.SystemButtonTypes.BANK);
                mgs.aurora.games.framework.AuroraReference.aurora.status.busy = true;
            }
            return;
        }

        internal function enableAllButtons():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.OPTIONS);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.STATS);
            mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.enableControls(mgs.aurora.api.enums.SystemButtonTypes.HELP);
            if (this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT) 
            {
                this.showExpertButton();
            }
            else 
            {
                this.showRegularButton();
            }
            this.enableBank();
            mgs.aurora.games.framework.AuroraReference.aurora.status.busy = false;
            return;
        }

        public static const PUBLISHER_NAME:String="AURORA_CONSOLE";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const SERVICE_LOCK:String="LOCK_CONTROLS";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _isReelSpinning:Boolean=false;

        internal var _dialogCounter:int=0;

        internal var _loaderUp:Boolean=false;

        internal var _gambleBusy:Boolean=false;

        internal var _lockControls:Boolean=false;

        internal var _lockReason:String;

        internal var _lockMiniReason:String;

        internal var _consoleSaver:mgs.aurora.games.common.components.utils.SaveDelay;

        internal var _frameMode:String;
    }
}


//            class AuroraLocalizeAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.common.components.loader.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class AuroraLocalizeAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function AuroraLocalizeAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.AuroraLocalizeAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.AuroraLocalizeAgent");
            return;
        }

        public function defineServices():void
        {
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.loadLocalizedStrings, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            return;
        }

        internal function loadLocalizedStrings(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._hasView = true;
                    }
                    ++loc3;
                }
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc1:*=new Vector.<XML>(0);
            if (mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.isResource("Strings")) 
            {
                loc1.push(mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Strings"));
            }
            if (mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.isResource("SlotCommonStrings")) 
            {
                loc1.push(mgs.aurora.games.common.components.resourceProxy.Assets.getXML("SlotCommonStrings"));
            }
            if (loc1.length > 0) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.localized.registerStrings(loc1);
            }
            mgs.aurora.games.framework.AuroraReference.aurora.localized.translateAttributeValues(mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs"), "text");
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasView;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_AURORA_LOCALIZE";

        internal var _isConfig:Boolean=false;

        internal var _hasView:Boolean=false;
    }
}


//            class AuroraSystemAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class AuroraSystemAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function AuroraSystemAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SYSTEM_READY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BANK_BALANCE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_EXIT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REQUEST_EXIT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ERROR));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BALANCE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY, -1);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSystemReady, PUBLISHER_NAME, SERVICE_SYSTEM_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onExit, PUBLISHER_NAME, SERVICE_REQUEST_EXIT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onError, PUBLISHER_NAME, SERVICE_ERROR);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBankBalance, PUBLISHER_NAME, SERVICE_BANK_BALANCE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.lockBalance, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN, 401);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.unlockBalance, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE, 300);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.lockBalance, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.unlockBalance, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 400);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.lockBalance, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.unlockBalance, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_COMPLETE, 400);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGameBalanceUpdate, mgs.aurora.games.logicBlocks.agents.SgiAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.SgiAgent.SERVICE_PRE_BALANCE_UPDATE, 400);
            return;
        }

        internal function onGameBalanceUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.framework.AuroraReference.aurora.status.initialized) 
            {
                this._gameBalanceUpdate = true;
            }
            return;
        }

        internal function lockBalance(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._lockBalance = true;
            return;
        }

        internal function unlockBalance(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._lockBalance = false;
            return;
        }

        internal function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView && !(loc1.view == mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD)) 
            {
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._hasView = true;
                        _trace("NOTE: Aurora initialized.", "GCL", this, 8405056);
                        mgs.aurora.games.framework.AuroraReference.aurora.status.initialized = true;
                    }
                    ++loc3;
                }
            }
            return;
        }

        internal function onExit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeGamesData;
            if (!loc1.hasFreeGames || this._errorFlag) 
            {
                this.exit = true;
            }
            else if (loc1.hasFreeGames && !loc1.isFreeGameActive) 
            {
                this.exit = true;
            }
            return;
        }

        internal function onSystemReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("NOTE: System ready.", "GCL", this, 8405056);
            return;
        }

        internal function onError(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("NOTE: System Error.", "GCL", this, 8405056);
            this._errorFlag = true;
            return;
        }

        internal function onBankBalance(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            if (!this._lockBalance && !this._gameBalanceUpdate) 
            {
                loc1 = arg1.data;
                syndicate(this, SERVICE_BALANCE_UPDATE, new mgs.aurora.games.framework.TransportLayer(loc1));
            }
            this._gameBalanceUpdate = false;
            return;
        }

        public function set exit(arg1:Boolean):void
        {
            if (arg1) 
            {
                syndicate(this, SERVICE_EXIT);
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static function get balance():Number
        {
            return mgs.aurora.games.framework.AuroraReference.aurora.banking.balance;
        }

        public static function set balance(arg1:Number):void
        {
            var loc1:*=null;
            if (arg1 < 0) 
            {
                loc1 = mgs.aurora.games.logicBlocks.agents.ConductorAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME));
                mgs.aurora.games.framework.AuroraReference.aurora.banking.balance = loc1.response.player.balance;
            }
            else 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.balance = arg1;
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_AURORA_SYSTEM";

        public static const SERVICE_SYSTEM_READY:String="SYSTEM_READY";

        public static const SERVICE_BANK_BALANCE:String="BANK_BALANCE";

        public static const SERVICE_EXIT:String="EXIT";

        public static const SERVICE_REQUEST_EXIT:String="REQUEST_EXIT";

        public static const SERVICE_ERROR:String="ERROR";

        public static const SERVICE_BALANCE_UPDATE:String="BALANCE_UPDATE";

        internal var _isConfig:Boolean=false;

        internal var _hasView:Boolean=false;

        internal var _errorFlag:Boolean=false;

        internal var _lockBalance:Boolean=false;

        internal var _gameBalanceUpdate:Boolean=false;
    }
}


//            class BackgroundScene
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.generic.collections.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public class BackgroundScene extends mgs.aurora.games.base.BaseClass implements mgs.aurora.games.common.components.generic.collections.Iterator
    {
        public function BackgroundScene(arg1:XML)
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.agents.BackgroundScene");
            var loc1:*=arg1.asset;
            var loc2:*=loc1.length();
            this._id = arg1.@id.toString();
            this._views = arg1.@views.toString().split(",");
            this._assets = new Array(loc2);
            while (--loc2 > -1) 
            {
                this._assets[loc2] = new mgs.aurora.games.logicBlocks.data.BackgroundSceneAsset(loc1[loc2].@id.toString(), loc1[loc2].@layer.toString());
            }
            this._assets.reverse();
            return;
        }

        public function ActiveInView(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._views.length) 
            {
                if (this._views[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function reset():void
        {
            this._ptr = -1;
            return;
        }

        public function hasNext():Boolean
        {
            if (!this._assets) 
            {
                return false;
            }
            if (this._assets.length == 0) 
            {
                return false;
            }
            if (this._ptr + 1 < this._assets.length) 
            {
                return true;
            }
            return false;
        }

        public function next():Object
        {
            if (this.hasNext()) 
            {
                var loc1:*;
                var loc2:*;
                return this._assets[loc1._ptr = loc2 = ((loc1 = this)._ptr + 1)];
            }
            return null;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get views():Array
        {
            return this._views;
        }

        public function get assets():Array
        {
            return this._assets;
        }

        public override function dispose():void
        {
            this._assets = null;
            super.dispose();
            return;
        }

        internal var _id:String;

        internal var _views:Array;

        internal var _assets:Array;

        internal var _ptr:int=-1;
    }
}


//            class BaseBonusSoundAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    
    public class BaseBonusSoundAgent extends mgs.aurora.games.logicBlocks.agents.SoundLogicAgent
    {
        public function BaseBonusSoundAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.BaseBonusSoundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.slots.agents.sound.BaseBonusSoundAgent");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSoundAction, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_SND_ACTION);
            return;
        }

        protected function onSoundAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            getSlotSoundServer().processSoundAction(arg1.data);
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_BonusSoundAgent";
    }
}


//            class BaseGameSoundAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.reelEngine.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    
    public class BaseGameSoundAgent extends mgs.aurora.games.logicBlocks.agents.SoundLogicAgent
    {
        public function BaseGameSoundAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.BaseGameSoundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.slots.agents.sound.BaseGameSoundAgent");
            return;
        }

        protected function stopBackgroundSound():void
        {
            if (this._activeBackgroundSound != null) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(this._activeBackgroundSound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND));
                var loc1:*;
                this._activeBackgroundSound = loc1 = null;
                loc1;
            }
            return;
        }

        protected function muteBackgroundSound(arg1:int=1):void
        {
            if (this._activeBackgroundSound != null) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(this._activeBackgroundSound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, 100, 0, arg1));
            }
            return;
        }

        protected function unMuteBackgroundSound(arg1:int=1):void
        {
            if (this._activeBackgroundSound != null) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(this._activeBackgroundSound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, 0, 100, arg1));
            }
            return;
        }

        protected function setBackgroundVolumeOverTime(arg1:int=0, arg2:int=100, arg3:int=1):void
        {
            if (this._activeBackgroundSound != null) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(this._activeBackgroundSound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, arg1, arg2, arg3));
            }
            return;
        }

        internal function onRollingReelsExplode(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_ROLLING_REELS_EXPLODE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        internal function onRollingReelsMultiplier(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            var loc1:*=arg1.data;
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_ROLLING_REELS_MULTIPLIER + "_" + loc1, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        internal function onRollingReelsReelLand(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_ROLLING_REELS_REEL_LAND, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        internal function onMovieWinOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            var loc1:*;
            this._isanOpenMovieWin = loc1 = true;
            loc1;
            if (!this.isFreeSpins() && !this._wildReelsFeatureActive) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_MOVIE_WIN_PREFIX, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(arg1.data as String, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, false, this.onWinSoundComplete));
            }
            return;
        }

        internal function onMovieWinComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._isanOpenMovieWin = loc1 = false;
            loc1;
            if (!this.isFreeSpins() && !this._wildReelsFeatureActive) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(arg1.data as String, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            }
            return;
        }

        internal function onWildReelsFeature(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._wildReelsFeatureActive = loc1 = true;
            loc1;
            return;
        }

        internal function onNotification(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._notificationServed = loc1 = true;
            loc1;
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_ACHIEVEMENT_NOTIFICATION, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            if (arg1.data) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_ACHIEVEMENT_MOVIEWIN_ANNOUNCEMENT, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            }
            this.playWinSounds();
            return;
        }

        internal function isAutoPlayAndQuickSpin():Boolean
        {
            return _conductor.options.isQuickSpin && _conductor.autoplay.autoPlayActive;
        }

        protected function onSoundServerReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._soundServerReady = loc1 = true;
            loc1;
            if (this._activeBackgroundSound == null) 
            {
                this.playAppropriateBackgroundSound();
            }
            return;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.playIntro, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CONSOLE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_EVENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPresentWins, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStop, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinCompleteDelayStart, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_COMPLETE_DELAY_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.reelEvent, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_REEL_EVENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onClick, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_CLICK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupBegin, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnimation, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_TRIGGER_ANIM);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerComplete, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartAutoplay, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCancelAutoplay, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_CANCEL_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesScreenOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesScreenClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_SelectNext, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SELECT_NEXT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_SelectPrev, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SELECT_PREV);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_UseLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_LATER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_UseNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_Continue, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_ContinueBase, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE_BASE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_BackToGame, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.freeGames_Help, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_HELP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFSSummaryOpen, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFSSummaryClosed, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBigWin, mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BigWinServer.SERVICE_BIGWIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBigWinComplete, mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BigWinServer.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPreBigWin, mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BigWinServer.SERVICE_PRE_BIGWIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusStart, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusEnd, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartFreespins, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.payTableNext, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_NEXT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.payTablePrev, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_PREVIOUS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.payTableClose, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.payTableOpen, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleAction, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleLose, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_LOST);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleWin, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_WIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleWinLimit, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_WIN_LIMIT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleComplete, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdatePaylineSelectors, mgs.aurora.games.logicBlocks.publishers.PaylineServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.PaylineServer.SERVICE_PAYLINES_SELECTOR_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSoundServerReady, mgs.aurora.games.logicBlocks.publishers.SoundServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SoundServer.SERVICE_ON_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsExplode, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_EXPLODE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsMultiplier, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_MULTIPLIER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsReelLand, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_REEL_LAND);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMovieWinOpen, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_MOVIE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMovieWinComplete, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNotification, mgs.aurora.games.logicBlocks.agents.AchievementNotification.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AchievementNotification.SERVICE_NOTIFICATION_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsFeature, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_ACTIVE);
            return;
        }

        protected function playIntro(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        protected override function setup():void
        {
            super.setup();
            if (isReady && !this._hasPlayedIntro) 
            {
                this._hasPlayedIntro = true;
                var loc1:*=_conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COLLECT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_INTRO_SCREEN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
            }
            if (this._soundServerReady && this._activeBackgroundSound == null) 
            {
                this.playAppropriateBackgroundSound();
            }
            return;
        }

        protected function onGambleAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            var loc1:*=arg1.data;
            if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_BLACK_CLICKED) 
            {
                if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_RED_CLICKED) 
                {
                    if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_CLUB_CLICKED) 
                    {
                        if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_SPADE_CLICKED) 
                        {
                            if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_HEART_CLICKED) 
                            {
                                if (loc1 != mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_DIAMOND_CLICKED) 
                                {
                                    if (loc1 == mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_START_CARD_FLIP) 
                                    {
                                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_GAMBLE_CARD_FLIP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
                                    }
                                }
                                else 
                                {
                                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_GAMBLE_BTN_DIAMOND, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                                }
                            }
                            else 
                            {
                                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_GAMBLE_BTN_HEART, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                            }
                        }
                        else 
                        {
                            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_GAMBLE_BTN_SPADE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                        }
                    }
                    else 
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_GAMBLE_BTN_CLUB, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                    }
                }
                else 
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_GAMBLE_BTN_RED, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                }
            }
            else 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_GAMBLE_BTN_BLACK, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            return;
        }

        protected function onGambleLose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_GAMBLE_LOSE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        protected function onGambleWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_GAMBLE_WIN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        protected function onGambleWinLimit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_GAMBLE_WIN_LIMIT, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        protected function onGambleComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_GAMBLE_COMPLETE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        protected function onUpdatePaylineSelectors(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_PAYLINE_SELECTOR, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function reelEvent(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            var loc1:*=arg1.data;
            var loc2:*=loc1.eventType;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BOUNCE:
                {
                    this.onReelBounce(loc1);
                    break;
                }
                case mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_SPIN:
                {
                    this.onReelSpinAnimStart(loc1);
                    break;
                }
            }
            return;
        }

        protected function onReelBounce(arg1:mgs.aurora.games.common.dataTypes.TransReelAVEvent):void
        {
            var loc2:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            if (!isReady) 
            {
                return;
            }
            if (!(_conductor.options.isQuickSpin && !(arg1.id == 0))) 
            {
                var loc7:*;
                (loc4 = new mgs.aurora.games.common.dataTypes.SlotSoundActionData()).soundCat = loc7 = mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME;
                loc7;
                loc4.action = loc7 = mgs.aurora.games.common.dataTypes.SlotSoundActionData.ACTION_PLAY;
                loc7;
                if (_conductor.freeSpinsData.isFreespinsActive) 
                {
                    loc4.soundName = loc7 = SND_GAME_REEL_BOUNCE_FS;
                    loc7;
                }
                else 
                {
                    loc4.soundName = loc7 = SND_GAME_REEL_BOUNCE;
                    loc7;
                }
                getSlotSoundServer().processSoundAction(loc4);
            }
            var loc1:*=mgs.aurora.games.logicBlocks.data.ReelsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ReelsData.PUBLISHER_NAME));
            if (this._reelStops >= (loc1.columns - 1)) 
            {
                loc7 = _conductor.state.state;
                switch (loc7) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_REEL_SPIN_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                        break;
                    }
                    default:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_REEL_SPIN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                    }
                }
            }
            var loc8:*=((loc7 = this)._reelStops + 1);
            loc7._reelStops = loc8;
            (loc7 = this)._reelStops;
            var loc3:*=0;
            while (loc3 < _conductor.reelData.rows) 
            {
                loc2 = loc7 = _conductor.reelData.columns * loc3 + arg1.id;
                loc7;
                if (!((loc5 = _symbolsData.isTrigger(loc2)) == null) && _symbolsData.canPlayLandList[arg1.id]) 
                {
                    loc6 = "scatter_sym_" + loc5.id.toString() + "_land_reel_" + _symbolsData.triggerCounterList[arg1.id];
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(loc6, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                }
                ++loc3;
            }
            if (!this._isAnticipating && !_conductor.options.isQuickSpin) 
            {
                if (arg1.id > 0 && _symbolsData.anticipateList[arg1.id] && _symbolsData.canPlayTriggerList[arg1.id]) 
                {
                    this._isAnticipating = loc7 = true;
                    loc7;
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_ANTICIPATE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, true));
                }
            }
            else if (!_symbolsData.anticipateList[arg1.id] || arg1.id == _conductor.reelData.columns) 
            {
                this._isAnticipating = loc7 = false;
                loc7;
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WIN_ANTICIPATE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            }
            return;
        }

        protected function onReelSpinAnimStart(arg1:mgs.aurora.games.common.dataTypes.TransReelAVEvent):void
        {
            if (!isReady) 
            {
                return;
            }
            if (arg1.id == 0) 
            {
                var loc1:*=_conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_REEL_SPIN_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, true));
                        break;
                    }
                    default:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_REEL_SPIN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, true, null));
                    }
                }
            }
            return;
        }

        protected function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(isReady && canDo)) 
            {
                return;
            }
            getSlotSoundServer().stopAllSounds(mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN);
            var loc1:*=_conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    break;
                }
                default:
                {
                    if (_conductor.settings.doReelSpinBkgSoundFadeOut) 
                    {
                        this.setBackgroundVolumeOverTime(100, _conductor.settings.reelSpinBkgSoundFadeOutLevel, _conductor.settings.reelSpinBkgSoundFadeOutTime);
                    }
                    break;
                }
            }
            return;
        }

        protected function onReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.common.dataTypes.TransReelAVEvent(arg1.data).eventType != mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BOUNCE) 
            {
                return;
            }
            if (!isReady || _conductor.options.isQuickSpin && !(arg1.data.id == 0)) 
            {
                return;
            }
            var loc1:*=getSlotSoundServer();
            loc1.processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(loc1.getStopSoundName(_conductor.response.slot.reelSet, arg1.data.id), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function onAllReelsStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(isReady && canDo)) 
            {
                return;
            }
            if (this._isAnticipating) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WIN_ANTICIPATE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            }
            var loc1:*=_conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_REEL_SPIN_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                    break;
                }
                default:
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_REEL_SPIN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                }
            }
            return;
        }

        protected function isFreeSpins():Boolean
        {
            if (!(isReady && canDo)) 
            {
                return false;
            }
            var loc1:*=_conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS_AFTER_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    return true;
                }
                default:
                {
                    return false;
                }
            }
        }

        protected function onPresentWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(isReady && canDo)) 
            {
                return;
            }
            if (this.isFreeSpins()) 
            {
                this.playWinSounds_FreeSpins();
            }
            else if (!this._notificationServed) 
            {
                this.playWinSounds();
            }
            return;
        }

        protected function playWinSounds():void
        {
            var loc1:*=0;
            var loc2:*=_conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                {
                    if (_conductor.settings.doReelSpinBkgSoundFadeOut) 
                    {
                        this.setBackgroundVolumeOverTime(_conductor.settings.reelSpinBkgSoundFadeOutLevel, 0, 2);
                    }
                    else 
                    {
                        this.setBackgroundVolumeOverTime(100, 0, 2);
                    }
                    break;
                }
                default:
                {
                    if (_conductor.settings.doReelSpinBkgSoundFadeOut) 
                    {
                        this.setBackgroundVolumeOverTime(_conductor.settings.reelSpinBkgSoundFadeOutLevel, 100, _conductor.settings.reelSpinBkgSoundFadeInTime);
                    }
                }
            }
            if (_conductor.response.wins.numberOf > 0) 
            {
                if (_conductor.settings.doOnWinBkgSoundFadeOut) 
                {
                    this.setBackgroundVolumeOverTime(100, _conductor.settings.onWinBkgSoundFadeOutLevel, _conductor.settings.onWinBkgSoundFadeOutTime);
                }
                if (!this._isBigWinCountup && !this._isanOpenMovieWin && !this._isPlayingTriggerSound) 
                {
                    loc1 = _conductor.response.slot.win / _conductor.betData.numChips / _conductor.betData.chipSize;
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayRangeAction(mgs.aurora.games.logicBlocks.publishers.SlotSoundServer.SOUNDS_WIN_RANGE, _conductor.response.wins.wins[0].id, loc1, this.onWinSoundComplete));
                }
            }
            return;
        }

        public function onWinSoundComplete(... rest):void
        {
            if (_conductor.settings.doOnWinBkgSoundFadeOut) 
            {
                this.setBackgroundVolumeOverTime(_conductor.settings.onWinBkgSoundFadeOutLevel, 100, _conductor.settings.onWinBkgSoundFadeInTime);
            }
            return;
        }

        protected function playWinSounds_FreeSpins():void
        {
            var loc1:*=_conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    if (_conductor.settings.doReelSpinBkgSoundFadeOut) 
                    {
                        this.setBackgroundVolumeOverTime(_conductor.settings.reelSpinBkgSoundFadeOutLevel, 0, 2);
                    }
                    else 
                    {
                        this.setBackgroundVolumeOverTime(100, 0, 2);
                    }
                    break;
                }
                default:
                {
                    if (_conductor.settings.doReelSpinBkgSoundFadeOut) 
                    {
                        this.setBackgroundVolumeOverTime(_conductor.settings.reelSpinBkgSoundFadeOutLevel, 100, _conductor.settings.reelSpinBkgSoundFadeInTime);
                    }
                }
            }
            return;
        }

        protected function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(isReady && canDo)) 
            {
                return;
            }
            if (!_conductor.options.isQuickSpin) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_SPIN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            this.resetForNewSpin();
            return;
        }

        protected function onFreeSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(isReady && canDo)) 
            {
                return;
            }
            if (!_conductor.options.isQuickSpin) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_SPIN_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            this.resetForNewSpin();
            return;
        }

        protected function onFreeSpinCompleteDelayStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(isReady && canDo)) 
            {
                return;
            }
            this.setBackgroundVolumeOverTime(100, _conductor.settings.onFSSummaryBkgSoundFadeOutLevel, _conductor.settings.onFSSummaryBkgSoundFadeOutTime);
            return;
        }

        protected function onClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("btn_" + arg1.data, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function onStartFreespins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            this.playAppropriateBackgroundSound();
            return;
        }

        internal function onCountupBegin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady || _conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                return;
            }
            if (this._wildReelsFeatureActive) 
            {
                var loc1:*;
                this._playingWildCountup = loc1 = true;
                loc1;
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WILD_REEL_WIN_COUNTUP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, true));
            }
            else if (this._isBigWinCountup && !(this._isanOpenMovieWin && !this.isFreeSpins())) 
            {
                this._playingBigWinCountup = loc1 = true;
                loc1;
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_BIGWIN_COUNTUP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, true));
            }
            else 
            {
                loc1 = _conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    {
                        this._playingCountup = loc1 = true;
                        loc1;
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_COUNTUP_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, true));
                        break;
                    }
                    default:
                    {
                        if (!this.isAutoPlayAndQuickSpin()) 
                        {
                            this._playingCountup = loc1 = true;
                            loc1;
                            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_COUNTUP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, true));
                        }
                        break;
                    }
                }
            }
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady || _conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                return;
            }
            if (this._playingWildCountup) 
            {
                this.endWildReelCountup();
                return;
            }
            if (this._playingBigWinCountup) 
            {
                this.endBigWinCountup();
                return;
            }
            if (this._playingCountup) 
            {
                var loc1:*=_conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WIN_COUNTUP_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_COUNTUP_END_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN_2));
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WIN_COUNTUP_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_COUNTUP_END_FS, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN_2));
                        break;
                    }
                    default:
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WIN_COUNTUP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_COUNTUP_END, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN_2));
                        break;
                    }
                }
                this._playingCountup = loc1 = false;
                loc1;
            }
            return;
        }

        protected function onFSSummaryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (!isReady) 
            {
                return;
            }
            if (!_conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                loc1 = SND_GAME_SUMMARY_FS + "_" + _conductor.view.getFreeSpinsUniqueId();
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(loc1, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            this.playAppropriateBackgroundSound();
            return;
        }

        protected function onFSSummaryClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            this.playAppropriateBackgroundSound();
            return;
        }

        protected function endWildReelCountup():void
        {
            var loc1:*;
            this._playingWildCountup = loc1 = false;
            loc1;
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WILD_REEL_WIN_COUNTUP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            this.setBackgroundVolumeOverTime(0, 100, 5);
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WILD_REEL_WIN_COUNTUP_END, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN_2));
            return;
        }

        protected function endBigWinCountup():void
        {
            var loc1:*;
            this._playingBigWinCountup = loc1 = false;
            loc1;
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_WIN_BIGWIN_COUNTUP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            this.setBackgroundVolumeOverTime(0, 100, 5);
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_BIGWIN_COUNTUP_END, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN_2));
            return;
        }

        protected function onTriggerAnimation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            if (!this._isPlayingTriggerSound) 
            {
                var loc1:*;
                this._isPlayingTriggerSound = loc1 = true;
                loc1;
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_TRIGGER + "_" + arg1.data.id, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            }
            return;
        }

        protected function onBonusStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.stopBackgroundSound();
            return;
        }

        protected function onBonusEnd(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.playAppropriateBackgroundSound();
            return;
        }

        internal function payTableNext(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_PAYTABLE_NEXT, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function payTablePrev(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_PAYTABLE_PREV, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function payTableClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_PAYTABLE_BACK, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function payTableOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_PAYTABLE_OPEN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            if (_symbolsData.canAnticipate && !_conductor.options.isQuickSpin && !_symbolsData.reelHasTrigger[arg1.data]) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_RESPIN, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            return;
        }

        internal function onStartAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_START_AUTOPLAY, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function onCancelAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_CANCEL_AUTOPLAY, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function onPreBigWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.publishers.BigWinServer;
            var loc2:*;
            this._isBigWinCountup = loc2 = loc1.playCountupSound;
            loc2;
            return;
        }

        protected function onBigWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_WIN_BIGWIN_ATTENTION, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN));
            return;
        }

        protected function onBigWinComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            if (this._playingBigWinCountup) 
            {
                this.endBigWinCountup();
                return;
            }
            return;
        }

        protected function resetForNewSpin():void
        {
            if (!isReady) 
            {
                return;
            }
            var loc1:*;
            this._reelStops = loc1 = 0;
            loc1;
            this._isBigWinCountup = loc1 = false;
            loc1;
            this._isAnticipating = loc1 = false;
            loc1;
            this._isPlayingTriggerSound = loc1 = false;
            loc1;
            this._wildReelsFeatureActive = loc1 = false;
            loc1;
            this._notificationServed = loc1 = false;
            loc1;
            return;
        }

        internal function onTriggerComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            this.playAppropriateBackgroundSound();
            return;
        }

        internal function onFreeGamesScreenClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().updateOptions();
            return;
        }

        internal function onFreeGamesScreenOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            return;
        }

        internal function freeGames_SelectPrev(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_PREV, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_SelectNext(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_NEXT, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_UseNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_USE_NOW, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_UseLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_USE_LATER, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_Continue(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_CONTINUE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_ContinueBase(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_CONTINUE_BASE, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_BackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_BACK_TO_GAME, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function freeGames_Help(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_FG_HELP, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected function playAppropriateBackgroundSound():void
        {
            _trace("playAppropriateBackgroundSound()");
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().updateOptions();
            var loc1:*=_conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_WIN:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                {
                    this.setActiveBackgroundSound(SND_BACKGROUND);
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                {
                    this.setActiveBackgroundSound(SND_BACKGROUND + "_" + _conductor.view.view);
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    this.setActiveBackgroundSound(SND_BACKGROUND_FS_EXIT_LOOP);
                    break;
                }
            }
            return;
        }

        protected function setActiveBackgroundSound(arg1:String):void
        {
            if (arg1 != this._activeBackgroundSound) 
            {
                this.stopBackgroundSound();
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(arg1, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, true));
                var loc1:*;
                this._activeBackgroundSound = loc1 = arg1;
                loc1;
                this.setBackgroundVolumeOverTime(0, 100, 0);
            }
            return;
        }

        public static const SND_GAME_PAYTABLE_NEXT:String="paytable_next";

        public static const SND_WIN_GAMBLE_LOSE:String="gamble_lose";

        public static const SND_WIN_GAMBLE_COMPLETE:String="gamble_complete";

        public static const SND_WIN_COUNTUP:String="countup";

        public static const SND_WIN_COUNTUP_END:String="countup_end";

        public static const SND_WIN_COUNTUP_FS:String="countup_fs";

        public static const SND_WIN_ROLLING_REELS_EXPLODE:String="rollingReels_explode";

        public static const SND_WIN_ROLLING_REELS_MULTIPLIER:String="rollingReels_multiply";

        public static const SND_GAME_FG_NEXT:String="freeGame_next";

        public static const SND_WIN_ROLLING_REELS_REEL_LAND:String="rollingReels_reel_land";

        public static const SND_BACKGROUND:String="background";

        public static const SND_BACKGROUND_FS_EXIT_LOOP:String="back_fs_exit_loop";

        public static const SND_GAME_PAYLINE_SELECTOR:String="payline_selector";

        public static const SND_WILD_REEL_WIN_COUNTUP:String="wild_reel_win_countup";

        public static const PUBLISHER_NAME:String="AGENT_BaseGameSoundAgent";

        public static const SND_GAME_PAYTABLE_OPEN:String="paytable_open";

        public static const SND_WILD_REEL_WIN_COUNTUP_END:String="wild_reel_win_countup_end";

        public static const SND_GAME_PAYTABLE_PREV:String="paytable_prev";

        public static const SND_GAME_PAYTABLE_BACK:String="paytable_back";

        public static const SND_GAME_REEL_BOUNCE:String="reel_bounce";

        public static const SND_GAME_REEL_BOUNCE_FS:String="reel_bounce_fs";

        public static const SND_WIN_ANTICIPATE:String="reel_anticipate";

        public static const SND_GAME_SPIN_FS:String="spin_fs";

        public static const SND_GAME_SPIN:String="spin";

        public static const SND_GAME_REEL_SPIN_FS:String="reel_spin_fs";

        public static const SND_GAME_REEL_SPIN:String="reel_spin";

        public static const SND_GAME_INTRO_SCREEN:String="intro_screen";

        public static const SND_GAME_SUMMARY:String="summary";

        public static const SND_GAME_SUMMARY_FS:String="summary_fs";

        public static const SND_GAME_RESPIN:String="respin";

        public static const SND_ACHIEVEMENT_NOTIFICATION:String="achievementNotify";

        public static const SND_ACHIEVEMENT_MOVIEWIN_ANNOUNCEMENT:String="achievement_MovieWin_Announcement";

        public static const SND_GAME_START_AUTOPLAY:String="start_autoplay";

        public static const SND_GAME_CANCEL_AUTOPLAY:String="cancel_autoplay";

        public static const SND_GAME_FG_PREV:String="freeGame_prev";

        public static const SND_WIN_COUNTUP_END_FS:String="countup_end_fs";

        public static const SND_GAME_FG_USE_LATER:String="freeGame_useLater";

        public static const SND_GAME_FG_USE_NOW:String="freeGame_useNow";

        public static const SND_GAME_FG_CONTINUE:String="freeGame_continue";

        public static const SND_GAME_FG_CONTINUE_BASE:String="freeGame_continueBase";

        public static const SND_GAME_FG_BACK_TO_GAME:String="freeGame_backToGame";

        public static const SND_GAME_FG_HELP:String="freeGame_help";

        public static const SND_WIN_MOVIE_WIN_PREFIX:String="movie_win_prefix";

        public static const SND_WIN_TRIGGER:String="trigger";

        public static const SND_WIN_BIGWIN_ATTENTION:String="bigwin_attention";

        public static const SND_WIN_BIGWIN_COUNTUP:String="bigwin_countup";

        public static const SND_WIN_BIGWIN_COUNTUP_END:String="bigwin_countup_end";

        public static const SND_GAME_GAMBLE_BTN_BLACK:String="btn_gamble_black";

        public static const SND_GAME_GAMBLE_BTN_RED:String="btn_gamble_red";

        public static const SND_GAME_GAMBLE_BTN_SPADE:String="btn_gamble_spade";

        public static const SND_GAME_GAMBLE_BTN_CLUB:String="btn_gamble_club";

        public static const SND_GAME_GAMBLE_BTN_HEART:String="btn_gamble_heart";

        public static const SND_GAME_GAMBLE_BTN_DIAMOND:String="btn_gamble_diamond";

        public static const SND_WIN_GAMBLE_CARD_FLIP:String="gamble_flip";

        public static const SND_WIN_GAMBLE_WIN:String="gamble_win";

        public static const SND_WIN_GAMBLE_WIN_LIMIT:String="gamble_win_limit";

        protected var _isPlayingTriggerSound:Boolean=false;

        protected var _isAnticipating:Boolean=false;

        protected var _winsound:String;

        protected var _isBigWinCountup:Boolean=false;

        protected var _playingCountup:Boolean=false;

        protected var _playingBigWinCountup:Boolean=false;

        protected var _playingWildCountup:Boolean=false;

        protected var _soundServerReady:Boolean=false;

        protected var _isanOpenMovieWin:Boolean;

        protected var _wildReelsFeatureActive:Boolean;

        internal var _reelStops:uint;

        internal var _notificationServed:Boolean;

        protected var _hasPlayedIntro:Boolean=false;

        protected var _activeBackgroundSound:String=null;
    }
}


//            class BetChangedDialogAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class BetChangedDialogAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function BetChangedDialogAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACCEPT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CANCEL));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showDialog, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BET_CHANGED_PROMPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            var yes:flash.display.MovieClip;
            var no:flash.display.MovieClip;

            var loc1:*;
            yes = null;
            no = null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._dialog = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("respinForfeitDialogue");
            this._dialog.x = 0;
            this._dialog.y = 0;
            this._dialog.mouseEnabled = true;
            yes = this._dialog.getChildByName("yes") as flash.display.MovieClip;
            yes.addEventListener(flash.events.MouseEvent.MOUSE_UP, this.onYesRelease);
            yes.addEventListener(flash.events.MouseEvent.MOUSE_OVER, function ():void
            {
                yes.gotoAndStop("Over");
                return;
            })
            yes.addEventListener(flash.events.MouseEvent.MOUSE_OUT, function ():void
            {
                yes.gotoAndStop("Active");
                return;
            })
            yes.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function ():void
            {
                yes.gotoAndStop("Depressed");
                return;
            })
            no = this._dialog.getChildByName("no") as flash.display.MovieClip;
            no.addEventListener(flash.events.MouseEvent.MOUSE_UP, this.onNoRelease);
            no.addEventListener(flash.events.MouseEvent.MOUSE_OVER, function ():void
            {
                no.gotoAndStop("Over");
                return;
            })
            no.addEventListener(flash.events.MouseEvent.MOUSE_OUT, function ():void
            {
                no.gotoAndStop("Active");
                return;
            })
            no.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, function ():void
            {
                no.gotoAndStop("Depressed");
                return;
            })
            return;
        }

        internal function showDialog(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._method = arg1.data;
            if (this.isReady) 
            {
                this.create();
            }
            return;
        }

        internal function onNoRelease(arg1:flash.events.MouseEvent):void
        {
            this.remove();
            syndicate(this, SERVICE_CANCEL);
            return;
        }

        internal function onYesRelease(arg1:flash.events.MouseEvent):void
        {
            this.remove();
            syndicate(this, SERVICE_ACCEPT, new mgs.aurora.games.framework.TransportLayer(this._method));
            return;
        }

        public function create():void
        {
            if (this.isReady) 
            {
                syndicate(this, SERVICE_SHOW);
                mgs.aurora.games.framework.StageReference.getLevel("Dialogs").addChild(this._dialog);
            }
            return;
        }

        public function remove():void
        {
            if (this._dialog.parent == mgs.aurora.games.framework.StageReference.getLevel("Dialogs")) 
            {
                syndicate(this, SERVICE_HIDE);
                this._dialog.parent.removeChild(this._dialog);
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasView;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_BET_CHANGED_DIALOG";

        public static const SERVICE_ACCEPT:String="ACCEPT";

        public static const SERVICE_CANCEL:String="CANCEL";

        public static const SERVICE_SHOW:String="SHOW";

        public static const SERVICE_HIDE:String="HIDE";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _hasView:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _dialog:flash.display.MovieClip;

        internal var _method:mgs.aurora.games.common.dataTypes.TransBetChanged;
    }
}


//            class BonusSummaryAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import caurina.transitions.*;
    import flash.display.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class BonusSummaryAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function BonusSummaryAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent");
            return;
        }

        protected function setup():void
        {
            var loc1:*;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc3:*=0;
            var loc4:*=this._xmlConfig.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoCloseSummary") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoCloseSummary = Boolean(loc2.@val);
            if (!this._autoCloseSummary) 
            {
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "summaryScreenFadeInTime") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._summaryScreenFadeInTime = Number(loc2.@val);
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "summaryScreenFadeOutTime") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._summaryScreenFadeOutTime = Number(loc2.@val);
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "displayAs") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._currency = loc2.@val.toString();
                this._currency = this._currency == this.COINS || this._currency == this.CREDITS || this._currency == this.BOTH ? this._currency : this.BOTH;
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "level") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._level = loc2.@val.toString();
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "x") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._x = Number(loc2.@val);
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "y") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._y = Number(loc2.@val);
                this._totalWin = new mgs.aurora.games.common.components.utils.CustomFontLabelExt(new mgs.aurora.games.common.components.utils.CustomFontExt("TotalWin", 0), "0.00", mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN);
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "summaryScreen") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._summaryClip = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc2.@val.toString());
                loc3 = 0;
                loc4 = this._xmlConfig.setting;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("variable") == "summaryScreen") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                this._summaryClip.name = loc2.@val.toString();
                this._summaryClip.x = this._x;
                this._summaryClip.y = this._y;
                this._xmlConfig = null;
                if (this.isReady && this.canShow) 
                {
                    this.updateSummary();
                }
            }
            return;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SUMMARY_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SUMMARY_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SUMMARY_AUTO_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_CLOSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TEST_FOR_NEXT_STATE_ASSETS));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_BONUS_SUMMARY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusComplete, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNextStateAssetsReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_NEXT_STATE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPreloaderHide, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_HIDE_LOADER);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._isViewReady) 
            {
                this._isViewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._xmlConfig = arg1.data;
            this._canConfig = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onBonusComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._bonusId = arg1.data;
            if (this._autoCloseSummary) 
            {
                syndicate(this, SERVICE_SUMMARY_AUTO_CLOSED, new mgs.aurora.games.framework.TransportLayer(this._bonusId));
                syndicate(this, SERVICE_TEST_FOR_NEXT_STATE_ASSETS);
            }
            return;
        }

        protected function onNextStateAssetsReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.postBonusComplete();
            return;
        }

        protected function postBonusComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._autoCloseSummary) 
            {
                syndicate(this, SERVICE_START_CLOSE, new mgs.aurora.games.framework.TransportLayer(this._bonusId));
                syndicate(this, SERVICE_SUMMARY_CLOSED, new mgs.aurora.games.framework.TransportLayer(this._bonusId));
                this._bonusId = -1;
            }
            return;
        }

        protected function onPreloaderHide(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._bonusId != -1) 
            {
                this.postBonusComplete();
            }
            return;
        }

        protected function updateSummary():void
        {
            if (this.isReady) 
            {
                if (this.canShow) 
                {
                    if (this._summaryClip.parent != mgs.aurora.games.framework.StageReference.getLevel(this._level)) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(this._level).addChild(this._summaryClip);
                        this.setMoniesValue(this._conductor.response.player.totalWin);
                        if (this._conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                        {
                            this._summaryClip.alpha = 0;
                            caurina.transitions.Tweener.addTween(this._summaryClip, {"alpha":1, "time":this._summaryScreenFadeInTime});
                        }
                        else 
                        {
                            this._summaryClip.alpha = 1;
                        }
                        syndicate(this, SERVICE_SUMMARY_OPEN);
                    }
                }
                else if (this._summaryClip.parent == mgs.aurora.games.framework.StageReference.getLevel(this._level)) 
                {
                    caurina.transitions.Tweener.addTween(this._summaryClip, {"alpha":0, "time":this._summaryScreenFadeOutTime, "onComplete":this.removeSummary});
                }
            }
            return;
        }

        protected function setMoniesValue(arg1:Number):void
        {
            var loc1:*=NaN;
            if (this.isReady) 
            {
                loc1 = this._conductor.betData.chipSize;
                if (this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                {
                    loc1 = this._conductor.response.bet.chipSize;
                }
                if (this._currency != this.COINS) 
                {
                    if (this._currency != this.CREDITS) 
                    {
                        if (this._conductor.options.displayAsCoins) 
                        {
                            this._totalWin.text = mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(arg1, loc1));
                        }
                        else 
                        {
                            this._totalWin.text = mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(arg1, ","));
                        }
                    }
                    else 
                    {
                        this._totalWin.text = mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(arg1, ","));
                    }
                }
                else 
                {
                    this._totalWin.text = mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(arg1, loc1));
                }
            }
            return;
        }

        protected function removeSummary():void
        {
            syndicate(this, SERVICE_SUMMARY_CLOSED);
            this._summaryClip.parent.removeChild(this._summaryClip);
            this._summaryClip.alpha = 1;
            return;
        }

        public function get canShow():Boolean
        {
            var loc1:*=false;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                {
                    if (this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        loc1 = false;
                        break;
                    }
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                {
                    loc1 = true;
                    break;
                }
                default:
                {
                    loc1 = false;
                    break;
                }
            }
            return this._isViewReady && loc1;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._isViewReady;
        }

        public const COINS:String="coins";

        public const CREDITS:String="credits";

        public const BOTH:String="both";

        public const MODALS:String="Modals";

        public static const PUBLISHER_NAME:String="AGENT_BONUS_SUMMARY";

        public static const SERVICE_SUMMARY_OPEN:String="SUMMARY_OPEN";

        public static const SERVICE_SUMMARY_CLOSED:String="SUMMARY_CLOSED";

        public static const SERVICE_SUMMARY_AUTO_CLOSED:String="SUMMARY_AUTO_CLOSED";

        public static const SERVICE_START_CLOSE:String="SERVICE_START_CLOSE";

        public static const SERVICE_TEST_FOR_NEXT_STATE_ASSETS:String="SERVICE_TEST_FOR_NEXT_STATE_ASSETS";

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _xmlConfig:XMLList;

        protected var _bonusId:int=-1;

        protected var _summaryFontLinkage:String;

        protected var _level:String;

        protected var _currency:String;

        protected var _summaryScreenFadeInTime:Number;

        protected var _summaryScreenFadeOutTime:Number;

        protected var _y:Number;

        protected var _x:Number;

        protected var _summaryClip:flash.display.MovieClip;

        protected var _artHolder:flash.display.MovieClip;

        protected var _timer:flash.utils.Timer;

        protected var _bonusPicks:mgs.aurora.games.logicBlocks.data.types.BonusPicksPacket;

        protected var _summaryName:String;

        protected var _totalWin:mgs.aurora.games.common.components.utils.CustomFontLabel;

        protected var _autoCloseSummary:Boolean;

        protected var _hasConductor:Boolean=false;

        protected var _isConfig:Boolean=false;

        protected var _isViewReady:Boolean=false;

        protected var _canConfig:Boolean=false;
    }
}


//            class BorderAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class BorderAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function BorderAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.BorderAgent");
            return;
        }

        public function defineServices():void
        {
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigDone, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_BORDER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLayers, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.SERVICE_DRAWLAYERS);
            return;
        }

        internal function drawBorder():void
        {
            this._border = new flash.display.Sprite();
            this._border.graphics.beginFill(this._color);
            this._border.graphics.moveTo(-this._left + this._xPos, -this._top + this._yPos);
            this._border.graphics.lineTo(this._width + this._right + this._xPos, -this._top + this._yPos);
            this._border.graphics.lineTo(this._width + this._right + this._xPos, this._height + this._bottom + this._yPos);
            this._border.graphics.lineTo(-this._left + this._xPos, this._height + this._bottom + this._yPos);
            this._border.graphics.lineTo(-this._left + this._xPos, -this._top + this._yPos);
            this._border.graphics.moveTo(this._xPos, this._yPos);
            this._border.graphics.lineTo(this._width + this._xPos, this._yPos);
            this._border.graphics.lineTo(this._width + this._xPos, this._height + this._yPos);
            this._border.graphics.lineTo(this._xPos, this._height + this._yPos);
            this._border.graphics.lineTo(this._xPos, this._yPos);
            this._border.graphics.endFill();
            this._border.mouseEnabled = true;
            this._border.x = 0;
            this._border.y = 0;
            mgs.aurora.games.framework.StageReference.getLevel(this._level).addChild(this._border);
            return;
        }

        internal function onConfigDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._config = arg1.data;
            this._gotConfig = true;
            if (this.canConfig) 
            {
                this.configure();
            }
            return;
        }

        internal function onLayers(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._drawLayers = true;
            if (this.canConfig) 
            {
                this.configure();
            }
            return;
        }

        internal function configure():void
        {
            if (this._configDone) 
            {
                return;
            }
            this._configDone = true;
            this._xPos = Number(this._config.@x);
            this._yPos = Number(this._config.@y);
            this._width = Number(this._config.@width);
            this._height = Number(this._config.@height);
            this._level = this._config.@level.toString();
            this._left = Number(this._config.@left);
            this._right = Number(this._config.@right);
            this._bottom = Number(this._config.@bottom);
            this._top = Number(this._config.@top);
            this._color = uint(this._config.@color);
            this.drawBorder();
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._configDone;
        }

        public function get canConfig():Boolean
        {
            return this._drawLayers && !this._configDone && this._gotConfig;
        }

        public static const PUBLISHER_NAME:String="AGENT_BORDER";

        internal var _level:String;

        internal var _config:XMLList;

        internal var _gotConfig:Boolean=false;

        internal var _drawLayers:Boolean=false;

        internal var _configDone:Boolean=false;

        internal var _xPos:Number=0;

        internal var _yPos:Number=0;

        internal var _width:Number=0;

        internal var _height:Number=0;

        internal var _top:Number=0;

        internal var _bottom:Number=0;

        internal var _left:Number=0;

        internal var _right:Number=0;

        internal var _color:uint=0;

        internal var _border:flash.display.Sprite;
    }
}


//            class CoinRush
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class CoinRush extends mgs.aurora.games.logicBlocks.agents.ParticleAgent
    {
        public function CoinRush()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.agents.CoinRush");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.coinrush, mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BigWinServer.SERVICE_COIN_RUSH);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.complete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            return;
        }

        internal function complete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COMPLETE);
            return;
        }

        internal function coinrush(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_PLAY_PARTICLE, new mgs.aurora.games.framework.TransportLayer("coin"));
            return;
        }
    }
}


//            class ConductorAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class ConductorAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ConductorAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.ConductorAgent");
            return;
        }

        internal function onResponseReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data).gamble == null) 
            {
                this._hasGamblePacket = false;
            }
            else 
            {
                this._hasGamblePacket = true;
            }
            this._reponseReady = true;
            if (this.isReady) 
            {
                this.systemReady();
            }
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._configReady = true;
            if (this.isReady) 
            {
                this.systemReady();
            }
            return;
        }

        internal function onLayers(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._layersReady = true;
            if (this.isReady) 
            {
                this.systemReady();
            }
            return;
        }

        public function systemReady():void
        {
            if (this._setSystemReady) 
            {
                return;
            }
            this._setSystemReady = true;
            syndicate(this, SERVICE_READY, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        public function get phase():String
        {
            return "";
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._layersReady && this._configReady && this._reponseReady && this._optionsReady && this._viewReady;
        }

        internal function onReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelStopped = true;
            if (this._onState && this._reelStopped) 
            {
                this.gameComplete();
            }
            return;
        }

        public function get canConfig():Boolean
        {
            return true;
        }

        public function get settings():mgs.aurora.games.logicBlocks.data.SettingsData
        {
            return this._settings;
        }

        public function get autoplay():mgs.aurora.games.logicBlocks.data.AutoPlayData
        {
            return this._autoplay;
        }

        public function get options():mgs.aurora.games.logicBlocks.data.OptionsData
        {
            return this._options;
        }

        public function get freeSpinsData():mgs.aurora.games.logicBlocks.data.FreeSpinsData
        {
            return this._freeSpinsData;
        }

        public function get state():mgs.aurora.games.logicBlocks.agents.GameStateAgent
        {
            return this._state;
        }

        public function get response():mgs.aurora.games.logicBlocks.data.ResponseData
        {
            return this._response;
        }

        public function get freeGamesData():mgs.aurora.games.logicBlocks.data.FreeGamesData
        {
            return this._freeGamesData;
        }

        public function get betData():mgs.aurora.games.logicBlocks.data.BetData
        {
            return this._betData;
        }

        public function get countup():mgs.aurora.games.logicBlocks.agents.CountUpAgent
        {
            return this._countup;
        }

        public function get reelData():mgs.aurora.games.logicBlocks.data.ReelsData
        {
            return this._reelData;
        }

        public function get view():mgs.aurora.games.logicBlocks.publishers.ViewChangeServer
        {
            return this._view;
        }

        public function get symbolsData():mgs.aurora.games.logicBlocks.data.SymbolsData
        {
            return this._symbolsData;
        }

        public function get visArea():mgs.aurora.games.logicBlocks.data.VisAreaData
        {
            return this._visArea;
        }

        public function get hasGamblePacket():Boolean
        {
            return this._hasGamblePacket;
        }

        public function get previousSpinTotalWin():Number
        {
            var loc1:*=this.response.player.totalWin - this.response.slot.win;
            return loc1;
        }

        public function get winsThisSpin():Number
        {
            var loc2:*=false;
            var loc1:*=0;
            var loc3:*=mgs.aurora.games.logicBlocks.data.RollingReelsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME));
            loc1 = this.response.slot.win;
            var loc4:*=(loc3.steps.length - 1);
            while (loc4 > loc3.currentlyActiveStep) 
            {
                loc1 = loc1 - loc3.steps[loc4].win * this.betData.chipSize;
                --loc4;
            }
            return loc1;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_READY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAME_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAME_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BONUS_GAME_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPINS_COMPLETE));
            this.defineSubscriptions();
            return;
        }

        internal function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLayers, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.SERVICE_DRAWLAYERS, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_COMPLETE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponseReady, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BETMAX, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinComplete, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_CLOSED, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStateUpdate, mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameStateAgent.SERVICE_UPDATE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnim, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_TRIGGER_ANIM_COMPLETE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusComplete, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_CLOSED, 500);
            return;
        }

        internal function onFreeSpinComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freeSpinsComplete = true;
            if (this._onState && this._freeSpinsComplete) 
            {
                this.freespinsComplete();
            }
            return;
        }

        internal function onBonusComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._bonusComplete = true;
            if (this._onState && this._bonusComplete) 
            {
                this.bonusComplete();
            }
            return;
        }

        internal function onTriggerAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(this._response.framework.state == 0) || this._response.slot.state == 1) 
            {
                syndicate(this, SERVICE_GAME_COMPLETE);
            }
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._response.wins.numberOf > 0) 
            {
                if (this._response.framework.state == 0) 
                {
                    if (this._response.slot.state != 1) 
                    {
                        syndicate(this, SERVICE_GAME_COMPLETE);
                    }
                }
            }
            return;
        }

        internal function onStateUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._onState = true;
            if (this._reelStopped) 
            {
                this.gameComplete();
            }
            if (this._freeSpinsComplete) 
            {
                this.freespinsComplete();
            }
            if (this._bonusComplete) 
            {
                this.bonusComplete();
            }
            return;
        }

        internal function freespinsComplete():void
        {
            this._freeSpinsComplete = false;
            syndicate(this, SERVICE_FREESPINS_COMPLETE);
            return;
        }

        internal function bonusComplete():void
        {
            this._bonusComplete = false;
            syndicate(this, SERVICE_BONUS_GAME_COMPLETE);
            return;
        }

        internal function gameComplete():void
        {
            if (this._response.wins.numberOf == 0) 
            {
                syndicate(this, SERVICE_GAME_COMPLETE);
            }
            return;
        }

        public function get rollingReels():mgs.aurora.games.logicBlocks.data.RollingReelsData
        {
            return this._rollingReels;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._settings = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.SettingsData;
            this._autoplay = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.AutoPlayData;
            this._options = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.OptionsData;
            this._state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            this._freeSpinsData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeSpinsData;
            this._response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._freeGamesData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeGamesData;
            this._betData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.BetData;
            this._countup = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.CountUpAgent;
            this._reelData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ReelsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ReelsData;
            this._view = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.publishers.ViewChangeServer;
            this._visArea = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.VisAreaData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.VisAreaData;
            this._symbolsData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.SymbolsData;
            this._rollingReels = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.RollingReelsData;
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._onState = false;
            this._reelStopped = false;
            this._bonusComplete = false;
            this._freeSpinsComplete = false;
            syndicate(this, SERVICE_GAME_START);
            return;
        }

        internal function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._viewReady = true;
                    }
                    ++loc3;
                }
            }
            if (this.isReady) 
            {
                this.systemReady();
            }
            return;
        }

        internal function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._optionsReady = true;
            if (this.isReady) 
            {
                this.systemReady();
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_CONDUCTOR";

        public static const SERVICE_READY:String="READY";

        public static const SERVICE_GAME_START:String="GAME_START";

        public static const SERVICE_GAME_COMPLETE:String="GAME_COMPLETE";

        public static const SERVICE_BONUS_GAME_COMPLETE:String="BONUS_GAME_COMPLETE";

        public static const SERVICE_FREESPINS_COMPLETE:String="FREESPINS_COMPLETE";

        internal var _layersReady:Boolean=false;

        internal var _configReady:Boolean=false;

        internal var _reponseReady:Boolean=false;

        internal var _viewReady:Boolean=false;

        internal var _optionsReady:Boolean=false;

        internal var _setSystemReady:Boolean=false;

        internal var _currentView:String="";

        internal var _settings:mgs.aurora.games.logicBlocks.data.SettingsData;

        internal var _options:mgs.aurora.games.logicBlocks.data.OptionsData;

        internal var _state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;

        internal var _freeSpinsData:mgs.aurora.games.logicBlocks.data.FreeSpinsData;

        internal var _response:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _freeGamesData:mgs.aurora.games.logicBlocks.data.FreeGamesData;

        internal var _betData:mgs.aurora.games.logicBlocks.data.BetData;

        internal var _countup:mgs.aurora.games.logicBlocks.agents.CountUpAgent;

        internal var _reelData:mgs.aurora.games.logicBlocks.data.ReelsData;

        internal var _view:mgs.aurora.games.logicBlocks.publishers.ViewChangeServer;

        internal var _symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;

        internal var _visArea:mgs.aurora.games.logicBlocks.data.VisAreaData;

        internal var _rollingReels:mgs.aurora.games.logicBlocks.data.RollingReelsData;

        internal var _onState:Boolean=false;

        internal var _reelStopped:Boolean=false;

        internal var _bonusComplete:Boolean=false;

        internal var _freeSpinsComplete:Boolean=false;

        internal var _hasGamblePacket:Boolean=false;

        internal var _autoplay:mgs.aurora.games.logicBlocks.data.AutoPlayData;
    }
}


//            class ConfigAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class ConfigAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function ConfigAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.ConfigAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REELCONFIG));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LAYERS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMMANDS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SOUNDS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SOUNDS_ENGINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LOAD_PRIORITIES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SETTINGS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PARTICLES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAYTABLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAYLINES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_MESSAGES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAMBLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_MINIPAYTABLE_CONFIG));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WAYWIN_SLIDER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_ANTICIPATION));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_MOVIE_WINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_MODAL_HEADERS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BIGWIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREEGAMES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPINS_SUMMARY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BORDER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_COMBINATIONS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRANSITIONS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BONUS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SPECIAL_FEATURES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BONUS_SUMMARY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FORMATTING));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TEXTFIELD_CONFIG));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REELS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FLOATING_WILD));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_JUMPING_WILD));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BACKGROUNDS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ROLLING_REELS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE_BREAKOUT_SWAPPINGAGENT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_CONFIG_RECEIVED, 50000);
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc1:*=arg1.data.content;
            syndicate(this, SERVICE_REELCONFIG, new mgs.aurora.games.framework.TransportLayer(loc1.reelConfig));
            syndicate(this, SERVICE_LAYERS, new mgs.aurora.games.framework.TransportLayer(loc1.layers));
            syndicate(this, SERVICE_LOAD_PRIORITIES, new mgs.aurora.games.framework.TransportLayer(loc1.loadInfo));
            syndicate(this, SERVICE_COMMANDS, new mgs.aurora.games.framework.TransportLayer(loc1.commands));
            syndicate(this, SERVICE_SYMBOLS, new mgs.aurora.games.framework.TransportLayer(loc1.symbols));
            syndicate(this, SERVICE_SOUNDS, new mgs.aurora.games.framework.TransportLayer(loc1.sounds));
            syndicate(this, SERVICE_SOUNDS_ENGINE, new mgs.aurora.games.framework.TransportLayer(loc1.soundEngine));
            syndicate(this, SERVICE_SETTINGS, new mgs.aurora.games.framework.TransportLayer(loc1.settings));
            syndicate(this, SERVICE_PARTICLES, new mgs.aurora.games.framework.TransportLayer(loc1.particles));
            syndicate(this, SERVICE_PAYTABLE, new mgs.aurora.games.framework.TransportLayer(loc1.paytable));
            syndicate(this, SERVICE_PAYLINES, new mgs.aurora.games.framework.TransportLayer(loc1.paylines));
            syndicate(this, SERVICE_MESSAGES, new mgs.aurora.games.framework.TransportLayer(loc1.messages));
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(loc1.gamble));
            syndicate(this, SERVICE_MINIPAYTABLE_CONFIG, new mgs.aurora.games.framework.TransportLayer(loc1.miniPaytable));
            syndicate(this, SERVICE_WAYWIN_SLIDER, new mgs.aurora.games.framework.TransportLayer(loc1.wayWinsSliders));
            syndicate(this, SERVICE_REEL_ANTICIPATION, new mgs.aurora.games.framework.TransportLayer(loc1.reelAnticipation));
            syndicate(this, SERVICE_MOVIE_WINS, new mgs.aurora.games.framework.TransportLayer(loc1.movieWins));
            syndicate(this, SERVICE_MODAL_HEADERS, new mgs.aurora.games.framework.TransportLayer(loc1.modalHeaders));
            syndicate(this, SERVICE_BIGWIN, new mgs.aurora.games.framework.TransportLayer(loc1.bigwins));
            syndicate(this, SERVICE_FREEGAMES, new mgs.aurora.games.framework.TransportLayer(loc1.freegames));
            syndicate(this, SERVICE_FREESPINS, new mgs.aurora.games.framework.TransportLayer(loc1.freespins));
            syndicate(this, SERVICE_FREESPINS_SUMMARY, new mgs.aurora.games.framework.TransportLayer(loc1.freespinsSummary));
            syndicate(this, SERVICE_BORDER, new mgs.aurora.games.framework.TransportLayer(loc1.border));
            syndicate(this, SERVICE_WIN_COMBINATIONS, new mgs.aurora.games.framework.TransportLayer(loc1.winningCombinations));
            syndicate(this, SERVICE_RESPINS, new mgs.aurora.games.framework.TransportLayer(loc1.respin));
            syndicate(this, SERVICE_TRANSITIONS, new mgs.aurora.games.framework.TransportLayer(loc1.transitions.transition));
            syndicate(this, SERVICE_BONUS, new mgs.aurora.games.framework.TransportLayer(loc1.bonus));
            syndicate(this, SERVICE_BONUS_SUMMARY, new mgs.aurora.games.framework.TransportLayer(loc1.bonusSummary));
            syndicate(this, SERVICE_SPECIAL_FEATURES, new mgs.aurora.games.framework.TransportLayer(loc1.specialFeatures));
            syndicate(this, SERVICE_FORMATTING, new mgs.aurora.games.framework.TransportLayer(loc1.formatting));
            syndicate(this, SERVICE_TEXTFIELD_CONFIG, new mgs.aurora.games.framework.TransportLayer(loc1.textfields));
            syndicate(this, SERVICE_WILD_REELS, new mgs.aurora.games.framework.TransportLayer(loc1.wildReels));
            syndicate(this, SERVICE_FLOATING_WILD, new mgs.aurora.games.framework.TransportLayer(loc1.floatingWild));
            syndicate(this, SERVICE_JUMPING_WILD, new mgs.aurora.games.framework.TransportLayer(loc1.jumpingWild));
            syndicate(this, SERVICE_BACKGROUNDS, new mgs.aurora.games.framework.TransportLayer(loc1.backgrounds));
            syndicate(this, SERVICE_ROLLING_REELS, new mgs.aurora.games.framework.TransportLayer(loc1.rollingReels));
            syndicate(this, SERVICE_CONSOLE, new mgs.aurora.games.framework.TransportLayer(loc1.console));
            if (loc1.ConsoleBreakoutSwappingAgent) 
            {
                syndicate(this, SERVICE_CONSOLE_BREAKOUT_SWAPPINGAGENT, new mgs.aurora.games.framework.TransportLayer(loc1.ConsoleBreakoutSwappingAgent));
            }
            syndicate(this, SERVICE_COMPLETE);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_CONFIG";

        public static const SERVICE_LAYERS:String="LAYERS";

        public static const SERVICE_SYMBOLS:String="SYMBOLS";

        public static const SERVICE_COMMANDS:String="COMMANDS";

        public static const SERVICE_SOUNDS:String="SOUNDS";

        public static const SERVICE_SOUNDS_ENGINE:String="SOUNDS_ENGINE";

        public static const SERVICE_COMPLETE:String="CONFIG_COMPLETE";

        public static const SERVICE_SETTINGS:String="SETTINGS";

        public static const SERVICE_LOAD_PRIORITIES:String="LOAD_PRIORITIES";

        public static const SERVICE_PARTICLES:String="PARTICLES";

        public static const SERVICE_PAYTABLE:String="PAYTABLE";

        public static const SERVICE_PAYLINES:String="PAYLINES";

        public static const SERVICE_MESSAGES:String="MESSAGES";

        public static const SERVICE_REELCONFIG:String="REELCONFIG";

        public static const SERVICE_GAMBLE:String="GAMBLE";

        public static const SERVICE_MINIPAYTABLE_CONFIG:String="MINIPAYTABLE_CONFIG";

        public static const SERVICE_WAYWIN_SLIDER:String="WAYWIN_SLIDER";

        public static const SERVICE_REEL_ANTICIPATION:String="REEL_ANTICIPATION";

        public static const SERVICE_MOVIE_WINS:String="MOVIE_WINS";

        public static const SERVICE_MODAL_HEADERS:String="MODAL_HEADERS";

        public static const SERVICE_BIGWIN:String="BIGWIN";

        public static const SERVICE_FREEGAMES:String="FREEGAMES";

        public static const SERVICE_FREESPINS:String="FREESPINS";

        public static const SERVICE_FREESPINS_SUMMARY:String="SERVICE_FREESPINS_SUMMARY";

        public static const SERVICE_BORDER:String="BORDER";

        public static const SERVICE_RESPINS:String="RESPINS";

        public static const SERVICE_WIN_COMBINATIONS:String="WIN_COMBINATIONS";

        public static const SERVICE_TRANSITIONS:String="TRANSITIONS";

        public static const SERVICE_BONUS:String="BONUS";

        public static const SERVICE_SPECIAL_FEATURES:String="SPECIAL_FEATURES";

        public static const SERVICE_BONUS_SUMMARY:String="BONUS_SUMMARY";

        public static const SERVICE_FORMATTING:String="FORMATTING";

        public static const SERVICE_TEXTFIELD_CONFIG:String="TEXTFIELD_CONFIG";

        public static const SERVICE_WILD_REELS:String="SERVICE_WILD_REELS";

        public static const SERVICE_FLOATING_WILD:String="SERVICE_FLOATING_WILD";

        public static const SERVICE_JUMPING_WILD:String="SERVICE_JUMPING_WILD";

        public static const SERVICE_BACKGROUNDS:String="BACKGROUNDS";

        public static const SERVICE_ROLLING_REELS:String="SERVICE_ROLLING_REELS";

        public static const SERVICE_CONSOLE_BREAKOUT_SWAPPINGAGENT:String="SERVICE_CONSOLE_BREAKOUT_SWAPPINGAGENT";

        public static const SERVICE_CONSOLE:String="SERVICE_CONSOLE";
    }
}


//            class CountUpAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.generic.events.*;
    import mgs.aurora.games.common.components.utils.counters.curves.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class CountUpAgent extends mgs.aurora.games.framework.server.Publisher implements flash.events.IEventDispatcher, mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function CountUpAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.CountUpAgent");
            this._value = 0;
            this._total = 0;
            this._polyCurve = new mgs.aurora.games.common.components.utils.counters.curves.PolyCurve(0, 100, 0, 0, 0.07);
            this._function = this._polyCurve.solveY;
            this._event = new flash.events.EventDispatcher(this);
            this._timer = new flash.utils.Timer(this.timeInterval);
            return;
        }

        internal function onRollingReelsWinCountup(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.RollingReelsData;
            var loc2:*=loc1.steps[loc1.currentlyActiveStep];
            this._total = this._conductor.winsThisSpin / this._conductor.betData.chipSize;
            this._startValue = this._total - loc2.win;
            if (loc2.wins.numberOf > 0) 
            {
                this._timer = new flash.utils.Timer(1000 / this._frameRate);
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                }
                this._timeStart = flash.utils.getTimer();
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.countup);
                this.startCountUp(this._startValue);
                this.dispatchEvent(new flash.events.Event(EVENT_COUNTUP));
                this._timer.start();
            }
            return;
        }

        protected function countup(arg1:flash.events.TimerEvent):void
        {
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=Math.ceil(this._function.apply(this._function, [(flash.utils.getTimer() - this._timeStart) / 1000])) * mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME)).chipSize;
            var loc2:*=this._total - this._startValue;
            this._value = loc1 >= loc2 ? this._total : this._startValue + loc1;
            this.dispatchEvent(new flash.events.Event(EVENT_COUNTUP));
            if (this._value == this._total) 
            {
                syndicate(this, SERVICE_COUNTUP_COMPLETE, new mgs.aurora.games.framework.TransportLayer(this._value));
                this._timer.stop();
                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                this._value = 0;
            }
            return;
        }

        internal function onLayers(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            if (!this._nOnce) 
            {
                syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
                this._nOnce = true;
            }
            return;
        }

        protected function startCountUp(arg1:int=0):void
        {
            this._startValue = arg1;
            this._value = arg1;
            syndicate(this, SERVICE_COUNTUP_BEGIN);
            return;
        }

        public function get event():flash.events.EventDispatcher
        {
            return this._event;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._onResponse = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            this._settings = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.SettingsData;
            return;
        }

        public function get polyCurve():mgs.aurora.games.common.components.utils.counters.curves.PolyCurve
        {
            return this._polyCurve;
        }

        public function set polyCurve(arg1:mgs.aurora.games.common.components.utils.counters.curves.PolyCurve):void
        {
            this._polyCurve = arg1;
            return;
        }

        public function get functionSetter():Function
        {
            return this._function;
        }

        public function set functionSetter(arg1:Function):void
        {
            this._function = arg1;
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._event.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._event.dispatchEvent(new mgs.aurora.games.common.components.generic.events.CounterEvent(arg1.type, this._value));
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._event.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._event.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._event.willTrigger(arg1);
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COUNTUP_BEGIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COUNTUP_INTERRUPT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COUNTUP_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLayers, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.SERVICE_DRAWLAYERS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStop, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN_CLICK, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BETMAX);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_STOP_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespinInterrupt, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpins, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusAnim, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_ANIMATION_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusPickCountupStart, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_DO_PICK_COUNTUP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsWinCountup, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_COINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_LINE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        protected function get timeInterval():Number
        {
            return 1000 / this._frameRate;
        }

        internal function onBonusAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=arg1.data;
            if (loc1.totalWon > 0) 
            {
                this._total = loc1.totalWon;
                this._timer = new flash.utils.Timer(this.timeInterval);
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                }
                this._timeStart = flash.utils.getTimer();
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.countup);
                this.startCountUp();
                this._timer.start();
            }
            return;
        }

        internal function onFreeSpins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            if (this._timer.running) 
            {
                this._timer.stop();
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                }
                this._value = this._total;
                this.dispatchEvent(new flash.events.Event(EVENT_COUNTUP));
            }
            if (this._value > 0) 
            {
                syndicate(this, SERVICE_COUNTUP_COMPLETE, new mgs.aurora.games.framework.TransportLayer(this._value));
            }
            return;
        }

        protected function onBonusPickCountupStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=arg1.data;
            if (loc1.endValue > 0) 
            {
                this.onInterrupt();
                this._total = loc1.endValue;
                this._timer = new flash.utils.Timer(this.timeInterval);
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                }
                this._timeStart = flash.utils.getTimer();
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.countup);
                this.startCountUp(loc1.startValue);
                this._timer.start();
            }
            return;
        }

        public override function dispose():void
        {
            this._event = null;
            this._polyCurve.dispose();
            this._timer.stop();
            this._timer = null;
            super.dispose();
            return;
        }

        internal function onInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            _trace("Publisher:" + mgs.aurora.games.framework.TransportLayer(arg1).publisher + " Service:" + mgs.aurora.games.framework.TransportLayer(arg1).service);
            if (this._timer.running) 
            {
                this._timer.stop();
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                }
                this._value = this._total;
                syndicate(this, SERVICE_COUNTUP_INTERRUPT);
                this.dispatchEvent(new flash.events.Event(EVENT_COUNTUP));
                if (this._value > 0) 
                {
                    syndicate(this, SERVICE_COUNTUP_COMPLETE, new mgs.aurora.games.framework.TransportLayer(this._value));
                    this._value = 0;
                }
            }
            return;
        }

        internal function onRespinInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            if (arg1.data == mgs.aurora.games.logicBlocks.agents.RespinAgent.ACTION_CLICK) 
            {
                this.onInterrupt();
            }
            return;
        }

        internal function onReelsStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=this._state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                {
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    if (mgs.aurora.games.logicBlocks.agents.ConductorAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME)).response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
                    {
                        break;
                    }
                }
                default:
                {
                    if (this._onResponse.wins.numberOf > 0) 
                    {
                        if (this._conductor.options.isQuickSpin && (this._conductor.autoplay.autoPlayActive || this._conductor.autoplay.autoPlayJustCompleted)) 
                        {
                            this._total = this._conductor.winsThisSpin / this._conductor.betData.chipSize;
                            syndicate(this, SERVICE_COUNTUP_COMPLETE, new mgs.aurora.games.framework.TransportLayer(this._total));
                        }
                        else 
                        {
                            this._total = this._conductor.winsThisSpin / this._conductor.betData.chipSize;
                            this._timer = new flash.utils.Timer(this.timeInterval);
                            if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                            {
                                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.countup);
                            }
                            this._timeStart = flash.utils.getTimer();
                            this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.countup);
                            this.startCountUp();
                            this.dispatchEvent(new flash.events.Event(EVENT_COUNTUP));
                            this._timer.start();
                        }
                    }
                    break;
                }
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_COUNTUP";

        public static const SERVICE_COUNTUP_BEGIN:String="COUNTUP_BEGIN";

        public static const SERVICE_COUNTUP_INTERRUPT:String="COUNTUP_INTERRUPT";

        public static const SERVICE_COUNTUP_COMPLETE:String="COUNTUP_COMPLETE";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const EVENT_COUNTUP:String="countEvent";

        internal var _hasConductor:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _isConfig:Boolean=false;

        internal var _event:flash.events.EventDispatcher;

        protected var _value:Number;

        protected var _total:Number;

        internal var _nOnce:Boolean=false;

        internal var _onResponse:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _timer:flash.utils.Timer;

        internal var _timeStart:int;

        internal var _frameRate:int=30;

        protected var _function:Function;

        protected var _polyCurve:mgs.aurora.games.common.components.utils.counters.curves.PolyCurve;

        internal var _state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;

        internal var inc:int=0;

        internal var _settings:mgs.aurora.games.logicBlocks.data.SettingsData;

        protected var _startValue:Number;
    }
}


//            class DialogAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.dialogues.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class DialogAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function DialogAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.DialogAgent");
            this._dialogs = mgs.aurora.games.framework.AuroraReference.aurora.dialogues;
            return;
        }

        internal function closeBoundaryDialog(arg1:*):void
        {
            this._boundaryDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeBoundaryDialog);
            this._boundaryDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeBoundaryDialogKey);
            this._dialogs.remove(arg1.diagId);
            this._boundaryDialog = null;
            syndicate(this, SERVICE_BOUNDARY_NOTICE);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_BOUNDARY));
            return;
        }

        internal function onBoundaryDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onBoundaryDialogCreated);
            this._boundaryDialog = this._dialogs.dialogue("BoundaryDialog");
            this.updateTextField(this._boundaryDialog, "MESS", mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("BOUNDARYCHANGE"));
            this._boundaryDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeBoundaryDialog);
            this._boundaryDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeBoundaryDialogKey);
            return;
        }

        internal function closeBoundaryDialogKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeBoundaryDialog(arg1);
            return;
        }

        internal function showBoundaryDialog():void
        {
            if (this._boundaryDialog == null) 
            {
                this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onBoundaryDialogCreated);
                this._dialogs.create("BoundaryDialog", "Info");
                syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_BOUNDARY));
            }
            return;
        }

        internal function closeStatsDialog(arg1:*):void
        {
            this._isShowing = false;
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.closeStatsDialog);
            this._statsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeStatsDialog);
            this._statsDialog.buttons.getButton("RESET").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.resetDialog);
            this._statsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeStatsDialogKey);
            this._statsDialog.buttons.getButton("RESET").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.resetDialogKey);
            this._dialogs.remove(arg1.diagId);
            this._statsDialog = null;
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_STATISTICS));
            return;
        }

        internal function updateTextField(arg1:mgs.aurora.api.interfaces.dialogues.IDialogue, arg2:String, arg3:String):void
        {
            if (arg1.texts.hasText(arg2)) 
            {
                arg1.texts.getText(arg2).text = arg3;
            }
            return;
        }

        internal function resetDialog(arg1:*):void
        {
            syndicate(this, SERVICE_RESET_STATS);
            var loc1:*=mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
            var loc2:*=mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
            this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
            this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
            this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
            this.updateTextField(this._statsDialog, "SpinsNum", this._stats.spinsPlayed.toString());
            this.updateTextField(this._statsDialog, "SessionTime", this._stats.timeElapsed);
            this.updateTextField(this._statsDialog, "SpinPHNum", this._stats.spinsPerHour.toString());
            this.updateTextField(this._statsDialog, "RespinsNum", this._stats.respins.toString());
            return;
        }

        internal function updateSesTime(arg1:flash.events.TimerEvent):void
        {
            if (this._statsDialog != null) 
            {
                this._statsDialog.texts.getText("SessionTime").text = this._stats.timeElapsed;
                this._statsDialog.texts.getText("SpinPHNum").text = this._stats.spinsPerHour.toString();
            }
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._statsDialog != null) 
            {
                this.updateTextField(this._statsDialog, "SpinsNum", this._stats.spinsPlayed.toString());
                this.updateTextField(this._statsDialog, "RespinsNum", this._stats.respins.toString());
                if (this._responseData.wins.numberOf == 0) 
                {
                    loc1 = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
                    loc2 = mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
                    this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
                    this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
                    this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
                }
            }
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._statsDialog != null) 
            {
                loc1 = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
                loc2 = mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
                this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
                this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
                this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
            }
            return;
        }

        internal function clearStatsTimer(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.clearStatsTimer);
            return;
        }

        internal function checkAutoPlaysInRange(arg1:int):int
        {
            if (arg1 > AUTOPLAY_MAX) 
            {
                return AUTOPLAY_MAX;
            }
            if (arg1 < AUTOPLAY_MIN) 
            {
                return AUTOPLAY_MIN;
            }
            return arg1;
        }

        internal function closeStatsDialogKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeStatsDialog(arg1);
            return;
        }

        internal function resetDialogKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.resetDialog(arg1);
            return;
        }

        internal function onStatsDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onStatsDialogCreated);
            this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.clearStatsTimer);
            this._statsDialog = this._dialogs.dialogue(DIALOG_STATISTICS);
            this._statsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeStatsDialog);
            this._statsDialog.buttons.getButton("RESET").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.resetDialog);
            this._statsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeStatsDialogKey);
            this._statsDialog.buttons.getButton("RESET").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.resetDialogKey);
            var loc1:*=mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
            var loc2:*=mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
            this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
            this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
            this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
            this.updateTextField(this._statsDialog, "SpinsNum", this._stats.spinsPlayed.toString());
            this.updateTextField(this._statsDialog, "SessionTime", this._stats.timeElapsed);
            this.updateTextField(this._statsDialog, "SpinPHNum", this._stats.spinsPerHour.toString());
            this.updateTextField(this._statsDialog, "RespinsNum", this._stats.respins.toString());
            return;
        }

        internal function showStatisticsDialog():void
        {
            var dialogsXML:XML;

            var loc1:*;
            this._isShowing = true;
            dialogsXML = mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs");
            this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onStatsDialogCreated);
            var loc3:*=0;
            var loc4:*=dialogsXML.dialogue;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == "Stats") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._dialogs.create(DIALOG_STATISTICS, DIALOG_STATISTICS, null, loc2);
            syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_STATISTICS));
            return;
        }

        internal function loadOptions():void
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.storage;
            var loc2:*=loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins");
            this._displayAsCoins = loc2 == "" || loc2 == null ? this._doCoins : this.isSwitchedOn(loc2);
            this.syndicateUpdatedOptions();
            return;
        }

        internal function cancelOptions(arg1:*):void
        {
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeOptions);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelOptions);
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeOptionsKey);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelOptionsKey);
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_OPTIONS));
            return;
        }

        internal function closeOptions(arg1:*):void
        {
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeOptions);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelOptions);
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeOptionsKey);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelOptionsKey);
            if (this._optionsDialog.radioButtons.hasRadioButtons("Coins")) 
            {
                if (this._optionsDialog.radioButtons.getRadioButton("Coins").selected && this._doCoins) 
                {
                    this._displayAsCoins = true;
                }
                else 
                {
                    this._displayAsCoins = false;
                }
            }
            var loc1:*=mgs.aurora.games.logicBlocks.data.CustomRuleSet(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.CustomRuleSet.PUBLISHER_NAME));
            if (loc1.quickSpinEnabled) 
            {
                if (this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked) 
                {
                    this._isQuickSpin = true;
                }
                else 
                {
                    this._isQuickSpin = false;
                }
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").enabled = false;
                this._isQuickSpin = false;
            }
            if (this._optionsDialog.checkBoxes.hasCheckBox("HideRespins")) 
            {
                if (this._optionsDialog.checkBoxes.getCheckBox("HideRespins").checked) 
                {
                    this._hideRespinCost = true;
                }
                else 
                {
                    this._hideRespinCost = false;
                }
            }
            if (this._optionsDialog.checkBoxes.getCheckBox("GameSounds").checked) 
            {
                this._switchOffAllGameSounds = true;
            }
            else 
            {
                this._switchOffAllGameSounds = false;
            }
            if (this._optionsDialog.checkBoxes.getCheckBox("BGSounds").checked) 
            {
                this._switchOffBgSounds = true;
            }
            else 
            {
                this._switchOffBgSounds = false;
            }
            if (this._optionsDialog.checkBoxes.getCheckBox("WinSounds").checked) 
            {
                this._switchOffWinSounds = true;
            }
            else 
            {
                this._switchOffWinSounds = false;
            }
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllGameSounds", this._switchOffAllGameSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllSounds", this._switchOffAllSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffBgSounds", this._switchOffBgSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffWinSounds", this._switchOffWinSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isQuickSpin", this._isQuickSpin.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "HideRespins", this._hideRespinCost.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins", this._displayAsCoins.toString());
            this.syndicateUpdatedOptions();
            if (this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute = true;
                this._switchOffAllSounds = true;
            }
            else 
            {
                if (mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute == true) 
                {
                    mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute = false;
                }
                this._switchOffAllSounds = false;
            }
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_OPTIONS));
            return;
        }

        internal function allSoundsSelected(arg1:mgs.aurora.api.events.ApiDialogueSelectionEvent):void
        {
            if (this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked != false) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = true;
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").enabled = false;
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").enabled = true;
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").enabled = true;
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").enabled = true;
            }
            return;
        }

        internal function closeOptionsKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeOptions(arg1);
            return;
        }

        internal function cancelOptionsKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.cancelOptions(arg1);
            return;
        }

        internal function onOptionsDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onOptionsDialogCreated);
            this._optionsDialog = this._dialogs.dialogue(DIALOG_OPTIONS);
            if (this._switchOffAllGameSounds) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").checked = true;
            }
            if (this._switchOffWinSounds) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").checked = true;
            }
            if (this._switchOffBgSounds) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").checked = true;
            }
            if (mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = true;
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").enabled = false;
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = false;
            }
            if (this._displayAsCoins) 
            {
                if (this._doCoins && this._optionsDialog.radioButtons.hasRadioButtons("Coins")) 
                {
                    this._optionsDialog.radioButtons.getRadioButton("Coins").selected = true;
                }
            }
            else if (this._doCredits && this._optionsDialog.radioButtons.hasRadioButtons("Credits")) 
            {
                this._optionsDialog.radioButtons.getRadioButton("Credits").selected = true;
            }
            if (!this._doCoins && this._optionsDialog.radioButtons.hasRadioButtons("Coins")) 
            {
                this._optionsDialog.radioButtons.getRadioButton("Coins").enabled = false;
                if (this._optionsDialog.radioButtons.getRadioButton("Coins").selected) 
                {
                    this._optionsDialog.radioButtons.getRadioButton("Coins").selected = false;
                }
            }
            if (!this._doCredits && this._optionsDialog.radioButtons.hasRadioButtons("Credits")) 
            {
                this._optionsDialog.radioButtons.getRadioButton("Credits").enabled = false;
                if (this._optionsDialog.radioButtons.getRadioButton("Credits").selected) 
                {
                    this._optionsDialog.radioButtons.getRadioButton("Credits").selected = false;
                }
            }
            var loc1:*=mgs.aurora.games.logicBlocks.data.CustomRuleSet(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.CustomRuleSet.PUBLISHER_NAME));
            if (loc1.quickSpinEnabled) 
            {
                if (this._isQuickSpin) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked = true;
                }
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").enabled = false;
                this._isQuickSpin = false;
                mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isQuickSpin", this._isQuickSpin.toString());
            }
            if (this._optionsDialog.checkBoxes.hasCheckBox("HideRespins")) 
            {
                if (this._hideRespinCost) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("HideRespins").checked = true;
                }
                if (this._freeGames.isFreeGameActive) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("HideRespins").enabled = false;
                }
                else 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("HideRespins").enabled = true;
                }
            }
            this._optionsDialog.checkBoxes.getCheckBox("AllSounds").addEventListener(mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTION_CHANGE, this.allSoundsSelected);
            this._optionsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeOptions);
            this._optionsDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelOptions);
            this._optionsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeOptionsKey);
            this._optionsDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelOptionsKey);
            return;
        }

        internal function showOptionsDialog():void
        {
            var dialogsXML:XML;

            var loc1:*;
            dialogsXML = mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs");
            this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onOptionsDialogCreated);
            var loc3:*=0;
            var loc4:*=dialogsXML.dialogue;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == "Options") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._dialogs.create(DIALOG_OPTIONS, DIALOG_OPTIONS, null, loc2);
            syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_OPTIONS));
            return;
        }

        internal function checkAutoPlaysCreditsInRange(arg1:Number):Number
        {
            if (arg1 > AUTOPLAY_MAX_CREDITS) 
            {
                return AUTOPLAY_MAX_CREDITS;
            }
            if (arg1 < AUTOPLAY_MIN_CREDITS) 
            {
                return AUTOPLAY_MIN_CREDITS;
            }
            return arg1;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CANCEL_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OPTIONS_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_AUTOPLAY_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESET_STATS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BOUNDARY_NOTICE));
            this.defineSubscriptions();
            return;
        }

        internal function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.updateHandler, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showAutoPlayDialog, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigComplete, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStatsUpdate, mgs.aurora.games.logicBlocks.data.StatisticsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.StatisticsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSettings, mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.SettingsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showCreditsDialog, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showCreditsDialog, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showCreditsDialog, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_BOUNDARY_CHANGE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptionsUpdate, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            return;
        }

        internal function onOptionsUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.OptionsData(arg1.data);
            this._displayAsCoins = loc1.displayAsCoins;
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins", this._displayAsCoins.toString());
            return;
        }

        internal function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.showBoundaryDialog();
            return;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._responseData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._betData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.BetData;
            this._freeGames = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeGamesData;
            this.setData();
            this.syndicateUpdatedAutoPlay();
            return;
        }

        internal function setData():void
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.storage;
            this._switchOffAllGameSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllGameSounds"));
            this._switchOffAllSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllSounds"));
            this._switchOffBgSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffBgSounds"));
            this._switchOffWinSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffWinSounds"));
            this._isQuickSpin = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isQuickSpin"));
            this._hideRespinCost = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "HideRespins"));
            this._displayAsCoins = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins"));
            if (mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins") == null || mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins") == "") 
            {
                this._numAutoPlay = this._numAutoPlay != -1 ? this._numAutoPlay : 25;
            }
            else 
            {
                this._numAutoPlay = int(mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins"));
            }
            this._numAutoPlay = this.checkAutoPlaysInRange(this._numAutoPlay);
            this._stopOnWin = int(mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWin"));
            this._stopOnWinSelected = this.isSwitchedOn(mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWinSelected"));
            return;
        }

        internal function onSettings(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._settings = arg1.data;
            this._doCoins = this._settings.doCoins;
            this._doCredits = this._settings.doCredits;
            this._useCoinsCurrencyAutoplayDialog = this._settings.useCoinsCurrencyAutoplayDialog;
            return;
        }

        internal function onStatsUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace(">> DialogAgent- onStatsUpdate");
            this._stats = arg1.data;
            return;
        }

        internal function onConfigComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.loadOptions();
            return;
        }

        internal function updateHandler(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.OPTIONS:
                {
                    this.showOptionsDialog();
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.STATS:
                {
                    this.showStatisticsDialog();
                    break;
                }
            }
            return;
        }

        internal function showAutoPlayDialog(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var i:mgs.aurora.games.framework.ITransportLayer=null;

            var loc1:*;
            i = arg1;
            if (i.data == null) 
            {
                this.setData();
                this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onAutoPlayDialogCreated);
                if (this._useCoinsCurrencyAutoplayDialog) 
                {
                    var loc3:*=0;
                    var loc4:*=mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs").dialogue;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@id == DIALOG_AUTOPLAY_COINS_CURRENCY) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._dialogs.create(DIALOG_AUTOPLAY, DIALOG_AUTOPLAY_COINS_CURRENCY, null, loc2);
                }
                else 
                {
                    this._dialogs.create(DIALOG_AUTOPLAY, DIALOG_AUTOPLAY);
                }
                syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            }
            return;
        }

        internal function onAutoPlayDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onAutoPlayDialogCreated);
            this._autoPlayDialog = this._dialogs.dialogue(DIALOG_AUTOPLAY);
            this._autoPlayDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.onAutoPlayKeyBoardButtonEvent);
            this._autoPlayDialog.radioButtons.addEventListener(mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTION_CHANGE, this.onAutoPlayRadioEvent);
            var loc1:*=this._autoPlayDialog.comboBoxes.getComboBox("winExceedsOrEqualsCombo");
            loc1.textField.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onAutoPlayComboBoxEvent);
            loc1.textField.text = String(this._stopOnWin);
            loc1.enabled = this._stopOnWinSelected;
            var loc2:*=this._autoPlayDialog.comboBoxes.getComboBox("numSpinsCombo");
            this._numAutoPlay = mgs.aurora.games.logicBlocks.data.AutoPlayData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME)).savedNumAutoPlay;
            loc2.textField.text = String(this._numAutoPlay);
            loc2.textField.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onNumAutoPlaysChanged);
            if (this._stopOnWinSelected) 
            {
                this._autoPlayDialog.radioButtons.getRadioButton("stopSettingsRadio2").selected = true;
            }
            return;
        }

        internal function closeAutoPlayKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeAutoPlay(arg1);
            return;
        }

        internal function cancelAutoPlayKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.cancelAutoPlay(arg1);
            return;
        }

        internal function cancelAutoPlay(arg1:*):void
        {
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_CANCEL_AUTOPLAY);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            return;
        }

        internal function startAutoPlay(arg1:*):void
        {
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            var loc1:*=mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance;
            if (loc1 - this._betData.betValue < 0 && !this._freeGames.isFreeGameActive) 
            {
                this._dialogs.remove(arg1.diagId);
                this.showCreditsDialog();
                return;
            }
            this.saveAutoPlaySettings();
            this.syndicateUpdatedAutoPlay();
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(this._numAutoPlay));
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            return;
        }

        internal function closeAutoPlay(arg1:*):void
        {
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            this.saveAutoPlaySettings();
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_CANCEL_AUTOPLAY);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            return;
        }

        internal function onNumAutoPlaysChanged(arg1:mgs.aurora.api.events.ApiDialogueTextEvent):void
        {
            arg1.target.removeEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onNumAutoPlaysChanged);
            var loc1:*=int(mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text);
            var loc2:*=this.checkAutoPlaysInRange(loc1);
            this._numAutoPlay = loc2;
            mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text = String(loc2);
            arg1.target.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onNumAutoPlaysChanged);
            return;
        }

        internal function startAutoPlayKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.startAutoPlay(arg1);
            return;
        }

        internal function onAutoPlayComboBoxEvent(arg1:mgs.aurora.api.events.ApiDialogueTextEvent):void
        {
            arg1.target.removeEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onAutoPlayComboBoxEvent);
            var loc1:*=Number(mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text);
            var loc2:*=this.checkAutoPlaysInRange(loc1);
            this._stopOnWin = loc2;
            mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text = String(loc2);
            arg1.target.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onAutoPlayComboBoxEvent);
            return;
        }

        internal function onAutoPlayRadioEvent(arg1:mgs.aurora.api.events.ApiDialogueSelectionEvent):void
        {
            var loc1:*=this._autoPlayDialog.radioButtons.getRadioButton("stopSettingsRadio2").selected;
            this._stopOnWinSelected = loc1;
            this._autoPlayDialog.comboBoxes.getComboBox("winExceedsOrEqualsCombo").enabled = loc1;
            return;
        }

        internal function onAutoPlayKeyBoardButtonEvent(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            _trace(arg1.diagId);
            return;
        }

        internal function saveAutoPlaySettings():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins", this._numAutoPlay.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWin", this._stopOnWin.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWinSelected", this._stopOnWinSelected.toString());
            this.syndicateUpdatedAutoPlay();
            return;
        }

        internal function syndicateUpdatedOptions():void
        {
            syndicate(this, SERVICE_OPTIONS_UPDATE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransOptionsData(this._switchOffAllGameSounds, this._switchOffAllSounds, this._switchOffBgSounds, this._switchOffWinSounds, this._isQuickSpin, this._displayAsCoins, this._hideRespinCost)));
            return;
        }

        internal function syndicateUpdatedAutoPlay():void
        {
            syndicate(this, SERVICE_AUTOPLAY_UPDATE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransAutoPlayData(this._numAutoPlay, this._stopOnWin, this._stopOnWinSelected)));
            return;
        }

        internal function showCreditsDialog(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.banking.insufficientFunds();
            syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_CREDITS));
            return;
        }

        internal function isSwitchedOn(arg1:String):Boolean
        {
            if (arg1 == "true") 
            {
                return true;
            }
            return false;
        }

        public override function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        public override function dispose():void
        {
            this._dialogs = null;
            this._autoPlayDialog = null;
            this._optionsDialog = null;
            this._statsDialog = null;
            this._boundaryDialog = null;
            this._creditsDialog = null;
            super.dispose();
            return;
        }

        public static const SERVICE_DIALOG_OPEN:String="DIALOG_OPEN";

        public static const PUBLISHER_NAME:String="AGENT_DIALOG";

        public static const SERVICE_START_AUTOPLAY:String="START";

        public static const SERVICE_CANCEL_AUTOPLAY:String="CANCEL";

        public static const SERVICE_OPTIONS_UPDATE:String="OPTIONS_UPDATE";

        public static const SERVICE_AUTOPLAY_UPDATE:String="AUTOPLAY_UPDATE";

        public static const SERVICE_DIALOG_CLOSED:String="DIALOG_CLOSED";

        public static const SERVICE_RESET_STATS:String="RESET_STATS";

        public static const SERVICE_BOUNDARY_NOTICE:String="BOUNDARY_NOTICE";

        public static const AUTOPLAY_MIN:int=1;

        public static const AUTOPLAY_MAX:int=9999;

        public static const AUTOPLAY_MIN_CREDITS:Number=1;

        public static const AUTOPLAY_MAX_CREDITS:Number=9999;

        public static const DIALOG_AUTOPLAY:String="AutoPlay";

        protected static const DIALOG_AUTOPLAY_COINS_CURRENCY:String="AutoPlay_CoinsToCurrency";

        public static const DIALOG_OPTIONS:String="Options";

        public static const DIALOG_STATISTICS:String="Stats";

        public static const DIALOG_CREDITS:String="CreditsDialog";

        public static const DIALOG_BOUNDARY:String="Boundary";

        internal var _useCoinsCurrencyAutoplayDialog:Boolean;

        internal var _freeGames:mgs.aurora.games.logicBlocks.data.FreeGamesData;

        internal var _betData:mgs.aurora.games.logicBlocks.data.BetData;

        internal var _responseData:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _settings:mgs.aurora.games.logicBlocks.data.SettingsData;

        internal var _doCredits:Boolean=false;

        internal var _doCoins:Boolean=false;

        internal var _isShowing:Boolean=false;

        internal var _stats:mgs.aurora.games.logicBlocks.data.StatisticsData;

        internal var _hideRespinCost:Boolean=false;

        internal var _isQuickSpin:Boolean=false;

        internal var _displayAsCoins:Boolean=false;

        internal var _switchOffWinSounds:Boolean=false;

        internal var _switchOffBgSounds:Boolean=false;

        internal var _switchOffAllGameSounds:Boolean=false;

        internal var _switchOffAllSounds:Boolean=false;

        internal var _stopOnWinSelected:Boolean;

        internal var _stopOnWin:Number;

        internal var _numAutoPlay:int=-1;

        internal var _creditsDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _boundaryDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _statsDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _optionsDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _autoPlayDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _dialogs:mgs.aurora.api.interfaces.IDialogues;
    }
}


//            class DialogAgent2
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.api.interfaces.dialogues.*;
    import mgs.aurora.api.interfaces.dialogues.controls.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class DialogAgent2 extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function DialogAgent2()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.DialogAgent");
            this._dialogs = mgs.aurora.games.framework.AuroraReference.aurora.dialogues;
            return;
        }

        internal function syndicateUpdatedOptions():void
        {
            syndicate(this, SERVICE_OPTIONS_UPDATE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransOptionsData(this._switchOffAllGameSounds, this._switchOffAllSounds, this._switchOffBgSounds, this._switchOffWinSounds, this._isQuickSpin, this._isFreespinsQuickSpin, this._displayAsCoins, this._hideRespinCost)));
            return;
        }

        internal function closeBoundaryDialog(arg1:*):void
        {
            this._boundaryDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeBoundaryDialog);
            this._boundaryDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeBoundaryDialogKey);
            this._dialogs.remove(arg1.diagId);
            this._boundaryDialog = null;
            syndicate(this, SERVICE_BOUNDARY_NOTICE);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_BOUNDARY));
            return;
        }

        internal function onBoundaryDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onBoundaryDialogCreated);
            this._boundaryDialog = this._dialogs.dialogue("BoundaryDialog");
            this.updateTextField(this._boundaryDialog, "MESS", mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("BOUNDARYCHANGE"));
            this._boundaryDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeBoundaryDialog);
            this._boundaryDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeBoundaryDialogKey);
            return;
        }

        internal function closeBoundaryDialogKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeBoundaryDialog(arg1);
            return;
        }

        internal function showBoundaryDialog():void
        {
            if (this._boundaryDialog == null) 
            {
                this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onBoundaryDialogCreated);
                this._dialogs.create("BoundaryDialog", "Info");
                syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_BOUNDARY));
            }
            return;
        }

        internal function closeStatsDialog(arg1:*):void
        {
            this._isShowing = false;
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.closeStatsDialog);
            this._statsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeStatsDialog);
            this._statsDialog.buttons.getButton("RESET").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.resetDialog);
            this._statsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeStatsDialogKey);
            this._statsDialog.buttons.getButton("RESET").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.resetDialogKey);
            this._dialogs.remove(arg1.diagId);
            this._statsDialog = null;
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_STATISTICS));
            return;
        }

        internal function updateTextField(arg1:mgs.aurora.api.interfaces.dialogues.IDialogue, arg2:String, arg3:String):void
        {
            if (arg1.texts.hasText(arg2)) 
            {
                arg1.texts.getText(arg2).text = arg3;
            }
            return;
        }

        internal function resetDialog(arg1:*):void
        {
            syndicate(this, SERVICE_RESET_STATS);
            var loc1:*=mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
            var loc2:*=mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
            this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
            this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
            this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
            this.updateTextField(this._statsDialog, "SpinsNum", this._stats.spinsPlayed.toString());
            this.updateTextField(this._statsDialog, "SessionTime", this._stats.timeElapsed);
            this.updateTextField(this._statsDialog, "SpinPHNum", this._stats.spinsPerHour.toString());
            this.updateTextField(this._statsDialog, "RespinsNum", this._stats.respins.toString());
            return;
        }

        internal function updateSesTime(arg1:flash.events.TimerEvent):void
        {
            if (this._statsDialog != null) 
            {
                this._statsDialog.texts.getText("SessionTime").text = this._stats.timeElapsed;
                this._statsDialog.texts.getText("SpinPHNum").text = this._stats.spinsPerHour.toString();
            }
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._statsDialog != null) 
            {
                this.updateTextField(this._statsDialog, "SpinsNum", this._stats.spinsPlayed.toString());
                this.updateTextField(this._statsDialog, "RespinsNum", this._stats.respins.toString());
                if (this._responseData.wins.numberOf == 0) 
                {
                    loc1 = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
                    loc2 = mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
                    this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
                    this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
                    this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
                }
            }
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._statsDialog != null) 
            {
                loc1 = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
                loc2 = mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
                this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
                this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
                this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
            }
            return;
        }

        internal function checkAutoPlaysInRange(arg1:int):int
        {
            if (arg1 > AUTOPLAY_MAX) 
            {
                return AUTOPLAY_MAX;
            }
            if (arg1 < AUTOPLAY_MIN) 
            {
                return AUTOPLAY_MIN;
            }
            return arg1;
        }

        internal function clearStatsTimer(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.clearStatsTimer);
            return;
        }

        internal function closeStatsDialogKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeStatsDialog(arg1);
            return;
        }

        internal function resetDialogKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.resetDialog(arg1);
            return;
        }

        internal function onStatsDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onStatsDialogCreated);
            this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_REMOVED, this.clearStatsTimer);
            this._statsDialog = this._dialogs.dialogue(DIALOG_STATISTICS);
            this._statsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeStatsDialog);
            this._statsDialog.buttons.getButton("RESET").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.resetDialog);
            this._statsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeStatsDialogKey);
            this._statsDialog.buttons.getButton("RESET").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.resetDialogKey);
            var loc1:*=mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("ConsoleAreaCredits");
            var loc2:*=mgs.aurora.games.logicBlocks.data.OptionsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME));
            this.updateTextField(this._statsDialog, "FirstAmount", loc1.format(this._stats.firstHighest.toString()));
            this.updateTextField(this._statsDialog, "SecondAmount", loc1.format(this._stats.secondHighest.toString()));
            this.updateTextField(this._statsDialog, "ThirdAmount", loc1.format(this._stats.thirdHighest.toString()));
            this.updateTextField(this._statsDialog, "SpinsNum", this._stats.spinsPlayed.toString());
            this.updateTextField(this._statsDialog, "SessionTime", this._stats.timeElapsed);
            this.updateTextField(this._statsDialog, "SpinPHNum", this._stats.spinsPerHour.toString());
            this.updateTextField(this._statsDialog, "RespinsNum", this._stats.respins.toString());
            return;
        }

        internal function showStatisticsDialog():void
        {
            var dialogsXML:XML;

            var loc1:*;
            this._isShowing = true;
            dialogsXML = mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs");
            this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onStatsDialogCreated);
            var loc3:*=0;
            var loc4:*=dialogsXML.dialogue;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == "Stats") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._dialogs.create(DIALOG_STATISTICS, DIALOG_STATISTICS, null, loc2);
            syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_STATISTICS));
            return;
        }

        internal function loadOptions():void
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.storage;
            var loc2:*=loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins");
            this._displayAsCoins = loc2 == "" || loc2 == null ? this._doCoins : this.isSwitchedOn(loc2);
            this.syndicateUpdatedOptions();
            return;
        }

        internal function cancelOptions(arg1:*):void
        {
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeOptions);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelOptions);
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeOptionsKey);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelOptionsKey);
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_OPTIONS));
            return;
        }

        internal function closeOptions(arg1:*):void
        {
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeOptions);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelOptions);
            this._optionsDialog.buttons.getButton("OK").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeOptionsKey);
            this._optionsDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelOptionsKey);
            if (this._optionsDialog.radioButtons.hasRadioButtons("Coins")) 
            {
                if (this._optionsDialog.radioButtons.getRadioButton("Coins").selected && this._doCoins) 
                {
                    this._displayAsCoins = true;
                }
                else 
                {
                    this._displayAsCoins = false;
                }
            }
            var loc1:*=mgs.aurora.games.logicBlocks.data.CustomRuleSet(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.CustomRuleSet.PUBLISHER_NAME));
            if (loc1.quickSpinEnabled) 
            {
                if (this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked) 
                {
                    this._isQuickSpin = true;
                }
                else 
                {
                    this._isQuickSpin = false;
                }
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").enabled = false;
                this._isQuickSpin = false;
            }
            if (loc1.freespinQuickSpinEnabled) 
            {
                if (this._optionsDialog.checkBoxes.getCheckBox("QuickFreespins").checked) 
                {
                    this._isFreespinsQuickSpin = true;
                }
                else 
                {
                    this._isFreespinsQuickSpin = false;
                }
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("QuickFreespins").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("QuickFreespins").enabled = false;
                this._isFreespinsQuickSpin = false;
            }
            if (this._optionsDialog.checkBoxes.hasCheckBox("HideRespins")) 
            {
                if (this._optionsDialog.checkBoxes.getCheckBox("HideRespins").checked) 
                {
                    this._hideRespinCost = true;
                }
                else 
                {
                    this._hideRespinCost = false;
                }
            }
            if (this._optionsDialog.checkBoxes.getCheckBox("GameSounds").checked) 
            {
                this._switchOffAllGameSounds = true;
            }
            else 
            {
                this._switchOffAllGameSounds = false;
            }
            if (this._optionsDialog.checkBoxes.getCheckBox("BGSounds").checked) 
            {
                this._switchOffBgSounds = true;
            }
            else 
            {
                this._switchOffBgSounds = false;
            }
            if (this._optionsDialog.checkBoxes.getCheckBox("WinSounds").checked) 
            {
                this._switchOffWinSounds = true;
            }
            else 
            {
                this._switchOffWinSounds = false;
            }
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllGameSounds", this._switchOffAllGameSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllSounds", this._switchOffAllSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffBgSounds", this._switchOffBgSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffWinSounds", this._switchOffWinSounds.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isQuickSpin", this._isQuickSpin.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isFreespinQuickSpin", this._isFreespinsQuickSpin.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "HideRespins", this._hideRespinCost.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins", this._displayAsCoins.toString());
            this.syndicateUpdatedOptions();
            if (this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute = true;
                this._switchOffAllSounds = true;
            }
            else 
            {
                if (mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute == true) 
                {
                    mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute = false;
                }
                this._switchOffAllSounds = false;
            }
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_OPTIONS));
            return;
        }

        internal function allSoundsSelected(arg1:mgs.aurora.api.events.ApiDialogueSelectionEvent):void
        {
            if (this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked != false) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = true;
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").enabled = false;
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").enabled = true;
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").enabled = true;
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").enabled = true;
            }
            return;
        }

        internal function closeOptionsKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeOptions(arg1);
            return;
        }

        internal function cancelOptionsKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.cancelOptions(arg1);
            return;
        }

        internal function onOptionsDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onOptionsDialogCreated);
            this._optionsDialog = this._dialogs.dialogue(DIALOG_OPTIONS);
            if (this._switchOffAllGameSounds) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").checked = true;
            }
            if (this._switchOffWinSounds) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").checked = true;
            }
            if (this._switchOffBgSounds) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").checked = true;
            }
            if (mgs.aurora.games.framework.AuroraReference.aurora.sounds.mute) 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = true;
                this._optionsDialog.checkBoxes.getCheckBox("GameSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("WinSounds").enabled = false;
                this._optionsDialog.checkBoxes.getCheckBox("BGSounds").enabled = false;
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("AllSounds").checked = false;
            }
            if (this._displayAsCoins) 
            {
                if (this._doCoins && this._optionsDialog.radioButtons.hasRadioButtons("Coins")) 
                {
                    this._optionsDialog.radioButtons.getRadioButton("Coins").selected = true;
                }
            }
            else if (this._doCredits && this._optionsDialog.radioButtons.hasRadioButtons("Credits")) 
            {
                this._optionsDialog.radioButtons.getRadioButton("Credits").selected = true;
            }
            if (!this._doCoins && this._optionsDialog.radioButtons.hasRadioButtons("Coins")) 
            {
                this._optionsDialog.radioButtons.getRadioButton("Coins").enabled = false;
                if (this._optionsDialog.radioButtons.getRadioButton("Coins").selected) 
                {
                    this._optionsDialog.radioButtons.getRadioButton("Coins").selected = false;
                }
            }
            if (!this._doCredits && this._optionsDialog.radioButtons.hasRadioButtons("Credits")) 
            {
                this._optionsDialog.radioButtons.getRadioButton("Credits").enabled = false;
                if (this._optionsDialog.radioButtons.getRadioButton("Credits").selected) 
                {
                    this._optionsDialog.radioButtons.getRadioButton("Credits").selected = false;
                }
            }
            var loc1:*=mgs.aurora.games.logicBlocks.data.CustomRuleSet(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.CustomRuleSet.PUBLISHER_NAME));
            if (loc1.quickSpinEnabled) 
            {
                if (this._isQuickSpin) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked = true;
                }
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("QuickSpins").enabled = false;
                this._isQuickSpin = false;
                mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isQuickSpin", this._isQuickSpin.toString());
            }
            if (loc1.freespinQuickSpinEnabled) 
            {
                if (this._isFreespinsQuickSpin) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("QuickFreespins").checked = true;
                }
            }
            else 
            {
                this._optionsDialog.checkBoxes.getCheckBox("QuickFreespins").checked = false;
                this._optionsDialog.checkBoxes.getCheckBox("QuickFreespins").enabled = false;
                this._isFreespinsQuickSpin = false;
                mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isFreespinQuickSpin", this._isFreespinsQuickSpin.toString());
            }
            if (this._optionsDialog.checkBoxes.hasCheckBox("HideRespins")) 
            {
                if (this._hideRespinCost) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("HideRespins").checked = true;
                }
                if (this._freeGames.isFreeGameActive) 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("HideRespins").enabled = false;
                }
                else 
                {
                    this._optionsDialog.checkBoxes.getCheckBox("HideRespins").enabled = true;
                }
            }
            this._optionsDialog.checkBoxes.getCheckBox("AllSounds").addEventListener(mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTION_CHANGE, this.allSoundsSelected);
            this._optionsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeOptions);
            this._optionsDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelOptions);
            this._optionsDialog.buttons.getButton("OK").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeOptionsKey);
            this._optionsDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelOptionsKey);
            return;
        }

        internal function showOptionsDialog():void
        {
            var dialogsXML:XML;

            var loc1:*;
            dialogsXML = mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs");
            this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onOptionsDialogCreated);
            var loc3:*=0;
            var loc4:*=dialogsXML.dialogue;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == "Options") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._dialogs.create(DIALOG_OPTIONS, DIALOG_OPTIONS, null, loc2);
            syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_OPTIONS));
            return;
        }

        internal function checkAutoPlaysCreditsInRange(arg1:Number):Number
        {
            if (arg1 > AUTOPLAY_MAX_CREDITS) 
            {
                return AUTOPLAY_MAX_CREDITS;
            }
            if (arg1 < AUTOPLAY_MIN_CREDITS) 
            {
                return AUTOPLAY_MIN_CREDITS;
            }
            return arg1;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CANCEL_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OPTIONS_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_AUTOPLAY_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESET_STATS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BOUNDARY_NOTICE));
            this.defineSubscriptions();
            return;
        }

        internal function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.updateHandler, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showAutoPlayDialog, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigComplete, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStatsUpdate, mgs.aurora.games.logicBlocks.data.StatisticsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.StatisticsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSettings, mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.SettingsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showCreditsDialog, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showCreditsDialog, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showCreditsDialog, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_BOUNDARY_CHANGE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptionsUpdate, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            return;
        }

        internal function onOptionsUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.OptionsData(arg1.data);
            this._displayAsCoins = loc1.displayAsCoins;
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins", this._displayAsCoins.toString());
            return;
        }

        internal function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.showBoundaryDialog();
            return;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._responseData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._betData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.BetData;
            this._freeGames = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeGamesData;
            this.setData();
            this.syndicateUpdatedAutoPlay();
            return;
        }

        internal function setData():void
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.storage;
            this._switchOffAllGameSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllGameSounds"));
            this._switchOffAllSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffAllSounds"));
            this._switchOffBgSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffBgSounds"));
            this._switchOffWinSounds = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "switchOffWinSounds"));
            this._isQuickSpin = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isQuickSpin"));
            this._isFreespinsQuickSpin = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "isFreespinQuickSpin"));
            this._hideRespinCost = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "HideRespins"));
            this._displayAsCoins = this.isSwitchedOn(loc1.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "displayAsCoins"));
            if (mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins") == null || mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins") == "") 
            {
                this._numAutoPlay = this._numAutoPlay != -1 ? this._numAutoPlay : 25;
            }
            else 
            {
                this._numAutoPlay = int(mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins"));
            }
            this._numAutoPlay = this.checkAutoPlaysInRange(this._numAutoPlay);
            this._stopOnWin = int(mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWin"));
            this._stopOnWinSelected = this.isSwitchedOn(mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWinSelected"));
            return;
        }

        internal function onSettings(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._settings = arg1.data;
            this._doCoins = this._settings.doCoins;
            this._doCredits = this._settings.doCredits;
            this._useCoinsCurrencyAutoplayDialog = this._settings.useCoinsCurrencyAutoplayDialog;
            return;
        }

        internal function onStatsUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace(">> DialogAgent- onStatsUpdate");
            this._stats = arg1.data;
            return;
        }

        internal function onConfigComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.loadOptions();
            return;
        }

        internal function updateHandler(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.OPTIONS:
                {
                    this.showOptionsDialog();
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.STATS:
                {
                    this.showStatisticsDialog();
                    break;
                }
            }
            return;
        }

        internal function showAutoPlayDialog(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var i:mgs.aurora.games.framework.ITransportLayer=null;

            var loc1:*;
            i = arg1;
            if (i.data == null) 
            {
                this.setData();
                this._dialogs.addEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onAutoPlayDialogCreated);
                if (this._useCoinsCurrencyAutoplayDialog) 
                {
                    var loc3:*=0;
                    var loc4:*=mgs.aurora.games.common.components.resourceProxy.Assets.getXML("Dialogs").dialogue;
                    var loc2:*=new XMLList("");
                    for each (var loc5:* in loc4) 
                    {
                        var loc6:*;
                        with (loc6 = loc5) 
                        {
                            if (@id == DIALOG_AUTOPLAY_COINS_CURRENCY) 
                            {
                                loc2[loc3] = loc5;
                            }
                        }
                    }
                    this._dialogs.create(DIALOG_AUTOPLAY, DIALOG_AUTOPLAY_COINS_CURRENCY, null, loc2);
                }
                else 
                {
                    this._dialogs.create(DIALOG_AUTOPLAY, DIALOG_AUTOPLAY);
                }
                syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            }
            return;
        }

        internal function onAutoPlayDialogCreated(arg1:mgs.aurora.api.events.ApiDialogueHandlerEvent):void
        {
            this._dialogs.removeEventListener(mgs.aurora.api.events.ApiDialogueHandlerEvent.DIALOGUE_CREATED, this.onAutoPlayDialogCreated);
            this._autoPlayDialog = this._dialogs.dialogue(DIALOG_AUTOPLAY);
            this._autoPlayDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").addEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.addEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.onAutoPlayKeyBoardButtonEvent);
            this._autoPlayDialog.radioButtons.addEventListener(mgs.aurora.api.events.ApiDialogueSelectionEvent.SELECTION_CHANGE, this.onAutoPlayRadioEvent);
            var loc1:*=this._autoPlayDialog.comboBoxes.getComboBox("winExceedsOrEqualsCombo");
            loc1.textField.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onAutoPlayComboBoxEvent);
            loc1.textField.text = String(this._stopOnWin);
            loc1.enabled = this._stopOnWinSelected;
            var loc2:*=this._autoPlayDialog.comboBoxes.getComboBox("numSpinsCombo");
            this._numAutoPlay = mgs.aurora.games.logicBlocks.data.AutoPlayData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME)).savedNumAutoPlay;
            loc2.textField.text = String(this._numAutoPlay);
            loc2.textField.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onNumAutoPlaysChanged);
            if (this._stopOnWinSelected) 
            {
                this._autoPlayDialog.radioButtons.getRadioButton("stopSettingsRadio2").selected = true;
            }
            return;
        }

        internal function closeAutoPlayKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.closeAutoPlay(arg1);
            return;
        }

        internal function cancelAutoPlayKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.cancelAutoPlay(arg1);
            return;
        }

        internal function cancelAutoPlay(arg1:*):void
        {
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_CANCEL_AUTOPLAY);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            return;
        }

        internal function startAutoPlay(arg1:*):void
        {
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            var loc1:*=mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance;
            if (loc1 - this._betData.betValue < 0 && !this._freeGames.isFreeGameActive) 
            {
                this._dialogs.remove(arg1.diagId);
                this.showCreditsDialog();
                return;
            }
            this.saveAutoPlaySettings();
            this.syndicateUpdatedAutoPlay();
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(this._numAutoPlay));
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            return;
        }

        internal function closeAutoPlay(arg1:*):void
        {
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.cancelAutoPlay);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.startAutoPlay);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueMouseEvent.CLICK, this.closeAutoPlay);
            this._autoPlayDialog.buttons.getButton("CANCEL").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.cancelAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("START").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.startAutoPlayKey);
            this._autoPlayDialog.buttons.getButton("SAVEANDCLOSE").removeEventListener(mgs.aurora.api.events.ApiDialogueKeyboardEvent.KEY_UP, this.closeAutoPlayKey);
            this.saveAutoPlaySettings();
            this._dialogs.remove(arg1.diagId);
            syndicate(this, SERVICE_CANCEL_AUTOPLAY);
            syndicate(this, SERVICE_DIALOG_CLOSED, new mgs.aurora.games.framework.TransportLayer(DIALOG_AUTOPLAY));
            return;
        }

        internal function onNumAutoPlaysChanged(arg1:mgs.aurora.api.events.ApiDialogueTextEvent):void
        {
            arg1.target.removeEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onNumAutoPlaysChanged);
            var loc1:*=int(mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text);
            var loc2:*=this.checkAutoPlaysInRange(loc1);
            this._numAutoPlay = loc2;
            mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text = String(loc2);
            arg1.target.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onNumAutoPlaysChanged);
            return;
        }

        internal function startAutoPlayKey(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            this.startAutoPlay(arg1);
            return;
        }

        internal function onAutoPlayComboBoxEvent(arg1:mgs.aurora.api.events.ApiDialogueTextEvent):void
        {
            arg1.target.removeEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onAutoPlayComboBoxEvent);
            var loc1:*=Number(mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text);
            var loc2:*=this.checkAutoPlaysInRange(loc1);
            this._stopOnWin = loc2;
            mgs.aurora.api.interfaces.dialogues.controls.IInputText(arg1.control).text = String(loc2);
            arg1.target.addEventListener(mgs.aurora.api.events.ApiDialogueTextEvent.CHANGE, this.onAutoPlayComboBoxEvent);
            return;
        }

        internal function onAutoPlayRadioEvent(arg1:mgs.aurora.api.events.ApiDialogueSelectionEvent):void
        {
            var loc1:*=this._autoPlayDialog.radioButtons.getRadioButton("stopSettingsRadio2").selected;
            this._stopOnWinSelected = loc1;
            this._autoPlayDialog.comboBoxes.getComboBox("winExceedsOrEqualsCombo").enabled = loc1;
            return;
        }

        internal function onAutoPlayKeyBoardButtonEvent(arg1:mgs.aurora.api.events.ApiDialogueKeyboardEvent):void
        {
            _trace(arg1.diagId);
            return;
        }

        internal function saveAutoPlaySettings():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayNumSpins", this._numAutoPlay.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWin", this._stopOnWin.toString());
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "AutoPlayStopOnWinSelected", this._stopOnWinSelected.toString());
            this.syndicateUpdatedAutoPlay();
            return;
        }

        internal function syndicateUpdatedAutoPlay():void
        {
            syndicate(this, SERVICE_AUTOPLAY_UPDATE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransAutoPlayData(this._numAutoPlay, this._stopOnWin, this._stopOnWinSelected)));
            return;
        }

        internal function showCreditsDialog(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.banking.insufficientFunds();
            syndicate(this, SERVICE_DIALOG_OPEN, new mgs.aurora.games.framework.TransportLayer(DIALOG_CREDITS));
            return;
        }

        internal function isSwitchedOn(arg1:String):Boolean
        {
            if (arg1 == "true") 
            {
                return true;
            }
            return false;
        }

        public override function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        public override function dispose():void
        {
            this._dialogs = null;
            this._autoPlayDialog = null;
            this._optionsDialog = null;
            this._statsDialog = null;
            this._boundaryDialog = null;
            this._creditsDialog = null;
            super.dispose();
            return;
        }

        public static const SERVICE_DIALOG_OPEN:String="DIALOG_OPEN";

        public static const PUBLISHER_NAME:String="AGENT_DIALOG";

        public static const SERVICE_START_AUTOPLAY:String="START";

        public static const SERVICE_CANCEL_AUTOPLAY:String="CANCEL";

        public static const SERVICE_OPTIONS_UPDATE:String="OPTIONS_UPDATE";

        public static const SERVICE_AUTOPLAY_UPDATE:String="AUTOPLAY_UPDATE";

        public static const SERVICE_DIALOG_CLOSED:String="DIALOG_CLOSED";

        public static const SERVICE_RESET_STATS:String="RESET_STATS";

        public static const SERVICE_BOUNDARY_NOTICE:String="BOUNDARY_NOTICE";

        public static const AUTOPLAY_MIN:int=1;

        public static const AUTOPLAY_MAX:int=9999;

        public static const AUTOPLAY_MIN_CREDITS:Number=1;

        public static const AUTOPLAY_MAX_CREDITS:Number=9999;

        public static const DIALOG_AUTOPLAY:String="AutoPlay";

        protected static const DIALOG_AUTOPLAY_COINS_CURRENCY:String="AutoPlay_CoinsToCurrency";

        public static const DIALOG_OPTIONS:String="Options";

        public static const DIALOG_STATISTICS:String="Stats";

        public static const DIALOG_CREDITS:String="CreditsDialog";

        public static const DIALOG_BOUNDARY:String="Boundary";

        internal var _autoPlayDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _dialogs:mgs.aurora.api.interfaces.IDialogues;

        internal var _useCoinsCurrencyAutoplayDialog:Boolean;

        internal var _freeGames:mgs.aurora.games.logicBlocks.data.FreeGamesData;

        internal var _betData:mgs.aurora.games.logicBlocks.data.BetData;

        internal var _responseData:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _settings:mgs.aurora.games.logicBlocks.data.SettingsData;

        internal var _doCredits:Boolean=false;

        internal var _doCoins:Boolean=false;

        internal var _isShowing:Boolean=false;

        internal var _stats:mgs.aurora.games.logicBlocks.data.StatisticsData;

        internal var _hideRespinCost:Boolean=false;

        internal var _isFreespinsQuickSpin:Boolean=false;

        internal var _switchOffWinSounds:Boolean=false;

        internal var _isQuickSpin:Boolean=false;

        internal var _displayAsCoins:Boolean=false;

        internal var _switchOffBgSounds:Boolean=false;

        internal var _switchOffAllGameSounds:Boolean=false;

        internal var _switchOffAllSounds:Boolean=false;

        internal var _stopOnWinSelected:Boolean;

        internal var _stopOnWin:Number;

        internal var _numAutoPlay:int=-1;

        internal var _creditsDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _boundaryDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _statsDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;

        internal var _optionsDialog:mgs.aurora.api.interfaces.dialogues.IDialogue;
    }
}


//            class DrawLayersAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class DrawLayersAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function DrawLayersAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.DrawLayersAgent");
            this._levels = [];
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DRAWLAYERS));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.drawLayers, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_LAYERS);
            this._drawOnce = false;
            return;
        }

        internal function drawLayers(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc3:*=null;
            if (this._drawOnce) 
            {
                return;
            }
            this._drawOnce = true;
            var loc1:*=arg1.data;
            var loc2:*=(loc1.layer.length() - 1);
            do 
            {
                if (loc1.layer[loc2].@type != "MovieClip") 
                {
                    loc3 = new flash.display.Sprite();
                }
                else 
                {
                    loc3 = new flash.display.MovieClip();
                }
                loc3.name = loc1.layer[loc2].@id.toString();
                loc3.cacheAsBitmap = String(loc1.layer[loc2].@cacheAsBitmap) == "true";
                loc3.mouseEnabled = String(loc1.layer[loc2].@mouseEnabled) == "true";
                loc3.mouseChildren = loc3.mouseEnabled;
                mgs.aurora.games.framework.StageReference.stage.addChild(loc3);
                this._levels.push(loc1.layer[loc2].@id.toString());
            }
            while (--loc2 >= 0);
            syndicate(this, SERVICE_DRAWLAYERS);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_LAYERS";

        public static const SERVICE_DRAWLAYERS:String="LAYERSDONE";

        internal var _drawOnce:Boolean=false;

        internal var _levels:Array;
    }
}


//            class FeatureDialogAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class FeatureDialogAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function FeatureDialogAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent");
            return;
        }

        internal function onOKRelease(arg1:flash.events.MouseEvent):void
        {
            syndicate(this, SERVICE_OK);
            this.remove();
            this._dialog = null;
            return;
        }

        public function remove():void
        {
            try 
            {
                if (this._dialog.parent == mgs.aurora.games.framework.StageReference.getLevel("Dialogs")) 
                {
                    syndicate(this, SERVICE_HIDE);
                    this._dialog.stage.focus = this._dialog.stage;
                    this._dialog.parent.removeChild(this._dialog);
                }
            }
            catch (e:TypeError)
            {
            };
            return;
        }

        public function get canShow():Boolean
        {
            return !this._hasShownBefore && !(this._conductor.freeGamesData.isFreeGameActive && !this._conductor.settings.displayFeatureDialogInFreeGames);
        }

        public function get canDo():Boolean
        {
            return this._conductor.settings.featureDialog;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasView;
        }

        public override function dispose():void
        {
            var ok:flash.display.MovieClip;

            var loc1:*;
            ok = null;
            this.remove();
            try 
            {
                ok = this._dialog.getChildByName("ok") as flash.display.MovieClip;
                this._dialog.removeEventListener(flash.events.MouseEvent.MOUSE_UP, this.onOKRelease);
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            this._dialog = null;
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesUseNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesExit, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_LATER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesScreenOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesScreenClosed, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdate, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            var child:flash.display.DisplayObject;
            var index_count:int;

            var loc1:*;
            child = null;
            index_count = 0;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                {
                    this._hasShownBefore = true;
                    break;
                }
            }
            try 
            {
                if (this.canDo) 
                {
                    this._dialog = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("featureDialog");
                    this._dialog.x = 0;
                    this._dialog.y = 0;
                    this._dialog.name = "featureDialog";
                    index_count = this._dialog.numChildren;
                    while ((index_count = (index_count - 1)) > -1) 
                    {
                        child = this._dialog.getChildAt(index_count);
                        if (!(child is flash.display.DisplayObjectContainer)) 
                        {
                            continue;
                        }
                        flash.display.DisplayObjectContainer(child).mouseEnabled = false;
                    }
                    if (this.canDo && this.canShow && !this._conductor.freeGamesData.hasFreeGames) 
                    {
                        this.show();
                    }
                }
            }
            catch (e:TypeError)
            {
                _trace("Could not find [\'featureDialog\'] movieclip. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function onFreeGamesUseNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.settings.displayFeatureDialogInFreeGames) 
                {
                    this.show();
                }
            }
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this.canDo && this.canShow) 
                {
                    this.show();
                }
            }
            return;
        }

        internal function onFreeGamesExit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this.canDo && this.canShow) 
                {
                    this.show();
                }
            }
            return;
        }

        internal function onFreeGamesScreenOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freeGamesScreenOpen = true;
            return;
        }

        internal function onFreeGamesScreenClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freeGamesScreenOpen = false;
            return;
        }

        internal function onUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.remove();
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                if (arg1.data.framework.state != 0) 
                {
                    this._hasShownBefore = true;
                }
                if (arg1.data.nextSpin != null) 
                {
                    if (arg1.data.nextSpin.freeSpinsRemaining > 0) 
                    {
                        this._hasShownBefore = true;
                    }
                }
            }
            return;
        }

        public function show():void
        {
            var hitBlock:flash.display.MovieClip;
            var ok:flash.display.MovieClip;
            var abut:mgs.aurora.games.common.components.ui.components.button.ArtButton;

            var loc1:*;
            hitBlock = null;
            ok = null;
            abut = null;
            if (this.isReady && this.canShow) 
            {
                if (this._dialog.parent == null) 
                {
                    try 
                    {
                        this._hasShownBefore = true;
                        hitBlock = this._dialog.getChildByName("HitBlock") as flash.display.MovieClip;
                        hitBlock.addEventListener(flash.events.MouseEvent.CLICK, this.onOKRelease);
                        hitBlock.mouseEnabled = true;
                        ok = this._dialog.getChildByName("ok") as flash.display.MovieClip;
                        ok.mouseEnabled = true;
                        abut = new mgs.aurora.games.common.components.ui.components.button.ArtButton(ok, this.down, true);
                        mgs.aurora.games.framework.StageReference.getLevel("Dialogs").addChild(this._dialog);
                    }
                    catch (e:TypeError)
                    {
                        _trace("Could find [" + _dialog + "] movieclip. Check your Art setup.", "error", this, 16711680);
                    }
                    syndicate(this, SERVICE_SHOW);
                }
            }
            return;
        }

        internal function down():void
        {
            syndicate(this, SERVICE_OK);
            this.remove();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_FEATURE_DIALOG";

        public static const SERVICE_OK:String="OK";

        public static const SERVICE_SHOW:String="SHOW";

        public static const SERVICE_HIDE:String="HIDE";

        internal var _dialog:flash.display.MovieClip;

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _hasView:Boolean=false;

        internal var _hasShownBefore:Boolean=false;

        internal var _freeGamesScreenOpen:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;
    }
}


//            class FloatingWildMultiplierAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class FloatingWildMultiplierAgent extends mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent
    {
        public function FloatingWildMultiplierAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent");
            return;
        }

        public override function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REPLACE_SYMBOL));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PULSE_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STATIC_WILD_SYMBOL));
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_FLOATING_WILD);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSymbolRefresh, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_SYMBOLS_REFRESH);
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._xmlConfig = arg1.data;
            if (canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onSymbolRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc4:*=0;
            if (_conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                return;
            }
            var loc3:*=0;
            while (loc3 < _conductor.response.wins.wins.length) 
            {
                if (!(_conductor.response.wins.wins[loc3].extendedSpinStyles == null) && _conductor.response.wins.wins[loc3].extendedSpinStyles.numberOf > 0) 
                {
                    loc4 = 0;
                    while (loc4 < _conductor.response.wins.wins[loc3].extendedSpinStyles.extendedSpinStyles.length) 
                    {
                        loc1 = this._wildSymbols[uint(_conductor.response.wins.wins[loc3].extendedSpinStyles.extendedSpinStyles[loc4].multipliers[0])];
                        loc2 = this._floatingWildPosn[loc4];
                        syndicate(this, SERVICE_STATIC_WILD_SYMBOL, new mgs.aurora.games.framework.TransportLayer({"wildPosn":loc2, "newSymbolId":loc1, "reelSet":this._reelSet}));
                        ++loc4;
                    }
                }
                ++loc3;
            }
            return;
        }

        protected override function setup():void
        {
            var loc1:*=null;
            _isConfig = true;
            this._reelSet = uint(this._xmlConfig.@reelSet);
            this._floatingWildPosn = Vector.<uint>(_conductor.response.visarea.wildVABoxes);
            this._hasPreAnimation = uint(this._xmlConfig.@hasPreAnimation) == 1;
            this._postAnimDelay = uint(this._xmlConfig.@postAnimDelay);
            this._delayBetweenFloatingWild = uint(this._xmlConfig.@delayBetweenFloatingWild);
            this._layer = mgs.aurora.games.framework.StageReference.getLevel(this._xmlConfig.@layer);
            this._wildSymbols = new flash.utils.Dictionary();
            var loc2:*=0;
            var loc3:*=this._xmlConfig.wild;
            for each (loc1 in loc3) 
            {
                this._wildSymbols[uint(loc1.@multiplier)] = loc1.@symbolId;
            }
            return;
        }

        protected override function DoProcessing():void
        {
            var loc1:*=_currentHookEvent;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.publishers.ReelsServer.HOOK_EVENT_ALL_REELS_STOPPED:
                {
                    if (_conductor.response.wins.numberOf > 0 && _conductor.response.slot.reelSet == this._reelSet) 
                    {
                        if (_conductor.response.extendedSpinStyles.numberOf > 0 && _conductor.response.visarea.wildVABoxes.length > 0) 
                        {
                            this._floatingWildPosn = Vector.<uint>(_conductor.response.visarea.wildVABoxes);
                            syndicate(this, SERVICE_PULSE_SYMBOLS);
                            this.resolvePreWins();
                        }
                        else 
                        {
                            CompleteHookEvent();
                        }
                    }
                    else 
                    {
                        CompleteHookEvent();
                    }
                    break;
                }
                default:
                {
                    CompleteHookEvent();
                    break;
                }
            }
            return;
        }

        protected function resolvePreWins():void
        {
            if (this._floatingWildPosn.length > 0) 
            {
                this._currentWildPosn = this._floatingWildPosn.shift();
                if (this._hasPreAnimation) 
                {
                    this.playAnimation(this._currentWildPosn);
                }
                else 
                {
                    this.onAnimComplete();
                }
            }
            return;
        }

        protected function playAnimation(arg1:uint):void
        {
            return;
        }

        protected function onAnimComplete(arg1:flash.display.MovieClip=null):void
        {
            var loc2:*=null;
            var loc1:*=this.getWildSymbol();
            syndicate(this, SERVICE_REPLACE_SYMBOL, new mgs.aurora.games.framework.TransportLayer({"wildPosn":this._currentWildPosn, "newSymbolId":loc1, "reelSet":this._reelSet}));
            if (this._floatingWildPosn.length > 0) 
            {
                loc2 = new flash.utils.Timer(this._delayBetweenFloatingWild, 1);
                loc2.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onDelayBetweenFloatingWildComplete);
                loc2.start();
            }
            else 
            {
                loc2 = new flash.utils.Timer(this._postAnimDelay, 1);
                loc2.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onPostAnimComplete);
                loc2.start();
            }
            return;
        }

        internal function getWildSymbol():uint
        {
            var loc1:*=0;
            var loc3:*=0;
            var loc2:*=0;
            while (loc2 < _conductor.response.wins.wins.length) 
            {
                if (!(_conductor.response.wins.wins[loc2].extendedSpinStyles == null) && _conductor.response.wins.wins[loc2].extendedSpinStyles.numberOf > 0) 
                {
                    loc3 = 0;
                    while (loc3 < _conductor.response.wins.wins[loc2].extendedSpinStyles.extendedSpinStyles.length) 
                    {
                        if (this._currentWildPosn == _conductor.response.wins.wins[loc2].extendedSpinStyles.extendedSpinStyles[loc3].wildVABoxes) 
                        {
                            loc1 = this._wildSymbols[uint(_conductor.response.wins.wins[loc2].extendedSpinStyles.extendedSpinStyles[loc3].multipliers[0])];
                            return loc1;
                        }
                        ++loc3;
                    }
                }
                ++loc2;
            }
            return 99;
        }

        internal function onDelayBetweenFloatingWildComplete(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onDelayBetweenFloatingWildComplete);
            arg1.currentTarget;
            this.resolvePreWins();
            return;
        }

        internal function onPostAnimComplete(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onPostAnimComplete);
            arg1.currentTarget;
            CompleteHookEvent();
            return;
        }

        public static const SERVICE_REPLACE_SYMBOL:String="SERVICE_REPLACE_SYMBOL";

        public static const SERVICE_PULSE_SYMBOLS:String="SERVICE_PULSE_SYMBOLS";

        public static const SERVICE_STATIC_WILD_SYMBOL:String="SERVICE_STATIC_WILD_SYMBOL";

        public static const PUBLISHER_NAME:String="AGENT_FLOATING_WILD_MULTIPLIER";

        internal var _viewReady:Boolean=false;

        internal var _reelSet:uint;

        internal var _floatingWildPosn:__AS3__.vec.Vector.<uint>;

        internal var _hasPreAnimation:Boolean;

        internal var _currentWildPosn:uint;

        internal var _postAnimDelay:uint;

        internal var _delayBetweenFloatingWild:uint;

        internal var _wildSymbols:flash.utils.Dictionary;

        protected var _xmlConfig:XMLList;

        protected var _layer:flash.display.DisplayObjectContainer;
    }
}


//            class FreeGameSliderAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import flash.events.*;
    import flash.text.*;
    import mgs.aurora.games.common.components.generic.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class FreeGameSliderAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function FreeGameSliderAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.FreeGameSliderAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.FreeGameSliderAgent");
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    if (this._conductor.freeGamesData.activeGame != null) 
                    {
                        this.setGamesRemaining((this._conductor.freeGamesData.activeGame.gamesRemaining - 1));
                    }
                }
            }
            return;
        }

        internal function onCountUpStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (!this.canShow) 
                {
                    return;
                }
                this._conductor.countup.event.addEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    if (this._conductor.rollingReels.hasReelSlideSteps && this._conductor.rollingReels.currentlyActiveStep < (this._conductor.rollingReels.steps.length - 1)) 
                    {
                        return;
                    }
                    loc1 = this._conductor.freeGamesData.activeGame.sumWinnings;
                    if (this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) 
                    {
                        this._previousWinAmount = loc1 + this._conductor.response.bonusGames.totalBonusWin;
                    }
                    else 
                    {
                        this._previousWinAmount = loc1;
                    }
                }
            }
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            catch (e:Error)
            {
            };
            return;
        }

        internal function onRollingReelsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    loc1 = this._conductor.freeGamesData.activeGame.sumWinnings;
                    if (this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS || this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) 
                    {
                        this._previousWinAmount = loc1 + this._conductor.response.bonusGames.totalBonusWin;
                    }
                    else 
                    {
                        this._previousWinAmount = loc1;
                    }
                }
            }
            return;
        }

        internal function onCoinsCredits(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.canShow) 
            {
                return;
            }
            this.setTotalWinnings(this._previousWinAmount);
            return;
        }

        internal function onEnter(arg1:flash.events.Event):void
        {
            if (this._isFeatureDialog) 
            {
                return;
            }
            if (this._dir != "out") 
            {
                if (this._dir == "in") 
                {
                    if (this._sliderMC.x < this._startPos) 
                    {
                        this._sliderMC.x = this._sliderMC.x + this._sliderSpeed;
                        if (this._sliderMC.x > this._startPos) 
                        {
                            this._sliderMC.x = this._startPos;
                            this._sliderMC.removeEventListener(flash.events.Event.ENTER_FRAME, this.onEnter);
                        }
                    }
                }
            }
            else if (this._sliderMC.x > this._endPos) 
            {
                this._sliderMC.x = this._sliderMC.x - this._sliderSpeed;
                if (this._sliderMC.x < this._endPos) 
                {
                    this._sliderMC.x = this._endPos;
                    this._sliderMC.removeEventListener(flash.events.Event.ENTER_FRAME, this.onEnter);
                }
            }
            return;
        }

        internal function setup():void
        {
            var mask:flash.display.Sprite;
            var freeGameInfo:flash.text.TextField;

            var loc1:*;
            mask = null;
            freeGameInfo = null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._level = this._configXML.slider.@level;
            this._sliderId = this._configXML.slider.@id.toString();
            this._sliderX = Number(this._configXML.slider.@x);
            this._sliderY = Number(this._configXML.slider.@y);
            this._sliderSpeed = Number(this._configXML.slider.@speed);
            this._startPos = this._sliderX;
            this._endPos = Number(this._configXML.slider.@endPos);
            if (this._sliderMC == null) 
            {
                this._sliderMC = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._sliderId) as flash.display.MovieClip;
                this._sliderMC.name = this._sliderId;
                this._sliderMC.x = this._startPos;
                this._sliderMC.y = this._sliderY;
                mask = new flash.display.Sprite();
                mask.graphics.beginFill(16711680);
                mask.graphics.drawRect(this._sliderMC.x - this._sliderMC.width, this._sliderMC.y, this._sliderMC.width, this._sliderMC.height);
                mgs.aurora.games.framework.StageReference.getLevel(this._level).addChild(mask);
                this._sliderMC.mask = mask;
            }
            try 
            {
                this._sliderInfo = this._sliderMC.getChildByName("sliderInfo") as flash.display.MovieClip;
                this._sliderMC.addEventListener(flash.events.MouseEvent.ROLL_OVER, this.rollOver);
                this._sliderMC.addEventListener(flash.events.MouseEvent.ROLL_OUT, this.rollOut);
                this._sliderMC.addEventListener(flash.events.Event.ENTER_FRAME, this.onEnter);
            }
            catch (e:TypeError)
            {
                _trace("Could find [sliderInfo]. Check your Art setup.", "error", this, 16711680);
            }
            try 
            {
                freeGameInfo = this._sliderInfo.getChildByName("slider_text0") as flash.text.TextField;
                freeGameInfo.htmlText = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_MESSAGE");
            }
            catch (e:TypeError)
            {
                _trace("Could find [slider_text0]. Check your Art setup.", "error", this, 16711680);
            }
            this._configXML = null;
            if (this._conductor.freeGamesData != null) 
            {
                if (this._conductor.freeGamesData.activeGame == null) 
                {
                    this._previousWinAmount = 0;
                }
                else 
                {
                    this._previousWinAmount = this._conductor.freeGamesData.activeGame.sumWinnings;
                }
            }
            if (this.isReady && this.canShow) 
            {
                this.updateSlider();
                this.setTotalWinnings(this._previousWinAmount);
            }
            return;
        }

        internal function rollOver(arg1:flash.events.MouseEvent):void
        {
            if (this._isFeatureDialog) 
            {
                return;
            }
            this._dir = "out";
            if (!this._sliderMC.hasEventListener(flash.events.Event.ENTER_FRAME)) 
            {
                this._sliderMC.addEventListener(flash.events.Event.ENTER_FRAME, this.onEnter);
            }
            return;
        }

        internal function rollOut(arg1:flash.events.MouseEvent):void
        {
            if (this._isFeatureDialog) 
            {
                return;
            }
            this._dir = "in";
            if (!this._sliderMC.hasEventListener(flash.events.Event.ENTER_FRAME)) 
            {
                this._sliderMC.addEventListener(flash.events.Event.ENTER_FRAME, this.onEnter);
            }
            return;
        }

        internal function updateSlider():void
        {
            if (this.isReady && this.canShow) 
            {
                this.setGamesRemaining(this._conductor.freeGamesData.activeGame.gamesRemaining);
                this.setBalanceType(this._conductor.freeGamesData.activeGame.creditType);
                this.setReferenceNumber(this._conductor.freeGamesData.activeGame.uniqueId);
                this.setExpiryInfoText(this._conductor.freeGamesData.activeGame.endDate);
                if (this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || !this._conductor.freeGamesData.previousFreeGameTest) 
                {
                    if (this._conductor.response.framework.state != mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
                    {
                        this.setTotalWinnings(this._conductor.freeGamesData.activeGame.sumWinnings);
                    }
                    else 
                    {
                        this._previousWinAmount = this._conductor.response.bonusGames.totalBonusWin + this._conductor.freeGamesData.activeGame.sumWinnings;
                        this.setTotalWinnings(this._previousWinAmount);
                    }
                }
                else if (mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
                {
                    this._previousWinAmount = 0;
                    this.setTotalWinnings(0);
                }
                else 
                {
                    this.setTotalWinnings(this._conductor.freeGamesData.activeGame.sumWinnings);
                }
                if (this._sliderMC.parent == null) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this._level).addChild(this._sliderMC);
                    syndicate(this, SERVICE_SHOW);
                }
            }
            else if (this.isReady && !this.canShow) 
            {
                if (this._sliderMC.parent != null) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this._level).removeChild(this._sliderMC);
                    syndicate(this, SERVICE_HIDE);
                }
            }
            return;
        }

        internal function setGamesRemaining(arg1:int):void
        {
            var loc1:*=null;
            if (this.isReady && this.canShow) 
            {
                loc1 = this._sliderInfo.getChildByName("slider_text1") as flash.text.TextField;
                loc1.htmlText = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_GAMES_REMAINING") + ": " + arg1;
            }
            return;
        }

        internal function setBalanceType(arg1:Number):void
        {
            var creditType:Number;
            var creditInfo:String;
            var creditText:flash.text.TextField;

            var loc1:*;
            creditInfo = null;
            creditText = null;
            creditType = arg1;
            if (this.isReady) 
            {
                if (creditType != 0) 
                {
                    creditInfo = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_TYPE_BONUS");
                }
                else 
                {
                    creditInfo = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_TYPE_CASH");
                }
                try 
                {
                    creditText = this._sliderInfo.getChildByName("slider_text2") as flash.text.TextField;
                    creditText.htmlText = creditInfo;
                }
                catch (e:TypeError)
                {
                    _trace("No Textfield [slider_text2] found. Check your Art setup. -" + toString(), "error", this, 16711680);
                }
            }
            return;
        }

        internal function setExpiryInfoText(arg1:String):void
        {
            var endDate:String;
            var expiryDate:Array;
            var matches:Array;
            var year:int;
            var month:int;
            var day:int;
            var time:String;
            var dateTxt:String;
            var expiryInfo:String;
            var expiryText1:flash.text.TextField;
            var expiryText2:flash.text.TextField;

            var loc1:*;
            expiryText1 = null;
            expiryText2 = null;
            endDate = arg1;
            expiryDate = endDate.split(" ");
            matches = expiryDate[0].match(new RegExp("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)"));
            year = int(matches[1]);
            month = int(matches[2]);
            day = int(matches[3]);
            time = expiryDate[1].toString();
            dateTxt = day + " " + mgs.aurora.games.common.components.utils.Toolbox.getMonths(month) + " " + year;
            expiryInfo = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_EXPIRY");
            try 
            {
                expiryText1 = this._sliderInfo.getChildByName("slider_text4") as flash.text.TextField;
                expiryText1.htmlText = expiryInfo;
                expiryText2 = this._sliderInfo.getChildByName("slider_text5") as flash.text.TextField;
                expiryText2.htmlText = "<b>" + dateTxt + " @ " + time + "</b>";
            }
            catch (e:TypeError)
            {
                _trace("No Textfield [slider_text4] found. Check your Art setup. -" + toString(), "error", this, 16711680);
            }
            return;
        }

        internal function setReferenceNumber(arg1:String):void
        {
            var loc1:*=this._sliderInfo.getChildByName("slider_text6") as flash.text.TextField;
            loc1.htmlText = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_REFERENCE_NUM") + " " + arg1;
            return;
        }

        internal function setTotalWinnings(arg1:Number):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg1 > 0) 
            {
                if (this._conductor.options.displayAsCoins) 
                {
                    loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_COINS_WON");
                    loc1 = loc1 + " " + mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(arg1, this._conductor.betData.chipSize).toString();
                }
                else 
                {
                    loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("SLIDER_CREDITS_WON");
                    loc1 = loc1 + " " + mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(arg1).toString();
                }
                loc2 = this._sliderInfo.getChildByName("slider_text3") as flash.text.TextField;
                loc2.htmlText = loc1;
            }
            else 
            {
                loc2 = this._sliderInfo.getChildByName("slider_text3") as flash.text.TextField;
                loc2.htmlText = "";
            }
            return;
        }

        internal function counter(arg1:mgs.aurora.games.common.components.generic.events.CounterEvent):void
        {
            if (this.isReady && this.canShow) 
            {
                if (!this._conductor.options.isQuickSpin || !(this._conductor.autoplay.autoPlayActive || this._conductor.autoplay.autoPlayJustCompleted)) 
                {
                    this.setTotalWinnings(this._previousWinAmount + arg1.value * this._conductor.betData.chipSize);
                }
            }
            return;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasConfigXML && this._gotFreegameData && this._hasView && this._hasFreeGames;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
                this._sliderMC.removeEventListener(flash.events.Event.ENTER_FRAME, this.onEnter);
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigDone, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_FREEGAMES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGameUpdate, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountUpStart, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onContinue, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onContinue, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onContinue, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE_BASE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSwitch, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SWITCH_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFeatureDialogShow, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFeatureDialogHide, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoinsCredits, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COINS_CREDITS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsComplete, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_COMPLETE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfigDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConfigXML = true;
            this._configXML = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onFeatureDialogShow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isFeatureDialog = true;
            return;
        }

        internal function onFeatureDialogHide(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isFeatureDialog = false;
            return;
        }

        internal function onFreeGameUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._gotFreegameData = true;
            this._hasFreeGames = mgs.aurora.games.logicBlocks.data.FreeGamesData(arg1.data).hasFreeGames;
            if (this.canConfig) 
            {
                this.setup();
            }
            if (this.isReady) 
            {
                this.updateSlider();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        public function get canShow():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.FreeGamesData(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME)).isFreeGameActive;
            return loc1 && !this._conductor.freeGamesData.freegameCompleteFromRefresh;
        }

        internal function onAllReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            if (!this.canShow) 
            {
                return;
            }
            if (this.isReady) 
            {
                var loc2:*=this._conductor.state.state;
                switch (loc2) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    {
                        loc1 = this._conductor.freeGamesData.activeGame.sumWinnings;
                        this.setTotalWinnings(loc1);
                        this._previousWinAmount = loc1;
                        break;
                    }
                    default:
                    {
                        if (this._conductor.options.isQuickSpin && (this._conductor.autoplay.autoPlayActive || this._conductor.autoplay.autoPlayJustCompleted)) 
                        {
                            loc1 = this._conductor.freeGamesData.activeGame.sumWinnings;
                            this.setTotalWinnings(loc1);
                            this._previousWinAmount = loc1;
                        }
                    }
                }
            }
            return;
        }

        internal function onUseNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.response.framework.state != mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
                {
                    this._previousWinAmount = this._conductor.freeGamesData.activeGame.sumWinnings;
                }
                else 
                {
                    this._previousWinAmount = this._conductor.response.bonusGames.totalBonusWin + this._conductor.freeGamesData.activeGame.sumWinnings;
                }
                this.setTotalWinnings(this._previousWinAmount);
            }
            return;
        }

        internal function onContinue(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                _trace("onContinue");
                if (this._conductor.response.framework.state != mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
                {
                    this._previousWinAmount = this._conductor.freeGamesData.activeGame.sumWinnings;
                }
                else 
                {
                    this._previousWinAmount = this._conductor.response.bonusGames.totalBonusWin + this._conductor.freeGamesData.activeGame.sumWinnings;
                }
                this.setTotalWinnings(this._previousWinAmount);
            }
            return;
        }

        internal function onSwitch(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            if (this.isReady) 
            {
                loc1 = this._conductor.freeGamesData.activeGame.sumWinnings;
                this.setTotalWinnings(loc1);
                this._previousWinAmount = loc1;
            }
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (!this.canShow) 
                {
                    return;
                }
                this.updateSlider();
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_FREEGAME_SLIDER";

        public static const SERVICE_SHOW:String="SHOW";

        public static const SERVICE_HIDE:String="HIDE";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _hasConfigXML:Boolean=false;

        internal var _gotFreegameData:Boolean=false;

        internal var _hasView:Boolean=false;

        internal var _hasFreeGames:Boolean=false;

        internal var _configXML:XMLList;

        internal var _sliderMC:flash.display.MovieClip;

        internal var _sliderInfo:flash.display.MovieClip;

        internal var _sliderId:String;

        internal var _sliderX:Number;

        internal var _sliderY:Number;

        internal var _sliderSpeed:Number;

        internal var _level:String;

        internal var _dir:String="in";

        internal var _startPos:Number;

        internal var _endPos:Number;

        internal var _previousWinAmount:Number;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _isFeatureDialog:Boolean=false;
    }
}


//            class FreeGameSummaryAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.text.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.core.*;
    
    public class FreeGameSummaryAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function FreeGameSummaryAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent");
            this._layer = "FreeGameScreens";
            return;
        }

        internal function onContinue():void
        {
            syndicate(this, SERVICE_CONTINUE);
            this.removeSummaryScreen(SCREEN_GAME_IN_PROGRESS);
            return;
        }

        internal function onUseLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.showFreeGameExitScreen();
            return;
        }

        protected function onDiscardOffer(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.showDiscardDialogue(true);
            return;
        }

        protected function showDiscardDialogue(arg1:Boolean):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg1) 
            {
                this._discardOfferScreen = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(DISCARD_OFFER_DIALOG);
                mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(this._discardOfferScreen) as flash.display.MovieClip;
                loc1 = this._discardOfferScreen.getChildByName("discard") as flash.display.MovieClip;
                loc2 = this._discardOfferScreen.getChildByName("cancel") as flash.display.MovieClip;
                this._btnDiscard = new mgs.aurora.games.common.components.ui.components.button.ArtButton(loc1, this.discardOfferNow, true, "buttonHitArea");
                this._btnDiscardCancel = new mgs.aurora.games.common.components.ui.components.button.ArtButton(loc2, this.discardOfferCancel, true, "buttonHitArea");
                syndicate(this, SERVICE_DISCARD_OFFER_SCREEN_OPEN);
            }
            else 
            {
                if (this._discardOfferScreen) 
                {
                    if (this._discardOfferScreen.parent != null) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(this._layer).removeChild(this._discardOfferScreen);
                    }
                    this._discardOfferScreen = null;
                }
                syndicate(this, SERVICE_DISCARD_OFFER_SCREEN_CLOSED);
            }
            return;
        }

        protected function discardOfferNow():void
        {
            this.showDiscardDialogue(false);
            this._conductor.freeGamesData.selected.rejected = true;
            var loc1:*=this._conductor.freeGamesData.removeRejectedFreeGames();
            if (loc1.length > 0) 
            {
                syndicate(this, SERVICE_DISCARD_OFFER);
                syndicate(this, SERVICE_REJECT_FREEGAME, new mgs.aurora.games.framework.TransportLayer(loc1));
                this.showFreeGamesCompletedScreen();
            }
            return;
        }

        protected function discardOfferCancel():void
        {
            this.showDiscardDialogue(false);
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if ((this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE) && (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE || this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE)) 
                {
                    if (this._conductor.freeGamesData.isFreeGameActive) 
                    {
                        this._conductor.freeGamesData.updateData();
                        if (this._conductor.freeGamesData.activeGame.gamesRemaining != 0) 
                        {
                            if (this._conductor.freeGamesData.gameInWaitingId != mgs.aurora.games.logicBlocks.data.FreeGamesData.BASE) 
                            {
                                if (this._conductor.freeGamesData.gameInWaitingId != null) 
                                {
                                    this.switchToGameInWaiting();
                                }
                            }
                            else 
                            {
                                this.showFreeGameExitScreen();
                            }
                        }
                        else if (this._conductor.freeGamesData.numberOfAvailableGames != 0) 
                        {
                            this.showFreeGamesCompletedScreen();
                        }
                        else 
                        {
                            this.showFreeGamesCompletedScreen();
                        }
                    }
                    else if (this._conductor.freeGamesData.gameInWaitingId != null) 
                    {
                        this.switchToGameInWaiting();
                    }
                }
            }
            return;
        }

        internal function onGambleComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    if (this._conductor.freeGamesData.activeGame.gamesRemaining != 0) 
                    {
                        if (this._conductor.freeGamesData.gameInWaitingId != null) 
                        {
                            this.switchToGameInWaiting();
                        }
                    }
                    else 
                    {
                        this.showFreeGamesCompletedScreen();
                    }
                }
                else if (this._conductor.freeGamesData.gameInWaitingId != null) 
                {
                    this.switchToGameInWaiting();
                }
            }
            return;
        }

        internal function setEngineBadge(arg1:flash.display.MovieClip):void
        {
            var currentScreen:flash.display.MovieClip;
            var badge:flash.display.MovieClip;

            var loc1:*;
            badge = null;
            currentScreen = arg1;
            try 
            {
                badge = currentScreen.getChildByName("engineBadge") as flash.display.MovieClip;
                if (mgs.aurora.games.framework.ModuleReference.moduleInfo.engineBadge) 
                {
                    badge.visible = true;
                }
                else 
                {
                    badge.visible = false;
                }
            }
            catch (e:Error)
            {
                _trace("Could find the engineBadge. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function showGeneralFreeGameSummary():void
        {
            if (this.isReady) 
            {
                this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Summary_Offers")) as flash.display.MovieClip;
                this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
                this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
                this._btnUseLater = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_USE_LATER), this.useLater, true, "buttonHitArea");
                this._btnUseNow = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_USE_NOW), this.useNow, true, "buttonHitArea");
                this._btnClose = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_CLOSE), this.rejectFreeGames, false, "buttonHitArea");
                this._btnHelp = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_HELP), this.help, true);
                this._rejectTickBox = new mgs.aurora.games.common.components.ui.components.button.ArtCheckBox(this._langText.getChildByName(this.BUTTON_REJECT) as flash.display.MovieClip, this.onRejectSelect);
                this._btnNext = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_NEXT), this.nextOffer, true, "buttonHitArea");
                this._btnPrev = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_PREVIOUS), this.previousOffer, true, "buttonHitArea");
                this._freeGamesRemaining.addTo(this._langText.getChildByName("freeGamesRemaining") as flash.display.MovieClip);
                this._freeGamesRemaining.x = this._gamesRemainingX;
                this._freeGamesRemaining.y = this._gamesRemainingY;
                this.updateSummaryScreen(SCREEN_MAIN);
                if (this._conductor.freeGamesData.numberOfAvailableGames <= 1) 
                {
                    this._btnNext.hide(true);
                    this._btnPrev.hide(true);
                }
                this.setEngineBadge(this._languageLayer);
                syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_MAIN));
            }
            return;
        }

        internal function showFreeGameInProgress():void
        {
            if (this.isReady) 
            {
                this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Summary_FreeGame_In_Progress")) as flash.display.MovieClip;
                this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
                this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
                if (this._btnContinue != null) 
                {
                    this._btnContinue.dispose();
                }
                this._btnContinue = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_CONTINUE), this.onContinue, true, "buttonHitArea");
                this.setEngineBadge(this._languageLayer);
                syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_GAME_IN_PROGRESS));
            }
            return;
        }

        internal function showGameInProgressScreen():void
        {
            if (this.isReady) 
            {
                this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Summary_Game_In_Progress")) as flash.display.MovieClip;
                this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
                this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
                if (this._btnContinue != null) 
                {
                    this._btnContinue.dispose();
                }
                this._btnContinue = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_CONTINUE), this.onContinue, true, "buttonHitArea");
                this._freeGamesRemaining.addTo(this._langText.getChildByName("freeGamesRemaining") as flash.display.MovieClip);
                this.updateSummaryScreen(SCREEN_GAME_IN_PROGRESS);
                this.setEngineBadge(this._languageLayer);
                syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_GAME_IN_PROGRESS));
            }
            return;
        }

        internal function removeSummaryScreen(arg1:String=null):void
        {
            if (this._currentScreen.parent != null) 
            {
                mgs.aurora.games.framework.StageReference.getLevel(this._layer).removeChild(this._currentScreen);
                mgs.aurora.games.framework.StageReference.stage.stage.focus = mgs.aurora.games.framework.StageReference.stage.stage;
                this._currentScreen = null;
            }
            syndicate(this, SERVICE_SCREEN_CLOSED, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        internal function showButtonsForReject():void
        {
            this._btnClose.hide(true);
            this._btnUseLater.enable();
            this._btnUseNow.enable();
            this._languageLayer.swapChildren(this._btnClose.target, this._btnUseLater.target);
            return;
        }

        internal function showBaseInProgressScreen():void
        {
            if (this.isReady) 
            {
                this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Summary_Game_In_Progress")) as flash.display.MovieClip;
                this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
                this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
                if (this._btnContinue != null) 
                {
                    this._btnContinue.dispose();
                }
                this._btnContinue = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_CONTINUE), this.continueBaseGame, true, "buttonHitArea");
                this._freeGamesRemaining.addTo(this._langText.getChildByName("freeGamesRemaining") as flash.display.MovieClip);
                this.updateSummaryScreen(SCREEN_BASE_IN_PROGRESS);
                this.setEngineBadge(this._languageLayer);
                syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_BASE_IN_PROGRESS));
            }
            return;
        }

        internal function hideButtonsForReject():void
        {
            this._btnUseLater.hide(true);
            this._btnUseNow.disable();
            this._btnClose.enable();
            this._languageLayer.swapChildren(this._btnClose.target, this._btnUseLater.target);
            return;
        }

        internal function updateOfferScroller():void
        {
            var loc1:*=this._langText.getChildByName("offersRemaining") as flash.text.TextField;
            loc1.htmlText = this._conductor.freeGamesData.listIndex + 1 + " / " + this._conductor.freeGamesData.numberOfAvailableGames;
            var loc2:*=this._langText.getChildByName("Text_Offers") as flash.text.TextField;
            loc2.htmlText = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("OFFERS");
            return;
        }

        internal function enableRejectTickBox():void
        {
            var loc1:*=false;
            if (this.isReady) 
            {
                loc1 = false;
                if (this._conductor.freeGamesData.isFreeGameInProgress && this._conductor.freeGamesData.selected.uniqueId == this._conductor.freeGamesData.lastPlayedFreeGameId) 
                {
                    loc1 = true;
                    this._rejectTickBox.disable();
                }
                if (loc1 == false) 
                {
                    this._rejectTickBox.enable();
                    if (this._conductor.freeGamesData.selected.rejected) 
                    {
                        this._rejectTickBox.check();
                    }
                    else 
                    {
                        this._rejectTickBox.uncheck();
                    }
                }
                if (this._conductor.freeGamesData.selected.rejected) 
                {
                    this.hideButtonsForReject();
                }
                else 
                {
                    this.showButtonsForReject();
                }
            }
            return;
        }

        internal function setCreditInfoText(arg1:int=0):void
        {
            var loc1:*=null;
            if (arg1 != 0) 
            {
                loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("CREDIT_TYPE_BONUS");
            }
            else 
            {
                loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("CREDIT_TYPE_CASH");
            }
            var loc2:*=this._langText.getChildByName("BalanceType") as flash.text.TextField;
            loc2.text = loc1;
            return;
        }

        internal function setOfferName(arg1:flash.text.TextField, arg2:String):void
        {
            arg1.text = arg2;
            return;
        }

        internal function setFreeGamesRemaining(arg1:int):void
        {
            this._freeGamesRemaining.text = arg1.toString();
            return;
        }

        internal function setReferenceText(arg1:String):void
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("REFERENCE_INFO");
            loc1 = mgs.aurora.games.common.components.utils.StringFormatting.insertArgs(loc1, arg1);
            var loc2:*=this._langText.getChildByName("RefNumber") as flash.text.TextField;
            loc2.htmlText = loc1;
            return;
        }

        internal function setExpiryInfoText(arg1:String):void
        {
            var endDate:String;
            var expiryDate:Array;
            var matches:Array;
            var year:int;
            var month:int;
            var day:int;
            var time:String;
            var dateTxt:String;
            var expiryInfo:String;
            var expiryText:flash.text.TextField;

            var loc1:*;
            expiryText = null;
            endDate = arg1;
            expiryDate = endDate.split(" ");
            matches = expiryDate[0].match(new RegExp("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)"));
            year = int(matches[1]);
            month = int(matches[2]);
            day = int(matches[3]);
            time = expiryDate[1].toString();
            dateTxt = day + " " + mgs.aurora.games.common.components.utils.Toolbox.getMonths(month) + " " + year;
            expiryInfo = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("EXPIRY_INFO");
            expiryInfo = mgs.aurora.games.common.components.utils.StringFormatting.insertArgs(expiryInfo, dateTxt, expiryDate[1]);
            try 
            {
                expiryText = this._langText.getChildByName("ExpiryInfo") as flash.text.TextField;
                expiryText.htmlText = expiryInfo;
            }
            catch (e:TypeError)
            {
                _trace("No Textfield [ExpiryInfo] found. Check your Art setup. -" + toString(), "error", this, 16711680);
            }
            return;
        }

        internal function setOfferInfoText(arg1:int=0, arg2:Number=0, arg3:int=0, arg4:Number=0):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(Number(arg2));
            if (this._conductor.settings.wayWin) 
            {
                loc2 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("OFFER_INFO_WAYWINS");
                loc2 = mgs.aurora.games.common.components.utils.StringFormatting.insertArgs(loc2, arg1, loc1);
            }
            else 
            {
                loc2 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("OFFER_INFO_WINLINES");
                loc2 = mgs.aurora.games.common.components.utils.StringFormatting.insertArgs(loc2, arg3, arg4, loc1);
            }
            var loc3:*;
            (loc3 = this._langText.getChildByName("FreeGameInfo") as flash.text.TextField).htmlText = loc2;
            return;
        }

        internal function setNoticeText(arg1:String):void
        {
            var text:String;
            var noticeInfo:String;
            var noticeText:flash.text.TextField;

            var loc1:*;
            noticeText = null;
            text = arg1;
            noticeInfo = text;
            try 
            {
                noticeText = this._langText.getChildByName("Notice") as flash.text.TextField;
                noticeText.htmlText = text;
            }
            catch (e:TypeError)
            {
                _trace("No Textfield [Notice] found. Check your Art setup. -" + toString(), "error", this, 16711680);
            }
            return;
        }

        internal function setTotalWinnings(arg1:Number):void
        {
            var totalWon:Number;
            var winDisplay:flash.display.MovieClip;
            var value:String;

            var loc1:*;
            winDisplay = null;
            value = null;
            totalWon = arg1;
            try 
            {
                winDisplay = this._langText.getChildByName("winDisplay") as flash.display.MovieClip;
                value = totalWon.toString();
                if (totalWon > 0) 
                {
                    winDisplay.gotoAndStop("Show");
                    this._totalWon.text = value.toString();
                }
                else 
                {
                    this._totalWon.text = " ";
                    winDisplay.gotoAndStop("Hide");
                }
            }
            catch (e:TypeError)
            {
                _trace("ERROR: Error while setting the total win value . -" + toString(), "error", this, 16711680);
            }
            return;
        }

        internal function updateSummaryScreen(arg1:String):void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                var loc2:*=arg1;
                switch (loc2) 
                {
                    case SCREEN_MAIN:
                    {
                        this._conductor.freeGamesData.updateData();
                        loc1 = this._conductor.freeGamesData.selected;
                        this.setOfferName(this._langText.getChildByName("name1") as flash.text.TextField, loc1.name1);
                        this.setOfferName(this._langText.getChildByName("name2") as flash.text.TextField, loc1.name2);
                        this.setCreditInfoText(loc1.creditType);
                        this.setOfferInfoText(int(this._conductor.settings.wayWinType), loc1.defaultBet.chipSize, loc1.defaultBet.lines.length, loc1.defaultBet.coins);
                        this.setExpiryInfoText(loc1.endDate);
                        this.setReferenceText(loc1.uniqueId);
                        this.setFreeGamesRemaining(loc1.gamesRemaining);
                        this.enableRejectTickBox();
                        this.updateOfferScroller();
                        break;
                    }
                    case SCREEN_GAME_IN_PROGRESS:
                    {
                        this.setOfferName(this._langText.getChildByName("name1") as flash.text.TextField, this._conductor.freeGamesData.activeGame.name1);
                        this.setOfferName(this._langText.getChildByName("name2") as flash.text.TextField, this._conductor.freeGamesData.activeGame.name2);
                        this.setFreeGamesRemaining(this._conductor.freeGamesData.activeGame.gamesRemaining);
                        break;
                    }
                    case SCREEN_BASE_IN_PROGRESS:
                    {
                        this.setOfferName(this._langText.getChildByName("name1") as flash.text.TextField, this._conductor.freeGamesData.selected.name1);
                        this.setOfferName(this._langText.getChildByName("name2") as flash.text.TextField, this._conductor.freeGamesData.selected.name2);
                        this.setFreeGamesRemaining(this._conductor.freeGamesData.selected.gamesRemaining);
                        break;
                    }
                    case SCREEN_COMPLETED:
                    {
                        this.setReferenceText(this._conductor.freeGamesData.activeGame.uniqueId);
                        this.setFreeGamesRemaining(this._conductor.freeGamesData.activeGame.gamesPlayed);
                        this.setTotalWinnings(Number(this._conductor.freeGamesData.activeGame.sumWinnings));
                        break;
                    }
                    case SCREEN_EXIT:
                    {
                        this.setNoticeText(mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("REMAINING_GAMES"));
                        this.setExpiryInfoText(this._conductor.freeGamesData.activeGame.endDate);
                        this.setReferenceText(this._conductor.freeGamesData.activeGame.uniqueId);
                        this.setFreeGamesRemaining(this._conductor.freeGamesData.activeGame.gamesRemaining);
                        this.setTotalWinnings(Number(this._conductor.freeGamesData.activeGame.sumWinnings));
                        break;
                    }
                    case SCREEN_LAST_GAME_EXIT:
                    {
                        this.setFreeGamesRemaining(this._conductor.freeGamesData.activeGame.gamesPlayed);
                        this.setTotalWinnings(Number(this._conductor.freeGamesData.activeGame.sumWinnings));
                        this.setReferenceText(this._conductor.freeGamesData.activeGame.uniqueId);
                        break;
                    }
                }
            }
            return;
        }

        internal function exitGame():void
        {
            mgs.aurora.games.framework.Broker.instance.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.SoundServer.PUBLISHER_NAME);
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent;
            loc1.exit = true;
            return;
        }

        internal function previousOffer():void
        {
            if (this.isReady) 
            {
                this._conductor.freeGamesData.previous();
                this.updateSummaryScreen(SCREEN_MAIN);
                syndicate(this, SERVICE_SELECT_PREV);
            }
            return;
        }

        internal function nextOffer():void
        {
            if (this.isReady) 
            {
                this._conductor.freeGamesData.next();
                this.updateSummaryScreen(SCREEN_MAIN);
                syndicate(this, SERVICE_SELECT_NEXT);
            }
            return;
        }

        internal function onRejectSelect(arg1:mgs.aurora.games.common.components.ui.components.button.ArtCheckBox):void
        {
            if (this.isReady) 
            {
                if (arg1.checked != true) 
                {
                    if (this._conductor.freeGamesData.selected.rejected) 
                    {
                        this._conductor.freeGamesData.selected.rejected = false;
                    }
                    this.showButtonsForReject();
                }
                else 
                {
                    this._conductor.freeGamesData.selected.rejected = true;
                    this.hideButtonsForReject();
                }
            }
            return;
        }

        internal function help():void
        {
            if (this.isReady) 
            {
                syndicate(this, SERVICE_HELP);
                mgs.aurora.games.framework.AuroraReference.aurora.help.launch();
            }
            return;
        }

        internal function rejectFreeGames():void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                loc1 = this._conductor.freeGamesData.removeRejectedFreeGames();
                syndicate(this, SERVICE_REJECT_FREEGAME, new mgs.aurora.games.framework.TransportLayer(loc1));
                syndicate(this, SERVICE_CLOSE);
                this.removeSummaryScreen();
                if (this._conductor.freeGamesData.isFreeGameInProgress) 
                {
                    this.showGameInProgressScreen();
                }
                else 
                {
                    syndicate(this, SERVICE_USE_LATER);
                }
            }
            return;
        }

        internal function useNow():void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameInProgress) 
                {
                    if (this._conductor.freeGamesData.activeGame.uniqueId == this._conductor.freeGamesData.selected.uniqueId || !(this._conductor.freeGamesData.activeGame.uniqueId == this._conductor.response.freeGames.currentGame.uniqueId) && this._conductor.response.freeGames.currentGame.gamesRemaining == 0 && this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        syndicate(this, SERVICE_USE_NOW);
                        this.removeSummaryScreen(SCREEN_MAIN);
                    }
                    else 
                    {
                        this.removeSummaryScreen(SCREEN_MAIN);
                        this.showGameInProgressScreen();
                        syndicate(this, SERVICE_USE_NOW);
                    }
                }
                else if (this._conductor.freeGamesData.gameInProgress && !this._conductor.freeGamesData.previousFreeGameTest) 
                {
                    this.removeSummaryScreen(SCREEN_MAIN);
                    this.showBaseInProgressScreen();
                    syndicate(this, SERVICE_USE_NOW);
                }
                else 
                {
                    syndicate(this, SERVICE_USE_NOW);
                    this.removeSummaryScreen(SCREEN_MAIN);
                }
                loc1 = this._conductor.freeGamesData.removeRejectedFreeGames();
                if (loc1.length > 0) 
                {
                    syndicate(this, SERVICE_REJECT_FREEGAME, new mgs.aurora.games.framework.TransportLayer(loc1));
                }
            }
            return;
        }

        internal function useLater():void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                loc1 = this._conductor.freeGamesData.removeRejectedFreeGames();
                if (loc1.length > 0) 
                {
                    syndicate(this, SERVICE_REJECT_FREEGAME, new mgs.aurora.games.framework.TransportLayer(loc1));
                }
                syndicate(this, SERVICE_USE_LATER);
                this.removeSummaryScreen(SCREEN_MAIN);
            }
            return;
        }

        internal function consoleUseLater():void
        {
            if (this.isReady) 
            {
                this.removeSummaryScreen(SCREEN_EXIT);
                syndicate(this, SERVICE_BACK_TO_GAME);
            }
            return;
        }

        internal function getButton(arg1:String):flash.display.MovieClip
        {
            var id:String;
            var button:flash.display.MovieClip;

            var loc1:*;
            button = null;
            id = arg1;
            try 
            {
                button = this._languageLayer.getChildByName(id) as flash.display.MovieClip;
            }
            catch (e:TypeError)
            {
                _trace("No button [" + id + "] found. Check your Art setup. -" + toString(), "error", this, 16711680);
            }
            return button;
        }

        internal function showFreeGamesCompletedScreen():void
        {
            this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Summary_Completed")) as flash.display.MovieClip;
            this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
            this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
            this._btnContinue = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_BACK_TO_GAME), this.endFreeGames, true, "buttonHitArea");
            this._freeGamesRemaining.addTo(this._langText.getChildByName("freeGamesRemaining") as flash.display.MovieClip);
            this._totalWon.addTo(this._langText.getChildByName("Num_TotalWon") as flash.display.MovieClip);
            this.setEngineBadge(this._languageLayer);
            syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_COMPLETED));
            this.updateSummaryScreen(SCREEN_COMPLETED);
            return;
        }

        internal function showFreeGameLastGame():void
        {
            var loc1:*="Summary_Last_Game";
            this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc1)) as flash.display.MovieClip;
            this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
            this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
            if (this._btnClose != null) 
            {
                this._btnClose.dispose();
            }
            this._btnClose = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_CLOSE), this.exitGame, true, "buttonHitArea");
            this._freeGamesRemaining.addTo(this._langText.getChildByName("freeGamesRemaining") as flash.display.MovieClip);
            this._totalWon.addTo(this._langText.getChildByName("Num_TotalWon") as flash.display.MovieClip);
            this.updateSummaryScreen(SCREEN_LAST_GAME_EXIT);
            this.setEngineBadge(this._languageLayer);
            syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_LAST_GAME_EXIT));
            return;
        }

        internal function showFreeGameExitScreen():void
        {
            var loc1:*="Summary_SummaryRemaining";
            this._currentScreen = mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc1)) as flash.display.MovieClip;
            this._languageLayer = this._currentScreen.getChildByName("op") as flash.display.MovieClip;
            this._langText = this._languageLayer.getChildByName("LangText") as flash.display.MovieClip;
            if (this._btnClose != null) 
            {
                this._btnClose.dispose();
            }
            this._btnClose = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_CLOSE), this.exitGame, true, "buttonHitArea");
            if (this._btnBackToGame != null) 
            {
                this._btnBackToGame.dispose();
            }
            this._btnBackToGame = new mgs.aurora.games.common.components.ui.components.button.ArtButton(this.getButton(this.BUTTON_BACK_TO_GAME), this.consoleUseLater, true, "buttonHitArea");
            if (this._readyExit) 
            {
                this._btnBackToGame.hide(true);
            }
            else 
            {
                this._btnClose.hide(true);
            }
            this._freeGamesRemaining.addTo(this._langText.getChildByName("freeGamesRemaining") as flash.display.MovieClip);
            this._totalWon.addTo(this._langText.getChildByName("Num_TotalWon") as flash.display.MovieClip);
            this.updateSummaryScreen(SCREEN_EXIT);
            this.setEngineBadge(this._languageLayer);
            if (this._readyExit) 
            {
                syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_LAST_GAME_EXIT));
            }
            else 
            {
                syndicate(this, SERVICE_SCREEN_OPEN, new mgs.aurora.games.framework.TransportLayer(SCREEN_EXIT));
            }
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_USE_LATER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_USE_NOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SCREEN_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SCREEN_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REJECT_FREEGAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BACK_TO_GAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HELP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONTINUE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SWITCH_GAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONTINUE_BASE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SELECT_NEXT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SELECT_PREV));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLOSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DISCARD_OFFER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DISCARD_OFFER_SCREEN_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DISCARD_OFFER_SCREEN_CLOSED));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDiscardOffer, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DISCARD_OFFER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleComplete, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onExit, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_REQUEST_EXIT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCounterCompleted, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigDone, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_FREEGAMES);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfigDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConfigXML = true;
            this._configXML = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            var loc1:*=null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._gamesRemainingX = Number(this._configXML.gamesRemaining.@x);
            this._gamesRemainingY = Number(this._configXML.gamesRemaining.@y);
            this._fgRemainingFontLabelLinkage = String(this._configXML.fonts.@LargeRemainingFontLabelLinkage);
            this._totalWinFontLabelLinkage = String(this._configXML.fonts.@totalWinFontLabelLinkage);
            this._freeGamesRemaining = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._fgRemainingFontLabelLinkage);
            this._totalWon = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._totalWinFontLabelLinkage);
            if (this._conductor.freeGamesData.hasFreeGames) 
            {
                loc1 = this._conductor.freeGamesData;
                if (loc1.isFreeGameActive && loc1.lastGamePlayedStillAvailable) 
                {
                    loc1.SetSelectedToLastPlayed();
                    this.showFreeGameInProgress();
                }
                else 
                {
                    this.showGeneralFreeGameSummary();
                }
            }
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    if (this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT) 
                    {
                        if (this._conductor.freeGamesData.activeGame.gamesRemaining == 0 && this._conductor.response.slot.win == 0) 
                        {
                            new org.as3lib.kitchensync.action.KSFunction(this.showFreeGamesCompletedScreen, this._conductor.settings.freeGamesSummaryDelay).start();
                        }
                    }
                }
            }
            return;
        }

        internal function onCounterCompleted(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    if (this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT) 
                    {
                        if (this._conductor.freeGamesData.activeGame.gamesRemaining == 0) 
                        {
                            new org.as3lib.kitchensync.action.KSFunction(this.showFreeGamesCompletedScreen, this._conductor.settings.freeGamesSummaryDelay).start();
                        }
                    }
                }
            }
            return;
        }

        internal function onExit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._readyExit = true;
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                if (org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime > 0) 
                {
                    org.as3lib.kitchensync.core.Synchronizer.getInstance().core.stop();
                }
                mgs.aurora.games.framework.Broker.instance.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME);
                mgs.aurora.games.framework.Broker.instance.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME);
                mgs.aurora.games.framework.Broker.instance.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME);
                mgs.aurora.games.framework.Broker.instance.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME);
                mgs.aurora.games.framework.Broker.instance.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.RequestServer.PUBLISHER_NAME);
                if (this._conductor.freeGamesData.activeGame.gamesRemaining != 0) 
                {
                    if (this._conductor.freeGamesData.activeGame.gamesRemaining > 0) 
                    {
                        this.showFreeGameExitScreen();
                    }
                    else 
                    {
                        this.exitGame();
                    }
                }
                else if (this._conductor.freeGamesData.gameInProgress) 
                {
                    this.showFreeGameLastGame();
                }
                else 
                {
                    this.showFreeGameExitScreen();
                }
            }
            return;
        }

        internal function continueBaseGame():void
        {
            syndicate(this, SERVICE_CONTINUE_BASE);
            this.removeSummaryScreen(SCREEN_BASE_IN_PROGRESS);
            return;
        }

        internal function switchToGameInWaiting():void
        {
            syndicate(this, SERVICE_SWITCH_GAME);
            return;
        }

        internal function endFreeGames():void
        {
            if (this.isReady) 
            {
                this.removeSummaryScreen(SCREEN_COMPLETED);
                if (this._conductor.freeGamesData.gameInWaitingId == null) 
                {
                    this._conductor.freeGamesData.updateData();
                    if (this._conductor.freeGamesData.numberOfAvailableGames > 0 && !(this._conductor.freeGamesData.selected == null)) 
                    {
                        this.showGeneralFreeGameSummary();
                    }
                    else 
                    {
                        syndicate(this, SERVICE_BACK_TO_GAME);
                    }
                }
                else 
                {
                    syndicate(this, SERVICE_BACK_TO_GAME);
                }
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasView;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._btnUseLater.dispose();
                this._btnUseNow.dispose();
                this._btnClose.dispose();
                this._btnNext.dispose();
                this._btnPrev.dispose();
                this._btnBackToGame.dispose();
                this._btnHelp.dispose();
                this._btnContinue.dispose();
                this._rejectTickBox.dispose();
                this._btnUseLater = null;
                this._btnUseNow = null;
                this._btnClose = null;
                this._btnNext = null;
                this._btnPrev = null;
                this._btnBackToGame = null;
                this._btnHelp = null;
                this._btnContinue = null;
                this._rejectTickBox = null;
                this._freeGamesRemaining = null;
                this._totalWon = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        internal const BUTTON_REJECT:String="reject";

        internal const BUTTON_DISCARD:String="Button_Discard";

        internal const BUTTON_DISCARD_CANCEL:String="Button_Cancel";

        public static const SERVICE_SWITCH_GAME:String="SWITCH_GAME";

        internal const BUTTON_USE_LATER:String="UseLater";

        internal const BUTTON_USE_NOW:String="UseNow";

        internal const BUTTON_CLOSE:String="Close";

        internal const BUTTON_CONTINUE:String="Continue";

        internal const BUTTON_BACK_TO_GAME:String="BackToGame";

        internal const BUTTON_NEXT:String="moveRight";

        internal const BUTTON_PREVIOUS:String="moveLeft";

        internal const BUTTON_HELP:String="help";

        public static const PUBLISHER_NAME:String="AGENT_FREEGAME_SUMMARY";

        public static const SERVICE_USE_LATER:String="USE_LATER";

        public static const SERVICE_USE_NOW:String="USE_NOW";

        public static const SERVICE_SCREEN_OPEN:String="SCREEN_OPEN";

        public static const SERVICE_SCREEN_CLOSED:String="SCREEN_CLOSED";

        public static const SERVICE_REJECT_FREEGAME:String="REJECT_FREEGAME";

        public static const SERVICE_BACK_TO_GAME:String="BACK_TO_GAME";

        public static const SERVICE_CONTINUE:String="CONTINUE";

        public static const SERVICE_CONTINUE_BASE:String="CONTINUE_BASE";

        public static const SERVICE_SELECT_NEXT:String="SELECT_NEXT";

        public static const SERVICE_SELECT_PREV:String="SELECT_PREV";

        public static const SERVICE_CLOSE:String="CLOSE";

        public static const SERVICE_HELP:String="HELP";

        public static const SERVICE_DISCARD_OFFER:String="SERVICE_DISCARD_OFFER";

        public static const SERVICE_DISCARD_OFFER_SCREEN_OPEN:String="SERVICE_DISCARD_OFFER_SCREEN_OPEN";

        public static const SERVICE_DISCARD_OFFER_SCREEN_CLOSED:String="SERVICE_DISCARD_OFFER_SCREEN_CLOSED";

        public static const SCREEN_EXIT:String="FreeGameExitScreen";

        public static const SCREEN_LAST_GAME_EXIT:String="FreeGameLastGameExit";

        public static const SCREEN_GAME_IN_PROGRESS:String="FreeGameGameInProgressScreen";

        public static const SCREEN_BASE_IN_PROGRESS:String="FreeGameBaseInProgressScreen";

        public static const SCREEN_COMPLETED:String="FreeGameCompletedScreen";

        public static const SCREEN_MAIN:String="FreeGameMainScreen";

        public static const DISCARD_OFFER_DIALOG:String="Discard_Offer_Dialog";

        internal var _totalWinFontLabelLinkage:String;

        internal var _readyExit:Boolean=false;

        internal var _languageLayer:flash.display.MovieClip;

        internal var _langText:flash.display.MovieClip;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _rejectTickBox:mgs.aurora.games.common.components.ui.components.button.ArtCheckBox;

        internal var _btnContinue:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnHelp:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnBackToGame:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnPrev:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnNext:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnClose:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnUseNow:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _totalWon:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _btnUseLater:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _gamesRemainingY:Number;

        internal var _gamesRemainingX:Number;

        internal var _configXML:XMLList;

        internal var _hasConfigXML:Boolean=false;

        internal var _hasView:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _isConfig:Boolean=false;

        internal var _currentScreen:flash.display.MovieClip;

        internal var _freeGamesRemaining:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _layer:String;

        internal var _fgRemainingFontLabelLinkage:String;

        internal var _btnDiscardCancel:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _btnDiscard:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _discardOfferScreen:flash.display.MovieClip;
    }
}


//            class FreeSpinSummaryAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class FreeSpinSummaryAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function FreeSpinSummaryAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent");
            return;
        }

        protected function closeSummary(arg1:flash.events.TimerEvent):void
        {
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.closeSummary);
            this._timer = null;
            syndicate(this, SERVICE_SUMMARY_AUTO_CLOSED);
            this.remove();
            return;
        }

        protected function remove():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            if (this.isReady) 
            {
                if (this.currentData.movieClip.parent != null) 
                {
                    syndicate(this, SERVICE_START_CLOSE);
                    caurina.transitions.Tweener.addTween(this.currentData.movieClip, {"alpha":0, "time":this.currentData.summaryScreenFadeOutTime, "onComplete":this.removeSummary, "transition":this.currentData.summaryScreenFadeOutEasing});
                }
                if (this.animationCharacters) 
                {
                    loc1 = {"alpha":0, "time":this.currentData.summaryScreenFadeOutTime};
                    loc2 = 0;
                    loc3 = this.animationCharacters.length;
                    while (loc2 < loc3) 
                    {
                        caurina.transitions.Tweener.addTween(this.animationCharacters[loc2], loc1);
                        ++loc2;
                    }
                }
            }
            return;
        }

        protected function removeSummary():void
        {
            var loc1:*=0;
            var loc2:*=0;
            this.currentData.summaryBtn.hide(true);
            syndicate(this, SERVICE_SUMMARY_CLOSED);
            if (this.currentData.movieClip.parent != null) 
            {
                this.currentData.movieClip.parent.removeChild(this.currentData.movieClip);
            }
            if (this.animationCharacters) 
            {
                loc1 = 0;
                loc2 = this.animationCharacters.length;
                while (loc1 < loc2) 
                {
                    this.animationCharacters[loc1].parent.removeChild(this.animationCharacters[loc1]);
                    this.animationCharacters[loc1] = null;
                    ++loc1;
                }
                this.animationCharacters = null;
            }
            this.currentData.movieClip.alpha = 1;
            return;
        }

        protected function setMoniesValue(arg1:Number):void
        {
            if (this.currentData.totalWin.displayObject.parent == null) 
            {
                this.currentData.totalWin.addTo(this.currentData.movieClip.getChildByName("num") as flash.display.MovieClip);
            }
            this.currentData.totalWin.text = arg1.toString();
            return;
        }

        internal function onClick():void
        {
            syndicate(mgs.aurora.games.logicBlocks.publishers.ConsoleServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME)), mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CLICK, new mgs.aurora.games.framework.TransportLayer("freespin_backtogame"));
            this.currentData.summaryBtn.disable();
            syndicate(this, SERVICE_SUMMARY_AUTO_CLOSED);
            this.remove();
            return;
        }

        internal function startCharacterAnimations():void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (this.currentData.characterAnimationSettings.length == 0) 
            {
                return;
            }
            var loc1:*=this.currentData.characterAnimationSettings.length;
            this.animationCharacters = new Vector.<flash.display.MovieClip>(loc1, true);
            var loc4:*=0;
            while (loc4 < loc1) 
            {
                loc3 = this.currentData.characterAnimationSettings[loc4];
                loc2 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc3.resourceId);
                loc2.alpha = loc3.startAlpha;
                loc2.x = loc3.startPosition.x;
                loc2.y = loc3.startPosition.y;
                mgs.aurora.games.framework.StageReference.getLevel(loc3.layerName).addChild(loc2);
                caurina.transitions.Tweener.addTween(loc2, {"alpha":loc3.endAlpha, "x":loc3.endPosition.x, "y":loc3.endPosition.y, "delay":loc3.delayToStart, "time":loc3.duration, "transition":loc3.easing, "onComplete":this.cleanupTween, "onCompleteParams":[loc2]});
                this.animationCharacters[loc4] = loc2;
                ++loc4;
            }
            return;
        }

        protected function get currentData():mgs.aurora.games.common.dataTypes.FreeSpinsSummaryData
        {
            return this._summaryData[this._currentSummaryIndex];
        }

        public function get canShow():Boolean
        {
            var loc1:*=false;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                {
                    loc1 = true;
                    break;
                }
            }
            return this._isViewReady && loc1 && this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE && !(this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS);
        }

        public function get canDo():Boolean
        {
            return !this._conductor.settings.autoCloseFreeSpinSummary && this.isReady && this._conductor.response.player.totalWin > 0;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._isViewReady && this._canConfig;
        }

        protected function cleanupArt():void
        {
            var loc1:*=0;
            while (loc1 < this._summaryData.length) 
            {
                this._summaryData[loc1].cleanup();
                ++loc1;
            }
            return;
        }

        protected function get hasEntryTransitions():Boolean
        {
            return !(this._entryTransitions == null);
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this.remove();
                this._timer = null;
                this.cleanupArt();
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SUMMARY_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_CLOSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SUMMARY_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SUMMARY_AUTO_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_FREESPINS_SUMMARY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLoaded, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinsComplete, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTransitionComplete, mgs.aurora.games.logicBlocks.agents.TransitionAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_COMPLETE);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._isViewReady) 
            {
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._isViewReady = true;
                    }
                    ++loc3;
                }
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._xmlConfig = arg1.data;
            this._canConfig = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            var list:XMLList;
            var len:int;
            var node:XML;
            var assocViews:Array;
            var transition_id:String;
            var i:int;

            var loc1:*;
            node = null;
            assocViews = null;
            transition_id = null;
            i = 0;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            list = this._xmlConfig.summary;
            len = list.length();
            if (len > 0) 
            {
                this._summaryData = new Vector.<mgs.aurora.games.common.dataTypes.FreeSpinsSummaryData>(len);
                i = 0;
                while (i < len) 
                {
                    this._summaryData[i] = new mgs.aurora.games.common.dataTypes.FreeSpinsSummaryData(list[i], this.onClick);
                    ++i;
                }
            }
            list = this._xmlConfig.transitions.entry.transition;
            if (list && list.length() > 0) 
            {
                this._entryTransitions = new flash.utils.Dictionary();
                var loc2:*=0;
                var loc3:*=list;
                for each (node in loc3) 
                {
                    var loc5:*=0;
                    var loc6:*=node.setting;
                    var loc4:*=new XMLList("");
                    for each (var loc7:* in loc6) 
                    {
                        var loc8:*;
                        with (loc8 = loc7) 
                        {
                            if (@id == "transitionId") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    transition_id = loc4.@val.toString();
                    loc5 = 0;
                    loc6 = node.setting;
                    loc4 = new XMLList("");
                    for each (loc7 in loc6) 
                    {
                        with (loc8 = loc7) 
                        {
                            if (@id == "associatedViews") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    assocViews = loc4.@val.toString().split(",");
                    i = 0;
                    len = assocViews.length;
                    while (i < len) 
                    {
                        this._entryTransitions[assocViews[i]] = transition_id;
                        ++i;
                    }
                }
            }
            list = this._xmlConfig.transitions.exit.transition;
            if (list && list.length() > 0) 
            {
                this._exitTransitions = new flash.utils.Dictionary();
                loc2 = 0;
                loc3 = list;
                for each (node in loc3) 
                {
                    loc5 = 0;
                    loc6 = node.setting;
                    loc4 = new XMLList("");
                    for each (loc7 in loc6) 
                    {
                        with (loc8 = loc7) 
                        {
                            if (@id == "transitionId") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    transition_id = loc4.@val.toString();
                    loc5 = 0;
                    loc6 = node.setting;
                    loc4 = new XMLList("");
                    for each (loc7 in loc6) 
                    {
                        with (loc8 = loc7) 
                        {
                            if (@id == "associatedViews") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    assocViews = loc4.@val.toString().split(",");
                    i = 0;
                    len = assocViews.length;
                    while (i < len) 
                    {
                        this._exitTransitions[assocViews[i]] = transition_id;
                        ++i;
                    }
                }
            }
            this._xmlConfig = null;
            if (this.isReady && this.canShow) 
            {
                this.updateSummary();
            }
            return;
        }

        protected function onFreeSpinsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE && this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
            {
                syndicate(this, SERVICE_SUMMARY_AUTO_CLOSED);
                syndicate(this, SERVICE_START_CLOSE);
                this.removeSummary();
            }
            else 
            {
                this.updateSummary();
            }
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY || this._conductor.state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY || this._conductor.state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE || this._conductor.state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE) 
                {
                    this.updateSummary();
                }
                else if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    this.remove();
                }
            }
            return;
        }

        protected function updateSummary():void
        {
            var loc1:*=false;
            if (this.isReady) 
            {
                this.SetCurrentSummaryData();
                if (this.currentData == null) 
                {
                    throw new Error("Failed to set current summary data in FreeSpinSummaryAgent");
                }
                this.currentData.init();
                if (this.canShow) 
                {
                    this.mustEnableButtonsAndSyndicateSummaryOpen = false;
                    if (this._conductor.settings.autoCloseFreeSpinSummary && !(this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH)) 
                    {
                        this._timer = new flash.utils.Timer(this._conductor.settings.autoCloseFreeSpinSummaryTimer, 1);
                        this._timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.closeSummary);
                        this._timer.start();
                    }
                    if (this.currentData.movieClip.parent != mgs.aurora.games.framework.StageReference.getLevel(this.currentData.level)) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(this.currentData.level).addChild(this.currentData.movieClip);
                        this.setMoniesValue(this._conductor.response.player.totalWin);
                        if (this._conductor.options.displayAsCoins) 
                        {
                            (this.currentData.movieClip.getChildByName("coinsMC") as flash.display.MovieClip).gotoAndStop("_active");
                        }
                        else 
                        {
                            (this.currentData.movieClip.getChildByName("coinsMC") as flash.display.MovieClip).gotoAndStop("_inactive");
                            this.currentData.totalWin.x = this.currentData.creditFormatXOffset;
                            this.currentData.totalWin.y = this.currentData.creditFormatYOffset;
                        }
                        loc1 = this._entryTransitions && this._entryTransitions[this._conductor.view.view];
                        if (this._conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                        {
                            if (loc1 || this.currentData.characterAnimationSettings) 
                            {
                                if (loc1) 
                                {
                                    this.isWaitingForTransitionToReturn = true;
                                    syndicate(this, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT, new mgs.aurora.games.framework.TransportLayer(this._entryTransitions[this._conductor.view.view]));
                                }
                                if (this.currentData.characterAnimationSettings) 
                                {
                                    this.startCharacterAnimations();
                                }
                            }
                            else 
                            {
                                this.currentData.movieClip.alpha = 0;
                                caurina.transitions.Tweener.addTween(this.currentData.movieClip, {"alpha":1, "time":this.currentData.summaryScreenFadeInTime});
                            }
                        }
                        else 
                        {
                            this.currentData.movieClip.alpha = 1;
                            if (this.currentData.characterAnimationSettings) 
                            {
                                this.placeCompletedCharacterAnimations();
                            }
                        }
                        if (this._conductor.settings.autoCloseFreeSpinSummary && !(this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) || !this.currentData.hasOwnBtn) 
                        {
                            return;
                        }
                        this.currentData.movieClip.mouseChildren = false;
                        if (this.currentData.btnMovie.parent != this.currentData.movieClip) 
                        {
                            this.currentData.movieClip.addChild(this.currentData.btnMovie);
                        }
                        this.currentData.summaryBtn.hide(false);
                        if (!loc1 || this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                        {
                            this.enableButtons();
                            syndicate(this, SERVICE_SUMMARY_OPEN);
                        }
                        else 
                        {
                            this.mustEnableButtonsAndSyndicateSummaryOpen = true;
                        }
                    }
                }
                else if (this.currentData.movieClip.parent == mgs.aurora.games.framework.StageReference.getLevel(this.currentData.level)) 
                {
                    syndicate(this, SERVICE_START_CLOSE);
                    caurina.transitions.Tweener.addTween(this.currentData.movieClip, {"alpha":0, "time":this.currentData.summaryScreenFadeOutTime, "onComplete":this.removeSummary, "transition":this.currentData.summaryScreenFadeOutEasing});
                }
            }
            return;
        }

        protected function get hasExitTransitions():Boolean
        {
            return !(this._exitTransitions == null);
        }

        internal function placeCompletedCharacterAnimations():void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (this.currentData.characterAnimationSettings.length == 0) 
            {
                return;
            }
            var loc1:*=this.currentData.characterAnimationSettings.length;
            this.animationCharacters = new Vector.<flash.display.MovieClip>(loc1, true);
            var loc4:*=0;
            while (loc4 < loc1) 
            {
                loc3 = this.currentData.characterAnimationSettings[loc4];
                loc2 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc3.resourceId);
                loc2.alpha = loc3.endAlpha;
                loc2.x = loc3.endPosition.x;
                loc2.y = loc3.endPosition.y;
                mgs.aurora.games.framework.StageReference.getLevel(loc3.layerName).addChild(loc2);
                this.animationCharacters[loc4] = loc2;
                ++loc4;
            }
            return;
        }

        internal function cleanupTween(arg1:flash.display.MovieClip):void
        {
            caurina.transitions.Tweener.removeTweens(arg1);
            return;
        }

        internal function enableButtons():void
        {
            this.currentData.summaryBtn.enable();
            this.currentData.movieClip.mouseChildren = true;
            return;
        }

        internal function onTransitionComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isWaitingForTransitionToReturn) 
            {
                return;
            }
            this.isWaitingForTransitionToReturn = false;
            if (this.mustEnableButtonsAndSyndicateSummaryOpen) 
            {
                this.mustEnableButtonsAndSyndicateSummaryOpen = false;
                this.enableButtons();
                syndicate(this, SERVICE_SUMMARY_OPEN);
            }
            return;
        }

        protected function SetCurrentSummaryData():void
        {
            var loc1:*=0;
            while (loc1 < this._summaryData.length) 
            {
                if (this._summaryData[loc1].activeInView(this._conductor.view.view)) 
                {
                    this._currentSummaryIndex = loc1;
                    break;
                }
                ++loc1;
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_FREESPIN_SUMMARY";

        public static const SERVICE_SUMMARY_OPEN:String="SUMMARY_OPEN";

        public static const SERVICE_START_CLOSE:String="SERVICE_START_CLOSE";

        public static const SERVICE_SUMMARY_CLOSED:String="SUMMARY_CLOSED";

        public static const SERVICE_SUMMARY_AUTO_CLOSED:String="SUMMARY_AUTO_CLOSED";

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _isViewReady:Boolean=false;

        protected var _canConfig:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _xmlConfig:XMLList;

        protected var _currentSummaryIndex:int;

        protected var _summaryData:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.FreeSpinsSummaryData>;

        internal var _entryTransitions:flash.utils.Dictionary;

        internal var _exitTransitions:flash.utils.Dictionary;

        internal var mustEnableButtonsAndSyndicateSummaryOpen:Boolean;

        internal var animationCharacters:__AS3__.vec.Vector.<flash.display.MovieClip>;

        protected var isWaitingForTransitionToReturn:Boolean;

        protected var _timer:flash.utils.Timer;
    }
}


//            class GameEngineRegistered
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class GameEngineRegistered extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function GameEngineRegistered()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents .GameEngineRegistered");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REGISTERED));
            syndicate(this, SERVICE_REGISTERED);
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_ENGINE_REGISTERED";

        public static const SERVICE_REGISTERED:String="ENGINE_REGISTERED";
    }
}


//            class GameStateAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class GameStateAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function GameStateAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.GameStateAgent");
            this._currentState = STATE_PRELOAD;
            return;
        }

        internal function bonusSuspend():void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.slot.state;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                {
                    this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS : SLOT_STARTING_FREESPINS;
                    break;
                }
                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                {
                    if (this._response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS : SLOT_FREESPINS;
                    }
                    else 
                    {
                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_REFRESH : SLOT_FREESPINS_REFRESH;
                    }
                    break;
                }
                default:
                {
                    this._currentState = this._freegames ? FREEGAME_BONUS_SUSPEND : BONUS_SUSPEND;
                    break;
                }
            }
            this.sendStateUpdate();
            return;
        }

        internal function sendStateUpdate():void
        {
            if (this._currentState != this._previousState) 
            {
                syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            }
            return;
        }

        public function get previousState():String
        {
            return this._previousState;
        }

        public function get state():String
        {
            return this._currentState;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGameData, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleComplete, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_OPEN, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusComplete, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_COMPLETE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSystemReady, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_SYSTEM_READY, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.ACTION_COLLECT, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_FREE_SPINS, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpins, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onEngineReady, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED, 900);
            return;
        }

        internal function onFreeSpins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.framework.state;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS:
                {
                    this._currentState = this._freegames ? FREEGAME_BONUS : BONUS;
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS:
                {
                    this._currentState = this._freegames ? FREEGAME_BONUS_SELECT : BONUS_SELECT;
                    break;
                }
                default:
                {
                    loc1 = this._response.slot.state;
                    switch (loc1) 
                    {
                        case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS : SLOT_STARTING_FREESPINS;
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS : SLOT_FREESPINS;
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                        case mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE:
                        {
                            _trace("Grrr, we shouldn\'t be here.", "error", this, 16711680);
                            break;
                        }
                    }
                    break;
                }
            }
            return;
        }

        internal function onFreeGameData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            if (this._freeGameData.isFreeGameActive) 
            {
                this._freegames = true;
                if (this._currentState.indexOf("FREEGAME_") == -1) 
                {
                    this._currentState = "FREEGAME_" + this._currentState;
                }
            }
            else 
            {
                this._freegames = false;
                this._currentState = this._currentState.replace("FREEGAME_", "");
            }
            this.sendStateUpdate();
            return;
        }

        internal function onEngineReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freeGameData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeGamesData;
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            var loc1:*=mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME));
            var loc2:*=this._response.framework.state;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME:
                {
                    this._currentState = this._freegames ? FREEGAME_SLOT : SLOT;
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLING:
                {
                    this._currentState = this._freegames ? FREEGAME_SLOT_GAMBLE : SLOT_GAMBLE;
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS:
                {
                    this._currentState = this._freegames ? FREEGAME_BONUS : BONUS;
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE:
                {
                    this._currentState = this._freegames ? FREEGAME_BONUS_COMPLETE : BONUS_COMPLETE;
                    loc2 = this._response.slot.state;
                    switch (loc2) 
                    {
                        case mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE:
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT : SLOT;
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                        {
                            if (loc1.triggerFreespinsAndBonusTogether) 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS : SLOT_STARTING_FREESPINS_AFTER_BONUS;
                            }
                            else 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS : SLOT_STARTING_FREESPINS;
                            }
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS : SLOT_FREESPINS;
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                        {
                            if (this._previousState == SLOT_FREESPINS_COMPLETE || this._previousState == FREEGAME_SLOT_FREESPINS_COMPLETE) 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT : SLOT;
                            }
                            else 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_COMPLETE : SLOT_FREESPINS_COMPLETE;
                            }
                            break;
                        }
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_COMPLETE:
                {
                    this._currentState = this._freegames ? FREEGAME_SLOT : SLOT;
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS:
                {
                    this._currentState = this._freegames ? FREEGAME_BONUS_SELECT : BONUS_SELECT;
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS:
                {
                    if (this._freegames) 
                    {
                        if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                        {
                            this._currentState = FREEGAME_GAMBLE_AFTERBONUS;
                        }
                        else 
                        {
                            this._currentState = FREEGAME_GAMBLE_AFTER_FREESPINS;
                        }
                    }
                    else if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                    {
                        this._currentState = GAMBLE_AFTERBONUS;
                    }
                    else 
                    {
                        this._currentState = GAMBLE_AFTER_FREESPINS;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.BONUS_SUSPENDED:
                {
                    this.bonusSuspend();
                }
                default:
                {
                    _trace("ERROR: Unhandled framestate after freespins. -" + toString(), "error", this, 16711680);
                    break;
                }
            }
            this.sendStateUpdate();
            return;
        }

        internal function onCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            if (this._freegames) 
            {
                this._currentState = FREEGAME_GAMBLE_COLLECT;
            }
            else 
            {
                this._currentState = GAMBLE_COLLECT;
            }
            this.sendStateUpdate();
            return;
        }

        internal function onSystemReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.sendStateUpdate();
            return;
        }

        internal function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            this._currentState = SLOT;
            this.sendStateUpdate();
            return;
        }

        internal function onUseFreeGameLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freegames = false;
            this.onBackToGame();
            this.sendStateUpdate();
            return;
        }

        internal function onGambleOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.gamble.state;
            switch (loc1) 
            {
                case 0:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_SLOT_GAMBLE;
                    }
                    else 
                    {
                        this._currentState = SLOT_GAMBLE;
                    }
                    break;
                }
                case 1:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_GAMBLE;
                    }
                    else 
                    {
                        this._currentState = GAMBLE;
                    }
                    break;
                }
                case 2:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_GAMBLE_COLLECT;
                    }
                    else 
                    {
                        this._currentState = GAMBLE_COLLECT;
                    }
                    break;
                }
                case 3:
                case 4:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_GAMBLE_SUMMARY;
                    }
                    else 
                    {
                        this._currentState = GAMBLE_SUMMARY;
                    }
                    break;
                }
            }
            this.sendStateUpdate();
            return;
        }

        internal function onBonusPick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            if (this._freegames) 
            {
                this._currentState = FREEGAME_BONUS_SELECT;
            }
            else 
            {
                this._currentState = BONUS_SELECT;
            }
            this.sendStateUpdate();
            return;
        }

        internal function onBonusOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME)).id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                this._previousState = this._currentState;
                if (this._freegames) 
                {
                    this._currentState = FREEGAME_BONUS;
                }
                else 
                {
                    this._currentState = BONUS;
                }
                this.sendStateUpdate();
            }
            return;
        }

        internal function onBonusComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._freegames) 
            {
                this._currentState = FREEGAME_BONUS_COMPLETE;
            }
            else 
            {
                this._currentState = BONUS_COMPLETE;
            }
            this.sendStateUpdate();
            return;
        }

        internal function onReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.sendStateUpdate();
            return;
        }

        internal function onGambleComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousState = this._currentState;
            if (this._freegames) 
            {
                this._currentState = FREEGAME_SLOT;
            }
            else 
            {
                this._currentState = SLOT;
            }
            this.sendStateUpdate();
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._response = arg1.data;
            var loc1:*=this._response.framework.state;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME:
                {
                    this.baseGameState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLING:
                {
                    this.gamblingState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS:
                {
                    this.playingBonusState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE:
                {
                    this.bonusCompleteState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_COMPLETE:
                {
                    this.gambleCompleteState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS:
                {
                    this.choosingBonusState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS:
                {
                    this.gambleAfterBonusState();
                    break;
                }
                case mgs.aurora.slots.components.enums.FrameworkStates.BONUS_SUSPENDED:
                {
                    this.bonusSuspend();
                    break;
                }
                default:
                {
                    break;
                }
            }
            if (this._response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                this.sendStateUpdate();
            }
            return;
        }

        internal function baseGameState():void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.id.verb;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.Verbs.COLLECTSPIN:
                case mgs.aurora.slots.components.enums.Verbs.SPIN:
                case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                case mgs.aurora.slots.components.enums.Verbs.RESPIN:
                {
                    loc1 = this._response.slot.state;
                    switch (loc1) 
                    {
                        case mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE:
                        {
                            if (this._response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT : SLOT;
                            }
                            else 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT_REFRESH : SLOT_REFRESH;
                            }
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS : SLOT_STARTING_FREESPINS;
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                        {
                            if (this._response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS : SLOT_FREESPINS;
                            }
                            else 
                            {
                                this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_REFRESH : SLOT_FREESPINS_REFRESH;
                            }
                            break;
                        }
                        case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_COMPLETE : SLOT_FREESPINS_COMPLETE;
                            break;
                        }
                    }
                    break;
                }
            }
            return;
        }

        internal function gamblingState():void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.gamble.state;
            switch (loc1) 
            {
                case 0:
                case 1:
                {
                    loc1 = this._response.id.verb;
                    switch (loc1) 
                    {
                        case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                        {
                            loc1 = this._response.slot.state;
                            switch (loc1) 
                            {
                                case mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE:
                                {
                                    if (this._response.gamble.gamblesMade > 0) 
                                    {
                                        if (this._freegames) 
                                        {
                                            this._currentState = FREEGAME_GAMBLE;
                                        }
                                        else 
                                        {
                                            this._currentState = GAMBLE;
                                        }
                                    }
                                    else if (this._freegames) 
                                    {
                                        this._currentState = FREEGAME_SLOT_GAMBLE;
                                    }
                                    else 
                                    {
                                        this._currentState = SLOT_GAMBLE;
                                    }
                                    break;
                                }
                                case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                                {
                                    this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS : SLOT_STARTING_FREESPINS;
                                    break;
                                }
                                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                                {
                                    if (this._response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                                    {
                                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS : SLOT_FREESPINS;
                                    }
                                    else 
                                    {
                                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_REFRESH : SLOT_FREESPINS_REFRESH;
                                    }
                                    break;
                                }
                                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                                {
                                    if (this._response.gamble.gamblesMade > 0) 
                                    {
                                        if (this._freegames) 
                                        {
                                            this._currentState = FREEGAME_GAMBLE;
                                        }
                                        else 
                                        {
                                            this._currentState = GAMBLE;
                                        }
                                    }
                                    else 
                                    {
                                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_COMPLETE : SLOT_FREESPINS_COMPLETE;
                                    }
                                    break;
                                }
                            }
                            break;
                        }
                        case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                        {
                            loc1 = this._response.slot.state;
                            switch (loc1) 
                            {
                                case mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE:
                                {
                                    if (this._freegames) 
                                    {
                                        this._currentState = FREEGAME_GAMBLE_AFTER_FREESPINS;
                                    }
                                    else 
                                    {
                                        this._currentState = GAMBLE_AFTER_FREESPINS;
                                    }
                                    break;
                                }
                                case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                                {
                                    this._currentState = this._freegames ? FREEGAME_SLOT_STARTING_FREESPINS : SLOT_STARTING_FREESPINS;
                                    break;
                                }
                                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                                {
                                    if (this._response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                                    {
                                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS : SLOT_FREESPINS;
                                    }
                                    else 
                                    {
                                        this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_REFRESH : SLOT_FREESPINS_REFRESH;
                                    }
                                    break;
                                }
                                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                                {
                                    this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_COMPLETE : SLOT_FREESPINS_COMPLETE;
                                    break;
                                }
                            }
                            break;
                        }
                        case mgs.aurora.slots.components.enums.Verbs.BONUSPICK:
                        case mgs.aurora.slots.components.enums.Verbs.SELECTBONUSGAME:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_AFTERBONUS;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_AFTERBONUS;
                            }
                            break;
                        }
                        default:
                        {
                            if (this._response.gamble.gamblesMade > 0) 
                            {
                                if (this._freegames) 
                                {
                                    this._currentState = FREEGAME_GAMBLE;
                                }
                                else 
                                {
                                    this._currentState = GAMBLE;
                                }
                            }
                            else if (this._freegames) 
                            {
                                this._currentState = FREEGAME_SLOT_GAMBLE;
                            }
                            else 
                            {
                                this._currentState = SLOT_GAMBLE;
                            }
                            break;
                        }
                    }
                    break;
                }
                case 2:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_GAMBLE_COLLECT;
                    }
                    else 
                    {
                        this._currentState = GAMBLE_COLLECT;
                    }
                    break;
                }
                case 3:
                case 4:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_GAMBLE_COMPLETE;
                    }
                    else 
                    {
                        this._currentState = GAMBLE_COMPLETE;
                    }
                    break;
                }
            }
            return;
        }

        internal function playingBonusState():void
        {
            var loc1:*=null;
            this._previousState = this._currentState;
            var loc2:*=this._response.id.verb;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.enums.Verbs.BONUSPICK:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS;
                    }
                    else 
                    {
                        this._currentState = BONUS;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                {
                    if (this._response.slot.state == 2 || this._response.slot.state == 3) 
                    {
                        if (this._freegames) 
                        {
                            this._currentState = FREEGAME_SLOT_FREESPIN_BONUS;
                        }
                        else 
                        {
                            this._currentState = SLOT_FREESPIN_BONUS;
                        }
                    }
                    else if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS_REFRESH;
                    }
                    else 
                    {
                        this._currentState = BONUS_REFRESH;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                {
                    loc1 = mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME));
                    if (loc1.triggerFreespinsInBonus) 
                    {
                        if (this._response.slot.state != 3) 
                        {
                            if (this._response.slot.state == 2 || this._response.slot.state == 3) 
                            {
                                if (this._freegames) 
                                {
                                    this._currentState = FREEGAME_SLOT_FREESPIN_BONUS;
                                }
                                else 
                                {
                                    this._currentState = SLOT_FREESPIN_BONUS;
                                }
                            }
                        }
                        else 
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_COMPLETE : SLOT_FREESPINS_COMPLETE;
                        }
                    }
                    else if (this._response.slot.state == 2 || this._response.slot.state == 3) 
                    {
                        if (this._freegames) 
                        {
                            this._currentState = FREEGAME_SLOT_FREESPIN_BONUS;
                        }
                        else 
                        {
                            this._currentState = SLOT_FREESPIN_BONUS;
                        }
                    }
                    else if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS;
                    }
                    else 
                    {
                        this._currentState = BONUS;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.SPIN:
                case mgs.aurora.slots.components.enums.Verbs.RESPIN:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS;
                    }
                    else 
                    {
                        this._currentState = BONUS;
                    }
                    break;
                }
            }
            return;
        }

        internal function bonusCompleteState():void
        {
            var loc1:*=null;
            this._previousState = this._currentState;
            var loc2:*=this._response.id.verb;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.enums.Verbs.BONUSCOLLECT:
                case mgs.aurora.slots.components.enums.Verbs.CHOOSEBONUSGAME:
                case mgs.aurora.slots.components.enums.Verbs.COLLECT:
                case mgs.aurora.slots.components.enums.Verbs.COLLECTSPIN:
                case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                case mgs.aurora.slots.components.enums.Verbs.GAMBLE:
                case mgs.aurora.slots.components.enums.Verbs.HOLD:
                case mgs.aurora.slots.components.enums.Verbs.NUDGE:
                case mgs.aurora.slots.components.enums.Verbs.PLAY:
                case mgs.aurora.slots.components.enums.Verbs.REJECT:
                case mgs.aurora.slots.components.enums.Verbs.SELECTBONUSGAME:
                case mgs.aurora.slots.components.enums.Verbs.SPIN:
                {
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.BONUSPICK:
                {
                    if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) 
                    {
                        if (this._freegames) 
                        {
                            this._currentState = FREEGAME_BONUS_COMPLETE;
                        }
                        else 
                        {
                            this._currentState = BONUS_COMPLETE;
                        }
                    }
                    else if (this._freegames) 
                    {
                        this._currentState = FREEGAME_SLOT_STARTING_FREESPINS;
                    }
                    else 
                    {
                        this._currentState = SLOT_STARTING_FREESPINS;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                {
                    loc1 = mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME));
                    if (loc1.triggerFreespinsInBonus) 
                    {
                        if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) 
                        {
                            if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
                            {
                                if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                                {
                                    if (this._freegames) 
                                    {
                                        this._currentState = FREEGAME_BONUS_SUMMARY;
                                    }
                                    else 
                                    {
                                        this._currentState = BONUS_SUMMARY;
                                    }
                                }
                                else if (this._freegames) 
                                {
                                    this._currentState = FREEGAME_SLOT_FREESPINS_COMPLETE;
                                }
                                else 
                                {
                                    this._currentState = SLOT_FREESPINS_COMPLETE;
                                }
                            }
                            else if (this._freegames) 
                            {
                                this._currentState = FREEGAME_SLOT_FREESPINS_REFRESH;
                            }
                            else 
                            {
                                this._currentState = SLOT_FREESPINS_REFRESH;
                            }
                        }
                        else if (this._freegames) 
                        {
                            this._currentState = FREEGAME_SLOT_STARTING_FREESPINS;
                        }
                        else 
                        {
                            this._currentState = SLOT_STARTING_FREESPINS;
                        }
                    }
                    else if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS_SUMMARY;
                    }
                    else 
                    {
                        this._currentState = BONUS_SUMMARY;
                    }
                    break;
                }
            }
            return;
        }

        internal function gambleCompleteState():void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.id.verb;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                {
                    loc1 = this._response.gamble.state;
                    switch (loc1) 
                    {
                        case 0:
                        {
                            break;
                        }
                        case 2:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_COLLECT;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_COLLECT;
                            }
                            break;
                        }
                        case 3:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_SUMMARY;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_SUMMARY;
                            }
                            break;
                        }
                        case 4:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_COMPLETE;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_COMPLETE;
                            }
                            break;
                        }
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.GAMBLE:
                {
                    loc1 = this._response.gamble.state;
                    switch (loc1) 
                    {
                        case 0:
                        {
                            break;
                        }
                        case 2:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_COLLECT;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_COLLECT;
                            }
                            break;
                        }
                        case 3:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_SUMMARY;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_SUMMARY;
                            }
                            break;
                        }
                        case 4:
                        {
                            if (this._freegames) 
                            {
                                this._currentState = FREEGAME_GAMBLE_COMPLETE;
                            }
                            else 
                            {
                                this._currentState = GAMBLE_COMPLETE;
                            }
                            break;
                        }
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.COLLECT:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_GAMBLE_COMPLETE;
                    }
                    else 
                    {
                        this._currentState = GAMBLE_COMPLETE;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.COLLECTSPIN:
                case mgs.aurora.slots.components.enums.Verbs.BONUSCOLLECT:
                case mgs.aurora.slots.components.enums.Verbs.BONUSPICK:
                case mgs.aurora.slots.components.enums.Verbs.CHOOSEBONUSGAME:
                case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                case mgs.aurora.slots.components.enums.Verbs.HOLD:
                case mgs.aurora.slots.components.enums.Verbs.NUDGE:
                case mgs.aurora.slots.components.enums.Verbs.PLAY:
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                case mgs.aurora.slots.components.enums.Verbs.REJECT:
                case mgs.aurora.slots.components.enums.Verbs.SELECTBONUSGAME:
                case mgs.aurora.slots.components.enums.Verbs.SPIN:
                {
                    break;
                }
            }
            return;
        }

        internal function choosingBonusState():void
        {
            var loc1:*=null;
            this._previousState = this._currentState;
            var loc2:*=this._response.id.verb;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.enums.Verbs.BONUSPICK:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS;
                    }
                    else 
                    {
                        this._currentState = BONUS;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                {
                    if (this._response.slot.state == 2 || this._response.slot.state == 3) 
                    {
                        if (this._freegames) 
                        {
                            this._currentState = FREEGAME_SLOT_FREESPIN_BONUS;
                        }
                        else 
                        {
                            this._currentState = SLOT_FREESPIN_BONUS;
                        }
                    }
                    else if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS_REFRESH;
                    }
                    else 
                    {
                        this._currentState = BONUS_REFRESH;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                {
                    loc1 = mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME));
                    if (loc1.triggerFreespinsInBonus) 
                    {
                        if (this._response.slot.state != 3) 
                        {
                            if (this._response.slot.state == 2 || this._response.slot.state == 3) 
                            {
                                if (this._freegames) 
                                {
                                    this._currentState = FREEGAME_SLOT_FREESPIN_BONUS;
                                }
                                else 
                                {
                                    this._currentState = SLOT_FREESPIN_BONUS;
                                }
                            }
                        }
                        else 
                        {
                            this._currentState = this._freegames ? FREEGAME_SLOT_FREESPINS_COMPLETE : SLOT_FREESPINS_COMPLETE;
                        }
                    }
                    else if (this._response.slot.state == 2 || this._response.slot.state == 3) 
                    {
                        if (this._freegames) 
                        {
                            this._currentState = FREEGAME_SLOT_FREESPIN_BONUS;
                        }
                        else 
                        {
                            this._currentState = SLOT_FREESPIN_BONUS;
                        }
                    }
                    else if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS;
                    }
                    else 
                    {
                        this._currentState = BONUS;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.SPIN:
                case mgs.aurora.slots.components.enums.Verbs.RESPIN:
                {
                    if (this._freegames) 
                    {
                        this._currentState = FREEGAME_BONUS;
                    }
                    else 
                    {
                        this._currentState = BONUS;
                    }
                    break;
                }
            }
            return;
        }

        internal function gambleAfterBonusState():void
        {
            this._previousState = this._currentState;
            var loc1:*=this._response.id.verb;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.Verbs.BONUSCOLLECT:
                case mgs.aurora.slots.components.enums.Verbs.CHOOSEBONUSGAME:
                {
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.REFRESH:
                {
                    if (this._freegames) 
                    {
                        if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                        {
                            this._currentState = FREEGAME_GAMBLE_AFTERBONUS;
                        }
                        else 
                        {
                            this._currentState = FREEGAME_SLOT_FREESPINS_COMPLETE;
                        }
                    }
                    else if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                    {
                        this._currentState = GAMBLE_AFTERBONUS;
                    }
                    else 
                    {
                        this._currentState = SLOT_FREESPINS_COMPLETE;
                    }
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.BONUSPICK:
                {
                    if (this._freegames) 
                    {
                        if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                        {
                            this._currentState = FREEGAME_GAMBLE_AFTERBONUS;
                        }
                        else 
                        {
                            this._currentState = FREEGAME_SLOT_FREESPINS_COMPLETE;
                        }
                    }
                    else if (this._response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                    {
                        this._currentState = GAMBLE_AFTERBONUS;
                    }
                    else 
                    {
                        this._currentState = SLOT_FREESPINS_COMPLETE;
                    }
                    break;
                }
            }
            return;
        }

        public static const FREEGAME_BONUS_SELECT:String="FREEGAME_BONUS_SELECT";

        public static const FREEGAME_BONUS_COMPLETE:String="FREEGAME_BONUS_COMPLETE";

        public static const FREEGAME_BONUS_REFRESH:String="FREEGAME_BONUS_REFRESH";

        public static const FREEGAME_BONUS_SUMMARY:String="FREEGAME_BONUS_SUMMARY";

        public static const FREEGAME_BONUS_SUSPEND:String="FREEGAME_BONUS_SUSPEND";

        public static const PUBLISHER_NAME:String="AGENT_GAMESTATE";

        public static const STATE_PRELOAD:String="PRELOAD";

        public static const STATE_CONFIG:String="CONFIG";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const SLOT:String="SLOT";

        public static const SLOT_REFRESH:String="SLOT_REFRESH";

        public static const SLOT_GAMBLE:String="SLOT_GAMBLE";

        public static const SLOT_FREESPINS:String="SLOT_FREESPINS";

        public static const SLOT_STARTING_FREESPINS:String="SLOT_STARTING_FREESPINS";

        public static const SLOT_FREESPINS_REFRESH:String="SLOT_FREESPINS_REFRESH";

        public static const SLOT_FREESPINS_COMPLETE:String="SLOT_FREESPINS_COMPLETE";

        public static const SLOT_STARTING_FREESPINS_AFTER_BONUS:String="STARTING_FREESPINS_AFTER_BONUS";

        public static const SLOT_FREESPIN_BONUS:String="SLOT_FREESPIN_BONUS";

        public static const SLOT_NUDGE:String="SLOT_NUDGE";

        public static const SLOT_NUDGE_COMPLETE:String="SLOT_NUDGE_COMPLETE";

        public static const GAMBLE:String="GAMBLE";

        public static const GAMBLE_AFTERBONUS:String="GAMBLE_AFTERBONUS";

        public static const GAMBLE_AFTER_FREESPINS:String="GAMBLE_AFTER_FREESPINS";

        public static const GAMBLE_REFRESH:String="GAMBLE_REFRESH";

        public static const GAMBLE_COLLECT:String="GAMBLE_COLLECT";

        public static const GAMBLE_WIN:String="GAMBLE_WIN";

        public static const GAMBLE_COMPLETE:String="GAMBLE_COMPLETE";

        public static const GAMBLE_SUMMARY:String="GAMBLE_SUMMARY";

        public static const BONUS:String="BONUS";

        public static const BONUS_SELECT:String="BONUS_SELECT";

        public static const BONUS_COMPLETE:String="BONUS_COMPLETE";

        public static const BONUS_REFRESH:String="BONUS_REFRESH";

        public static const BONUS_SUMMARY:String="BONUS_SUMMARY";

        public static const BONUS_SUSPEND:String="BONUS_SUSPEND";

        public static const FREEGAME:String="FREEGAME";

        public static const FREEGAME_SLOT:String="FREEGAME_SLOT";

        public static const FREEGAME_SLOT_REFRESH:String="FREEGAME_SLOT_REFRESH";

        public static const FREEGAME_SLOT_GAMBLE:String="FREEGAME_SLOT_GAMBLE";

        public static const FREEGAME_SLOT_FREESPINS:String="FREEGAME_SLOT_FREESPINS";

        public static const FREEGAME_SLOT_STARTING_FREESPINS:String="FREEGAME_SLOT_STARTING_FREESPINS";

        public static const FREEGAME_SLOT_FREESPINS_REFRESH:String="FREEGAME_SLOT_FREESPINS_REFRESH";

        public static const FREEGAME_SLOT_FREESPINS_COMPLETE:String="FREEGAME_SLOT_FREESPINS_COMPLETE";

        public static const FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS:String="FREEGAME_STARTING_FREESPINS_AFTER_BONUS";

        public static const FREEGAME_SLOT_FREESPIN_BONUS:String="FREEGAME_SLOT_FREESPIN_BONUS";

        public static const FREEGAME_SLOT_NUDGE:String="FREEGAME_SLOT_NUDGE";

        public static const FREEGAME_SLOT_NUDGE_COMPLETE:String="FREEGAME_SLOT_NUDGE_COMPLETE";

        public static const FREEGAME_GAMBLE:String="FREEGAME_GAMBLE";

        public static const FREEGAME_GAMBLE_AFTERBONUS:String="FREEGAME_GAMBLE_AFTERBONUS";

        public static const FREEGAME_GAMBLE_AFTER_FREESPINS:String="FREEGAME_GAMBLE_AFTER_FREESPINS";

        public static const FREEGAME_GAMBLE_REFRESH:String="FREEGAME_GAMBLE_REFRESH";

        public static const FREEGAME_GAMBLE_COLLECT:String="FREEGAME_GAMBLE_COLLECT";

        public static const FREEGAME_GAMBLE_WIN:String="FREEGAME_GAMBLE_WIN";

        public static const FREEGAME_GAMBLE_COMPLETE:String="FREEGAME_GAMBLE_COMPLETE";

        public static const FREEGAME_GAMBLE_SUMMARY:String="FREEGAME_GAMBLE_SUMMARY";

        public static const FREEGAME_BONUS:String="FREEGAME_BONUS";

        internal var _previousState:String;

        internal var _currentState:String;

        internal var _response:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _freegames:Boolean=false;

        internal var _freeGameData:mgs.aurora.games.logicBlocks.data.FreeGamesData;
    }
}


//            class JumpingWildAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.symbol.*;
    
    public class JumpingWildAgent extends mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent
    {
        public function JumpingWildAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.JumpingWildAgent");
            return;
        }

        public override function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REPLACE_SYMBOL));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REVEAL_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STATIC_WILD_SYMBOL));
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_JUMPING_WILD);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLandAnimComplete, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_LAND_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSymbolRefresh, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_SYMBOLS_REFRESH);
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._xmlConfig = arg1.data;
            if (canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onSymbolRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            if (_conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                return;
            }
            if (_conductor.response.visarea.wildVABoxes.length > 0 && !(_conductor.response.visarea.wildVABoxes[0] == "") && _conductor.response.slot.reelSet == this._reelSet) 
            {
                this._jumpingWildPosn = Vector.<uint>(_conductor.response.visarea.wildVABoxes);
                loc1 = 0;
                while (loc1 < this._jumpingWildPosn.length) 
                {
                    syndicate(this, SERVICE_STATIC_WILD_SYMBOL, new mgs.aurora.games.framework.TransportLayer({"wildPosn":this._jumpingWildPosn[loc1], "newSymbolId":this._wildSymbolId, "reelSet":this._reelSet}));
                    ++loc1;
                }
            }
            return;
        }

        protected function onLandAnimComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (_conductor.response.visarea.wildVABoxes.length > 0 && !(_conductor.response.visarea.wildVABoxes[0] == "") && _conductor.response.slot.reelSet == this._reelSet) 
            {
                this._mainWild = arg1.data;
                syndicate(this, SERVICE_WILD_REVEAL_COMPLETE, new mgs.aurora.games.framework.TransportLayer(this._mainWild));
            }
            return;
        }

        protected override function setup():void
        {
            _isConfig = true;
            this._reelSet = uint(this._xmlConfig.@reelSet);
            this._layer = mgs.aurora.games.framework.StageReference.getLevel(this._xmlConfig.@layer);
            this._wildSymbolId = uint(this._xmlConfig.wild.@symbolId);
            this._hasLinkingAnimation = uint(this._xmlConfig.@hasLinkingAnimation) == 1;
            this._delayBeforeComplete = uint(this._xmlConfig.@delayBeforeComplete);
            return;
        }

        protected override function DoProcessing():void
        {
            var loc1:*=_currentHookEvent;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.publishers.ReelsServer.HOOK_EVENT_ALL_REELS_STOPPED:
                {
                    if (_conductor.response.visarea.wildVABoxes.length > 0 && !(_conductor.response.visarea.wildVABoxes[0] == "") && _conductor.response.slot.reelSet == this._reelSet) 
                    {
                        if (_conductor.response.extendedSpinStyles.numberOf > 0) 
                        {
                            this._jumpingWildPosn = Vector.<uint>(_conductor.response.visarea.wildVABoxes);
                            syndicate(this, SERVICE_WILD);
                            if (!this._hasLinkingAnimation) 
                            {
                                this.resolveWilds();
                            }
                        }
                        else 
                        {
                            CompleteHookEvent();
                        }
                    }
                    else 
                    {
                        CompleteHookEvent();
                    }
                    break;
                }
                default:
                {
                    CompleteHookEvent();
                    break;
                }
            }
            return;
        }

        protected function resolveWilds():void
        {
            if (this._jumpingWildPosn.length > 0) 
            {
                this._currentWildPosn = this._jumpingWildPosn.shift();
                this.revealWild(this._currentWildPosn);
            }
            return;
        }

        protected function playAnimation(arg1:uint):void
        {
            return;
        }

        protected function onAnimComplete(arg1:flash.display.MovieClip=null):void
        {
            this.revealWild(this._currentWildPosn);
            return;
        }

        protected function revealWild(arg1:uint):void
        {
            syndicate(this, SERVICE_REPLACE_SYMBOL, new mgs.aurora.games.framework.TransportLayer({"wildPosn":arg1, "newSymbolId":this._wildSymbolId, "reelSet":this._reelSet}));
            return;
        }

        protected function revealsComplete():void
        {
            CompleteHookEvent();
            return;
        }

        public static const SERVICE_REPLACE_SYMBOL:String="SERVICE_REPLACE_SYMBOL";

        public static const SERVICE_WILD_REVEAL_COMPLETE:String="SERVICE_WILD_REVEAL_COMPLETE";

        public static const SERVICE_WILD:String="SERVICE_WILD";

        public static const SERVICE_STATIC_WILD_SYMBOL:String="SERVICE_STATIC_WILD_SYMBOL";

        public static const PUBLISHER_NAME:String="AGENT_JUMPING_WILD";

        internal var _viewReady:Boolean=false;

        internal var _currentWildPosn:uint;

        internal var _hasLinkingAnimation:Boolean;

        protected var _reelSet:uint;

        protected var _xmlConfig:XMLList;

        protected var _mainWild:mgs.aurora.slots.components.symbol.SymbolState;

        protected var _layer:flash.display.DisplayObjectContainer;

        protected var _wildSymbolId:uint;

        protected var _delayBeforeComplete:uint;

        protected var _jumpingWildPosn:__AS3__.vec.Vector.<uint>;
    }
}


//            class MessengerAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class MessengerAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function MessengerAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.MessengerAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.MessengerAgent");
            this._stopTimer = new flash.utils.Timer(0, 0);
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_MESSAGES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TIMEDELAY));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupBegin, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        internal function onCountupBegin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._stopTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
            {
                this._stopTimer.stop();
                this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.showSkipMessage);
            }
            this._stopTimer = new flash.utils.Timer(this._conductor.settings.skipMessageTime, 1);
            this._stopTimer.addEventListener(flash.events.TimerEvent.TIMER, this.showSkipMessage);
            this._stopTimer.start();
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.completeCountup();
            return;
        }

        internal function completeCountup():void
        {
            if (this._stopTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
            {
                this._stopTimer.stop();
                this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.showSkipMessage);
            }
            this._priority = 0;
            syndicate(this, SERVICE_MESSAGES, new mgs.aurora.games.framework.TransportLayer(""));
            return;
        }

        internal function showSkipMessage(arg1:flash.events.TimerEvent):void
        {
            this._priority = 1;
            if (this._stopTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
            {
                this._stopTimer.stop();
                this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.showSkipMessage);
            }
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("MESSAGE_SKIP_COUNTUP");
            syndicate(this, SERVICE_MESSAGES, new mgs.aurora.games.framework.TransportLayer(loc1));
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        public override function dispose():void
        {
            try 
            {
                if (this._stopTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._stopTimer.stop();
                    this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.showSkipMessage);
                }
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_MESSENGER";

        public static const SERVICE_MESSAGES:String="MESSAGES";

        public static const SERVICE_TIMEDELAY:String="TIMEDELAY";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _stopTimer:flash.utils.Timer;

        internal var _priority:int=0;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;
    }
}


//            class MovieWinAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.common.statics.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.symbol.*;
    
    public class MovieWinAgent extends mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent
    {
        public function MovieWinAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.MovieWinAgent");
            return;
        }

        public override function dispose():void
        {
            this._isReady = false;
            this._symbol_controller = null;
            this._symbols_server = null;
            this._movieToSymbol_Mappings = null;
            this._movieName_to_soundName_mappings = null;
            super.dispose();
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_MOVIE_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_MOVIES_FIRSTLOOP_DONE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_REQUEST_WIN_DISPLAY_RESTART));
            return;
        }

        internal function onFadeOutComplete(... rest):void
        {
            this._shade_layer.visible = false;
            var loc1:*=this._vaSymbolFrames.length;
            if (!this._movie_instance) 
            {
                while (--loc1 > -1) 
                {
                    this._vaSymbolFrames[loc1].movieClip = this.nullMovie(this._vaSymbolFrames[loc1].movieClip);
                }
                this._isShowingMovieWin = false;
                this._win_ID = -1;
                this._vaSymbolFrames = null;
            }
            if (this._isFullyInterrupted && this._movie_instance) 
            {
                this._movie_instance = this.nullMovie(this._movie_instance);
            }
            return;
        }

        protected override function setup():void
        {
            super.setup();
            this.attemptSetup();
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc10:*=null;
            var loc11:*=null;
            this._hasConfig = true;
            var loc1:*=XML(arg1.data);
            this._movie_layer = mgs.aurora.games.framework.StageReference.getLevel(loc1.@layerForMovies.toString());
            this._static_layer = mgs.aurora.games.framework.StageReference.getLevel(loc1.@layerForFrames.toString());
            this._delayBeforeZoomDone = Number(loc1.@delayBeforeZoomDone);
            this._timer = new flash.utils.Timer(this._delayBeforeZoomDone, 1);
            this._timer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onPreExplosionDelayCompleted);
            this._zoomDoneAnim_id = loc1.@zoomDoneAnimation.toString();
            var loc2:*=loc1.shader[0];
            this._shade_color = uint(loc2.@color.toString());
            this._shade_layer = flash.display.Sprite(mgs.aurora.games.framework.StageReference.getLevel(loc2.@layer.toString()));
            this._shade_layer.visible = false;
            this._shade_alpha = Number(loc2.@alpha);
            this._shade_fadeInTime = Number(loc2.@fadeInTime);
            this._shade_fadeOutTime = Number(loc2.@fadeOutTime);
            this._symbolFrame_id_normal = loc1.visAreaFrames[0].@normal.toString();
            this._symbolFrame_id_reel = loc1.visAreaFrames[0].@reel.toString();
            this._symbolFrame_reelset_ids = loc1.visAreaFrames[0].@reelsetsForVABoxed.toString().split(",");
            var loc3:*=0;
            var loc4:*=this._symbolFrame_reelset_ids.length;
            while (loc3 < loc4) 
            {
                this._symbolFrame_reelset_ids[loc3] = uint(this._symbolFrame_reelset_ids[loc3]);
                ++loc3;
            }
            var loc8:*;
            if ((loc8 = loc1.movieWin).length() > 0) 
            {
                this._movieToSymbol_Mappings = new Object();
                this._movieName_to_soundName_mappings = new Object();
                this._winCombinations = new Object();
                var loc12:*=0;
                var loc13:*=loc8;
                for each (loc5 in loc13) 
                {
                    loc10 = loc5.@id.toString();
                    this._movieToSymbol_Mappings[loc10] = int(loc5.@symbolId);
                    this._movieName_to_soundName_mappings[loc10] = loc5.@sound.toString();
                    loc7 = (loc6 = loc5.@winCombinations.toString().split(",")).length;
                    while (--loc7 > -1) 
                    {
                        this._winCombinations[loc6[loc7]] = loc10;
                    }
                }
            }
            loc7 = (loc6 = loc1.@ranking.toString().split(",")).length;
            this._rankings = new Object();
            while (--loc7 > -1) 
            {
                this._rankings[loc6[loc7]] = true;
            }
            var loc9:*=loc1.@symbolsServerAgent.toString();
            if (mgs.aurora.games.framework.Diplomat.isPublisher(loc9)) 
            {
                loc11 = mgs.aurora.games.framework.Diplomat.publisherByName(loc9);
                this._symbols_server = loc11 as mgs.aurora.games.logicBlocks.publishers.SymbolsServer;
            }
            this.attemptSetup();
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (!this._hasView) 
            {
                loc1 = mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
                loc2 = loc1.components.length;
                while (--loc2 > -1) 
                {
                    if (loc1.components[loc2] != PUBLISHER_NAME) 
                    {
                        continue;
                    }
                    this._hasView = true;
                }
                this.attemptSetup();
            }
            return;
        }

        protected function attemptSetup():void
        {
            var loc4:*=0;
            if (!(_conductor && this._hasView && this._hasConfig)) 
            {
                return;
            }
            this._isReady = true;
            var loc1:*=-1;
            var loc2:*=_conductor.reelData;
            this._symbol_positions = new Vector.<flash.geom.Point>(loc2.rows * loc2.columns, true);
            this._reel_positions = new Vector.<flash.geom.Point>(loc2.columns, true);
            var loc3:*=(loc2.rows - 1);
            while (loc3 >= 0) 
            {
                loc4 = 0;
                while (loc4 < loc2.columns) 
                {
                    var loc5:*;
                    this._symbol_positions[loc5 = ++loc1] = new flash.geom.Point(loc2.x + loc2.width * loc4 + loc2.xSpacing * loc4, loc2.y + loc2.height * loc3 + loc2.ySpacing * loc3);
                    if (loc3 == 0) 
                    {
                        this._reel_positions[loc4] = new flash.geom.Point(loc2.x + loc2.width * loc4 + loc2.xSpacing * loc4, loc2.y + loc2.height * loc3 + loc2.ySpacing * loc3);
                    }
                    ++loc4;
                }
                --loc3;
            }
            this._reelAreaCenter = new flash.geom.Point(loc2.x + (loc2.width * loc2.columns + loc2.xSpacing * (loc2.columns - 1)) / 2, loc2.y + (loc2.height * loc2.rows + loc2.ySpacing * (loc2.rows - 1)) / 2);
            this.createSymbolShades();
            return;
        }

        internal function createSymbolShades():void
        {
            var loc1:*=this._symbol_positions.length;
            this._vaSymbolShades = new Vector.<flash.display.Sprite>(loc1, true);
            while (--loc1 > -1) 
            {
                this._vaSymbolShades[loc1] = this.getSymbolShade(loc1);
                this._shade_layer.addChild(this._vaSymbolShades[loc1]);
            }
            return;
        }

        internal function getSymbolShade(arg1:int):flash.display.Sprite
        {
            var loc1:*=new flash.display.Sprite();
            loc1.name = this.SHADE_NAME + arg1;
            loc1.x = this._symbol_positions[arg1].x;
            loc1.y = this._symbol_positions[arg1].y;
            loc1.graphics.beginFill(this._shade_color);
            loc1.graphics.drawRect(0, 0, _conductor.reelData.width, _conductor.reelData.height);
            loc1.graphics.endFill();
            return loc1;
        }

        protected function onPaytableClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paytableOpen = false;
            return;
        }

        protected override function DoProcessing():void
        {
            if (this._isReady && _currentHookEvent == mgs.aurora.games.logicBlocks.publishers.ReelsServer.HOOK_EVENT_ALL_REELS_STOPPED && !(_conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS) && !(_conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS) && _conductor.visArea.wins.numberOf > 0) 
            {
                this._isShowingMovieWin = this.displayMovieWin(this.getMovieID());
            }
            CompleteHookEvent();
            return;
        }

        protected function onDoRollingReelsStepWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._isReady && _conductor.visArea.wins.numberOf > 0) 
            {
                this._isShowingMovieWin = this.displayMovieWin(this.getMovieID());
            }
            return;
        }

        protected function onPaytableOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paytableOpen = true;
            return;
        }

        internal function getMovieID():String
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            loc2 = -1;
            loc3 = _conductor.visArea.wins.numberOf;
            while (++loc2 < loc3) 
            {
                loc1 = _conductor.visArea.wins.wins[loc2].id;
                if (!this._rankings[loc1]) 
                {
                    continue;
                }
                if (this._winCombinations[loc1]) 
                {
                    this._win_ID = loc1;
                    return loc4 = this._winCombinations[this._win_ID];
                }
                return null;
            }
            return loc4;
        }

        internal function displayMovieWin(arg1:String):Boolean
        {
            var loc2:*=0;
            var loc3:*=null;
            if (!arg1) 
            {
                return false;
            }
            if (this._win_ID == -1) 
            {
                return false;
            }
            if (!this.isSymbolControllerSet()) 
            {
                return false;
            }
            if (!mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded(arg1)) 
            {
                return false;
            }
            if (!mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded(this._zoomDoneAnim_id)) 
            {
                return false;
            }
            if (!mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded(this._symbolFrame_id_reel)) 
            {
                return false;
            }
            if (!mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded(this._symbolFrame_id_normal)) 
            {
                return false;
            }
            this._isFadingOut = false;
            this._isFullyInterrupted = false;
            this._movie_instance = this.assignMovie(arg1);
            this._zoomDoneAnim_instance = this.assignMovie(this._zoomDoneAnim_id);
            this._vaSymbolFrames = new Vector.<FrameOverlayData>(0);
            syndicate(mgs.aurora.games.framework.server.Publisher(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.PUBLISHER_NAME)), mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SERVICE_BLOCKING_UPDATE, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SET_BLOCK);
            var loc1:*=this._symbol_positions.length;
            var loc4:*=new Vector.<Boolean>(loc1, true);
            loc1 = _conductor.visArea.wins.numberOf;
            while (--loc1 > -1) 
            {
                if (_conductor.visArea.wins.wins[loc1].id != this._win_ID) 
                {
                    continue;
                }
                loc2 = (loc3 = _conductor.visArea.wins.wins[loc1].matchPos).length;
                while (--loc2 > -1) 
                {
                    loc4[loc3[loc2]] = true;
                }
            }
            loc1 = loc4.length;
            this.resetWildVABoxData();
            while (--loc1 > -1) 
            {
                if (!loc4[loc1]) 
                {
                    continue;
                }
                if (!this.positionIsInWildVABoxes(loc1)) 
                {
                    this.placeNormalFrameOverSymbolPosition(loc1);
                }
                this.hideBlockOverSymbolPosition(loc1);
            }
            if (this._wildColumns) 
            {
                loc1 = this._wildColumns.length;
                while (--loc1 > -1) 
                {
                    if (this._wildColumns[loc1] != true) 
                    {
                        continue;
                    }
                    this.placeReelFrameOverReel(loc1);
                }
            }
            this._win_ID = -1;
            this.playShadeOver();
            this.playZoomIn();
            if (this._paytableOpen) 
            {
                this.onHalfInterrupt();
            }
            else 
            {
                syndicate(this, SERVICE_MOVIE_OPEN, new mgs.aurora.games.framework.TransportLayer(this._movieName_to_soundName_mappings[this._movie_instance.name]));
            }
            return true;
        }

        internal function resetWildVABoxData():void
        {
            var loc1:*=false;
            var loc4:*=0;
            var loc5:*=0;
            var loc2:*=0;
            var loc3:*=this._symbolFrame_reelset_ids.length;
            while (loc2 < loc3) 
            {
                if (this._symbolFrame_reelset_ids[loc2] == _conductor.response.slot.reelSet) 
                {
                    loc1 = true;
                    break;
                }
                ++loc2;
            }
            if (loc1) 
            {
                loc4 = _conductor.reelData.columns;
                this._wildColumns = new Vector.<Boolean>(loc4, true);
                this._wildVABoxMappings = new Vector.<Boolean>(this._symbol_positions.length, true);
                loc2 = 0;
                loc3 = _conductor.response.visarea.wildVABoxes.length;
                while (loc2 < loc3) 
                {
                    loc5 = int(_conductor.response.visarea.wildVABoxes[loc2]);
                    this._wildVABoxMappings[loc5] = true;
                    this._wildColumns[loc5 % loc4] = true;
                    ++loc2;
                }
            }
            else 
            {
                if (this._wildColumns) 
                {
                    this._wildColumns = null;
                }
                if (this._wildVABoxMappings) 
                {
                    this._wildVABoxMappings = null;
                }
            }
            return;
        }

        internal function positionIsInWildVABoxes(arg1:int):Boolean
        {
            if (this._wildVABoxMappings) 
            {
                return this._wildVABoxMappings[arg1] == true;
            }
            return false;
        }

        internal function placeNormalFrameOverSymbolPosition(arg1:int):void
        {
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._symbolFrame_id_normal);
            loc1.name = this._symbolFrame_id_normal + arg1.toString();
            loc1.x = this._symbol_positions[arg1].x;
            loc1.y = this._symbol_positions[arg1].y;
            this._static_layer.addChild(loc1);
            this._vaSymbolFrames.push(new FrameOverlayData(loc1, _conductor.visArea.getSymbolIdFromVisArea(arg1), FrameOverlayData.SINGLE_SYMBOL_FRAME));
            return;
        }

        internal function placeReelFrameOverReel(arg1:int):void
        {
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._symbolFrame_id_reel);
            loc1.name = this._symbolFrame_id_reel + arg1.toString();
            loc1.x = this._reel_positions[arg1].x;
            loc1.y = this._reel_positions[arg1].y;
            this._static_layer.addChild(loc1);
            this._vaSymbolFrames.push(new FrameOverlayData(loc1, -1, FrameOverlayData.MULTIPLE_SYMBOL_FRAME));
            return;
        }

        internal function hideBlockOverSymbolPosition(arg1:int):void
        {
            this._shade_layer.getChildByName(this.SHADE_NAME + arg1).visible = false;
            return;
        }

        internal function playShadeOver():void
        {
            var loc1:*;
            this._shade_layer.alpha = 0;
            this._shade_layer.visible = true;
            this._shaderIsTweening = caurina.transitions.Tweener.addTween(this._shade_layer, {"alpha":this._shade_alpha, "time":this._shade_fadeInTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_LINEAR, "onComplete":function ():void
            {
                _shaderIsTweening = false;
                caurina.transitions.Tweener.removeTweens(_shade_layer);
                return;
            }})
            return;
        }

        internal function playZoomIn():void
        {
            this._zoomDoneAnim_instance.visible = false;
            this._movie_instance.scaleY = 0;
            this._movie_instance.scaleX = 0;
            this._movie_instance.alpha = 0;
            this._movie_instance.x = this._reelAreaCenter.x;
            this._movie_instance.y = this._reelAreaCenter.y;
            this._zoomDoneAnim_instance.x = this._reelAreaCenter.x;
            this._zoomDoneAnim_instance.y = this._reelAreaCenter.y;
            this._movie_layer.addChild(this._zoomDoneAnim_instance);
            this._movie_layer.addChild(this._movie_instance);
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._movie_instance, this.onMovieWinDoneFirstLoop, 0, 1, this._movie_instance.totalFrames);
            this._movie_instance.play();
            this._movieIsZooming = caurina.transitions.Tweener.addTween(this._movie_instance, {"scaleX":1, "scaleY":1, "alpha":1, "time":this._shade_fadeInTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_EASE_IN_CUBIC, "onComplete":this.onZoomDone});
            return;
        }

        internal function onZoomDone():void
        {
            this._movieIsZooming = false;
            caurina.transitions.Tweener.removeTweens(this._movie_instance);
            this._timer.start();
            return;
        }

        internal function onPreExplosionDelayCompleted(arg1:flash.events.TimerEvent):void
        {
            if (!this._isFadingOut) 
            {
                this._zoomDoneAnim_instance.visible = true;
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._zoomDoneAnim_instance, this.removeZoomDoneAnim, 0, 1, this._zoomDoneAnim_instance.totalFrames);
                this._zoomDoneAnim_instance.play();
            }
            return;
        }

        internal function removeZoomDoneAnim(arg1:flash.display.MovieClip):void
        {
            this._zoomDoneAnim_instance = this.nullMovie(this._zoomDoneAnim_instance);
            return;
        }

        internal function onMovieWinDoneFirstLoop(arg1:flash.display.MovieClip):void
        {
            syndicate(this, SERVICE_MOVIES_FIRSTLOOP_DONE);
            if (_conductor.freeSpinsData.isFreespinsActive) 
            {
                mgs.aurora.games.framework.StageReference.stage.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.CLICK));
            }
            return;
        }

        internal function onHalfInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc3:*=0;
            var loc4:*=0;
            if (!this._isReady) 
            {
                return;
            }
            if (this._isFadingOut) 
            {
                return;
            }
            if (this._isFullyInterrupted) 
            {
                return;
            }
            if (!this._isShowingMovieWin) 
            {
                return;
            }
            if (_conductor.autoplay.autoPlayActive) 
            {
                return;
            }
            if (_conductor.rollingReels.hasReelSlideSteps && (_conductor.rollingReels.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING) || _conductor.rollingReels.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE))) 
            {
                this.onInstantInterrupt(arg1);
                this.onMovieWinDoneFirstLoop(null);
                return;
            }
            var loc2:*=this._movie_instance.name;
            this.syndicateComplete(this._movieName_to_soundName_mappings[loc2]);
            this._isFadingOut = true;
            syndicate(this, SERVICE_MOVIES_FIRSTLOOP_DONE);
            if (this._zoomDoneAnim_instance) 
            {
                this._zoomDoneAnim_instance.visible = false;
                this._zoomDoneAnim_instance.stop();
            }
            if (this._movie_instance) 
            {
                if (this._movieIsZooming) 
                {
                    caurina.transitions.Tweener.removeTweens(this._movie_instance);
                }
                this._movie_instance.stop();
            }
            if (this._timer.running) 
            {
                this._timer.reset();
            }
            caurina.transitions.Tweener.removeTweens(this._shade_layer);
            loc1 = [this._movie_instance];
            if (this._vaSymbolFrames) 
            {
                loc3 = this._vaSymbolFrames.length;
                loc4 = this._movieToSymbol_Mappings[loc2];
                while (--loc3 > -1) 
                {
                    if (loc4 != this._vaSymbolFrames[loc3].symbolID) 
                    {
                        loc1.push(this._vaSymbolFrames[loc3].movieClip);
                        continue;
                    }
                    if (this._vaSymbolFrames[loc3].type != FrameOverlayData.MULTIPLE_SYMBOL_FRAME) 
                    {
                        continue;
                    }
                    loc1.push(this._vaSymbolFrames[loc3].movieClip);
                }
            }
            this.fadeOut(loc1);
            this.removeBlock();
            syndicate(this, SERVICE_REQUEST_WIN_DISPLAY_RESTART);
            return;
        }

        protected function removeBlock():void
        {
            syndicate(mgs.aurora.games.framework.server.Publisher(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.PUBLISHER_NAME)), mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SERVICE_BLOCKING_UPDATE, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.REMOVE_BLOCK);
            return;
        }

        internal function onFullInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            if (!this._isReady) 
            {
                return;
            }
            if (this._isFullyInterrupted) 
            {
                return;
            }
            if (!this._isShowingMovieWin) 
            {
                return;
            }
            var loc1:*=new Array(0);
            this._isFadingOut = true;
            this._isFullyInterrupted = true;
            if (this._zoomDoneAnim_instance) 
            {
                this._zoomDoneAnim_instance.visible = false;
                this._zoomDoneAnim_instance.stop();
            }
            if (this._movie_instance) 
            {
                this.syndicateComplete(this._movieName_to_soundName_mappings[this._movie_instance.name]);
                if (this._movieIsZooming) 
                {
                    caurina.transitions.Tweener.removeTweens(this._movie_instance);
                }
                this._movie_instance.stop();
                loc1.push(this._movie_instance);
            }
            if (this._timer.running) 
            {
                this._timer.reset();
            }
            caurina.transitions.Tweener.removeTweens(this._shade_layer);
            if (this._vaSymbolFrames) 
            {
                loc2 = this._vaSymbolFrames.length;
                while (--loc2 > -1) 
                {
                    loc1.push(this._vaSymbolFrames[loc2].movieClip);
                }
            }
            if (loc1.length > 0) 
            {
                this.fadeOut(loc1);
            }
            this.removeBlock();
            return;
        }

        internal function onRollingReelsStep(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._isShowingMovieWin) 
            {
                this.onInstantInterrupt(arg1);
            }
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_MOVIE_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onHalfInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFullInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BET_CHANGED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFullInterrupt, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN_CLICK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFullInterrupt, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFullInterrupt, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInstantInterrupt, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInstantInterrupt, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsStep, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_SET_ACTIVE_STEP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDoRollingReelsStepWins, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytableClose, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytableOpen, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFullInterrupt, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            return;
        }

        internal function onInstantInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            if (!this._isReady) 
            {
                return;
            }
            if (this._isFullyInterrupted) 
            {
                return;
            }
            if (!this._isShowingMovieWin) 
            {
                return;
            }
            var loc1:*=new Array(0);
            this._isFadingOut = true;
            this._isFullyInterrupted = true;
            this.syndicateComplete(this._movieName_to_soundName_mappings[this._movie_instance.name]);
            if (this._movie_instance) 
            {
                if (this._movieIsZooming) 
                {
                    caurina.transitions.Tweener.removeTweens(this._movie_instance);
                }
                this._movie_instance = this.nullMovie(this._movie_instance);
                loc1.push(this._movie_instance);
            }
            if (this._timer.running) 
            {
                this._timer.reset();
            }
            caurina.transitions.Tweener.removeTweens(this._shade_layer);
            if (this._vaSymbolFrames) 
            {
                loc2 = this._vaSymbolFrames.length;
                while (--loc2 > -1) 
                {
                    this._vaSymbolFrames[loc2].movieClip = this.nullMovie(this._vaSymbolFrames[loc2].movieClip);
                }
                this._vaSymbolFrames = null;
            }
            this.removeBlock();
            this._shade_layer.visible = false;
            this._isShowingMovieWin = false;
            this._win_ID = -1;
            return;
        }

        internal function fadeOut(arg1:Array):void
        {
            caurina.transitions.Tweener.addTween(this._shade_layer, {"alpha":0, "time":this._shade_fadeOutTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_LINEAR, "onUpdate":this.onFadeOutUpdate, "onUpdateParams":arg1, "onComplete":this.onFadeOutComplete, "onCompleteParams":arg1});
            return;
        }

        internal function onFadeOutUpdate(... rest):void
        {
            var loc1:*=rest.length;
            while (--loc1 > -1) 
            {
                flash.display.DisplayObject(rest[loc1]).alpha = this._shade_layer.alpha / this._shade_alpha;
            }
            loc1 = this._shade_layer.numChildren;
            while (--loc1 > -1) 
            {
                this._shade_layer.getChildAt(loc1).visible = true;
            }
            this._isFadingOut = false;
            return;
        }

        internal function assignMovie(arg1:String):flash.display.MovieClip
        {
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(arg1);
            loc1.stop();
            return loc1;
        }

        internal function nullMovie(arg1:flash.display.MovieClip):flash.display.MovieClip
        {
            arg1.stop();
            arg1.parent.removeChild(arg1);
            return null;
        }

        internal function isSymbolControllerSet():Boolean
        {
            if (!this._symbol_controller) 
            {
                this._symbol_controller = this._symbols_server.symbolController;
                if (!this._symbol_controller) 
                {
                    return false;
                }
            }
            return true;
        }

        internal function syndicateComplete(arg1:String):void
        {
            syndicate(this, SERVICE_COMPLETE, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        internal const SHADE_NAME:String="moviewin_shade_";

        public static const SERVICE_REQUEST_WIN_DISPLAY_RESTART:String="SERVICE_REQUEST_WIN_DISPLAY_RESTART";

        public static const PUBLISHER_NAME:String="AGENT_MOVIEWINS";

        public static const SERVICE_MOVIE_OPEN:String="SERVICE_MOVIE_OPEN";

        public static const SERVICE_MOVIES_FIRSTLOOP_DONE:String="SERVICE_MOVIES_FIRSTLOOP_DONE";

        public static const SERVICE_COMPLETE:String="SERVICE_MOVIEWIN_COMPLETE";

        internal var _movie_layer:flash.display.DisplayObjectContainer;

        internal var _static_layer:flash.display.DisplayObjectContainer;

        internal var _movie_instance:flash.display.MovieClip;

        internal var _win_ID:int=-1;

        internal var _symbol_controller:mgs.aurora.slots.components.symbol.ISymbolController;

        internal var _zoomDoneAnim_id:String;

        internal var _symbolFrame_id_reel:String;

        internal var _symbolFrame_id_normal:String;

        internal var _zoomDoneAnim_instance:flash.display.MovieClip;

        internal var _vaSymbolFrames:__AS3__.vec.Vector.<FrameOverlayData>;

        internal var _vaSymbolShades:__AS3__.vec.Vector.<flash.display.Sprite>;

        internal var _reel_positions:__AS3__.vec.Vector.<flash.geom.Point>;

        internal var _symbol_positions:__AS3__.vec.Vector.<flash.geom.Point>;

        internal var _shade_fadeInTime:Number;

        internal var _shade_fadeOutTime:Number;

        internal var _shade_alpha:Number;

        internal var _isReady:Boolean;

        internal var _isShowingMovieWin:Boolean;

        internal var _reelAreaCenter:flash.geom.Point;

        internal var _movieIsZooming:Boolean;

        internal var _shaderIsTweening:Boolean;

        internal var _isFadingOut:Boolean;

        internal var _isFullyInterrupted:Boolean;

        internal var _timer:flash.utils.Timer;

        internal var _shade_color:uint;

        internal var _movieToSymbol_Mappings:Object;

        internal var _movieName_to_soundName_mappings:Object;

        internal var _hasView:Boolean;

        internal var _symbolFrame_reelset_ids:Array;

        internal var _wildColumns:__AS3__.vec.Vector.<Boolean>;

        internal var _paytableOpen:Boolean;

        internal var _symbols_server:mgs.aurora.games.logicBlocks.publishers.SymbolsServer;

        internal var _wildVABoxMappings:__AS3__.vec.Vector.<Boolean>;

        internal var _hasConfig:Boolean;

        internal var _winCombinations:Object;

        internal var _rankings:Object;

        internal var _shade_layer:flash.display.Sprite;

        internal var _delayBeforeZoomDone:Number;
    }
}

import flash.display.*;


class FrameOverlayData extends Object
{
    public function FrameOverlayData(arg1:flash.display.MovieClip, arg2:int, arg3:uint)
    {
        super();
        this.movieClip = arg1;
        this.symbolID = arg2;
        this.type = arg3;
        return;
    }

    public static const SINGLE_SYMBOL_FRAME:uint=1;

    public static const MULTIPLE_SYMBOL_FRAME:uint=2;

    public var movieClip:flash.display.MovieClip;

    public var symbolID:int;

    public var type:uint;
}

//            class NarratorSoundAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class NarratorSoundAgent extends mgs.aurora.games.logicBlocks.agents.SoundLogicAgent
    {
        public function NarratorSoundAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.NarratorSoundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.NarratorSoundAgent");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NARRATION_INTERCEPT));
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStoryOpen, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceDynamicPaytableServer.SERVICE_STORY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStoryClose, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceDynamicPaytableServer.SERVICE_STORY_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStoryClose, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStoryClose, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            return;
        }

        internal function onStoryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            this._actionPlay = true;
            this._isClosing = false;
            this.clearScheduledActions();
            this.stopVoiceOver(this._activeSound);
            if (this._actionPlay) 
            {
                if (this._startNarrationTimer) 
                {
                    this._startNarrationTimer.stop();
                    this._startNarrationTimer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.playNarration);
                }
                this._startNarrationTimer = new flash.utils.Timer(600, 1);
                this._startNarrationTimer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.playNarration);
                this._startNarrationTimer.start();
                this._activeSound = arg1.data.activeStoryId;
                this._narrationInterceptPercentage = arg1.data.percentageDelay;
            }
            return;
        }

        internal function playNarration(arg1:flash.events.TimerEvent):void
        {
            var loc1:*=NaN;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            this._startNarrationTimer.stop();
            this._startNarrationTimer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.playNarration);
            if (this._activeSound != AMBER) 
            {
                if (this._activeSound != TROY) 
                {
                    if (this._activeSound != MICHAEL) 
                    {
                        if (this._activeSound == SARAH) 
                        {
                            loc5 = mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_ADV_STORY_SARAH, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME);
                            loc1 = getSlotSoundServer().getSoundLength(loc5);
                            getSlotSoundServer().processSoundAction(loc5);
                        }
                    }
                    else 
                    {
                        loc4 = mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_ADV_STORY_MICHAEL, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME);
                        loc1 = getSlotSoundServer().getSoundLength(loc4);
                        getSlotSoundServer().processSoundAction(loc4);
                    }
                }
                else 
                {
                    loc3 = mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_ADV_STORY_TROY, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME);
                    loc1 = getSlotSoundServer().getSoundLength(loc3);
                    getSlotSoundServer().processSoundAction(loc3);
                }
            }
            else 
            {
                loc2 = mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(SND_GAME_ADV_STORY_AMBER, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME);
                loc1 = getSlotSoundServer().getSoundLength(loc2);
                getSlotSoundServer().processSoundAction(loc2);
            }
            if (this._halfwayTimer) 
            {
                this._halfwayTimer.stop();
            }
            this._halfwayTimer = new flash.utils.Timer(Math.floor(loc1 / 100 * this._narrationInterceptPercentage), 1);
            this._halfwayTimer.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.soundIntercept);
            this._halfwayTimer.start();
            return;
        }

        internal function soundIntercept(arg1:flash.events.TimerEvent):void
        {
            this._halfwayTimer.stop();
            this._halfwayTimer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.soundIntercept);
            syndicate(this, SERVICE_NARRATION_INTERCEPT, new mgs.aurora.games.framework.TransportLayer(this._activeSound));
            return;
        }

        internal function onStoryClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._actionPlay = false;
            if (this._startNarrationTimer) 
            {
                this._startNarrationTimer.stop();
                this._startNarrationTimer.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.playNarration);
            }
            if (!this._isClosing) 
            {
                this._isClosing = true;
                if (arg1.data == AMBER || this._activeSound == AMBER) 
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(SND_GAME_ADV_STORY_AMBER, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, 100, 0, 500));
                    this.scheduleStopCallback(AMBER);
                }
                else if (arg1.data == TROY || this._activeSound == TROY) 
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(SND_GAME_ADV_STORY_TROY, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, 100, 0, 500));
                    this.scheduleStopCallback(TROY);
                }
                else if (arg1.data == MICHAEL || this._activeSound == MICHAEL) 
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(SND_GAME_ADV_STORY_MICHAEL, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, 100, 0, 500));
                    this.scheduleStopCallback(MICHAEL);
                }
                else if (arg1.data == SARAH || this._activeSound == SARAH) 
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(SND_GAME_ADV_STORY_SARAH, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, 100, 0, 500));
                    this.scheduleStopCallback(SARAH);
                }
            }
            return;
        }

        internal function scheduleStopCallback(arg1:String):void
        {
            this._scheduledActions = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            this._scheduledActions.autoDelete = true;
            this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.stopVoiceOver, 500, arg1));
            this._scheduledActions.start();
            return;
        }

        internal function stopVoiceOver(arg1:String):void
        {
            if (arg1 != AMBER) 
            {
                if (arg1 != TROY) 
                {
                    if (arg1 != MICHAEL) 
                    {
                        if (arg1 == SARAH) 
                        {
                            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_ADV_STORY_SARAH, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                        }
                    }
                    else 
                    {
                        getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_ADV_STORY_MICHAEL, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                    }
                }
                else 
                {
                    getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_ADV_STORY_TROY, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                }
            }
            else 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(SND_GAME_ADV_STORY_AMBER, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            return;
        }

        protected function clearScheduledActions():void
        {
            var seq:int;

            var loc1:*;
            seq = 0;
            if (this._scheduledActions != null) 
            {
                if (this._scheduledActions.isRunning) 
                {
                    this._scheduledActions.stop();
                }
                seq = 0;
                while (seq < this._scheduledActions.childActions.length) 
                {
                    try 
                    {
                        this._scheduledActions.removeAction(this._scheduledActions.childActions[seq]);
                    }
                    catch (e:Error)
                    {
                        _trace("Error in removing scheduled actions. -" + toString(), "error", this, 16711680);
                        _trace(e.getStackTrace(), "error", this, 16711680);
                    }
                    ++seq;
                }
                this._scheduledActions.kill();
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_NARRATOR_SOUND";

        public static const SERVICE_NARRATION_INTERCEPT:String="SERVICE_NARRATION_INTERCEPT";

        public static const SND_GAME_ADV_STORY_AMBER:String="SND_ADV_Amber";

        public static const SND_GAME_ADV_STORY_TROY:String="SND_ADV_Troy";

        public static const SND_GAME_ADV_STORY_MICHAEL:String="SND_ADV_Michael";

        public static const SND_GAME_ADV_STORY_SARAH:String="SND_ADV_Sarah";

        public static const AMBER:String="Amber_Story";

        public static const TROY:String="Troy_Story";

        public static const MICHAEL:String="Michael_Story";

        public static const SARAH:String="Sarah_Story";

        internal var _activeSound:String;

        internal var _narrationInterceptPercentage:uint;

        internal var _isClosing:Boolean;

        internal var _actionPlay:Boolean;

        internal var _startNarrationTimer:flash.utils.Timer;

        internal var _halfwayTimer:flash.utils.Timer;

        protected var _scheduledActions:org.as3lib.kitchensync.action.group.KSSequenceGroup;
    }
}


//            class ParticleAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class ParticleAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ParticleAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.ParticleAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.ParticleAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PLAY_PARTICLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_PARTICLE";

        public static const SERVICE_PLAY_PARTICLE:String="PLAY_PARTICLE";

        public static const SERVICE_COMPLETE:String="COMPLETE";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;
    }
}


//            class PostBackgroundClickAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class PostBackgroundClickAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostBackgroundClickAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLICK));
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_BACKGROUND_CLICK";

        public static const SERVICE_CLICK:String="CLICK";
    }
}


//            class PostBigWinAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class PostBigWinAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostBigWinAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostBigWinAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BIGWIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_BIG_WIN";

        public static const SERVICE_COMPLETE:String="COMPLETE";

        public static const SERVICE_BIGWIN:String="BIGWIN";
    }
}


//            class PostBonusAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class PostBonusAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostBonusAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostBonusAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COLLECT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PICK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ANIMATION_STARTED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DO_PICK_COUNTUP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ANIMATION_COMPLETED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SND_ACTION));
            this.defineSubscriptions();
            return;
        }

        protected function defineSubscriptions():void
        {
            return;
        }

        protected function onPick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_PICK, arg1);
            return;
        }

        protected function onPickCountupStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_DO_PICK_COUNTUP, arg1);
            return;
        }

        protected function onOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_OPEN, new mgs.aurora.games.framework.TransportLayer(arg1.data));
            return;
        }

        protected function onBonusComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COMPLETE, new mgs.aurora.games.framework.TransportLayer(arg1.data));
            return;
        }

        protected function onBonusCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COLLECT, new mgs.aurora.games.framework.TransportLayer(arg1.data));
            return;
        }

        protected function onSoundAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_SND_ACTION, new mgs.aurora.games.framework.TransportLayer(arg1.data));
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_BONUS";

        public static const SERVICE_OPEN:String="OPEN";

        public static const SERVICE_COMPLETE:String="COMPLETE";

        public static const SERVICE_COLLECT:String="COLLECT";

        public static const SERVICE_PICK:String="PICK";

        public static const SERVICE_DO_PICK_COUNTUP:String="DO_PICK_COUNTUP";

        public static const SERVICE_ANIMATION_STARTED:String="ANIMATION_STARTED";

        public static const SERVICE_ANIMATION_COMPLETED:String="ANIMATION_COMPLETED";

        public static const SERVICE_SND_ACTION:String="SND_ACTION";
    }
}


//            class PostConsoleAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PostConsoleAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function PostConsoleAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostConsoleAgent");
            return;
        }

        protected function onDiscardOffer(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_DISCARD_OFFER, arg1);
            return;
        }

        internal function testNextSpinCost():Boolean
        {
            if (this._resposeData.respin != null) 
            {
                return this._resposeData.respin.hasRespins && !mgs.aurora.games.logicBlocks.data.FreeGamesData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME)).previousFreeGameTest;
            }
            return false;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET_CHANGED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLICK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COINS_CREDITS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BETMAX));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SPIN_CLICK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAMBLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COLLECT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_FREE_SPINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAYTABLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INC_COIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DEC_COIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DEC));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INC));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INCREMENT_COINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INCREMENT_PAYLINES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INC_LINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DEC_LINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BACKTOGAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET_CHANGED_PROMPT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DISCARD_OFFER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE_ENABLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE_DISABLE));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateSpin, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateBetChanged, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_BET_CHANGED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateClick, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CLICK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateClickOnConsole, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CLICK_ON_CONSOLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateCoinsCredits, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_COINS_CREDITS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateBetMax, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_BETMAX);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateSpinClick, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_SPIN_STARTED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateAutoplay, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateGamble, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateCollect, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateBet, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_BET);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateCoins, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_COINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateStop, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicateStartFreeSpins, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_START_FREE_SPINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.syndicatePaytable, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoplay, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDecCoin, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_DEC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncCoin, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChangeAccept, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_ACCEPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChangeCancel, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_CANCEL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInc, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDec, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_DEC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncrementCoins, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INCREMENT_COINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncrementPayLines, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INCREMENT_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncPayLine, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDecPayLine, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_DEC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStopAutoPlay, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_STOP_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDiscardOffer, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_DISCARD_OFFER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onEnable, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CONSOLE_ENABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDisable, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CONSOLE_DISABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGameSummery, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            return;
        }

        protected function onDecPayLine(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_DEC_LINE, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_DEC_LINE, arg1);
            }
            return;
        }

        protected function onIncPayLine(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_INC_LINE, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_INC_LINE, arg1);
            }
            return;
        }

        protected function onEnable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_CONSOLE_ENABLE, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onDisable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_CONSOLE_DISABLE, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onStopAutoPlay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_STOP_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onDec(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_DEC, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_DEC, arg1);
            }
            return;
        }

        protected function onInc(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace(!this._betChangedFlag + " " + this.testNextSpinCost());
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_INC, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_INC, arg1);
            }
            return;
        }

        protected function onIncrementCoins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_INCREMENT_COINS, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_INCREMENT_COINS, arg1);
            }
            return;
        }

        protected function onIncrementPayLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_INCREMENT_PAYLINES, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_INCREMENT_PAYLINES, arg1);
            }
            return;
        }

        protected function onBetChangeCancel(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = false;
            return;
        }

        protected function onBetChangeAccept(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = true;
            var loc1:*=arg1.data;
            syndicate(this, loc1.service, loc1.transport);
            return;
        }

        protected function onBackToGameSummery(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        protected function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._resposeData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._settings = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.SettingsData;
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = true;
            syndicate(this, SERVICE_BACKTOGAME, arg1);
            return;
        }

        protected function onIncCoin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_INC_COIN, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_INC_COIN, arg1);
            }
            return;
        }

        protected function onDecCoin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._settings.betChangedPrompt && !this._betChangedFlag && this.testNextSpinCost()) 
            {
                syndicate(this, SERVICE_BET_CHANGED_PROMPT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransBetChanged(SERVICE_DEC_COIN, arg1)));
            }
            else 
            {
                syndicate(this, SERVICE_DEC_COIN, arg1);
            }
            return;
        }

        protected function onAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_START_AUTOPLAY, arg1);
            return;
        }

        protected function syndicateSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = false;
            syndicate(this, SERVICE_SPIN, arg1);
            return;
        }

        protected function syndicateBetChanged(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = true;
            syndicate(this, SERVICE_BET_CHANGED, arg1);
            return;
        }

        protected function syndicateClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_CLICK, arg1);
            return;
        }

        protected function syndicateClickOnConsole(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.PUBLISHER_NAME);
            if (!loc1) 
            {
                return;
            }
            mgs.aurora.games.framework.Broker.instance.syndicate(mgs.aurora.games.framework.server.Publisher(loc1), mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.SERVICE_CLICK, null);
            return;
        }

        protected function syndicateCoinsCredits(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COINS_CREDITS, arg1);
            return;
        }

        protected function syndicateBetMax(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = true;
            syndicate(this, SERVICE_BETMAX, arg1);
            return;
        }

        protected function syndicateSpinClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_SPIN_CLICK, arg1);
            return;
        }

        protected function syndicateAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_AUTOPLAY, arg1);
            return;
        }

        protected function syndicateGamble(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = false;
            syndicate(this, SERVICE_GAMBLE, arg1);
            return;
        }

        protected function syndicateCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COLLECT, arg1);
            return;
        }

        protected function syndicateBet(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChangedFlag = false;
            syndicate(this, SERVICE_BET, arg1);
            return;
        }

        protected function syndicateCoins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COINS, arg1);
            return;
        }

        protected function syndicateStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_STOP, arg1);
            return;
        }

        protected function syndicateStartFreeSpins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_START_FREE_SPINS, arg1);
            return;
        }

        protected function syndicatePaytable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_PAYTABLE, arg1);
            return;
        }

        public static const SERVICE_START_FREE_SPINS:String="START_FREE_SPINS";

        public static const SERVICE_BOUNDARY_CHANGE:String="BOUNDARY_CHANGE";

        public static const SERVICE_CONSOLE_ENABLE:String="CONSOLE_ENABLE";

        public static const PUBLISHER_NAME:String="AGENT_POST_CONSOLE";

        public static const SERVICE_SPIN:String="SPIN";

        public static const SERVICE_BET_CHANGED:String="BET_CHANGED";

        public static const SERVICE_CLICK:String="CLICK";

        public static const SERVICE_COINS_CREDITS:String="COINS_CREDITS";

        public static const SERVICE_BETMAX:String="BETMAX";

        public static const SERVICE_SPIN_CLICK:String="SPINSTART";

        public static const SERVICE_AUTOPLAY:String="AUTOPLAY";

        public static const SERVICE_GAMBLE:String="GAMBLE";

        public static const SERVICE_COLLECT:String="COLLECT";

        public static const SERVICE_BET:String="BET";

        public static const SERVICE_COINS:String="COINS";

        public static const SERVICE_STOP:String="STOP";

        public static const SERVICE_STOP_AUTOPLAY:String="STOP_AUTOPLAY";

        public static const SERVICE_CONSOLE_DISABLE:String="CONSOLE_DISABLE";

        public static const SERVICE_PAYTABLE:String="PAYTABLE";

        public static const SERVICE_BACKTOGAME:String="BACKTOGAME";

        public static const SERVICE_START_AUTOPLAY:String="START_AUTOPLAY";

        public static const SERVICE_INC_COIN:String="INC_COIN";

        public static const SERVICE_DEC_COIN:String="DEC_COIN";

        public static const SERVICE_BET_CHANGED_PROMPT:String="BET_CHANGED_PROMPT";

        public static const SERVICE_INC:String="INC";

        public static const SERVICE_DEC:String="DEC";

        public static const SERVICE_INCREMENT_COINS:String="INCREMENT_COINS";

        public static const SERVICE_INCREMENT_PAYLINES:String="INCREMENT_PAYLINES";

        public static const SERVICE_INC_LINE:String="PAYLINE_INCREASED";

        public static const SERVICE_DEC_LINE:String="PAYLINE_DECREASED";

        public static const SERVICE_DISCARD_OFFER:String="DISCARD_OFFER";

        protected var _settings:mgs.aurora.games.logicBlocks.data.SettingsData;

        protected var _betChangedFlag:Boolean=false;

        protected var _resposeData:mgs.aurora.games.logicBlocks.data.ResponseData;
    }
}


//            class PostGambleAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PostGambleAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostGambleAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostGambleAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAMBLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACTION));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_READY_TO_PLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COLLECT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_LIMIT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LOST));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INSUFFICIENT));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleSelection, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleCompleted, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleAction, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleReady, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_READY_TO_PLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWin, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_WIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinLimit, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_WIN_LIMIT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLost, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_LOST);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInsufficientFunds, mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.GambleServer.SERVICE_INSUFFICIENT);
            return;
        }

        internal function onInsufficientFunds(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_INSUFFICIENT, arg1);
            return;
        }

        internal function onLost(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_LOST, arg1);
            return;
        }

        internal function onWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_WIN, arg1);
            return;
        }

        internal function onWinLimit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_WIN_LIMIT, arg1);
            return;
        }

        internal function onCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COLLECT, arg1);
            return;
        }

        internal function onGambleOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_OPEN);
            return;
        }

        internal function onGambleCompleted(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_COMPLETED);
            return;
        }

        internal function onGambleAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_ACTION, arg1);
            return;
        }

        internal function onGambleSelection(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_GAMBLE, arg1);
            return;
        }

        internal function onGambleReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_READY_TO_PLAY, arg1);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_GAMBLE";

        public static const SERVICE_OPEN:String="OPEN";

        public static const SERVICE_GAMBLE:String="GAMBLE";

        public static const SERVICE_COMPLETED:String="COMPLETED";

        public static const SERVICE_ACTION:String="ACTION";

        public static const SERVICE_READY_TO_PLAY:String="READY_TO_PLAY";

        public static const SERVICE_COLLECT:String="COLLECT";

        public static const SERVICE_WIN:String="GAMBLE_WIN";

        public static const SERVICE_WIN_LIMIT:String="GAMBLE_WIN_LIMIT";

        public static const SERVICE_LOST:String="GAMBLE_LOST";

        public static const SERVICE_INSUFFICIENT:String="INSUFFICIENT";
    }
}


//            class PostPayTablesAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PostPayTablesAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostPayTablesAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_CLOSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PREVIOUS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NEXT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BACK_TO_GAME));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPayTableClosed, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPayTableOpen, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPayTablePrevious, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_PREVIOUS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPayTableNext, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_NEXT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBacktoGame, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_BACK_TO_GAME);
            return;
        }

        internal function onBacktoGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_BACK_TO_GAME, arg1);
            return;
        }

        internal function onPayTableClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_ON_CLOSE, arg1);
            return;
        }

        internal function onPayTableOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_ON_OPEN, arg1);
            return;
        }

        internal function onPayTablePrevious(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_PREVIOUS, arg1);
            return;
        }

        internal function onPayTableNext(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_NEXT, arg1);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_PAYTABLES";

        public static const SERVICE_ON_CLOSE:String="ON_CLOSE";

        public static const SERVICE_NEXT:String="NEXT";

        public static const SERVICE_PREVIOUS:String="PREVIOUS";

        public static const SERVICE_ON_OPEN:String="ON_OPEN";

        public static const SERVICE_BACK_TO_GAME:String="BACK_TO_GAME";
    }
}


//            class PostPaylineAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PostPaylineAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostPaylineAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostPaylineAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET_CHANGED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_LINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE_PAYLINES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAYLINES_SELECTOR_UPDATE));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdatePaylines, mgs.aurora.games.logicBlocks.publishers.PaylineServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.PaylineServer.SERVICE_UPDATE_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdatePaylinesSelectors, mgs.aurora.games.logicBlocks.publishers.PaylineServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.PaylineServer.SERVICE_PAYLINES_SELECTOR_UPDATE);
            return;
        }

        internal function onUpdatePaylines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_UPDATE_PAYLINES, arg1);
            return;
        }

        internal function onUpdatePaylinesSelectors(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_PAYLINES_SELECTOR_UPDATE, arg1);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_PAYLINE";

        public static const SERVICE_BET_CHANGED:String="BET_CHANGED";

        public static const SERVICE_WIN_LINE:String="WIN_LINE";

        public static const SERVICE_UPDATE_PAYLINES:String="UPDATE_PAYLINES";

        public static const SERVICE_PAYLINES_SELECTOR_UPDATE:String="PAYLINES_SELECTOR_UPDATE";
    }
}


//            class PostReelsAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PostReelsAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostReelsAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostReelsAgent");
            this.CreateEventHookManagers();
            this.SetupEventHookManagers();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ALL_REELS_STOPPED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_STOPPED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_EVENT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_EVENT));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelEvent, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_REEL_EVENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStopped, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_REEL_STOPPED);
            return;
        }

        protected function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._allReelsStoppedData = arg1;
            this._eventHookManager.TriggerHookEvent(HOOK_EVENT_ALL_REELS_STOPPED);
            return;
        }

        protected function onEvent(arg1:mgs.aurora.games.common.dataTypes.TransEvent):void
        {
            syndicate(this, SERVICE_EVENT, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onReelEvent(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_REEL_EVENT, arg1);
            return;
        }

        protected function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_REEL_START, arg1);
            return;
        }

        protected function onReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_REEL_STOPPED, arg1);
            return;
        }

        protected function CreateEventHookManagers():void
        {
            this._eventHookManager = new mgs.aurora.games.logicBlocks.hookAgents.EventHookAgentManager(this.onHookEventComplete);
            return;
        }

        protected function SetupEventHookManagers():void
        {
            return;
        }

        public function onHookEventComplete(arg1:String):void
        {
            if (arg1 == HOOK_EVENT_ALL_REELS_STOPPED) 
            {
                syndicate(this, SERVICE_ALL_REELS_STOPPED, this._allReelsStoppedData);
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_REELS";

        public static const SERVICE_ALL_REELS_STOPPED:String="ALL_REELS_STOPPED";

        public static const SERVICE_REEL_START:String="REEL_START";

        public static const SERVICE_REEL_STOPPED:String="REEL_STOPPED";

        public static const SERVICE_REEL_EVENT:String="REEL_EVENT";

        public static const SERVICE_EVENT:String="EVENT";

        public static const HOOK_EVENT_ALL_REELS_STOPPED:String="HOOK_EVENT_ALL_REELS_STOPPED";

        internal var _allReelsStoppedData:mgs.aurora.games.framework.ITransportLayer;

        protected var _eventHookManager:mgs.aurora.games.logicBlocks.hookAgents.EventHookAgentManager;
    }
}


//            class PostRespinAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class PostRespinAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostRespinAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostRespinAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPIN_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACTION));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INSUFFICIENT));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAction, mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinAgent.SERVICE_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClosed, mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNoFunds, mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinAgent.SERVICE_INSUFFICIENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespinStart, mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RespinAgent.SERVICE_RESPIN_START);
            return;
        }

        internal function onRespinStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_RESPIN_START, arg1);
            return;
        }

        protected function onDialogClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_DIALOG_CLOSED, arg1);
            return;
        }

        protected function onNoFunds(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_INSUFFICIENT, arg1);
            return;
        }

        protected function onDialogOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_DIALOG_OPEN, arg1);
            return;
        }

        protected function onAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_ACTION, arg1);
            return;
        }

        protected function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_RESPIN, arg1);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_RESPIN";

        public static const SERVICE_RESPIN:String="RESPIN";

        public static const SERVICE_RESPIN_START:String="RESPIN_START";

        public static const SERVICE_ACTION:String="ACTION";

        public static const SERVICE_DIALOG_OPEN:String="DIALOG_OPEN";

        public static const SERVICE_DIALOG_CLOSED:String="DIALOG_CLOSED";

        public static const SERVICE_INSUFFICIENT:String="INSUFFICIENT";
    }
}


//            class PostSymbolsAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PostSymbolsAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostSymbolsAgent()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LAND_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LAND_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SYMBOLS_REFRESH));
            this.defineSubscriptions();
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnimComplete, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_TRIGGER_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinAnimComplete, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_WIN_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinAnim, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_WIN_ANIM);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLandAnim, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_LAND_ANIM);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnim, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_TRIGGER_ANIM);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTrigger, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_TRIGGER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLandAnimComplete, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_LAND_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRefresh, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_SYMBOLS_REFRESH);
            return;
        }

        protected function onRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_SYMBOLS_REFRESH, arg1);
            return;
        }

        protected function onLandAnimComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_LAND_ANIM_COMPLETE, arg1);
            return;
        }

        protected function onTrigger(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_TRIGGER, arg1);
            return;
        }

        protected function onTriggerAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_TRIGGER_ANIM, arg1);
            return;
        }

        protected function onLandAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_LAND_ANIM, arg1);
            return;
        }

        protected function onWinAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_WIN_ANIM, arg1);
            return;
        }

        protected function onWinAnimComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_WIN_ANIM_COMPLETE, arg1);
            return;
        }

        protected function onTriggerAnimComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_TRIGGER_ANIM_COMPLETE, arg1);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_POST_SYMBOLS";

        public static const SERVICE_TRIGGER_ANIM_COMPLETE:String="TRIGGER_ANIM_COMPLETE";

        public static const SERVICE_WIN_ANIM_COMPLETE:String="WIN_ANIM_COMPLETE";

        public static const SERVICE_WIN_ANIM:String="WIN_ANIM";

        public static const SERVICE_LAND_ANIM:String="LAND_ANIM";

        public static const SERVICE_TRIGGER_ANIM:String="TRIGGER_ANIM";

        public static const SERVICE_LAND_ANIM_COMPLETE:String="LAND_ANIM_COMPLETE";

        public static const SERVICE_TRIGGER:String="TRIGGER";

        public static const SERVICE_SYMBOLS_REFRESH:String="SYMBOLS_REFRESH";
    }
}


//            class PostWinDisplayBlockingAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class PostWinDisplayBlockingAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PostWinDisplayBlockingAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SERVICE_BLOCKING_UPDATE));
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_PostWinDisplayBlockingAgent";

        public static const SERVICE_BLOCKING_UPDATE:String="BLOCKING_UPDATE";

        public static const SET_BLOCK:mgs.aurora.games.framework.ITransportLayer=new mgs.aurora.games.framework.TransportLayer(true);

        public static const REMOVE_BLOCK:mgs.aurora.games.framework.ITransportLayer=new mgs.aurora.games.framework.TransportLayer(false);
    }
}


//            class PreBonusAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PreBonusAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PreBonusAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.PreBonusAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PreBonusAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPONSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SND_ACTION));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnimsComplete, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_TRIGGER_ANIM_COMPLETE);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            return;
        }

        protected function onTriggerAnimsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_TRIGGER_ANIM_COMPLETE, arg1);
            return;
        }

        protected function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_RESPONSE, arg1);
            return;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="PreBonusAgent";

        public static const SERVICE_TRIGGER_ANIM_COMPLETE:String="TRIGGER_ANIM_COMPLETE";

        public static const SERVICE_RESPONSE:String="ON_RESPONSE";

        public static const SERVICE_SND_ACTION:String="SND_ACTION";

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;
    }
}


//            class PreReelsAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PreReelsAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function PreReelsAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.PreReelsAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PreReelsAgent");
            this.defineSubscribers();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPIN));
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStop, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            return;
        }

        internal function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_RESPIN, arg1);
            return;
        }

        internal function onStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_STOP, arg1);
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_SPIN, arg1);
            return;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_PRE_REELS";

        public static const SERVICE_SPIN:String="SERVICE_SPIN";

        public static const SERVICE_STOP:String="SERVICE_STOP";

        public static const SERVICE_RESPIN:String="SERVICE_RESPIN";
    }
}


//            class PreSpinCleanupAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PreSpinCleanupAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function PreSpinCleanupAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.PreSpinCleanupAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.PreSpinCleanupAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DO_PRESPIN_CLEANUP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PRESPIN_CLEANUP_COMPLETE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.CleanupComplete_WinDisplay, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_CLEANUP_COMPLETE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        internal function StartPrespinCleanup(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.ResetCleanupCompleteFlags();
            syndicate(this, SERVICE_DO_PRESPIN_CLEANUP);
            return;
        }

        internal function CleanupComplete_WinDisplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._winDisplayDone = true;
            this.OnReceivedCleanupNotification();
            return;
        }

        public function ResetCleanupCompleteFlags():void
        {
            this._allCleanupDone = false;
            this._winDisplayDone = false;
            return;
        }

        public function get IsCleanupComplete():Boolean
        {
            return this._winDisplayDone;
        }

        public function OnReceivedCleanupNotification():void
        {
            if (this.IsCleanupComplete && !this._allCleanupDone) 
            {
                this._allCleanupDone = true;
                this.NotifyReelsAllCleanupDone();
            }
            return;
        }

        public function NotifyReelsAllCleanupDone():void
        {
            syndicate(this, SERVICE_PRESPIN_CLEANUP_COMPLETE);
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_PRESPIN_CLEANUP";

        public static const SERVICE_DO_PRESPIN_CLEANUP:String="DO_PRESPIN_CLEANUP";

        public static const SERVICE_PRESPIN_CLEANUP_COMPLETE:String="PRESPIN_CLEANUP_COMPLETE";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _allCleanupDone:Boolean=false;

        internal var _winDisplayDone:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;
    }
}


//            class ReelAnticipationAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.reelEngine.*;
    
    public class ReelAnticipationAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function ReelAnticipationAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.ReelAnticipationAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.ReelAnticipationAgent");
            return;
        }

        public function defineServices():void
        {
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_REEL_ANTICIPATION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this.attemptSetup();
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConfig = true;
            var loc1:*=new XML(arg1.data);
            this._animation_id = loc1.@animationId.toString();
            this._level = mgs.aurora.games.framework.StageReference.getLevel(loc1.@layer.toString());
            this._xOffset = Number(loc1.@xOffset);
            this._yOffset = Number(loc1.@yOffset);
            this._fadeInTime = Number(loc1.@fadeInTime);
            this._fadeOutTime = Number(loc1.@fadeOutTime);
            this.attemptSetup();
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (!this._hasView) 
            {
                loc1 = mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
                loc2 = loc1.components.length;
                while (--loc2 > -1) 
                {
                    if (loc1.components[loc2] != PUBLISHER_NAME) 
                    {
                        continue;
                    }
                    this._hasView = true;
                }
                this.attemptSetup();
            }
            return;
        }

        internal function attemptSetup():void
        {
            if (!(this._conductor && this._hasView && this._hasConfig)) 
            {
                return;
            }
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onVisAreaDataReady, mgs.aurora.games.logicBlocks.data.VisAreaData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.VisAreaData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelEvent, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_REEL_EVENT);
            var loc1:*=this._conductor.reelData.columns;
            this._reel_positions = new Vector.<flash.geom.Point>(loc1);
            while (--loc1 > -1) 
            {
                this._reel_positions[loc1] = new flash.geom.Point(this._conductor.reelData.x + this._conductor.reelData.width * loc1 + this._conductor.reelData.xSpacing * loc1 + this._xOffset, this._conductor.reelData.y + this._yOffset);
            }
            return;
        }

        internal function onVisAreaDataReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._hasView) 
            {
                return;
            }
            if (this._conductor.visArea.canPlayReelAnticipationAnimation && !this._conductor.options.isQuickSpin) 
            {
                this._animation_instance = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._animation_id);
                this._showAnticipation = !(this._animation_instance.width == 0);
                if (this._showAnticipation) 
                {
                    this._animation_instance.visible = false;
                }
                else 
                {
                    this._animation_instance = null;
                }
            }
            else 
            {
                this._showAnticipation = false;
            }
            return;
        }

        internal function onReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            var loc2:*=loc1.reelId + 1;
            if (!this._showAnticipation) 
            {
                return;
            }
            if (loc2 != this._conductor.reelData.columns) 
            {
                if (this._conductor.visArea.canPlayReelAnticipationAnimation[loc2]) 
                {
                    if (!this._animation_instance.parent) 
                    {
                        this._level.addChild(this._animation_instance);
                    }
                    this.startFadeIn(loc2);
                    this._animation_is_up = true;
                }
            }
            else 
            {
                if (this._animation_instance.parent) 
                {
                    this._level.removeChild(this._animation_instance);
                }
                caurina.transitions.Tweener.removeTweens(this._animation_instance);
                this._animation_instance = null;
            }
            return;
        }

        internal function onReelEvent(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (!this._showAnticipation) 
            {
                return;
            }
            if (loc1.eventType != mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BOUNCE) 
            {
                return;
            }
            if (this._animation_is_up) 
            {
                this.startFadeOut();
                this._animation_is_up = false;
            }
            return;
        }

        internal function startFadeIn(arg1:int):void
        {
            caurina.transitions.Tweener.removeTweens(this._animation_instance);
            this._animation_instance.visible = true;
            this._animation_instance.x = this._reel_positions[arg1].x;
            this._animation_instance.y = this._reel_positions[arg1].y;
            this._animation_instance.alpha = 0;
            caurina.transitions.Tweener.addTween(this._animation_instance, {"alpha":1, "time":this._fadeInTime});
            return;
        }

        internal function startFadeOut():void
        {
            caurina.transitions.Tweener.removeTweens(this._animation_instance);
            caurina.transitions.Tweener.addTween(this._animation_instance, {"alpha":0, "time":this._fadeOutTime, "onComplete":this.onFadeOutComplete});
            return;
        }

        internal function onFadeOutComplete():void
        {
            this._animation_instance.visible = false;
            return;
        }

        public override function dispose():void
        {
            this._conductor = null;
            if (this._animation_instance) 
            {
                if (this._animation_instance.parent) 
                {
                    this._animation_instance.parent.removeChild(this._animation_instance);
                }
                this._animation_instance = null;
            }
            this._level = null;
            this._reel_positions = null;
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_REEL_ANTICIPATION_AGENT";

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _hasView:Boolean=false;

        internal var _hasConfig:Boolean=false;

        internal var _showAnticipation:Boolean=false;

        internal var _animation_available:Boolean=false;

        internal var _animation_id:String;

        internal var _animation_instance:flash.display.MovieClip;

        internal var _level:flash.display.DisplayObjectContainer;

        internal var _reel_positions:__AS3__.vec.Vector.<flash.geom.Point>;

        internal var _yOffset:Number;

        internal var _xOffset:Number;

        internal var _animation_is_up:Boolean=false;

        internal var _fadeOutTime:Number;

        internal var _fadeInTime:Number;
    }
}


//            class RespinAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.respin.*;
    import org.as3lib.kitchensync.action.*;
    
    public class RespinAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function RespinAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.RespinAgent");
            return;
        }

        public function get canDo():Boolean
        {
            if (!this._conductor.freeGamesData.isFreeGameActive && this._conductor.freeGamesData.previousFreeGameTest) 
            {
                return false;
            }
            if (this._conductor.response.framework.state != 0) 
            {
                return false;
            }
            var loc1:*=this._conductor.response.respin.hasRespins;
            return !this._conductor.freeGamesData.isFreeGameActive && this._conductor.autoplay.autoplaysLeft < 1 && !this._conductor.freeSpinsData.isFreespinsActive && loc1 && !this._isReelSpinning;
        }

        public function get canShow():Boolean
        {
            var loc1:*=true;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    loc1 = false;
                    break;
                }
            }
            return !this._conductor.freeSpinsData.isFreespinsActive && loc1;
        }

        public override function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        internal function onOver(arg1:mgs.aurora.slots.components.respin.RespinEvent):void
        {
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_ROLLOVER));
            return;
        }

        internal function setRespins():void
        {
            if (this.isReady) 
            {
                if (this.canShow) 
                {
                    this._respinEngine.show();
                    if (this.canDo) 
                    {
                        this._respinEngine.toggleRespins(true);
                    }
                    else 
                    {
                        this._respinEngine.toggleRespins(false);
                    }
                }
                else 
                {
                    this._respinEngine.hide();
                }
            }
            return;
        }

        internal function showDialog(arg1:int, arg2:Number):void
        {
            var reelId:int;
            var cost:Number;
            var ref:flash.display.MovieClip;

            var loc1:*;
            ref = null;
            reelId = arg1;
            cost = arg2;
            if (this._respinDialog.parent == null) 
            {
                try 
                {
                    this._respinCostFont.text = mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(Number(cost), "."));
                    ref = mgs.aurora.games.framework.StageReference.getLevel("Dialogs").addChild(this._respinDialog) as flash.display.MovieClip;
                    mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons.lockAllControls();
                    syndicate(this, SERVICE_DIALOG_OPEN);
                }
                catch (e:TypeError)
                {
                    _trace("Error while show the dialog.-" + toString(), "error", this, 16711680);
                }
            }
            return;
        }

        internal function startRespin(arg1:int):void
        {
            this._respinEngine.hideSpinCost();
            syndicate(this, SERVICE_RESPIN_START, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        internal function respinReel(arg1:int):void
        {
            this._isReelSpinning = true;
            this._respinEngine.toggleRespins(false);
            this._respinEngine.showSpinCost();
            syndicate(this, SERVICE_RESPIN, new mgs.aurora.games.framework.TransportLayer(arg1));
            new org.as3lib.kitchensync.action.KSFunction(this.startRespin, this._respinDelay, arg1).start();
            return;
        }

        internal function onStopAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._isReelSpinning) 
            {
                if (this.isReady && this.canShow && !this._conductor.freeGamesData.isFreeGameActive && !this._conductor.freeSpinsData.isFreespinsActive && !this._isReelSpinning) 
                {
                    if (this._conductor.response.respin.nextSpinCosts[0].numberOf != 0) 
                    {
                        this._respinEngine.toggleRespins(true);
                    }
                }
                else 
                {
                    this._respinEngine.toggleRespins(false);
                    this.showSpinCost();
                }
            }
            return;
        }

        internal function onRelease(arg1:mgs.aurora.slots.components.respin.RespinEvent):void
        {
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_CLICK));
            this._respinReel = arg1.id;
            var loc1:*=this.spinCost();
            if (loc1[arg1.id] > this._balance) 
            {
                syndicate(this, SERVICE_INSUFFICIENT, null);
            }
            else if (loc1[arg1.id] >= this._conductor.betData.betValue * this._conductor.settings.respinWarningMultiplier && !(this._respinReel == this._dialogOnReelId)) 
            {
                this._dialogOnReelId = this._respinReel;
                this.showDialog(arg1.id, loc1[arg1.id]);
            }
            else 
            {
                this.respinReel(arg1.id);
            }
            return;
        }

        internal function onOut(arg1:mgs.aurora.slots.components.respin.RespinEvent):void
        {
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_ROLLOUT));
            return;
        }

        internal function spinCost():Array
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            if (this._conductor.response.respin.numberOf > 0) 
            {
                loc1 = this._conductor.response.respin.nextSpinCosts[0];
                loc2 = [];
                loc3 = 0;
                while (loc3 < loc1.numberOf) 
                {
                    loc2.push(loc1.nextSpinCosts[loc3].cost);
                    ++loc3;
                }
                return loc2;
            }
            return [];
        }

        internal function onAcceptRelease():void
        {
            if (this._respinDialog.parent == mgs.aurora.games.framework.StageReference.getLevel("Dialogs")) 
            {
                this._respinDialog.parent.removeChild(this._respinDialog);
                syndicate(this, SERVICE_DIALOG_CLOSED);
            }
            this.respinReel(this._respinReel);
            return;
        }

        internal function onCancelRelease():void
        {
            this._dialogOnReelId = -1;
            if (this._respinDialog.parent == mgs.aurora.games.framework.StageReference.getLevel("Dialogs")) 
            {
                this._respinDialog.parent.removeChild(this._respinDialog);
                syndicate(this, SERVICE_DIALOG_CLOSED);
            }
            return;
        }

        internal function showSpinCost():void
        {
            if (this.isReady) 
            {
                if (this._conductor.response.respin.hasRespins) 
                {
                    this._respinEngine.showSpinCost();
                }
            }
            return;
        }

        internal function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.hideRespinCost = this._conductor.options.hideRespinCost;
            }
            return;
        }

        internal function onFreespins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._respinEngine.hide();
            return;
        }

        internal function onBonusGameClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.setRespins();
                this._respinEngine.toggleRespins(false);
            }
            return;
        }

        internal function onBonusGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.show();
                this._respinEngine.toggleRespins(false);
            }
            return;
        }

        internal function onBacktoGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.show();
                this._respinEngine.hideSpinCost();
                this._respinEngine.toggleRespins(false);
            }
            return;
        }

        internal function onUseNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.toggleRespins(false);
                this.showSpinCost();
            }
            return;
        }

        internal function onDialogsOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.stopFlashing();
            }
            return;
        }

        internal function onDialogsClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.startFlashing();
            }
            return;
        }

        internal function onBetChanged(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._lockUpdate = true;
                this._respinEngine.toggleRespins(false);
            }
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPIN_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACTION));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_CLOSED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DIALOG_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INSUFFICIENT));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewUpdate, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BETMAX);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStopAutoplay, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_STOP_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStopAutoplay, mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.AutoPlayData.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBacktoGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBacktoGame, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusGame, mgs.aurora.games.logicBlocks.publishers.BonusServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BonusServer.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusGame, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusGameClosed, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_START_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreespins, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_LATER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogsOpen, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogsClosed, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogsOpen, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogsClosed, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChanged, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BET_CHANGED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_RESPINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBalanceUpdate, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_BANK_BALANCE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onViewUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this._onConfig == false) 
            {
                this._onConfig = true;
                loc1 = new XMLList(arg1.data);
                this._resourceId = loc1.@resourceId;
                this._buttonId = loc1.@buttonId;
                this._level = loc1.@level;
                this._bigCost = loc1.@bigCost;
                this._smallCost = loc1.@smallCost;
                this._respinDelay = loc1.@respinDelay;
            }
            return;
        }

        internal function setup():void
        {
            var i:int;
            var yes:flash.display.MovieClip;
            var no:flash.display.MovieClip;

            var loc1:*;
            yes = null;
            no = null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._respinEngine = new mgs.aurora.slots.components.respin.RespinEngine();
            this._respinEngine.addEventListener(mgs.aurora.slots.components.respin.RespinEngine.EVENT_MOUSE_OVER, this.onOver);
            this._respinEngine.addEventListener(mgs.aurora.slots.components.respin.RespinEngine.EVENT_MOUSE_RELEASE, this.onRelease);
            this._respinEngine.addEventListener(mgs.aurora.slots.components.respin.RespinEngine.EVENT_MOUSE_OUT, this.onOut);
            this._respinEngine.setup(mgs.aurora.games.framework.StageReference.getLevel(this._level), this._buttonId, this._resourceId, this._smallCost, this._bigCost);
            i = 0;
            while (i < this._conductor.reelData.columns) 
            {
                this._respinEngine.addRespin(i * (this._conductor.reelData.xSpacing + this._conductor.reelData.width) + this._conductor.reelData.x, this._conductor.reelData.rows * (this._conductor.reelData.ySpacing + this._conductor.reelData.height) + this._conductor.reelData.y);
                ++i;
            }
            this._respinDialog = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("respinCostDialogue");
            try 
            {
                yes = this._respinDialog.getChildByName("yes") as flash.display.MovieClip;
                this.yesBtn = new mgs.aurora.games.common.components.ui.components.button.ArtButton(yes, this.onAcceptRelease, true);
                no = this._respinDialog.getChildByName("no") as flash.display.MovieClip;
                this.noBtn = new mgs.aurora.games.common.components.ui.components.button.ArtButton(no, this.onCancelRelease, true);
            }
            catch (e:TypeError)
            {
                _trace("Could find [yes] or [no] buttons for dialog. Check your Art setup.", "error", this, 16711680);
            }
            this._largeNumbers = new mgs.aurora.games.common.components.utils.CustomFontExt("DialogueRespinCost", 5);
            this._respinCostFont = new mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite(this._largeNumbers, mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN);
            try 
            {
                this._respinCostFont.addTo(this._respinDialog.getChildByName("num") as flash.display.MovieClip);
                this._respinCostFont.text = "0.00";
            }
            catch (e:TypeError)
            {
                _trace("Could find [num] movieclip. Check your Art setup.", "error", this, 16711680);
            }
            if (this.isReady) 
            {
                this._respinEngine.hideRespinCost = this._conductor.options.hideRespinCost;
                this._respinEngine.setupCost();
                this._respinEngine.setRespinCost(this.spinCost());
                this._respinEngine.toggleRespins(true);
                this._respinEngine.show();
            }
            this._balanceCheck = mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance > 0 ? true : false;
            this.setRespins();
            return;
        }

        internal function onUseLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.setRespins();
                if (!this._conductor.freeGamesData.isFreeGameActive && this._conductor.freeGamesData.previousFreeGameTest) 
                {
                    this._respinEngine.hideSpinCost();
                }
            }
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._balance = mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data).player.balance;
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._lockUpdate = false;
                this._isReelSpinning = false;
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    {
                        this._respinEngine.toggleRespins(false);
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                    {
                        this._respinEngine.hide();
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                    {
                        this._respinEngine.toggleRespins(false);
                        break;
                    }
                    default:
                    {
                        this._respinEngine.setRespinCost(this.spinCost());
                        this.setRespins();
                        if (!this._conductor.freeSpinsData.isFreespinsActive && !this._conductor.autoplay.autoPlayActive) 
                        {
                            this.showSpinCost();
                        }
                        break;
                    }
                }
            }
            return;
        }

        internal function onBalanceUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._balance = Number(arg1.data);
            return;
        }

        internal function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._respinEngine.toggleRespins(false);
            }
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.betData.betValue > this._balance) 
            {
                return;
            }
            this._dialogOnReelId = -1;
            this._lockUpdate = true;
            if (this.isReady) 
            {
                this._isReelSpinning = true;
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                    {
                        this._respinEngine.hide();
                        break;
                    }
                    default:
                    {
                        this.setRespins();
                        this._respinEngine.hideSpinCost();
                        break;
                    }
                }
            }
            return;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._onConfig;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                if (this.yesBtn) 
                {
                    this.yesBtn.dispose();
                    this.yesBtn = null;
                }
                if (this.noBtn) 
                {
                    this.noBtn.dispose();
                    this.noBtn = null;
                }
                if (this._respinEngine) 
                {
                    this._respinEngine.removeEventListener(mgs.aurora.slots.components.respin.RespinEngine.EVENT_MOUSE_OVER, this.onOver);
                    this._respinEngine.removeEventListener(mgs.aurora.slots.components.respin.RespinEngine.EVENT_MOUSE_RELEASE, this.onRelease);
                    this._respinEngine.removeEventListener(mgs.aurora.slots.components.respin.RespinEngine.EVENT_MOUSE_OUT, this.onOut);
                    this._respinEngine.dispose();
                    this._respinEngine = null;
                }
                this._resourceId = null;
                this._buttonId = null;
                this._level = null;
                this._bigCost = null;
                this._smallCost = null;
                this._respinDialog = null;
                this._respinCostFont = null;
                if (this._largeNumbers) 
                {
                    this._largeNumbers.dispose();
                    this._largeNumbers = null;
                }
                this._respinCost = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_RESPIN";

        public static const SERVICE_RESPIN:String="RESPIN";

        public static const SERVICE_RESPIN_START:String="RESPIN_START";

        public static const SERVICE_ACTION:String="ACTION";

        public static const SERVICE_DIALOG_OPEN:String="DIALOG_OPEN";

        public static const SERVICE_DIALOG_CLOSED:String="DIALOG_CLOSED";

        public static const SERVICE_INSUFFICIENT:String="INSUFFICIENT";

        public static const ACTION_CLICK:String="click";

        public static const ACTION_ROLLOVER:String="rollover";

        public static const ACTION_ROLLOUT:String="rollout";

        internal var _respinDelay:Number;

        internal var _smallCost:String;

        internal var _bigCost:String;

        internal var _buttonId:String;

        internal var _resourceId:String;

        internal var _balanceCheck:Boolean=true;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _onConfig:Boolean=false;

        internal var _viewReady:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _isConfig:Boolean=false;

        internal var _balance:Number;

        internal var _lockUpdate:Boolean=false;

        internal var noBtn:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _level:String;

        internal var yesBtn:mgs.aurora.games.common.components.ui.components.button.ArtButton;

        internal var _isReelSpinning:Boolean=false;

        internal var _dialogOnReelId:int=-1;

        internal var _respinReel:int;

        internal var _respinCost:Array;

        internal var _largeNumbers:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _respinCostFont:mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite;

        internal var _respinDialog:flash.display.MovieClip;

        internal var _respinEngine:mgs.aurora.slots.components.respin.RespinEngine;
    }
}


//            class RespinDisclaimerAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class RespinDisclaimerAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function RespinDisclaimerAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.RespinDisclaimerAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.RespinDisclaimerAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesExit, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGameData, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            var loc1:*;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                {
                    this._hasShownBefore = true;
                    break;
                }
            }
            try 
            {
                if (this.canDo) 
                {
                    this._dialog = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("respinDisclaimer");
                    this._dialog.x = 0;
                    this._dialog.y = 0;
                    this._dialog.name = "respinDisclaimer";
                    if (this.canDo) 
                    {
                        this.show();
                    }
                }
            }
            catch (e:TypeError)
            {
                _trace("Could not find [\'respinDisclaimer\'] movieclip. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function onFreeGamesUseNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this.canDo && this.canShow) 
                {
                    this.show();
                }
            }
            return;
        }

        internal function onFreeGameData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this.canDo && this.canShow) 
                {
                    this.show();
                }
            }
            return;
        }

        internal function onFreeGamesExit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this.canDo && this.canShow) 
                {
                    this.show();
                }
            }
            return;
        }

        public function show():void
        {
            var ok:flash.display.MovieClip;
            var abut:mgs.aurora.games.common.components.ui.components.button.ArtButton;

            var loc1:*;
            ok = null;
            abut = null;
            if (this.isReady && this.canShow) 
            {
                if (!mgs.aurora.games.logicBlocks.data.FreeGamesData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME)).isFreeGameActive || this._hasShownBefore) 
                {
                    return;
                }
                if (this._dialog.parent == null) 
                {
                    try 
                    {
                        this._hasShownBefore = true;
                        this._dialog["HitBlock"].addEventListener(flash.events.MouseEvent.CLICK, this.onOKRelease);
                        ok = this._dialog.getChildByName("ok") as flash.display.MovieClip;
                        abut = new mgs.aurora.games.common.components.ui.components.button.ArtButton(ok, this.down, true);
                        mgs.aurora.games.framework.StageReference.getLevel("Dialogs").addChild(this._dialog);
                    }
                    catch (e:TypeError)
                    {
                        _trace("Could find [" + _dialog.name + "] movieclip. Check your Art setup.", "error", this, 16711680);
                        _trace(e.getStackTrace(), "error", this, 16711680);
                    }
                    syndicate(this, SERVICE_SHOW);
                }
            }
            return;
        }

        internal function down():void
        {
            this.remove();
            syndicate(this, SERVICE_OK);
            return;
        }

        internal function onOKRelease(arg1:flash.events.MouseEvent):void
        {
            this.remove();
            this._dialog = null;
            syndicate(this, SERVICE_OK);
            return;
        }

        public function remove():void
        {
            try 
            {
                if (this._dialog.parent == mgs.aurora.games.framework.StageReference.getLevel("Dialogs")) 
                {
                    syndicate(this, SERVICE_HIDE);
                    this._dialog.parent.removeChild(this._dialog);
                }
            }
            catch (e:TypeError)
            {
            };
            return;
        }

        public function get canShow():Boolean
        {
            return !this._hasShownBefore;
        }

        public function get canDo():Boolean
        {
            return this._conductor.freeGamesData.hasFreeGames;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasView;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_RESPIN_DISCLAIMER";

        public static const SERVICE_OK:String="OK";

        public static const SERVICE_SHOW:String="SHOW";

        public static const SERVICE_HIDE:String="HIDE";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _hasView:Boolean=false;

        internal var _hasShownBefore:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _dialog:flash.display.MovieClip;
    }
}


//            class RollingReelsAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.symbol.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class RollingReelsAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function RollingReelsAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.RollingReelsAgent");
            this._reelWinVAs = new Vector.<Vector.<int>>();
            this._reelDropVAs = new Vector.<Vector.<int>>();
            this._createdSymbols = new Vector.<mgs.aurora.slots.components.symbol.SymbolState>();
            return;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get isPresentingRollingReels():Boolean
        {
            return false;
        }

        protected function get currentData():mgs.aurora.games.common.dataTypes.RollingReelsConfig
        {
            return this._rollingReelConfigData[this._currentConfigIndex];
        }

        protected function SetCurrentConfigData():void
        {
            var loc1:*=0;
            while (loc1 < this._rollingReelConfigData.length) 
            {
                if (this._rollingReelConfigData[loc1].activeInView(this._conductor.view.view)) 
                {
                    this._currentConfigIndex = loc1;
                    break;
                }
                ++loc1;
            }
            return;
        }

        protected function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (!this.isReady) 
            {
                return;
            }
            if (this._showingMultiplier) 
            {
                if (this._conductor.rollingReels.currentlyActiveStep >= 1) 
                {
                    loc1 = Math.min((this._conductor.rollingReels.currentlyActiveStep - 1), (this.currentData.maxMultiplierValue - 1));
                    this._showingMultiplier = false;
                    loc2 = this.GetMultiplierMovie(loc1);
                    loc2.gotoAndPlay("end");
                }
            }
            return;
        }

        protected function SetMultiplier():void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (this._conductor.rollingReels.currentlyActiveStep >= 0) 
            {
                loc2 = Math.min((this._conductor.rollingReels.currentlyActiveStep - 1), (this.currentData.maxMultiplierValue - 1));
                this._showingMultiplier = true;
                loc1 = this.GetMultiplierMovie(loc2);
                loc1.gotoAndStop("active");
            }
            return;
        }

        protected function onComplete():void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (this._conductor.rollingReels.currentlyActiveStep >= 1) 
            {
                loc1 = Math.min((this._conductor.rollingReels.currentlyActiveStep - 1), (this.currentData.maxMultiplierValue - 1));
                this._showingMultiplier = false;
                loc2 = this.GetMultiplierMovie(loc1);
                loc2.gotoAndPlay("end");
            }
            this._reelTweenDefinitions = null;
            this._conductor.rollingReels.rollingReelsState = mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_COMPLETE;
            syndicate(this, SERVICE_COMPLETE);
            return;
        }

        protected function onMoviWinFirstLoopDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._winsAreBlocked = false;
            this._waitingForDelay = true;
            this.onDelayComplete(arg1);
            return;
        }

        protected function OnFinishShowMultiplier(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            return;
        }

        protected function OnFinishHideMultiplier(arg1:flash.display.MovieClip):void
        {
            return;
        }

        protected function sendStartWins():void
        {
            this._waitingForCountup = true;
            this._waitingForDelay = true;
            syndicate(this, SERVICE_DO_STEP_WINS);
            return;
        }

        protected function OnDoneReelDrop():void
        {
            var loc1:*=0;
            var loc2:*=null;
            syndicate(this, SERVICE_REEL_LAND);
            var loc3:*;
            var loc4:*=((loc3 = this)._numReelsDropped + 1);
            loc3._numReelsDropped = loc4;
            if (this._numReelsDropped == this._numReelsWithExplosions) 
            {
                syndicate(this, SERVICE_SHOW_STEP_SYMBOLS, new mgs.aurora.games.framework.TransportLayer(this._conductor.rollingReels.currentlyActiveStep));
                loc1 = 0;
                while (loc1 < this._createdSymbols.length) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer).removeChild(this._createdSymbols[loc1]);
                    ++loc1;
                }
                if (this._conductor.rollingReels.steps[this._conductor.rollingReels.currentlyActiveStep].win > 0) 
                {
                    syndicate(this, SERVICE_MULTIPLIER, new mgs.aurora.games.framework.TransportLayer(this._conductor.rollingReels.currentlyActiveStep));
                    if (this._conductor.rollingReels.currentlyActiveStep < this.currentData.maxMultiplierValue) 
                    {
                        if (this._conductor.rollingReels.currentlyActiveStep != 0) 
                        {
                            if (this._conductor.rollingReels.currentlyActiveStep > 0) 
                            {
                                this._showingMultiplier = true;
                                loc2 = this.GetMultiplierMovie((this._conductor.rollingReels.currentlyActiveStep - 1));
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc2, this.OnFinishHideMultiplier, 1, "end");
                                loc2 = this.GetMultiplierMovie(this._conductor.rollingReels.currentlyActiveStep);
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc2, this.OnFinishShowMultiplier, 1, "play", "active");
                            }
                        }
                        else 
                        {
                            this._showingMultiplier = true;
                            loc2 = this.GetMultiplierMovie(this._conductor.rollingReels.currentlyActiveStep);
                            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc2, this.OnFinishShowMultiplier, 1, "play", "active");
                        }
                    }
                    new org.as3lib.kitchensync.action.KSFunction(this.sendStartWins, this.currentData.delayBeforeStartWins).start();
                }
                else 
                {
                    this.onComplete();
                }
            }
            return;
        }

        protected function GetSymbolIdFromVA(arg1:int, arg2:mgs.aurora.games.logicBlocks.data.types.VisAreaPacket):int
        {
            var loc1:*=Math.floor(arg1 / this._reelServer.reels.columns);
            var loc2:*=arg1 - loc1 * this._reelServer.reels.columns;
            var loc3:*=(this._reelServer.reels.rows - 1) - loc1;
            var loc4:*;
            return loc4 = arg2.visAreaSymbols[loc3][loc2];
        }

        protected function doDropReel(arg1:int):void
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=0;
            var loc11:*=NaN;
            var loc12:*=null;
            var loc1:*=this._reelWinVAs[arg1].length;
            var loc2:*=this._reelDropVAs[arg1].length;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = this._reelDropVAs[arg1][loc3];
                loc5 = Math.floor(loc4 / this._reelServer.reels.columns);
                if (this._conductor.rollingReels.currentlyActiveStep != 0) 
                {
                    loc6 = this.GetSymbolIdFromVA(loc4, this._conductor.rollingReels.steps[(this._conductor.rollingReels.currentlyActiveStep - 1)].visArea);
                }
                else 
                {
                    loc6 = this.GetSymbolIdFromVA(loc4, this._conductor.response.visarea);
                }
                loc7 = this._symbolController.getSymbolStateAtPosn(loc4);
                (loc8 = this._symbolController.symbolProvider.getSymbolState(loc6.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC)).x = loc7.x;
                loc8.y = loc7.y;
                this._createdSymbols.push(loc8);
                this._symbolController.flashSymbol(loc4, mgs.aurora.slots.components.symbol.SymbolController.HIDE);
                mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer).addChild(loc8) as flash.display.MovieClip;
                loc9 = (loc2 - 1) - loc3;
                if ((loc11 = (loc10 = loc5 - loc9) * loc8.height) > 0) 
                {
                    this._reelTweenDefinitions.push(new RollingReelsSymbolTweener(loc8, loc11, this.currentData.reelDropSpeed / 1000, 1, 1).run());
                }
                ++loc3;
            }
            loc3 = 0;
            while (loc3 < loc1) 
            {
                loc4 = (loc5 = this._reelDropVAs[arg1].length + loc3) * this._reelServer.reels.columns + arg1;
                loc6 = this.GetSymbolIdFromVA(loc4, this._conductor.rollingReels.steps[this._conductor.rollingReels.currentlyActiveStep].visArea);
                loc7 = this._symbolController.getSymbolStateAtPosn(loc4);
                loc11 = (loc8 = this._symbolController.symbolProvider.getSymbolState(loc6.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC)).height * loc1;
                loc8.x = loc7.x;
                loc8.y = loc7.y - loc11;
                mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer).addChild(loc8) as flash.display.MovieClip;
                this._createdSymbols.push(loc8);
                loc12 = new RollingReelsSymbolTweener(loc8, loc11, this.currentData.reelDropSpeed / 1000, this.currentData.bounceHeight, this.currentData.bounceTime / 1000);
                this._reelTweenDefinitions.push(loc12);
                if (loc3 != (loc1 - 1)) 
                {
                    loc12.run();
                }
                else 
                {
                    loc12.run(this.OnDoneReelDrop);
                }
                ++loc3;
            }
            return;
        }

        protected function onCompleteExplosionReelDrop(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer).removeChild(arg1);
            var loc1:*=arg1.name;
            var loc2:*=loc1.split("_");
            var loc3:*=int(loc2[1]);
            var loc4:*=Math.floor(loc3 / this._reelServer.reels.columns);
            var loc5:*=loc3 - loc4 * this._reelServer.reels.columns;
            this.doDropReel(loc5);
            return;
        }

        protected function onCompleteExplosion(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer).removeChild(arg1);
            return;
        }

        protected function hideExplodedSymbol(arg1:int):void
        {
            this._symbolController.flashSymbol(arg1, mgs.aurora.slots.components.symbol.SymbolController.HIDE);
            return;
        }

        protected function explodeSymbol(arg1:int, arg2:Boolean):void
        {
            var loc1:*=this._explosions[arg1];
            mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer).addChild(loc1) as flash.display.MovieClip;
            loc1.gotoAndStop(1);
            syndicate(this, SERVICE_EXPLODE);
            new org.as3lib.kitchensync.action.KSFunction(this.hideExplodedSymbol, 1000, arg1).start();
            if (arg2) 
            {
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc1, this.onCompleteExplosionReelDrop);
            }
            else 
            {
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc1, this.onCompleteExplosion);
            }
            return;
        }

        protected function doReelExplosions():void
        {
            var cumulativeExplosionDelay:int;
            var scheduler:org.as3lib.kitchensync.action.group.KSSequenceGroup;
            var reelIndx:int;
            var winVAs:__AS3__.vec.Vector.<int>;
            var i:int;
            var doReelDropAfter:Boolean;

            var loc1:*;
            winVAs = null;
            i = 0;
            doReelDropAfter = false;
            cumulativeExplosionDelay = 1;
            scheduler = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            scheduler.autoDelete = true;
            reelIndx = 0;
            while (reelIndx < this._reelWinVAs.length) 
            {
                winVAs = this._reelWinVAs[reelIndx];
                if (winVAs.length != 0) 
                {
                    try 
                    {
                        i = 0;
                        while (i < winVAs.length) 
                        {
                            doReelDropAfter = i == (winVAs.length - 1);
                            scheduler.addAction(new org.as3lib.kitchensync.action.KSFunction(this.explodeSymbol, this.currentData.delayBetweenSymbolExplode, winVAs[i], doReelDropAfter));
                            ++i;
                        }
                    }
                    catch (e:Error)
                    {
                        _trace("Error in building RollingReels explosion sequence.", "error", this, 16711680);
                        _trace(e.getStackTrace(), "error", this, 16711680);
                    }
                }
                ++reelIndx;
            }
            scheduler.start();
            return;
        }

        protected function prepForNextRollingReelsStep():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            this.resetWinVAs();
            this._reelTweenDefinitions = new Vector.<RollingReelsSymbolTweener>(0);
            while (this._createdSymbols.length) 
            {
                this._createdSymbols.pop();
            }
            var loc4:*=this._reelServer.reels.rows * this._reelServer.reels.columns;
            var loc5:*=new Vector.<Boolean>(loc4, true);
            var loc6:*=0;
            while (loc6 < loc5.length) 
            {
                loc5[loc6] = false;
                ++loc6;
            }
            var loc7:*=this._conductor.rollingReels.steps[this._conductor.rollingReels.currentlyActiveStep];
            var loc8:*=0;
            while (loc8 < loc7.dissolvedVABoxes.length) 
            {
                loc1 = loc7.dissolvedVABoxes[loc8];
                loc5[loc1] = true;
                ++loc8;
            }
            var loc9:*=(loc5.length - 1);
            while (loc9 >= 0) 
            {
                loc2 = Math.floor(loc9 / this._reelServer.reels.columns);
                loc3 = loc9 - loc2 * this._reelServer.reels.columns;
                if (loc5[loc9]) 
                {
                    this._reelWinVAs[loc3].push(loc9);
                }
                else 
                {
                    this._reelDropVAs[loc3].push(loc9);
                }
                --loc9;
            }
            this._numReelsWithExplosions = 0;
            this._numReelsDropped = 0;
            var loc10:*=0;
            while (loc10 < this._reelWinVAs.length) 
            {
                if (this._reelWinVAs[loc10].length > 0) 
                {
                    var loc11:*;
                    var loc12:*=((loc11 = this)._numReelsWithExplosions + 1);
                    loc11._numReelsWithExplosions = loc12;
                }
                ++loc10;
            }
            return;
        }

        protected function resetWinVAs():void
        {
            while (this._reelWinVAs.length > 0) 
            {
                this._reelWinVAs.pop();
            }
            var loc1:*=0;
            while (loc1 < this._reelServer.reels.columns) 
            {
                this._reelWinVAs.push(new Vector.<int>());
                ++loc1;
            }
            while (this._reelDropVAs.length > 0) 
            {
                this._reelDropVAs.pop();
            }
            var loc2:*=0;
            while (loc2 < this._reelServer.reels.columns) 
            {
                this._reelDropVAs.push(new Vector.<int>());
                ++loc2;
            }
            return;
        }

        protected function startNextRollingReelsStep():void
        {
            this.prepForNextRollingReelsStep();
            this.doReelExplosions();
            return;
        }

        protected function tryStartNextStep():void
        {
            if (this._waitingForCountup || this._waitingForDelay) 
            {
                return;
            }
            if (this._conductor.rollingReels.rollingReelsState != mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING) 
            {
                syndicate(this, SERVICE_STOP_WINS);
                loc2 = ((loc1 = this._conductor.rollingReels).currentlyActiveStep + 1);
                loc1.currentlyActiveStep = loc2;
                syndicate(this, SERVICE_SET_ACTIVE_STEP);
                new org.as3lib.kitchensync.action.KSFunction(this.startNextRollingReelsStep, this.currentData.delayBeforeStartNextStep).start();
            }
            else 
            {
                this._conductor.rollingReels.rollingReelsState = mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE;
                this.OnceOffInit();
                syndicate(this, SERVICE_STOP_WINS);
                var loc1:*;
                var loc2:*=((loc1 = this._conductor.rollingReels).currentlyActiveStep + 1);
                loc1.currentlyActiveStep = loc2;
                syndicate(this, SERVICE_SET_ACTIVE_STEP);
                new org.as3lib.kitchensync.action.KSFunction(this.startNextRollingReelsStep, this.currentData.delayBeforeStartNextStep).start();
            }
            return;
        }

        protected function CheckCanStartNextStep():void
        {
            if (!this.isReady || this._winsAreBlocked || !(this._conductor.rollingReels.rollingReelsState == mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING || this._conductor.rollingReels.rollingReelsState == mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE)) 
            {
                return;
            }
            this.tryStartNextStep();
            return;
        }

        protected function onDelayComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._waitingForDelay && (this._conductor.rollingReels.rollingReelsState == mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING || this._conductor.rollingReels.rollingReelsState == mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE)) 
            {
                this._waitingForDelay = false;
                this.CheckCanStartNextStep();
            }
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP_WINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_STEP_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SET_ACTIVE_STEP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DO_STEP_WINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_EXPLODE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_LAND));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_MULTIPLIER));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_ROLLING_REELS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReceiveData, mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.RollingReelsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountUpComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDelayComplete, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.SERVICE_TIME_DELAY_REACHED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBlockingUpdate, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SERVICE_BLOCKING_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMoviWinFirstLoopDone, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_MOVIES_FIRSTLOOP_DONE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            return;
        }

        protected function onBlockingUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data) 
            {
                this.blockWins(true);
            }
            else 
            {
                this.blockWins(false);
                if (!this._waitingForCountup) 
                {
                    this.onCountUpComplete(null);
                }
            }
            return;
        }

        protected function blockWins(arg1:Boolean):void
        {
            this._winsAreBlocked = arg1;
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._xmlConfig = arg1.data;
            this._canConfig = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            var loc4:*=0;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc1:*=this._xmlConfig.rollingReelsSet;
            var loc2:*=loc1.length();
            if (loc2 > 0) 
            {
                this._rollingReelConfigData = new Vector.<mgs.aurora.games.common.dataTypes.RollingReelsConfig>(loc2);
                loc4 = 0;
                while (loc4 < loc2) 
                {
                    this._rollingReelConfigData[loc4] = new mgs.aurora.games.common.dataTypes.RollingReelsConfig(loc1[loc4]);
                    ++loc4;
                }
            }
            this._xmlConfig = null;
            this.SetCurrentConfigData();
            var loc3:*=mgs.aurora.games.framework.StageReference.getLevel(this.currentData.multiplierLayer) as flash.display.Sprite;
            this._multiplierHeader = loc3.getChildByName(this.currentData.multiplierHeader) as flash.display.MovieClip;
            this.SetMultiplier();
            return;
        }

        protected function onReceiveData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            this._conductor.rollingReels.rollingReelsState = mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING;
            this._conductor.rollingReels.currentlyActiveStep = -1;
            this._settingMultiplier = false;
            this._waitingForCountup = true;
            this._waitingForDelay = true;
            this.SetCurrentConfigData();
            var loc1:*=mgs.aurora.games.framework.StageReference.getLevel(this.currentData.layer) as flash.display.Sprite;
            var loc2:*=mgs.aurora.games.framework.StageReference.getLevel(this.currentData.maskLayer) as flash.display.Sprite;
            loc2.graphics.beginFill(16711680);
            loc2.graphics.drawRect(60, 105, 900, 660);
            loc1.mask = loc2;
            var loc3:*=mgs.aurora.games.framework.StageReference.getLevel(this.currentData.multiplierLayer) as flash.display.Sprite;
            this._multiplierHeader = loc3.getChildByName(this.currentData.multiplierHeader) as flash.display.MovieClip;
            return;
        }

        protected function OnceOffInit():void
        {
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            if (this._onceOffInit) 
            {
                return;
            }
            this._onceOffInit = true;
            var loc1:*=mgs.aurora.games.logicBlocks.publishers.SymbolsServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME));
            this._symbolController = loc1.symbolController;
            this._symbolHeight = this._symbolController.getSymbolStateAtPosn(0).height;
            this._reelServer = mgs.aurora.games.logicBlocks.publishers.ReelsServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME));
            this._explosions = new Vector.<flash.display.MovieClip>(0);
            var loc2:*=this._reelServer.reels.rows * this._reelServer.reels.columns;
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                loc4 = this.currentData.explosionMovieName;
                (loc5 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc4)).name = "explosion_" + loc3.toString();
                loc6 = this._symbolController.getSymbolStateAtPosn(loc3);
                loc5.x = loc6.x;
                loc5.y = loc6.y;
                this._explosions.push(loc5);
                ++loc3;
            }
            return;
        }

        protected function GetMultiplierMovie(arg1:int):flash.display.MovieClip
        {
            var loc1:*=this.currentData.getMultiplierMovieName(arg1);
            var loc2:*=(this._multiplierHeader.getChildByName("Skin") as flash.display.MovieClip).getChildByName(loc1) as flash.display.MovieClip;
            return loc2;
        }

        protected function onCountUpComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if ((this._conductor.rollingReels.rollingReelsState == mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING || this._conductor.rollingReels.rollingReelsState == mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE) && this._waitingForCountup) 
            {
                this._waitingForCountup = false;
                this.CheckCanStartNextStep();
            }
            return;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._canConfig && this._hasView;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_ROLLING_REELS";

        public static const SERVICE_UPDATE:String="SERVICE_UPDATE";

        public static const SERVICE_COMPLETE:String="SERVICE_COMPLETE";

        public static const SERVICE_STOP_WINS:String="SERVICE_STOP_WINS";

        public static const SERVICE_SET_ACTIVE_STEP:String="SERVICE_SET_ACTIVE_STEP";

        public static const SERVICE_SHOW_STEP_SYMBOLS:String="SERVICE_SHOW_STEP_SYMBOLS";

        public static const SERVICE_DO_STEP_WINS:String="SERVICE_DO_STEP_WINS";

        public static const SERVICE_EXPLODE:String="SERVICE_EXPLODE";

        public static const SERVICE_REEL_LAND:String="SERVICE_REEL_LAND";

        public static const SERVICE_MULTIPLIER:String="SERVICE_MULTIPLIER";

        protected var _reelServer:mgs.aurora.games.logicBlocks.publishers.ReelsServer;

        protected var _symbolController:mgs.aurora.slots.components.symbol.SymbolController;

        protected var _numReelsDropped:int;

        protected var _numReelsWithExplosions:int;

        protected var _symbolHeight:int;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _currentConfigIndex:int;

        protected var _rollingReelConfigData:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.RollingReelsConfig>;

        protected var _canConfig:Boolean=false;

        internal var _hasView:Boolean=false;

        protected var _xmlConfig:XMLList;

        internal var _hasConductor:Boolean=false;

        internal var _isConfig:Boolean=false;

        internal var _reelTweenDefinitions:__AS3__.vec.Vector.<RollingReelsSymbolTweener>;

        internal var _explosions:__AS3__.vec.Vector.<flash.display.MovieClip>;

        protected var _showingMultiplier:Boolean=false;

        protected var _onceOffInit:Boolean=false;

        protected var _winsAreBlocked:Boolean=false;

        protected var _waitingForDelay:Boolean=false;

        protected var _waitingForCountup:Boolean=false;

        protected var _reelDropVAs:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;

        protected var _reelWinVAs:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;

        protected var _settingMultiplier:Boolean=false;

        protected var _multiplierHeader:flash.display.MovieClip;

        protected var _createdSymbols:__AS3__.vec.Vector.<mgs.aurora.slots.components.symbol.SymbolState>;

        protected var _visAreaData:mgs.aurora.games.logicBlocks.data.VisAreaData;
    }
}

import caurina.transitions.*;
import flash.display.*;
import mgs.aurora.games.common.statics.*;


class RollingReelsSymbolTweener extends Object
{
    public function RollingReelsSymbolTweener(arg1:flash.display.MovieClip, arg2:Number, arg3:Number, arg4:Number, arg5:Number)
    {
        super();
        this._target = arg1;
        this._dropHeight = arg2;
        this._dropPosition = arg1.y + this._dropHeight;
        this._dropTime = arg3;
        this._bounceHeight = arg4;
        this._bounceTime = arg5;
        return;
    }

    public function run(arg1:Function=null):void
    {
        this._callback = arg1;
        caurina.transitions.Tweener.addTween(this._target, {"y":this._dropPosition, "time":this._dropTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_EASE_IN_QUINT, "onComplete":this.startBounceUp});
        return;
    }

    internal function startBounceUp():void
    {
        caurina.transitions.Tweener.addTween(this._target, {"y":this._target.y - this._bounceHeight, "time":this._bounceTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_EASE_OUT_SINE, "onComplete":this.startBounceDown});
        return;
    }

    internal function startBounceDown():void
    {
        if (this._callback == null) 
        {
            caurina.transitions.Tweener.addTween(this._target, {"y":this._target.y + this._bounceHeight, "time":this._bounceTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_EASE_IN_SINE});
        }
        else 
        {
            caurina.transitions.Tweener.addTween(this._target, {"y":this._target.y + this._bounceHeight, "time":this._bounceTime, "transition":mgs.aurora.games.common.statics.TweenStatics.TWEEN_EASE_IN_SINE, "onComplete":this._callback});
        }
        return;
    }

    public function toString():String
    {
        return "" + this._target + "[" + this._dropPosition + "]";
    }

    internal var _target:flash.display.MovieClip;

    internal var _dropHeight:Number;

    internal var _dropPosition:Number;

    internal var _dropTime:Number;

    internal var _bounceHeight:Number;

    internal var _bounceTime:Number;

    internal var _callback:Function;
}

//            class SgiAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.common.components.generic.events.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class SgiAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function SgiAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.SgiAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.SgiAgent");
            this.defineSubscribers();
            return;
        }

        internal function counter(arg1:mgs.aurora.games.common.components.generic.events.CounterEvent):void
        {
            var loc1:*=isNaN(arg1.value) ? 0 : arg1.value;
            if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = loc1 * this._conductor.betData.chipSize;
            }
            else 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = this._conductor.response.player.totalWin - this._conductor.response.slot.win + loc1 * this._conductor.betData.chipSize;
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        public override function dispose():void
        {
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.SgiAgent.SERVICE_PRE_BALANCE_UPDATE));
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountup, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChanged, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BET_CHANGED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponseData, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFGSummaryOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFGSummaryClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespinStart, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            return;
        }

        internal function onRespinStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._respinCost = this._conductor.response.respin.nextSpinCosts[0].nextSpinCosts[arg1.data].cost;
            return;
        }

        internal function onFGSummaryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = 0;
            return;
        }

        internal function onFGSummaryClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = this.winValue;
            return;
        }

        internal function onResponseData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data).id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data).id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
            {
                syndicate(this, SERVICE_PRE_BALANCE_UPDATE);
            }
            return;
        }

        public override function _trace(arg1:*, arg2:String="GCL", arg3:*=null, arg4:Number=0):void
        {
            super._trace(arg1, "API - Session");
            return;
        }

        internal function get winValue():Number
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            var loc2:*=loc1.framework.state;
            switch (loc2) 
            {
                case 0:
                case 1:
                {
                    if (loc1.slot.state == 0) 
                    {
                        return loc1.slot.win;
                    }
                    return loc1.player.totalWin;
                }
                case 2:
                {
                    this._totalBonusWin = loc1.bonusGames.totalBonusWin;
                    return loc1.slot.win + loc1.bonusGames.totalBonusWin;
                }
                case 3:
                case 4:
                case 5:
                case 6:
                {
                    return loc1.player.totalWin;
                }
            }
            return loc1.slot.win;
        }

        internal function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.logicBlocks.data.OptionsData(arg1.data).displayAsCoins) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.displayType = mgs.aurora.api.enums.BalanceDisplayType.COINS;
            }
            else 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.displayType = mgs.aurora.api.enums.BalanceDisplayType.CREDITS;
            }
            return;
        }

        internal function onBetChanged(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = 0;
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.coinSize = this._conductor.betData.chipSize;
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.betValue = arg1.data;
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE || !(this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME)) 
            {
                syndicate(this, SERVICE_PRE_BALANCE_UPDATE);
                mgs.aurora.games.framework.AuroraReference.aurora.banking.balance = this._conductor.response.player.balance;
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = this.winValue;
            }
            return;
        }

        internal function onCountup(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.state.state != null) 
            {
                this._conductor.countup.event.addEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.coinSize = this._conductor.betData.chipSize;
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.betValue = this._conductor.betData.betValue;
            mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = this.winValue;
            mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance = this._conductor.response.player.balance;
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=NaN;
            syndicate(this, SERVICE_PRE_BALANCE_UPDATE);
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.RollingReelsData;
            if (loc1 && (loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING) || loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE))) 
            {
                loc2 = arg1.data * this._conductor.betData.chipSize;
                mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance = this._conductor.response.player.balance - this._conductor.response.slot.win + loc2;
            }
            else 
            {
                mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance = this._conductor.response.player.balance;
            }
            if (this.isReady) 
            {
                if (this._conductor.response.bonusGames != null) 
                {
                    this._totalBonusWin = this._conductor.response.bonusGames.totalBonusWin;
                }
            }
            return;
        }

        internal function onBetData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.FreeGamesData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME));
            var loc2:*=mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME));
            if (loc1.isFreeGameActive) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.betValue = loc2.betValue;
            }
            else if (this._betChanged) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.betValue = loc2.previousBetSize;
            }
            else 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.betValue = loc2.betValue;
            }
            return;
        }

        internal function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._betChanged = true;
            return;
        }

        internal function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            this._betChanged = false;
            this._totalBonusWin = 0;
            if (!this._conductor.freeSpinsData.isFreespinsActive && !this._conductor.freeGamesData.isFreeGameActive) 
            {
                loc1 = mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME)).betValue;
                if (this._respinCost != -1) 
                {
                    loc1 = this._respinCost;
                }
                syndicate(this, SERVICE_PRE_BALANCE_UPDATE);
                mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance = mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance - loc1;
            }
            this._respinCost = -1;
            if (!this._conductor.freeSpinsData.isFreespinsActive && (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE || this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE || this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.SUPERHOLD_MODE_COMPLETE)) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.winValue = 0;
            }
            return;
        }

        internal function onAllReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.winsThisSpin == 0) 
            {
                mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance = this._conductor.response.player.balance;
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_SGI_AGENT";

        public static const SERVICE_PRE_BALANCE_UPDATE:String="PreBalanceUpdate";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _betChanged:Boolean=false;

        internal var _totalBonusWin:Number=0;

        internal var _respinCost:Number=-1;
    }
}


//            class SlotBackgroundAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class SlotBackgroundAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function SlotBackgroundAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.SlotBackgroundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.SlotBackgroundAgent");
            return;
        }

        public function defineServices():void
        {
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigLoaded, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_BACKGROUNDS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReels, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsComplete, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_ASSETS_REMOVED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartFreespinsAfterBonus, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_START_CLOSE);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this.setup();
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            if (this._hasView) 
            {
                this.attemptToSetScene();
            }
            else 
            {
                loc1 = mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._hasView = true;
                        break;
                    }
                    ++loc3;
                }
                this.setup();
            }
            return;
        }

        internal function onConfigLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc4:*=0;
            this._hasConfig = true;
            var loc1:*=new XML(arg1.data);
            var loc2:*=loc1.scene;
            var loc3:*;
            if ((loc3 = loc2.length()) > 0) 
            {
                this._scenes = new Vector.<mgs.aurora.games.logicBlocks.agents.BackgroundScene>(loc3);
                loc4 = 0;
                while (loc4 < loc3) 
                {
                    this._scenes[loc4] = new mgs.aurora.games.logicBlocks.agents.BackgroundScene(loc2[loc4]);
                    ++loc4;
                }
            }
            loc2 = loc1.dispatchesBackgroundClicks.level;
            if ((loc3 = loc2.length()) > 0) 
            {
                this._backgroundClickLevels = new Vector.<String>(loc3);
                while (--loc3 > -1) 
                {
                    this._backgroundClickLevels[loc3] = loc2[loc3].@id.toString();
                }
            }
            this.setup();
            return;
        }

        internal function setup():void
        {
            var loc1:*=0;
            if (!(this._conductor && this._hasView && this._hasConfig)) 
            {
                return;
            }
            if (this._backgroundClickLevels) 
            {
                loc1 = this._backgroundClickLevels.length;
                while (--loc1 > -1) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this._backgroundClickLevels[loc1]).addEventListener(flash.events.MouseEvent.CLICK, this.onClick);
                }
            }
            this.attemptToSetScene();
            return;
        }

        internal function attemptToSetScene():void
        {
            var loc1:*=this.getSceneForView(this._conductor.view.view);
            if (loc1 != null) 
            {
                this.switchToScene(loc1);
            }
            return;
        }

        internal function getSceneForView(arg1:String):mgs.aurora.games.logicBlocks.agents.BackgroundScene
        {
            var loc1:*=0;
            while (loc1 < this._scenes.length) 
            {
                if (this._scenes[loc1].ActiveInView(arg1)) 
                {
                    return this._scenes[loc1];
                }
                ++loc1;
            }
            return null;
        }

        internal function onClick(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.PUBLISHER_NAME);
            if (!loc1) 
            {
                return;
            }
            mgs.aurora.games.framework.Broker.instance.syndicate(mgs.aurora.games.framework.server.Publisher(loc1), mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.SERVICE_CLICK, null);
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this.canDo) 
            {
                this.attemptToSetScene();
            }
            return;
        }

        internal function onStartFreespinsAfterBonus(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.attemptToSetScene();
            return;
        }

        internal function switchToScene(arg1:mgs.aurora.games.logicBlocks.agents.BackgroundScene):void
        {
            var loc1:*=null;
            if (!arg1 || this._currentScene == arg1 || !this.CheckAllSceneAssetsLoaded(arg1)) 
            {
                return;
            }
            this.clearCurrentScene();
            this._currentScene = arg1;
            this._currentScene.reset();
            while (this._currentScene.hasNext()) 
            {
                loc1 = mgs.aurora.games.logicBlocks.data.BackgroundSceneAsset(this._currentScene.next());
                mgs.aurora.games.framework.StageReference.getLevel(loc1.layer).addChild(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc1.id));
            }
            return;
        }

        internal function CheckAllSceneAssetsLoaded(arg1:mgs.aurora.games.logicBlocks.agents.BackgroundScene):Boolean
        {
            var loc1:*=null;
            var loc2:*=null;
            arg1.reset();
            while (arg1.hasNext()) 
            {
                loc2 = null;
                loc1 = mgs.aurora.games.logicBlocks.data.BackgroundSceneAsset(arg1.next());
                if (mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded(loc1.id)) 
                {
                    continue;
                }
                return false;
            }
            return true;
        }

        internal function clearCurrentScene():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (!this._currentScene) 
            {
                return;
            }
            this._currentScene.reset();
            while (this._currentScene.hasNext()) 
            {
                loc1 = mgs.aurora.games.logicBlocks.data.BackgroundSceneAsset(this._currentScene.next());
                loc2 = mgs.aurora.games.framework.StageReference.getLevel(loc1.layer);
                loc3 = loc2.getChildByName(loc1.id);
                if (!loc3) 
                {
                    continue;
                }
                loc2.removeChild(loc3);
            }
            return;
        }

        public function get canShow():Boolean
        {
            return this._conductor && this._hasView && this._hasConfig;
        }

        public function get canDo():Boolean
        {
            return this._conductor && this._hasView && this._hasConfig;
        }

        public function get isReady():Boolean
        {
            return this._hasConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._hasConfig && this._conductor && this._hasView;
        }

        protected function onWildReels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            this._disabledAssets = arg1.data;
            var loc1:*=0;
            while (loc1 < this._disabledAssets.length) 
            {
                loc2 = 0;
                while (loc2 < this._currentScene.assets.length) 
                {
                    if ((loc3 = this._currentScene.assets[loc2]).id == this._disabledAssets[loc1]) 
                    {
                        loc4 = flash.display.MovieClip(mgs.aurora.games.framework.StageReference.getLevel(loc3.layer).getChildByName(loc3.id));
                        caurina.transitions.Tweener.addTween(loc4, {"alpha":0, "time":5, "transition":"linear"});
                    }
                    ++loc2;
                }
                ++loc1;
            }
            return;
        }

        protected function onWildReelsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=0;
            while (loc1 < this._disabledAssets.length) 
            {
                loc2 = 0;
                while (loc2 < this._currentScene.assets.length) 
                {
                    if ((loc3 = this._currentScene.assets[loc2]).id == this._disabledAssets[loc1]) 
                    {
                        loc4 = flash.display.MovieClip(mgs.aurora.games.framework.StageReference.getLevel(loc3.layer).getChildByName(loc3.id));
                        caurina.transitions.Tweener.addTween(loc4, {"alpha":1, "time":5, "transition":"linear"});
                    }
                    ++loc2;
                }
                ++loc1;
            }
            return;
        }

        public override function dispose():void
        {
            var i:int;

            var loc1:*;
            i = 0;
            try 
            {
                this.clearCurrentScene();
                this._currentScene = null;
                this._scenes.forEach(function (arg1:mgs.aurora.games.logicBlocks.agents.BackgroundScene, arg2:int, arg3:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.agents.BackgroundScene>):void
                {
                    arg1.dispose();
                    arg1 = null;
                    return;
                })
                if (this._backgroundClickLevels) 
                {
                    i = this._backgroundClickLevels.length;
                    while ((i = (i - 1)) > -1) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(this._backgroundClickLevels[i]).removeEventListener(flash.events.MouseEvent.CLICK, this.onClick);
                    }
                    this._backgroundClickLevels = null;
                }
                this._conductor = null;
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_SLOTGAME_BACKGROUND";

        protected var _isConfig:Boolean=false;

        protected var _hasConfig:Boolean=false;

        protected var _hasView:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent=null;

        internal var _currentScene:mgs.aurora.games.logicBlocks.agents.BackgroundScene;

        internal var _scenes:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.agents.BackgroundScene>;

        internal var _backgroundClickLevels:__AS3__.vec.Vector.<String>;

        internal var _disabledAssets:__AS3__.vec.Vector.<String>;
    }
}


//            class SoundLogicAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class SoundLogicAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function SoundLogicAgent(arg1:String)
        {
            super(arg1);
            setClassDescription("mgs.aurora.games.slots.agents.sound.SoundLogicAgent");
            this.defineSubscribers();
            return;
        }

        public function defineServices():void
        {
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY, 9000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SOUNDS_ENGINE, 9000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY, 9000);
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._symbolsData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.VisAreaData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.VisAreaData;
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasView;
        }

        protected function getSlotSoundServer():mgs.aurora.games.logicBlocks.publishers.SlotSoundServer
        {
            return mgs.aurora.games.logicBlocks.publishers.SlotSoundServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.SoundServer.PUBLISHER_NAME));
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_SoundLogicAgent";

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _hasView:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _symbolsData:mgs.aurora.games.logicBlocks.data.VisAreaData;
    }
}


//            class TransitionAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.ui.transitions.*;
    import mgs.aurora.games.common.components.ui.transitions.data.*;
    import mgs.aurora.games.common.components.ui.transitions.factories.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    
    public class TransitionAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function TransitionAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.TransitionAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.slots.agents.TransitionAgent");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_TRANSITIONS);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.conductor = arg1.data;
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var t:mgs.aurora.games.framework.ITransportLayer=null;
            var transitionsList:XMLList;
            var index_count:int;
            var node:XML;

            var loc1:*;
            node = null;
            t = arg1;
            transitionsList = t.data as XMLList;
            if (this.transitionData) 
            {
                return;
            }
            index_count = -1;
            this.transitionData = new Vector.<mgs.aurora.games.common.components.ui.transitions.data.TransitionData>(transitionsList.length(), true);
            var loc2:*=0;
            var loc3:*=transitionsList;
            for each (node in loc3) 
            {
                var loc4:*;
                var loc6:*=0;
                var loc7:*=node.general.setting;
                var loc5:*=new XMLList("");
                for each (var loc8:* in loc7) 
                {
                    var loc9:*;
                    with (loc9 = loc8) 
                    {
                        if (@id == "destination") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                loc6 = 0;
                loc7 = node.general.setting;
                loc5 = new XMLList("");
                for each (loc8 in loc7) 
                {
                    with (loc9 = loc8) 
                    {
                        if (@id == "maskLayer") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                loc6 = 0;
                loc7 = node.general.setting;
                loc5 = new XMLList("");
                for each (loc8 in loc7) 
                {
                    with (loc9 = loc8) 
                    {
                        if (@id == "revealDestination") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                loc6 = 0;
                loc7 = node.general.setting;
                loc5 = new XMLList("");
                for each (loc8 in loc7) 
                {
                    with (loc9 = loc8) 
                    {
                        if (@id == "type") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                loc6 = 0;
                loc7 = node.general.setting;
                loc5 = new XMLList("");
                for each (loc8 in loc7) 
                {
                    with (loc9 = loc8) 
                    {
                        if (@id == "direction") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                loc6 = 0;
                loc7 = node.general.setting;
                loc5 = new XMLList("");
                for each (loc8 in loc7) 
                {
                    with (loc9 = loc8) 
                    {
                        if (@id == "startDelay") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                loc6 = 0;
                loc7 = node.general.setting;
                loc5 = new XMLList("");
                for each (loc8 in loc7) 
                {
                    with (loc9 = loc8) 
                    {
                        if (@id == "duration") 
                        {
                            loc5[loc6] = loc8;
                        }
                    }
                }
                this.transitionData[loc4 = index_count = (index_count + 1)] = new mgs.aurora.games.common.components.ui.transitions.data.TransitionData(node.@id.toString(), mgs.aurora.games.framework.StageReference.getLevel(loc5.@val.toString()) as flash.display.Sprite, mgs.aurora.games.framework.StageReference.getLevel(loc5.@val.toString()) as flash.display.Sprite, loc5.@val.toString().toLowerCase() == "true", loc5.@val.toString(), loc5.@val.toString(), Number(loc5.@val), Number(loc5.@val), node.typical.setting);
            }
            this._isConfigged = true;
            return;
        }

        protected function onServiceOpenSyndication(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            this.startTransition(arg1.data as String);
            return;
        }

        protected function startTransition(arg1:String):void
        {
            var loc1:*=this.GetTransitionData(arg1);
            if (loc1) 
            {
                this.DoTransition(loc1);
            }
            return;
        }

        protected function GetTransitionData(arg1:String):mgs.aurora.games.common.components.ui.transitions.data.TransitionData
        {
            var loc1:*=0;
            var loc2:*=this.transitionData.length;
            while (loc1 < loc2) 
            {
                if (this.transitionData[loc1].ID == arg1) 
                {
                    return this.transitionData[loc1];
                }
                ++loc1;
            }
            return null;
        }

        protected function DoTransition(arg1:mgs.aurora.games.common.components.ui.transitions.data.TransitionData):void
        {
            this.current_transition = arg1;
            this.transitionRunner = runnerFactory.createRunner(this.current_transition);
            this.transitionRunner.delegateComplete = this.onTransitionRunnerComplete;
            this.transitionRunner.run();
            return;
        }

        internal function onTransitionRunnerComplete():void
        {
            this.current_transition = null;
            this.transitionRunner.dispose();
            this.transitionRunner = null;
            this.syndicateTransitionComplete();
            return;
        }

        protected function syndicateTransitionComplete():void
        {
            syndicate(this, SERVICE_COMPLETE, null);
            return;
        }

        protected function get isReady():Boolean
        {
            return this._isConfigged && this.conductor;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_TRANSITIONS";

        public static const SERVICE_TRANSITION_START_POINT:String="TRANSITION_START_POINT";

        public static const SERVICE_COMPLETE:String="SERVICE_COMPLETE";

        internal static const runnerFactory:mgs.aurora.games.common.components.ui.transitions.factories.TransitionRunnerFactory=new mgs.aurora.games.common.components.ui.transitions.factories.TransitionRunnerFactory();

        protected var conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var transitionData:__AS3__.vec.Vector.<mgs.aurora.games.common.components.ui.transitions.data.TransitionData>;

        protected var current_transition:mgs.aurora.games.common.components.ui.transitions.data.TransitionData;

        internal var _isConfigged:Boolean;

        internal var transitionRunner:mgs.aurora.games.common.components.ui.transitions.TransitionRunner;
    }
}


//            class WayWinsSliderAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class WayWinsSliderAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function WayWinsSliderAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.WayWinsSliderAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.WayWinSliderAgent");
            return;
        }

        internal function removeEventsForClick(arg1:flash.display.MovieClip):void
        {
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, this.onClick);
            return;
        }

        internal function addEventsForClick(arg1:flash.display.MovieClip):void
        {
            arg1.addEventListener(flash.events.MouseEvent.CLICK, this.onClick);
            return;
        }

        internal function removeEventsForRoll(arg1:flash.display.MovieClip):void
        {
            arg1.removeEventListener(flash.events.MouseEvent.ROLL_OVER, this.showMovie);
            arg1.removeEventListener(flash.events.MouseEvent.ROLL_OUT, this.hideMovie);
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, this.onClick);
            return;
        }

        internal function addEventsForRoll(arg1:flash.display.MovieClip):void
        {
            arg1.addEventListener(flash.events.MouseEvent.ROLL_OVER, this.showMovie);
            arg1.addEventListener(flash.events.MouseEvent.ROLL_OUT, this.hideMovie);
            arg1.addEventListener(flash.events.MouseEvent.CLICK, this.onClick);
            return;
        }

        internal function addToStage():void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (this.canShow) 
            {
                loc1 = this._movieClips.length;
                while (--loc1 > -1) 
                {
                    loc2 = flash.display.MovieClip(this._movieClips[loc1].movie);
                    if (!(loc2 && !loc2.parent)) 
                    {
                        continue;
                    }
                    this._level.addChild(loc2);
                    if (this._clickToOpen) 
                    {
                        this.addEventsForClick(loc2);
                        continue;
                    }
                    this.addEventsForRoll(loc2);
                }
            }
            return;
        }

        internal function onOutsideClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._isAnOpenSlider) 
            {
                this.hideAllMovies();
                syndicate(this, SERVICE_HIDE);
            }
            return;
        }

        internal function hideAllMovies():void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (this.isReady && this._isAnOpenSlider) 
            {
                loc1 = 0;
                while (loc1 < this._movieClips.length) 
                {
                    loc2 = flash.display.MovieClip(this._movieClips[loc1].movie);
                    loc2.gotoAndStop(HIDE);
                    ++loc1;
                }
                this._isAnOpenSlider = false;
            }
            return;
        }

        internal function hideMovie(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=flash.display.MovieClip(arg1.target);
            if (this._isAnOpenSlider) 
            {
                syndicate(this, SERVICE_HIDE);
                loc1.gotoAndStop(HIDE);
                this._isAnOpenSlider = false;
            }
            return;
        }

        internal function showMovie(arg1:flash.events.MouseEvent, arg2:Boolean=true):void
        {
            var loc1:*=flash.display.MovieClip(arg1.target);
            if (this.canDo && this.canShow && !this._isAnOpenSlider) 
            {
                if (arg2) 
                {
                    syndicate(this, SERVICE_SHOW);
                }
                loc1.gotoAndPlay(SHOW);
                this._isAnOpenSlider = true;
            }
            return;
        }

        internal function onClick(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=null;
            if (this._clickToOpen) 
            {
                if (this._isAnOpenSlider) 
                {
                    loc1 = flash.display.MovieClip(arg1.target);
                    if (loc1.currentLabel != HIDE) 
                    {
                        this.hideMovie(arg1);
                    }
                    else 
                    {
                        this.hideAllMovies();
                        this.showMovie(arg1, false);
                    }
                }
                else 
                {
                    this.showMovie(arg1);
                }
            }
            syndicate(this, SERVICE_EVENT, null);
            return;
        }

        internal function removeFromStage():void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (this.isReady) 
            {
                loc1 = this._movieClips.length;
                while (--loc1 > -1) 
                {
                    loc2 = flash.display.MovieClip(this._movieClips[loc1].movie);
                    if (!loc2) 
                    {
                        continue;
                    }
                    if (this._clickToOpen) 
                    {
                        this.removeEventsForClick(loc2);
                    }
                    else 
                    {
                        this.removeEventsForRoll(loc2);
                    }
                    if (!loc2.parent) 
                    {
                        continue;
                    }
                    loc2.parent.removeChild(loc2);
                }
            }
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_EVENT));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigDone, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_WAYWIN_SLIDER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onComplete, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusComplete, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_COMPLETE);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfigDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConfigXML = true;
            this._configXML = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
                if (this.canConfig) 
                {
                    this.setup();
                }
            }
            return;
        }

        internal function setup():void
        {
            var id:String;
            var i:int;

            var loc1:*;
            id = null;
            i = 0;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._clickToOpen = this._configXML.@clickToOpen.toString().toLowerCase() == "true";
            this._level = mgs.aurora.games.framework.StageReference.getLevel(this._configXML.@level.toString());
            this._movieClips = new Vector.<Object>(this._configXML.slider.length());
            try 
            {
                i = 0;
                while (i < this._configXML.slider.length()) 
                {
                    this._movieClips[i] = {};
                    id = String(this._configXML.slider.@id[i]);
                    this._movieClips[i].movie = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(id) as flash.display.MovieClip;
                    this._movieClips[i].movie.x = int(this._configXML.slider.@x[i]);
                    this._movieClips[i].movie.y = int(this._configXML.slider.@y[i]);
                    this._movieClips[i].movie.name = id;
                    this._movieClips[i].movie.mouseChildren = false;
                    ++i;
                }
            }
            catch (e:TypeError)
            {
                _trace("Could not find [" + id + "] movieclip. Check your Art setup.", "error", this, 16711680);
            }
            finally
            {
                this._configXML = null;
            }
            if (this._clickToOpen) 
            {
                mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOutsideClick, mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.SERVICE_CLICK);
            }
            this.addToStage();
            return;
        }

        internal function onBonusComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this.canShow) 
            {
                this.addToStage();
            }
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelsSpinning = true;
            this.hideAllMovies();
            return;
        }

        internal function onReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelsSpinning = false;
            if (this.isReady && this.canShow) 
            {
                this.addToStage();
            }
            else if (this.isReady || !this.canShow) 
            {
                this.removeFromStage();
            }
            return;
        }

        internal function onComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.addToStage();
            }
            return;
        }

        public function get canShow():Boolean
        {
            var loc1:*=false;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                {
                    if (this._conductor.settings.showWayWinSliderDuringFreeSpins) 
                    {
                        loc1 = true;
                    }
                    else 
                    {
                        loc1 = false;
                    }
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_WIN:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SELECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_WIN:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SELECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                {
                    loc1 = true;
                    break;
                }
                default:
                {
                    loc1 = false;
                    break;
                }
            }
            return loc1;
        }

        public function get canDo():Boolean
        {
            var loc1:*=true;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SELECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SELECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_REFRESH:
                {
                    loc1 = false;
                    break;
                }
            }
            return !this._reelsSpinning && !this._conductor.autoplay.autoPlayActive && !this._conductor.freeSpinsData.isFreespinsActive && loc1;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasConfigXML && this._hasView;
        }

        public override function dispose():void
        {
            var i:int;

            var loc1:*;
            i = 0;
            try 
            {
                if (this._movieClips) 
                {
                    i = this._movieClips.length;
                    while ((i = (i - 1)) > -1) 
                    {
                        if (this._clickToOpen) 
                        {
                            this.removeEventsForClick(this._movieClips[i].movie);
                        }
                        else 
                        {
                            this.removeEventsForRoll(this._movieClips[i].movie);
                        }
                        delete this._movieClips[i];
                    }
                    this._movieClips = null;
                }
                this._configXML = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_WAYWIN_SLIDER";

        public static const SERVICE_SHOW:String="SHOW";

        public static const SERVICE_HIDE:String="HIDE";

        public static const SERVICE_EVENT:String="EVENT";

        internal static const HIDE:String="hide";

        internal static const SHOW:String="show";

        internal var _isAnOpenSlider:Boolean=false;

        internal var _clickToOpen:Boolean;

        internal var _movieClips:__AS3__.vec.Vector.<Object>;

        internal var _level:flash.display.DisplayObjectContainer;

        internal var _configXML:XMLList;

        internal var _reelsSpinning:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _hasView:Boolean=false;

        internal var _hasConfigXML:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _isConfig:Boolean=false;
    }
}


//            class WildReelsAgent
package mgs.aurora.games.logicBlocks.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.modals.*;
    
    public class WildReelsAgent extends mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent
    {
        public function WildReelsAgent()
        {
            super(mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.agents.WildReelsAgent");
            this._timer = new flash.utils.Timer(0);
            this._topAnimHolder = new flash.display.MovieClip();
            this._leftAnimHolder = new flash.display.MovieClip();
            this._rightAnimHolder = new flash.display.MovieClip();
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (isReady) 
            {
                if (_conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                {
                    if (_conductor.response.slot.reelSet == this._wildReelSet) 
                    {
                        syndicate(this, SERVICE_WILD_REELS_ACTIVE);
                    }
                    this._timer.delay = this._minSpinTime;
                    this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.onMinSpin);
                    this._timer.start();
                }
            }
            return;
        }

        internal function onReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            if (this._wildsToRemove) 
            {
                loc1 = 0;
                while (loc1 < this._wildsToRemove.length) 
                {
                    if (arg1.data.reelId == this._wildsToRemove[loc1]) 
                    {
                        syndicate(this, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_RESOLVED, new mgs.aurora.games.framework.TransportLayer({"reelId":arg1.data.reelId, "baseWildId":this._baseWildId}));
                    }
                    ++loc1;
                }
            }
            return;
        }

        internal function onModalEnvironmentalAnimOut(arg1:flash.display.MovieClip):void
        {
            if (this._topLayerReference && this._topLayerReference.getChildByName("Wild_Modal_Environ_Anim_Out")) 
            {
                this._topLayerReference.removeChild(this._topLayerReference.getChildByName("Wild_Modal_Environ_Anim_Out"));
            }
            return;
        }

        internal function onEnvironRightAnimOut(arg1:flash.display.MovieClip):void
        {
            if (this._rightAnimHolder && this._rightAnimHolder.getChildByName("Right_Environ_Anim_Out")) 
            {
                this._rightAnimHolder.removeChild(this._rightAnimHolder.getChildByName("Right_Environ_Anim_Out"));
            }
            return;
        }

        internal function onEnvironLeftAnimOut(arg1:flash.display.MovieClip):void
        {
            if (this._leftAnimHolder && this._leftAnimHolder.getChildByName("Left_Environ_Anim_Out")) 
            {
                this._leftAnimHolder.removeChild(this._leftAnimHolder.getChildByName("Left_Environ_Anim_Out"));
            }
            return;
        }

        internal function onEnvironTopAnimOut(arg1:flash.display.MovieClip):void
        {
            if (this._topAnimHolder && this._topAnimHolder.getChildByName("Top_Environ_Anim_Out")) 
            {
                this._topAnimHolder.removeChild(this._topAnimHolder.getChildByName("Top_Environ_Anim_Out"));
            }
            syndicate(this, SERVICE_WILD_REEL_ASSETS_REMOVED);
            return;
        }

        internal function onModalAnimateOutComplete(arg1:flash.display.MovieClip):void
        {
            this.resetModalHeader();
            return;
        }

        internal function fadeBaseModalBackIn(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER, this.fadeBaseModalBackIn);
            syndicate(this, SERVICE_WILD_REEL_ASSETS_REMOVED);
            return;
        }

        internal function allAssetsRemoved(arg1:flash.events.TimerEvent):void
        {
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.allAssetsRemoved);
            this._allAssetsRemoved = true;
            syndicate(this, SERVICE_WILD_REEL_COMPLETE);
            return;
        }

        internal function onSymbolRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            if (this._wildsToRemove) 
            {
                loc1 = 0;
                while (loc1 < this._wildsToRemove.length) 
                {
                    syndicate(this, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_RESOLVED, new mgs.aurora.games.framework.TransportLayer({"reelId":this._wildsToRemove[loc1], "baseWildId":this._baseWildId}));
                    ++loc1;
                }
                this._symbolsRefreshed = true;
            }
            return;
        }

        internal function removeWildReelAssets():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            this._featureTriggered = false;
            this._canInterrupt = false;
            if (mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Top_Environ_Anim_Out") && mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Left_Environ_Anim_Out") && mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Right_Environ_Anim_Out") && mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Wild_Modal_Environ_Anim_Out") && this._topAnimHolder.numChildren > 0) 
            {
                loc1 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Top_Environ_Anim_Out");
                loc2 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Left_Environ_Anim_Out");
                loc3 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Right_Environ_Anim_Out");
                loc4 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Wild_Modal_Environ_Anim_Out");
                this._topAnimHolder.addChild(loc1);
                this._leftAnimHolder.addChild(loc2);
                this._rightAnimHolder.addChild(loc3);
                this._topLayerReference.addChild(loc4);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc1, this.onEnvironTopAnimOut);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc2, this.onEnvironLeftAnimOut);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc3, this.onEnvironRightAnimOut);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc4, this.onModalEnvironmentalAnimOut);
            }
            else 
            {
                (loc5 = new flash.utils.Timer(this._wildModalFadeDelayOut, 1)).addEventListener(flash.events.TimerEvent.TIMER, this.fadeBaseModalBackIn);
                loc5.start();
            }
            if (!(this._topAnimHolder == null) && this._topAnimHolder.getChildByName("Top_Environ_Anim_Loop")) 
            {
                this._topAnimHolder.removeChild(this._topAnimHolder.getChildByName("Top_Environ_Anim_Loop"));
            }
            if (!(this._leftAnimHolder == null) && this._leftAnimHolder.getChildByName("Left_Environ_Anim_Loop")) 
            {
                this._leftAnimHolder.removeChild(this._leftAnimHolder.getChildByName("Left_Environ_Anim_Loop"));
            }
            if (!(this._rightAnimHolder == null) && this._rightAnimHolder.getChildByName("Right_Environ_Anim_Loop")) 
            {
                this._rightAnimHolder.removeChild(this._rightAnimHolder.getChildByName("Right_Environ_Anim_Loop"));
            }
            if (!(this._topLayerReference == null) && this._topLayerReference.getChildByName("Wild_Modal_Environ_Anim_Loop")) 
            {
                this._topLayerReference.removeChild(this._topLayerReference.getChildByName("Wild_Modal_Environ_Anim_Loop"));
            }
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._wildAgentModal.getModalHeader(), this.onModalAnimateOutComplete, 1, "AnimateOut", "Hide");
            return;
        }

        internal function onUserInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._featureTriggered && this._canInterrupt) 
            {
                this.removeWildReelAssets();
                this._allAssetsRemoved = true;
                syndicate(this, SERVICE_WILD_REEL_COMPLETE);
            }
            return;
        }

        internal function onCountupStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._canInterrupt = true;
            return;
        }

        internal function onDelayBetweenWildReelComplete(arg1:flash.events.TimerEvent):void
        {
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onDelayBetweenWildReelComplete);
            if (this._wildReels.length > 0) 
            {
                this.resolveWildReels();
            }
            else 
            {
                CompleteHookEvent();
            }
            return;
        }

        internal function onWildReelIntroComplete(arg1:flash.display.MovieClip):void
        {
            syndicate(this, SERVICE_WILD_REEL_START, new mgs.aurora.games.framework.TransportLayer(this._wildReelLanding));
            flash.display.MovieClip(arg1.parent).gotoAndStop(WILD_REEL_LOOP);
            return;
        }

        internal function resolveWildReels():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._wildReels.length > 0) 
            {
                loc1 = this._wildReels.splice(Math.random() * this._wildReels.length, 1);
                if (mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("WildColumnAnim")) 
                {
                    loc2 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("WildColumnAnim");
                }
                else 
                {
                    loc2 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("WildColumnStatic");
                }
                this._wildReelLanding = loc1[0];
                loc2.name = "wildReel" + this._wildReelLanding;
                loc2.x = this._wildReelsPos[this._wildReelLanding].x;
                loc2.y = this._wildReelsPos[this._wildReelLanding].y;
                this._wildsToRemove.push(this._wildReelLanding);
                this._topLayerReference.addChild(loc2);
                loc2.gotoAndStop(WILD_REEL_IN);
                syndicate(this, SERVICE_WILD_REEL_SOUND);
                if (flash.display.MovieClip(loc2.getChildByName("anim"))) 
                {
                    mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(loc2.getChildByName("anim")), this.onWildReelIntroComplete);
                }
                else 
                {
                    syndicate(this, SERVICE_WILD_REEL_START, new mgs.aurora.games.framework.TransportLayer(this._wildReelLanding));
                }
                this._timer.delay = this._wildReelStops;
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.onDelayBetweenWildReelComplete);
                this._timer.start();
            }
            return;
        }

        internal function onFirstWildReelDelay(arg1:flash.events.TimerEvent):void
        {
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onFirstWildReelDelay);
            this.resolveWildReels();
            return;
        }

        internal function onEnvironRightAnimIn(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Right_Environ_Anim_Loop");
            this._rightAnimHolder.addChild(loc1);
            this._rightAnimHolder.removeChild(arg1);
            loc1.play();
            return;
        }

        internal function onEnvironLeftAnimIn(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Left_Environ_Anim_Loop");
            this._leftAnimHolder.addChild(loc1);
            this._leftAnimHolder.removeChild(arg1);
            loc1.play();
            return;
        }

        internal function onEnvironTopAnimIn(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Top_Environ_Anim_Loop");
            this._topAnimHolder.addChild(loc1);
            this._topAnimHolder.removeChild(arg1);
            loc1.play();
            return;
        }

        internal function onModalEnvironAnimIn(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Wild_Modal_Environ_Anim_Loop");
            this._topLayerReference.addChild(loc1);
            this._topLayerReference.removeChild(arg1);
            loc1.play();
            return;
        }

        internal function onWildModalFadeDelayComplete(arg1:flash.events.TimerEvent):void
        {
            var loc1:*=null;
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onWildModalFadeDelayComplete);
            this._wildAgentModal.getModalHeader().gotoAndPlay("AnimateIn");
            this._wildAgentModal.show(flash.display.MovieClip(this._topLayerReference));
            if (mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Wild_Modal_Environ_Anim_In")) 
            {
                loc1 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Wild_Modal_Environ_Anim_In");
                this._topLayerReference.addChild(loc1);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc1, this.onModalEnvironAnimIn);
            }
            this._timer.delay = this._wildReelBeginDelay;
            this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.onFirstWildReelDelay);
            this._timer.start();
            return;
        }

        internal function onModalFadeDelayComplete(arg1:flash.events.TimerEvent):void
        {
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onModalFadeDelayComplete);
            this._timer.delay = this._wildModalFadeDelay;
            this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.onWildModalFadeDelayComplete);
            this._timer.start();
            syndicate(this, SERVICE_WILD_REELS_HEADER_ANIM);
            return;
        }

        internal function startWildAnimation():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Top_Environ_Anim_In") && mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Left_Environ_Anim_In") && mgs.aurora.games.common.components.resourceProxy.Assets.isAssetLoaded("Right_Environ_Anim_In")) 
            {
                loc1 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Top_Environ_Anim_In");
                loc2 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Left_Environ_Anim_In");
                loc3 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Right_Environ_Anim_In");
                this._topAnimHolder.addChild(loc1);
                this._leftAnimHolder.addChild(loc2);
                this._rightAnimHolder.addChild(loc3);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc1, this.onEnvironTopAnimIn);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc2, this.onEnvironLeftAnimIn);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc3, this.onEnvironRightAnimIn);
            }
            this.configureWildReels();
            this._allAssetsRemoved = false;
            this._timer.delay = this._modalFadeDelay;
            this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.onModalFadeDelayComplete);
            this._timer.start();
            return;
        }

        internal function configureWildReels():void
        {
            var loc1:*=0;
            this._wildReels = new Vector.<uint>();
            this._wildsToRemove = new Vector.<uint>();
            if (_conductor.response.visarea.wildVABoxes.length > 0) 
            {
                loc1 = 0;
                while (loc1 < _conductor.response.visarea.wildVABoxes.length) 
                {
                    if (_conductor.response.visarea.wildVABoxes[loc1] < _conductor.response.visarea.numCols) 
                    {
                        this._wildReels.push(_conductor.response.visarea.wildVABoxes[loc1]);
                    }
                    ++loc1;
                }
            }
            return;
        }

        protected override function DoProcessing():void
        {
            if (!isReady) 
            {
                CompleteHookEvent();
                return;
            }
            var loc1:*=_currentHookEvent;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.publishers.ReelsServer.HOOK_EVENT_ALL_REELS_STOPPED:
                {
                    CompleteHookEvent();
                    syndicate(this, SERVICE_WILD_REEL_REPLACE_SYMBOLS, new mgs.aurora.games.framework.TransportLayer({"wildReelSet":this._wildReelSet, "baseWildId":this._baseWildId}));
                    if (_conductor.response.wins.numberOf == 0 && this._featureTriggered) 
                    {
                        this.removeWildReelAssets();
                        this._timer.delay = this._wildModalFadeDelayOut;
                        this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.allAssetsRemoved);
                        this._timer.start();
                    }
                    break;
                }
                case mgs.aurora.games.logicBlocks.publishers.ReelsServer.HOOK_EVENT_ALL_REELS_SPINNING:
                {
                    if (_conductor.response.slot.reelSet != this._wildReelSet) 
                    {
                        CompleteHookEvent();
                    }
                    else 
                    {
                        this._featureTriggered = true;
                        this.wildReelsTriggered();
                    }
                    break;
                }
                default:
                {
                    CompleteHookEvent();
                    break;
                }
            }
            return;
        }

        internal function wildReelsTriggered():void
        {
            if (this._minSpinComplete && this._featureTriggered) 
            {
                syndicate(this, SERVICE_WILD_REELS_TRIGGERED, new mgs.aurora.games.framework.TransportLayer(this._assetsToDisable));
                this.startWildAnimation();
            }
            return;
        }

        internal function onMinSpin(arg1:flash.events.TimerEvent):void
        {
            this._timer.stop();
            this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.onMinSpin);
            this._minSpinComplete = true;
            if (this._allAssetsRemoved) 
            {
                this.wildReelsTriggered();
            }
            else 
            {
                this._timer.reset();
                this._timer.start();
            }
            return;
        }

        public override function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REELS_HEADER_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REELS_ACTIVE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REELS_TRIGGERED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_RESOLVED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_SOUND));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_REPLACE_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_ASSETS_REMOVED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WILD_REEL_REFRESH));
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_WILD_REELS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUserInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSymbolRefresh, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_SYMBOLS_REFRESH);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsServerInit, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_REELS_SERVER_INIT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupStart, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUserInterrupt, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            return;
        }

        public override function get canConfig():Boolean
        {
            return !_isConfig && _conductor && this._viewReady && this._reelsInit;
        }

        protected function onReelsServerInit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelsInit = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._featureTriggered && !this._allAssetsRemoved) 
            {
                syndicate(this, SERVICE_WILD_REEL_COMPLETE);
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._xmlConfig = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected override function setup():void
        {
            var wildReelNode:XML;
            var assetNode:XML;
            var i:uint;
            var wildReel:flash.display.MovieClip;
            var j:uint;

            var loc1:*;
            wildReelNode = null;
            assetNode = null;
            i = 0;
            wildReel = null;
            j = 0;
            _isConfig = true;
            this._topLayerReference = mgs.aurora.games.framework.StageReference.getLevel(this._xmlConfig.@layerTop);
            this._sideLayerReference = mgs.aurora.games.framework.StageReference.getLevel(this._xmlConfig.@layerSides);
            this._wildAgentModal = new mgs.aurora.slots.components.modals.MasterModalHeader(this._xmlConfig.modal);
            this._wildReelSet = this._xmlConfig.@wildReelSet;
            this.resetModalHeader();
            this._baseWildId = this._xmlConfig.@baseSymbolId;
            this._topLayerReference.addChild(this._topAnimHolder);
            this._sideLayerReference.addChild(this._leftAnimHolder);
            this._sideLayerReference.addChild(this._rightAnimHolder);
            var loc3:*=0;
            var loc4:*=this._xmlConfig.environmentAnims.environmentAnim;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "top") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._topAnimHolder.x = Number(loc2.@x);
            loc3 = 0;
            loc4 = this._xmlConfig.environmentAnims.environmentAnim;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "top") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._topAnimHolder.y = Number(loc2.@y);
            loc3 = 0;
            loc4 = this._xmlConfig.environmentAnims.environmentAnim;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "left") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._leftAnimHolder.x = Number(loc2.@x);
            loc3 = 0;
            loc4 = this._xmlConfig.environmentAnims.environmentAnim;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "left") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._leftAnimHolder.y = Number(loc2.@y);
            loc3 = 0;
            loc4 = this._xmlConfig.environmentAnims.environmentAnim;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "right") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._rightAnimHolder.x = Number(loc2.@x);
            loc3 = 0;
            loc4 = this._xmlConfig.environmentAnims.environmentAnim;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "right") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._rightAnimHolder.y = Number(loc2.@y);
            this._wildReelsPos = new Vector.<flash.geom.Point>();
            loc2 = 0;
            loc3 = this._xmlConfig.wildReelConfig.wildReel;
            for each (wildReelNode in loc3) 
            {
                this._wildReelsPos[wildReelNode.@id] = new flash.geom.Point(wildReelNode.@x, wildReelNode.@y);
            }
            this._assetsToDisable = new Vector.<String>();
            loc2 = 0;
            loc3 = this._xmlConfig.assetsToDisable.asset;
            for each (assetNode in loc3) 
            {
                this._assetsToDisable.push(assetNode.@id);
            }
            loc3 = 0;
            loc4 = this._xmlConfig.timers.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "minSpinTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._minSpinTime = uint(loc2.@val);
            loc3 = 0;
            loc4 = this._xmlConfig.timers.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "modalFadeDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._modalFadeDelay = uint(loc2.@val);
            loc3 = 0;
            loc4 = this._xmlConfig.timers.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "wildModalFadeDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._wildModalFadeDelay = uint(loc2.@val);
            loc3 = 0;
            loc4 = this._xmlConfig.timers.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "wildModalFadeDelayOut") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._wildModalFadeDelayOut = uint(loc2.@val);
            loc3 = 0;
            loc4 = this._xmlConfig.timers.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "wildReelBeginDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._wildReelBeginDelay = uint(loc2.@val);
            loc3 = 0;
            loc4 = this._xmlConfig.timers.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == "wildReelStops") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._wildReelStops = uint(loc2.@val);
            if (_conductor.response.slot.reelSet == this._wildReelSet) 
            {
                if (_conductor.response.visarea.wildVABoxes && _conductor.response.visarea.wildVABoxes.length > 0) 
                {
                    this.configureWildReels();
                    this._featureTriggered = true;
                    this._canInterrupt = true;
                    i = 0;
                    while (i < this._wildReels.length) 
                    {
                        this._wildReelLanding = this._wildReels[i];
                        wildReel = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("WildColumnStatic");
                        wildReel.name = "wildReel" + this._wildReelLanding;
                        wildReel.x = this._wildReelsPos[this._wildReelLanding].x;
                        wildReel.y = this._wildReelsPos[this._wildReelLanding].y;
                        this._wildsToRemove.push(this._wildReelLanding);
                        this._topLayerReference.addChild(wildReel);
                        j = 0;
                        while (j < _conductor.response.visarea.numRows) 
                        {
                            mgs.aurora.games.logicBlocks.publishers.ReelsServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME)).reels.reels[this._wildReelLanding].swapSymbol(this._baseWildId + j, this._wildReelSet, j);
                            ++j;
                        }
                        ++i;
                    }
                    if (_conductor.response.slot.win > 0) 
                    {
                        this._wildAgentModal.getModalHeader().gotoAndStop("Show");
                        this._wildAgentModal.show(flash.display.MovieClip(this._topLayerReference));
                        syndicate(this, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_REFRESH);
                    }
                    i = 0;
                    while (i < this._wildsToRemove.length) 
                    {
                        syndicate(this, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_RESOLVED, new mgs.aurora.games.framework.TransportLayer({"reelId":this._wildsToRemove[i], "baseWildId":this._baseWildId}));
                        ++i;
                    }
                }
            }
            return;
        }

        internal function resetModalHeader():void
        {
            this._wildAgentModal.getModalHeader().gotoAndStop(1);
            this._wildAgentModal.hide();
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc1:*=0;
            if (isReady) 
            {
                this._minSpinComplete = false;
                if (this._wildsToRemove) 
                {
                    this.onUserInterrupt();
                    loc1 = 0;
                    while (loc1 < this._wildsToRemove.length) 
                    {
                        if (!this._symbolsRefreshed) 
                        {
                            syndicate(this, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_RESOLVED, new mgs.aurora.games.framework.TransportLayer({"reelId":this._wildsToRemove[loc1], "baseWildId":this._baseWildId}));
                        }
                        this._topLayerReference.removeChild(this._topLayerReference.getChildByName("wildReel" + this._wildsToRemove[loc1]));
                        ++loc1;
                    }
                }
                this._symbolsRefreshed = false;
                this._wildsToRemove = null;
                this._wildReels = null;
            }
            return;
        }

        public static const WILD_REEL_NO_LOOP:String="noloop";

        public static const WILD_REEL_OUT:String="out";

        public static const SERVICE_WILD_REEL_RESOLVED:String="SERVICE_WILD_REEL_RESOLVED";

        public static const PUBLISHER_NAME:String="AGENT_WILD_REELS";

        public static const SERVICE_WILD_REELS_HEADER_ANIM:String="SERVICE_WILD_REELS_HEADER_ANIM";

        public static const SERVICE_WILD_REELS_ACTIVE:String="SERVICE_WILD_REELS_ACTIVE";

        public static const SERVICE_WILD_REELS_TRIGGERED:String="SERVICE_WILD_REELS_TRIGGERED";

        public static const SERVICE_WILD_REEL_START:String="SERVICE_WILD_REEL_START";

        public static const SERVICE_WILD_REEL_SOUND:String="SERVICE_WILD_REEL_SOUND";

        public static const SERVICE_WILD_REEL_COMPLETE:String="SERVICE_WILD_REEL_COMPLETE";

        public static const SERVICE_WILD_REEL_REPLACE_SYMBOLS:String="SERVICE_WILD_REEL_REPLACE_SYMBOLS";

        public static const SERVICE_WILD_REEL_ASSETS_REMOVED:String="SERVICE_WILD_REEL_ASSETS_REMOVED";

        public static const SERVICE_WILD_REEL_REFRESH:String="SERVICE_WILD_REEL_REFRESH";

        public static const WILD_REEL_IN:String="in";

        public static const WILD_REEL_LOOP:String="loop";

        internal var _wildReels:__AS3__.vec.Vector.<uint>;

        protected var _topLayerReference:flash.display.DisplayObjectContainer;

        internal var _wildReelBeginDelay:uint=0;

        internal var _wildModalFadeDelayOut:uint=0;

        internal var _wildModalFadeDelay:uint=0;

        internal var _modalFadeDelay:uint=0;

        protected var _rightAnimHolder:flash.display.MovieClip;

        protected var _leftAnimHolder:flash.display.MovieClip;

        protected var _topAnimHolder:flash.display.MovieClip;

        internal var _timer:flash.utils.Timer;

        protected var _wildAgentModal:mgs.aurora.slots.components.modals.MasterModalHeader;

        internal var _xmlConfig:XMLList;

        protected var _sideLayerReference:flash.display.DisplayObjectContainer;

        internal var _symbolsRefreshed:Boolean;

        internal var _assetsToDisable:__AS3__.vec.Vector.<String>;

        internal var _reelsInit:Boolean=false;

        internal var _allAssetsRemoved:Boolean=true;

        internal var _minSpinTime:uint=0;

        internal var _wildReelSet:uint;

        internal var _baseWildId:uint;

        internal var _wildsToRemove:__AS3__.vec.Vector.<uint>;

        internal var _wildReelLanding:uint=0;

        protected var _wildReelsPos:__AS3__.vec.Vector.<flash.geom.Point>;

        internal var _viewReady:Boolean=false;

        internal var _canInterrupt:Boolean=false;

        internal var _featureTriggered:Boolean=false;

        internal var _minSpinComplete:Boolean=false;

        internal var _wildReelStops:uint=0;
    }
}


//          package data
//            package types
//              class AchievementPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class AchievementPacket extends Object
    {
        public function AchievementPacket(arg1:String, arg2:Boolean, arg3:Boolean, arg4:Array, arg5:Array, arg6:int, arg7:int)
        {
            super();
            this._name = arg1;
            this._isComplete = arg2;
            this._wasJustAwarded = arg3;
            this._winCombosRequired = Vector.<int>(arg4);
            this._winCombosRequired.fixed = true;
            this._winCombosAcquired = Vector.<int>(arg5);
            this._winCombosAcquired.fixed = true;
            this._tokensRequired = arg6;
            this._tokensCollected = arg7;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function get isComplete():Boolean
        {
            return this._isComplete;
        }

        public function get wasJustAwarded():Boolean
        {
            return this._wasJustAwarded;
        }

        public function get winCombosRequired():__AS3__.vec.Vector.<int>
        {
            return this._winCombosRequired;
        }

        public function get winCombosAcquired():__AS3__.vec.Vector.<int>
        {
            return this._winCombosAcquired;
        }

        public function get tokensRequired():int
        {
            return this._tokensRequired;
        }

        public function get tokensCollected():int
        {
            return this._tokensCollected;
        }

        internal var _name:String;

        internal var _isComplete:Boolean;

        internal var _wasJustAwarded:Boolean;

        internal var _winCombosRequired:__AS3__.vec.Vector.<int>;

        internal var _winCombosAcquired:__AS3__.vec.Vector.<int>;

        internal var _tokensRequired:int;

        internal var _tokensCollected:int;
    }
}


//              class AchievementsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class AchievementsPacket extends Object
    {
        public function AchievementsPacket(arg1:uint)
        {
            super();
            this._length = arg1;
            this._achievement = new Vector.<mgs.aurora.games.logicBlocks.data.types.AchievementPacket>(this._length, true);
            return;
        }

        public function addAchievement(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String):void
        {
            this._achievement[arg1] = new mgs.aurora.games.logicBlocks.data.types.AchievementPacket(arg2, arg3 != "1" ? false : true, arg4 != "1" ? false : true, arg5 != "" ? arg5.split(",") : [], arg6 != "" ? arg6.split(",") : [], arg7 != "" ? int(arg7) : -1, arg8 != "" ? int(arg8) : -1);
            return;
        }

        public function get achievements():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.AchievementPacket>
        {
            return this._achievement;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _achievement:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.AchievementPacket>;

        internal var _length:uint;
    }
}


//              class BankedSpinPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class BankedSpinPacket extends Object
    {
        public function BankedSpinPacket(arg1:int, arg2:int, arg3:int, arg4:int)
        {
            super();
            this._bankedSpinName = int(arg1);
            this._bankedFreeSpins = int(arg2);
            this._bankedMultiplierIncrements = int(arg3);
            this._bankedTotalMultiplier = int(arg4);
            return;
        }

        public function get bankedSpinName():int
        {
            return this._bankedSpinName;
        }

        public function get bankedFreeSpins():int
        {
            return this._bankedFreeSpins;
        }

        public function get bankedMultiplierIncrements():int
        {
            return this._bankedMultiplierIncrements;
        }

        public function get bankedTotalMultiplier():int
        {
            return this._bankedTotalMultiplier;
        }

        internal var _bankedSpinName:int;

        internal var _bankedFreeSpins:int;

        internal var _bankedMultiplierIncrements:int;

        internal var _bankedTotalMultiplier:int;
    }
}


//              class BankedSpinsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class BankedSpinsPacket extends Object
    {
        public function BankedSpinsPacket(arg1:int)
        {
            super();
            this._bankedSpins = new Vector.<mgs.aurora.games.logicBlocks.data.types.BankedSpinPacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addBankedSpin(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String):void
        {
            this._bankedSpins[arg1] = new mgs.aurora.games.logicBlocks.data.types.BankedSpinPacket(int(arg2), int(arg3), int(arg4), int(arg5));
            return;
        }

        public function get bankedSpins():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.BankedSpinPacket>
        {
            return this._bankedSpins;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _bankedSpins:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.BankedSpinPacket>;

        internal var _length:int;
    }
}


//              class BetPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class BetPacket extends Object
    {
        public function BetPacket(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String, arg10:String, arg11:String, arg12:mgs.aurora.games.logicBlocks.data.types.SideBetsPacket, arg13:mgs.aurora.games.logicBlocks.data.types.PaylinesPacket)
        {
            super();
            this._numChips = int(arg1);
            this._activePaylines = Vector.<int>(arg2.split(","));
            this._nextActivePaylines = Vector.<int>(arg3.split(","));
            this._maxChips = int(arg4);
            this._minChips = int(arg5);
            this._numActiveGames = int(arg6);
            this._validNumGames = Vector.<int>(arg7.split(","));
            this._numPaylinesPerGame = int(arg8);
            this._chipSize = Number(arg9);
            this._validChips = arg10.split(",");
            this._slotBetMethod = int(arg11);
            this._sideBets = arg12;
            this._paylines = arg13;
            return;
        }

        public function get numChips():int
        {
            return this._numChips;
        }

        public function get activePaylines():__AS3__.vec.Vector.<int>
        {
            return this._activePaylines;
        }

        public function get nextActivePaylines():__AS3__.vec.Vector.<int>
        {
            return this._nextActivePaylines;
        }

        public function get maxChips():int
        {
            return this._maxChips;
        }

        public function get minChips():int
        {
            return this._minChips;
        }

        public function get numActiveGames():int
        {
            return this._numActiveGames;
        }

        public function get validNumGames():__AS3__.vec.Vector.<int>
        {
            return this._validNumGames;
        }

        public function get numPaylinesPerGame():int
        {
            return this._numPaylinesPerGame;
        }

        public function get chipSize():Number
        {
            return this._chipSize;
        }

        public function get validChips():Array
        {
            return this._validChips;
        }

        public function get slotBetMethod():int
        {
            return this._slotBetMethod;
        }

        public function get sideBets():mgs.aurora.games.logicBlocks.data.types.SideBetsPacket
        {
            return this._sideBets;
        }

        public function get paylines():mgs.aurora.games.logicBlocks.data.types.PaylinesPacket
        {
            return this._paylines;
        }

        internal var _numChips:int;

        internal var _activePaylines:__AS3__.vec.Vector.<int>;

        internal var _nextActivePaylines:__AS3__.vec.Vector.<int>;

        internal var _maxChips:int;

        internal var _minChips:int;

        internal var _numActiveGames:int;

        internal var _validNumGames:__AS3__.vec.Vector.<int>;

        internal var _numPaylinesPerGame:int;

        internal var _chipSize:Number;

        internal var _validChips:Array;

        internal var _slotBetMethod:int;

        internal var _sideBets:mgs.aurora.games.logicBlocks.data.types.SideBetsPacket;

        internal var _paylines:mgs.aurora.games.logicBlocks.data.types.PaylinesPacket;
    }
}


//              class BonusGamblePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class BonusGamblePacket extends Object
    {
        public function BonusGamblePacket()
        {
            super();
            return;
        }
    }
}


//              class BonusGamesPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class BonusGamesPacket extends Object
    {
        public function BonusGamesPacket(arg1:int, arg2:String, arg3:String)
        {
            super();
            this._length = arg1;
            this._bonusGames = new Vector.<mgs.aurora.games.logicBlocks.data.types.BonusPacket>(this._length, true);
            this._lastBonusPlayedID = int(arg2);
            this._totalBonusWin = 0;
            this._currentWin = 0;
            this.updateBonusRefs();
            return;
        }

        public function addBonus(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String, arg10:String, arg11:String, arg12:String, arg13:String, arg14:String, arg15:String, arg16:String, arg17:String, arg18:String, arg19:String, arg20:String, arg21:String, arg22:XMLList):mgs.aurora.games.logicBlocks.data.types.BonusPacket
        {
            this._bonusGames[arg1] = new mgs.aurora.games.logicBlocks.data.types.BonusPacket(int(arg2), arg3, int(arg4), int(arg5), int(arg6), arg7, Number(arg8), int(arg9), int(arg10), int(arg11), arg12.split(","), arg13.split(","), int(arg14), arg15.split(","), Number(arg16), int(arg17), int(arg18), int(arg19), int(arg20), int(arg21), arg22);
            this._totalBonusWin = this._totalBonusWin + Number(arg8);
            if (this.isActiveBonusState(int(arg4))) 
            {
                this._currentBonusID = int(arg2);
            }
            this.updateBonusRefs();
            return this._bonusGames[arg1];
        }

        internal function isActiveBonusState(arg1:int):Boolean
        {
            if (arg1 == mgs.aurora.slots.components.enums.BonusStates.STARTING_BONUS || arg1 == mgs.aurora.slots.components.enums.BonusStates.PLAYING_BONUS) 
            {
                return true;
            }
            return false;
        }

        public function get bonusGames():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.BonusPacket>
        {
            return this._bonusGames;
        }

        public function get numberOf():int
        {
            return this._length;
        }

        public function get lastBonusPlayedID():int
        {
            return this._lastBonusPlayedID;
        }

        public function get currentBonusID():int
        {
            return this._currentBonusID;
        }

        internal function updateBonusRefs():void
        {
            var loc1:*=0;
            this._currentBonus = null;
            this._lastBonusPlayed = null;
            while (loc1 < this._bonusGames.length) 
            {
                if (!(this._bonusGames[loc1] == null) && this._bonusGames[loc1].id == this._currentBonusID) 
                {
                    this._currentBonus = this._bonusGames[loc1];
                }
                if (!(this._bonusGames[loc1] == null) && this._bonusGames[loc1].id == this._lastBonusPlayedID) 
                {
                    this._lastBonusPlayed = this._bonusGames[loc1];
                }
                ++loc1;
            }
            return;
        }

        public function get currentBonus():mgs.aurora.games.logicBlocks.data.types.BonusPacket
        {
            return this._currentBonus;
        }

        public function get lastBonusPlayed():mgs.aurora.games.logicBlocks.data.types.BonusPacket
        {
            return this._lastBonusPlayed;
        }

        public function get totalBonusWin():Number
        {
            return this._totalBonusWin;
        }

        public function get currentWin():Number
        {
            return this._currentWin;
        }

        internal var _bonusGames:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.BonusPacket>;

        internal var _length:int;

        internal var _lastBonusPlayedID:int;

        internal var _currentBonusID:int=-1;

        internal var _currentBonus:mgs.aurora.games.logicBlocks.data.types.BonusPacket=null;

        internal var _lastBonusPlayed:mgs.aurora.games.logicBlocks.data.types.BonusPacket=null;

        internal var _totalBonusWin:Number;

        internal var _currentWin:Number;
    }
}


//              class BonusPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class BonusPacket extends Object
    {
        public function BonusPacket(arg1:int, arg2:String, arg3:int, arg4:int, arg5:int, arg6:String, arg7:Number, arg8:int, arg9:int, arg10:int, arg11:Array, arg12:Array, arg13:int, arg14:Array, arg15:Number, arg16:int, arg17:int, arg18:int, arg19:int, arg20:int, arg21:XMLList)
        {
            super();
            this._id = arg1;
            this._bonusName = arg2;
            this._state = arg3;
            this._tickets = arg4;
            this._ticketsNeeded = arg5;
            this._winScaler = arg6;
            this._win = arg7;
            this._activeBonusLevel = arg8;
            this._extraPicksForActiveLevel = arg9;
            this._maxPlayerPicksAllowed = arg10;
            this._items = Vector.<int>(arg11);
            this._levelStates = Vector.<int>(arg12);
            this._lastPlayedBonusLevel = arg13;
            this._gameEndRule = Vector.<int>(arg14);
            this._extraCompletionWin = arg15;
            this._bonusPicksNumberOf = arg17;
            this._bonusSpecificNumberOf = arg18;
            this._bonusGambleNumberOf = arg19;
            this._bonusTokenManNumberOf = arg20;
            this._numBonusLevels = arg16;
            this._bonusPicks = new mgs.aurora.games.logicBlocks.data.types.BonusPicksPacket(this._bonusPicksNumberOf);
            this._bonusGamble = new mgs.aurora.games.logicBlocks.data.types.BonusGamblePacket();
            this._bonusTokenManagers = new mgs.aurora.games.logicBlocks.data.types.TokenManagersPacket(this._bonusTokenManNumberOf);
            this._bonusSpecific = arg21;
            return;
        }

        public function get winScaler():String
        {
            return this._winScaler;
        }

        public function get bonusPicks():mgs.aurora.games.logicBlocks.data.types.BonusPicksPacket
        {
            return this._bonusPicks;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get bonusName():String
        {
            return this._bonusName;
        }

        public function get state():int
        {
            return this._state;
        }

        public function get tickets():int
        {
            return this._tickets;
        }

        public function get ticketsNeeded():int
        {
            return this._ticketsNeeded;
        }

        public function get win():Number
        {
            return this._win;
        }

        public function get activeBonusLevel():int
        {
            return this._activeBonusLevel;
        }

        public function get extraPicksForActiveLevel():int
        {
            return this._extraPicksForActiveLevel;
        }

        public function get maxPlayerPicksAllowed():int
        {
            return this._maxPlayerPicksAllowed;
        }

        public function get items():__AS3__.vec.Vector.<int>
        {
            return this._items;
        }

        public function get levelStates():__AS3__.vec.Vector.<int>
        {
            return this._levelStates;
        }

        public function get lastPlayedBonusLevel():int
        {
            return this._lastPlayedBonusLevel;
        }

        public function get gameEndRule():__AS3__.vec.Vector.<int>
        {
            return this._gameEndRule;
        }

        public function get extraCompletionWin():Number
        {
            return this._extraCompletionWin;
        }

        public function get bonusGamble():mgs.aurora.games.logicBlocks.data.types.BonusGamblePacket
        {
            return this._bonusGamble;
        }

        public function get bonusTokenManagers():mgs.aurora.games.logicBlocks.data.types.TokenManagersPacket
        {
            return this._bonusTokenManagers;
        }

        public function get picksNumberOf():int
        {
            return this._bonusPicksNumberOf;
        }

        public function get specificNumberOf():int
        {
            return this._bonusSpecificNumberOf;
        }

        public function get gambleNumberOf():int
        {
            return this._bonusGambleNumberOf;
        }

        public function get tokenManNumberOf():int
        {
            return this._bonusTokenManNumberOf;
        }

        public function get bonusSpecific():XMLList
        {
            return this._bonusSpecific;
        }

        internal var _winScaler:String;

        internal var _id:int;

        internal var _bonusName:String;

        internal var _state:int;

        internal var _tickets:int;

        internal var _ticketsNeeded:int;

        internal var _bonusSpecific:XMLList;

        internal var _win:Number;

        internal var _activeBonusLevel:int;

        internal var _extraPicksForActiveLevel:int;

        internal var _maxPlayerPicksAllowed:int;

        internal var _items:__AS3__.vec.Vector.<int>;

        internal var _levelStates:__AS3__.vec.Vector.<int>;

        internal var _lastPlayedBonusLevel:int;

        internal var _gameEndRule:__AS3__.vec.Vector.<int>;

        internal var _extraCompletionWin:Number;

        internal var _numBonusLevels:int;

        internal var _bonusGamble:mgs.aurora.games.logicBlocks.data.types.BonusGamblePacket;

        internal var _bonusPicks:mgs.aurora.games.logicBlocks.data.types.BonusPicksPacket;

        internal var _bonusTokenManagers:mgs.aurora.games.logicBlocks.data.types.TokenManagersPacket;

        internal var _bonusPicksNumberOf:int;

        internal var _bonusSpecificNumberOf:int;

        internal var _bonusGambleNumberOf:int;

        internal var _bonusTokenManNumberOf:int;
    }
}


//              class BonusPickPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class BonusPickPacket extends Object
    {
        public function BonusPickPacket(arg1:int, arg2:int, arg3:int, arg4:int)
        {
            super();
            this._item = arg1;
            this._pickedBy = arg2;
            this._pickedByLevel = arg3;
            this._result = new Vector.<mgs.aurora.games.logicBlocks.data.types.ResultPacket>(arg4, true);
            return;
        }

        public function addResult(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String):void
        {
            this.result[arg1] = new mgs.aurora.games.logicBlocks.data.types.ResultPacket(int(arg2), Number(arg3), Number(arg4), Number(arg5), Number(arg6), Number(arg7), arg8 != "1" ? false : true, Number(arg9));
            return;
        }

        public function get result():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ResultPacket>
        {
            return this._result;
        }

        public function get item():int
        {
            return this._item;
        }

        public function get pickedBy():int
        {
            return this._pickedBy;
        }

        public function get pickedByLevel():int
        {
            return this._pickedByLevel;
        }

        public function get totalWin():Number
        {
            var loc2:*=null;
            this._totalWin = 0;
            var loc1:*=0;
            while (loc1 < this._result.length) 
            {
                loc2 = this._result[loc1];
                if (loc2.playerBenefit != 1) 
                {
                    if (loc2.playerBenefit == 2) 
                    {
                        this._totalWin = this._totalWin + loc2.value;
                    }
                }
                else 
                {
                    this._totalWin = this._totalWin + loc2.consolationValue;
                }
                ++loc1;
            }
            return this._totalWin;
        }

        internal var _item:int;

        internal var _pickedBy:int;

        internal var _pickedByLevel:int;

        internal var _result:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ResultPacket>;

        internal var _totalWin:Number;
    }
}


//              class BonusPicksPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class BonusPicksPacket extends Object
    {
        public function BonusPicksPacket(arg1:int)
        {
            super();
            this._length = int(arg1);
            this._picks = new Vector.<mgs.aurora.games.logicBlocks.data.types.BonusPickPacket>(this._length, true);
            return;
        }

        public function addPick(arg1:int, arg2:String, arg3:String, arg4:String, arg5:int):void
        {
            this._picks[arg1] = new mgs.aurora.games.logicBlocks.data.types.BonusPickPacket(int(arg2), int(arg3), int(arg4), arg5);
            return;
        }

        public function get picks():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.BonusPickPacket>
        {
            return this._picks;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _picks:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.BonusPickPacket>;

        internal var _length:int;
    }
}


//              class CurrentGamePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class CurrentGamePacket extends Object
    {
        public function CurrentGamePacket(arg1:uint, arg2:uint, arg3:Number, arg4:uint, arg5:uint)
        {
            super();
            this._offerID = arg1;
            this._instanceID = arg2;
            this._sumWinnings = arg3;
            this._gamesRemaining = arg4;
            this._gamesPlayed = arg5;
            return;
        }

        public function get offerID():uint
        {
            return this._offerID;
        }

        public function get instanceID():uint
        {
            return this._instanceID;
        }

        public function get sumWinnings():Number
        {
            return this._sumWinnings;
        }

        public function get gamesRemaining():uint
        {
            return this._gamesRemaining;
        }

        public function get gamesPlayed():uint
        {
            return this._gamesPlayed;
        }

        public function get uniqueId():String
        {
            return this._offerID + "-" + this._instanceID;
        }

        internal var _offerID:uint;

        internal var _instanceID:uint;

        internal var _sumWinnings:Number;

        internal var _gamesRemaining:uint;

        internal var _gamesPlayed:uint;

        internal var _uniqueId:String;
    }
}


//              class DefaultBetPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class DefaultBetPacket extends Object
    {
        public function DefaultBetPacket(arg1:uint, arg2:__AS3__.vec.Vector.<int>, arg3:Number, arg4:Number)
        {
            super();
            this._coins = arg1;
            this._lines = arg2;
            this._chipSize = arg3;
            this._sideBet = arg4;
            return;
        }

        public function get coins():uint
        {
            return this._coins;
        }

        public function get lines():__AS3__.vec.Vector.<int>
        {
            return this._lines;
        }

        public function get chipSize():Number
        {
            return this._chipSize;
        }

        public function get sideBet():Number
        {
            return this._sideBet;
        }

        internal var _coins:uint;

        internal var _lines:__AS3__.vec.Vector.<int>;

        internal var _chipSize:Number;

        internal var _sideBet:Number;

        internal var _activeLines:int;
    }
}


//              class ExpandingWildRulePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ExpandingWildRulePacket extends Object
    {
        public function ExpandingWildRulePacket(arg1:int, arg2:Array, arg3:Array)
        {
            super();
            this._expandingWildRuleSet = int(arg1);
            this._expandingWildRules = Vector.<int>(arg2);
            this._multipliers = Vector.<int>(arg3);
            return;
        }

        public function get expandingWildRuleSet():int
        {
            return this._expandingWildRuleSet;
        }

        public function get expandingWildRules():__AS3__.vec.Vector.<int>
        {
            return this._expandingWildRules;
        }

        public function get multipliers():__AS3__.vec.Vector.<int>
        {
            return this._multipliers;
        }

        internal var _expandingWildRuleSet:int;

        internal var _expandingWildRules:__AS3__.vec.Vector.<int>;

        internal var _multipliers:__AS3__.vec.Vector.<int>;
    }
}


//              class ExpandingWildRulesPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ExpandingWildRulesPacket extends Object
    {
        public function ExpandingWildRulesPacket(arg1:Number)
        {
            super();
            this._expandingWildRules = new Vector.<mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulePacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addRule(arg1:int, arg2:String, arg3:String, arg4:String):void
        {
            this._expandingWildRules[arg1] = new mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulePacket(int(arg2), arg3.split(","), arg4.split(","));
            return;
        }

        public function get expandingWildRules():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulePacket>
        {
            return this._expandingWildRules;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _expandingWildRules:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulePacket>;

        internal var _length:int;
    }
}


//              class ExtendedSpinStylePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ExtendedSpinStylePacket extends Object
    {
        public function ExtendedSpinStylePacket(arg1:int, arg2:Array, arg3:String, arg4:int, arg5:int, arg6:int, arg7:String)
        {
            super();
            this._extendedSpinStyleID = arg1;
            this._multipliers = Vector.<Number>(arg2);
            this._styleName = arg3;
            this._isActiveCurrentSpin = int(arg4);
            this._isActiveNextSpin = int(arg5);
            this._isFreeGame = int(arg6);
            this._wildVABoxes = uint(arg7);
            return;
        }

        public function get extendedSpinStyleID():int
        {
            return this._extendedSpinStyleID;
        }

        public function get multipliers():__AS3__.vec.Vector.<Number>
        {
            return this._multipliers;
        }

        public function get styleName():String
        {
            return this._styleName;
        }

        public function get isActiveCurrentSpin():int
        {
            return this._isActiveCurrentSpin;
        }

        public function get isActiveNextSpin():int
        {
            return this._isActiveNextSpin;
        }

        public function get isFreeGame():int
        {
            return this._isFreeGame;
        }

        public function get wildVABoxes():uint
        {
            return this._wildVABoxes;
        }

        internal var _extendedSpinStyleID:int;

        internal var _multipliers:__AS3__.vec.Vector.<Number>;

        internal var _styleName:String;

        internal var _isActiveCurrentSpin:int;

        internal var _isActiveNextSpin:int;

        internal var _isFreeGame:int;

        internal var _wildVABoxes:uint;
    }
}


//              class ExtendedSpinStylesPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ExtendedSpinStylesPacket extends Object
    {
        public function ExtendedSpinStylesPacket(arg1:int)
        {
            super();
            this._extendedSpinStyles = new Vector.<mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylePacket>(arg1, true);
            this._length = arg1;
            this._qualifyingRandomWildWins = new Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>();
            return;
        }

        public function addStyle(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String):void
        {
            this._extendedSpinStyles[arg1] = new mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylePacket(int(arg2), arg3.split(","), arg4, int(arg5), int(arg6), int(arg7), arg8);
            return;
        }

        public function get extendedSpinStyles():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylePacket>
        {
            return this._extendedSpinStyles;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        public function get qualifyingRandomWildWins():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>
        {
            return this._qualifyingRandomWildWins;
        }

        public function addQualifyingRandomWildWins(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String):void
        {
            this._qualifyingRandomWildWins.push(new mgs.aurora.games.logicBlocks.data.types.WinPacket(int(arg1), int(arg2), int(arg3), arg4.split(","), arg5.split(","), arg6, null, null));
            return;
        }

        internal var _extendedSpinStyles:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylePacket>;

        internal var _length:int;

        internal var _qualifyingRandomWildWins:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>;
    }
}


//              class FrameworkPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class FrameworkPacket extends Object
    {
        public function FrameworkPacket(arg1:String)
        {
            super();
            this._state = int(arg1);
            return;
        }

        public function get state():int
        {
            return this._state;
        }

        internal var _state:int;
    }
}


//              class FreeGamePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class FreeGamePacket extends Object
    {
        public function FreeGamePacket(arg1:uint, arg2:uint, arg3:Number, arg4:uint, arg5:uint, arg6:uint, arg7:Number, arg8:uint, arg9:String, arg10:String, arg11:String)
        {
            super();
            this._offerID = arg1;
            this._instanceID = arg2;
            this._sumWinnings = arg3;
            this._gamesRemaining = arg4;
            this._gamesPlayed = arg5;
            this._creditType = arg6;
            this._maxCost = arg7;
            this._gamesAwarded = arg8;
            this._name1 = arg9;
            this._name2 = arg10;
            this._endDate = arg11;
            return;
        }

        public function get instanceID():uint
        {
            return this._instanceID;
        }

        public function get sumWinnings():Number
        {
            return this._sumWinnings;
        }

        public function get gamesRemaining():uint
        {
            return this._gamesRemaining;
        }

        public function get gamesPlayed():uint
        {
            return this._gamesPlayed;
        }

        public function get creditType():uint
        {
            return this._creditType;
        }

        public function get maxCost():Number
        {
            return this._maxCost;
        }

        public function get gamesAwarded():uint
        {
            return this._gamesAwarded;
        }

        public function get name1():String
        {
            return this._name1;
        }

        public function get name2():String
        {
            return this._name2;
        }

        public function get endDate():String
        {
            return this._endDate;
        }

        public function get rejected():Boolean
        {
            return this._rejected;
        }

        public function set rejected(arg1:Boolean):void
        {
            this._rejected = arg1;
            return;
        }

        public function get defaultBet():mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket
        {
            return this._defaultBet;
        }

        public function get uniqueId():String
        {
            return this._offerID + "-" + this._instanceID;
        }

        public function get activeLines():int
        {
            return this._activeLines;
        }

        public function addDefaultBet(arg1:int, arg2:int, arg3:Number, arg4:Number):void
        {
            var loc1:*=new Vector.<int>(arg2);
            var loc2:*=0;
            while (loc2 < loc1.length) 
            {
                loc1[loc2] = loc2;
                ++loc2;
            }
            this._defaultBet = new mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket(arg1, loc1, arg3, arg4);
            this._activeLines = this._defaultBet.lines.length;
            return;
        }

        public function get offerID():uint
        {
            return this._offerID;
        }

        internal var _offerID:uint;

        internal var _instanceID:uint;

        internal var _sumWinnings:Number;

        internal var _gamesRemaining:uint;

        internal var _gamesPlayed:uint;

        internal var _creditType:uint;

        internal var _maxCost:Number;

        internal var _gamesAwarded:uint;

        internal var _name1:String;

        internal var _name2:String;

        internal var _endDate:String;

        internal var _rejected:Boolean=false;

        internal var _uniqueId:String;

        internal var _activeLines:int=0;

        internal var _defaultBet:mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket;
    }
}


//              class FreeGamesPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class FreeGamesPacket extends Object
    {
        public function FreeGamesPacket(arg1:uint)
        {
            super();
            this._length = arg1;
            this._freeGames = new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>(this._length, false);
            return;
        }

        public function addFreeGame(arg1:uint, arg2:uint, arg3:uint, arg4:Number, arg5:uint, arg6:uint, arg7:uint, arg8:Number, arg9:uint, arg10:String, arg11:String, arg12:String):void
        {
            var loc1:*=new mgs.aurora.games.logicBlocks.data.types.FreeGamePacket(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
            this._freeGames[arg1] = loc1;
            return;
        }

        public function addCurrentGame(arg1:int, arg2:int, arg3:Number, arg4:int, arg5:int):void
        {
            this._currentGame = new mgs.aurora.games.logicBlocks.data.types.CurrentGamePacket(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function addLastRealWager(arg1:Number, arg2:__AS3__.vec.Vector.<int>, arg3:Number, arg4:Number):void
        {
            this._lastRealWager = new mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket(arg1, arg2, arg3, arg4);
            return;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        public function get freeGames():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>
        {
            return this._freeGames;
        }

        public function set currentGame(arg1:mgs.aurora.games.logicBlocks.data.types.CurrentGamePacket):void
        {
            this._currentGame = arg1;
            return;
        }

        public function get currentGame():mgs.aurora.games.logicBlocks.data.types.CurrentGamePacket
        {
            return this._currentGame;
        }

        public function get lastRealWager():mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket
        {
            return this._lastRealWager;
        }

        internal var _freeGames:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>;

        internal var _length:uint;

        internal var _currentGame:mgs.aurora.games.logicBlocks.data.types.CurrentGamePacket;

        internal var _lastRealWager:mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket;
    }
}


//              class FreeSpinAwardPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class FreeSpinAwardPacket extends Object
    {
        public function FreeSpinAwardPacket(arg1:int, arg2:int, arg3:Number, arg4:Number, arg5:Number, arg6:Number, arg7:int)
        {
            super();
            this._freeSpinNum = int(arg1);
            this._freeSpinReelSet = int(arg2);
            this._freeSpinMultiplier = Number(arg3);
            this._freeSpinMaxMultiplier = Number(arg4);
            this._freeSpinGuaranteedWin = Number(arg5);
            this._freeSpinMultiplierGuaranteedWin = Number(arg6);
            this._wasAwardedAtStart = int(arg7);
            return;
        }

        public function get freeSpinNum():int
        {
            return this._freeSpinNum;
        }

        public function get freeSpinReelSet():int
        {
            return this._freeSpinReelSet;
        }

        public function get freeSpinMultiplier():Number
        {
            return this._freeSpinMultiplier;
        }

        public function get freeSpinMaxMultiplier():Number
        {
            return this._freeSpinMaxMultiplier;
        }

        public function get freeSpinGuaranteedWin():Number
        {
            return this._freeSpinGuaranteedWin;
        }

        public function get freeSpinMultiplierGuaranteedWin():Number
        {
            return this._freeSpinMultiplierGuaranteedWin;
        }

        public function get wasAwardedAtStart():int
        {
            return this._wasAwardedAtStart;
        }

        internal var _freeSpinNum:int;

        internal var _freeSpinReelSet:int;

        internal var _freeSpinMultiplier:Number;

        internal var _freeSpinMaxMultiplier:Number;

        internal var _freeSpinGuaranteedWin:Number;

        internal var _freeSpinMultiplierGuaranteedWin:Number;

        internal var _wasAwardedAtStart:int;
    }
}


//              class FreeSpinAwardsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class FreeSpinAwardsPacket extends Object
    {
        public function FreeSpinAwardsPacket(arg1:int)
        {
            super();
            this._freeSpinAwards = new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardPacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addFreeSpinAward(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String):void
        {
            this._freeSpinAwards[arg1] = new mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardPacket(int(arg2), int(arg3), Number(arg4), Number(arg5), Number(arg6), Number(arg7), int(arg8));
            return;
        }

        public function get freeSpinAwards():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardPacket>
        {
            return this._freeSpinAwards;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _freeSpinAwards:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardPacket>;

        internal var _length:int;
    }
}


//              class GamblePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class GamblePacket extends Object
    {
        public function GamblePacket(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String, arg10:String, arg11:String, arg12:String, arg13:String, arg14:String, arg15:String)
        {
            super();
            this._state = int(arg1);
            this._maxAttempts = int(arg2);
            this._allowedGambleMethod = int(arg3);
            this._allowedGambleSize = int(arg4);
            this._maxWin = Number(arg5);
            this._gamblesMade = int(arg6);
            this._win = Number(arg7);
            this._method = int(arg8);
            this._size = int(arg9);
            this._card = int(arg10);
            this._prevCards = Vector.<int>(arg11.split(",").reverse());
            this._allowColour = arg12 != "1" ? false : true;
            this._allowSuit = arg13 != "1" ? false : true;
            this._allowHalf = arg14 != "1" ? false : true;
            this._allowFull = arg15 != "1" ? false : true;
            return;
        }

        public function get state():int
        {
            return this._state;
        }

        public function get maxAttempts():int
        {
            return this._maxAttempts;
        }

        public function get allowedGambleMethod():int
        {
            return this._allowedGambleMethod;
        }

        public function get allowedGambleSize():int
        {
            return this._allowedGambleSize;
        }

        public function get maxWin():Number
        {
            return this._maxWin;
        }

        public function get gamblesMade():int
        {
            return this._gamblesMade;
        }

        public function get win():Number
        {
            return this._win;
        }

        public function get method():int
        {
            return this._method;
        }

        public function get size():int
        {
            return this._size;
        }

        public function get card():int
        {
            return this._card;
        }

        public function get prevCards():__AS3__.vec.Vector.<int>
        {
            return this._prevCards;
        }

        public function get allowColour():Boolean
        {
            return this._allowColour;
        }

        public function get allowSuit():Boolean
        {
            return this._allowSuit;
        }

        public function get allowHalf():Boolean
        {
            return this._allowHalf;
        }

        public function get allowFull():Boolean
        {
            return this._allowFull;
        }

        internal var _state:int;

        internal var _maxAttempts:int;

        internal var _allowedGambleMethod:int;

        internal var _allowedGambleSize:int;

        internal var _maxWin:Number;

        internal var _gamblesMade:int;

        internal var _win:Number;

        internal var _method:int;

        internal var _size:int;

        internal var _card:int;

        internal var _prevCards:__AS3__.vec.Vector.<int>;

        internal var _allowColour:Boolean;

        internal var _allowSuit:Boolean;

        internal var _allowHalf:Boolean;

        internal var _allowFull:Boolean;
    }
}


//              class HoldPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class HoldPacket extends Object
    {
        public function HoldPacket(arg1:int)
        {
            super();
            this._matchPos = arg1;
            return;
        }

        public function get matchPos():int
        {
            return this._matchPos;
        }

        internal var _matchPos:int;
    }
}


//              class HoldsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class HoldsPacket extends Object
    {
        public function HoldsPacket(arg1:int)
        {
            super();
            this._length = arg1;
            this._hold = new Vector.<mgs.aurora.games.logicBlocks.data.types.HoldPacket>(arg1, true);
            return;
        }

        public function addHold(arg1:int, arg2:String):void
        {
            this._hold[arg1] = new mgs.aurora.games.logicBlocks.data.types.HoldPacket(int(arg2));
            return;
        }

        public function get numberOf():int
        {
            return this._length;
        }

        public function get hold():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.HoldPacket>
        {
            return this._hold;
        }

        internal var _hold:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.HoldPacket>;

        internal var _length:int;
    }
}


//              class IDPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class IDPacket extends Object
    {
        public function IDPacket(arg1:String)
        {
            super();
            this._verb = arg1;
            return;
        }

        public function get verb():String
        {
            return this._verb;
        }

        internal var _verb:String;
    }
}


//              class JackpotPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class JackpotPacket extends Object
    {
        public function JackpotPacket()
        {
            super();
            return;
        }
    }
}


//              class JackpotWinPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class JackpotWinPacket extends Object
    {
        public function JackpotWinPacket()
        {
            super();
            return;
        }
    }
}


//              class JackpotWinsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class JackpotWinsPacket extends Object
    {
        public function JackpotWinsPacket(arg1:int)
        {
            super();
            this._jackpotWins = new Vector.<mgs.aurora.games.logicBlocks.data.types.JackpotWinPacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addWin(arg1:int):void
        {
            this._jackpotWins[arg1] = new mgs.aurora.games.logicBlocks.data.types.JackpotWinPacket();
            return;
        }

        public function get jackpotWins():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.JackpotWinPacket>
        {
            return this._jackpotWins;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _jackpotWins:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.JackpotWinPacket>;

        internal var _length:int;
    }
}


//              class JackpotsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class JackpotsPacket extends Object
    {
        public function JackpotsPacket(arg1:int)
        {
            super();
            this._jackpots = new Vector.<mgs.aurora.games.logicBlocks.data.types.JackpotPacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addJackpot(arg1:int):void
        {
            this._jackpots[arg1] = new mgs.aurora.games.logicBlocks.data.types.JackpotPacket();
            return;
        }

        public function get jackpots():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.JackpotPacket>
        {
            return this._jackpots;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _jackpots:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.JackpotPacket>;

        internal var _length:int;
    }
}


//              class NextSpinCostPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class NextSpinCostPacket extends Object
    {
        public function NextSpinCostPacket(arg1:int, arg2:Number)
        {
            super();
            this._reelId = arg1;
            this._cost = arg2;
            return;
        }

        public function get reelId():int
        {
            return this._reelId;
        }

        public function get cost():Number
        {
            return this._cost;
        }

        internal var _reelId:int;

        internal var _cost:Number;
    }
}


//              class NextSpinCostsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class NextSpinCostsPacket extends Object
    {
        public function NextSpinCostsPacket(arg1:int)
        {
            super();
            this._length = arg1;
            this._nextSpinCosts = new Vector.<mgs.aurora.games.logicBlocks.data.types.NextSpinCostPacket>(this._length, true);
            return;
        }

        public function addNextSpinCost(arg1:int, arg2:String, arg3:String):void
        {
            this._nextSpinCosts[arg1] = new mgs.aurora.games.logicBlocks.data.types.NextSpinCostPacket(int(arg2), Number(arg3));
            return;
        }

        public function get nextSpinCosts():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.NextSpinCostPacket>
        {
            return this._nextSpinCosts;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _nextSpinCosts:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.NextSpinCostPacket>;

        internal var _length:int;
    }
}


//              class NextSpinPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class NextSpinPacket extends Object
    {
        public function NextSpinPacket(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String, arg10:String, arg11:String, arg12:String, arg13:String, arg14:mgs.aurora.games.logicBlocks.data.types.NudgesPacket, arg15:mgs.aurora.games.logicBlocks.data.types.HoldsPacket)
        {
            super();
            this._extraWilds = Vector.<int>(arg1.split(","));
            this._freeSpinsRemaining = int(arg2);
            this._reelSet = int(arg3);
            this._freeSpinMultiplier = Number(arg4);
            this._freeSpinGuaranteedWin = Number(arg5);
            this._scaledFreeSpinGuaranteedWin = Number(arg6);
            this._freeSpinMultiplyGuaranteedWin = arg7 != "1" ? false : true;
            this._superHoldReels = Vector.<int>(arg8.split(","));
            this._nudgesRemaining = int(arg9);
            this._nudgeDirection = int(arg10);
            this._nextActivePaylines = Vector.<int>(arg11.split(","));
            this._nextNumChips = int(arg12);
            this._nextChipSize = Number(arg13);
            this._nudges = arg14;
            this._holds = arg15;
            return;
        }

        public function get extraWilds():__AS3__.vec.Vector.<int>
        {
            return this._extraWilds;
        }

        public function get freeSpinsRemaining():int
        {
            return this._freeSpinsRemaining;
        }

        public function get reelSet():int
        {
            return this._reelSet;
        }

        public function get freeSpinMultiplier():Number
        {
            return this._freeSpinMultiplier;
        }

        public function get freeSpinGuaranteedWin():Number
        {
            return this._freeSpinGuaranteedWin;
        }

        public function get scaledFreeSpinGuaranteedWin():Number
        {
            return this._scaledFreeSpinGuaranteedWin;
        }

        public function get freeSpinMultiplyGuaranteedWin():Boolean
        {
            return this._freeSpinMultiplyGuaranteedWin;
        }

        public function get superHoldReels():__AS3__.vec.Vector.<int>
        {
            return this._superHoldReels;
        }

        public function get nudgesRemaining():int
        {
            return this._nudgesRemaining;
        }

        public function get nudgeDirection():int
        {
            return this._nudgeDirection;
        }

        public function get holds():mgs.aurora.games.logicBlocks.data.types.HoldsPacket
        {
            return this._holds;
        }

        public function get nudges():mgs.aurora.games.logicBlocks.data.types.NudgesPacket
        {
            return this._nudges;
        }

        public function get nextActivePaylines():__AS3__.vec.Vector.<int>
        {
            return this._nextActivePaylines;
        }

        public function get nextChipSize():Number
        {
            return this._nextChipSize;
        }

        public function get nextNumChips():int
        {
            return this._nextNumChips;
        }

        public function get freeSpinsRetriggered():Boolean
        {
            return this._freeSpinsRetriggered;
        }

        public function freespinsWasRetriggered(arg1:Boolean):void
        {
            this._freeSpinsRetriggered = arg1;
            return;
        }

        internal var _extraWilds:__AS3__.vec.Vector.<int>;

        internal var _freeSpinsRemaining:int;

        internal var _reelSet:int;

        internal var _freeSpinMultiplier:Number;

        internal var _freeSpinGuaranteedWin:Number;

        internal var _scaledFreeSpinGuaranteedWin:Number;

        internal var _freeSpinMultiplyGuaranteedWin:Boolean;

        internal var _superHoldReels:__AS3__.vec.Vector.<int>;

        internal var _nudgesRemaining:int;

        internal var _nudgeDirection:int;

        internal var _nextActivePaylines:__AS3__.vec.Vector.<int>;

        internal var _nextNumChips:int;

        internal var _nextChipSize:Number;

        internal var _nudges:mgs.aurora.games.logicBlocks.data.types.NudgesPacket;

        internal var _holds:mgs.aurora.games.logicBlocks.data.types.HoldsPacket;

        internal var _freeSpinsRetriggered:Boolean=false;
    }
}


//              class NudgePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class NudgePacket extends Object
    {
        public function NudgePacket(arg1:int, arg2:String, arg3:int)
        {
            super();
            this._matchPos = int(arg1);
            this._direction = arg2;
            this._count = int(arg3);
            return;
        }

        public function get matchPos():int
        {
            return this._matchPos;
        }

        public function get direction():String
        {
            return this._direction;
        }

        public function get count():int
        {
            return this._count;
        }

        internal var _matchPos:int;

        internal var _direction:String;

        internal var _count:int;
    }
}


//              class NudgesPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class NudgesPacket extends Object
    {
        public function NudgesPacket(arg1:Number)
        {
            super();
            this._Nudge = new Vector.<mgs.aurora.games.logicBlocks.data.types.NudgePacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addNudge(arg1:int, arg2:String, arg3:String, arg4:String):void
        {
            this._Nudge[arg1] = new mgs.aurora.games.logicBlocks.data.types.NudgePacket(int(arg2), arg3, int(arg4));
            return;
        }

        public function get nudges():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.NudgePacket>
        {
            return this._Nudge;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _Nudge:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.NudgePacket>;

        internal var _length:int;
    }
}


//              class PaylinePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class PaylinePacket extends Object
    {
        public function PaylinePacket(arg1:int, arg2:Number)
        {
            super();
            this._payline = arg1;
            this._paylineCost = arg2;
            return;
        }

        public function get payline():int
        {
            return this._payline;
        }

        public function get paylineCost():Number
        {
            return this._paylineCost;
        }

        internal var _payline:int;

        internal var _paylineCost:Number;
    }
}


//              class PaylinesPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class PaylinesPacket extends Object
    {
        public function PaylinesPacket(arg1:int)
        {
            super();
            this._length = arg1;
            this._paylines = new Vector.<mgs.aurora.games.logicBlocks.data.types.PaylinePacket>(this._length, true);
            this._totalCost = 0;
            return;
        }

        public function addPayline(arg1:int, arg2:String, arg3:String):void
        {
            this._totalCost = this._totalCost + Number(arg3);
            this._paylines[arg1] = new mgs.aurora.games.logicBlocks.data.types.PaylinePacket(int(arg2), Number(arg3));
            return;
        }

        public function get paylines():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.PaylinePacket>
        {
            return this._paylines;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        public function get totalCost():Number
        {
            return this._totalCost;
        }

        internal var _paylines:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.PaylinePacket>;

        internal var _length:int;

        internal var _totalCost:Number;
    }
}


//              class PlayerPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class PlayerPacket extends Object
    {
        public function PlayerPacket(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String)
        {
            super();
            this._balance = Number(arg1);
            this._totalWin = Number(arg2);
            this._userID = int(arg3);
            this._transNumber = int(arg4);
            this._type = int(arg5);
            this._currency = int(arg6);
            this._brandId = int(arg7);
            this._hasPlayedBefore = int(arg8);
            return;
        }

        public function get balance():Number
        {
            return this._balance;
        }

        public function get totalWin():Number
        {
            return this._totalWin;
        }

        public function get userID():int
        {
            return this._userID;
        }

        public function get transNumber():int
        {
            return this._transNumber;
        }

        public function get type():int
        {
            return this._type;
        }

        public function get currency():int
        {
            return this._currency;
        }

        public function get brandId():int
        {
            return this._brandId;
        }

        public function get hasPlayedBefore():int
        {
            return this._hasPlayedBefore;
        }

        internal var _balance:Number;

        internal var _totalWin:Number;

        internal var _userID:int;

        internal var _transNumber:int;

        internal var _type:int;

        internal var _currency:int;

        internal var _brandId:int;

        internal var _hasPlayedBefore:int;
    }
}


//              class ProgressivePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class ProgressivePacket extends Object
    {
        public function ProgressivePacket(arg1:String, arg2:String, arg3:int, arg4:int)
        {
            super();
            this._jackpots = new mgs.aurora.games.logicBlocks.data.types.JackpotsPacket(arg3);
            this._jackpotsWins = new mgs.aurora.games.logicBlocks.data.types.JackpotWinsPacket(arg4);
            this._minPoll = int(arg1);
            this._clientOffset = int(arg2);
            return;
        }

        public function get jackpots():mgs.aurora.games.logicBlocks.data.types.JackpotsPacket
        {
            return this._jackpots;
        }

        public function get jackpotsWins():mgs.aurora.games.logicBlocks.data.types.JackpotWinsPacket
        {
            return this._jackpotsWins;
        }

        public function get minPoll():int
        {
            return this._minPoll;
        }

        public function get clientOffSet():int
        {
            return this._clientOffset;
        }

        internal var _jackpotsWins:mgs.aurora.games.logicBlocks.data.types.JackpotWinsPacket;

        internal var _jackpots:mgs.aurora.games.logicBlocks.data.types.JackpotsPacket;

        internal var _minPoll:int;

        internal var _clientOffset:int;
    }
}


//              class ReelSetPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ReelSetPacket extends Object
    {
        public function ReelSetPacket(arg1:int)
        {
            super();
            this._numSets = int(arg1);
            this._defaultPos = new Vector.<Array>(this._numSets, true);
            return;
        }

        public function addReelsetSymbols(arg1:String, arg2:int):void
        {
            var loc1:*=arg1.split(",");
            this._defaultPos[arg2] = loc1;
            return;
        }

        public function get numSets():int
        {
            return this._numSets;
        }

        public function get defaultPos():__AS3__.vec.Vector.<Array>
        {
            return this._defaultPos;
        }

        internal var _defaultPos:__AS3__.vec.Vector.<Array>;

        internal var _numSets:int;
    }
}


//              class ReelSlidePacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ReelSlidePacket extends Object
    {
        public function ReelSlidePacket(arg1:String, arg2:String, arg3:String, arg4:int)
        {
            super();
            this._maxMultiplier = Number(arg1);
            this._maxReelSlides = int(arg2);
            this._multiplierIncrement = int(arg3);
            this._numberOfSteps = arg4;
            this._realSlideSteps = new Vector.<mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket>(this._numberOfSteps, true);
            return;
        }

        public function addReelSlideStep(arg1:int, arg2:mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket):void
        {
            this._realSlideSteps[arg1] = arg2;
            return;
        }

        public function get maxMultiplier():Number
        {
            return this._maxMultiplier;
        }

        public function get maxReelSlides():int
        {
            return this._maxReelSlides;
        }

        public function get multiplierIncrement():int
        {
            return this._multiplierIncrement;
        }

        public function get numberOf():int
        {
            return this._numberOfSteps;
        }

        public function get realSlideStep():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket>
        {
            return this._realSlideSteps;
        }

        internal var _maxMultiplier:Number;

        internal var _maxReelSlides:int;

        internal var _multiplierIncrement:int;

        internal var _numberOfSteps:int;

        internal var _realSlideSteps:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket>;
    }
}


//              class ReelSlideStepPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class ReelSlideStepPacket extends Object
    {
        public function ReelSlideStepPacket(arg1:int, arg2:Number, arg3:Array, arg4:Number, arg5:mgs.aurora.games.logicBlocks.data.types.WinsPacket, arg6:mgs.aurora.games.logicBlocks.data.types.VisAreaPacket)
        {
            super();
            this._step = arg1;
            this._activeMultiplier = arg2;
            this._dissolvedVABoxes = new Vector.<int>();
            var loc1:*=0;
            while (loc1 < arg3.length) 
            {
                this._dissolvedVABoxes.push(int(arg3[loc1]));
                ++loc1;
            }
            this._win = arg4;
            this._wins = arg5;
            this._visArea = arg6;
            return;
        }

        public function get step():int
        {
            return this._step;
        }

        public function get activeMultiplier():Number
        {
            return this._activeMultiplier;
        }

        public function get dissolvedVABoxes():__AS3__.vec.Vector.<int>
        {
            return this._dissolvedVABoxes;
        }

        public function get win():Number
        {
            return this._win;
        }

        public function get visArea():mgs.aurora.games.logicBlocks.data.types.VisAreaPacket
        {
            return this._visArea;
        }

        public function get wins():mgs.aurora.games.logicBlocks.data.types.WinsPacket
        {
            return this._wins;
        }

        internal var _step:int;

        internal var _activeMultiplier:Number;

        internal var _dissolvedVABoxes:__AS3__.vec.Vector.<int>;

        internal var _win:Number;

        internal var _visArea:mgs.aurora.games.logicBlocks.data.types.VisAreaPacket;

        internal var _wins:mgs.aurora.games.logicBlocks.data.types.WinsPacket;
    }
}


//              class RespinPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class RespinPacket extends Object
    {
        public function RespinPacket(arg1:String, arg2:String)
        {
            super();
            this._length = int(arg1);
            this._nextSpinCosts = new Vector.<mgs.aurora.games.logicBlocks.data.types.NextSpinCostsPacket>(this._length, true);
            this._respunReels = int(arg2);
            this._hasRespins = false;
            return;
        }

        public function addNextSpinsCosts(arg1:int, arg2:mgs.aurora.games.logicBlocks.data.types.NextSpinCostsPacket):void
        {
            var loc1:*=null;
            this._nextSpinCosts[arg1] = arg2;
            if (arg2.numberOf > 0) 
            {
                var loc2:*=0;
                var loc3:*=arg2.nextSpinCosts;
                for each (loc1 in loc3) 
                {
                    if (!(loc1.cost > 0)) 
                    {
                        continue;
                    }
                    this._hasRespins = true;
                    break;
                }
            }
            return;
        }

        public function get nextSpinCosts():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.NextSpinCostsPacket>
        {
            return this._nextSpinCosts;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        public function get respunReels():int
        {
            return this._respunReels;
        }

        public function get hasRespins():Boolean
        {
            return this._hasRespins;
        }

        internal var _nextSpinCosts:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.NextSpinCostsPacket>;

        internal var _respunReels:int;

        internal var _length:int;

        internal var _hasRespins:Boolean=false;
    }
}


//              class ResultPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class ResultPacket extends Object
    {
        public function ResultPacket(arg1:int, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:int, arg7:Boolean, arg8:Number)
        {
            super();
            this._id = arg1;
            this._rawValue = arg2;
            this._value = arg3;
            this._consolationValue = arg4;
            this._multiplier = arg5;
            this._playerBenefit = arg6;
            this._doesMultiplierApply = arg7;
            this._credits = arg8;
            return;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get rawValue():Number
        {
            return this._rawValue;
        }

        public function get value():Number
        {
            return this._value;
        }

        public function get consolationValue():Number
        {
            return this._consolationValue;
        }

        public function get multiplier():Number
        {
            return this._multiplier;
        }

        public function get playerBenefit():int
        {
            return this._playerBenefit;
        }

        public function get doesMultiplierApply():Boolean
        {
            return this._doesMultiplierApply;
        }

        public function get credits():Number
        {
            return this._credits;
        }

        internal var _id:int;

        internal var _rawValue:Number;

        internal var _value:Number;

        internal var _consolationValue:Number;

        internal var _multiplier:Number;

        internal var _playerBenefit:int;

        internal var _doesMultiplierApply:Boolean;

        internal var _credits:Number;
    }
}


//              class SideBetPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class SideBetPacket extends Object
    {
        public function SideBetPacket(arg1:Array, arg2:Boolean, arg3:Boolean, arg4:Boolean, arg5:Boolean)
        {
            super();
            this._avaliableConstants = Vector.<int>(arg1, true);
            this._enforceMaxPaylines = arg2;
            this._tieToCoinsPerPayline = arg3;
            this._tieToNumPaylines = arg4;
            this._tieToChipSize = arg5;
            return;
        }

        public function get avaliableConstants():__AS3__.vec.Vector.<int>
        {
            return this._avaliableConstants;
        }

        public function get enforceMaxPaylines():Boolean
        {
            return this._enforceMaxPaylines;
        }

        public function get tieToCoinsPerPayline():Boolean
        {
            return this._tieToCoinsPerPayline;
        }

        public function get tieToNumPaylines():Boolean
        {
            return this._tieToNumPaylines;
        }

        public function get tieToChipSize():Boolean
        {
            return this._tieToChipSize;
        }

        internal var _avaliableConstants:__AS3__.vec.Vector.<int>;

        internal var _enforceMaxPaylines:Boolean;

        internal var _tieToCoinsPerPayline:Boolean;

        internal var _tieToNumPaylines:Boolean;

        internal var _tieToChipSize:Boolean;
    }
}


//              class SideBetsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class SideBetsPacket extends Object
    {
        public function SideBetsPacket(arg1:int)
        {
            super();
            this._length = arg1;
            this._sideBets = new Vector.<mgs.aurora.games.logicBlocks.data.types.SideBetPacket>(this._length, true);
            return;
        }

        public function addSideBet(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String):void
        {
            this._sideBets[arg1] = new mgs.aurora.games.logicBlocks.data.types.SideBetPacket(arg2.split(","), arg3 != "1" ? false : true, arg4 != "1" ? false : true, arg5 != "1" ? false : true, arg6 != "1" ? false : true);
            return;
        }

        public function get sideBets():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.SideBetPacket>
        {
            return this._sideBets;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _sideBets:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.SideBetPacket>;

        internal var _length:int;
    }
}


//              class SlotPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class SlotPacket extends Object
    {
        public function SlotPacket(arg1:String, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:String, arg9:String, arg10:String, arg11:String, arg12:String, arg13:String, arg14:String)
        {
            super();
            this._win = Number(arg1);
            this._triggeringWin = Number(arg2);
            this._state = int(arg3);
            this._reelSet = int(arg4);
            this._reelPos = Vector.<int>(arg5.split(","));
            this._reelPos.fixed = true;
            this._hasRespinFeature = int(arg6);
            this._extraWilds = arg7.split(",");
            this._freeSpinMultiplier = Number(arg8);
            this._freeSpinMultiplierStatus = Number(arg9);
            this._freeSpinGuaranteedWin = Number(arg10);
            this._scaledFreeSpinGuaranteedWin = Number(arg11);
            this._freeSpinMultiplyGuaranteedWin = Boolean(arg12);
            this._canBeExtraWild = arg13.split(",");
            this._requiredUserWilds = arg14.split(",");
            return;
        }

        public function get win():Number
        {
            return this._win;
        }

        public function get triggeringWin():Number
        {
            return this._triggeringWin;
        }

        public function get state():int
        {
            return this._state;
        }

        public function get reelSet():int
        {
            return this._reelSet;
        }

        public function get reelPos():__AS3__.vec.Vector.<int>
        {
            return this._reelPos;
        }

        public function get hasRespinFeature():int
        {
            return this._hasRespinFeature;
        }

        public function get extraWilds():Array
        {
            return this._extraWilds;
        }

        public function get freeSpinMultiplier():Number
        {
            return this._freeSpinMultiplier;
        }

        public function get freeSpinMultiplierStatus():Number
        {
            return this._freeSpinMultiplierStatus;
        }

        public function get freeSpinGuaranteedWin():Number
        {
            return this._freeSpinGuaranteedWin;
        }

        public function get scaledFreeSpinGuaranteedWin():Number
        {
            return this._scaledFreeSpinGuaranteedWin;
        }

        public function get freeSpinMultiplyGuaranteedWin():Boolean
        {
            return this._freeSpinMultiplyGuaranteedWin;
        }

        public function get canBeExtraWild():Array
        {
            return this._canBeExtraWild;
        }

        public function get requiredUserWilds():Array
        {
            return this._requiredUserWilds;
        }

        internal var _win:Number;

        internal var _triggeringWin:Number;

        internal var _state:int;

        internal var _reelSet:int;

        internal var _reelPos:__AS3__.vec.Vector.<int>;

        internal var _hasRespinFeature:int;

        internal var _extraWilds:Array;

        internal var _freeSpinMultiplier:Number;

        internal var _freeSpinMultiplierStatus:Number;

        internal var _freeSpinGuaranteedWin:Number;

        internal var _scaledFreeSpinGuaranteedWin:Number;

        internal var _freeSpinMultiplyGuaranteedWin:Boolean;

        internal var _canBeExtraWild:Array;

        internal var _requiredUserWilds:Array;
    }
}


//              class TokenManagerPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class TokenManagerPacket extends Object
    {
        public function TokenManagerPacket(arg1:String, arg2:Array, arg3:Array, arg4:Array, arg5:String)
        {
            super();
            this._name = arg1;
            this._numTokensToCollect = Vector.<int>(arg2);
            this._numTokensToCollect.fixed = true;
            this._tokenIDsAwarded = Vector.<int>(arg3);
            this._tokenIDsAwarded.fixed = true;
            this._multiplier = Vector.<Number>(arg4);
            this._multiplier.fixed = true;
            this._bonusToTrigger = arg5;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function get numTokensToCollect():__AS3__.vec.Vector.<int>
        {
            return this._numTokensToCollect;
        }

        public function get tokenIDsAwarded():__AS3__.vec.Vector.<int>
        {
            return this._tokenIDsAwarded;
        }

        public function get multiplier():__AS3__.vec.Vector.<Number>
        {
            return this._multiplier;
        }

        public function get bonusToTrigger():String
        {
            return this._bonusToTrigger;
        }

        internal var _name:String;

        internal var _numTokensToCollect:__AS3__.vec.Vector.<int>;

        internal var _tokenIDsAwarded:__AS3__.vec.Vector.<int>;

        internal var _multiplier:__AS3__.vec.Vector.<Number>;

        internal var _bonusToTrigger:String;
    }
}


//              class TokenManagersPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class TokenManagersPacket extends Object
    {
        public function TokenManagersPacket(arg1:int)
        {
            super();
            this._length = arg1;
            this._tokenManager = new Vector.<mgs.aurora.games.logicBlocks.data.types.TokenManagerPacket>(this._length, true);
            return;
        }

        public function addToken(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String):void
        {
            this._tokenManager[arg1] = new mgs.aurora.games.logicBlocks.data.types.TokenManagerPacket(arg2, arg3 == "" ? [] : arg3.split(","), arg4 == "" ? [] : arg4.split(","), arg5 == "" ? [] : arg5.split(","), arg6);
            return;
        }

        public function get tokenManagers():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.TokenManagerPacket>
        {
            return this._tokenManager;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _tokenManager:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.TokenManagerPacket>;

        internal var _length:int;
    }
}


//              class TrailPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    public class TrailPacket extends Object
    {
        public function TrailPacket()
        {
            super();
            return;
        }
    }
}


//              class TrailsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class TrailsPacket extends Object
    {
        public function TrailsPacket(arg1:Number)
        {
            super();
            this._trails = new Vector.<mgs.aurora.games.logicBlocks.data.types.TrailPacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addTrail(arg1:int):void
        {
            this._trails[arg1] = new mgs.aurora.games.logicBlocks.data.types.TrailPacket();
            return;
        }

        public function get trails():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.TrailPacket>
        {
            return this._trails;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        internal var _trails:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.TrailPacket>;

        internal var _length:int;
    }
}


//              class VisAreaPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class VisAreaPacket extends Object
    {
        public function VisAreaPacket(arg1:String, arg2:String, arg3:String, arg4:String)
        {
            super();
            this._numRows = int(arg1);
            this._numCols = int(arg2);
            this._numPaylines = int(arg3);
            if (arg4 == "") 
            {
                this._wildVABoxes = [];
            }
            else 
            {
                this._wildVABoxes = arg4.split(",");
            }
            this._symbols = new Vector.<Array>(this._numRows, true);
            this._reelPos = new Vector.<Array>(this._numRows, true);
            this._reelPosArray = [];
            this._symbolsArray = [];
            return;
        }

        public function addRowSymbols(arg1:String, arg2:int):void
        {
            var loc1:*=arg1.split(",");
            this._symbols[arg2] = loc1;
            loc1 = loc1.concat(this._symbolsArray);
            this._symbolsArray = loc1;
            return;
        }

        public function addRowReelPos(arg1:String, arg2:int):void
        {
            var loc1:*=arg1.split(",");
            this._reelPos[arg2] = loc1;
            loc1 = loc1.concat(this._reelPosArray);
            this._reelPosArray = loc1;
            if (arg2 == 0) 
            {
                this._topReelPos = this._reelPos[arg2];
            }
            return;
        }

        public function get numRows():int
        {
            return this._numRows;
        }

        public function get numCols():int
        {
            return this._numCols;
        }

        public function get numPaylines():int
        {
            return this._numPaylines;
        }

        public function get visAreaSymbols():__AS3__.vec.Vector.<Array>
        {
            return this._symbols;
        }

        public function get visAreaReelPos():__AS3__.vec.Vector.<Array>
        {
            return this._reelPos;
        }

        public function get wildVABoxes():Array
        {
            return this._wildVABoxes;
        }

        public function get topReelPos():Array
        {
            return this._topReelPos;
        }

        public function get reelArray():Array
        {
            return this._reelPosArray;
        }

        public function get symbolsArray():Array
        {
            return this._symbolsArray;
        }

        internal var _numRows:int;

        internal var _numCols:int;

        internal var _numPaylines:int;

        internal var _symbols:__AS3__.vec.Vector.<Array>;

        internal var _reelPos:__AS3__.vec.Vector.<Array>;

        internal var _wildVABoxes:Array;

        internal var _topReelPos:Array;

        internal var _reelPosArray:Array;

        internal var _symbolsArray:Array;
    }
}


//              class WinPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class WinPacket extends Object
    {
        public function WinPacket(arg1:int, arg2:int, arg3:Number, arg4:Array, arg5:Array, arg6:String, arg7:mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulesPacket, arg8:mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket)
        {
            super();
            this._payline = int(arg1);
            this._id = int(arg2);
            this._numCoinsWon = Number(arg3);
            this._matchPos = Vector.<int>(arg4);
            this._multipliers = Vector.<Number>(arg5);
            this._multiplierOperation = arg6;
            this._expandingWildRules = arg7;
            this._extendedSpinStyles = arg8;
            return;
        }

        public function get payline():int
        {
            return this._payline;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get numCoinsWon():Number
        {
            return this._numCoinsWon;
        }

        public function get matchPos():__AS3__.vec.Vector.<int>
        {
            return this._matchPos;
        }

        public function get multipliers():__AS3__.vec.Vector.<Number>
        {
            return this._multipliers;
        }

        public function get multiplierOperation():String
        {
            return this._multiplierOperation;
        }

        public function get expandingWildRules():mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulesPacket
        {
            return this._expandingWildRules;
        }

        public function get extendedSpinStyles():mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket
        {
            return this._extendedSpinStyles;
        }

        internal var _payline:int;

        internal var _id:int;

        internal var _numCoinsWon:Number;

        internal var _matchPos:__AS3__.vec.Vector.<int>;

        internal var _multipliers:__AS3__.vec.Vector.<Number>;

        internal var _multiplierOperation:String;

        internal var _expandingWildRules:mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulesPacket;

        internal var _extendedSpinStyles:mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket;
    }
}


//              class WinsPacket
package mgs.aurora.games.logicBlocks.data.types 
{
    import __AS3__.vec.*;
    
    public class WinsPacket extends Object
    {
        public function WinsPacket(arg1:Number)
        {
            super();
            this._Win = new Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>(arg1, true);
            this._length = arg1;
            return;
        }

        public function addWin(arg1:int, arg2:String, arg3:String, arg4:String, arg5:String, arg6:String, arg7:String, arg8:mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulesPacket, arg9:mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket):void
        {
            this._Win[arg1] = new mgs.aurora.games.logicBlocks.data.types.WinPacket(int(arg2), int(arg3), int(arg4), arg5.split(","), arg6.split(","), arg7, arg8, arg9);
            return;
        }

        public function get wins():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>
        {
            return this._Win;
        }

        public function get numberOf():Number
        {
            return this._length;
        }

        public function partOfAWin(arg1:uint):Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this.wins;
            for each (loc1 in loc3) 
            {
                if (loc1.matchPos.indexOf(arg1) == -1) 
                {
                    continue;
                }
                return true;
            }
            return false;
        }

        internal var _Win:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>;

        internal var _length:int;
    }
}


//            class AutoPlayData
package mgs.aurora.games.logicBlocks.data 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class AutoPlayData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function AutoPlayData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.AutoPlayData");
            this._autoplaysLeft = 0;
            this._currentAutoPlay = 0;
            this._numAutoPlay = 0;
            this._savedNumAutoPlay = 25;
            this._stopOnWin = 0;
            this._autoplayJustCompleted = false;
            return;
        }

        internal function onStartAutoPlay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._autoplayActive = true;
            this._autoplayJustCompleted = false;
            this._numAutoPlay = arg1.data;
            this._autoplaysLeft = this._numAutoPlay;
            this._lock = true;
            syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(this._autoplaysLeft));
            return;
        }

        internal function onWildStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._autoplayActive) 
            {
                this._wildReelsStopAutoplay = true;
                this.onStop(arg1);
            }
            return;
        }

        internal function onStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.clearScheduledActions();
            this.resetVariables();
            syndicate(this, SERVICE_STOP);
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._lock = false;
            var loc1:*=mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME));
            var loc2:*=this._response.slot.win / loc1.chipSize;
            var loc3:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME)).framework.state;
            switch (loc3) 
            {
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLING:
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_COMPLETE:
                case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS:
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME:
                {
                    loc3 = mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME)).slot.state;
                    switch (loc3) 
                    {
                        case mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE:
                        {
                            if (this._stopOnWinSelected && this._response.wins.numberOf > 0 && loc2 >= this._stopOnWin || this._autoplaysLeft <= 1) 
                            {
                                this.resetVariables();
                                syndicate(this, SERVICE_STOP);
                                return;
                            }
                            if (this._freegames.isFreeGameActive) 
                            {
                                if (this._freegames.activeGame != null) 
                                {
                                    if (this._freegames.activeGame.gamesRemaining == 0) 
                                    {
                                        this.resetVariables();
                                        syndicate(this, SERVICE_STOP);
                                        return;
                                    }
                                }
                            }
                            if (this._autoplayActive) 
                            {
                                if (this._freegames.isFreeGameActive) 
                                {
                                    if (this._freegames.activeGame.gamesRemaining > 0) 
                                    {
                                        this.startAutoplayDelay();
                                    }
                                }
                                else 
                                {
                                    this.startAutoplayDelay();
                                }
                            }
                            else 
                            {
                                this.resetVariables();
                                syndicate(this, SERVICE_STOP);
                            }
                            break;
                        }
                        default:
                        {
                            this.resetVariables();
                            break;
                        }
                    }
                    break;
                }
                default:
                {
                    if (this._autoplayActive) 
                    {
                        this.resetVariables();
                        syndicate(this, SERVICE_STOP);
                    }
                    else 
                    {
                        this.resetVariables();
                    }
                    break;
                }
            }
            return;
        }

        internal function sendNextSpin():void
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._autoplaysLeft - 1);
            loc1._autoplaysLeft = loc2;
            syndicate(this, SERVICE_NEXT_SPIN, new mgs.aurora.games.framework.TransportLayer(this._autoplaysLeft));
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._lock = true;
            this._autoplayJustCompleted = false;
            return;
        }

        protected function startAutoplayDelay():void
        {
            var loc3:*=null;
            var loc1:*=0;
            var loc2:*=false;
            if (this._isaMovieWinOpen) 
            {
                return;
            }
            if (mgs.aurora.games.framework.Broker.instance.isPublisher(mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME)) 
            {
                loc3 = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.publishers.BigWinServer;
                if (loc3.totalWinMeetsThreshold()) 
                {
                    loc2 = true;
                }
            }
            if (this._conductor.options.isQuickSpin) 
            {
                if (this._conductor.response.wins.numberOf != 0) 
                {
                    if (loc2) 
                    {
                        loc1 = this._conductor.settings.autoplayPauseBetweenQuickSpinsBigWin;
                    }
                    else 
                    {
                        loc1 = this._conductor.settings.autoplayPauseBetweenQuickSpinsWin;
                    }
                }
                else 
                {
                    loc1 = this._conductor.settings.autoplayPauseBetweenQuickSpinsNoWin;
                }
            }
            else if (this._conductor.response.wins.numberOf != 0) 
            {
                if (loc2) 
                {
                    loc1 = this._conductor.settings.autoplayPauseBetweenSpinsBigWin;
                }
                else 
                {
                    loc1 = this._conductor.settings.autoplayPauseBetweenSpinsWin;
                }
            }
            else 
            {
                loc1 = this._conductor.settings.autoplayPauseBetweenSpinsNoWin;
            }
            this.scheduleNextAutoplaySpin(loc1);
            return;
        }

        internal function scheduleNextAutoplaySpin(arg1:int):void
        {
            this._scheduledActions = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            this._scheduledActions.autoDelete = true;
            this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.sendNextSpin, arg1));
            this._scheduledActions.start();
            return;
        }

        protected function clearScheduledActions():void
        {
            var seq:int;

            var loc1:*;
            seq = 0;
            if (this._scheduledActions != null) 
            {
                if (this._scheduledActions.isRunning) 
                {
                    this._scheduledActions.stop();
                }
                seq = 0;
                while (seq < this._scheduledActions.childActions.length) 
                {
                    try 
                    {
                        this._scheduledActions.removeAction(this._scheduledActions.childActions[seq]);
                    }
                    catch (e:Error)
                    {
                        _trace("Error in removing scheduled actions. -" + toString(), "error", this, 16711680);
                        _trace(e.getStackTrace(), "error", this, 16711680);
                    }
                    ++seq;
                }
                this._scheduledActions.kill();
            }
            return;
        }

        internal function resetVariables():void
        {
            if (this._autoplayActive && !this._wildReelsStopAutoplay) 
            {
                this._autoplayJustCompleted = true;
            }
            this._wildReelsStopAutoplay = false;
            this._autoplayActive = false;
            this._autoplaysLeft = 0;
            this._numAutoPlay = this._savedNumAutoPlay;
            return;
        }

        public function get numAutoPlay():int
        {
            return this._numAutoPlay;
        }

        public function get savedNumAutoPlay():int
        {
            return this._savedNumAutoPlay;
        }

        public function get stopOnWin():Number
        {
            return this._stopOnWin;
        }

        public function get stopOnWinSelected():Boolean
        {
            return this._stopOnWinSelected;
        }

        public function get autoplaysLeft():int
        {
            return this._autoplaysLeft;
        }

        public function get currentAutoPlay():int
        {
            return this._numAutoPlay - this._autoplaysLeft;
        }

        public function get autoPlayJustCompleted():Boolean
        {
            return this._autoplayJustCompleted;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NEXT_SPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 800);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartAutoPlay, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_AUTOPLAY, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoPlay, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_START_AUTOPLAY, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInsufficient, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_INSUFFICIENT, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoPlayUpdate, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_AUTOPLAY_UPDATE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStop, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_STOP_AUTOPLAY, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildStop, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMovieWinOpen, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_MOVIE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMovieWinComplete, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMovieWinFirstLoopDone, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_MOVIES_FIRSTLOOP_DONE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAchievementOpen, mgs.aurora.games.logicBlocks.agents.AchievementNotification.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AchievementNotification.SERVICE_NOTIFICATION_CLICKED);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            return;
        }

        internal function onInsufficient(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetVariables();
            syndicate(this, SERVICE_STOP);
            return;
        }

        internal function onAchievementOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetVariables();
            syndicate(this, SERVICE_STOP);
            return;
        }

        internal function onMovieWinOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isaMovieWinOpen = true;
            return;
        }

        internal function onMovieWinComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isaMovieWinOpen = false;
            return;
        }

        internal function onMovieWinFirstLoopDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isaMovieWinOpen = false;
            if (this.autoPlayActive) 
            {
                this.scheduleNextAutoplaySpin(20);
            }
            return;
        }

        internal function onInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._autoplayActive && !this._lock) 
            {
                this._lock = true;
                this.clearScheduledActions();
                if (this._freegames.isFreeGameActive) 
                {
                    if (this._freegames.activeGame.gamesRemaining > 0) 
                    {
                        this.sendNextSpin();
                    }
                    else 
                    {
                        this.resetVariables();
                        syndicate(this, SERVICE_STOP);
                    }
                }
                else 
                {
                    this.sendNextSpin();
                }
                this._isaMovieWinOpen = false;
            }
            return;
        }

        public function get autoPlayActive():Boolean
        {
            return this._autoplayActive;
        }

        internal function onFreeSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._autoplayJustCompleted = false;
            return;
        }

        internal function onAutoPlayUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            this._numAutoPlay = loc1.numAutoPlay;
            this._savedNumAutoPlay = loc1.numAutoPlay;
            this._stopOnWin = loc1.stopOnWin;
            this._stopOnWinSelected = loc1.stopOnWinSelected;
            return;
        }

        internal function onAutoPlay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._autoplayActive = true;
            this._autoplayJustCompleted = false;
            this._autoplaysLeft = this._numAutoPlay;
            this._lock = true;
            syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._state = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            this._freegames = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.FreeGamesData;
            return;
        }

        public static const PUBLISHER_NAME:String="DATA_AUTOPLAY";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const SERVICE_START_AUTOPLAY:String="START_AUTOPLAY";

        public static const SERVICE_NEXT_SPIN:String="NEXT_SPIN";

        public static const SERVICE_STOP:String="STOP";

        internal var _numAutoPlay:int;

        internal var _savedNumAutoPlay:int;

        internal var _stopOnWin:Number;

        internal var _autoplaysLeft:int;

        internal var _currentAutoPlay:int;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _hasConductor:Boolean=false;

        internal var _stopOnWinSelected:Boolean;

        internal var _autoplayActive:Boolean;

        internal var _autoplayJustCompleted:Boolean;

        internal var _state:mgs.aurora.games.logicBlocks.agents.GameStateAgent;

        internal var _freegames:mgs.aurora.games.logicBlocks.data.FreeGamesData;

        internal var _lock:Boolean;

        internal var _isaMovieWinOpen:Boolean;

        internal var _wildReelsStopAutoplay:Boolean=false;

        protected var _scheduledActions:org.as3lib.kitchensync.action.group.KSSequenceGroup;

        internal var _response:mgs.aurora.games.logicBlocks.data.ResponseData;
    }
}


//            class BackToGameData
package mgs.aurora.games.logicBlocks.data 
{
    public class BackToGameData extends Object
    {
        public function BackToGameData(arg1:String)
        {
            super();
            this._source = arg1;
            return;
        }

        public function get source():String
        {
            return this._source;
        }

        public static const SOURCE_BONUS:String="source_bonus";

        public static const SOURCE_GAMBLE:String="source_gamble";

        public static const SOURCE_FS_SUMMARY:String="source_fs_summary";

        protected var _source:String="";
    }
}


//            class BackgroundSceneAsset
package mgs.aurora.games.logicBlocks.data 
{
    public class BackgroundSceneAsset extends Object
    {
        public function BackgroundSceneAsset(arg1:String, arg2:String)
        {
            super();
            this._id = arg1;
            this._layer = arg2;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get layer():String
        {
            return this._layer;
        }

        internal var _id:String;

        internal var _layer:String;
    }
}


//            class BetData
package mgs.aurora.games.logicBlocks.data 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public final class BetData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function BetData()
        {
            this._validChips = [0];
            super(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.BetData");
            return;
        }

        internal function fixTheChipSize():Number
        {
            var loc1:*=0;
            if (this._chipSize > this._validChips[(this._validChips.length - 1)]) 
            {
                this._chipSize = this._validChips[(this._validChips.length - 1)];
            }
            else if (this._chipSize < this._validChips[0]) 
            {
                this._chipSize = this._validChips[0];
            }
            else 
            {
                loc1 = 1;
                while (loc1 < this._validChips.length) 
                {
                    if (this._chipSize > this._validChips[(loc1 - 1)] && this._chipSize < this._validChips[loc1]) 
                    {
                        this._chipSize = this._validChips[loc1];
                    }
                    ++loc1;
                }
            }
            return this._chipSize;
        }

        internal function setTheChipPacket(arg1:Number):Number
        {
            this._bet = new mgs.aurora.games.logicBlocks.data.types.BetPacket(this._bet.numChips.toString(), this._bet.activePaylines.toString(), this._bet.nextActivePaylines.toString(), this._bet.maxChips.toString(), this._bet.minChips.toString(), this._bet.numActiveGames.toString(), this._bet.validNumGames.toString(), this._bet.numPaylinesPerGame.toString(), arg1.toString(), this._bet.validChips.join(","), this._bet.slotBetMethod.toString(), this._bet.sideBets, this._bet.paylines);
            return this._bet.chipSize;
        }

        internal function onLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (loc1 > (this._maxLines - 1)) 
            {
                loc1 = 0;
            }
            else if (loc1 < 0) 
            {
                loc1 = (this._maxLines - 1);
            }
            if (loc1 + 1 != this._numLines) 
            {
                this.setNumLines(loc1);
                syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            }
            return;
        }

        public function get validChips():Array
        {
            return this._validChips;
        }

        public function get chipSize():Number
        {
            return this._chipSize;
        }

        public function get lastFreeGameChipSize():Number
        {
            return this._lastFreeGamechipSize;
        }

        public function set chipSize(arg1:Number):void
        {
            this._previousChips = this._chipSize;
            this._chipSize = arg1;
            return;
        }

        public function get numLines():int
        {
            return this._numLines;
        }

        internal function onGambleClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.checker();
            return;
        }

        internal function setNumLines(arg1:int):void
        {
            this._previousLines = this._numLines;
            this._activePayline = arg1;
            this._numLines = arg1 + 1;
            this._activePaylines = new Vector.<int>();
            var loc1:*=0;
            while (loc1 < this._numLines) 
            {
                this._activePaylines[loc1] = loc1;
                ++loc1;
            }
            return;
        }

        public function get numChips():Number
        {
            return this._numChips;
        }

        public function get maxChips():Number
        {
            return this._maxChips;
        }

        public function get minChips():Number
        {
            return this._minChips;
        }

        public function get maxLines():int
        {
            return this._maxLines;
        }

        public function get payLineCost():Number
        {
            return this._payLineCost;
        }

        public function get betValue():Number
        {
            if (this._previousBetSize != this._betValue) 
            {
                this._previousBetSize = this._betValue;
            }
            if (mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME)).wayWin) 
            {
                this._betValue = this._numChips * this._payLineCost * this._chipSize;
            }
            else 
            {
                this._betValue = this._numChips * this._numLines * this._chipSize;
            }
            return this._betValue;
        }

        public function get maximumBet():Number
        {
            if (mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME)).wayWin) 
            {
                return this._maxChips * this._payLineCost * this._chipSize;
            }
            return this._maxChips * this._maxLines * this._chipSize;
        }

        internal function inProgress():Boolean
        {
            if (this._conductor.response.framework.state == 1 || this._conductor.response.framework.state == 2 || this._conductor.response.framework.state == 5 || this._conductor.response.framework.state == 6) 
            {
                return true;
            }
            if (this._conductor.response.nextSpin != null) 
            {
                if (this._conductor.response.nextSpin.freeSpinsRemaining > 0) 
                {
                    return true;
                }
            }
            return false;
        }

        public function get activePaylines():__AS3__.vec.Vector.<int>
        {
            return this._activePaylines;
        }

        public function get activePayline():int
        {
            return this._activePayline;
        }

        public function get previousLines():int
        {
            return this._previousLines;
        }

        public function get previousChips():Number
        {
            return this._previousChips;
        }

        public function get previousCoins():Number
        {
            return this._previousCoins;
        }

        public function get betValid():Boolean
        {
            return this._betValid;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BOUNDARY_CHANGE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET_MAX));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameUpdate, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COINS, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetMax, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BETMAX, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLines, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_PAYLINES, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLines, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_LINE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLines, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_LINE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLines, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.SERVICE_UPDATE_PAYLINES, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFeatureClosed, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_HIDE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFeatureOpen, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_SHOW, 901);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_LATER, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesExit, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusClosed, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_CLOSED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConsoleReady, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ConsoleServer.SERVICE_CONSOLE_READY, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleClose, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.OnFreeSpinSummaryClose, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_CLOSED, 900);
            return;
        }

        public function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            return;
        }

        internal function onFeatureOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freatureDialogOpen = true;
            return;
        }

        internal function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid) 
            {
                this._betValid = true;
                this.setTheChipPacket(this.fixTheChipSize());
                syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            }
            return;
        }

        internal function onFreeGamesExit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid) 
            {
                if (!this._freatureDialogOpen && !this._conductor.freeGamesData.isFreeGameActive && this._conductor.freeGamesData.numberOfAvailableGames > 0 && this._conductor.freeGamesData.activeGame.gamesRemaining > 0 && (this._conductor.freeGamesData.gameInWaitingId == null || this._conductor.freeGamesData.gameInWaitingId == mgs.aurora.games.logicBlocks.data.FreeGamesData.BASE)) 
                {
                    syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                }
            }
            return;
        }

        internal function onUseLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid) 
            {
                if (!this._conductor.settings.featureDialog && !this._conductor.freeGamesData.gameInProgress) 
                {
                    syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                }
            }
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid) 
            {
                if (!(this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) && !(this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) && !(this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE)) 
                {
                    if (!this._conductor.freeGamesData.isFreeGameActive && !this.inProgress() && (this._conductor.freeGamesData.gameInWaitingId == null || this._conductor.freeGamesData.gameInWaitingId == mgs.aurora.games.logicBlocks.data.FreeGamesData.BASE)) 
                    {
                        syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                    }
                }
            }
            return;
        }

        internal function OnFreeSpinSummaryClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid) 
            {
                if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    if (!this._conductor.freeGamesData.isFreeGameActive && !this.inProgress() && (this._conductor.freeGamesData.gameInWaitingId == null || this._conductor.freeGamesData.gameInWaitingId == mgs.aurora.games.logicBlocks.data.FreeGamesData.BASE)) 
                    {
                        syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                    }
                }
            }
            return;
        }

        internal function onFeatureClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid && !this._conductor.freeGamesData.isFreeGameActive) 
            {
                syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
            }
            return;
        }

        internal function onBonusClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._betValid) 
            {
                if (!this._conductor.freeGamesData.isFreeGameActive && this._conductor.freeGamesData.gameInWaitingId == null) 
                {
                    if (this._conductor.hasGamblePacket) 
                    {
                        if (!(!(this._conductor.response.gamble.state == 2) && !(this._conductor.response.gamble.state == 0))) 
                        {
                            syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                        }
                    }
                    else if (this._conductor.response.slot.state == 0) 
                    {
                        syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                    }
                }
            }
            return;
        }

        public function get previousBetSize():Number
        {
            return this._previousBetSize;
        }

        internal function onConsoleReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.view.view == mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.BASEGAME) 
            {
                if (!this._betValid && !this._conductor.settings.featureDialog) 
                {
                    this.checker();
                }
            }
            return;
        }

        internal function checker():void
        {
            if (!this._betValid) 
            {
                if (!this._conductor.freeGamesData.hasFreeGames && (this._conductor.freeGamesData.gameInWaitingId == null || this._conductor.freeGamesData.gameInWaitingId == mgs.aurora.games.logicBlocks.data.FreeGamesData.BASE)) 
                {
                    if (this._conductor.hasGamblePacket) 
                    {
                        if (this._conductor.response.gamble.state != 1) 
                        {
                            this._viewReady = true;
                            syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                        }
                    }
                    else 
                    {
                        this._viewReady = true;
                        syndicate(this, SERVICE_BOUNDARY_CHANGE, new mgs.aurora.games.framework.TransportLayer(this.setTheChipPacket(this.fixTheChipSize())));
                    }
                }
            }
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (arg1.data.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                if (arg1.data.id.verb == mgs.aurora.slots.components.enums.Verbs.COLLECT) 
                {
                    this.checker();
                }
            }
            else 
            {
                this._bet = mgs.aurora.games.logicBlocks.data.types.BetPacket(arg1.data.bet);
                this._numChips = this._bet.numChips;
                this._maxChips = this._bet.maxChips;
                this._minChips = this._bet.minChips;
                this._validChips = this._bet.validChips;
                this._activePaylines = this._bet.activePaylines;
                this._payLineCost = this._bet.paylines.totalCost;
                this._maxLines = this._bet.numPaylinesPerGame;
                this._numLines = this._activePaylines.length;
                loc1 = mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data);
                if (loc1.freeGames.lastRealWager == null) 
                {
                    this._chipSize = this._bet.chipSize;
                }
                else 
                {
                    this._chipSize = this.setTheChipPacket(loc1.freeGames.lastRealWager.chipSize);
                }
                this._betValid = this.isValidChipSize(this._chipSize);
            }
            return;
        }

        internal function onBetMax(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousCoins = this._numChips;
            this._numChips = this._maxChips;
            this.setNumLines((this._maxLines - 1));
            syndicate(this, SERVICE_BET_MAX);
            return;
        }

        internal function onCoins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._previousCoins = this._numChips;
            var loc1:*=Number(arg1.data.coins);
            if (loc1 < this._minChips) 
            {
                this._numChips = this.maxChips;
            }
            else if (loc1 > this.maxChips) 
            {
                this._numChips = this.minChips;
            }
            else 
            {
                this._numChips = loc1;
            }
            return;
        }

        internal function onFreegameUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=mgs.aurora.games.logicBlocks.data.FreeGamesData(arg1.data);
            var loc3:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            if (this._bet != null) 
            {
                if (loc2.hasFreeGames && loc2.isFreeGameActive) 
                {
                    this._chipSize = loc2.activeGame.defaultBet.chipSize;
                    this._lastFreeGamechipSize = this._chipSize;
                    this._numChips = loc2.activeGame.defaultBet.coins;
                    this._numLines = loc2.activeGame.defaultBet.lines.length;
                    this._sideBet = loc2.activeGame.defaultBet.sideBet;
                    this._validChips = [loc2.activeGame.defaultBet.chipSize];
                    this._activePayline = (this._numLines - 1);
                    this._activePaylines = new Vector.<int>();
                    loc1 = 0;
                    while (loc1 < this._numLines) 
                    {
                        this._activePaylines.push(loc1);
                        ++loc1;
                    }
                }
                else if (loc2.hasFreeGames && !loc2.isFreeGameActive) 
                {
                    this._chipSize = loc2.lastRealWager.chipSize;
                    this._numChips = loc2.lastRealWager.coins;
                    this._numLines = loc2.lastRealWager.lines.length;
                    this._activePayline = (this._numLines - 1);
                    this._activePaylines = new Vector.<int>();
                    loc1 = 0;
                    while (loc1 < this._numLines) 
                    {
                        this._activePaylines.push(loc1);
                        ++loc1;
                    }
                    this._validChips = loc3.bet.validChips;
                }
                else 
                {
                    this._chipSize = this._bet.chipSize;
                    this._numChips = this._bet.numChips;
                    this._numLines = this._bet.activePaylines.length;
                    this._validChips = this._bet.validChips;
                    this._activePayline = (this._numLines - 1);
                    this._activePaylines = new Vector.<int>();
                    loc1 = 0;
                    while (loc1 < this._numLines) 
                    {
                        this._activePaylines.push(loc1);
                        ++loc1;
                    }
                }
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function isValidChipSize(arg1:Number):Boolean
        {
            _trace(this._validChips);
            var loc1:*=false;
            var loc2:*=0;
            while (loc2 < this._validChips.length) 
            {
                if (this._validChips[loc2] == arg1) 
                {
                    loc1 = true;
                    break;
                }
                ++loc2;
            }
            return loc1;
        }

        public static const PUBLISHER_NAME:String="DATA_BET";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const SERVICE_BOUNDARY_CHANGE:String="BOUNDARY_CHANGE";

        public static const SERVICE_BET_MAX:String="SERVICE_BET_MAX";

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _viewReady:Boolean=false;

        internal var _baseReady:Boolean=false;

        internal var _chipSize:Number=1;

        internal var _lastFreeGamechipSize:Number=1;

        internal var _numChips:Number=0;

        internal var _minChips:Number=0;

        internal var _payLineCost:Number=0;

        internal var _betValue:Number=0;

        internal var _activePaylines:__AS3__.vec.Vector.<int>;

        internal var _activePayline:int=0;

        internal var _validChips:Array;

        internal var _maxLines:int=0;

        internal var _numLines:int=0;

        internal var _sideBet:Number=0;

        internal var _bet:mgs.aurora.games.logicBlocks.data.types.BetPacket;

        internal var _betValid:Boolean=true;

        internal var _freatureDialogOpen:Boolean=false;

        internal var _previousBetSize:Number;

        internal var _previousLines:int;

        internal var _previousChips:Number;

        internal var _previousCoins:Number;

        internal var _maxChips:Number=0;
    }
}


//            class BonusPickCountupData
package mgs.aurora.games.logicBlocks.data 
{
    public class BonusPickCountupData extends Object
    {
        public function BonusPickCountupData(arg1:int, arg2:int)
        {
            super();
            this._startValue = arg1;
            this._endValue = arg2;
            return;
        }

        public function get startValue():int
        {
            return this._startValue;
        }

        public function get endValue():int
        {
            return this._endValue;
        }

        protected var _startValue:int;

        protected var _endValue:int;
    }
}


//            class CustomRuleSet
package mgs.aurora.games.logicBlocks.data 
{
    import flash.utils.*;
    import mgs.aurora.games.common.components.ui.components.text.resizable.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class CustomRuleSet extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function CustomRuleSet()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.CustomRuleSet");
            this._rulesMap = new flash.utils.Dictionary(true);
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRuleSet, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_RULESET_RECEIVED);
            return;
        }

        internal function onRuleSet(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc1:*=arg1.data.content;
            var loc3:*=0;
            var loc4:*=loc1.rule;
            for each (loc2 in loc4) 
            {
                this._rulesMap[loc2.@id.toString()] = loc2.@value.toString();
            }
            if (this._rulesMap["CanUseSpinStop"] != null) 
            {
                this._CanUseSpinStop = this._rulesMap["CanUseSpinStop"] == "1";
            }
            if (this._rulesMap["QuickSpinEnabled"] != null) 
            {
                this._QuickSpinEnabled = this._rulesMap["QuickSpinEnabled"] == "1";
            }
            if (this._rulesMap["FreespinQuickSpinEnabled"] != null) 
            {
                this._FreeSpinQuickSpinEnabled = this._rulesMap["FreespinQuickSpinEnabled"] == "1";
            }
            if (loc1.regionOverrides.toXMLString() != "") 
            {
                mgs.aurora.games.common.components.ui.components.text.resizable.RegionIndex.regionOverrides = loc1.regionOverrides[0];
            }
            return;
        }

        public function get quickSpinEnabled():Boolean
        {
            return this._QuickSpinEnabled;
        }

        public function get freespinQuickSpinEnabled():Boolean
        {
            return this._FreeSpinQuickSpinEnabled;
        }

        public function get canUseSpinStop():Boolean
        {
            return this._CanUseSpinStop;
        }

        public function getValue(arg1:String):String
        {
            return this._rulesMap[arg1];
        }

        public override function dispose():void
        {
            this._rulesMap = null;
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="DATA_RULESET";

        public static const SERVICE_UPDATE:String="UPDATE";

        internal var _rulesMap:flash.utils.Dictionary;

        internal var _CanUseSpinStop:Boolean=true;

        internal var _QuickSpinEnabled:Boolean=true;

        internal var _FreeSpinQuickSpinEnabled:Boolean=true;
    }
}


//            class FreeGamesData
package mgs.aurora.games.logicBlocks.data 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public final class FreeGamesData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function FreeGamesData()
        {
            super(mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.FreeGamesData");
            this._freeGameList = new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>();
            this._persistentFreeGameList = new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>();
            return;
        }

        public function get activeGame():mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            return this._persistentFreeGameList[this._freeGameIndex];
        }

        public function get freeGameIndex():int
        {
            return this._freeGameIndex;
        }

        public function get freeGameList():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>
        {
            return this._freeGameList;
        }

        public function get hasFreeGames():Boolean
        {
            return this._hasFreeGames;
        }

        public function get isFreeGameActive():Boolean
        {
            return this._isFreeGameActive;
        }

        public function get listIndex():int
        {
            return this._listIndex;
        }

        public function get numberOfAvailableGames():int
        {
            return this._freeGameList.length;
        }

        internal function updateCurrentGame(arg1:int):mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            var loc1:*=this._persistentFreeGameList[arg1];
            var loc2:*=new mgs.aurora.games.logicBlocks.data.types.FreeGamePacket(loc1.offerID, loc1.instanceID, this._responseData.freeGames.currentGame.sumWinnings, this._responseData.freeGames.currentGame.gamesRemaining, this._responseData.freeGames.currentGame.gamesPlayed, loc1.creditType, loc1.maxCost, loc1.gamesAwarded, loc1.name1, loc1.name2, loc1.endDate);
            loc2.addDefaultBet(loc1.defaultBet.coins, loc1.defaultBet.lines.length, loc1.defaultBet.chipSize, loc1.defaultBet.sideBet);
            return loc2;
        }

        public function get isFreeGameInProgress():Boolean
        {
            return this._isGameInProgress;
        }

        public function get gameInWaitingId():String
        {
            return this._gameInWaitingId;
        }

        public function get lastRealWager():mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket
        {
            return this._lastRealWager;
        }

        public function get lastPlayedFreeGameId():String
        {
            return this._lastPlayedFreeGame;
        }

        public function get lastRealWagerWinAmount():Number
        {
            return this._lastRealWagerWinAmount;
        }

        public function get lastGamePlayedStillAvailable():Boolean
        {
            return this._lastPlayedFreeGameStillAvailable;
        }

        public function get previousFreeGameSelectedTest():Boolean
        {
            return this._previousFreeGameSelectedTest;
        }

        public function get haveMadeFreeGameSpin():Boolean
        {
            return this._haveMadeFreeGameSpin;
        }

        public function get freegameCompleteFromRefresh():Boolean
        {
            return this._freegameCompleteFromRefresh;
        }

        public function get allFreeGamesCompleteFromRefresh():Boolean
        {
            return !this.isFreeGameInProgress && this.previousFreeGameTest && !this.hasFreeGames;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponseData, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_FREEGAMES, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onContinueBase, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE_BASE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onContinue, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGameSummary, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSummaryDiscardOffer, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_DISCARD_OFFER, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSwitchGame, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SWITCH_GAME, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGameUseLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_LATER, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onScreenOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CLOSE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME, 900);
            return;
        }

        internal function onScreenOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SCREEN_COMPLETED:
                {
                    _trace("onScreenOpen");
                    this._isFreeGameActive = false;
                    this._isGameInProgress = false;
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SCREEN_LAST_GAME_EXIT:
                {
                    _trace("onScreenOpen");
                    this._isFreeGameActive = true;
                    this._isGameInProgress = false;
                    this.updateData();
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
                    break;
                }
            }
            return;
        }

        internal function onBackToGameSummary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onBackToGameSummary");
            this._isFreeGameActive = false;
            this._isGameInProgress = false;
            this._freegameCompleteFromRefresh = false;
            this.updateData();
            if (this._gameInWaitingId != null) 
            {
                if (this._gameInWaitingId != BASE) 
                {
                    this._isFreeGameActive = true;
                    this._previousFreeGameSelectedTest = true;
                    this._freeGameIndex = this.getFreeGameIndexFromId(this._gameInWaitingId);
                }
                else 
                {
                    this._isFreeGameActive = false;
                    this._freeGameIndex = 0;
                }
                this._gameInWaitingId = null;
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freegameCompleteFromRefresh = false;
            return;
        }

        internal function onSwitchGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isFreeGameActive = true;
            this._previousFreeGameSelectedTest = true;
            this._freegameCompleteFromRefresh = false;
            this._freeGameIndex = this.getFreeGameIndexFromId(this._gameInWaitingId);
            this._gameInWaitingId = null;
            this.updateData();
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (this._lastRealWager == null) 
            {
                this._lastRealWager = loc1.lastRealWager;
            }
            return;
        }

        internal function onResponseData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this._responseData == null) 
            {
                this._responseData = mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data);
            }
            if (this._responseData.freeGames != null) 
            {
                if (this._responseData.id.verb != mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
                {
                    if (this._responseData.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        if (this._hasFreeGames) 
                        {
                            if (this._isFreeGameActive) 
                            {
                                this._previousFreeGameSelectedTest = true;
                                this._previousFreeGameTest = true;
                                this._haveMadeFreeGameSpin = true;
                                if (this._responseData.freeGames.currentGame == null) 
                                {
                                    _trace("No active current game??", "GCL", this, 16711680);
                                }
                                else 
                                {
                                    this._lastPlayedFreeGame = this._responseData.freeGames.currentGame.uniqueId;
                                    this._persistentFreeGameList[this._freeGameIndex] = this.updateCurrentGame(this._freeGameIndex);
                                }
                            }
                            else 
                            {
                                this._previousFreeGameSelectedTest = false;
                                this._previousFreeGameTest = false;
                            }
                        }
                    }
                    else 
                    {
                        if (this._responseData.freeGames.numberOf > 0) 
                        {
                            this._hasFreeGames = true;
                        }
                        else 
                        {
                            this._hasFreeGames = false;
                        }
                        if (this._hasFreeGames) 
                        {
                            if (this._responseData.freeGames.lastRealWager != null) 
                            {
                                this._lastRealWagerWinAmount = this._responseData.slot.win;
                            }
                            this._lastPlayedFreeGameStillAvailable = false;
                            var loc2:*=0;
                            var loc3:*=this._responseData.freeGames.freeGames;
                            for each (loc1 in loc3) 
                            {
                                if (loc1.gamesRemaining != 0) 
                                {
                                    this._freeGameList.push(loc1);
                                }
                                if (this._responseData.freeGames.currentGame != null) 
                                {
                                    if (this._responseData.freeGames.currentGame.uniqueId == loc1.uniqueId) 
                                    {
                                        this._lastPlayedFreeGameStillAvailable = true;
                                    }
                                }
                                this._persistentFreeGameList.push(this.cloneFreeGame(loc1));
                            }
                            if (this._responseData.freeGames.currentGame == null) 
                            {
                                this._previousFreeGameTest = false;
                            }
                            else 
                            {
                                this._lastPlayedFreeGame = this._responseData.freeGames.currentGame.uniqueId;
                                this._previousFreeGameTest = true;
                            }
                            if (!(this._responseData.freeGames.currentGame == null) && this._lastPlayedFreeGameStillAvailable) 
                            {
                                this._isFreeGameActive = true;
                                this._previousFreeGameSelectedTest = true;
                                this._isGameInProgress = this.gameInProgress;
                                this._freeGameIndex = this.getFreeGameIndexFromId(this._responseData.freeGames.currentGame.uniqueId);
                                this._gameInWaitingId = null;
                                if (this._responseData.freeGames.currentGame.uniqueId != this.activeGame.uniqueId) 
                                {
                                    this._freegameCompleteFromRefresh = true;
                                }
                            }
                            else 
                            {
                                this._isFreeGameActive = false;
                                this._isGameInProgress = false;
                            }
                        }
                        else if (this._responseData.freeGames != null) 
                        {
                            if (this._responseData.freeGames.currentGame == null) 
                            {
                                this._previousFreeGameTest = false;
                            }
                            else 
                            {
                                this._lastPlayedFreeGame = this._responseData.freeGames.currentGame.uniqueId;
                                this._previousFreeGameTest = true;
                            }
                        }
                        syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
                    }
                }
            }
            return;
        }

        internal function onClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onClose");
            if (this.isFreeGameInProgress) 
            {
                this._isFreeGameActive = true;
                this._previousFreeGameSelectedTest = true;
                this._freegameCompleteFromRefresh = false;
                this._gameInWaitingId = BASE;
            }
            else 
            {
                this._isGameInProgress = false;
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onContinueBase(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onContinueBase");
            this._isGameInProgress = false;
            this._isFreeGameActive = false;
            this._previousFreeGameSelectedTest = false;
            if (this.gameInProgress) 
            {
                this._gameInWaitingId = this.selected.uniqueId;
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onContinue(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onContinue");
            this._isFreeGameActive = true;
            this._previousFreeGameSelectedTest = true;
            this.updateData();
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onSummaryDiscardOffer(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onSummaryDiscardOffer");
            this.updateData();
            this._gameInWaitingId = null;
            this._isGameInProgress = false;
            this._isFreeGameActive = false;
            this._freegameCompleteFromRefresh = false;
            this._previousFreeGameSelectedTest = true;
            this._previousFreeGameTest = true;
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onFreeGameUseLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onFreeGameUseLater");
            if (this.isFreeGameInProgress) 
            {
                this._gameInWaitingId = BASE;
            }
            else 
            {
                this._isGameInProgress = false;
                this._isFreeGameActive = false;
                this._freegameCompleteFromRefresh = false;
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onUseNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace("onUseNow");
            if (this._hasFreeGames) 
            {
                this.updateData();
                if (!(this.gameInProgress && !this._previousFreeGameTest)) 
                {
                    this._isFreeGameActive = true;
                    this._previousFreeGameSelectedTest = true;
                }
                if (this.isFreeGameInProgress && !(this.activeGame.uniqueId == this.selected.uniqueId)) 
                {
                    this._gameInWaitingId = this.selected.uniqueId;
                    this._freeGameIndex = this.getFreeGameIndexFromId(this.activeGame.uniqueId);
                }
                else 
                {
                    this._freeGameIndex = this.getFreeGameIndexFromId(mgs.aurora.games.logicBlocks.data.types.FreeGamePacket(this._freeGameList[this._listIndex]).uniqueId);
                }
                syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            }
            return;
        }

        public function get previousFreeGameTest():Boolean
        {
            return this._previousFreeGameTest;
        }

        internal function cloneFreeGame(arg1:mgs.aurora.games.logicBlocks.data.types.FreeGamePacket):mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            var loc1:*=new mgs.aurora.games.logicBlocks.data.types.FreeGamePacket(arg1.offerID, arg1.instanceID, arg1.sumWinnings, arg1.gamesRemaining, arg1.gamesPlayed, arg1.creditType, arg1.maxCost, arg1.gamesAwarded, arg1.name1, arg1.name2, arg1.endDate);
            loc1.addDefaultBet(arg1.defaultBet.coins, arg1.defaultBet.lines.length, arg1.defaultBet.chipSize, arg1.defaultBet.sideBet);
            return loc1;
        }

        internal function getFreeGameFromId(arg1:String):mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._persistentFreeGameList;
            for each (loc1 in loc3) 
            {
                if (loc1.uniqueId != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        internal function getFreeGameIndexFromId(arg1:String):int
        {
            var loc1:*=0;
            while (loc1 < this._persistentFreeGameList.length) 
            {
                if (this._persistentFreeGameList[loc1].uniqueId == arg1) 
                {
                    return loc1;
                }
                ++loc1;
            }
            return -1;
        }

        public function removeRejectedFreeGames():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>
        {
            var loc1:*=new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>();
            var loc2:*=new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>();
            var loc3:*=0;
            while (loc3 < this._freeGameList.length) 
            {
                if (this._freeGameList[loc3].rejected != true) 
                {
                    loc2.push(this._freeGameList[loc3]);
                }
                else 
                {
                    loc1.push(this._freeGameList[loc3]);
                }
                ++loc3;
            }
            this._freeGameList = loc2;
            this.updateData();
            return loc1;
        }

        public function updateData():void
        {
            var loc4:*=null;
            var loc1:*=0;
            while (loc1 < this._freeGameList.length) 
            {
                loc4 = this.getFreeGameFromId(this._freeGameList[loc1].uniqueId);
                if (this._freeGameList[loc1].uniqueId == loc4.uniqueId) 
                {
                    this._freeGameList[loc1] = loc4;
                }
                ++loc1;
            }
            var loc2:*=new Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>();
            var loc3:*=0;
            while (loc3 < this._freeGameList.length) 
            {
                if (this._freeGameList[loc3].gamesRemaining != 0) 
                {
                    loc2.push(this._freeGameList[loc3]);
                }
                ++loc3;
            }
            this._freeGameList = loc2;
            if (this._listIndex < 0) 
            {
                this._listIndex = 0;
            }
            else if (this._listIndex > (this._freeGameList.length - 1)) 
            {
                this._listIndex = (this._freeGameList.length - 1);
            }
            return;
        }

        public function get selected():mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            if (this._freeGameList.length > 0) 
            {
                return this._freeGameList[this._listIndex];
            }
            if (this._lastPlayedFreeGame != null) 
            {
                return this.getFreeGameFromId(this._lastPlayedFreeGame);
            }
            return null;
        }

        public function next():mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._listIndex + 1);
            loc1._listIndex = loc2;
            if (this._listIndex > (this._freeGameList.length - 1)) 
            {
                this._listIndex = 0;
            }
            return this._freeGameList[this._listIndex];
        }

        public function previous():mgs.aurora.games.logicBlocks.data.types.FreeGamePacket
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._listIndex - 1);
            loc1._listIndex = loc2;
            if (this._listIndex < 0) 
            {
                this._listIndex = (this._freeGameList.length - 1);
            }
            return this._freeGameList[this._listIndex];
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function get gameInProgress():Boolean
        {
            if (!(this._responseData.framework.state == 0) && !(this._responseData.framework.state == 4)) 
            {
                return true;
            }
            if (this._responseData.nextSpin != null) 
            {
                if (this._responseData.nextSpin.freeSpinsRemaining > 0) 
                {
                    return true;
                }
            }
            if (this._responseData.slot.state == 3 && (!(this.getFreeGameFromId(this._lastPlayedFreeGame) == null) || !this.previousFreeGameTest)) 
            {
                return true;
            }
            return false;
        }

        public function SetSelectedToLastPlayed():void
        {
            var loc1:*=0;
            while (loc1 < this._freeGameList.length) 
            {
                if (this._freeGameList[loc1].uniqueId == this._lastPlayedFreeGame) 
                {
                    this._listIndex = loc1;
                }
                ++loc1;
            }
            return;
        }

        public static const PUBLISHER_NAME:String="DATA_FREEGAMES";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const BASE:String="base";

        internal var _freeGameIndex:int=0;

        internal var _listIndex:int=0;

        internal var _freeGameList:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>;

        internal var _persistentFreeGameList:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.FreeGamePacket>;

        internal var _hasFreeGames:Boolean=false;

        internal var _isFreeGameActive:Boolean=false;

        internal var _isGameInProgress:Boolean=false;

        internal var _responseData:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _gameInWaitingId:String;

        internal var _lastRealWager:mgs.aurora.games.logicBlocks.data.types.DefaultBetPacket;

        internal var _lastRealWagerWinAmount:Number;

        internal var _lastPlayedFreeGame:String;

        internal var _previousFreeGameTest:Boolean=false;

        internal var _previousFreeGameSelectedTest:Boolean=false;

        internal var _haveMadeFreeGameSpin:Boolean=false;

        internal var _freegameCompleteFromRefresh:Boolean=false;

        internal var _lastPlayedFreeGameStillAvailable:Boolean=false;

        internal var _isBaseGameInProgress:Boolean=false;
    }
}


//            class FreeSpinsData
package mgs.aurora.games.logicBlocks.data 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class FreeSpinsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function FreeSpinsData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.FreeSpinsData");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_COMPLETE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_FREE_SPINS, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onState, mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameStateAgent.SERVICE_UPDATE, 900);
            return;
        }

        internal function onState(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=this._status.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                {
                    this._isFreespinsActive = true;
                    break;
                }
                default:
                {
                    if (this.freeSpinsRemaining > 0) 
                    {
                        this._isFreespinsActive = true;
                    }
                    else 
                    {
                        this._isFreespinsActive = false;
                    }
                    break;
                }
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onFreeSpins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isFreespinsActive = true;
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._response.slot.state != 3) 
            {
                if (this._response.slot.state == 1) 
                {
                    this._isFreespinsActive = true;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
                }
            }
            else 
            {
                this._isFreespinsActive = false;
                syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            }
            return;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._status = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.agents.GameStateAgent;
            this._response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.freeSpinsRemaining > 0 || this._status.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE || this._status.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE) 
            {
                this._isFreespinsActive = true;
            }
            else 
            {
                this._isFreespinsActive = false;
            }
            return;
        }

        public function get isFreespinsActive():Boolean
        {
            return this._isFreespinsActive;
        }

        public function get freeSpinsRemaining():int
        {
            if (this._response.nextSpin != null) 
            {
                return this._response.nextSpin.freeSpinsRemaining;
            }
            return 0;
        }

        public static const PUBLISHER_NAME:String="DATA_FREESPINS";

        public static const SERVICE_UPDATE:String="UPDATE";

        internal var _isFreespinsActive:Boolean=false;

        internal var _status:mgs.aurora.games.logicBlocks.agents.GameStateAgent;

        internal var _response:mgs.aurora.games.logicBlocks.data.ResponseData;
    }
}


//            class OptionsData
package mgs.aurora.games.logicBlocks.data 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class OptionsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function OptionsData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.OptionsData");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_OPTIONS_UPDATE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoinsCredits, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COINS_CREDITS, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinDataUpdate, mgs.aurora.games.logicBlocks.data.FreeSpinsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeSpinsData.SERVICE_UPDATE, 901);
            this._coinsCreditsSaver = new mgs.aurora.games.common.components.utils.SaveDelay(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, 600, "displayAsCoins");
            return;
        }

        internal function isSwitchedOn(arg1:String):Boolean
        {
            if (arg1 == "true") 
            {
                return true;
            }
            return false;
        }

        internal function onCoinsCredits(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data != "credits") 
            {
                this._displayAsCoins = true;
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.displayType = mgs.aurora.api.enums.BalanceDisplayType.COINS;
            }
            else 
            {
                this._displayAsCoins = false;
                mgs.aurora.games.framework.AuroraReference.aurora.banking.display.displayType = mgs.aurora.api.enums.BalanceDisplayType.CREDITS;
            }
            this._coinsCreditsSaver.save(this._displayAsCoins.toString());
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._displayAsCoins = arg1.data.displayAsCoins;
            this._isQuickSpin = arg1.data.isQuickSpin;
            this._isFreespinQuickSpin = arg1.data.isFreespinsQuickSpin;
            this._switchOffAllGameSounds = arg1.data.switchOffAllGameSounds;
            this._switchOffAllSounds = arg1.data.switchOffAllSounds;
            this._switchOffBgSounds = arg1.data.switchOffBgSounds;
            this._switchOffWinSounds = arg1.data.switchOffWinSounds;
            this._hideRespinCost = arg1.data.hideRespinCost;
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onFreeSpinDataUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isFreeSpinsActive = mgs.aurora.games.logicBlocks.data.FreeSpinsData(arg1.data).isFreespinsActive;
            return;
        }

        public function get displayAsCoins():Boolean
        {
            return this._displayAsCoins;
        }

        public function get isQuickSpin():Boolean
        {
            return this._isFreeSpinsActive ? this._isFreespinQuickSpin : this._isQuickSpin;
        }

        public function get switchOffAllGameSounds():Boolean
        {
            return this._switchOffAllGameSounds;
        }

        public function get switchOffAllSounds():Boolean
        {
            return this._switchOffAllSounds;
        }

        public function get switchOffBgSounds():Boolean
        {
            return this._switchOffBgSounds;
        }

        public function get switchOffWinSounds():Boolean
        {
            return this._switchOffWinSounds;
        }

        public function get hideRespinCost():Boolean
        {
            return this._hideRespinCost;
        }

        public static const PUBLISHER_NAME:String="DATA_OPTIONS";

        public static const SERVICE_UPDATE:String="UPDATE";

        internal var _displayAsCoins:Boolean;

        internal var _isQuickSpin:Boolean;

        internal var _isFreespinQuickSpin:Boolean;

        internal var _hideRespinCost:Boolean;

        internal var _switchOffAllGameSounds:Boolean;

        internal var _switchOffAllSounds:Boolean;

        internal var _switchOffBgSounds:Boolean;

        internal var _switchOffWinSounds:Boolean;

        internal var _isFreeSpinsActive:Boolean;

        internal var _coinsCreditsSaver:mgs.aurora.games.common.components.utils.SaveDelay;
    }
}


//            class ReelsData
package mgs.aurora.games.logicBlocks.data 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class ReelsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function ReelsData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.ReelsData");
            return;
        }

        public function getDefaultPosition(arg1:int):__AS3__.vec.Vector.<int>
        {
            return this._reelDefaultPositions[arg1];
        }

        public function GetDefaultReelPositionIndices(arg1:int):__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            var loc1:*=new Vector.<Vector.<int>>(this._columns);
            var loc2:*=this._rows / 2;
            loc2 = Math.floor(loc2);
            var loc3:*=0;
            while (loc3 < this._columns) 
            {
                loc1[loc3] = new Vector.<int>(this._rows);
                loc4 = 0;
                while (loc4 < this._rows) 
                {
                    loc5 = this._reelDefaultPositions[arg1][loc3] - loc2 + loc4;
                    loc6 = this._reelSets[arg1][loc3].length;
                    loc5 = (loc5 = loc5 % loc6) < 0 ? loc6 + loc5 : loc5;
                    loc1[loc3][loc4] = loc5;
                    ++loc4;
                }
                ++loc3;
            }
            return loc1;
        }

        public function GetDefaultReelPositionSymbols(arg1:int):__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=this.GetDefaultReelPositionIndices(arg1);
            var loc2:*=new Vector.<Vector.<int>>(this._columns);
            var loc3:*=0;
            while (loc3 < this._columns) 
            {
                loc2[loc3] = new Vector.<int>(this._rows);
                loc4 = 0;
                while (loc4 < this._rows) 
                {
                    loc5 = loc1[loc3][loc4];
                    loc2[loc3][loc4] = this._reelSets[arg1][loc3][loc5];
                    ++loc4;
                }
                ++loc3;
            }
            return loc2;
        }

        public function get numberOfSymbols():int
        {
            return this._numberOfSymbols;
        }

        public function get numberOfSets():int
        {
            return this._numberOfSets;
        }

        public function get rows():int
        {
            return this._rows;
        }

        public function get columns():int
        {
            return this._columns;
        }

        public function get width():int
        {
            return this._width;
        }

        public function get height():int
        {
            return this._height;
        }

        public function get x():int
        {
            return this._x;
        }

        public function get y():int
        {
            return this._y;
        }

        public function get xSpacing():int
        {
            return this._xSpacing;
        }

        public function get ySpacing():int
        {
            return this._ySpacing;
        }

        public function get scale():int
        {
            return this._scale;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_REELCONFIG);
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc4:*=0;
            var loc5:*=null;
            var loc1:*=new XMLList(arg1.data.config);
            this._numberOfSymbols = int(loc1.@numberOfSymbols);
            this._numberOfSets = int(loc1.@numberOfSets);
            this._rows = int(loc1.@rows);
            this._columns = int(loc1.@columns);
            this._width = int(loc1.@width);
            this._height = int(loc1.@height);
            this._x = int(loc1.@x);
            this._y = int(loc1.@y);
            this._xSpacing = int(loc1.@xSpacing);
            this._ySpacing = int(loc1.@ySpacing);
            this._scale = Number(loc1.@scale);
            this._reelSets = new Vector.<Vector.<Vector.<int>>>(this._numberOfSets, true);
            this._reelDefaultPositions = new Vector.<Vector.<int>>(this._numberOfSets, true);
            var loc2:*=new XMLList(arg1.data.ReelSets);
            var loc3:*=0;
            while (loc3 < loc2.ReelSet.length()) 
            {
                this._reelSets[loc3] = new Vector.<Vector.<int>>();
                this._reelDefaultPositions[loc3] = new Vector.<int>();
                loc4 = 0;
                while (loc4 < loc2.ReelSet[loc3].Reel.length()) 
                {
                    loc5 = loc2.ReelSet[loc3].Reel[loc4].@symbols.toString();
                    loc5 = mgs.aurora.games.common.components.utils.Scrambler.unscrambleArray(loc5);
                    this._reelDefaultPositions[loc3].push(loc2.ReelSet[loc3].Reel[loc4].@defaultPos);
                    this._reelSets[loc3].push(Vector.<int>(loc5.split(",")));
                    ++loc4;
                }
                ++loc3;
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        public function getReelOrder(arg1:int, arg2:int):__AS3__.vec.Vector.<int>
        {
            return this._reelSets[arg1][arg2];
        }

        public static const PUBLISHER_NAME:String="DATA_REELS";

        public static const SERVICE_UPDATE:String="UPDATE";

        internal var _numberOfSymbols:int;

        internal var _numberOfSets:int;

        internal var _rows:int;

        internal var _columns:int;

        internal var _width:int;

        internal var _height:int;

        internal var _x:int;

        internal var _y:int;

        internal var _xSpacing:int;

        internal var _ySpacing:int;

        internal var _scale:Number;

        internal var _reelDefaultPositions:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;

        internal var _reelSets:__AS3__.vec.Vector.<__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>>;

        internal var _default:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;
    }
}


//            class ResponseData
package mgs.aurora.games.logicBlocks.data 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class ResponseData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function ResponseData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.ResponseData");
            return;
        }

        public function get visarea():mgs.aurora.games.logicBlocks.data.types.VisAreaPacket
        {
            return this._visarea;
        }

        public function get framework():mgs.aurora.games.logicBlocks.data.types.FrameworkPacket
        {
            return this._frameWork;
        }

        public function get player():mgs.aurora.games.logicBlocks.data.types.PlayerPacket
        {
            return this._player;
        }

        public function get slot():mgs.aurora.games.logicBlocks.data.types.SlotPacket
        {
            return this._slot;
        }

        public function get wins():mgs.aurora.games.logicBlocks.data.types.WinsPacket
        {
            return this._wins;
        }

        public function get reelslide():mgs.aurora.games.logicBlocks.data.types.ReelSlidePacket
        {
            return this._reelslide;
        }

        public function get reelsets():mgs.aurora.games.logicBlocks.data.types.ReelSetPacket
        {
            return this._reelsets;
        }

        internal function onFreeSpinAward(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._freeSpinAward = arg1.data;
            return;
        }

        public function get nextSpin():mgs.aurora.games.logicBlocks.data.types.NextSpinPacket
        {
            return this._nextSpin;
        }

        public function get freeSpinAwards():mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardsPacket
        {
            return this._freeSpinAward;
        }

        public function get bankedSpins():mgs.aurora.games.logicBlocks.data.types.BankedSpinsPacket
        {
            return this._bankedSpin;
        }

        public function get extendedSpinStyles():mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket
        {
            return this._spinStyle;
        }

        public function get respin():mgs.aurora.games.logicBlocks.data.types.RespinPacket
        {
            return this._respin;
        }

        public function get bet():mgs.aurora.games.logicBlocks.data.types.BetPacket
        {
            return this._bet;
        }

        public function get tokenManagers():mgs.aurora.games.logicBlocks.data.types.TokenManagersPacket
        {
            return this._tokenMan;
        }

        public function get achievements():mgs.aurora.games.logicBlocks.data.types.AchievementsPacket
        {
            return this._achievements;
        }

        public function get bonusGames():mgs.aurora.games.logicBlocks.data.types.BonusGamesPacket
        {
            return this._bonus;
        }

        public function get id():mgs.aurora.games.logicBlocks.data.types.IDPacket
        {
            return this._idPacket;
        }

        public function get freeGames():mgs.aurora.games.logicBlocks.data.types.FreeGamesPacket
        {
            return this._freeGames;
        }

        public override function dispose():void
        {
            this._visarea = null;
            this._frameWork = null;
            this._player = null;
            this._slot = null;
            this._wins = null;
            this._reelslide = null;
            this._reelsets = null;
            this._nextSpin = null;
            this._freeSpinAward = null;
            this._bankedSpin = null;
            this._spinStyle = null;
            this._respin = null;
            this._bet = null;
            this._gamble = null;
            this._tokenMan = null;
            this._achievements = null;
            this._bonus = null;
            this._idPacket = null;
            this._freeGames = null;
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPONSE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_ON_REFRESH, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onVerb, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_VERB, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onVisArea, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_VISAREA, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFrameWork, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_FRAMEWORK, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPlayer, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_PLAYER, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSlot, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_SLOT, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWins, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_WINS, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelSlide, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_REELSLIDE, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsets, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_REELSETS, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNextSpin, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_NEXT_SPIN, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinAward, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_FREESPIN_AWARDS, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBankedSpins, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_BANKED_SPINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onExtendedSpinStyles, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_EXTENDED_SPIN_STYLES, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_RESPIN, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBet, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_BET, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGamble, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_GAMBLE, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTokenMan, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_TOKENMANAGER, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAchievements, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_ACHIEVEMENTS, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonus, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_BONUSGAME, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onComplete, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_COMPLETE, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGames, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_FREEGAMES, 10000);
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            return;
        }

        internal function onVerb(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._idPacket = arg1.data;
            return;
        }

        internal function onVisArea(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._visarea = arg1.data;
            return;
        }

        internal function onFrameWork(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._frameWork = arg1.data;
            return;
        }

        internal function onPlayer(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._player = arg1.data;
            return;
        }

        internal function onSlot(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._slot = arg1.data;
            return;
        }

        internal function onWins(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._wins = arg1.data;
            return;
        }

        internal function onReelSlide(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._reelslide = arg1.data;
            return;
        }

        internal function onReelsets(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._reelsets = arg1.data;
            return;
        }

        internal function onNextSpin(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            if (this._nextSpin != null) 
            {
                this._previousFreeSpinRemaining = this._nextSpin.freeSpinsRemaining;
            }
            this._nextSpin = arg1.data;
            return;
        }

        public function get gamble():mgs.aurora.games.logicBlocks.data.types.GamblePacket
        {
            return this._gamble;
        }

        internal function onBankedSpins(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._bankedSpin = arg1.data;
            return;
        }

        internal function onExtendedSpinStyles(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._spinStyle = arg1.data;
            return;
        }

        internal function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._respin = arg1.data;
            return;
        }

        internal function onBet(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._bet = arg1.data;
            return;
        }

        internal function onGamble(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._gamble = arg1.data;
            return;
        }

        internal function onTokenMan(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._tokenMan = arg1.data;
            return;
        }

        internal function onAchievements(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._achievements = arg1.data;
            return;
        }

        internal function onBonus(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._bonus = arg1.data;
            return;
        }

        internal function onComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._slot.state == 2 && !(this._idPacket.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH)) 
            {
                if (this._nextSpin.freeSpinsRemaining >= this._previousFreeSpinRemaining) 
                {
                    this._nextSpin.freespinsWasRetriggered(true);
                }
                else 
                {
                    this._nextSpin.freespinsWasRetriggered(false);
                }
            }
            else 
            {
                this._nextSpin.freespinsWasRetriggered(false);
            }
            syndicate(this, SERVICE_RESPONSE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function onFreeGames(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._freeGames = arg1.data;
            return;
        }

        public static const PUBLISHER_NAME:String="DATA_RESPONSE";

        public static const SERVICE_RESPONSE:String="ON_RESPONSE";

        internal var _visarea:mgs.aurora.games.logicBlocks.data.types.VisAreaPacket;

        internal var _frameWork:mgs.aurora.games.logicBlocks.data.types.FrameworkPacket;

        internal var _player:mgs.aurora.games.logicBlocks.data.types.PlayerPacket;

        internal var _slot:mgs.aurora.games.logicBlocks.data.types.SlotPacket;

        internal var _wins:mgs.aurora.games.logicBlocks.data.types.WinsPacket;

        internal var _reelslide:mgs.aurora.games.logicBlocks.data.types.ReelSlidePacket;

        internal var _reelsets:mgs.aurora.games.logicBlocks.data.types.ReelSetPacket;

        internal var _freeSpinAward:mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardsPacket;

        internal var _bankedSpin:mgs.aurora.games.logicBlocks.data.types.BankedSpinsPacket;

        internal var _spinStyle:mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket;

        internal var _respin:mgs.aurora.games.logicBlocks.data.types.RespinPacket;

        internal var _bet:mgs.aurora.games.logicBlocks.data.types.BetPacket;

        internal var _gamble:mgs.aurora.games.logicBlocks.data.types.GamblePacket;

        internal var _tokenMan:mgs.aurora.games.logicBlocks.data.types.TokenManagersPacket;

        internal var _bonus:mgs.aurora.games.logicBlocks.data.types.BonusGamesPacket;

        internal var _idPacket:mgs.aurora.games.logicBlocks.data.types.IDPacket;

        internal var _freeGames:mgs.aurora.games.logicBlocks.data.types.FreeGamesPacket;

        internal var _previousFreeSpinRemaining:int=0;

        internal var _achievements:mgs.aurora.games.logicBlocks.data.types.AchievementsPacket;

        internal var _nextSpin:mgs.aurora.games.logicBlocks.data.types.NextSpinPacket;
    }
}


//            class RollingReelsData
package mgs.aurora.games.logicBlocks.data 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class RollingReelsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function RollingReelsData()
        {
            super(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.RollingReelsData");
            this._reelSlideSteps = new Vector.<mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket>();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.data.RollingReelsData.SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.clearData, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_VERB, 10000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponseData, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_REELSLIDE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRefresh, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_REFRESH, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSendSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSendSpin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSendSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            return;
        }

        internal function clearData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            while (this._reelSlideSteps.length > 0) 
            {
                this._reelSlideSteps.pop();
            }
            return;
        }

        internal function onSendSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._rollingReelsState = STATE_INACTIVE;
            return;
        }

        public function get steps():__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket>
        {
            return this._reelSlideSteps;
        }

        public function get hasReelSlideSteps():Boolean
        {
            return this._reelSlideSteps.length > 0;
        }

        internal function onResponseData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.types.ReelSlidePacket(arg1.data);
            var loc2:*=0;
            while (loc2 < loc1.numberOf) 
            {
                this._reelSlideSteps.push(loc1.realSlideStep[loc2]);
                ++loc2;
            }
            syndicate(this, SERVICE_UPDATE);
            return;
        }

        internal function onRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.hasReelSlideSteps) 
            {
                this._currentlyActiveStep = (this._reelSlideSteps.length - 1);
                this._rollingReelsState = STATE_COMPLETE;
            }
            return;
        }

        public function get rollingReelsState():int
        {
            return this._rollingReelsState;
        }

        public function set rollingReelsState(arg1:int):void
        {
            this._rollingReelsState = arg1;
            return;
        }

        public function isState(arg1:int):Boolean
        {
            return this._rollingReelsState == arg1;
        }

        public function get currentlyActiveStep():int
        {
            return this._currentlyActiveStep;
        }

        public function set currentlyActiveStep(arg1:int):void
        {
            this._currentlyActiveStep = arg1;
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_RollingReelsData";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const STATE_INACTIVE:int=0;

        public static const STATE_STARTING:int=1;

        public static const STATE_ACTIVE:int=2;

        public static const STATE_COMPLETE:int=3;

        protected var _reelSlideSteps:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket>;

        protected var _rollingReelsState:int=0;

        protected var _currentlyActiveStep:int=-1;
    }
}


//            class SettingsData
package mgs.aurora.games.logicBlocks.data 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class SettingsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function SettingsData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.SettingsData");
            return;
        }

        public function get packetVersion():String
        {
            return this._packetVersion;
        }

        public function get doCoins():Boolean
        {
            return this._doCoins;
        }

        public function get doCredits():Boolean
        {
            return this._doCredits;
        }

        public function get doIntro():Boolean
        {
            return this._doIntro;
        }

        public function get linesEnabled():Boolean
        {
            return this._linesEnabled;
        }

        public function get canStopAllReels():Boolean
        {
            return this._canStopAllReels;
        }

        public function get startAutoPlayDelay():int
        {
            return this._startAutoPlayDelay;
        }

        public function get doReelSpinBkgSoundFadeOut():Boolean
        {
            return this._doReelSpinBkgSoundFadeOut;
        }

        public function get reelSpinBkgSoundFadeOutTime():int
        {
            return this._reelSpinBkgSoundFadeOutTime;
        }

        public function get reelSpinBkgSoundFadeInTime():int
        {
            return this._reelSpinBkgSoundFadeInTime;
        }

        public function get reelSpinBkgSoundFadeOutLevel():int
        {
            return this._reelSpinBkgSoundFadeOutLevel;
        }

        public function get doOnWinBkgSoundFadeOut():Boolean
        {
            return this._doOnWinBkgSoundFadeOut;
        }

        public function get onWinBkgSoundFadeOutTime():int
        {
            return this._onWinBkgSoundFadeOutTime;
        }

        public function get onWinBkgSoundFadeInTime():int
        {
            return this._onWinBkgSoundFadeInTime;
        }

        public function get onWinBkgSoundFadeOutLevel():int
        {
            return this._onWinBkgSoundFadeOutLevel;
        }

        public function get onFSSummaryBkgSoundFadeOutLevel():int
        {
            return this._onFSSummaryBkgSoundFadeOutLevel;
        }

        public function get featureDialog():Boolean
        {
            return this._featureDialog;
        }

        public function get onFSSummaryBkgSoundFadeOutTime():int
        {
            return this._onFSSummaryBkgSoundFadeOutTime;
        }

        public function get betChangedPrompt():Boolean
        {
            return this._betChangedPrompt;
        }

        public function get autoplayContiCountup():Boolean
        {
            return this._autoplayContiCountup;
        }

        public function get useCoinsCurrencyAutoplayDialog():Boolean
        {
            return this._useCoinsCurrencyAutoplayDialog;
        }

        public function get autoplayContiAnimComplete():Boolean
        {
            return this._autoplayContiAnimComplete;
        }

        public function get autoplayContiTimeComplete():Boolean
        {
            return this._autoplayContiTimeComplete;
        }

        public function get autoplayContiTime():int
        {
            return this._autoplayContiTime;
        }

        public function get freespinContiCountup():Boolean
        {
            return this._freespinContiCountup;
        }

        public function get freespinContiWinComplete():Boolean
        {
            return this._freespinContiWinComplete;
        }

        public function get freespinContiAnimComplete():Boolean
        {
            return this._freespinContiAnimComplete;
        }

        public function get freespinContiTimeComplete():Boolean
        {
            return this._freespinContiTimeComplete;
        }

        public function get freespinContiTimeCompleteQuickSpinOnly():Boolean
        {
            return this._freespinContiTimeCompleteQuickSpinOnly;
        }

        public function get freespinContiTimeAndCountupComplete():Boolean
        {
            return this._freespinContiTimeAndCountupComplete;
        }

        public function get freespinContiTime():int
        {
            return this._freespinContiTime;
        }

        public function get skipMessageTime():Number
        {
            return this._skipMessageTime;
        }

        public function get freespinAutoStart():Boolean
        {
            return this._freespinAutoStart;
        }

        public function get autoplayContiWinComplete():Boolean
        {
            return this._autoplayContiWinComplete;
        }

        public function get autoplayContiTimeQuickspin():int
        {
            return this._autoplayContiTimeQuickspin;
        }

        public function get respinWarningMultiplier():Number
        {
            return this._respinWarningMultiplier;
        }

        public function get displayFeatureDialogInFreeGames():Boolean
        {
            return this._displayFeatureDialogInFreeGames;
        }

        public function get wayWinType():String
        {
            return this._wayWinType;
        }

        public function get autoCloseFreeSpinSummary():Boolean
        {
            return this._autoCloseFreeSpinSummary;
        }

        public function get autoCloseFreeSpinSummaryTimer():Number
        {
            return this._autoCloseFreeSpinSummaryTimer;
        }

        public function get freeGamesSummaryDelay():Number
        {
            return this._freeGamesSummaryDelay;
        }

        public function get flashWinsAfterFreespins():Boolean
        {
            return this._flashWinsAfterFreespins;
        }

        public function get hasWinSummary():Boolean
        {
            return this._hasWinSummary;
        }

        public function get isPostSummary():Boolean
        {
            return this._isPostSummary;
        }

        public function get repeatWinSummary():Boolean
        {
            return this._repeatWinSummary;
        }

        public function get onInterruptStopWinAnims():Boolean
        {
            return this._onInterruptStopWinAnims;
        }

        public function get forceStopDelays():int
        {
            return this._forceStopDelays;
        }

        public function get autoplayPauseBetweenSpinsNoWin():int
        {
            return this._autoplayPauseBetweenSpinsNoWin;
        }

        public function get autoplayPauseBetweenSpinsWin():int
        {
            return this._autoplayPauseBetweenSpinsWin;
        }

        public function get autoplayPauseBetweenSpinsBigWin():int
        {
            return this._autoplayPauseBetweenSpinsBigWin;
        }

        public function get autoplayPauseBetweenQuickSpinsNoWin():int
        {
            return this._autoplayPauseBetweenQuickSpinsNoWin;
        }

        public function get autoplayPauseBetweenQuickSpinsWin():int
        {
            return this._autoplayPauseBetweenQuickSpinsWin;
        }

        public function get autoplayPauseBetweenQuickSpinsBigWin():int
        {
            return this._autoplayPauseBetweenQuickSpinsBigWin;
        }

        public function get timeToClearFreespinWinnings():int
        {
            return this._timeToClearFreespinWinnings;
        }

        public function get startFreeSpinsDelay():int
        {
            return this._startFreeSpinsDelay;
        }

        public function get repeatWayWinSummary():int
        {
            return 3;
        }

        public function get wayWin():Boolean
        {
            return this._wayWin;
        }

        public function get wayWinSummary():int
        {
            return 3;
        }

        public function get minStopTime():int
        {
            return this._minStopTime;
        }

        public function get viperClient():Boolean
        {
            return mgs.aurora.games.framework.AuroraReference.aurora.server.platform == mgs.aurora.api.enums.PlatformType.VIPER;
        }

        public function get showWayWinSliderDuringFreeSpins():Boolean
        {
            return this._showWayWinSliderDuringFreeSpins;
        }

        public function get autoCloseBonusSummaryTimer():Number
        {
            return this._autoCloseBonusSummaryTimer;
        }

        public function get showLogoForBonusTriggeredInFS():Boolean
        {
            return this._showLogoForBonusTriggeredInFS;
        }

        public function get bonusSummaryDelay():Number
        {
            return this._bonusSummaryDelay;
        }

        public function get triggerFreespinsInBonus():Boolean
        {
            return this._triggerFreespinsInBonus;
        }

        public function get autoContinueFreeSpinAfterBonus():Boolean
        {
            return this._autoContinueFreeSpinAfterBonus;
        }

        public function get triggerFreespinsAndBonusTogether():Boolean
        {
            return this._triggerFreespinsAndBonusTogether;
        }

        public function get resetWinAmountDelay():int
        {
            return this._resetWinAmountDelay;
        }

        public function get freeSpinReelsetStartIndex():int
        {
            return this._freeSpinReelsetStartIndex;
        }

        public function get consoleType():int
        {
            return this._consoleType;
        }

        public function set consoleType(arg1:int):void
        {
            this._consoleType = arg1;
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SETTINGS);
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var t:mgs.aurora.games.framework.ITransportLayer=null;
            var xml:XMLList;

            var loc1:*;
            t = arg1;
            xml = t.data;
            var loc3:*=0;
            var loc4:*=xml.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "waywin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._wayWin = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "wayWinType") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._wayWinType = loc2.@val.toString();
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "hasWinSummary") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._hasWinSummary = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "repeatWinSummary") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._repeatWinSummary = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "isPostSummary") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._isPostSummary = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "gamble") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._gamble = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "gameTypeId") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._gametypeId = loc2.@val.toString();
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "onInterruptStopWinAnims") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._onInterruptStopWinAnims = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "packetVersion") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._packetVersion = loc2.@val.toString();
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "canDoCredits") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._doCredits = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "canDoCoins") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._doCoins = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "doIntro") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._doIntro = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "linesEnabled") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._linesEnabled = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "canStopAllReels") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._canStopAllReels = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "forceStopDelays") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._forceStopDelays = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "startAutoPlayDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._startAutoPlayDelay = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "doReelSpinBkgSoundFadeOut") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._doReelSpinBkgSoundFadeOut = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "reelSpinBkgSoundFadeOutTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._reelSpinBkgSoundFadeOutTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "reelSpinBkgSoundFadeInTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._reelSpinBkgSoundFadeInTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "reelSpinBkgSoundFadeOutLevel") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._reelSpinBkgSoundFadeOutLevel = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "doOnWinBkgSoundFadeOut") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._doOnWinBkgSoundFadeOut = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "onWinBkgSoundFadeOutTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._onWinBkgSoundFadeOutTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "onWinBkgSoundFadeInTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._onWinBkgSoundFadeInTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "onWinBkgSoundFadeOutLevel") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._onWinBkgSoundFadeOutLevel = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "onFSSummaryBkgSoundFadeOutTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._onFSSummaryBkgSoundFadeOutTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "onFSSummaryBkgSoundFadeOutLevel") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._onFSSummaryBkgSoundFadeOutLevel = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "featureDialog") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._featureDialog = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "betChangedPrompt") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._betChangedPrompt = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinAutoStart") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinAutoStart = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "flashWinsAfterFreespins") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._flashWinsAfterFreespins = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "skipMessageTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._skipMessageTime = Number(loc2.@val);
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "respinWarningMultiplier") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._respinWarningMultiplier = Number(loc2.@val);
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "displayFeatureDialogInFreeGames") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._displayFeatureDialogInFreeGames = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoCloseFreeSpinSummary") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoCloseFreeSpinSummary = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoCloseFreeSpinSummaryTimer") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoCloseFreeSpinSummaryTimer = Number(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoCloseBonusSummary") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoCloseBonusSummary = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoCloseBonusSummaryTimer") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoCloseBonusSummaryTimer = Number(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "bonusSummaryDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._bonusSummaryDelay = Number(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "showLogoForBonusTriggeredInFS") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._showLogoForBonusTriggeredInFS = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "useCoinsCurrencyAutoplayDialog") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._useCoinsCurrencyAutoplayDialog = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayContiCountup") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayContiCountup = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayContiWinComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayContiWinComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayContiAnimComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayContiAnimComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayContiTimeComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayContiTimeComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayContiTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayContiTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayContiTimeQuickspin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayContiTimeQuickspin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "delayAfterFreespins") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._delayAfterFreespins = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "startFreeSpinsDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._startFreeSpinsDelay = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "triggerFreespinsInBonus") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._triggerFreespinsInBonus = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoContinueFreeSpinAfterBonus") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoContinueFreeSpinAfterBonus = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinContiCountup") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiCountup = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinContiWinComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiWinComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinContiAnimComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiAnimComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinContiTimeComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiTimeComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "_freespinContiTimeCompleteQuickSpinOnly") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiTimeCompleteQuickSpinOnly = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinContiTimeAndCountupComplete") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiTimeAndCountupComplete = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinContiTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freespinContiTime = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayPauseBetweenSpinsNoWin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayPauseBetweenSpinsNoWin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayPauseBetweenSpinsWin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayPauseBetweenSpinsWin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayPauseBetweenSpinsBigWin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayPauseBetweenSpinsBigWin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayPauseBetweenQuickSpinsNoWin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayPauseBetweenQuickSpinsNoWin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayPauseBetweenQuickSpinsWin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayPauseBetweenQuickSpinsWin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "autoplayPauseBetweenQuickSpinsBigWin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._autoplayPauseBetweenQuickSpinsBigWin = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "resetWinAmountDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._resetWinAmountDelay = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freeSpinReelsetStartIndex") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freeSpinReelsetStartIndex = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "consoleType") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._consoleType = int(loc2.@val.toString());
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "triggerFreespinsAndBonusTogether") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._triggerFreespinsAndBonusTogether = loc2.@val.toString() == "true";
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freeGameSummaryDelay") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._freeGamesSummaryDelay = Number(loc2.@val);
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "minStopTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._minStopTime = int(loc2.@val);
            loc3 = 0;
            loc4 = xml.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "showWayWinSliderDuringFreeSpins") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._showWayWinSliderDuringFreeSpins = loc2.@val.toString() == "true";
            mgs.aurora.games.framework.GameInfoReference.setGameTypeID(this._gametypeId);
            mgs.aurora.games.framework.GameInfoReference.setPacketVersion(this._packetVersion);
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        public function get delayAfterFreespins():int
        {
            return this._delayAfterFreespins;
        }

        public function get gamble():Boolean
        {
            return this._gamble;
        }

        public function get gametypeId():String
        {
            return this._gametypeId;
        }

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const PUBLISHER_NAME:String="DATA_SETTINGS";

        internal var _gametypeId:String;

        internal var _packetVersion:String;

        internal var _doCredits:Boolean=false;

        internal var _doCoins:Boolean=false;

        internal var _doIntro:Boolean=false;

        internal var _linesEnabled:Boolean=false;

        internal var _canStopAllReels:Boolean=false;

        internal var _startAutoPlayDelay:int;

        internal var _doReelSpinBkgSoundFadeOut:Boolean;

        internal var _reelSpinBkgSoundFadeOutTime:int;

        internal var _reelSpinBkgSoundFadeInTime:int;

        internal var _reelSpinBkgSoundFadeOutLevel:int;

        internal var _doOnWinBkgSoundFadeOut:Boolean;

        internal var _onWinBkgSoundFadeOutTime:int;

        internal var _onWinBkgSoundFadeInTime:int;

        internal var _onFSSummaryBkgSoundFadeOutTime:int;

        internal var _onFSSummaryBkgSoundFadeOutLevel:int;

        internal var _skipMessageTime:Number;

        internal var _featureDialog:Boolean=false;

        internal var _betChangedPrompt:Boolean=false;

        internal var _freespinAutoStart:Boolean=false;

        internal var _flashWinsAfterFreespins:Boolean=false;

        internal var _useCoinsCurrencyAutoplayDialog:Boolean=false;

        internal var _autoplayContiCountup:Boolean=false;

        internal var _autoplayContiWinComplete:Boolean=false;

        internal var _autoplayContiAnimComplete:Boolean=false;

        internal var _autoplayContiTimeComplete:Boolean=false;

        internal var _autoplayContiTime:int;

        internal var _autoplayContiTimeQuickspin:int;

        internal var _freespinContiCountup:Boolean=false;

        internal var _freespinContiTimeAndCountupComplete:Boolean=false;

        internal var _freespinContiWinComplete:Boolean=false;

        internal var _freespinContiAnimComplete:Boolean=false;

        internal var _freespinContiTimeComplete:Boolean=false;

        internal var _freespinContiTimeCompleteQuickSpinOnly:Boolean=false;

        internal var _freespinContiTime:int;

        internal var _minStopTime:int;

        internal var _respinWarningMultiplier:Number;

        internal var _displayFeatureDialogInFreeGames:Boolean=false;

        internal var _wayWinType:String;

        internal var _autoCloseFreeSpinSummary:Boolean=false;

        internal var _autoCloseFreeSpinSummaryTimer:Number;

        internal var _autoCloseBonusSummary:Boolean=false;

        internal var _autoCloseBonusSummaryTimer:Number;

        internal var _bonusSummaryDelay:Number;

        internal var _freeGamesSummaryDelay:Number;

        internal var _hasWinSummary:Boolean=false;

        internal var _isPostSummary:Boolean=false;

        internal var _repeatWinSummary:Boolean=false;

        internal var _onInterruptStopWinAnims:Boolean=false;

        internal var _forceStopDelays:int;

        internal var _autoplayPauseBetweenSpinsNoWin:int;

        internal var _wayWin:Boolean;

        internal var _autoplayPauseBetweenQuickSpinsNoWin:int;

        internal var _autoplayPauseBetweenQuickSpinsWin:int;

        internal var _autoplayPauseBetweenQuickSpinsBigWin:int;

        internal var _timeToClearFreespinWinnings:int;

        internal var _delayAfterFreespins:int;

        internal var _showWayWinSliderDuringFreeSpins:Boolean;

        internal var _triggerFreespinsInBonus:Boolean=false;

        internal var _autoContinueFreeSpinAfterBonus:Boolean=false;

        internal var _autoplayPauseBetweenSpinsWin:int;

        internal var _triggerFreespinsAndBonusTogether:Boolean=false;

        internal var _resetWinAmountDelay:int;

        internal var _consoleType:int;

        internal var _freeSpinReelsetStartIndex:int=0;

        internal var _showLogoForBonusTriggeredInFS:Boolean;

        internal var _autoplayPauseBetweenSpinsBigWin:int;

        internal var _onWinBkgSoundFadeOutLevel:int;

        internal var _gamble:Boolean;

        internal var _startFreeSpinsDelay:int;
    }
}


//            class StatisticsData
package mgs.aurora.games.logicBlocks.data 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class StatisticsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function StatisticsData()
        {
            this._lastUpdateValue = [0, 0, 0];
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.StatisticsData");
            this._spinsPlayed = 0;
            this._reSpinsPlayed = 0;
            this._firstHighWin = 0;
            this._secondHighWin = 0;
            this._thirdHighWin = 0;
            this._endTime = new Date();
            this._startTime = new Date();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLayers, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.SERVICE_DRAWLAYERS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReset, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_RESET_STATS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReset, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SWITCH_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE, 100);
            return;
        }

        internal function onCountComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            this._lastUpdateValue = [this._thirdHighWin, this._secondHighWin, this._firstHighWin];
            if (loc1.player.totalWin > 0 && !(loc1.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) && !(loc1.id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES)) 
            {
                if (loc1.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME && loc1.slot.state == mgs.aurora.slots.components.enums.SlotStates.NORMAL_SPIN_MODE) 
                {
                    this.setWinAmount(loc1.player.totalWin);
                }
                else if (loc1.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
                {
                    this.setWinAmount(loc1.slot.win);
                }
            }
            return;
        }

        protected function setWinAmount(arg1:int):void
        {
            if (!(arg1 == this._firstHighWin) && !(arg1 == this._secondHighWin)) 
            {
                if (arg1 > this._firstHighWin) 
                {
                    this._indexUpdate = "high";
                    this._thirdHighWin = this._secondHighWin;
                    this._secondHighWin = this._firstHighWin;
                    this._firstHighWin = arg1;
                }
                else if (arg1 > this._secondHighWin) 
                {
                    this._indexUpdate = "medium";
                    this._thirdHighWin = this._secondHighWin;
                    this._secondHighWin = arg1;
                }
                else if (arg1 > this._thirdHighWin) 
                {
                    this._indexUpdate = "low";
                    this._thirdHighWin = arg1;
                }
            }
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data);
            if (loc1.id.verb == mgs.aurora.slots.components.enums.Verbs.GAMBLE || loc1.id.verb == mgs.aurora.slots.components.enums.Verbs.COLLECT) 
            {
                var loc3:*=loc1.gamble.state;
                switch (loc3) 
                {
                    case 2:
                    case 3:
                    {
                        if (this._indexUpdate != "high") 
                        {
                            if (this._indexUpdate != "medium") 
                            {
                                if (this._indexUpdate == "low") 
                                {
                                    this._thirdHighWin = Number(loc1.player.totalWin);
                                }
                            }
                            else 
                            {
                                this._secondHighWin = Number(loc1.player.totalWin);
                            }
                        }
                        else 
                        {
                            this._firstHighWin = Number(loc1.player.totalWin);
                        }
                        loc2 = [this._firstHighWin, this._secondHighWin, this._thirdHighWin];
                        loc2.sort(this.decending);
                        this._firstHighWin = loc2[0];
                        this._secondHighWin = loc2[1];
                        this._thirdHighWin = loc2[2];
                        syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
                        break;
                    }
                }
            }
            return;
        }

        internal function decending(arg1:Number, arg2:Number):int
        {
            if (arg1 > arg2) 
            {
                return -1;
            }
            if (arg1 < arg2) 
            {
                return 1;
            }
            return 0;
        }

        internal function onReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            var loc2:*=loc1.id.verb;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.enums.Verbs.SPIN:
                case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                case mgs.aurora.slots.components.enums.Verbs.NUDGE:
                {
                    var loc3:*=((loc2 = this)._spinsPlayed + 1);
                    loc2._spinsPlayed = loc3;
                    break;
                }
            }
            loc2 = loc1.id.verb;
            switch (loc2) 
            {
                case mgs.aurora.slots.components.enums.Verbs.RESPIN:
                {
                    loc3 = ((loc2 = this)._reSpinsPlayed + 1);
                    loc2._reSpinsPlayed = loc3;
                    break;
                }
            }
            return;
        }

        internal function onReset(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._spinsPlayed = 0;
            this._reSpinsPlayed = 0;
            this._firstHighWin = 0;
            this._secondHighWin = 0;
            this._thirdHighWin = 0;
            this._endTime = new Date();
            this._startTime = new Date();
            this._indexUpdate = "high";
            this._lastUpdateValue = [0, 0, 0];
            return;
        }

        internal function onLayers(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        public function get spinsPlayed():int
        {
            return this._spinsPlayed;
        }

        public function get firstHighest():Number
        {
            return this._firstHighWin;
        }

        public function get secondHighest():Number
        {
            return this._secondHighWin;
        }

        public function get thirdHighest():Number
        {
            return this._thirdHighWin;
        }

        public function get respins():uint
        {
            return this._reSpinsPlayed;
        }

        public function get spinsPerHour():uint
        {
            var loc1:*=new Date();
            this._oldTSpins = this._spinsPlayed + this._reSpinsPlayed;
            var loc2:*=loc1.time - this._startTime.time;
            this._spinsPerHour = Math.round(this._oldTSpins / (loc2 / 1000 / 60 / 60));
            if (this._spinsPerHour < this._oldTSpins) 
            {
                this._spinsPerHour = this._oldTSpins;
            }
            return this._spinsPerHour;
        }

        public function get timeElapsed():String
        {
            var loc1:*=new Date();
            var loc2:*=loc1.time - this._startTime.time;
            var loc3:*=new Date();
            loc3.setTime(loc2);
            var loc4:*;
            if ((loc4 = (loc4 = new String()) + loc3.getUTCHours().toString()).toString().length == 1) 
            {
                loc4 = "0" + loc4;
            }
            if (loc3.getMinutes().toString().length != 1) 
            {
                loc4 = loc4 + ":" + loc3.getMinutes().toString();
            }
            else 
            {
                loc4 = loc4 + ":0" + loc3.getMinutes().toString();
            }
            if (loc3.getSeconds().toString().length != 1) 
            {
                loc4 = loc4 + ":" + loc3.getSeconds().toString();
            }
            else 
            {
                loc4 = loc4 + ":0" + loc3.getSeconds().toString();
            }
            return loc4;
        }

        public static const PUBLISHER_NAME:String="DATA_STATISTICS";

        public static const SERVICE_UPDATE:String="UPDATE";

        internal var _spinsPlayed:int=0;

        internal var _reSpinsPlayed:int=0;

        internal var _firstHighWin:Number=0;

        internal var _secondHighWin:Number=0;

        internal var _thirdHighWin:Number=0;

        internal var _endTime:Date;

        internal var _startTime:Date;

        internal var _oldTSpins:int=0;

        internal var _spinsPerHour:uint=0;

        internal var _indexUpdate:String="high";

        internal var _lastUpdateValue:Array;
    }
}


//            class SymbolsData
package mgs.aurora.games.logicBlocks.data 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    
    public class SymbolsData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function SymbolsData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.SymbolsData");
            this._symbolViewSets = new Vector.<mgs.aurora.games.common.dataTypes.SymbolViewSetData>();
            return;
        }

        public function getPriorityLayerOrder():__AS3__.vec.Vector.<uint>
        {
            return this.currentViewSet.priorityLayerOrder;
        }

        public function getPriorityLayerSymbols():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.priorityLayerSymbols;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONFIG));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSymbolConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewChange, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.SERVICE_UPDATE, 5000);
            return;
        }

        internal function onSymbolConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=new XMLList(arg1.data);
            var loc4:*=0;
            var loc5:*=loc1.symbolViewSet;
            for each (loc2 in loc5) 
            {
                (loc3 = new mgs.aurora.games.common.dataTypes.SymbolViewSetData()).init(loc2);
                this._symbolViewSets.push(loc3);
            }
            this._currentViewSetIndex = 0;
            syndicate(this, SERVICE_CONFIG, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        protected function get currentViewSet():mgs.aurora.games.common.dataTypes.SymbolViewSetData
        {
            return this._symbolViewSets[this._currentViewSetIndex];
        }

        public function get staticList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.staticList;
        }

        public function getStaticSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this.currentViewSet.getStaticSymbol(arg1);
        }

        public function get animList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.animList;
        }

        public function getAnimSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this.currentViewSet.getAnimSymbol(arg1);
        }

        public function get landList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.landList;
        }

        public function getLandSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this.currentViewSet.getLandSymbol(arg1);
        }

        public function getSpecialSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this.currentViewSet.getSpecialSymbol(arg1);
        }

        public function getTriggerSymbol(arg1:int):mgs.aurora.games.common.dataTypes.SymbolEntity
        {
            return this.currentViewSet.getTriggerSymbol(arg1);
        }

        public function get triggerAnimList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.triggerAnimList;
        }

        public function get triggerList():__AS3__.vec.Vector.<mgs.aurora.slots.components.triggercontroller.Trigger>
        {
            return this.currentViewSet.triggerList;
        }

        public function get numIterations():int
        {
            return this.currentViewSet.numIterations;
        }

        public function get iterationShowDelay():int
        {
            return this.currentViewSet.iterationShowDelay;
        }

        public function get iterationHideDelay():int
        {
            return this.currentViewSet.iterationHideDelay;
        }

        public function get hasWinSummary():Boolean
        {
            return this.currentViewSet.hasWinSummary;
        }

        public function get repeatWinSummary():Boolean
        {
            return this.currentViewSet.repeatWinSummary;
        }

        public function get isPostSummary():Boolean
        {
            return this.currentViewSet.isPostSummary;
        }

        public function get summaryShowDelay():int
        {
            return this.currentViewSet.summaryShowDelay;
        }

        public function get summaryHideDelay():int
        {
            return this.currentViewSet.summaryHideDelay;
        }

        public function get specialList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.specialList;
        }

        public function get fallbackList():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>
        {
            return this.currentViewSet.fallbackList;
        }

        public function getTrigger(arg1:int):mgs.aurora.slots.components.triggercontroller.Trigger
        {
            return this.currentViewSet.getTrigger(arg1);
        }

        public function onViewChange(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            var loc2:*=0;
            while (loc2 < this._symbolViewSets.length) 
            {
                if (this._symbolViewSets[loc2].activeInView(loc1)) 
                {
                    this._currentViewSetIndex = loc2;
                }
                ++loc2;
            }
            return;
        }

        public function isLateLoadingFile(arg1:String):Boolean
        {
            return this.currentViewSet.isLateLoadingFile(arg1);
        }

        public static const PUBLISHER_NAME:String="DATA_SYMBOLS";

        public static const SERVICE_CONFIG:String="CONFIG";

        internal var _symbolViewSets:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolViewSetData>;

        internal var _currentViewSetIndex:int=-1;
    }
}


//            class VisAreaData
package mgs.aurora.games.logicBlocks.data 
{
    import __AS3__.vec.*;
    import flash.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.common.interfaces.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    
    public class VisAreaData extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.common.interfaces.IVisareaData
    {
        public function VisAreaData()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.data.VisAreaData");
            this._winComboMap = new flash.utils.Dictionary(true);
            return;
        }

        internal function update(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc3:*=0;
            var loc7:*=null;
            var loc8:*=0;
            var loc9:*=false;
            var loc10:*=0;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=0;
            var loc14:*=null;
            var loc15:*=null;
            var loc16:*=0;
            var loc17:*=0;
            var loc18:*=null;
            var loc19:*=0;
            var loc20:*=null;
            var loc21:*=null;
            var loc22:*=null;
            var loc23:*=false;
            var loc24:*=0;
            var loc25:*=0;
            this.resetData();
            var loc1:*=mgs.aurora.games.logicBlocks.data.RollingReelsData(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME));
            if (loc1.hasReelSlideSteps && (loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE) || loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_COMPLETE))) 
            {
                this._visAreaPkt = loc1.steps[loc1.currentlyActiveStep].visArea;
                this._winPkt = loc1.steps[loc1.currentlyActiveStep].wins;
            }
            else 
            {
                this._visAreaPkt = this._response.visarea;
                this._winPkt = this._response.wins;
            }
            var loc2:*=mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            var loc4:*=0;
            while (loc4 < this._visAreaPkt.symbolsArray.length) 
            {
                var loc26:*;
                var loc27:*;
                var loc28:*=((loc26 = this._symbolCounter)[loc27 = this._visAreaPkt.symbolsArray[loc4]] + 1);
                loc26[loc27] = loc28;
                ++loc4;
            }
            var loc5:*=new Object();
            var loc6:*=new Object();
            loc4 = 0;
            while (loc4 < this.wins.numberOf) 
            {
                loc14 = this._winComboMap[this.wins.wins[loc4].id];
                if (this.wins.wins[loc4].numCoinsWon == 0) 
                {
                    break;
                }
                if (loc14.anticipate) 
                {
                    this._canAnticipate = true;
                }
                if (loc14.trigger) 
                {
                    this._triggerActivated = true;
                }
                if (loc2.getTriggerSymbol(loc14.symbolId) != null) 
                {
                    this._triggerIdList.push(loc14.symbolId);
                }
                loc15 = this.wins.wins[loc4].matchPos;
                loc16 = 0;
                while (loc16 < loc15.length) 
                {
                    loc3 = this.getSymbolIdFromVisArea(loc15[loc16]);
                    this._winningSymbolList.push(loc15[loc16]);
                    if (!(loc2.getAnimSymbol(loc3) == null) || !(loc2.getTriggerSymbol(loc3) == null)) 
                    {
                        loc5[loc15[loc16]] = true;
                    }
                    if (loc2.getTriggerSymbol(loc3) != null) 
                    {
                        loc6[loc15[loc16]] = true;
                    }
                    ++loc16;
                }
                if (loc14.numRequired != 2) 
                {
                    if (loc14.numRequired != 3) 
                    {
                        if (loc14.numRequired != 4) 
                        {
                            if (loc14.numRequired == 5) 
                            {
                                this._fiveOfKind = true;
                            }
                        }
                        else 
                        {
                            this._fourOfKind = true;
                        }
                    }
                    else 
                    {
                        this._threeOfKind = true;
                    }
                }
                else 
                {
                    this._twoOfKind = true;
                }
                ++loc4;
            }
            loc26 = 0;
            loc27 = loc5;
            for (loc7 in loc27) 
            {
                this._winningAnimationList.push(int(loc7));
            }
            loc26 = 0;
            loc27 = loc6;
            for (loc7 in loc27) 
            {
                this._winningTriggerList.push(int(loc7));
            }
            loc9 = false;
            loc10 = 0;
            loc11 = {};
            loc12 = {};
            loc13 = 0;
            while (loc13 < this._reelData.columns) 
            {
                this._symbolList[loc13] = [];
                this._anticipateListPotential[loc13] = false;
                this._reelHasTrigger[loc13] = false;
                this._anticipateList[loc13] = false;
                this._canPlayLandList[loc13] = false;
                this._spinStopAnticipationOverride[loc13] = false;
                loc17 = 0;
                while (loc17 < this._reelData.rows) 
                {
                    loc8 = this.getVisIndex(loc13, loc17);
                    loc3 = this.getSymbolIdFromVisArea(loc8);
                    if (!(loc2.getTriggerSymbol(loc3) == null) && this._triggerCounter[loc3] == null) 
                    {
                        this._triggerCounter[loc3] = 0;
                        loc12[loc3] = new Vector.<Boolean>(this._reelData.columns);
                        loc11[loc3] = false;
                    }
                    this._symbolList[loc13].push(loc3);
                    if ((loc18 = loc2.getTrigger(loc3)) != null) 
                    {
                        loc12[loc3][loc13] = false;
                        loc27 = ((loc26 = this)._totalNumberOfTriggers + 1);
                        loc26._totalNumberOfTriggers = loc27;
                        loc28 = ((loc26 = this._triggerCounter)[loc27 = loc18.id] + 1);
                        loc26[loc27] = loc28;
                        loc10 = this._triggerCounter[loc18.id];
                        this._visibleTriggerList.push(loc8);
                        this._reelHasTrigger[loc13] = true;
                        loc19 = loc18.maxAnticipateReel > 0 ? this._reelData.columns - (this._reelData.columns - (loc18.maxAnticipateReel + 1)) : this._reelData.columns;
                        if (loc18.anticipate) 
                        {
                            loc12[loc3][loc13] = loc18.minimum - loc10 <= loc19 - (loc13 + 1) && loc10 == (loc18.minimum - 1);
                        }
                        if ((loc9 = loc18.minimum - loc10 <= loc19 - (loc13 + 1) && loc10 <= loc18.minimum) || loc10 >= loc18.minimum) 
                        {
                            this._canPlayLandList[loc13] = true;
                        }
                    }
                    this._triggerCounterList[loc13] = this._totalNumberOfTriggers;
                    ++loc17;
                }
                this._canPlayTriggerList[loc13] = loc9 && this._reelHasTrigger[loc13];
                ++loc13;
            }
            loc13 = 0;
            while (loc13 < this._reelData.columns) 
            {
                loc26 = 0;
                loc27 = loc12;
                for (loc20 in loc27) 
                {
                    if ((loc21 = loc12[loc20])[loc13] == null && loc13 > 0) 
                    {
                        loc21[loc13] = loc21[(loc13 - 1)];
                        continue;
                    }
                    if (loc21[loc13] != null) 
                    {
                        continue;
                    }
                    loc21[loc13] = false;
                }
                ++loc13;
            }
            loc13 = 0;
            while (loc13 < this._reelData.columns) 
            {
                loc26 = 0;
                loc27 = loc12;
                for (loc20 in loc27) 
                {
                    if ((loc21 = loc12[loc20])[loc13] && loc13 < loc2.getTrigger(int(loc20)).minAnticipateReel) 
                    {
                        loc21[loc13] = false;
                    }
                    if (!(loc13 >= loc2.getTrigger(int(loc20)).maxAnticipateReel && !(loc2.getTrigger(int(loc20)).maxAnticipateReel == -1))) 
                    {
                        continue;
                    }
                    loc21[loc13] = false;
                }
                ++loc13;
            }
            loc13 = 0;
            while (loc13 < this._reelData.columns) 
            {
                loc26 = 0;
                loc27 = loc12;
                for (loc20 in loc27) 
                {
                    loc21 = loc12[loc20];
                    loc18 = loc2.getTrigger(int(loc20));
                    if (!loc21[loc13]) 
                    {
                        continue;
                    }
                    this._anticipateList[loc13] = true;
                    if (!loc18.spinStopOverride) 
                    {
                        continue;
                    }
                    this._spinStopAnticipationOverride[loc13] = true;
                }
                ++loc13;
            }
            if (this._minTriggersBeforeCanShowReelAnticipation > 0) 
            {
                loc22 = new Array(this._reelData.columns);
                loc23 = false;
                loc24 = loc22.length;
                loc25 = 0;
                loc4 = 0;
                while (loc4 < loc24) 
                {
                    if (loc25 >= this._minTriggersBeforeCanShowReelAnticipation && loc25 < this._numTriggersToActivateForReelAnticipation) 
                    {
                        loc22[loc4] = true;
                        if (!loc23) 
                        {
                            loc23 = true;
                        }
                    }
                    else 
                    {
                        loc22[loc4] = false;
                    }
                    if (this._canPlayLandList[loc4]) 
                    {
                        ++loc25;
                    }
                    ++loc4;
                }
                if (loc23) 
                {
                    this._canPlayReelAnticipationAnimation = Vector.<Boolean>(loc22);
                }
            }
            syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this));
            return;
        }

        internal function getVisIndex(arg1:int, arg2:int):int
        {
            return this._reelData.columns * ((this._reelData.rows - 1) - arg2) + arg1;
        }

        internal function resetData():void
        {
            var loc2:*=0;
            this._triggerIdList = new Vector.<int>();
            this._triggerCounterList = new Vector.<int>(this._reelData.columns);
            this._symbolList = new Vector.<Array>(this._reelData.columns);
            this._anticipateList = new Vector.<Boolean>(this._reelData.columns);
            this._canPlayTriggerList = new Vector.<Boolean>(this._reelData.columns);
            this._canPlayLandList = new Vector.<Boolean>(this._reelData.columns);
            this._canPlayReelAnticipationAnimation = null;
            this._anticipateListPotential = new Vector.<Boolean>(this._reelData.columns);
            this._reelHasTrigger = new Vector.<Boolean>(this._reelData.columns);
            this._symbolAccumulativeCounter = new Vector.<Vector.<int>>(this._reelData.numberOfSymbols);
            this._visibleTriggerList = new Vector.<int>();
            this._winningAnimationList = new Vector.<int>();
            this._winningTriggerList = new Vector.<int>();
            this._spinStopAnticipationOverride = new Vector.<Boolean>(this._reelData.columns);
            this._triggerCounter = {};
            this._symbolCounter = [];
            var loc1:*=0;
            while (loc1 < this._reelData.numberOfSymbols) 
            {
                this._symbolCounter.push(0);
                this._symbolAccumulativeCounter[loc1] = new Vector.<int>(this._reelData.columns);
                loc2 = 0;
                while (loc2 < this._reelData.columns) 
                {
                    this._symbolAccumulativeCounter[loc1][loc2] = 0;
                    ++loc2;
                }
                ++loc1;
            }
            this._winningSymbolList = [];
            this._twoOfKind = false;
            this._threeOfKind = false;
            this._fourOfKind = false;
            this._fiveOfKind = false;
            this._canAnticipate = false;
            this._triggerActivated = false;
            this._anticipateMinimumFlag = false;
            this._totalNumberOfTriggers = 0;
            return;
        }

        public function get canAnticipate():Boolean
        {
            return this._canAnticipate;
        }

        public function get anticipateList():__AS3__.vec.Vector.<Boolean>
        {
            return this._anticipateList;
        }

        public function get symbolList():__AS3__.vec.Vector.<Array>
        {
            return this._symbolList;
        }

        public function get symbolCounter():Array
        {
            return this._symbolCounter;
        }

        public function get threeOfKind():Boolean
        {
            return this._threeOfKind;
        }

        public function get twoOfKind():Boolean
        {
            return this._twoOfKind;
        }

        public function get fourOfKind():Boolean
        {
            return this._fourOfKind;
        }

        public function get fiveOfKind():Boolean
        {
            return this._fiveOfKind;
        }

        public function get triggerIdList():__AS3__.vec.Vector.<int>
        {
            return this._triggerIdList;
        }

        public function get totalNumberOfTriggers():int
        {
            return this._totalNumberOfTriggers;
        }

        public function get winComboMap():Object
        {
            return this._winComboMap;
        }

        public function get triggerCounter():Object
        {
            return this._triggerCounter;
        }

        public function get winningSymbolList():Array
        {
            return this._winningSymbolList;
        }

        public function get winningAnimationList():__AS3__.vec.Vector.<int>
        {
            return this._winningAnimationList;
        }

        public function get winningTriggerList():__AS3__.vec.Vector.<int>
        {
            return this._winningTriggerList;
        }

        public function get triggerActivated():Boolean
        {
            return this._triggerActivated;
        }

        public function get triggerCounterList():__AS3__.vec.Vector.<int>
        {
            return this._triggerCounterList;
        }

        public function get anticipateListPotential():__AS3__.vec.Vector.<Boolean>
        {
            return this._anticipateListPotential;
        }

        public function triggerOnReel(arg1:int, arg2:int):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._symbolList[arg1].length) 
            {
                if (this._symbolList[arg1][loc1] == arg2) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function get reelHasTrigger():__AS3__.vec.Vector.<Boolean>
        {
            return this._reelHasTrigger;
        }

        public function get canPlayTriggerList():__AS3__.vec.Vector.<Boolean>
        {
            return this._canPlayTriggerList;
        }

        public function get visibleTriggerList():__AS3__.vec.Vector.<int>
        {
            return this._visibleTriggerList;
        }

        public function get spinStopAnticipationOverride():__AS3__.vec.Vector.<Boolean>
        {
            return this._spinStopAnticipationOverride;
        }

        internal function onConfig_winCombination(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=arg1.data;
            var loc4:*=0;
            var loc5:*=loc1.WinCombination;
            for each (loc2 in loc5) 
            {
                loc3 = new mgs.aurora.games.common.dataTypes.WinComboData(int(loc2.@id), loc2.@direction.toString(), int(loc2.@numSymbolsRequired), int(loc2.@symbol), loc2.@trigger.toString() == "true", loc2.@anticipate.toString() == "true");
                this._winComboMap[loc3.id] = loc3;
            }
            return;
        }

        public function get canPlayLandList():__AS3__.vec.Vector.<Boolean>
        {
            return this._canPlayLandList;
        }

        public function isTrigger(arg1:int):mgs.aurora.slots.components.triggercontroller.Trigger
        {
            var loc1:*=this._visAreaPkt.symbolsArray[arg1];
            var loc2:*=mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            return loc2.getTrigger(loc1);
        }

        public function getSymbolIdFromVisArea(arg1:int):int
        {
            return this._visAreaPkt.symbolsArray[arg1];
        }

        public function get wins():mgs.aurora.games.logicBlocks.data.types.WinsPacket
        {
            return this._winPkt;
        }

        public function get visAreaPacket():mgs.aurora.games.logicBlocks.data.types.VisAreaPacket
        {
            return this._visAreaPkt;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRegistered, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameEngineRegistered.SERVICE_REGISTERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.update, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.update, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_SET_ACTIVE_STEP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig_winCombination, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_WIN_COMBINATIONS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig_reelAnticipation, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_REEL_ANTICIPATION);
            return;
        }

        internal function onRegistered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._response = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ResponseData;
            this._reelData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.ReelsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.ReelsData;
            return;
        }

        public function get canPlayReelAnticipationAnimation():__AS3__.vec.Vector.<Boolean>
        {
            return this._canPlayReelAnticipationAnimation;
        }

        internal function onConfig_reelAnticipation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc1:*=arg1.data;
            var loc3:*=0;
            var loc4:*=loc1;
            for each (loc2 in loc4) 
            {
                this._numTriggersToActivateForReelAnticipation = int(loc2.@numTriggersToActivate);
                this._minTriggersBeforeCanShowReelAnticipation = int(loc2.@minAnticipateReel);
                break;
            }
            return;
        }

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const PUBLISHER_NAME:String="DATA_VISAREA";

        internal var _canAnticipate:Boolean=false;

        internal var _anticipateList:__AS3__.vec.Vector.<Boolean>;

        internal var _canPlayTriggerList:__AS3__.vec.Vector.<Boolean>;

        internal var _canPlayLandList:__AS3__.vec.Vector.<Boolean>;

        internal var _canPlayReelAnticipationAnimation:__AS3__.vec.Vector.<Boolean>;

        internal var _anticipateListPotential:__AS3__.vec.Vector.<Boolean>;

        internal var _symbolAccumulativeCounter:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;

        internal var _symbolList:__AS3__.vec.Vector.<Array>;

        internal var _symbolCounter:Array;

        internal var _twoOfKind:Boolean=false;

        internal var _threeOfKind:Boolean=false;

        internal var _fourOfKind:Boolean=false;

        internal var _fiveOfKind:Boolean=false;

        internal var _triggerIdList:__AS3__.vec.Vector.<int>;

        internal var _triggerCounterList:__AS3__.vec.Vector.<int>;

        internal var _visAreaPkt:mgs.aurora.games.logicBlocks.data.types.VisAreaPacket;

        internal var _totalNumberOfTriggers:int;

        internal var _triggerActivated:Boolean=false;

        internal var _winComboMap:flash.utils.Dictionary;

        internal var _response:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _reelData:mgs.aurora.games.logicBlocks.data.ReelsData;

        internal var _winningSymbolList:Array;

        internal var _winningAnimationList:__AS3__.vec.Vector.<int>;

        internal var _visibleTriggerList:__AS3__.vec.Vector.<int>;

        internal var _anticipateMinimumFlag:Boolean=false;

        internal var _spinStopAnticipationOverride:__AS3__.vec.Vector.<Boolean>;

        internal var _minTriggersBeforeCanShowReelAnticipation:int=-1;

        internal var _numTriggersToActivateForReelAnticipation:int=-1;

        internal var _reelHasTrigger:__AS3__.vec.Vector.<Boolean>;

        internal var _winningTriggerList:__AS3__.vec.Vector.<int>;

        internal var _winPkt:mgs.aurora.games.logicBlocks.data.types.WinsPacket;

        internal var _triggerCounter:Object;
    }
}


//          package hookAgents
//            class EventHookAgent
package mgs.aurora.games.logicBlocks.hookAgents 
{
    import mgs.aurora.games.componentTests.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class EventHookAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function EventHookAgent(arg1:String)
        {
            super(arg1);
            setClassDescription("mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent");
            this.defineSubscribers();
            return;
        }

        public function defineServices():void
        {
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showActiveStatus, mgs.aurora.games.componentTests.TheTestButton.PUBLISHER_NAME, mgs.aurora.games.componentTests.TheTestButton.SERVICE_SHOW_ACTIVE_HOOK_AGENTS);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            this._isConfig = true;
            return;
        }

        public final function ProcessHookEvent(arg1:String, arg2:Function):void
        {
            this._currentHookEvent = arg1;
            this._currentHookCallback = arg2;
            this._isProcessingHookEvent = true;
            this.DoProcessing();
            return;
        }

        protected function DoProcessing():void
        {
            return;
        }

        protected final function CompleteHookEvent():void
        {
            this._isProcessingHookEvent = false;
            this._currentHookCallback.apply(this._currentHookCallback, [this._currentHookEvent]);
            return;
        }

        internal function showActiveStatus(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._isProcessingHookEvent) 
            {
                _trace("HookAgent is Processing : " + toString(), "test", this, 4227200);
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._conductor;
        }

        public override function dispose():void
        {
            try 
            {
                this._currentHookCallback = null;
                this._conductor = null;
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_EventHookAgent";

        protected var _isConfig:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent=null;

        protected var _currentHookEvent:String;

        protected var _currentHookCallback:Function;

        protected var _isProcessingHookEvent:Boolean=false;
    }
}


//            class EventHookAgentManager
package mgs.aurora.games.logicBlocks.hookAgents 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    
    public class EventHookAgentManager extends mgs.aurora.games.base.BaseClass
    {
        public function EventHookAgentManager(arg1:Function)
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.hookAgents.EventHookAgentManager");
            this._hookedAgents = new Vector.<mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent>();
            this._callback = arg1;
            return;
        }

        public function AddHookAgent(arg1:mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent):void
        {
            this._hookedAgents.push(arg1);
            return;
        }

        protected function CleanupHookedAgents():void
        {
            while (this._hookedAgents.length > 0) 
            {
                this._hookedAgents.pop();
            }
            return;
        }

        public function TriggerHookEvent(arg1:String):void
        {
            if (this._processingHookEvent) 
            {
                _trace("Error in ProcessHookEvent. Should be impossible to call while previous ProcessHookEvent still running!" + toString(), "error", this, 16711680);
                return;
            }
            this._currentHookEvent = arg1;
            this._currentlyProcessingHookAgent = 0;
            this.ProcessNextHookAgent();
            return;
        }

        protected final function ProcessNextHookAgent():void
        {
            if (this._hookedAgents.length <= this._currentlyProcessingHookAgent) 
            {
                this.CompleteHookEvent();
                return;
            }
            this._hookedAgents[this._currentlyProcessingHookAgent].ProcessHookEvent(this._currentHookEvent, this.onHookAgentEventProcessComplete);
            return;
        }

        public final function onHookAgentEventProcessComplete(arg1:String):void
        {
            if (arg1 != this._currentHookEvent) 
            {
                _trace("Error in onHookAgentEventProcessComplete. Event returned[ " + arg1.toString() + " ] doesn\'t match current [ " + this._currentHookEvent.toString() + " ] !" + toString(), "error", this, 16711680);
                return;
            }
            var loc1:*;
            var loc2:*=((loc1 = this)._currentlyProcessingHookAgent + 1);
            loc1._currentlyProcessingHookAgent = loc2;
            this.ProcessNextHookAgent();
            return;
        }

        protected final function CompleteHookEvent(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._currentlyProcessingHookAgent = -1;
            this._callback.apply(this._callback, [this._currentHookEvent]);
            this._currentHookEvent = NO_HOOK_EVENT;
            return;
        }

        public override function dispose():void
        {
            try 
            {
                this.CleanupHookedAgents();
                this._callback = null;
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        internal static const NO_HOOK_EVENT:String="-";

        internal var _hookedAgents:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent>;

        internal var _processingHookEvent:Boolean;

        internal var _currentlyProcessingHookAgent:int=-1;

        protected var _currentHookEvent:String="-";

        protected var _callback:Function;
    }
}


//          package publishers
//            class BigWinServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.generic.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    
    public class BigWinServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function BigWinServer(arg1:String="PUBLISHER_BIG_WIN")
        {
            super(arg1);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.BigWinServer");
            this._gamedisp = new flash.events.EventDispatcher();
            return;
        }

        protected function cleanup():void
        {
            if (this._bigWinBox != null) 
            {
                caurina.transitions.Tweener.removeTweens(this._bigWinBox);
                if (this._bigWinBox.parent != null) 
                {
                    this._bigWinBox.parent.removeChild(this._bigWinBox);
                }
            }
            this.completeBigWinCommand();
            return;
        }

        protected function getThreshold(arg1:uint):uint
        {
            var loc2:*=null;
            var loc1:*=new XML();
            var loc3:*=0;
            var loc4:*=this._thresholds.threshold;
            for each (loc2 in loc4) 
            {
                if (String(arg1) != String(loc2.@coins)) 
                {
                    continue;
                }
                loc1 = loc2;
                break;
            }
            return uint(loc1.@threshold);
        }

        public function get playCountupSound():Boolean
        {
            return this._playCountupSound;
        }

        public function get canShow():Boolean
        {
            var loc1:*=false;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                {
                    loc1 = false;
                    break;
                }
                default:
                {
                    loc1 = true;
                    break;
                }
            }
            return this._bigWinTriggered && loc1;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._gotConfigXML && this._viewReady;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                caurina.transitions.Tweener.removeTweens(this._bigWinBox);
                this._countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
                this._config = null;
                this._gamedisp = null;
                this._countup = null;
                this._thresholds = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function get canDo():Boolean
        {
            var loc1:*=false;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    loc1 = true;
                    break;
                }
                default:
                {
                    loc1 = false;
                    break;
                }
            }
            return loc1;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onKill, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onKill, mgs.aurora.games.logicBlocks.agents.AchievementNotification.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AchievementNotification.SERVICE_NOTIFICATION_CLICKED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytableOpen, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytableClose, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigLoaded, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_BIGWIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGameSummary, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onKill, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onKill, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewChange, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsStepWins, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChange, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChange, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChange, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChange, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChange, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.SERVICE_UPDATE_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChange, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BET_CHANGED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoPlay, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_AUTOPLAY);
            return;
        }

        protected function onPaytableClose(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._isPaytableOpen = false;
            if (this.isReady && this.canShow) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("BigWin").visible = true;
            }
            return;
        }

        protected function onKill(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("BigWin").visible = false;
            }
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfigLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._config = new XML(arg1.data);
            this._gotConfigXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewChange(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.setBigWin();
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
                this.setBigWin();
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._conductor.countup.event.addEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            var loc1:*=XMLList(this._config.bigwin);
            var loc2:*=loc1.length();
            this._bigWinData = new Vector.<mgs.aurora.games.common.dataTypes.TransBigWinData>(loc2, true);
            var loc3:*=0;
            while (loc3 < loc2) 
            {
                this._bigWinData[loc3] = new mgs.aurora.games.common.dataTypes.TransBigWinData(loc1[loc3].@id, loc1[loc3].@views, new flash.geom.Point(loc1[loc3].@x, loc1[loc3].@y), Number(loc1[loc3].@stopx), Number(loc1[loc3].@stopy), uint(loc1[loc3].@width), uint(loc1[loc3].@height), int(loc1[loc3].@increment), Boolean(loc1[loc3].@fadeInOut == "true"), Number(loc1[loc3].@fadeInOutRate), Number(loc1[loc3].@timer), new flash.geom.Point(loc1[loc3].@numCounterX, loc1[loc3].@numCounterY), uint(loc1[loc3].@numCounterWidth), uint(loc1[loc3].@numCounterHeight), uint(loc1[loc3].@counterCompletedDelay), Boolean(loc1[loc3].@useMultiplier == "true"), Number(loc1[loc3].@multiplier), Number(loc1[loc3].@totalValueWidth), Boolean(loc1[loc3].@autoRemove == "true"), loc1[loc3].@bigWinResourceLinkage, loc1[loc3].@bigWinBoxMCLinkage, loc1[loc3].@customFontLabelLinkage, XMLList(loc1[loc3].thresholds), loc1[loc3].@assetId.toString(), loc1[loc3].coinRush[0], Boolean(loc1[loc3].@playCountupSound == "true"));
                ++loc3;
            }
            this.setBigWin();
            this._config = null;
            return;
        }

        protected function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc2:*=NaN;
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data);
            if (!(loc1.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) && !(loc1.id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES)) 
            {
                if (this._conductor.visArea.wins.numberOf > 0 && this._curBigWinData) 
                {
                    if (this._useMultiplier) 
                    {
                        if (this.totalWinMeetsThreshold()) 
                        {
                            syndicate(this, SERVICE_PRE_BIGWIN, new mgs.aurora.games.framework.TransportLayer(this._curBigWinData));
                        }
                    }
                    else if (this._thresholds != null) 
                    {
                        loc2 = this._conductor.visArea.wins.wins[0].numCoinsWon;
                        loc3 = loc1.bet.numChips;
                        loc4 = this.getThreshold(loc3);
                        if (loc2 >= loc4) 
                        {
                            syndicate(this, SERVICE_PRE_BIGWIN, new mgs.aurora.games.framework.TransportLayer(this._curBigWinData));
                        }
                    }
                }
            }
            return;
        }

        protected function setBigWin():void
        {
            var bigWinData:mgs.aurora.games.common.dataTypes.TransBigWinData;
            var noneActiveInCurrentView:Boolean;
            var i:int;
            var len:int;
            var mov:flash.display.MovieClip;

            var loc1:*;
            bigWinData = null;
            noneActiveInCurrentView = false;
            i = 0;
            len = 0;
            mov = null;
            if (this.isReady) 
            {
                noneActiveInCurrentView = true;
                i = 0;
                len = this._bigWinData.length;
                while (i < len) 
                {
                    if (this._bigWinData[i].activeInView(this._conductor.view.view)) 
                    {
                        noneActiveInCurrentView = false;
                        if (!this._curBigWinData || !(this._bigWinData[i] == this._curBigWinData)) 
                        {
                            bigWinData = this._bigWinData[i];
                            break;
                        }
                        else 
                        {
                            return;
                        }
                    }
                    ++i;
                }
                if (this._bigWinBox) 
                {
                    if (this._bigWinBox.parent) 
                    {
                        this._bigWinBox.parent.removeChild(this._bigWinBox);
                    }
                    this._bigWinBox = null;
                }
                if (noneActiveInCurrentView) 
                {
                    this._curBigWinData = null;
                    return;
                }
                this._startPos = bigWinData.startPos;
                this._stopX = bigWinData.stopX;
                this._stopY = bigWinData.stopY;
                this._width = bigWinData.width;
                this._height = bigWinData.height;
                this._increment = bigWinData.increment;
                this._fadeInOut = bigWinData.fadeInOut;
                this._fadeInOutRate = bigWinData.fadeInOutRate;
                this._numCounterPoint = bigWinData.numCounterPoint;
                this._timer = bigWinData.timer;
                this._assetId = bigWinData.assetId;
                this._numCounterWidth = bigWinData.numCounterWidth;
                this._numCounterHeight = bigWinData.numCounterHeight;
                this._counterCompletedDelay = bigWinData.counterCompletedDelay;
                this._bigWinResourceLinkage = bigWinData.bigWinResourceLinkage;
                this._bigWinBoxMCLinkage = bigWinData.bigWinBoxMCLinkage;
                this._customFontLabelLinkage = bigWinData.customFontLabelLinkage;
                this._useMultiplier = bigWinData.useMultiplier;
                this._multiplier = bigWinData.multiplier;
                this._totalValueWidth = bigWinData.totalValueWidth;
                this._autoRemove = bigWinData.autoRemove;
                this._thresholds = bigWinData.thresholds;
                this._coinrushEnabled = bigWinData.coinRushEnabled;
                this._coinRushExcludedWinCombinations = bigWinData.coinRushExcludedWinCombinations;
                this._bigWinBox = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(bigWinData.assetId);
                this._playCountupSound = bigWinData.playCountupSound;
                this._curBigWinData = bigWinData;
                this._customFontLbl = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._customFontLabelLinkage);
                flash.display.DisplayObjectContainer(this._customFontLbl.displayObject).mouseEnabled = false;
                flash.display.DisplayObjectContainer(this._customFontLbl.displayObject).mouseChildren = false;
                try 
                {
                    mov = this._bigWinBox.getChildByName(this._bigWinBoxMCLinkage) as flash.display.MovieClip;
                    mov.mouseEnabled = true;
                    mov.mouseChildren = true;
                    this._customFontLbl.addTo(mov);
                }
                catch (e:Error)
                {
                    _trace("Error can\'t find :[" + _bigWinBoxMCLinkage + "]. Check your art setup.- " + toString(), "error", this, 16711680);
                }
            }
            return;
        }

        protected function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this._bigWinTriggered) 
            {
                this._customFontLbl.text = this._winValue.toString();
                flash.display.DisplayObjectContainer(this._customFontLbl.displayObject).mouseChildren = false;
            }
            return;
        }

        protected function onPaytableOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isPaytableOpen = true;
            return;
        }

        protected function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=false;
            var loc2:*=null;
            this._startFade = false;
            this._bigWinTriggered = this.totalWinMeetsThreshold();
            this._chipSize = this._conductor.betData.chipSize;
            this._winValue = this._conductor.response.slot.win;
            if (this.isReady && this.canShow && this._curBigWinData) 
            {
                if (this._bigWinBox.parent == null) 
                {
                    if (!this._isPaytableOpen) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel("BigWin").visible = true;
                    }
                    mgs.aurora.games.framework.StageReference.getLevel("BigWin").addChild(this._bigWinBox);
                    mgs.aurora.games.framework.StageReference.getLevel("BigWin").mouseEnabled = false;
                    mgs.aurora.games.framework.StageReference.getLevel("BigWin").mouseChildren = false;
                }
                this._bigWinBox.x = this._startPos.x;
                this._bigWinBox.y = this._startPos.y;
                if (this._conductor.options.isQuickSpin && this._conductor.autoplay.autoPlayActive || this._conductor.options.isQuickSpin && this._conductor.autoplay.autoPlayJustCompleted) 
                {
                    if (this._winValue.toString() != "NaN") 
                    {
                        this._customFontLbl.text = this._winValue.toString();
                    }
                    flash.display.DisplayObjectContainer(this._customFontLbl.displayObject).mouseChildren = false;
                }
                if (this._fadeInOut) 
                {
                    this._bigWinBox.alpha = 0;
                    caurina.transitions.Tweener.addTween(this._bigWinBox, {"alpha":1, "time":this._timer, "transition":"linear"});
                }
                else 
                {
                    this._bigWinBox.alpha = 1;
                }
                caurina.transitions.Tweener.addTween(this._bigWinBox, {"x":this._stopX, "time":this._timer, "transition":"linear", "onComplete":this.shown});
                caurina.transitions.Tweener.addTween(this._bigWinBox, {"y":this._stopY, "time":this._timer, "transition":"linear"});
                syndicate(this, SERVICE_BIGWIN);
                if (this._coinrushEnabled && !this._isPaytableOpen) 
                {
                    loc1 = true;
                    if (this._coinRushExcludedWinCombinations) 
                    {
                        loc2 = this._conductor.visArea.wins.wins;
                        if (this._coinRushExcludedWinCombinations[loc2[0].id]) 
                        {
                            loc1 = false;
                        }
                    }
                    if (this._conductor.options.isQuickSpin && (this._conductor.autoplay.autoPlayActive || this._conductor.autoplay.autoPlayJustCompleted)) 
                    {
                        loc1 = false;
                    }
                    if (loc1) 
                    {
                        syndicate(this, SERVICE_COIN_RUSH);
                    }
                }
            }
            return;
        }

        protected function onRollingReelsStepWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=NaN;
            var loc2:*=0;
            var loc3:*=0;
            if (this._bigWinTriggered) 
            {
                return;
            }
            if (this._conductor.visArea.wins.numberOf > 0 && this._curBigWinData) 
            {
                if (this._useMultiplier) 
                {
                    if (this.totalWinMeetsThreshold()) 
                    {
                        syndicate(this, SERVICE_PRE_BIGWIN, new mgs.aurora.games.framework.TransportLayer(this._curBigWinData));
                        this.onAllReelsStopped();
                    }
                }
                else if (this._thresholds != null) 
                {
                    loc1 = this._conductor.visArea.wins.wins[0].numCoinsWon;
                    loc2 = this._conductor.response.bet.numChips;
                    loc3 = this.getThreshold(loc2);
                }
                if (loc1 >= loc3) 
                {
                    syndicate(this, SERVICE_PRE_BIGWIN, new mgs.aurora.games.framework.TransportLayer(this._curBigWinData));
                    this.onAllReelsStopped();
                }
            }
            return;
        }

        protected function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this._bigWinTriggered) 
            {
                this._bigWinTriggered = false;
                if (!this._startFade) 
                {
                    if (this._bigWinBox.parent != null) 
                    {
                        this.removeBigWin();
                        syndicate(this, SERVICE_CLOSE_BIGWIN);
                    }
                }
            }
            return;
        }

        protected function completeBigWinCommand():void
        {
            syndicate(this, SERVICE_COMPLETE);
            return;
        }

        protected function counter(arg1:mgs.aurora.games.common.components.generic.events.CounterEvent):void
        {
            var loc1:*=NaN;
            if (this.isReady && this.canDo && arg1.value > 0 && this.canShow) 
            {
                loc1 = Number(arg1.value) * this._conductor.betData.chipSize;
                if (!this._conductor.options.isQuickSpin || !(this._conductor.autoplay.autoPlayActive || this._conductor.autoplay.autoPlayJustCompleted)) 
                {
                    this._customFontLbl.text = loc1.toString();
                    flash.display.DisplayObjectContainer(this._customFontLbl.displayObject).mouseChildren = false;
                }
            }
            return;
        }

        public function totalWinMeetsThreshold():Boolean
        {
            var loc1:*=NaN;
            var loc2:*=NaN;
            var loc3:*=NaN;
            var loc4:*=0;
            var loc5:*=0;
            if (this._conductor.visArea.wins.numberOf > 0) 
            {
                if (this._useMultiplier) 
                {
                    loc1 = this._conductor.betData.chipSize;
                    loc2 = this._conductor.betData.numChips;
                    if (this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
                    {
                        loc1 = this._conductor.response.bet.chipSize;
                        loc2 = this._conductor.response.bet.numChips;
                    }
                    if (this._conductor.winsThisSpin / loc1 >= loc2 * this._multiplier) 
                    {
                        return true;
                    }
                }
                else if (this._thresholds != null) 
                {
                    loc3 = this._conductor.visArea.wins.wins[0].numCoinsWon;
                    loc4 = this._conductor.response.bet.numChips;
                    loc5 = this.getThreshold(loc4);
                    if (loc3 >= loc5) 
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        protected function shown():void
        {
            return;
        }

        protected function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.canShow) 
            {
                if (this._autoRemove) 
                {
                    new org.as3lib.kitchensync.action.KSFunction(this.onPostCounterCompleteDelay, this._counterCompletedDelay).start();
                }
            }
            return;
        }

        protected function onGambleOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("BigWin").visible = false;
            }
            return;
        }

        protected function onBetChange(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this._bigWinTriggered) 
            {
                this._bigWinTriggered = false;
                if (!this._startFade) 
                {
                    if (this._bigWinBox.parent != null) 
                    {
                        this._customFontLbl.text = this._winValue.toString();
                        this.removeBigWin();
                        syndicate(this, SERVICE_CLOSE_BIGWIN);
                    }
                }
            }
            return;
        }

        protected function onAutoPlay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this._bigWinTriggered) 
            {
                this._bigWinTriggered = false;
                if (!this._startFade) 
                {
                    if (this._bigWinBox.parent != null) 
                    {
                        this._customFontLbl.text = this._winValue.toString();
                        this.removeBigWin();
                        syndicate(this, SERVICE_CLOSE_BIGWIN);
                    }
                }
            }
            return;
        }

        protected function onFreeGameSummary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this._bigWinTriggered) 
            {
                this._bigWinTriggered = false;
                if (!this._startFade) 
                {
                    if (this._bigWinBox.parent != null) 
                    {
                        this._customFontLbl.text = this._winValue.toString();
                        this.removeBigWin();
                        syndicate(this, SERVICE_CLOSE_BIGWIN);
                    }
                }
            }
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BIGWIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COIN_RUSH));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLOSE_BIGWIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PRE_BIGWIN));
            this.defineSubscribers();
            return;
        }

        protected function onPostCounterCompleteDelay():void
        {
            if (this.isReady) 
            {
                if (this._autoRemove && !this._startFade) 
                {
                    this.removeBigWin();
                    this._customFontLbl.text = this._winValue.toString();
                    flash.display.DisplayObjectContainer(this._customFontLbl.displayObject).mouseChildren = false;
                    syndicate(this, SERVICE_CLOSE_BIGWIN);
                }
            }
            return;
        }

        protected function removeBigWin():void
        {
            this._startFade = true;
            new org.as3lib.kitchensync.action.KSFunction(this.tweenOut, 300).start();
            return;
        }

        protected function tweenOut():void
        {
            caurina.transitions.Tweener.addTween(this._bigWinBox, {"x":this._startPos.x, "time":this._timer, "transition":"linear", "onComplete":this.cleanup});
            caurina.transitions.Tweener.addTween(this._bigWinBox, {"y":this._startPos.y, "time":this._timer, "transition":"linear"});
            if (this._fadeInOut) 
            {
                this._bigWinBox.alpha = 1;
                caurina.transitions.Tweener.addTween(this._bigWinBox, {"alpha":0, "time":this._timer, "transition":"linear"});
            }
            return;
        }

        public static const GAME_EVENT_BIGWIN_COUNTER_COMPLETE:String="BigWinCounterComplete";

        public static const SERVICE_COMPLETE:String="COMPLETE";

        public static const PUBLISHER_NAME:String="PUBLISHER_BIG_WIN";

        public static const SERVICE_BIGWIN:String="BIGWIN";

        public static const SERVICE_COIN_RUSH:String="COIN_RUSH";

        public static const SERVICE_CLOSE_BIGWIN:String="CLOSE_BIGWIN";

        public static const SERVICE_PRE_BIGWIN:String="PRE_BIGWIN";

        public static const GAME_EVENT_BIGWIN_COUNTER_UPDATE:String="BigWinCounterUpdate";

        internal var _thresholds:XMLList;

        internal var _creditsMode:Boolean=false;

        internal var _startPos:flash.geom.Point;

        internal var _stopX:Number;

        internal var _stopY:Number;

        internal var _width:uint;

        internal var _height:uint;

        internal var _increment:int;

        internal var _fadeInOut:Boolean;

        internal var _fadeInOutRate:Number;

        internal var _numCounterPoint:flash.geom.Point;

        internal var _numCounterWidth:uint;

        internal var _numCounterHeight:uint;

        internal var _counterCompletedDelay:uint;

        internal var _useMultiplier:Boolean;

        internal var _multiplier:Number;

        internal var _totalValueWidth:Number;

        internal var _gamedisp:flash.events.EventDispatcher;

        internal var _bigWinResourceLinkage:String;

        internal var _bigWinBoxMCLinkage:String;

        internal var _customFontLabelLinkage:String;

        internal var _customFontLbl:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _bigWinBox:flash.display.MovieClip;

        internal var _startFade:Boolean=false;

        internal var _bigWinTriggered:Boolean=false;

        internal var _winValue:Number=0;

        internal var _bigWinData:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.TransBigWinData>;

        protected var _curBigWinData:mgs.aurora.games.common.dataTypes.TransBigWinData;

        internal var _assetId:String;

        internal var _coinrushEnabled:Boolean;

        internal var _isConfig:Boolean=false;

        internal var _coinRushExcludedWinCombinations:flash.utils.Dictionary;

        internal var _isPaytableOpen:Boolean=false;

        internal var _chipSize:Number=1;

        internal var _timer:Number;

        internal var _hasConductor:Boolean=false;

        internal var _autoRemove:Boolean;

        internal var _viewReady:Boolean=false;

        internal var _gotConfigXML:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _config:XML;

        internal var _countup:mgs.aurora.games.logicBlocks.agents.CountUpAgent;

        internal var _playCountupSound:Boolean=false;
    }
}


//            class BonusServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import flash.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.gamble.gamble.*;
    import mgs.aurora.slots.components.symbol.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class BonusServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function BonusServer()
        {
            this._validBonusIDs = [];
            this._triggerSymbolIds = [];
            super(mgs.aurora.games.logicBlocks.publishers.BonusServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.BonusServer");
            return;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasView && this._onConfig;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canDo():Boolean
        {
            return !(this._currentbonusState == BONUS_STATE_INACTIVE);
        }

        public function get canShow():Boolean
        {
            return !(this._currentbonusState == BONUS_STATE_INACTIVE);
        }

        protected function syndicatePickCountup(arg1:int, arg2:int):void
        {
            syndicate(this, SERVICE_DO_PICK_COUNTUP, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.logicBlocks.data.BonusPickCountupData(arg1, arg2)));
            return;
        }

        protected function doSoundAction(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):void
        {
            syndicate(this, SERVICE_SND_ACTION, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        public function syndicatePick(arg1:int, arg2:int):void
        {
            syndicate(this, SERVICE_PICK, new mgs.aurora.games.framework.TransportLayer(arg2));
            return;
        }

        public function syndicateComplete(arg1:int):void
        {
            syndicate(this, SERVICE_COMPLETE, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onBonusComplete():void
        {
            this.syndicateComplete(this._activeBonusId);
            var loc1:*;
            this._currentbonusState = loc1 = BONUS_STATE_INACTIVE;
            loc1;
            this._activeBonusId = loc1 = -1;
            loc1;
            return;
        }

        public function syndicateOpen(arg1:int):void
        {
            syndicate(this, SERVICE_OPEN, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onTransitionComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isWaitingForTransitionToReturn) 
            {
                var loc1:*;
                this.isWaitingForTransitionToReturn = loc1 = false;
                loc1;
            }
            return;
        }

        public function syndicateTransitionStartPoint(arg1:String):void
        {
            var loc1:*;
            this.isWaitingForTransitionToReturn = loc1 = true;
            loc1;
            syndicate(this, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function get lastPlayerMadePickIndex():int
        {
            var loc1:*=this.bonusData.bonusPicks.numberOf;
            while (loc1 > 0) 
            {
                if (this.bonusData.bonusPicks.picks[(loc1 - 1)].pickedBy == 1) 
                {
                    return (loc1 - 1);
                }
                --loc1;
            }
            return -1;
        }

        protected function get bonusData():mgs.aurora.games.logicBlocks.data.types.BonusPacket
        {
            var loc1:*=0;
            if (this._activeBonusId != -1) 
            {
                loc1 = 0;
                while (loc1 < this._conductor.response.bonusGames.numberOf) 
                {
                    if (this._conductor.response.bonusGames.bonusGames[loc1].id == this._activeBonusId) 
                    {
                        return this._conductor.response.bonusGames.bonusGames[loc1];
                    }
                    ++loc1;
                }
            }
            return null;
        }

        protected function makeUniqueBonusString(arg1:String):String
        {
            return arg1 + "_bonus" + this._activeBonusId;
        }

        protected function isBonusActiveForID(arg1:int):Boolean
        {
            var loc1:*=0;
            if (arg1 == -1) 
            {
                return false;
            }
            while (loc1 < this._validBonusIDs.length) 
            {
                if (this._validBonusIDs[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        protected function onBonusPickResponse(arg1:int):void
        {
            return;
        }

        protected function onBonusRefresh():void
        {
            this.syndicateOpen(this._activeBonusId);
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PICK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DO_PICK_COUNTUP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ANIMATION_STARTED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ANIMATION_COMPLETED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SND_ACTION));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_BONUS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnimsComplete, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.SERVICE_TRIGGER_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPreloaderShow, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_SHOW_LOADER);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
                if (this._isConfig) 
                {
                    this.onResponse();
                }
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
                if (this._preloaderWasUp && this.isBonusActiveForID(this._conductor.response.bonusGames.currentBonusID)) 
                {
                    this._canTriggerBonus = true;
                }
                this._preloaderWasUp = false;
                if (this._isConfig) 
                {
                    this.onResponse();
                }
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._config = new XML(arg1.data);
            this._xmlData = arg1.data as XMLList;
            this._onConfig = true;
            if (this.canConfig) 
            {
                this.setup();
                if (this._isConfig) 
                {
                    this.onResponse();
                }
            }
            return;
        }

        protected function setup():void
        {
            var node:XML;
            var list:XMLList;
            var assocBoni:Array;
            var transition_id:String;
            var i:int;
            var len:int;
            var bonusComponent:String;

            var loc1:*;
            node = null;
            list = null;
            assocBoni = null;
            transition_id = null;
            i = 0;
            len = 0;
            bonusComponent = null;
            if (this._isConfig) 
            {
                return;
            }
            var loc2:*=0;
            var loc3:*=this._xmlData.bonusId_To_Component_Map;
            for each (node in loc3) 
            {
                bonusComponent = node.@component.toString();
                if (bonusComponent != name) 
                {
                    continue;
                }
                this._validBonusIDs = node.@id.toString().split(",");
                break;
            }
            list = this._xmlData.transitions.entry.transition;
            if (list && list.length() > 0) 
            {
                this._entryTransitions = new flash.utils.Dictionary();
                loc2 = 0;
                loc3 = list;
                for each (node in loc3) 
                {
                    var loc5:*=0;
                    var loc6:*=node.setting;
                    var loc4:*=new XMLList("");
                    for each (var loc7:* in loc6) 
                    {
                        var loc8:*;
                        with (loc8 = loc7) 
                        {
                            if (@id == "transitionId") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    transition_id = loc4.@val.toString();
                    loc5 = 0;
                    loc6 = node.setting;
                    loc4 = new XMLList("");
                    for each (loc7 in loc6) 
                    {
                        with (loc8 = loc7) 
                        {
                            if (@id == "associatedBonusIds") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    assocBoni = loc4.@val.toString().split(",");
                    i = 0;
                    len = assocBoni.length;
                    while (i < len) 
                    {
                        this._entryTransitions[assocBoni[i]] = transition_id;
                        ++i;
                    }
                }
            }
            list = this._xmlData.transitions.exit.transition;
            if (list && list.length() > 0) 
            {
                this._exitTransitions = new flash.utils.Dictionary();
                loc2 = 0;
                loc3 = list;
                for each (node in loc3) 
                {
                    loc5 = 0;
                    loc6 = node.setting;
                    loc4 = new XMLList("");
                    for each (loc7 in loc6) 
                    {
                        with (loc8 = loc7) 
                        {
                            if (@id == "transitionId") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    transition_id = loc4.@val.toString();
                    loc5 = 0;
                    loc6 = node.setting;
                    loc4 = new XMLList("");
                    for each (loc7 in loc6) 
                    {
                        with (loc8 = loc7) 
                        {
                            if (@id == "associatedBonusIds") 
                            {
                                loc4[loc5] = loc7;
                            }
                        }
                    }
                    assocBoni = loc4.@val.toString().split(",");
                    i = 0;
                    len = assocBoni.length;
                    while (i < len) 
                    {
                        this._exitTransitions[assocBoni[i]] = transition_id;
                        ++i;
                    }
                }
            }
            this._isConfig = true;
            return;
        }

        protected function setupBonusSpecificData():void
        {
            var str:String;

            var loc1:*;
            str = this.makeUniqueBonusString("layer");
            var loc3:*=0;
            var loc4:*=this._xmlData.settings.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._bonusLayer = loc2.@val.toString();
            str = this.makeUniqueBonusString("endDelay");
            loc3 = 0;
            loc4 = this._xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._endDelay = loc2.@val.toString();
            str = this.makeUniqueBonusString("triggerSymbolIds");
            loc3 = 0;
            loc4 = this._xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._triggerSymbolIds = loc2.@val.toString().split(",");
            return;
        }

        protected function isValidTriggerSymbolId(arg1:int):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._triggerSymbolIds.length) 
            {
                if (this._triggerSymbolIds[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        protected function updateBonusState():void
        {
            var loc1:*=this._conductor.response.bonusGames.currentBonusID;
            var loc2:*=this._conductor.response.bonusGames.lastBonusPlayedID;
            var loc3:*=this._currentbonusState;
            switch (loc3) 
            {
                case BONUS_STATE_INACTIVE:
                {
                    if (loc1 == -1 && loc2 == -1) 
                    {
                        return;
                    }
                    if (this._conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        if (this.isBonusActiveForID(loc1)) 
                        {
                            this._activeBonusId = loc1;
                            this._currentbonusState = BONUS_STATE_STARTING;
                            this.setupBonusSpecificData();
                        }
                        else if (this.isBonusActiveForID(loc2)) 
                        {
                            if (this._conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.GAMBLE) 
                            {
                                _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_INACTIVE)!", "error", this, 16711680);
                                _trace("Somehow we went from inactive to being complete, should be impossible unless refreshing, and we\'re not refreshing", "error", this, 16711680);
                            }
                        }
                    }
                    else if (this.isBonusActiveForID(loc1)) 
                    {
                        this._activeBonusId = loc1;
                        this._currentbonusState = BONUS_STATE_REFRESH;
                        this.setupBonusSpecificData();
                    }
                    else if (this.isBonusActiveForID(loc2)) 
                    {
                        this._activeBonusId = loc2;
                        this._currentbonusState = BONUS_STATE_REFRESH_COMPLETE;
                        this.setupBonusSpecificData();
                    }
                    break;
                }
                case BONUS_STATE_STARTING:
                {
                    _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_STARTING)!", "error", this, 16711680);
                    break;
                }
                case BONUS_STATE_WAITING_FOR_PICK:
                {
                    _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_WAITING_FOR_PICK)!", "error", this, 16711680);
                    break;
                }
                case BONUS_STATE_DISPLAYING_PICK:
                {
                    _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_DISPLAYING_PICK)!", "error", this, 16711680);
                    break;
                }
                case BONUS_STATE_DISPLAYING_PICK_COMPLETE:
                {
                    _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_DISPLAYING_PICK_COMPLETE)!", "error", this, 16711680);
                    break;
                }
                case BONUS_STATE_WAITING_FOR_PICK_RESPONSE:
                {
                    if (this._activeBonusId != loc1) 
                    {
                        this._currentbonusState = BONUS_STATE_DISPLAYING_PICK_COMPLETE;
                    }
                    else 
                    {
                        this._currentbonusState = BONUS_STATE_DISPLAYING_PICK;
                    }
                    break;
                }
                case BONUS_STATE_REFRESH:
                {
                    _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_REFRESH)!", "error", this, 16711680);
                    break;
                }
                case BONUS_STATE_REFRESH_COMPLETE:
                {
                    _trace("BonusServer : Update Bonus State got into a state it shouldn\'t have (updating from BONUS_STATE_REFRESH_COMPLETE)!", "error", this, 16711680);
                    break;
                }
            }
            return;
        }

        protected function processBonusState():void
        {
            var loc1:*=this._currentbonusState;
            switch (loc1) 
            {
                case BONUS_STATE_INACTIVE:
                {
                    return;
                }
                case BONUS_STATE_STARTING:
                {
                    if (this._canTriggerBonus) 
                    {
                        this.onBonusStart();
                        this._currentbonusState = BONUS_STATE_WAITING_FOR_PICK;
                        this._canTriggerBonus = false;
                    }
                    break;
                }
                case BONUS_STATE_WAITING_FOR_PICK:
                {
                    break;
                }
                case BONUS_STATE_DISPLAYING_PICK:
                case BONUS_STATE_DISPLAYING_PICK_COMPLETE:
                {
                    this.onBonusPickResponse(this.lastPlayerMadePickIndex);
                    break;
                }
                case BONUS_STATE_WAITING_FOR_PICK_RESPONSE:
                {
                    break;
                }
                case BONUS_STATE_REFRESH:
                {
                    this.onBonusRefresh();
                    this._currentbonusState = loc1 = BONUS_STATE_WAITING_FOR_PICK;
                    loc1;
                    break;
                }
                case BONUS_STATE_REFRESH_COMPLETE:
                {
                    if (!(this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_COMPLETE && this._conductor.response.gamble.state == mgs.aurora.slots.components.gamble.gamble.GambleModel.GAMBLE_STATE_GAMBLELOST)) 
                    {
                        this.onBonusRefresh();
                    }
                    this._currentbonusState = loc1 = BONUS_STATE_INACTIVE;
                    loc1;
                    break;
                }
            }
            return;
        }

        protected function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            this.updateBonusState();
            if (!this.canDo) 
            {
                return;
            }
            this.processBonusState();
            return;
        }

        protected function onBonusPickResponseComplete():void
        {
            var loc1:*=null;
            if (this._currentbonusState != BONUS_STATE_DISPLAYING_PICK) 
            {
                if (this._currentbonusState == BONUS_STATE_DISPLAYING_PICK_COMPLETE) 
                {
                    if (this._endDelay > 0) 
                    {
                        loc1 = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                        loc1.autoDelete = loc2 = true;
                        loc2;
                        loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(this.onBonusComplete, this._endDelay));
                        loc1.start();
                    }
                    else 
                    {
                        this.onBonusComplete();
                    }
                }
            }
            else 
            {
                var loc2:*;
                this._currentbonusState = loc2 = BONUS_STATE_WAITING_FOR_PICK;
                loc2;
            }
            return;
        }

        protected function onTriggerAnimsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=mgs.aurora.slots.components.symbol.SymbolState(arg1.data);
            if (!this.isValidTriggerSymbolId(loc1.owner.id)) 
            {
                return;
            }
            if (this._currentbonusState == BONUS_STATE_STARTING) 
            {
                var loc2:*;
                this._canTriggerBonus = loc2 = true;
                loc2;
                this.processBonusState();
            }
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            if (this._currentbonusState == BONUS_STATE_STARTING) 
            {
                var loc1:*;
                this._canTriggerBonus = loc1 = true;
                loc1;
                this.processBonusState();
            }
            return;
        }

        protected function onPreloaderShow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._preloaderWasUp = loc1 = true;
            loc1;
            return;
        }

        protected function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            if (this._currentbonusState == BONUS_STATE_STARTING) 
            {
                var loc1:*;
                this._canTriggerBonus = loc1 = true;
                loc1;
                this.processBonusState();
            }
            return;
        }

        protected function sendItemPick(arg1:int):void
        {
            var loc1:*;
            this._currentbonusState = loc1 = BONUS_STATE_WAITING_FOR_PICK_RESPONSE;
            loc1;
            this.syndicatePick(this._activeBonusId, arg1);
            return;
        }

        protected function onBonusStart():void
        {
            this.syndicateOpen(this._activeBonusId);
            if (this._entryTransitions && this._entryTransitions[this._activeBonusId.toString()]) 
            {
                this.syndicateTransitionStartPoint(this._entryTransitions[this._activeBonusId.toString()]);
            }
            return;
        }

        protected function get hasEntryTransitions():Boolean
        {
            return !(this._entryTransitions == null);
        }

        protected function get hasExitTransitions():Boolean
        {
            return !(this._exitTransitions == null);
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const SERVICE_ANIMATION_COMPLETED:String="ANIMATION_COMPLETED";

        public static const PUBLISHER_NAME:String="PUBLISHER_BONUS";

        public static const SERVICE_OPEN:String="OPEN";

        public static const SERVICE_COMPLETE:String="COMPLETE";

        public static const SERVICE_PICK:String="PICK";

        public static const SERVICE_DO_PICK_COUNTUP:String="DO_PICK_COUNTUP";

        public static const SERVICE_ANIMATION_STARTED:String="ANIMATION_STARTED";

        public static const SERVICE_SND_ACTION:String="SND_ACTION";

        public static const BONUS_STATE_INACTIVE:int=0;

        public static const BONUS_STATE_STARTING:int=1;

        public static const BONUS_STATE_WAITING_FOR_PICK:int=2;

        public static const BONUS_STATE_DISPLAYING_PICK:int=3;

        public static const BONUS_STATE_DISPLAYING_PICK_COMPLETE:int=4;

        public static const BONUS_STATE_WAITING_FOR_PICK_RESPONSE:int=5;

        public static const BONUS_STATE_REFRESH:int=6;

        public static const BONUS_STATE_REFRESH_COMPLETE:int=7;

        internal var _exitTransitions:flash.utils.Dictionary;

        internal var _entryTransitions:flash.utils.Dictionary;

        protected var _triggerSymbolIds:Array;

        protected var _endDelay:int;

        protected var _bonusLayer:String=null;

        protected var _validBonusIDs:Array;

        protected var _xmlData:XMLList;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _preloaderWasUp:Boolean;

        protected var _canTriggerBonus:Boolean=false;

        protected var _currentbonusState:int=0;

        protected var _activeBonusId:int=-1;

        protected var _config:XML;

        protected var _onConfig:Boolean=false;

        protected var _hasView:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _isConfig:Boolean=false;

        protected var isWaitingForTransitionToReturn:Boolean;
    }
}


//            class ConsoleServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.common.components.generic.events.*;
    import mgs.aurora.games.common.components.loader.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.console.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    
    public class ConsoleServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ConsoleServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.ConsoleServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ConsoleServer");
            this._consoleEngine = new mgs.aurora.slots.components.console.ConsoleEngine();
            return;
        }

        internal function decLine():void
        {
            var loc1:*=(this._conductor.betData.numLines - 1);
            syndicate(this, SERVICE_DEC_LINE, new mgs.aurora.games.framework.TransportLayer((loc1 - 1)));
            return;
        }

        internal function incrementChipSize():void
        {
            this._consoleEngine.incChip();
            this._conductor.betData.chipSize = Number(this._consoleEngine.chipSize * 100);
            this.updateConsole();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function decrementChipSize():void
        {
            this._consoleEngine.decChip();
            this._conductor.betData.chipSize = Number(this._consoleEngine.chipSize * 100);
            this.updateConsole();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        protected function resetWinOnFreeGameSwitch():void
        {
            if (this._hasConductor) 
            {
                if (mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
                {
                    this.resetWinAmount();
                }
                else 
                {
                    var loc1:*=this._conductor.state.previousState;
                    switch (loc1) 
                    {
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                        {
                            if (this._conductor.response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
                            {
                                this._winAmount = this._conductor.response.player.totalWin;
                            }
                            else 
                            {
                                this._winAmount = this._conductor.response.bonusGames.totalBonusWin + this._conductor.response.slot.win;
                            }
                            break;
                        }
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                        {
                            this._winAmount = this._conductor.response.player.totalWin;
                            break;
                        }
                        default:
                        {
                            loc1 = this._conductor.state.state;
                            switch (loc1) 
                            {
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                                {
                                    this._winAmount = this._conductor.response.player.totalWin;
                                    break;
                                }
                                default:
                                {
                                    this._winAmount = this._conductor.response.slot.win;
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    this.setWinAmount(this._winAmount);
                }
            }
            return;
        }

        internal function resetWinAmount():void
        {
            if (this._countupBusy) 
            {
                this.onCountupComplete();
                new org.as3lib.kitchensync.action.KSFunction(this.resetWinAmount, 20).start();
            }
            else 
            {
                this._winAmount = 0;
                this.setWinAmount(this._winAmount);
            }
            return;
        }

        internal function checkBalance():Boolean
        {
            if (this._conductor.freeGamesData.isFreeGameActive || this._conductor.freeSpinsData.isFreespinsActive) 
            {
                return true;
            }
            if (mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance - this._conductor.betData.betValue < 0) 
            {
                syndicate(this, SERVICE_INSUFFICIENT, null);
                return false;
            }
            return true;
        }

        internal function checkEnoughInBalanceForMaxBet():Boolean
        {
            if (this._conductor.freeGamesData.isFreeGameActive || this._conductor.freeSpinsData.isFreespinsActive) 
            {
                return true;
            }
            if (mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance - this._conductor.betData.maximumBet < 0) 
            {
                syndicate(this, SERVICE_INSUFFICIENT, null);
                return false;
            }
            return true;
        }

        internal function refreshBetValues():void
        {
            if (this.isReady) 
            {
                this._consoleEngine.chipRange = this._conductor.betData.validChips;
                this._consoleEngine.chipSize = this._conductor.betData.chipSize / 100;
                this._consoleEngine.line = this._conductor.betData.numLines.toString();
                this._consoleEngine.coins = this._conductor.betData.numChips.toString();
                this.updateConsole();
            }
            return;
        }

        internal function postReelCheck():void
        {
            this._doNextSpin = true;
            if (this.isReady) 
            {
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                    {
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    {
                        this._doNextSpin = false;
                        if (this._conductor.response.wins.numberOf == 0) 
                        {
                            this.setWinAmount(this._winAmount);
                        }
                        this._consoleEngine.lockConsole = false;
                        this._consoleEngine.disableConsole();
                        this._consoleEngine.lockConsole = true;
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                    {
                        this._doNextSpin = false;
                        this._consoleEngine.lockConsole = false;
                        this.setWinAmount(this._winAmount);
                        this._balance = this._conductor.response.player.balance;
                        this.setBankBalance(this._balance);
                        this._consoleEngine.disableConsole();
                        this._consoleEngine.lockConsole = true;
                        break;
                    }
                    default:
                    {
                        this._consoleEngine.lockConsole = false;
                        if (this._conductor.freeGamesData.isFreeGameActive) 
                        {
                            if (this._conductor.freeGamesData.activeGame.gamesRemaining == 0) 
                            {
                                this._consoleEngine.disableConsole();
                                this._consoleEngine.lockConsole = true;
                                return;
                            }
                        }
                        if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE || this._conductor.response.wins.numberOf == 0) 
                        {
                            this._balance = this._conductor.response.player.balance;
                            this.setBankBalance(this._balance);
                        }
                        if (this._conductor.autoplay.autoPlayActive) 
                        {
                            this._consoleEngine.disableConsole();
                        }
                        else 
                        {
                            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                        }
                        this.updateConsole();
                        break;
                    }
                }
            }
            return;
        }

        internal function counter(arg1:mgs.aurora.games.common.components.generic.events.CounterEvent):void
        {
            if (this.isReady && !this._isReelsActive) 
            {
                if (this._conductor.options.isQuickSpin && this._conductor.autoplay.autoPlayActive) 
                {
                    this.setWinAmount(this._winAmount);
                }
                else 
                {
                    this.setWinAmount(isNaN(arg1.value) ? 0 : arg1.value * this._conductor.betData.chipSize);
                }
            }
            return;
        }

        internal function correctNumChips(arg1:Number):Number
        {
            if (arg1 < this._conductor.betData.minChips) 
            {
                arg1 = this._conductor.betData.maxChips;
            }
            else if (arg1 > this._conductor.betData.maxChips) 
            {
                arg1 = this._conductor.betData.minChips;
            }
            return arg1;
        }

        internal function setAutoPlaySpins():void
        {
            if (this._conductor.autoplay.autoPlayActive && this._conductor.autoplay.currentAutoPlay + 1 <= this._conductor.autoplay.numAutoPlay) 
            {
                this._consoleEngine.setSpinDisplay(String(this._conductor.autoplay.currentAutoPlay + 1) + "/" + this._conductor.autoplay.numAutoPlay.toString());
            }
            else 
            {
                this._consoleEngine.setSpinDisplay("-");
            }
            return;
        }

        public override function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        internal function showAutoPlayPanel():void
        {
            var loc1:*=mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.publishers.UserInterruptServer;
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.showAutoPlayTab();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function hideAutoPlayPanel():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.hideAutoPlayTab();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function toggleAutoPlayPanel():void
        {
            if (this._autoPlayTab) 
            {
                this.hideAutoPlayPanel();
                this._autoPlayTab = false;
            }
            else 
            {
                this.showAutoPlayPanel();
                this._autoPlayTab = true;
            }
            return;
        }

        internal function showWinPanel():void
        {
            var loc1:*=mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.publishers.UserInterruptServer;
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.showWinTab();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function hideWinPanel():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.hideWinTab();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function toggleWinPanel():void
        {
            if (this._winTab) 
            {
                this.hideWinPanel();
                this._winTab = false;
            }
            else 
            {
                this.showWinPanel();
                this._winTab = true;
            }
            return;
        }

        internal function showBetPanel():void
        {
            var loc1:*=mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.publishers.UserInterruptServer;
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.showBetTab();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function hideBetPanel():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.hideBetTab();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function toggleBetPanel():void
        {
            if (this._betTab) 
            {
                this.hideBetPanel();
                this._betTab = false;
            }
            else 
            {
                this.showBetPanel();
                this._betTab = true;
            }
            return;
        }

        internal function onGamble(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.disableConsole();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function onOutsideClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig && this._consoleReady;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._gotConfigXML;
        }

        public function get consoleEngine():mgs.aurora.slots.components.console.ConsoleEngine
        {
            return this._consoleEngine;
        }

        public function get frameMode():String
        {
            return this._frameMode;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET_CHANGED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLICK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLICK_ON_CONSOLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COINS_CREDITS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BETMAX));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SPIN_STARTED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAMBLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COLLECT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_FREE_SPINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAYTABLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BACKTOGAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_AUTOPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INC_COIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DEC_COIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INCREMENT_PAYLINES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DEC_LINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INC_LINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DEC));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INC));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INCREMENT_COINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INSUFFICIENT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_DISCARD_OFFER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE_ENABLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE_DISABLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONSOLE_READY));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_CONSOLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAuroraConsoleUpdate, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAuroraConsoleLock, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.SERVICE_LOCK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPreAllReelsStopped, mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ReelsServer.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 850);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespinStart, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountup, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBankBalance, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_BALANCE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaylineChange, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.SERVICE_BET_CHANGED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdatePaylines, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.SERVICE_UPDATE_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundaryChange, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_BOUNDARY_CHANGE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptions, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartAutoPlay, mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.AutoPlayData.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoPlayNextSpin, mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.AutoPlayData.SERVICE_NEXT_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoStop, mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.AutoPlayData.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreespinSummeryOpen, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusSummeryClose, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_AUTO_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusSummeryStartClose, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_START_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreespins, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDoFreespin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinAutoClose, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_AUTO_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinAnimation, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_WIN_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSequinceComplete, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_SEQUINCE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountupComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.inDec, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onInc, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncreaseCoins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_COIN, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDecreaseCoins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_COIN, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncCoins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_COINS, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncPayLines, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_PAYLINES, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onIncPayLine, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_LINE, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDecPayLine, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_LINE, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameContinue, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameReject, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_REJECT_FREEGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_LATER);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameBack, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSwitchGame, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SWITCH_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRejectClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesData, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleComplete, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGamble, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGamble, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleReady, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_READY_TO_PLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleWin, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_WIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleLost, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_LOST);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewChange, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReels, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_ACTIVE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDiscardOfferScreenOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_DISCARD_OFFER_SCREEN_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDiscardOfferScreenClosed, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_DISCARD_OFFER_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOutsideClick, mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent.SERVICE_CLICK);
            return;
        }

        internal function onDiscardOfferScreenOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.disableConsole();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function onDiscardOfferScreenClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            return;
        }

        internal function onWildReels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            if (this._consoleEngine.isStopEnabled() && !this._conductor.autoplay.autoPlayActive) 
            {
                this._consoleEngine.showSpin();
                this._consoleEngine.disableConsole();
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function onViewChange(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.view = String(arg1.data);
            return;
        }

        internal function onGambleLost(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._balance = this._conductor.response.player.balance;
            this.setBankBalance(this._balance);
            this.resetWinAmount();
            return;
        }

        internal function onGambleWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._balance = this._conductor.response.player.balance;
            this.setBankBalance(this._balance);
            this._winAmount = this._conductor.response.player.totalWin;
            this.setWinAmount(this._winAmount);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._config = new XML(arg1.data);
            this._gotConfigXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
                loc2 = mgs.aurora.games.logicBlocks.data.BetData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME));
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc1:*=mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer("Console").data as flash.display.MovieClip;
            var loc2:*=loc1.loaderInfo;
            this._isTrueType = this._config.@isTrueTypeFont != "true" ? false : true;
            this._consoleEngine.addEventListener(mgs.aurora.slots.components.console.ConsoleEngine.EVENT_COMPLETE, this.ready);
            this._consoleEngine.setUp(mgs.aurora.games.common.components.resourceProxy.Assets.getXML("ConsoleXML"), loc2, this._conductor.betData);
            return;
        }

        protected function ready(arg1:flash.events.Event):void
        {
            this._consoleReady = true;
            this._consoleEngine.removeEventListener(mgs.aurora.slots.components.console.ConsoleEngine.EVENT_COMPLETE, this.ready);
            this._consoleEngine.setConsole(mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR);
            this._consoleEngine.addEventListener(mgs.aurora.slots.components.console.ConsoleEngine.EVENT_BUTTON, this.onButtonClicked);
            this._consoleEngine.addEventListener(mgs.aurora.slots.components.console.ConsoleEngine.EVENT_CONSOLE, this.onButtonChange);
            this._consoleEngine.addEventListener(flash.events.MouseEvent.CLICK, this.onContainerClick);
            this._balance = this._conductor.response.player.balance;
            this._consoleEngine.chipRange = this._conductor.betData.validChips;
            this._consoleEngine.chipSize = mgs.aurora.games.framework.AuroraReference.aurora.banking.display.coinSize / 100;
            if (!this._conductor.freeGamesData.allFreeGamesCompleteFromRefresh) 
            {
                var loc1:*=this._conductor.response.framework.state;
                switch (loc1) 
                {
                    case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS:
                    case mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS:
                    case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS:
                    case mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE:
                    case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLING:
                    case mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_COMPLETE:
                    {
                        this._winAmount = this._conductor.response.player.totalWin;
                        break;
                    }
                    default:
                    {
                        this._winAmount = this._conductor.response.slot.win;
                        break;
                    }
                }
            }
            if (this.isReady) 
            {
                this.updateConsole();
            }
            else 
            {
                _trace("Error: Not ready to draw the console to the stage.", "error", this, 16711680);
            }
            this.resetConsoleTabs();
            syndicate(this, SERVICE_CONSOLE_READY, null);
            return;
        }

        internal function onGambleComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            this.updateConsole();
            if (this._conductor.response.gamble.state == 4) 
            {
                this.resetWinAmount();
            }
            return;
        }

        internal function onGambleOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            if (this._conductor.response.gamble.state == 4) 
            {
                this.resetWinAmount();
            }
            this.updateConsole();
            return;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
                this._consoleEngine.dispose();
                this._consoleEngine = null;
                if (this._resetWinSequince) 
                {
                    this._resetWinSequince.kill();
                    this._resetWinSequince = null;
                }
                this._message = null;
                this._frameMode = null;
                this._newFrameMode = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        internal function onGambleReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            this.updateConsole();
            return;
        }

        internal function onAuroraConsoleLock(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data != this._locking) 
            {
                this._locking = arg1.data;
                if (this.isReady) 
                {
                    this.setLock(this._locking);
                }
            }
            return;
        }

        internal function onAuroraConsoleUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    if (this._frameMode != arg1.data) 
                    {
                        this._frameMode = arg1.data;
                    }
                    if (this.isReady) 
                    {
                        this.updateConsole();
                    }
                    break;
                }
            }
            return;
        }

        internal function onIncPayLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function onIncPayLine(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function onDecPayLine(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function onUpdatePaylines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            return;
        }

        internal function onIncCoins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            var loc1:*=0;
            if (this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT) 
            {
                loc1 = this._conductor.betData.numChips + 1;
            }
            else 
            {
                loc1 = Math.floor(this._conductor.betData.numChips / mgs.aurora.slots.components.console.ConsoleEngine.COINS_INCREMENT) * mgs.aurora.slots.components.console.ConsoleEngine.COINS_INCREMENT;
                loc1 = loc1 + mgs.aurora.slots.components.console.ConsoleEngine.COINS_INCREMENT;
            }
            loc1 = this.correctNumChips(loc1);
            this.updateCoins(loc1);
            this.updateConsole();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function onDecreaseCoins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            var loc1:*=this.correctNumChips((this._conductor.betData.numChips - 1));
            this.updateCoins(loc1);
            this.updateConsole();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function onIncreaseCoins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            var loc1:*=this.correctNumChips(this._conductor.betData.numChips + 1);
            this.updateCoins(loc1);
            this.updateConsole();
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function onInc(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            this.incrementChipSize();
            return;
        }

        internal function inDec(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            this.decrementChipSize();
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isReelsActive = false;
            this._winAmount = this._conductor.response.slot.win;
            this.postReelCheck();
            return;
        }

        internal function onPreAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._consoleEngine.lockConsole = false;
            if (this._consoleEngine.isStopEnabled() && !this._conductor.autoplay.autoPlayActive) 
            {
                this._consoleEngine.showSpin();
                this._consoleEngine.disableConsole();
            }
            this.resetConsoleTabs();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function onRespinStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._respinCost = this._conductor.response.respin.nextSpinCosts[0].nextSpinCosts[arg1.data].cost;
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.disableConsole();
            var loc1:*=this._conductor.betData.betValue;
            if (this._respinCost != -1) 
            {
                loc1 = this._respinCost;
                this._balance = this._balance - loc1;
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function onCountup(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._countupBusy = true;
            if (this._conductor.state.state != null) 
            {
                this._conductor.countup.event.addEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            return;
        }

        protected function onDoFreespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._isReelsActive) 
            {
                if (this._conductor.response.slot.state != mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) 
                {
                    this._winAmount = this._conductor.response.slot.win + (this._conductor.response.bonusGames != null ? this._conductor.response.bonusGames.totalBonusWin : 0);
                }
                else 
                {
                    this._winAmount = this._conductor.response.player.totalWin;
                }
                this.setWinAmount(this._winAmount);
            }
            return;
        }

        protected function onFreeSpinAutoClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_BACKTOGAME, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.logicBlocks.data.BackToGameData(mgs.aurora.games.logicBlocks.data.BackToGameData.SOURCE_FS_SUMMARY)));
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.hideFreespinButtons();
            this.resetWinOnFreeGameSwitch();
            if (this.isReady) 
            {
                this._balance = this._conductor.response.player.balance;
            }
            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            this.updateConsole();
            return;
        }

        internal function onBankBalance(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._isReelsActive && !this._countupBusy && !mgs.aurora.games.framework.AuroraReference.aurora.status.busy) 
            {
                this._balance = arg1.data;
            }
            else if (this.isReady && !this._isReelsActive && !this._countupBusy && !mgs.aurora.games.framework.AuroraReference.aurora.status.busy) 
            {
                if (this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
                {
                    this._balance = arg1.data;
                }
            }
            if (!this._isReelsActive && this.isReady) 
            {
                this.updateValues();
            }
            return;
        }

        internal function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isReelsActive = true;
            this.resetWinAmount();
            this._respinCost = -1;
            return;
        }

        internal function onPaylineChange(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinAmount();
            return;
        }

        internal function onStartAutoPlay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (!this.checkBalance()) 
                {
                    this._conductor.autoplay.autoPlayActive;
                    return;
                }
                if (this._conductor.autoplay.autoPlayActive && this._conductor.autoplay.numAutoPlay > 0 && !this._isReelsActive) 
                {
                    this.startAutoPlay(this._conductor.autoplay.numAutoPlay);
                }
            }
            return;
        }

        internal function onAutoPlayNextSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._balance = this._conductor.response.player.balance;
                this.setBankBalance(this._balance);
                if (this._conductor.autoplay.autoPlayActive) 
                {
                    this.startAutoPlay(this._conductor.autoplay.numAutoPlay);
                }
            }
            return;
        }

        internal function onAutoStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.stopAutoPlay();
            }
            return;
        }

        protected function onFreespinSummeryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._winAmount = this._conductor.response.player.totalWin;
            this.setWinAmount(this._winAmount);
            if (this.isReady) 
            {
                this._balance = this._conductor.response.player.balance;
                this.setBankBalance(this._balance);
                this.updateConsole();
            }
            return;
        }

        protected function onFreespins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._doNextSpin = false;
            this._balance = this._conductor.response.player.balance;
            this.setBankBalance(this._balance);
            this.updateConsole();
            return;
        }

        internal function onBonusSummeryClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            syndicate(this, SERVICE_BACKTOGAME, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.logicBlocks.data.BackToGameData(mgs.aurora.games.logicBlocks.data.BackToGameData.SOURCE_BONUS)));
            this._locking = false;
            this.setLock(this._locking);
            this._balance = this._conductor.response.player.balance;
            this.setBankBalance(this._balance);
            this.updateConsole();
            return;
        }

        internal function onBoundaryChange(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._betChanged = true;
            }
            return;
        }

        internal function onOptions(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.setButtonStates(this._newFrameMode);
                this.updateValues();
            }
            return;
        }

        internal function onBonusSummeryStartClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.resetWinOnFreeGameSwitch();
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            this.updateConsole();
            this._locking = true;
            this.setLock(this._locking);
            return;
        }

        internal function onCountupComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._countupBusy = false;
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            catch (e:Error)
            {
            };
            if (this.isReady && !(arg1 == null)) 
            {
                this._winAmount = arg1.data * this._conductor.betData.chipSize;
                this.setWinAmount(this._winAmount);
            }
            this._balance = mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance;
            this.setBankBalance(this._balance);
            if (this._doNextSpin && this._conductor.settings.autoplayContiCountup && !this._conductor.freeSpinsData.isFreespinsActive && this._conductor.autoplay.autoPlayActive) 
            {
                this.doNextSpin("onCountupComplete");
            }
            else if (this._doNextSpin && this._conductor.settings.autoplayContiCountup && !this._conductor.freeSpinsData.isFreespinsActive && !this._conductor.autoplay.autoPlayActive) 
            {
                this.endTrigger("onCountupComplete");
            }
            return;
        }

        internal function onWinAnimation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                {
                    break;
                }
                default:
                {
                    if (this._doNextSpin && this._conductor.settings.autoplayContiAnimComplete && !this._conductor.freeSpinsData.isFreespinsActive && this._conductor.autoplay.autoPlayActive) 
                    {
                        this.doNextSpin("onWinAnimation");
                    }
                    else if (this._doNextSpin && this._conductor.settings.autoplayContiAnimComplete && !this._conductor.freeSpinsData.isFreespinsActive && !this._conductor.autoplay.autoPlayActive) 
                    {
                        this.endTrigger("onWinAnimation");
                    }
                    break;
                }
            }
            return;
        }

        internal function onSequinceComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._doNextSpin && this._conductor.settings.autoplayContiWinComplete && !this._conductor.freeSpinsData.isFreespinsActive && this._conductor.autoplay.autoPlayActive) 
            {
                this.doNextSpin("onSequinceComplete");
            }
            else if (this._doNextSpin && this._conductor.settings.autoplayContiWinComplete && !this._conductor.freeSpinsData.isFreespinsActive && !this._conductor.autoplay.autoPlayActive) 
            {
                this.endTrigger("onSequinceComplete");
            }
            return;
        }

        internal function endTrigger(arg1:String=null):void
        {
            this._doNextSpin = false;
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                if (this._conductor.freeGamesData.activeGame.gamesRemaining > 0) 
                {
                    this._consoleEngine.lockConsole = false;
                    this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                    this.updateConsole();
                }
            }
            return;
        }

        internal function doNextSpin(arg1:String=null):void
        {
            this._doNextSpin = false;
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            catch (e:Error)
            {
            };
            loc1 = this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                {
                    this._consoleEngine.setSpinDisplay("-");
                    break;
                }
                default:
                {
                    this.setAutoPlaySpins();
                    this.setWinAmount(this._winAmount);
                    break;
                }
            }
            return;
        }

        internal function updateCoins(arg1:Number=1):void
        {
            syndicate(this, SERVICE_COINS, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransCoins(arg1)));
            return;
        }

        protected function updateConsole():void
        {
            this.setConsoleState();
            this.setButtonStates(this._newFrameMode);
            this.updateValues();
            return;
        }

        protected function onButtonChange(arg1:mgs.aurora.slots.components.console.EConsoleEvent):void
        {
            var loc1:*=arg1.id;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.console.ConsoleEngine.CONSOLE_ENABLE:
                {
                    syndicate(this, SERVICE_CONSOLE_ENABLE);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.CONSOLE_DISABLE:
                {
                    syndicate(this, SERVICE_CONSOLE_DISABLE);
                    break;
                }
            }
            return;
        }

        internal function onContainerClick(arg1:flash.events.MouseEvent):void
        {
            syndicate(this, SERVICE_CLICK_ON_CONSOLE, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function onButtonClicked(arg1:mgs.aurora.slots.components.console.EConsoleEvent):void
        {
            if (arg1.id != null) 
            {
                syndicate(this, SERVICE_CLICK, new mgs.aurora.games.framework.TransportLayer(arg1.id));
            }
            this.resetConsoleTabs();
            var loc1:*=arg1.id;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_5X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(5));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_10X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(10));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_25X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(25));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_50X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(50));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_75X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(75));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_100X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(100));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_150X:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(150));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_UNTILSTOP:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    this._doNextSpin = false;
                    syndicate(this, SERVICE_START_AUTOPLAY, new mgs.aurora.games.framework.TransportLayer(1000000));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_CUSTOM:
                {
                    syndicate(this, SERVICE_AUTOPLAY);
                    this._doNextSpin = false;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_AUTOPLAY:
                {
                    if (this._conductor.settings.consoleType != 1) 
                    {
                        syndicate(this, SERVICE_AUTOPLAY);
                        this._doNextSpin = false;
                    }
                    else 
                    {
                        this.toggleAutoPlayPanel();
                    }
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_WIN:
                {
                    if (this._conductor.settings.consoleType == 1) 
                    {
                        this.toggleWinPanel();
                    }
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_BET:
                {
                    if (this._conductor.settings.consoleType == 1) 
                    {
                        this.toggleBetPanel();
                    }
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_COINS:
                {
                    syndicate(this, SERVICE_INCREMENT_COINS);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_DEC:
                {
                    syndicate(this, SERVICE_DEC);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_INC:
                {
                    syndicate(this, SERVICE_INC);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_FREESPIN_BACKTOGAME:
                {
                    this._consoleEngine.lockConsole = false;
                    syndicate(this, SERVICE_BACKTOGAME, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.logicBlocks.data.BackToGameData(mgs.aurora.games.logicBlocks.data.BackToGameData.SOURCE_FS_SUMMARY)));
                    this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                    this._consoleEngine.hideFreespinButtons();
                    this.resetWinOnFreeGameSwitch();
                    this.updateConsole();
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_GAMBLE_BACKTOGAME:
                {
                    this._consoleEngine.lockConsole = false;
                    syndicate(this, SERVICE_BACKTOGAME, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.logicBlocks.data.BackToGameData(mgs.aurora.games.logicBlocks.data.BackToGameData.SOURCE_GAMBLE)));
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_FREESPIN_CONTINUE:
                {
                    syndicate(this, SERVICE_START_FREE_SPINS);
                    this._consoleEngine.lockConsole = false;
                    this._consoleEngine.hideFreespinButtons();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_FREESPIN_START:
                {
                    syndicate(this, SERVICE_START_FREE_SPINS);
                    this._consoleEngine.lockConsole = false;
                    this._consoleEngine.hideFreespinButtons();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_FREESPIN_STOP:
                {
                    this._consoleEngine.lockConsole = false;
                    this._consoleEngine.hideFreespinButtons();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_STOP_AUTOPLAY:
                {
                    syndicate(this, SERVICE_STOP_AUTOPLAY);
                    this.stopAutoPlay();
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_GAMBLE:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    syndicate(this, SERVICE_GAMBLE);
                    this.setWinAmount(this._winAmount);
                    this._consoleEngine.lockConsole = false;
                    this.updateConsole();
                    this._consoleEngine.disableConsole();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_COLLECT:
                {
                    syndicate(this, SERVICE_COLLECT);
                    this._consoleEngine.lockConsole = false;
                    this._consoleEngine.disableConsole();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_DEC_COINS:
                {
                    syndicate(this, SERVICE_DEC_COIN);
                    this.setWinAmount(this._winAmount);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_INC_COINS:
                {
                    syndicate(this, SERVICE_INC_COIN);
                    this.setWinAmount(this._winAmount);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_PAYLINES:
                {
                    this.incLines();
                    this.setWinAmount(this._winAmount);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_INC_PAYLINES:
                {
                    this.incLine();
                    this.setWinAmount(this._winAmount);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_DEC_PAYLINES:
                {
                    this.decLine();
                    this.setWinAmount(this._winAmount);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_MAXBET:
                {
                    if (!this.checkEnoughInBalanceForMaxBet()) 
                    {
                        return;
                    }
                    syndicate(this, SERVICE_BETMAX);
                    this.betMax();
                    syndicate(this, SERVICE_SPIN_STARTED);
                    this._consoleEngine.lockConsole = false;
                    this._doStopReels = false;
                    this._consoleEngine.disableConsole();
                    this.spinReels();
                    this.showStopButton();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_PAYTABLE:
                {
                    syndicate(this, SERVICE_PAYTABLE);
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_SET_COINS:
                {
                    this.setWinAmount(this._winAmount);
                    if (this._conductor.settings.doCoins) 
                    {
                        syndicate(this, SERVICE_COINS_CREDITS, new mgs.aurora.games.framework.TransportLayer("coins"));
                        this._consoleEngine.lockConsole = false;
                        this._consoleEngine.showCoins(mgs.aurora.games.framework.AuroraReference.aurora.session.userType);
                        this._consoleEngine.lockConsole = true;
                        this.updateValues();
                    }
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_SET_CREDITS:
                {
                    this.setWinAmount(this._winAmount);
                    if (this._conductor.settings.doCredits) 
                    {
                        syndicate(this, SERVICE_COINS_CREDITS, new mgs.aurora.games.framework.TransportLayer("credits"));
                        this._consoleEngine.lockConsole = false;
                        this._consoleEngine.showCredits(mgs.aurora.games.framework.AuroraReference.aurora.session.userType);
                        this._consoleEngine.lockConsole = true;
                        this.updateValues();
                    }
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_SPIN:
                {
                    if (!this.checkBalance()) 
                    {
                        return;
                    }
                    syndicate(this, SERVICE_SPIN_STARTED);
                    this.resetConsoleTabs();
                    this._consoleEngine.lockConsole = false;
                    this._doStopReels = false;
                    this._consoleEngine.disableConsole();
                    this.spinReels();
                    this.showStopButton();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_GAMBLE_COLLECT:
                {
                    syndicate(this, SERVICE_COLLECT);
                    this._consoleEngine.lockConsole = false;
                    this._consoleEngine.disableConsole();
                    this._consoleEngine.lockConsole = true;
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_STOP:
                {
                    syndicate(this, SERVICE_STOP);
                    this.stopImmediately();
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.BUTTON_DISCARD_OFFER:
                {
                    syndicate(this, SERVICE_DISCARD_OFFER);
                    break;
                }
            }
            return;
        }

        internal function resetConsoleTabs():void
        {
            if (this._conductor.settings.consoleType == 1) 
            {
                if (this._autoPlayTab) 
                {
                    this.hideAutoPlayPanel();
                    this._autoPlayTab = false;
                }
                if (this._winTab) 
                {
                    this.hideWinPanel();
                    this._winTab = false;
                }
                if (this._betTab) 
                {
                    this.hideBetPanel();
                    this._betTab = false;
                }
            }
            return;
        }

        internal function betMax():void
        {
            this._consoleEngine.setBetMax(this._conductor.betData.maxChips.toString(), this._conductor.betData.maxLines.toString(), this.toCoinsCredits(this._conductor.betData.betValue));
            syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            return;
        }

        internal function stopImmediately():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.showSpin();
            this._consoleEngine.disableButtons("Button_SPIN");
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function spinReels(arg1:int=1):void
        {
            this.setWinAmount(this._winAmount);
            this.setAutoPlaySpins();
            if (!this.checkBalance()) 
            {
                return;
            }
            this._isReelsActive = true;
            this._doNextSpin = false;
            this._betChanged = false;
            if (!this._conductor.freeGamesData.isFreeGameActive && !this._conductor.freeSpinsData.isFreespinsActive) 
            {
                this.setBankBalance(mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance);
            }
            this._consoleEngine.lockConsole = false;
            if (this._newFrameMode != mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_EXPERT) 
            {
                if (this._newFrameMode == mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_REGULAR) 
                {
                    this._newFrameMode = mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR;
                    this._consoleEngine.switchConsole(this._newFrameMode);
                    this.setButtonStates(this._newFrameMode);
                    this.updateValues();
                }
            }
            else 
            {
                this._newFrameMode = mgs.aurora.slots.components.console.ConsoleEngine.FRAME_EXPERT;
                this._consoleEngine.switchConsole(this._newFrameMode);
                this.setButtonStates(this._newFrameMode);
                this.updateValues();
            }
            var loc1:*=this._conductor.betData.betValue;
            if (!(this._conductor.response.slot.state == 2) && !this._conductor.freeGamesData.isFreeGameActive) 
            {
                this._balance = mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance - loc1;
                this.setBankBalance(this._balance);
            }
            this._consoleEngine.lockConsole = true;
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                this.sendFreeGameSpinPacket(arg1);
            }
            else 
            {
                this.sendSpinPacket(arg1);
            }
            return;
        }

        internal function sendSpinPacket(arg1:int):void
        {
            syndicate(this, SERVICE_SPIN, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransSpinData(this._conductor.betData.chipSize, this._conductor.betData.numChips, arg1, this._conductor.betData.activePaylines.join(","))));
            return;
        }

        internal function sendFreeGameSpinPacket(arg1:int):void
        {
            syndicate(this, SERVICE_SPIN, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransSpinData(this._conductor.betData.chipSize, this._conductor.betData.numChips, arg1, this._conductor.betData.activePaylines.join(","), this._conductor.freeGamesData.activeGame.offerID, this._conductor.freeGamesData.activeGame.instanceID)));
            return;
        }

        protected function setBankBalance(arg1:Number):void
        {
            this._consoleEngine.balance = this.toCoinsCredits(arg1);
            return;
        }

        internal function showStopButton():void
        {
            if (!this._conductor.options.isQuickSpin && this._conductor.settings.canStopAllReels && mgs.aurora.games.logicBlocks.data.CustomRuleSet(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.CustomRuleSet.PUBLISHER_NAME)).canUseSpinStop) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.showStopButton();
            }
            return;
        }

        internal function updateValues():void
        {
            this._consoleEngine.coins = this._conductor.betData.numChips.toString();
            this._consoleEngine.line = this._conductor.betData.numLines.toString();
            this.setWinAmount(this._winAmount);
            this.setAutoPlaySpins();
            this.setBankBalance(this._balance);
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                this._consoleEngine.bet = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("FREE");
            }
            else if (this._betChanged) 
            {
                this._consoleEngine.bet = this.toCoinsCredits(this._conductor.betData.previousBetSize);
            }
            else 
            {
                this._consoleEngine.bet = this.toCoinsCredits(this._conductor.betData.betValue);
            }
            return;
        }

        protected function setWinAmount(arg1:Number):void
        {
            if (arg1 > 0) 
            {
                this._consoleEngine.winAmount = this.toCoinsCredits(arg1);
            }
            else 
            {
                this._consoleEngine.winAmount = "";
            }
            return;
        }

        internal function setButtonStates(arg1:String):void
        {
            this.setCoinsCreditButtons();
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_EXPERT:
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR:
                {
                    this.modelBase();
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_BONUS_EXPERT:
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_BONUS_REGULAR:
                {
                    this.modelBonus();
                    break;
                }
                case this.MakeUniqueFreeSpinsMode(mgs.aurora.slots.components.console.ConsoleEngine.FRAME_FREESPINS_EXPERT):
                case this.MakeUniqueFreeSpinsMode(mgs.aurora.slots.components.console.ConsoleEngine.FRAME_FREESPINS_REGULAR):
                {
                    this.modelFreeSpins();
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_EXPERT:
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_REGULAR:
                {
                    this.modelGamble();
                    break;
                }
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLING_EXPERT:
                case mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLING_REGULAR:
                {
                    this.modelGambling();
                    break;
                }
                default:
                {
                    _trace("WARNING: NO console found. [" + arg1 + "]", "error", this, 8421376);
                    break;
                }
            }
            return;
        }

        internal function modelGamble():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.lockUCS = false;
            if (this._consoleEngine.isEnabled) 
            {
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            }
            else 
            {
                this._consoleEngine.disableConsole();
            }
            if (this._conductor.autoplay.autoPlayActive) 
            {
                this._consoleEngine.disableConsole();
                this._consoleEngine.showAutoPlayStopButton();
            }
            else if (!this._isReelsActive) 
            {
                this._consoleEngine.showSpin();
            }
            if (this._conductor.freeGamesData.hasFreeGames && this._conductor.freeGamesData.isFreeGameActive) 
            {
                if (this._conductor.freeGamesData.activeGame.gamesRemaining == 0 && this._conductor.freeGamesData.activeGame.uniqueId == this._conductor.freeGamesData.lastPlayedFreeGameId) 
                {
                    this._consoleEngine.disableConsole();
                }
            }
            if (!this._conductor.betData.betValid) 
            {
                this._consoleEngine.disableConsole();
                this._consoleEngine.showGambleButton(this._frameMode);
                this._consoleEngine.showGambleCollectButton(this._frameMode);
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function modelGambling():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.lockUCS = true;
            this._consoleEngine.disableConsole();
            if (this._conductor.response.framework.state == 4) 
            {
                this._consoleEngine.showGambleBackToGame();
            }
            else 
            {
                this._consoleEngine.showGambleCollect();
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        protected function modelFreeSpins():void
        {
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.lockUCS = true;
            this._consoleEngine.hideFreespinButtons();
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                {
                    this._consoleEngine.disableConsole();
                    loc1 = this._conductor.state.previousState;
                    switch (loc1) 
                    {
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                        {
                            if (this._conductor.settings.autoContinueFreeSpinAfterBonus) 
                            {
                                this._consoleEngine.hideFreespinButtons();
                            }
                            else 
                            {
                                this._consoleEngine.showFreespinContinue();
                            }
                            break;
                        }
                        default:
                        {
                            this._consoleEngine.hideFreespinButtons();
                            break;
                        }
                    }
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    this._consoleEngine.disableConsole();
                    if (this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
                    {
                        this._consoleEngine.showFreespinBackToGame();
                    }
                    else if (!this._conductor.settings.autoCloseFreeSpinSummary) 
                    {
                        this._consoleEngine.showFreespinBackToGame();
                    }
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                {
                    this._consoleEngine.disableConsole();
                    if (this._conductor.settings.autoContinueFreeSpinAfterBonus) 
                    {
                        loc1 = this._conductor.state.previousState;
                        switch (loc1) 
                        {
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                            {
                                this._consoleEngine.hideFreespinButtons();
                                break;
                            }
                            default:
                            {
                                this._consoleEngine.showFreespinContinue();
                                break;
                            }
                        }
                    }
                    else 
                    {
                        this._consoleEngine.showFreespinContinue();
                    }
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                {
                    this._consoleEngine.disableConsole();
                    this._winAmount = this._conductor.response.player.totalWin;
                    if (!this._conductor.settings.freespinAutoStart || this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH || this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES) 
                    {
                        this._consoleEngine.showFreespinStart();
                    }
                    else 
                    {
                        this._consoleEngine.hideFreespinButtons();
                    }
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    this._consoleEngine.disableConsole();
                    break;
                }
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function modelBonus():void
        {
            this._consoleEngine.lockConsole = false;
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                this.setupForFreeGames();
            }
            else 
            {
                this.setupForBaseGame();
            }
            if (!this._isReelsActive) 
            {
                this._consoleEngine.showSpin();
            }
            if (this._consoleEngine.isEnabled && !(this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS)) 
            {
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            }
            else 
            {
                this._consoleEngine.disableConsole();
            }
            this.updateValues();
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function modelBase():void
        {
            this._consoleEngine.lockConsole = false;
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                this.setupForFreeGames();
            }
            else 
            {
                this.setupForBaseGame();
            }
            if (this._consoleEngine.isEnabled) 
            {
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
            }
            else 
            {
                this._consoleEngine.disableConsole();
            }
            if (this._conductor.autoplay.autoPlayActive) 
            {
                this._consoleEngine.disableConsole();
                this._consoleEngine.showAutoPlayStopButton();
            }
            else if (this._isReelsActive) 
            {
                this._consoleEngine.showSpin();
                this._consoleEngine.disableConsole();
            }
            else 
            {
                this._consoleEngine.showSpin();
            }
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS_AFTER_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS:
                {
                    this._consoleEngine.disableConsole();
                    break;
                }
            }
            if (this._conductor.freeGamesData.hasFreeGames && this._conductor.freeGamesData.isFreeGameActive) 
            {
                if (this._conductor.freeGamesData.activeGame.gamesRemaining == 0 && this._conductor.freeGamesData.activeGame.uniqueId == this._conductor.freeGamesData.lastPlayedFreeGameId) 
                {
                    this._consoleEngine.disableConsole();
                }
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        internal function setCoinsCreditButtons():void
        {
            var loc1:*=false;
            if (this.isReady) 
            {
                loc1 = this._consoleEngine.lockConsole;
                this._consoleEngine.lockConsole = false;
                if (this._conductor.options.displayAsCoins) 
                {
                    this._consoleEngine.showCoins(mgs.aurora.games.framework.AuroraReference.aurora.session.userType);
                }
                else if (!this._conductor.options.displayAsCoins) 
                {
                    this._consoleEngine.showCredits(mgs.aurora.games.framework.AuroraReference.aurora.session.userType);
                }
                if (this._conductor.options.displayAsCoins && !this._conductor.settings.doCredits) 
                {
                    this._consoleEngine.disableCoins(mgs.aurora.games.framework.AuroraReference.aurora.session.userType);
                }
                else if (!this._conductor.options.displayAsCoins && !this._conductor.settings.doCoins) 
                {
                    this._consoleEngine.disableCredits(mgs.aurora.games.framework.AuroraReference.aurora.session.userType);
                }
                this._consoleEngine.lockConsole = loc1;
            }
            return;
        }

        internal function MakeUniqueFreeSpinsMode(arg1:String):String
        {
            return this._conductor.view.view + "_" + arg1;
        }

        internal function setConsoleState():void
        {
            if (this.isReady) 
            {
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS_AFTER_BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COLLECT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS:
                    {
                        this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_EXPERT;
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                    {
                        if (this._conductor.state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE || this._conductor.state.previousState == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE) 
                        {
                            this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_FREESPINS_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_FREESPINS_EXPERT;
                            this._newFrameMode = this.MakeUniqueFreeSpinsMode(this._newFrameMode);
                        }
                        else if (this._conductor.autoplay.autoPlayActive) 
                        {
                            this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_EXPERT;
                        }
                        else 
                        {
                            this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_EXPERT;
                        }
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTERBONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                    {
                        if (this._conductor.autoplay.autoPlayActive) 
                        {
                            this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_EXPERT;
                        }
                        else 
                        {
                            this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLE_EXPERT;
                        }
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_WIN:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_SUMMARY:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_WIN:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_SUMMARY:
                    {
                        this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLING_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_GAMBLING_EXPERT;
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                    {
                        this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_FREESPINS_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_FREESPINS_EXPERT;
                        this._newFrameMode = this.MakeUniqueFreeSpinsMode(this._newFrameMode);
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_NUDGE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_NUDGE_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_NUDGE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_NUDGE_COMPLETE:
                    {
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SELECT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SELECT:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                    {
                        this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_BONUS_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_BONUS_EXPERT;
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                    default:
                    {
                        this._newFrameMode = this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT ? mgs.aurora.slots.components.console.ConsoleEngine.FRAME_REGULAR : mgs.aurora.slots.components.console.ConsoleEngine.FRAME_EXPERT;
                        this._consoleEngine.switchConsole(this._newFrameMode);
                        break;
                    }
                }
            }
            return;
        }

        public function setLock(arg1:Boolean):void
        {
            if (this.isReady && !(this._consoleEngine.console.getActiveConsole() == null)) 
            {
                if (arg1) 
                {
                    this._consoleEngine.console.getActiveConsole().lockControls();
                }
                else 
                {
                    this._consoleEngine.console.getActiveConsole().unLockControls();
                }
            }
            return;
        }

        internal function onBetData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.freeGamesData.isFreeGameActive) 
                {
                    this._consoleEngine.chipRange = [this._conductor.betData.chipSize];
                }
                else 
                {
                    this._consoleEngine.chipRange = this._conductor.betData.validChips;
                }
                this._consoleEngine.chipSize = this._conductor.betData.chipSize / 100;
                this._consoleEngine.line = this._conductor.betData.numLines.toString();
                this._consoleEngine.coins = this._conductor.betData.numChips.toString();
                this.updateConsole();
            }
            return;
        }

        public function onRejectClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
            }
            this.refreshBetValues();
            return;
        }

        internal function onFreeGamesData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.updateConsole();
                this.resetWinOnFreeGameSwitch();
            }
            return;
        }

        internal function onSwitchGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
                this.updateConsole();
            }
            return;
        }

        internal function onFreegameBack(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
            }
            this._locking = false;
            this.setLock(this._locking);
            this.resetWinOnFreeGameSwitch();
            return;
        }

        internal function onFreegameLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
            }
            this.resetWinOnFreeGameSwitch();
            this.refreshBetValues();
            return;
        }

        internal function onFreegameReject(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
            }
            this.resetWinOnFreeGameSwitch();
            this.refreshBetValues();
            return;
        }

        internal function onFreegameNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
            }
            this.resetWinOnFreeGameSwitch();
            this.refreshBetValues();
            return;
        }

        internal function onFreegameContinue(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._consoleEngine.lockConsole = false;
                this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                this._consoleEngine.lockConsole = true;
            }
            this.resetWinOnFreeGameSwitch();
            this.refreshBetValues();
            return;
        }

        internal function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._betChanged = false;
                this.resetWinAmount();
                this.refreshBetValues();
                syndicate(this, SERVICE_BET_CHANGED, new mgs.aurora.games.framework.TransportLayer(this._conductor.betData.betValue));
            }
            return;
        }

        internal function startAutoPlay(arg1:Number):void
        {
            if (!this.checkBalance()) 
            {
                this.setWinAmount(this._winAmount);
                if (this._conductor.autoplay.autoPlayActive) 
                {
                    this.stopAutoPlay();
                }
                return;
            }
            this._consoleEngine.lockConsole = false;
            this._isReelsActive = true;
            this._consoleEngine.disableConsole();
            this.setButtonStates(this._newFrameMode);
            this.setWinAmount(this._winAmount);
            new org.as3lib.kitchensync.action.KSFunction(this.spinReels, 10, this._conductor.autoplay.autoplaysLeft).start();
            return;
        }

        internal function stopAutoPlay():void
        {
            this.setAutoPlaySpins();
            this._consoleEngine.lockConsole = false;
            this._consoleEngine.showSpin();
            this._consoleEngine.disableButtons("Button_SPIN");
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                {
                    break;
                }
                default:
                {
                    if (!this._isReelsActive) 
                    {
                        this._consoleEngine.enableConsole(this._frameMode, this._conductor.freeGamesData.isFreeGameActive, this._conductor.settings.doCoins, this._conductor.settings.doCredits);
                        this.updateConsole();
                    }
                    break;
                }
            }
            this._consoleEngine.lockConsole = true;
            return;
        }

        public function setupForFreeGames():void
        {
            this._consoleEngine.showUseLater(this._frameMode);
            this._consoleEngine.chipSize = this._conductor.betData.chipSize / 100;
            this._consoleEngine.coins = this._conductor.betData.numChips.toString();
            this._consoleEngine.lockUCS = true;
            this._consoleEngine.disableAllCoins();
            return;
        }

        public function setupForBaseGame():void
        {
            this._consoleEngine.showBetMax(this._frameMode);
            this._consoleEngine.lockUCS = false;
            return;
        }

        internal function toCoinsCredits(arg1:Number):String
        {
            var value:Number;

            var loc1:*;
            value = arg1;
            try 
            {
                if (!this._conductor.options.displayAsCoins) 
                {
                    return mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(value, ".", this._isTrueType).toString();
                }
                if (!this._betChanged) 
                {
                    if ("formatCoinsDisplay" in mgs.aurora.games.framework.AuroraReference.aurora.banking.display) 
                    {
                        return mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(value, this._conductor.betData.chipSize).toString();
                    }
                    return mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(value, this._conductor.betData.chipSize).toString());
                }
                if ("formatCoinsDisplay" in mgs.aurora.games.framework.AuroraReference.aurora.banking.display) 
                {
                    return mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(value, this._conductor.betData.previousChips).toString();
                }
                return mgs.aurora.games.common.components.utils.Toolbox.coinShapeAdder(mgs.aurora.games.common.components.utils.StringFormatting.formatAsCoins(value, this._conductor.betData.previousChips).toString());
            }
            catch (e:TypeError)
            {
                _trace(e.message, "error", this, 16711680);
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return value.toString();
        }

        internal function incLines():void
        {
            var loc1:*=0;
            if (this._frameMode != mgs.aurora.api.enums.SystemButtonTypes.EXPERT) 
            {
                loc1 = this._conductor.betData.numLines + 1;
            }
            else 
            {
                loc1 = Math.floor(this._conductor.betData.numLines / mgs.aurora.slots.components.console.ConsoleEngine.COINS_INCREMENT) * mgs.aurora.slots.components.console.ConsoleEngine.COINS_INCREMENT;
                loc1 = loc1 + mgs.aurora.slots.components.console.ConsoleEngine.COINS_INCREMENT;
            }
            syndicate(this, SERVICE_INCREMENT_PAYLINES, new mgs.aurora.games.framework.TransportLayer((loc1 - 1)));
            return;
        }

        internal function incLine():void
        {
            var loc1:*=this._conductor.betData.numLines + 1;
            syndicate(this, SERVICE_INC_LINE, new mgs.aurora.games.framework.TransportLayer((loc1 - 1)));
            return;
        }

        public static const SERVICE_DEC_LINE:String="PAYLINE_DECREASED";

        public static const SERVICE_SPIN:String="SPIN";

        public static const SERVICE_BET_CHANGED:String="BET_CHANGED";

        public static const SERVICE_CLICK:String="CLICK";

        public static const SERVICE_CLICK_ON_CONSOLE:String="CLICK_ON_CONSOLE";

        public static const SERVICE_COINS_CREDITS:String="COINS_CREDITS";

        public static const SERVICE_SPIN_STARTED:String="SPINSTART";

        public static const SERVICE_BETMAX:String="BETMAX";

        public static const SERVICE_AUTOPLAY:String="AUTOPLAY";

        public static const SERVICE_INSUFFICIENT:String="INSUFFICIENT_CREDITS";

        public static const SERVICE_GAMBLE:String="GAMBLE";

        public static const SERVICE_COLLECT:String="COLLECT";

        public static const SERVICE_BET:String="BET";

        public static const SERVICE_COINS:String="COINS";

        public static const SERVICE_STOP:String="STOP";

        public static const SERVICE_STOP_AUTOPLAY:String="STOP_AUTOPLAY";

        public static const SERVICE_START_FREE_SPINS:String="START_FREE_SPINS";

        public static const SERVICE_PAYTABLE:String="PAYTABLE";

        public static const SERVICE_BACKTOGAME:String="BACKTOGAME";

        public static const SERVICE_START_AUTOPLAY:String="START_AUTOPLAY";

        public static const SERVICE_INC_COIN:String="INC_COIN";

        public static const SERVICE_DEC_COIN:String="DEC_COIN";

        public static const SERVICE_DEC:String="DEC";

        public static const SERVICE_INCREMENT_COINS:String="INCREMENT_COINS";

        public static const SERVICE_INC_LINE:String="PAYLINE_INCREASED";

        public static const SERVICE_INCREMENT_PAYLINES:String="INCREMENT_LINES";

        public static const SERVICE_DISCARD_OFFER:String="DISCARD_OFFER";

        public static const SERVICE_CONSOLE_ENABLE:String="CONSOLE_ENABLE";

        public static const SERVICE_CONSOLE_DISABLE:String="CONSOLE_DISABLE";

        public static const SERVICE_CONSOLE_READY:String="CONSOLE_READY";

        public static const PUBLISHER_NAME:String="PUBLISHER_CONSOLE";

        public static const SERVICE_INC:String="INC";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _viewReady:Boolean=false;

        protected var _consoleReady:Boolean=false;

        internal var _lockAutoPlayUpdate:Boolean=false;

        internal var _gotConfigXML:Boolean=false;

        internal var _config:XML;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _consoleEngine:mgs.aurora.slots.components.console.ConsoleEngine;

        protected var _isReelsActive:Boolean=false;

        internal var _doStopReels:Boolean=false;

        protected var _doNextSpin:Boolean=false;

        internal var _message:String="";

        protected var _frameMode:String;

        internal var _newFrameMode:String;

        protected var _balance:Number;

        protected var _winAmount:Number;

        internal var _resetWinSequince:org.as3lib.kitchensync.action.KSFunction;

        internal var _startAutoplayFlag:Boolean=false;

        internal var _timeToClearWinnings:int=500;

        internal var _betValue:Number;

        internal var _autoPlayTab:Boolean=true;

        internal var _winTab:Boolean=true;

        internal var _betChanged:Boolean=false;

        internal var _respinCost:Number=-1;

        internal var _countupBusy:Boolean=false;

        internal var _timer:flash.utils.Timer;

        internal var _locking:Boolean=false;

        internal var _isTrueType:Boolean=true;

        internal var _betTab:Boolean=true;
    }
}


//            class DynamicFreeSpinsServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.generic.events.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.freespins.*;
    import mgs.aurora.slots.components.freespins.data.*;
    import org.as3lib.kitchensync.action.*;
    
    public class DynamicFreeSpinsServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function DynamicFreeSpinsServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer");
            return;
        }

        internal function onTriggerAnimationStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE && this._conductor.response.nextSpin.freeSpinsRetriggered) 
            {
                this._reTriggered = true;
            }
            return;
        }

        internal function onFreeGames(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.updateHeader();
            }
            return;
        }

        internal function onReelsStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._lockHeader = true;
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this.setCurrentHeader();
                this.updateHeader();
                this._reelsCanSpin = true;
                this._afterBackToGameWaiting = false;
                var loc1:*=this._conductor.response.slot.state;
                switch (loc1) 
                {
                    case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                    {
                        this._isStartOrContinue = true;
                        if (this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS_AFTER_BONUS || this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS) 
                        {
                            this.currentHeader.hide();
                        }
                        else 
                        {
                            this.currentHeader.tweenIn(this._freespinLevel);
                            this._numberFreespins = this._conductor.response.nextSpin.freeSpinsRemaining;
                            this.updateHeader();
                            syndicate(this, SERVICE_FREESPIN_OPEN);
                        }
                        break;
                    }
                    case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                    {
                        if (this._conductor.settings.autoContinueFreeSpinAfterBonus) 
                        {
                            this._isStartOrContinue = true;
                            this.setCurrentHeader();
                            this.currentHeader.show(this._freespinLevel);
                            this._numberFreespins = this._conductor.response.nextSpin.freeSpinsRemaining;
                            this.updateHeader();
                            new org.as3lib.kitchensync.action.KSFunction(this.tryDoNextFreeSpin, this._conductor.settings.startFreeSpinsDelay).start();
                            syndicate(this, SERVICE_FREESPIN_OPEN);
                        }
                        break;
                    }
                    case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                    {
                        loc1 = this._conductor.state.previousState;
                        switch (loc1) 
                        {
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                            case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                            {
                                break;
                            }
                            default:
                            {
                                this.currentHeader.tweenOut();
                                break;
                            }
                        }
                        break;
                    }
                    default:
                    {
                        this.currentHeader.hide();
                        break;
                    }
                }
            }
            else if (this._hasConductor) 
            {
                loc1 = this._conductor.response.slot.state;
                switch (loc1) 
                {
                    case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                    case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                    {
                        if (this._conductor.response.framework.state != mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
                        {
                            this._afterBackToGameWaiting = loc1 = true;
                            loc1;
                        }
                        break;
                    }
                }
            }
            else 
            {
                _trace("WARNING: FreeSpins might have missed a trigger after a back to game - " + toString(), "error", this, 13289984);
            }
            return;
        }

        protected function onReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._reelsCanSpin = loc1 = true;
            loc1;
            if (this.isReady) 
            {
                if (this._conductor.response.nextSpin != null) 
                {
                    if (this._conductor.response.nextSpin.freeSpinsRetriggered) 
                    {
                        this.doRetriggerCountup();
                    }
                }
                new org.as3lib.kitchensync.action.KSFunction(this.onFsMinDelayComplete, 500).start();
            }
            this._lockHeader = loc1 = false;
            loc1;
            this.doPostReels();
            return;
        }

        protected function onFsMinDelayComplete():void
        {
            var loc1:*;
            this._fsMinDelayComplete = loc1 = true;
            loc1;
            return;
        }

        protected function onFreeSpins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            this._isStartOrContinue = loc1 = true;
            loc1;
            this.tryDoNextFreeSpin();
            return;
        }

        protected function onCountUpStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this.canDo) 
                {
                    try 
                    {
                        this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
                    }
                    catch (e:Error)
                    {
                    };
                    this._conductor.countup.event.addEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
                }
            }
            return;
        }

        protected function doPostReels():void
        {
            if (this.isReady) 
            {
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                    {
                        if (this._conductor.response.wins.numberOf == 0) 
                        {
                            this.updateHeader();
                            this.sendFreeSpinsComplete();
                        }
                        break;
                    }
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                    {
                        if (this._conductor.response.wins.numberOf == 0) 
                        {
                            this.updateHeader();
                        }
                        this.tryDoNextFreeSpin();
                        break;
                    }
                }
            }
            return;
        }

        protected function onCountUpComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this.canDo) 
            {
                this._countupComplete = true;
                this.updateHeader();
                if (this._conductor.freeSpinsData.freeSpinsRemaining != 0) 
                {
                    this.tryDoNextFreeSpin();
                }
                else 
                {
                    loc1 = mgs.aurora.games.logicBlocks.data.RollingReelsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME));
                    if (!(this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) && !(loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE) || loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING))) 
                    {
                        this.sendFreeSpinsComplete();
                    }
                }
            }
            try 
            {
                this._conductor.countup.event.removeEventListener(mgs.aurora.games.logicBlocks.agents.CountUpAgent.EVENT_COUNTUP, this.counter);
            }
            catch (e:Error)
            {
            };
            return;
        }

        protected function freespinsTriggered():void
        {
            if (!this._conductor.response.nextSpin.freeSpinsRetriggered) 
            {
                var loc1:*;
                this._numberFreespins = loc1 = this._conductor.response.nextSpin.freeSpinsRemaining;
                loc1;
            }
            this.updateHeader();
            syndicate(this, SERVICE_FREESPIN_TRIGGERED);
            return;
        }

        protected function doRetriggerCountup():void
        {
            if (this.isReady) 
            {
                var loc1:*;
                this._timer = loc1 = new flash.utils.Timer(this.currentHeader.data.winCountUpTime);
                loc1;
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.updateRemaining);
                }
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.updateRemaining);
                this._timer.start();
            }
            return;
        }

        protected function updateRemaining(arg1:flash.events.TimerEvent):void
        {
            var loc1:*;
            var loc2:*;
            loc1._numberFreespins = loc2 = ((loc1 = this)._numberFreespins + 1);
            this.currentHeader.remaining = loc1 = int(this._numberFreespins).toString();
            loc1;
            if (this._numberFreespins >= this._conductor.freeSpinsData.freeSpinsRemaining) 
            {
                this._numberFreespins = loc1 = this._conductor.freeSpinsData.freeSpinsRemaining;
                loc1;
                this.currentHeader.remaining = loc1 = int(this._numberFreespins).toString();
                loc1;
                this._timer.stop();
                this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.updateRemaining);
                this.currentHeader.playRetrigger();
            }
            return;
        }

        protected function tryDoNextFreeSpin():void
        {
            if (this.isReady && this.canDo && this.canDoNextFreeSpin) 
            {
                this.reset();
                var loc1:*;
                this._numberFreespins = loc1 = this._conductor.freeSpinsData.freeSpinsRemaining;
                loc1;
                this.updateHeader();
                if (this._numberFreespins > 0) 
                {
                    var loc2:*=((loc1 = this)._numberFreespins - 1);
                    loc1._numberFreespins = loc2;
                    (loc1 = this)._numberFreespins;
                }
                new org.as3lib.kitchensync.action.KSFunction(this.sendFreespin, this.currentHeader.data.pauseBeforeSpin, this._numberFreespins).start();
            }
            return;
        }

        protected function sendFreespin(arg1:int):void
        {
            this.updateHeader();
            syndicate(this, SERVICE_FREESPIN, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function retriggerSyndication():void
        {
            syndicate(this, SERVICE_FREESPIN_RETRIGGERED);
            return;
        }

        protected function retriggerComplete(arg1:flash.events.Event):void
        {
            this.retriggerSyndication();
            var loc1:*;
            this._remainingCounterDone = loc1 = true;
            loc1;
            this.tryDoNextFreeSpin();
            return;
        }

        protected function counter(arg1:mgs.aurora.games.common.components.generic.events.CounterEvent):void
        {
            if (this.isReady) 
            {
                var loc1:*;
                this.currentHeader.total = loc1 = (this._conductor.previousSpinTotalWin + uint(arg1.value) * this._conductor.betData.chipSize).toString();
                loc1;
            }
            return;
        }

        protected function sendFreeSpinsComplete():void
        {
            syndicate(this, SERVICE_FREESPIN_COMPLETE_DELAY_START);
            new org.as3lib.kitchensync.action.KSFunction(syndicate, this._conductor.settings.delayAfterFreespins, this, SERVICE_FREESPIN_COMPLETE).start();
            return;
        }

        protected function tweenOutComplete(arg1:flash.events.Event):void
        {
            return;
        }

        protected function tweenInComplete(arg1:flash.events.Event):void
        {
            if (this._conductor.settings.freespinAutoStart) 
            {
                this.tryDoNextFreeSpin();
            }
            return;
        }

        protected function reset():void
        {
            var loc1:*;
            this._isStartOrContinue = loc1 = false;
            loc1;
            this._reelsCanSpin = loc1 = false;
            loc1;
            this._reTriggered = loc1 = false;
            loc1;
            this._remainingCounterDone = loc1 = false;
            loc1;
            this._countupComplete = loc1 = false;
            loc1;
            this._fsMinDelayComplete = loc1 = false;
            loc1;
            this._fsTimerComplete = loc1 = false;
            loc1;
            this._winDisplayComplete = loc1 = false;
            loc1;
            this._winAnimComplete = loc1 = false;
            loc1;
            return;
        }

        protected function get canDoNextFreeSpin():Boolean
        {
            if (!this._reelsCanSpin || this._conductor.freeSpinsData.freeSpinsRemaining == 0 || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
            {
                return false;
            }
            if (this._conductor.response.wins.numberOf == 0 || this._isStartOrContinue) 
            {
                return true;
            }
            var loc1:*=mgs.aurora.games.logicBlocks.data.RollingReelsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.RollingReelsData.PUBLISHER_NAME));
            if (loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING) || loc1.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE)) 
            {
                return false;
            }
            if (this._conductor.settings.freespinContiCountup) 
            {
                if (this._countupComplete) 
                {
                    if (this._reTriggered) 
                    {
                        if (this._remainingCounterDone) 
                        {
                            return true;
                        }
                    }
                    else 
                    {
                        return true;
                    }
                }
            }
            if (this._conductor.settings.freespinContiTimeComplete || this._conductor.settings.freespinContiTimeCompleteQuickSpinOnly && this._conductor.options.isQuickSpin) 
            {
                if (this._fsTimerComplete) 
                {
                    return true;
                }
            }
            if (this._conductor.settings.freespinContiTimeAndCountupComplete) 
            {
                if (this._countupComplete && this._fsTimerComplete) 
                {
                    if (this._reTriggered) 
                    {
                        if (this._remainingCounterDone) 
                        {
                            return true;
                        }
                    }
                    else 
                    {
                        return true;
                    }
                }
            }
            if (this._conductor.settings.freespinContiWinComplete && this._winDisplayComplete) 
            {
                return true;
            }
            if (this._conductor.settings.freespinContiAnimComplete && this._winAnimComplete) 
            {
                return true;
            }
            return false;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    return true && !this._lockHeader;
                }
                default:
                {
                    return false;
                }
            }
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._gotConfig;
        }

        protected function cleanupHeaders():void
        {
            var loc1:*=0;
            while (loc1 < this._freespinModalHeaders.length) 
            {
                this._freespinModalHeaders[loc1].removeEventListener(mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader.EVENT_TWEEN_IN_COMPLETE, this.tweenInComplete);
                this._freespinModalHeaders[loc1].removeEventListener(mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader.EVENT_TWEEN_OUT_COMPLETE, this.tweenOutComplete);
                this._freespinModalHeaders[loc1].removeEventListener(mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader.EVENT_RETRIGGER_COMPLETE, this.retriggerComplete);
                this._freespinModalHeaders[loc1].dispose();
                ++loc1;
            }
            return;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this.cleanupHeaders();
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN_COMPLETE_DELAY_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN_TRIGGERED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN_RETRIGGERED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN_OPEN));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_FREESPINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTimeExpire, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.SERVICE_TIME_DELAY_REACHED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinAnimation, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_WIN_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.triggerAnimation, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_TRIGGER_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSequenceComplete, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.SERVICE_STOP_WIN_DISPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountUpStart, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_BEGIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCountUpComplete, mgs.aurora.games.logicBlocks.agents.CountUpAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.CountUpAgent.SERVICE_COUNTUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpins, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_FREE_SPINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 4);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTriggerAnimationStart, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_TRIGGER_ANIM);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGames, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGames, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGames, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGames, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_CONTINUE_BASE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGames, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SWITCH_GAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsComplete, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_COMPLETE);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._gotConfig = true;
            this._configXML = arg1.data as XMLList;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewFreeSpinsReady && loc1.level == mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.LEVEL_MUST_HAVE && !(loc1.view.search(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.FREESPINS + "_REELSET") == -1)) 
            {
                this._viewFreeSpinsReady = true;
            }
            if (!this._viewReady && !(loc1.view.search(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.FREESPINS + "_REELSET") == -1)) 
            {
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._viewReady = true;
                    }
                    ++loc3;
                }
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            this.checkDelayedView();
            return;
        }

        internal function checkDelayedView():void
        {
            if (this._viewFreeSpinsReady && this.canDo) 
            {
                if (this._afterTriggerWaiting) 
                {
                    this.triggerAnimation();
                }
                else if (this._afterBackToGameWaiting) 
                {
                    this.onBackToGame();
                }
            }
            return;
        }

        protected function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._reelsCanSpin = true;
            if (mgs.aurora.games.framework.StageReference.getLevel("FreeSpinHeader") == null) 
            {
                _trace("WARNING: No layer [FreeSpinHeader] found the layers node. Please check your config! - " + toString(), "error", this, 13289984);
                return;
            }
            this._freespinLevel = mgs.aurora.games.framework.StageReference.getLevel("FreeSpinHeader") as flash.display.MovieClip;
            this.setupHeaders();
            this._configXML = null;
            this._multiplierText = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("FREESPIN_MULTIPLIER_TEXT");
            this._numberFreespins = this._conductor.response.nextSpin.freeSpinsRemaining;
            if (this.canDo) 
            {
                if (this._afterTriggerWaiting || this._afterBackToGameWaiting) 
                {
                    this.checkDelayedView();
                }
                else 
                {
                    this.setCurrentHeader();
                    this.currentHeader.show(this._freespinLevel);
                    this._numberFreespins = this._conductor.response.nextSpin.freeSpinsRemaining;
                    this.updateHeader();
                    syndicate(this, SERVICE_FREESPIN_OPEN);
                }
            }
            return;
        }

        protected function setupHeaders():void
        {
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=this._configXML.header;
            var loc2:*=loc1.length();
            if (loc2 > 0) 
            {
                this._freespinModalHeaders = new Vector.<mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader>(loc2);
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    loc4 = loc1[loc3];
                    loc5 = new mgs.aurora.slots.components.freespins.data.FreeSpinsModalData(loc4);
                    this._freespinModalHeaders[loc3] = new mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader(loc5);
                    this._freespinModalHeaders[loc3].addEventListener(mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader.EVENT_TWEEN_IN_COMPLETE, this.tweenInComplete);
                    this._freespinModalHeaders[loc3].addEventListener(mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader.EVENT_TWEEN_OUT_COMPLETE, this.tweenOutComplete);
                    this._freespinModalHeaders[loc3].addEventListener(mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader.EVENT_RETRIGGER_COMPLETE, this.retriggerComplete);
                    ++loc3;
                }
            }
            return;
        }

        protected function setCurrentHeader():void
        {
            var loc1:*=this._currentHeaderIndex;
            var loc2:*=0;
            while (loc2 < this._freespinModalHeaders.length) 
            {
                if (this._freespinModalHeaders[loc2].activeInView(this._conductor.view.view)) 
                {
                    this._currentHeaderIndex = loc2;
                    break;
                }
                ++loc2;
            }
            if (this._currentHeaderIndex != loc1) 
            {
                this.currentHeader.init();
            }
            return;
        }

        protected function get currentHeader():mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader
        {
            if (this._currentHeaderIndex < 0 || this._currentHeaderIndex >= this._freespinModalHeaders.length) 
            {
                throw new Error("Attempting to get current header in DynamicFreeSpinsServer when index is invalid : " + this._currentHeaderIndex);
            }
            return this._freespinModalHeaders[this._currentHeaderIndex];
        }

        protected function updateHeader():void
        {
            this.currentHeader.remaining = int(this._numberFreespins).toString();
            this.currentHeader.total = (this._conductor.winsThisSpin + this._conductor.previousSpinTotalWin).toString();
            this.currentHeader.multiplier = mgs.aurora.games.common.components.utils.StringFormatting.insertArgs(this._multiplierText, this._conductor.response.nextSpin.freeSpinMultiplier.toString());
            return;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        protected function onRollingReelsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.freeSpinsData.freeSpinsRemaining != 0) 
            {
                this.tryDoNextFreeSpin();
            }
            else if (this._conductor.response.framework.state != mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
            {
                this.sendFreeSpinsComplete();
            }
            return;
        }

        protected function onSequenceComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._winDisplayComplete = true;
            this.tryDoNextFreeSpin();
            return;
        }

        protected function triggerAnimation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._afterTriggerWaiting = false;
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS_AFTER_BONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS:
                    {
                        this.freespinsTriggered();
                        this.currentHeader.tweenIn(this._freespinLevel);
                        this.updateHeader();
                        syndicate(this, SERVICE_FREESPIN_OPEN);
                        break;
                    }
                }
            }
            else if (this._hasConductor) 
            {
                loc1 = this._conductor.response.slot.state;
                switch (loc1) 
                {
                    case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                    case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                    {
                        if (this._conductor.response.framework.state != mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
                        {
                            this._afterTriggerWaiting = true;
                        }
                        break;
                    }
                }
            }
            else 
            {
                _trace("WARNING: FreeSpins might have missed a trigger - " + toString(), "error", this, 13289984);
            }
            return;
        }

        protected function onWinAnimation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._winAnimComplete = true;
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                {
                    break;
                }
                default:
                {
                    this.tryDoNextFreeSpin();
                    break;
                }
            }
            return;
        }

        protected function onTimeExpire(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._fsTimerComplete = true;
            this.tryDoNextFreeSpin();
            return;
        }

        protected const COINS:String="coins";

        protected const CREDITS:String="credits";

        protected const BOTH:String="both";

        public static const SERVICE_FREESPIN_OPEN:String="FREESPIN_OPEN";

        public static const PUBLISHER_NAME:String="PUBLISHER_FREESPINS";

        public static const SERVICE_FREESPIN:String="FREESPIN";

        public static const SERVICE_FREESPIN_COMPLETE:String="FREESPIN_COMPLETE";

        public static const SERVICE_FREESPIN_COMPLETE_DELAY_START:String="FREESPIN_COMPLETE_DELAY_START";

        public static const SERVICE_FREESPIN_TRIGGERED:String="FREESPIN_TRIGGERED";

        public static const SERVICE_FREESPIN_RETRIGGERED:String="FREESPIN_RETRIGGERED";

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _viewReady:Boolean=false;

        protected var _gotConfig:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _configXML:XMLList;

        protected var _currentHeaderIndex:int=-1;

        protected var _multiplierText:String;

        protected var _numberFreespins:int=0;

        internal var _isStartOrContinue:Boolean=false;

        internal var _afterTriggerWaiting:Boolean=false;

        internal var _reelsCanSpin:Boolean=false;

        internal var _fsTimerComplete:Boolean=false;

        internal var _fsMinDelayComplete:Boolean=false;

        internal var _afterBackToGameWaiting:Boolean=false;

        internal var _viewFreeSpinsReady:Boolean=false;

        internal var _lockHeader:Boolean=false;

        protected var _freespinModalHeaders:__AS3__.vec.Vector.<mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader>;

        internal var _winDisplayComplete:Boolean=false;

        internal var _winAnimComplete:Boolean=false;

        internal var _reTriggered:Boolean=false;

        internal var _remainingCounterDone:Boolean=false;

        internal var _timer:flash.utils.Timer;

        protected var _freespinLevel:flash.display.MovieClip;

        internal var _countupComplete:Boolean=false;
    }
}


//            class DynamicMiniPaytableServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.slots.components.paytable.data.dyn.*;
    
    public class DynamicMiniPaytableServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function DynamicMiniPaytableServer()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.DynamicMiniPaytableServer");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            this.defineSubscribers();
            return;
        }

        public function get canShow():Boolean
        {
            var loc1:*=false;
            var loc2:*=this._conductor.state.state;
            switch (loc2) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                {
                    loc1 = true;
                    break;
                }
            }
            return !this._reelsSpining && !this._dialogShow && !this._conductor.autoplay.autoPlayActive && !this._conductor.freeSpinsData.isFreespinsActive && loc1 && !this._isRollover;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConductor = true;
            this._conductor = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onVisArea(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasVisArea = true;
            this._visArea = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfigDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConfigXML = true;
            this._configXML = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onReelsStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelsSpining = true;
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data != mgs.aurora.games.logicBlocks.agents.RespinAgent.ACTION_ROLLOUT) 
            {
                if (arg1.data == mgs.aurora.games.logicBlocks.agents.RespinAgent.ACTION_ROLLOVER) 
                {
                    this._isRollover = true;
                }
            }
            else 
            {
                this._isRollover = false;
            }
            this.remove();
            return;
        }

        internal function onReelStop(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelsSpining = false;
            this._isRollover = false;
            return;
        }

        internal function closePaytable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.remove();
            return;
        }

        internal function onDialogClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._dialogShow = false;
            return;
        }

        internal function onDialogOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._dialogShow = true;
            return;
        }

        internal function onWayWinClick(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this.remove();
            return;
        }

        internal function setup():void
        {
            var loc8:*=0;
            var loc9:*=null;
            var loc10:*=0;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._symbolData = new flash.utils.Dictionary();
            this._level = this._configXML.@level;
            this._levelHitArea = this._configXML.@hitLevel;
            this._symbolDataPrefix = this._configXML.@symbolDataPrefix;
            this._targetName = this._configXML.@targetName;
            this._startLeftToRight = this._configXML.@startLeftToRight;
            this._stopLeftToRight = this._configXML.@stopLeftToRight;
            this._startRightToLeft = this._configXML.@startRightToLeft;
            this._stopRightToLeft = this._configXML.@stopRightToLeft;
            this._container = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._configXML.@displayContainerLinkage);
            this._placeHolder = this._container.getChildByName(this._targetName) as flash.display.MovieClip;
            this._paytables = new Vector.<flash.display.MovieClip>(this._conductor.reelData.numberOfSymbols);
            var loc1:*=0;
            while (loc1 < this._conductor.reelData.numberOfSymbols) 
            {
                this._paytables[loc1] = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._symbolDataPrefix + loc1);
                ++loc1;
            }
            this._hitAreas = new Vector.<flash.geom.Rectangle>(this._conductor.reelData.rows * this._conductor.reelData.columns);
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=this._conductor.reelData.rows;
            var loc6:*=0;
            while (loc6 < this._conductor.reelData.rows) 
            {
                --loc5;
                loc8 = 0;
                while (loc8 < this._conductor.reelData.columns) 
                {
                    loc2 = this._conductor.reelData.x + (loc8 * this._conductor.reelData.width + loc8 * this._conductor.reelData.xSpacing);
                    loc3 = this._conductor.reelData.y + (loc6 * this._conductor.reelData.height + loc6 * this._conductor.reelData.ySpacing);
                    loc9 = new flash.geom.Rectangle(loc2, loc3, this._conductor.reelData.width, this._conductor.reelData.height);
                    loc10 = loc5 * this._conductor.reelData.columns + loc8;
                    this._hitAreas[loc10] = loc9;
                    ++loc8;
                }
                ++loc6;
            }
            var loc7:*;
            (loc7 = new flash.display.Shape()).graphics.beginFill(65280, 0);
            loc7.graphics.drawRect(this._conductor.reelData.x, this._conductor.reelData.y, (this._conductor.reelData.width + this._conductor.reelData.xSpacing) * this._conductor.reelData.columns, (this._conductor.reelData.height + this._conductor.reelData.ySpacing) * this._conductor.reelData.rows);
            loc7.graphics.endFill();
            mgs.aurora.games.framework.StageReference.getLevel(this._levelHitArea).addChild(loc7);
            mgs.aurora.games.framework.StageReference.getLevel(this._levelHitArea).addEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onClick);
            this.parseFields(this._configXML[0].symbol);
            return;
        }

        internal function parseFields(arg1:XMLList):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=arg1;
            for each (loc2 in loc4) 
            {
                loc1 = new mgs.aurora.slots.components.paytable.data.dyn.SymbolData(loc2);
                this._symbolData[loc1.id] = loc1;
            }
            return;
        }

        internal function onClickStage(arg1:flash.events.MouseEvent):void
        {
            if (this.isReady) 
            {
                mgs.aurora.games.framework.StageReference.stage.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onClickStage);
                this.remove();
            }
            return;
        }

        internal function onClick(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=false;
            if (this.canShow && this.isReady) 
            {
                loc1 = 0;
                while (loc1 < this._hitAreas.length) 
                {
                    loc2 = this._hitAreas[loc1] as flash.geom.Rectangle;
                    loc3 = new flash.geom.Point(mgs.aurora.games.framework.StageReference.stage.mouseX, mgs.aurora.games.framework.StageReference.stage.mouseY);
                    if (loc2.containsPoint(loc3)) 
                    {
                        mgs.aurora.games.framework.StageReference.stage.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onClickStage);
                        this._container.x = loc2.x;
                        this._container.y = loc2.y;
                        if (this._placeHolder.numChildren > 0) 
                        {
                            this._placeHolder.removeChild(this._placeHolder.getChildByName("table"));
                        }
                        loc4 = loc1 % this._conductor.reelData.columns + 1 == this._conductor.reelData.columns;
                        if (!(loc1 == this._current) && this._container.parent == null) 
                        {
                            this._current = loc1;
                            mgs.aurora.games.framework.StageReference.getLevel(this._level).addChild(this._container);
                            if (loc4) 
                            {
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._container, this.addMinipaytable, 0, this._startRightToLeft, this._stopRightToLeft);
                            }
                            else 
                            {
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._container, this.addMinipaytable, 0, this._startLeftToRight, this._stopLeftToRight);
                            }
                            syndicate(this, SERVICE_SHOW);
                        }
                        else if (!(loc1 == this._current) && !(this._container.parent == null)) 
                        {
                            this._current = loc1;
                            if (loc4) 
                            {
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._container, this.addMinipaytable, 0, this._startRightToLeft, this._stopRightToLeft);
                            }
                            else 
                            {
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._container, this.addMinipaytable, 0, this._startLeftToRight, this._stopLeftToRight);
                            }
                            syndicate(this, SERVICE_SHOW);
                        }
                        else if (loc1 == this._current && !(this._container.parent == null)) 
                        {
                            this.remove();
                        }
                    }
                    ++loc1;
                }
            }
            else 
            {
                this.remove();
            }
            return;
        }

        internal function addMinipaytable(arg1:flash.display.MovieClip):void
        {
            var mov:flash.display.MovieClip;

            var loc1:*;
            mov = arg1;
            if (this.isReady) 
            {
                try 
                {
                    mov.stop();
                    this._placeHolder.addChild(this._paytables[this._conductor.response.visarea.symbolsArray[this._current]]).name = "table";
                    this.setupTextFields(flash.display.DisplayObjectContainer(this._placeHolder.getChildByName("table")));
                    mgs.aurora.games.framework.StageReference.stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onClickStage);
                }
                catch (e:Error)
                {
                    _trace(e.message, "error", this, 16711680);
                }
            }
            return;
        }

        internal function setupTextFields(arg1:flash.display.DisplayObjectContainer):void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=String(this._conductor.response.visarea.symbolsArray[this._current]);
            var loc2:*=mgs.aurora.slots.components.paytable.data.dyn.SymbolData(this._symbolData[loc1]);
            var loc5:*=0;
            while (loc5 < loc2.numFields) 
            {
                loc3 = loc2.getField(loc5);
                (loc4 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc3.type)).text = loc3.value;
                loc4.addTo(flash.display.DisplayObjectContainer(arg1.getChildByName(loc2.attachPrefix + loc5)));
                ++loc5;
            }
            return;
        }

        internal function remove():void
        {
            if (this.isReady) 
            {
                if (this._container.parent != null) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this._level).removeChild(this._container);
                    this._current = -1;
                    syndicate(this, SERVICE_HIDE);
                }
            }
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onVisArea, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_VISAREA);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigDone, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_MINIPAYTABLE_CONFIG);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStart, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelsStart, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStop, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClose, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClose, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClose, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.closePaytable, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.closePaytable, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogClose, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_HIDE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDialogOpen, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FeatureDialogAgent.SERVICE_SHOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWayWinClick, mgs.aurora.games.logicBlocks.agents.WayWinsSliderAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WayWinsSliderAgent.SERVICE_EVENT);
            return;
        }

        public override function dispose():void
        {
            var i:flash.geom.Rectangle;
            var j:flash.geom.Rectangle;

            var loc1:*;
            i = null;
            j = null;
            try 
            {
                mgs.aurora.games.framework.StageReference.getLevel(this._levelHitArea).removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onClick, false);
                mgs.aurora.games.framework.StageReference.stage.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onClickStage);
                this._level = null;
                this._levelHitArea = null;
                this._symbolDataPrefix = null;
                this._targetName = null;
                this._startLeftToRight = null;
                this._stopLeftToRight = null;
                this._startRightToLeft = null;
                this._stopRightToLeft = null;
                this._configXML = null;
                loc2 = 0;
                var loc3:*=this._hitAreas;
                for each (i in loc3) 
                {
                    i = null;
                }
                this._hitAreas = null;
                this._visArea = null;
                this._container = null;
                this._placeHolder = null;
                loc2 = 0;
                loc3 = this._paytables;
                for each (j in loc3) 
                {
                    j = null;
                }
                this._paytables = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasConfigXML && this._hasVisArea && this._hasView;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_MINI_PAYTABLE";

        public static const SERVICE_SHOW:String="SERVICE_SHOW";

        public static const SERVICE_HIDE:String="SERVICE_HIDE";

        internal var _level:String;

        internal var _current:int=-1;

        internal var _dialogShow:Boolean=false;

        internal var _reelsSpining:Boolean=false;

        internal var _isRollover:Boolean=false;

        internal var _configXML:XMLList;

        internal var _visArea:mgs.aurora.games.logicBlocks.data.types.VisAreaPacket;

        internal var _hasConductor:Boolean=false;

        internal var _hasVisArea:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _hasView:Boolean=false;

        internal var _isConfig:Boolean=false;

        internal var _levelHitArea:String;

        internal var _symbolDataPrefix:String;

        internal var _targetName:String;

        internal var _startLeftToRight:String;

        internal var _stopLeftToRight:String;

        internal var _startRightToLeft:String;

        internal var _stopRightToLeft:String;

        internal var _placeHolder:flash.display.MovieClip;

        internal var _paytables:__AS3__.vec.Vector.<flash.display.MovieClip>;

        internal var _hitAreas:__AS3__.vec.Vector.<flash.geom.Rectangle>;

        internal var _symbolData:flash.utils.Dictionary;

        internal var _hasConfigXML:Boolean=false;

        internal var _container:flash.display.MovieClip;
    }
}


//            class DynamicPaytableServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.paytable.data.dyn.*;
    import mgs.aurora.slots.components.paytable.paytable.dyn.*;
    
    public class DynamicPaytableServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function DynamicPaytableServer()
        {
            this._ignoredClicks = new flash.utils.Dictionary();
            super(mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer");
            return;
        }

        protected function onPreviousPage(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            syndicate(this, SERVICE_PREVIOUS, null);
            return;
        }

        protected function onPaytableClosed(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            this._visible = false;
            syndicate(this, SERVICE_BACK_TO_GAME, null);
            this._paytable.hide();
            return;
        }

        protected function onHide(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            syndicate(this, SERVICE_ON_CLOSE, null);
            return;
        }

        internal function onConsoleClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this.isReady && this.canShow && this._visible) 
            {
                loc1 = arg1.data;
                if (!this._ignoredClicks[loc1] && !(loc1 == "paytable")) 
                {
                    this._visible = false;
                    this._paytable.hide();
                }
            }
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_CLOSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NEXT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PREVIOUS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BACK_TO_GAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACHIEVEMENT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACHIEVEMENT_NO_ASSETS));
            this.defineSubscribers();
            return;
        }

        internal function onWinLine(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._gotConfigXML && this._hasView;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytable, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConsoleClick, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_CLICK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinLine, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.SERVICE_WIN_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onServiceWins, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigLoaded, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleOpen, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNotification, mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.SERVICE_ACHIEVEMENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNotificationClick, mgs.aurora.games.logicBlocks.agents.AchievementNotification.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AchievementNotification.SERVICE_NOTIFICATION_CLICKED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGameSummaryScreenOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            return;
        }

        internal function onNotification(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=NaN;
            if (this._config.@type == DYNAMIC_ACHIEVEMENT) 
            {
                loc1 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationPlaques(arg1.data);
                loc2 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationPlacementPos();
                loc3 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationPlacementLayer();
                loc4 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationFadeTime();
                loc5 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationFadeTransition();
                loc6 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationAutoFadeWinIds();
                loc7 = mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).getNotificationAutoFadeTime();
                if (loc1 && loc1.length > 0) 
                {
                    syndicate(this, SERVICE_ACHIEVEMENT, new mgs.aurora.games.framework.TransportLayer({"assets":loc1, "posn":loc2, "layer":loc3, "time":loc4, "transition":loc5, "winIds":loc6, "autoFadeTime":loc7}));
                }
                else 
                {
                    syndicate(this, SERVICE_ACHIEVEMENT_NO_ASSETS);
                }
            }
            return;
        }

        internal function onNotificationClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this.canShow) 
            {
                this._visible = true;
                mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(this._paytable).openAchievementPaytablePage();
            }
            return;
        }

        internal function onFreeGameSummaryScreenOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._visible) 
            {
                this._visible = false;
                this._paytable.hide();
            }
            return;
        }

        internal function onGambleOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._visible) 
            {
                this._visible = false;
                this._paytable.hide();
            }
            return;
        }

        internal function onServiceWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        internal function onPaytable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady && this.canShow && !this._visible) 
            {
                this._visible = true;
                this._paytable.show();
            }
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            this.attemptSetup();
            return;
        }

        internal function onConfigLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._config = new XML(arg1.data);
            this._gotConfigXML = true;
            this.attemptSetup();
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            this.attemptSetup();
            return;
        }

        internal function attemptSetup():void
        {
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            var loc1:*=null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc2:*=uint(this._config.@type);
            switch (loc2) 
            {
                case DYNAMIC_ACHIEVEMENT:
                {
                    this._paytable = new mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable(new mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData(this._config), this._conductor);
                    break;
                }
                case DYNAMIC:
                default:
                {
                    this._paytable = new mgs.aurora.slots.components.paytable.paytable.dyn.DynamicPaytable(new mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData(this._config));
                    break;
                }
            }
            this._paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.CLOSE, this.onPaytableClosed, false, 0, true);
            this._paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.NEXT, this.onNextPage, false, 0, true);
            this._paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.OPEN, this.onPaytableOpened, false, 0, true);
            this._paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.PREVIOUS, this.onPreviousPage, false, 0, true);
            this._paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.HIDE, this.onHide, false, 0, true);
            loc2 = 0;
            var loc3:*=this._config.ignoreConsoleClick;
            for each (loc1 in loc3) 
            {
                this._ignoredClicks[String(loc1.@id)] = 1;
            }
            return;
        }

        protected function onPaytableOpened(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            syndicate(this, SERVICE_ON_OPEN, null);
            return;
        }

        protected function onNextPage(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            syndicate(this, SERVICE_NEXT, null);
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_PAYTABLES";

        public static const SERVICE_ON_CLOSE:String="ON_CLOSE";

        public static const SERVICE_NEXT:String="NEXT";

        public static const SERVICE_PREVIOUS:String="PREVIOUS";

        public static const SERVICE_BACK_TO_GAME:String="BACK_TO_GAME";

        public static const SERVICE_ON_OPEN:String="ON_OPEN";

        public static const SERVICE_ACHIEVEMENT:String="SERVICE_ACHIEVEMENT";

        public static const SERVICE_ACHIEVEMENT_NO_ASSETS:String="SERVICE_ACHIEVEMENT_NO_ASSETS";

        public static const DYNAMIC:uint=0;

        public static const DYNAMIC_ACHIEVEMENT:uint=1;

        protected var _paytable:mgs.aurora.slots.components.paytable.paytable.dyn.DynamicPaytable;

        protected var _config:XML;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _isConfig:Boolean;

        internal var _hasConductor:Boolean;

        internal var _gotConfigXML:Boolean;

        internal var _hasView:Boolean;

        internal var _visible:Boolean=false;

        protected var _ignoredClicks:flash.utils.Dictionary;
    }
}


//            class GambleServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import flash.events.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.events.*;
    import mgs.aurora.slots.components.masterGamble.*;
    import mgs.aurora.slots.components.masterGamble.data.*;
    import org.as3lib.kitchensync.action.*;
    
    public class GambleServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function GambleServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.GambleServer");
            this.defineSubscribers();
            return;
        }

        internal function hide():void
        {
            if (this._hasConductor) 
            {
                if (this.isReady) 
                {
                    this._gamble.hide();
                }
                syndicate(this, SERVICE_COMPLETED);
            }
            return;
        }

        internal function updateGambleView():void
        {
            if (this.isReady) 
            {
                this._gamble.suitPays = this._conductor.response.player.totalWin * this._gamble.data.suitWinMultiplier;
                this._gamble.colorPays = this._conductor.response.player.totalWin * this._gamble.data.colorWinMultiplier;
                this._gamble.refreshPreviousCard(this._conductor.response.gamble.prevCards);
                if (this._conductor.response.gamble.state != 1) 
                {
                    if (this._conductor.response.gamble.state != 3) 
                    {
                        if (this._conductor.response.gamble.state == 4) 
                        {
                            this._gamble.showGambleLost(this._conductor.response.gamble.card);
                        }
                    }
                    else 
                    {
                        this._gamble.showGambleLimit(this._conductor.response.gamble.card);
                    }
                }
                else 
                {
                    this._gamble.showGambleView();
                }
            }
            return;
        }

        internal function checkBalance():Boolean
        {
            if (this._conductor.freeGamesData.isFreeGameActive || this._conductor.freeSpinsData.isFreespinsActive) 
            {
                return true;
            }
            if (mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.balance - this._conductor.response.player.totalWin < 0) 
            {
                this._gamble.enableAllButtons();
                syndicate(this, SERVICE_INSUFFICIENT, null);
                return false;
            }
            return true;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this._gamble = new mgs.aurora.slots.components.masterGamble.MasterGamble(new mgs.aurora.slots.components.masterGamble.data.MasterGambleData(this._config));
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_FLIP_START, this.cardFlipStart);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_FLIP_COMPLETE, this.cardFlipComplete);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_RED, this.redClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_BLACK, this.blackClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_HEART, this.heartsClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_DIAMOND, this.diamondsClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_SPADE, this.spadesClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_CLUB, this.clubsClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_COLLECT, this.collectClicked);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_GAMBLE_COMPLETE, this.gambleComplete);
            this._gamble.addEventListener(mgs.aurora.slots.components.masterGamble.MasterGamble.EVENT_FLIP_REVEALED, this.onCardRevealed);
            _trace(this._conductor.response.gamble.prevCards);
            this._gamble.refreshPreviousCard(this._conductor.response.gamble.prevCards);
            this._gamble.disableAllButtons();
            var loc1:*=this._conductor.response.gamble.state;
            switch (loc1) 
            {
                case 3:
                case 4:
                {
                    this.show();
                    break;
                }
                default:
                {
                    loc1 = this._conductor.state.state;
                    switch (loc1) 
                    {
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                        case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                        {
                            this.show();
                            break;
                        }
                    }
                    break;
                }
            }
            return;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._gotConfigXML;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAMBLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACTION));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COLLECT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_READY_TO_PLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_LIMIT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LOST));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INSUFFICIENT));
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigLoaded, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_COIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC_LINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_COINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INCREMENT_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPaylineAgent.SERVICE_UPDATE_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGamble, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfigLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._config = new XML(arg1.data);
            this._gotConfigXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._collectReset = true;
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_COMPLETE) 
                {
                    this.hide();
                }
            }
            return;
        }

        internal function onGamble(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._gamble.enableAllButtons();
                this._gamble.refreshPreviousCard(this._conductor.response.gamble.prevCards);
                this.show();
            }
            else if (this._hasConductor) 
            {
                syndicate(this, SERVICE_OPEN);
            }
            return;
        }

        internal function onCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._hasConductor && this._collectReset && this._conductor.response.gamble.state == 1) 
            {
                if (this.isReady) 
                {
                    this._gamble.disableAllButtons();
                }
                var loc1:*=this._conductor.state.state;
                switch (loc1) 
                {
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTER_FREESPINS:
                    case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTERBONUS:
                    {
                        this._collectReset = false;
                        syndicate(this, SERVICE_COLLECT);
                        break;
                    }
                    default:
                    {
                        _trace("Attempted to collect during invalid state: " + this._conductor.state.state);
                        break;
                    }
                }
            }
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data).id.verb;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.Verbs.COLLECT:
                {
                    this.hide();
                    break;
                }
                case mgs.aurora.slots.components.enums.Verbs.GAMBLE:
                {
                    this._gamble.flipCard(mgs.aurora.games.logicBlocks.data.ResponseData(arg1.data).gamble.card);
                    break;
                }
            }
            return;
        }

        internal function onCardRevealed(arg1:flash.events.Event):void
        {
            new org.as3lib.kitchensync.action.KSFunction(this.delayAfterReveal, this._gamble.data.showCardBackDelay).start();
            return;
        }

        internal function delayAfterReveal():void
        {
            if (this.isReady) 
            {
                this._gamble.refreshPreviousCard(this._conductor.response.gamble.prevCards);
                var loc1:*=this._conductor.response.gamble.state;
                switch (loc1) 
                {
                    case 0:
                    {
                        _trace("Gamble suspended");
                        break;
                    }
                    case 1:
                    {
                        _trace("Gamble win");
                        syndicate(this, SERVICE_WIN);
                        this._gamble.showGambleWin(this._conductor.response.gamble.card);
                        this._gamble.suitPays = this._conductor.response.player.totalWin * this._gamble.data.suitWinMultiplier;
                        this._gamble.colorPays = this._conductor.response.player.totalWin * this._gamble.data.colorWinMultiplier;
                        new org.as3lib.kitchensync.action.KSFunction(this._gamble.hideCard, this._gamble.data.delayBetweenGambles, this._conductor.response.gamble.card).start();
                        break;
                    }
                    case 2:
                    {
                        _trace("Gamble collected");
                        break;
                    }
                    case 3:
                    {
                        _trace("Gamble limit reached");
                        syndicate(this, SERVICE_WIN_LIMIT);
                        this._gamble.showGambleLimit(this._conductor.response.gamble.card);
                        new org.as3lib.kitchensync.action.KSFunction(this.onBackToGame, this._gamble.data.gambleReturnDelay).start();
                        break;
                    }
                    case 4:
                    {
                        _trace("Gamble lost");
                        syndicate(this, SERVICE_LOST);
                        this._gamble.showGambleLost(this._conductor.response.gamble.card);
                        new org.as3lib.kitchensync.action.KSFunction(this.onBackToGame, this._gamble.data.gambleReturnDelay).start();
                        break;
                    }
                }
            }
            return;
        }

        internal function cardFlipStart(arg1:flash.events.Event):void
        {
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_START_CARD_FLIP));
            return;
        }

        internal function cardFlipComplete(arg1:flash.events.Event):void
        {
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_END_CARD_FLIP));
            return;
        }

        internal function redClicked(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (!this.checkBalance()) 
            {
                return;
            }
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransGambleData(arg1.eventData, this._gamble.data.size)));
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_RED_CLICKED));
            return;
        }

        internal function blackClicked(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (!this.checkBalance()) 
            {
                return;
            }
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransGambleData(arg1.eventData, this._gamble.data.size)));
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_BLACK_CLICKED));
            return;
        }

        internal function diamondsClicked(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (!this.checkBalance()) 
            {
                return;
            }
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransGambleData(arg1.eventData, this._gamble.data.size)));
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_DIAMOND_CLICKED));
            return;
        }

        internal function heartsClicked(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (!this.checkBalance()) 
            {
                return;
            }
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransGambleData(arg1.eventData, this._gamble.data.size)));
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_HEART_CLICKED));
            return;
        }

        internal function spadesClicked(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (!this.checkBalance()) 
            {
                return;
            }
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransGambleData(arg1.eventData, this._gamble.data.size)));
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_SPADE_CLICKED));
            return;
        }

        internal function clubsClicked(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (!this.checkBalance()) 
            {
                return;
            }
            syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransGambleData(arg1.eventData, this._gamble.data.size)));
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_CLUB_CLICKED));
            return;
        }

        internal function collectClicked(arg1:flash.events.Event):void
        {
            syndicate(this, SERVICE_ACTION, new mgs.aurora.games.framework.TransportLayer(ACTION_COLLECT));
            return;
        }

        internal function gambleComplete(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            if (this._conductor.response.gamble.state == 1) 
            {
                this._gamble.showGambleView();
                syndicate(this, SERVICE_READY_TO_PLAY);
            }
            return;
        }

        internal function show():void
        {
            if (this.isReady) 
            {
                this._gamble.show();
                this.updateGambleView();
                syndicate(this, SERVICE_OPEN);
            }
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_GAMBLE";

        public static const SERVICE_OPEN:String="OPEN";

        public static const SERVICE_GAMBLE:String="GAMBLE";

        public static const SERVICE_COMPLETED:String="COMPLETED";

        public static const SERVICE_READY_TO_PLAY:String="READY_TO_PLAY";

        public static const SERVICE_COLLECT:String="COLLECT";

        public static const SERVICE_ACTION:String="ACTION";

        public static const SERVICE_WIN:String="GAMBLE_WIN";

        public static const SERVICE_WIN_LIMIT:String="GAMBLE_WIN_LIMIT";

        public static const SERVICE_LOST:String="GAMBLE_LOST";

        public static const SERVICE_INSUFFICIENT:String="INSUFFICIENT";

        public static const ACTION_SPADE_CLICKED:String="spade";

        public static const ACTION_CLUB_CLICKED:String="club";

        public static const ACTION_DIAMOND_CLICKED:String="diamond";

        public static const ACTION_HEART_CLICKED:String="heart";

        public static const ACTION_RED_CLICKED:String="red";

        public static const ACTION_BLACK_CLICKED:String="black";

        public static const ACTION_START_CARD_FLIP:String="start_flip";

        public static const ACTION_END_CARD_FLIP:String="end_flip";

        public static const ACTION_COLLECT:String="collect";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _viewReady:Boolean=false;

        internal var _config:XML;

        internal var _gotConfigXML:Boolean=false;

        internal var _collectReset:Boolean=true;

        internal var _gamble:mgs.aurora.slots.components.masterGamble.IMasterGamble;
    }
}


//            class ImmortalRomanceDynamicPaytableServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.paytable.data.dyn.*;
    import mgs.aurora.slots.components.paytable.paytable.dyn.*;
    
    public class ImmortalRomanceDynamicPaytableServer extends mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer
    {
        public function ImmortalRomanceDynamicPaytableServer()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceDynamicPaytableServer");
            return;
        }

        public override function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STORY_OPEN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STORY_CLOSE));
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNarrationIntercept, mgs.aurora.games.logicBlocks.agents.NarratorSoundAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.NarratorSoundAgent.SERVICE_NARRATION_INTERCEPT);
            return;
        }

        protected override function setup():void
        {
            var loc1:*=null;
            if (_isConfig) 
            {
                return;
            }
            _isConfig = true;
            _paytable = new mgs.aurora.slots.components.paytable.paytable.dyn.ImmortalRomanceDynamicStoryAchievementPaytable(new mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData(_config), _conductor);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.CLOSE, onPaytableClosed, false, 0, true);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.NEXT, onNextPage, false, 0, true);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.OPEN, onPaytableOpened, false, 0, true);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.PREVIOUS, onPreviousPage, false, 0, true);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.HIDE, onHide, false, 0, true);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.STORY_OPEN, this.onStoryOpen, false, 0, true);
            _paytable.addEventListener(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.STORY_CLOSE, this.onStoryClose, false, 0, true);
            var loc2:*=0;
            var loc3:*=_config.ignoreConsoleClick;
            for each (loc1 in loc3) 
            {
                _ignoredClicks[String(loc1.@id)] = 1;
            }
            return;
        }

        protected function onStoryOpen(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            syndicate(this, SERVICE_STORY_OPEN, new mgs.aurora.games.framework.TransportLayer({"activeStoryId":mgs.aurora.slots.components.paytable.paytable.dyn.ImmortalRomanceDynamicStoryAchievementPaytable(_paytable).activeStoryId, "percentageDelay":mgs.aurora.slots.components.paytable.paytable.dyn.ImmortalRomanceDynamicStoryAchievementPaytable(_paytable).activeStoryAutoScrollDelay}));
            return;
        }

        protected function onStoryClose(arg1:mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent):void
        {
            syndicate(this, SERVICE_STORY_CLOSE, new mgs.aurora.games.framework.TransportLayer(mgs.aurora.slots.components.paytable.paytable.dyn.ImmortalRomanceDynamicStoryAchievementPaytable(_paytable).activeStoryId));
            return;
        }

        internal function onNarrationIntercept(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.slots.components.paytable.paytable.dyn.ImmortalRomanceDynamicStoryAchievementPaytable(_paytable).autoScroll(arg1.data as String);
            return;
        }

        public static const SERVICE_STORY_OPEN:String="SERVICE_STORY_OPEN";

        public static const SERVICE_STORY_CLOSE:String="SERVICE_STORY_CLOSE";
    }
}


//            class ImmortalRomanceReelsServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class ImmortalRomanceReelsServer extends mgs.aurora.games.logicBlocks.publishers.ReelsServer
    {
        public function ImmortalRomanceReelsServer()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceReelsServer");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithFloatingWild, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.SERVICE_REPLACE_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithFloatingWild, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.SERVICE_REPLACE_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithFloatingWild, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.SERVICE_STATIC_WILD_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithFloatingWild, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.SERVICE_STATIC_WILD_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.swapWildSymbols, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_REPLACE_SYMBOLS);
            return;
        }

        protected override function SetupEventHookManagers():void
        {
            super.SetupEventHookManagers();
            _eventHookManager.AddHookAgent(mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME)));
            _eventHookManager.AddHookAgent(mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME)));
            _eventHookManager.AddHookAgent(mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME)));
            _eventHookManager.AddHookAgent(mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.AchievementNotification.PUBLISHER_NAME)));
            _eventHookManager.AddHookAgent(mgs.aurora.games.logicBlocks.hookAgents.EventHookAgent(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME)));
            return;
        }

        protected function replaceSymbolWithFloatingWild(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            if (isReady && _conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
            {
                loc1 = arg1.data.wildPosn;
                loc2 = loc1 / reels.columns;
                loc3 = loc1 - reels.columns * loc2;
                _reels.reels[loc3].swapSymbol(arg1.data.newSymbolId, arg1.data.reelSet, (reels.rows - loc2 - 1));
            }
            return;
        }

        protected function swapWildSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            if (_outOfSequenceStop) 
            {
                loc1 = 0;
                while (loc1 < _outOfSequenceStop.length) 
                {
                    _reels.reels[_outOfSequenceStop[loc1]].swapSymbol(arg1.data.baseWildId, arg1.data.wildReelSet, 0);
                    _reels.reels[_outOfSequenceStop[loc1]].swapSymbol(arg1.data.baseWildId + 1, arg1.data.wildReelSet, 1);
                    _reels.reels[_outOfSequenceStop[loc1]].swapSymbol(arg1.data.baseWildId + 2, arg1.data.wildReelSet, 2);
                    ++loc1;
                }
            }
            return;
        }
    }
}


//            class ImmortalRomanceRequestServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.framework.*;
    
    public class ImmortalRomanceRequestServer extends mgs.aurora.games.logicBlocks.publishers.RequestServer
    {
        public function ImmortalRomanceRequestServer()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceRequestServer");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStoryAction, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceDynamicPaytableServer.SERVICE_STORY_OPEN);
            return;
        }

        internal function onStoryAction(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this.canPing) 
            {
                this.canPing = false;
                loc1 = new flash.utils.Timer(3000, 1);
                loc1.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.clearPingTimer);
                loc1.start();
                sendPing();
            }
            return;
        }

        internal function clearPingTimer(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.clearPingTimer);
            this.canPing = true;
            return;
        }

        internal var canPing:Boolean=true;
    }
}


//            class ImmortalRomanceSymbolServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.symbol.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    import org.as3lib.kitchensync.action.*;
    
    public class ImmortalRomanceSymbolServer extends mgs.aurora.games.logicBlocks.publishers.SymbolsServer
    {
        public function ImmortalRomanceSymbolServer()
        {
            super();
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_JUMPING_WILD_ANIM_COMPLETE));
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithFloatingWild, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.SERVICE_REPLACE_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithJumpingWild, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.SERVICE_REPLACE_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithStaticWild, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.SERVICE_STATIC_WILD_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.replaceSymbolWithStaticWild, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.SERVICE_STATIC_WILD_SYMBOL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onJumpingWildComplete, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.SERVICE_WILD_REVEAL_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUserInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            return;
        }

        protected function replaceSymbolWithFloatingWild(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (isReady) 
            {
                this._floatingWild = _symbolController.setSymbolAtPosn(arg1.data.wildPosn, String(arg1.data.newSymbolId), mgs.aurora.slots.components.symbol.Symbol.LANDING_ANIM);
                _symbolController.relayerSymbols(_symbolsData);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._floatingWild, this.landAnimComplete);
            }
            return;
        }

        internal function landAnimComplete(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            if (!this._userInterrupted) 
            {
                _symbolController.setSymbolAtPosn(this._floatingWild.vaPosn, this._floatingWild.owner.id.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM).play();
            }
            return;
        }

        protected function replaceSymbolWithJumpingWild(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (isReady) 
            {
                this._jumpingWild = _symbolController.setSymbolAtPosn(arg1.data.wildPosn, String(arg1.data.newSymbolId), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM);
                _symbolController.relayerSymbols(_symbolsData);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._jumpingWild, this.onJumpingWildAnimComplete);
            }
            return;
        }

        protected function replaceSymbolWithStaticWild(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (isReady && _conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
            {
                _symbolController.setSymbolAtPosn(arg1.data.wildPosn, arg1.data.newSymbolId.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
            }
            return;
        }

        internal function onJumpingWildAnimComplete(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            syndicate(this, SERVICE_JUMPING_WILD_ANIM_COMPLETE);
            return;
        }

        internal function onJumpingWildComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (isReady) 
            {
                loc1 = _symbolController.getSymbolStateAtPosn(arg1.data.vaPosn);
                loc1.gotoAndStop(1);
            }
            return;
        }

        internal function onUserInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._userInterrupted = true;
            return;
        }

        protected override function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._userInterrupted = false;
            super.onReelStart(arg1);
            return;
        }

        protected override function drawSymbolsForReal(arg1:int):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=false;
            var loc4:*=0;
            var loc5:*=0;
            if (isReady) 
            {
                if ((_conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT || _conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT) && _conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    resetReelsToDefault();
                }
                else 
                {
                    loc1 = _conductor.reelData.rows;
                    loc3 = true;
                    while (--loc1 >= 0) 
                    {
                        loc2 = _conductor.reelData.columns * ((_conductor.reelData.rows - 1) - loc1) + arg1;
                        if (_conductor.response.extendedSpinStyles) 
                        {
                            loc4 = 0;
                            while (loc4 < _conductor.response.extendedSpinStyles.numberOf) 
                            {
                                loc5 = 0;
                                while (loc5 < _conductor.response.visarea.wildVABoxes.length) 
                                {
                                    if (loc2 == _conductor.response.visarea.wildVABoxes[loc5]) 
                                    {
                                        loc3 = false;
                                    }
                                    ++loc5;
                                }
                                ++loc4;
                            }
                        }
                        if (loc3) 
                        {
                            _symbolController.setSymbolAtPosn(loc2, _visAreaData.getSymbolIdFromVisArea(loc2).toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                        }
                        else if (_conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                        {
                            _symbolController.setSymbolAtPosn(loc2, _symbolController.getSymbolStateAtPosn(loc2).owner.id.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                        }
                        _symbolController.flashSymbol(loc2, mgs.aurora.slots.components.symbol.SymbolController.SHOW);
                        loc3 = true;
                    }
                }
            }
            else 
            {
                _trace("ERROR: Not ready to draw to the symbols.", "error", this, 16711680);
            }
            return;
        }

        protected function getUpdatedSymbolIdFromVisArea(arg1:int):int
        {
            var loc1:*=0;
            var loc3:*=0;
            var loc2:*=false;
            if (_conductor.response.visarea.wildVABoxes) 
            {
                loc3 = 0;
                while (loc3 < _conductor.response.visarea.wildVABoxes.length) 
                {
                    if (_conductor.response.visarea.wildVABoxes[loc3] == arg1) 
                    {
                        loc1 = _symbolController.getSymbolStateAtPosn(_conductor.response.visarea.wildVABoxes[loc3]).owner.id;
                        loc2 = true;
                    }
                    ++loc3;
                }
            }
            if (!loc2) 
            {
                loc1 = _visAreaData.getSymbolIdFromVisArea(arg1);
            }
            return loc1;
        }

        protected function getUpdatedWinningAnimationList(arg1:__AS3__.vec.Vector.<int>):__AS3__.vec.Vector.<int>
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=false;
            if (_conductor.response.visarea.wildVABoxes && arg1.length > 0) 
            {
                loc2 = 0;
                while (loc2 < _conductor.response.visarea.wildVABoxes.length) 
                {
                    loc3 = 0;
                    while (loc3 < arg1.length) 
                    {
                        if (_conductor.response.visarea.wildVABoxes[loc2] == arg1[loc3]) 
                        {
                            loc1 = true;
                        }
                        ++loc3;
                    }
                    if (!loc1) 
                    {
                        if (_conductor.response.wins.partOfAWin(_conductor.response.visarea.wildVABoxes[loc2])) 
                        {
                            arg1.push(_conductor.response.visarea.wildVABoxes[loc2]);
                        }
                    }
                    loc1 = false;
                    ++loc2;
                }
            }
            return arg1;
        }

        protected function canPlayTrigger(arg1:int):Boolean
        {
            var loc2:*=0;
            var loc1:*=true;
            if (_conductor.response.visarea.wildVABoxes) 
            {
                loc2 = 0;
                while (loc2 < _conductor.response.visarea.wildVABoxes.length) 
                {
                    if (_conductor.response.visarea.wildVABoxes[loc2] == arg1) 
                    {
                        loc1 = false;
                    }
                    ++loc2;
                }
            }
            return loc1;
        }

        protected override function refreshReels():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            if (isReady && canDo) 
            {
                loc1 = this.getUpdatedWinningAnimationList(_visAreaData.winningAnimationList);
                loc2 = 0;
                while (loc2 < loc1.length) 
                {
                    loc3 = loc1[loc2];
                    loc4 = this.getUpdatedSymbolIdFromVisArea(loc1[loc2]);
                    if (_stopped) 
                    {
                        _symbolController.setSymbolStateAtPosn(loc3, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                    }
                    else if (_symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && canDisplayWins) 
                    {
                        if (_symbolController.getSymbolStateAtPosn(loc3).stateID == mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC || _symbolController.getSymbolStateAtPosn(loc3).stateID == mgs.aurora.slots.components.symbol.Symbol.FALLBACK) 
                        {
                            if (_conductor.response.wins.partOfAWin(loc3)) 
                            {
                                _symbolController.setSymbolStateAtPosn(loc3, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM);
                                syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc4, "noAsset", loc3)));
                            }
                            else 
                            {
                                _symbolController.setSymbolStateAtPosn(loc3, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                            }
                        }
                    }
                    else if (canDisplayWins && _symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK)) 
                    {
                        if (_symbolController.getSymbolStateAtPosn(loc3).stateID == mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC) 
                        {
                            _symbolController.setSymbolStateAtPosn(loc3, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                            syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc4, "noAsset", loc3)));
                        }
                    }
                    ++loc2;
                }
                _symbolController.relayerSymbols(_symbolsData);
            }
            return;
        }

        protected override function onWinDisplayShowSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=arg1.data;
            if (isReady && canDo && !mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
            {
                loc2 = loc1.symbols;
                loc3 = 0;
                while (loc3 < loc2.length) 
                {
                    loc4 = this.getUpdatedSymbolIdFromVisArea(loc2[loc3]);
                    if (!_symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && !_symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && !(_symbolController.getSymbolStateAtPosn(loc2[loc3]).stateID == mgs.aurora.slots.components.symbol.Symbol.SPECIAL)) 
                    {
                        _symbolController.flashSymbol(loc2[loc3], mgs.aurora.slots.components.symbol.SymbolController.SHOW);
                    }
                    ++loc3;
                }
            }
            return;
        }

        protected override function onWinDisplayHideSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=arg1.data;
            if (isReady && canDo && !mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
            {
                loc2 = loc1.symbols;
                loc3 = 0;
                while (loc3 < loc2.length) 
                {
                    loc4 = this.getUpdatedSymbolIdFromVisArea(loc2[loc3]);
                    if (!_symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && !_symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && !(_symbolController.getSymbolStateAtPosn(loc2[loc3]).stateID == mgs.aurora.slots.components.symbol.Symbol.SPECIAL)) 
                    {
                        _symbolController.flashSymbol(loc2[loc3], mgs.aurora.slots.components.symbol.SymbolController.HIDE);
                    }
                    ++loc3;
                }
            }
            return;
        }

        protected override function onAllReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=NaN;
            var loc3:*=0;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=0;
            var loc8:*=0;
            var loc9:*=null;
            if (_conductor.response.nextSpin.freeSpinsRetriggered && _conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
            {
                return;
            }
            cleanupTriggers();
            interruptPulse();
            _allowTrigger = true;
            _reelsSpinning = false;
            if (isReady) 
            {
                if (canDo) 
                {
                    loc1 = -1;
                    loc2 = -1;
                    loc3 = -1;
                    loc4 = -1;
                    loc6 = 0;
                    while (loc6 < this.getUpdatedWinningAnimationList(_visAreaData.winningAnimationList).length) 
                    {
                        loc7 = this.getUpdatedWinningAnimationList(_visAreaData.winningAnimationList)[loc6];
                        loc8 = this.getUpdatedSymbolIdFromVisArea(_visAreaData.winningAnimationList[loc6]);
                        loc9 = _symbolsData.getTrigger(loc8);
                        if (_symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && _visAreaData.triggerActivated && !(_conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) && canPlayForThisTrigger(loc9)) 
                        {
                            if (this.canPlayTrigger(loc7) && !(loc8 == 15)) 
                            {
                                loc5 = _symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM);
                            }
                            else 
                            {
                                loc5 = _symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM);
                            }
                            if (loc5.totalFrames > loc3) 
                            {
                                loc4 = loc7;
                                loc3 = loc5.totalFrames;
                            }
                            syndicate(this, SERVICE_TRIGGER_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc8, "noAsset", loc7)));
                        }
                        else if (hasTrigger(loc8) && _visAreaData.triggerActivated && !(_conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) && canPlayForThisTrigger(loc9)) 
                        {
                            if (_symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK)) 
                            {
                                _symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                            }
                            _flashTriggerSymbols = true;
                            _flashingTriggers.push(loc7);
                            syndicate(this, SERVICE_TRIGGER_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc8, "noAsset", loc7)));
                        }
                        else if (_symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && canDisplayWins) 
                        {
                            if (_winsAreBlocked) 
                            {
                                loc5 = _symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                            }
                            else 
                            {
                                (loc5 = _symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM)).play();
                            }
                            if (loc5.totalFrames > loc1) 
                            {
                                loc2 = loc7;
                                loc1 = loc5.totalFrames;
                            }
                            syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc8, "noAsset", loc7)));
                        }
                        else if (_symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK) && canDisplayWins) 
                        {
                            _symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                        }
                        ++loc6;
                    }
                    if (_conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        if (!(loc4 == -1) && loc3 > 1) 
                        {
                            new org.as3lib.kitchensync.action.KSFunction(endOfTriggerAnimation, 40 * loc3, flash.display.MovieClip(_symbolController.getSymbolStateAtPosn(loc4))).start();
                            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(_symbolController.getSymbolStateAtPosn(loc4)), endOfTriggerAnimation, 10, 1, loc3);
                        }
                        else if (_flashTriggerSymbols) 
                        {
                            playTriggerSequence();
                        }
                        else 
                        {
                            _trace("No trigger animation!!!");
                            if (!(loc2 == -1) && loc1 > 1) 
                            {
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(_symbolController.getSymbolStateAtPosn(loc2)), endOfAnimation, 10, 1, loc1);
                            }
                        }
                    }
                    _symbolController.relayerSymbols(_symbolsData);
                }
            }
            return;
        }

        public static const SERVICE_JUMPING_WILD_ANIM_COMPLETE:String="SERVICE_JUMPING_WILD_ANIM_COMPLETE";

        internal var _floatingWild:mgs.aurora.slots.components.symbol.SymbolState;

        internal var _jumpingWild:mgs.aurora.slots.components.symbol.SymbolState;

        internal var _userInterrupted:Boolean=false;
    }
}


//            class ImmortalRomanceWayWinDisplayServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class ImmortalRomanceWayWinDisplayServer extends mgs.aurora.games.logicBlocks.publishers.WayWinDisplayServer
    {
        public function ImmortalRomanceWayWinDisplayServer()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceWayWinDisplayServer");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPulseSymbols, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.SERVICE_PULSE_SYMBOLS);
            return;
        }

        protected function onPulseSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (_conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
            {
                pulseSymbols(this.getWinPositions());
            }
            return;
        }

        internal function getWinPositions():__AS3__.vec.Vector.<int>
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=false;
            var loc4:*=0;
            var loc5:*=0;
            if (_conductor.response.wins.numberOf > 0) 
            {
                loc1 = new Vector.<int>();
                if (_conductor.response.extendedSpinStyles.qualifyingRandomWildWins) 
                {
                    loc4 = 0;
                    while (loc4 < _conductor.response.extendedSpinStyles.qualifyingRandomWildWins.length) 
                    {
                        loc1 = loc1.concat(_conductor.response.extendedSpinStyles.qualifyingRandomWildWins[loc4].matchPos);
                        ++loc4;
                    }
                }
                loc2 = new Vector.<int>();
                loc2.push(loc1[0]);
                loc3 = false;
                loc4 = 0;
                while (loc4 < loc1.length) 
                {
                    loc3 = false;
                    loc5 = 0;
                    while (loc5 < loc2.length) 
                    {
                        if (loc1[loc4] == loc2[loc5]) 
                        {
                            loc3 = true;
                        }
                        ++loc5;
                    }
                    if (!loc3) 
                    {
                        loc2.push(loc1[loc4]);
                    }
                    ++loc4;
                }
            }
            return loc2;
        }
    }
}


//            class ModalHeaderServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.loader.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.modals.*;
    import org.as3lib.kitchensync.action.*;
    
    public class ModalHeaderServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ModalHeaderServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer");
            this._modalRules = new flash.utils.Dictionary(true);
            this._modalMap = new flash.utils.Dictionary(true);
            return;
        }

        protected function addModal(arg1:String, arg2:int, arg3:int, arg4:Boolean, arg5:Number, arg6:Number, arg7:String, arg8:Boolean):void
        {
            this.addModalHeader(new mgs.aurora.slots.components.modals.ModalHeader(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
            return;
        }

        protected function addRule(arg1:String, arg2:Array):void
        {
            this.addRuleContainer(new mgs.aurora.slots.components.modals.RuleContainer(arg1, arg2));
            return;
        }

        protected function addModalHeader(arg1:mgs.aurora.slots.components.modals.IModalHeader):void
        {
            if (this.isModal(arg1.id)) 
            {
                throw new Error("Duplicate modal ID: [" + arg1.id + "] Please check config. - " + toString());
            }
            this._modalMap[arg1.id] = arg1;
            return;
        }

        protected function addRuleContainer(arg1:mgs.aurora.slots.components.modals.RuleContainer):void
        {
            if (!this.isModal(arg1.id)) 
            {
                throw new Error("ID: [" + arg1.id + "] does not correspond to any modals. Please check config. - " + toString());
            }
            this._modalRules[arg1.id] = arg1;
            return;
        }

        protected function removeRuleContainer(arg1:String):void
        {
            this._modalRules[arg1] = null;
            delete this._modalRules[arg1];
            return;
        }

        protected function getModalById(arg1:String):mgs.aurora.slots.components.modals.ModalHeader
        {
            if (this.isReady) 
            {
                if (arg1 != null) 
                {
                    if (!this.isModal(arg1)) 
                    {
                        throw new Error("Modal ID [" + arg1 + "] does not registered. Please check you id\'s and config. - " + toString());
                    }
                    return this._modalMap[arg1];
                }
            }
            return null;
        }

        public function getRuleById(arg1:String):mgs.aurora.slots.components.modals.IRuleContainer
        {
            if (this.isReady) 
            {
                if (arg1 != null) 
                {
                    if (!this.isModal(arg1)) 
                    {
                        throw new Error("Rule ID [" + arg1 + "] does not registered. Please check you id\'s and config. - " + toString());
                    }
                    return this._modalRules[arg1];
                }
            }
            return null;
        }

        public function getActiveRule():String
        {
            return this._activeModal;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigDone, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_MODAL_HEADERS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSummaryStartClose, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_START_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSummaryOpen, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinTriggered, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED, 1000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsTriggered, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_HEADER_ANIM);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsRefresh, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_REFRESH);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsComplete, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_ASSETS_REMOVED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreespinsComplete, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusSummary, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_START_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusSummaryClosed, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusTriggerComplete, mgs.aurora.games.logicBlocks.agents.PreBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PreBonusAgent.SERVICE_TRIGGER_ANIM_COMPLETE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFGSummaryOpen, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            return;
        }

        public function getRule(arg1:String):mgs.aurora.slots.components.modals.RuleContainer
        {
            return this.getRuleById(arg1) as mgs.aurora.slots.components.modals.RuleContainer;
        }

        public function set jump(arg1:Boolean):void
        {
            this._jump = arg1;
            return;
        }

        protected function isLoaded(arg1:String):Boolean
        {
            var loc1:*=mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getAsset(arg1).resource;
            if (mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer(loc1).loaded) 
            {
                return true;
            }
            return false;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasConfigXML && this._hasView;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NEW_MODAL));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_READY));
            this.defineSubscribers();
            return;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._modalRules = null;
                this._modalMap = null;
                this._activeModal = null;
                this._configXML = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfigDone(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._hasConfigXML = true;
            this._configXML = arg1.data as XMLList;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._hasView) 
            {
                this._hasView = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            var loc2:*=null;
            var loc3:*=null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc1:*=0;
            while (loc1 < this._configXML.Modal.length()) 
            {
                this.addModal(this._configXML.Modal.@id[loc1].toString(), int(this._configXML.Modal.@duration[loc1]), int(this._configXML.Modal.@priority[loc1]), this._configXML.Modal.@canBeRandom[loc1].toString() == "true", Number(this._configXML.Modal.@x[loc1]), Number(this._configXML.Modal.@y[loc1]), this._configXML.Modal.@instanceId[loc1].toString(), this._configXML.Modal.@removeAtStartSpin[loc1].toString() == "true");
                loc2 = [];
                var loc4:*=0;
                var loc5:*=this._configXML.Modal[loc1].Rule.@value;
                for each (loc3 in loc5) 
                {
                    loc2.push(loc3);
                }
                this.addRule(this._configXML.Modal.@id[loc1].toString(), loc2);
                ++loc1;
            }
            if (this.isRule(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO)) 
            {
                this.getRuleById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).method = mgs.aurora.games.common.dataTypes.CommonModalRules.logo;
            }
            if (this.isRule(mgs.aurora.games.common.dataTypes.CommonModalRules.FIVEOFKIND)) 
            {
                this.getRuleById(mgs.aurora.games.common.dataTypes.CommonModalRules.FIVEOFKIND).method = mgs.aurora.games.common.dataTypes.CommonModalRules.fiveOfKind;
            }
            if (this.isRule(mgs.aurora.games.common.dataTypes.CommonModalRules.FREESPINS_FIVEOFKIND)) 
            {
                this.getRuleById(mgs.aurora.games.common.dataTypes.CommonModalRules.FREESPINS_FIVEOFKIND).method = mgs.aurora.games.common.dataTypes.CommonModalRules.freespinFiveOfKind;
            }
            if (this.isRule(mgs.aurora.games.common.dataTypes.CommonModalRules.SCATTERWINS)) 
            {
                this.getRuleById(mgs.aurora.games.common.dataTypes.CommonModalRules.SCATTERWINS).method = mgs.aurora.games.common.dataTypes.CommonModalRules.scatterWins;
            }
            if (this.isRule(mgs.aurora.games.common.dataTypes.CommonModalRules.TRIGGER_FREESPINS)) 
            {
                this.getRuleById(mgs.aurora.games.common.dataTypes.CommonModalRules.TRIGGER_FREESPINS).method = mgs.aurora.games.common.dataTypes.CommonModalRules.reTriggerFreeSpins;
            }
            this._configXML = null;
            if (!this._firstShowLogo) 
            {
                if (this.getRule(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).validate) 
                {
                    this._activeModal = this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).id;
                    this.jump = true;
                    this.addNewModal();
                }
                this._firstShowLogo = true;
            }
            syndicate(this, SERVICE_READY);
            return;
        }

        protected function onBonusSummary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = false;
            return;
        }

        protected function onBonusTriggerComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                if (this._activeModal != null) 
                {
                    loc1 = this._activeModal;
                    this._activeModal = null;
                    this.removeCurrentModal(loc1);
                }
            }
            return;
        }

        protected function onBonusSummaryClosed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (!this.isFreeSpinsActive() || this._conductor.settings.showLogoForBonusTriggeredInFS) 
                {
                    this._activeModal = this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).id;
                    this.jump = true;
                    this.addNewModal();
                    mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = true;
                }
                if (this._conductor.response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = true;
                }
                else 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = false;
                }
            }
            return;
        }

        protected function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._respin = true;
            return;
        }

        protected function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._reelsAreSpinning = false;
            if (!this._wildModal) 
            {
                new org.as3lib.kitchensync.action.KSFunction(this.delayStart, 50).start();
            }
            return;
        }

        public function onHookEventComplete(arg1:String):void
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case HOOK_EVENT_ALL_REELS_STOPPED:
                {
                    this._respin = false;
                    new org.as3lib.kitchensync.action.KSFunction(this.delayStart, 50).start();
                    break;
                }
            }
            return;
        }

        internal function isFreeSpinsActive():Boolean
        {
            var loc1:*=this._conductor.response.slot.state;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE:
                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE:
                case mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE:
                {
                    return true;
                }
            }
            return false;
        }

        internal function isMainGameActive():Boolean
        {
            var loc1:*=this._conductor.response.framework.state;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME:
                {
                    return true;
                }
            }
            return false;
        }

        protected function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._spinsActive + 1);
            loc1._spinsActive = loc2;
            this._reelsAreSpinning = true;
            if (!this._respin) 
            {
                this.removeOnSpin();
            }
            return;
        }

        protected function onSummaryStartClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                this._activeModal = this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).id;
                this.jump = true;
                this.addNewModal();
                if (arg1 == null) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = true;
                }
                else 
                {
                    loc1 = new flash.utils.Timer(arg1.data, 1);
                    loc1.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.showModalLayer);
                    loc1.start();
                }
            }
            return;
        }

        internal function showModalLayer(arg1:flash.events.TimerEvent=null):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.showModalLayer);
            mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = true;
            return;
        }

        protected function onSummaryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = false;
            }
            return;
        }

        protected function onFreeSpinTriggered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._activeModal != null) 
            {
                if (!(mgs.aurora.games.framework.StageReference.getLevel(LAYER) == null) && !(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(this._activeModal) == null)) 
                {
                    mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(this._activeModal) as flash.display.MovieClip, this.removeModal, 0, "AnimateOut", "Hide");
                }
            }
            this._activeModal = null;
            return;
        }

        protected function onWildReelsTriggered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._activeModal) 
            {
                if (!(mgs.aurora.games.framework.StageReference.getLevel(LAYER) == null) && !(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(this._activeModal) == null)) 
                {
                    mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(this._activeModal) as flash.display.MovieClip, this.removeModal, 0, "AnimateOut", "Hide");
                }
            }
            this._wildModal = true;
            this._activeModal = null;
            return;
        }

        protected function onFGSummaryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._activeModal = this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).id;
                this._jump = true;
                if (!this.isFreeSpinsActive() && this.isMainGameActive()) 
                {
                    this.addNewModal();
                }
                mgs.aurora.games.framework.StageReference.getLevel(LAYER).visible = true;
            }
            return;
        }

        protected function onWildReelsRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.removeModalImmediately(this._activeModal);
            this._wildModal = true;
            this._activeModal = null;
            return;
        }

        protected function onWildReelsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._wildModal) 
            {
                return;
            }
            this._activeModal = this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).id;
            var loc1:*=this.getModalById(this._activeModal).instance;
            mgs.aurora.games.framework.StageReference.getLevel(LAYER).addChild(loc1);
            loc1.gotoAndPlay("AnimateIn");
            syndicate(this, SERVICE_NEW_MODAL, new mgs.aurora.games.framework.TransportLayer(this._activeModal));
            this._wildModal = false;
            return;
        }

        protected function onFreespinsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.removeModalImmediately(this._activeModal);
            return;
        }

        protected function showNewModal(arg1:mgs.aurora.slots.components.modals.ModalHeader=null):void
        {
            var loc1:*=this.randomModal();
            if (arg1 == null) 
            {
                if (loc1 == null) 
                {
                    this._spinsActive = 0;
                    if (this.getRule(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO).validate) 
                    {
                        this._activeModal = mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO;
                        this.addNewModal();
                    }
                    else 
                    {
                        this.removeCurrentModal(this._activeModal);
                        this._activeModal = null;
                    }
                }
                else 
                {
                    this._spinsActive = 0;
                    this._activeModal = loc1.id;
                    this.addNewModal();
                }
            }
            else if (this._spinsActive >= arg1.duration && !(this._activeModal == arg1.id) && !(arg1 == null)) 
            {
                this._spinsActive = 0;
                this._spinsActive = 0;
                this._activeModal = arg1.id;
                this.addNewModal();
            }
            else if (this._spinsActive >= arg1.duration) 
            {
                this._spinsActive = 0;
                if (loc1 != null) 
                {
                    this._activeModal = loc1.id;
                    this.addNewModal();
                }
            }
            else if (!(this._activeModal == arg1.id) && !(this._activeModal == null)) 
            {
                this._spinsActive = 0;
                this._activeModal = arg1.id;
                this.addNewModal();
            }
            else if (this._activeModal != arg1.id) 
            {
                this._spinsActive = 0;
                this._activeModal = arg1.id;
                this.addNewModal();
            }
            return;
        }

        protected function randomModal():mgs.aurora.slots.components.modals.ModalHeader
        {
            var loc2:*=null;
            var loc3:*=false;
            var loc4:*=0;
            var loc1:*=new Vector.<mgs.aurora.slots.components.modals.ModalHeader>();
            var loc5:*=0;
            var loc6:*=this._modalMap;
            for each (loc2 in loc6) 
            {
                loc3 = this.getRule(loc2.id).validateRandom;
                if (!(loc2.canBeRandom && loc3 && !(loc2.id == this._activeModal) && this.isLoaded(this.getModalById(loc2.id).instanceId))) 
                {
                    continue;
                }
                loc1.push(this.getModalById(loc2.id));
            }
            if (loc1.length > 0) 
            {
                loc4 = Math.random() * loc1.length;
                return loc1[loc4];
            }
            return null;
        }

        protected function getActiveRules():__AS3__.vec.Vector.<mgs.aurora.slots.components.modals.RuleContainer>
        {
            var temp:__AS3__.vec.Vector.<mgs.aurora.slots.components.modals.RuleContainer>;
            var rule:mgs.aurora.slots.components.modals.RuleContainer;

            var loc1:*;
            rule = null;
            temp = new Vector.<mgs.aurora.slots.components.modals.RuleContainer>();
            var loc2:*=0;
            var loc3:*=this._modalRules;
            for each (rule in loc3) 
            {
            };
            return temp;
        }

        protected function resolve():mgs.aurora.slots.components.modals.ModalHeader
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc1:*=this.getActiveRules();
            var loc2:*=0;
            var loc6:*=0;
            var loc7:*=loc1;
            for each (loc4 in loc7) 
            {
                if (!((loc5 = this._modalMap[loc4.id]).priority >= loc2)) 
                {
                    continue;
                }
                loc2 = loc5.priority;
                loc3 = loc5.id;
            }
            return this._modalMap[loc3] as mgs.aurora.slots.components.modals.ModalHeader;
        }

        protected function delayStart():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this.isReady && this.canDo) 
            {
                if (this._reelsAreSpinning) 
                {
                    return;
                }
                loc1 = this.getModalById(this._activeModal);
                loc2 = this.resolve();
                if (loc1 == null) 
                {
                    this.showNewModal(loc2);
                }
                else if (this._spinsActive >= loc1.duration && !loc1.removeAtStartSpin) 
                {
                    if (loc2 != null) 
                    {
                        if (loc1.id != loc2.id) 
                        {
                            this.showNewModal(loc2);
                        }
                        else 
                        {
                            this.showNewModal(this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO));
                        }
                    }
                    else 
                    {
                        this.showNewModal(this.getModalById(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO));
                    }
                }
                else if (loc2 != null) 
                {
                    if (loc2.priority > loc1.priority) 
                    {
                        this.showNewModal(loc2);
                    }
                }
            }
            return;
        }

        protected function removeOnSpin():void
        {
            if (this._activeModal != null) 
            {
                if (this.getModalById(this._activeModal).removeAtStartSpin) 
                {
                    this.forceModal(mgs.aurora.games.common.dataTypes.CommonModalRules.LOGO, false);
                }
            }
            return;
        }

        protected function removeCurrentModal(arg1:String=null):void
        {
            if (!(arg1 == null) && !(arg1 == this._activeModal)) 
            {
                if (!(mgs.aurora.games.framework.StageReference.getLevel(LAYER) == null) && !(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(arg1) == null)) 
                {
                    mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(arg1) as flash.display.MovieClip, this.removeModal, 0, "AnimateOut", "Hide");
                }
            }
            return;
        }

        public function forceModal(arg1:String, arg2:Boolean=true):void
        {
            this._activeModal = this.getModalById(arg1).id;
            this._jump = arg2;
            this.addNewModal();
            return;
        }

        public function removeModalImmediately(arg1:String):void
        {
            var modalId:String;

            var loc1:*;
            modalId = arg1;
            try 
            {
                if (modalId != null) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(LAYER).removeChild(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildByName(modalId));
                    modalId = null;
                }
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
            }
            return;
        }

        protected function isRule(arg1:String):Boolean
        {
            return this._modalRules[arg1] == null ? false : true;
        }

        protected function isModal(arg1:String):Boolean
        {
            return this._modalMap[arg1] == null ? false : true;
        }

        public function testDictionaries():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=this._modalMap;
            for each (loc1 in loc4) 
            {
                _trace(loc1);
            }
            loc3 = 0;
            loc4 = this._modalRules;
            for each (loc2 in loc4) 
            {
                _trace(loc2);
            }
            return;
        }

        protected function addNewModal():void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (!(mgs.aurora.games.framework.StageReference.getLevel(LAYER).numChildren > 1)) 
            {
            };
            if (mgs.aurora.games.framework.StageReference.getLevel(LAYER).numChildren == 1) 
            {
                if (!this._jump) 
                {
                    loc1 = mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildAt(0) as flash.display.MovieClip;
                    this.removeCurrentModal(loc1.name);
                    return;
                }
                mgs.aurora.games.framework.StageReference.getLevel(LAYER).removeChild(mgs.aurora.games.framework.StageReference.getLevel(LAYER).getChildAt(0) as flash.display.MovieClip);
            }
            if (this._activeModal != null) 
            {
                loc2 = this.getModalById(this._activeModal).instance;
                mgs.aurora.games.framework.StageReference.getLevel(LAYER).addChild(loc2);
                if (this._jump) 
                {
                    loc2.gotoAndStop("Show");
                }
                else 
                {
                    loc2.gotoAndPlay("AnimateIn");
                    syndicate(this, SERVICE_NEW_MODAL, new mgs.aurora.games.framework.TransportLayer(this._activeModal));
                }
                this.jump = false;
            }
            return;
        }

        protected function removeModal(arg1:flash.display.MovieClip):void
        {
            var mov:flash.display.MovieClip;

            var loc1:*;
            mov = arg1;
            _trace("Modal with name [" + mov.name + "] was removed", "GCL", this, 16711935);
            try 
            {
                mov.stop();
                if (mov.parent == mgs.aurora.games.framework.StageReference.getLevel(LAYER)) 
                {
                    mov.parent.removeChild(mov);
                }
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
            }
            this.addNewModal();
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_MODAL_HEADER";

        public static const SERVICE_NEW_MODAL:String="NEW_MODAL";

        public static const SERVICE_READY:String="READY";

        public static const LAYER:String="Modals";

        public static const HOOK_EVENT_ALL_REELS_STOPPED:String="HOOK_EVENT_ALL_REELS_STOPPED_MODAL";

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _hasView:Boolean=false;

        protected var _config:Boolean=false;

        protected var _hasConfigXML:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _modalRules:flash.utils.Dictionary;

        protected var _modalMap:flash.utils.Dictionary;

        protected var _spinsActive:int=0;

        protected var _reelsAreSpinning:Boolean;

        protected var _firstShowLogo:Boolean;

        protected var _jump:Boolean;

        protected var _configXML:XMLList;

        protected var _respin:Boolean=false;

        protected var _wildModal:Boolean=false;

        protected var _activeModal:String=null;
    }
}


//            class NeoLoadServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.server.*;
    import mgs.aurora.games.common.components.loader.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class NeoLoadServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function NeoLoadServer()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.NeoLoadServer");
            this._loadedViewList = new Vector.<String>();
            this._splash = new flash.display.MovieClip();
            return;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        internal function returnType(arg1:String):int
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case "swf":
                {
                    return mgs.aurora.api.enums.ContentType.SWF_CONTENT;
                }
                case "xml":
                {
                    return mgs.aurora.api.enums.ContentType.XML_CONTENT;
                }
                case "bin":
                {
                    return mgs.aurora.api.enums.ContentType.BIN_CONTENT;
                }
            }
            return mgs.aurora.api.enums.ContentType.SWF_CONTENT;
        }

        public function isViewReady(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._loadedViewList.length) 
            {
                if (this._loadedViewList[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        internal function getNumberFilesToLoad(arg1:String, arg2:String):int
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=0;
            var loc4:*=0;
            var loc5:*=this._blockLoadersQueue.queue;
            for each (loc2 in loc5) 
            {
                if (!(arg1 == loc2.id && arg2 == loc2.type)) 
                {
                    continue;
                }
                if ((loc3 = mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer(loc2.name)).loaded) 
                {
                    continue;
                }
                ++loc1;
            }
            return loc1;
        }

        internal function shuffelBlocks(arg1:String):void
        {
            var stateID:String;
            var stateObjec:mgs.aurora.games.common.components.loader.StateLoadObject;

            var loc1:*;
            stateID = arg1;
            stateObjec = mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getStateToLoad(stateID);
            try 
            {
                if (stateObjec.other != null) 
                {
                    this._blockLoadersQueue.reprioritiseItemsByName(stateObjec.other, LEVEL_OTHER);
                }
                if (stateObjec.niceToHave != null) 
                {
                    this._blockLoadersQueue.reprioritiseItemsByName(stateObjec.niceToHave, LEVEL_NICE_TO_HAVE);
                }
                if (stateObjec.mustHave != null) 
                {
                    this._blockLoadersQueue.reprioritiseItemsByName(stateObjec.mustHave, LEVEL_MUST_HAVE);
                }
                this._blockLoadersQueue.reprioritiseItemsByID(stateID);
            }
            catch (e:Error)
            {
                _trace("ERROR: You requested a view  [" + stateID + "] that doesn\'t exist. Check your config.", "error", this, 16711680);
            }
            return;
        }

        internal function hideLoader():void
        {
            if (mgs.aurora.games.framework.AuroraReference.aurora.preloader.visible) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.backgroundAlpha = 1;
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.visible = false;
            }
            syndicate(this, SERVICE_HIDE_LOADER, new mgs.aurora.games.framework.TransportLayer(name));
            if (this._splash.parent == mgs.aurora.games.framework.StageReference.getLevel("Preloader")) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("Preloader").removeChild(this._splash);
            }
            return;
        }

        internal function showLoader(arg1:int):void
        {
            if (!mgs.aurora.games.framework.AuroraReference.aurora.preloader.visible) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.create(arg1);
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.visible = true;
                syndicate(this, SERVICE_SHOW_LOADER, new mgs.aurora.games.framework.TransportLayer(name));
            }
            if (mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer("PreLoad").loaded && this._firstShow && !mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME)).viperClient) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.backgroundAlpha = 0;
                mgs.aurora.games.framework.StageReference.getLevel("Preloader").addChild(this._splash);
            }
            else if (!this._firstShow && !mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME)).viperClient) 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.backgroundAlpha = 0.5;
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.setTextLabel(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME)).viewText);
            }
            return;
        }

        internal function initLoad():void
        {
            this._firstShow = true;
            this._blockLoadersQueue.getNextItem();
            var loc1:*=mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer(this._blockLoadersQueue.current.name);
            mgs.aurora.games.framework.AuroraReference.aurora.server.loadFile(new mgs.aurora.api.server.FileRequest(loc1.idName, mgs.aurora.games.framework.ModuleReference.moduleInfo.url + loc1.fileName, this.returnType(loc1.type)));
            return;
        }

        internal function parseLoadPriorities():void
        {
            var loader:mgs.aurora.games.common.components.loader.TheMostIntelligentLoader;
            var xml:XMLList;
            var responseData:mgs.aurora.games.logicBlocks.data.ResponseData;
            var xl:XML;
            var freegameAvailable:Boolean;
            var freeGameFiles:Array;
            var freeGameComponents:Array;
            var preLdr:mgs.aurora.games.common.components.loader.StateLoadObject;
            var ass:XML;
            var mst:Array;
            var nce:Array;
            var othr:Array;
            var compMustHave:Array;
            var compNiceToHave:Array;
            var compOther:Array;
            var ldr:mgs.aurora.games.common.components.loader.StateLoadObject;
            var must:__AS3__.vec.Vector.<mgs.aurora.games.common.components.loader.LoaderContainer>;
            var i:int;
            var nice:__AS3__.vec.Vector.<mgs.aurora.games.common.components.loader.LoaderContainer>;
            var other:__AS3__.vec.Vector.<mgs.aurora.games.common.components.loader.LoaderContainer>;

            var loc1:*;
            xl = null;
            freegameAvailable = false;
            preLdr = null;
            ass = null;
            mst = null;
            nce = null;
            othr = null;
            compMustHave = null;
            compNiceToHave = null;
            compOther = null;
            ldr = null;
            must = null;
            i = 0;
            nice = null;
            other = null;
            loader = mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance;
            xml = this._loaderXML;
            responseData = mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            var loc2:*=0;
            var loc3:*=xml.resources.resource;
            for each (xl in loc3) 
            {
                loader.addResource(xl.@id.toString(), xl.@name.toString(), xl.@type.toString(), uint(xl.@fileSize), xl.@proxy.toString(), false);
                var loc4:*=0;
                var loc5:*=xl.asset;
                for each (ass in loc5) 
                {
                    loader.addAsset(ass.@id.toString(), xl.@id.toString(), ass.@classname.toString(), ass.@type.toString(), ass.@proxy.toString(), Number(ass.@x.toString()), Number(ass.@y.toString()));
                }
            }
            this._blockLoadersQueue = new mgs.aurora.games.common.components.loader.BlockLoaderQueueManager();
            freegameAvailable = responseData.freeGames.numberOf > 0 ? true : false;
            freeGameFiles = [];
            freeGameComponents = [];
            if (freegameAvailable) 
            {
                loc3 = 0;
                loc4 = xml.states.view;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (attribute("id") == ViewChangeServer.FREEGAMES) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                freeGameFiles = loc2.files.@mustHave.toString().split(",");
                loc3 = 0;
                loc4 = xml.states.view;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (attribute("id") == ViewChangeServer.FREEGAMES) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                freeGameComponents = loc2.components.@mustHave.toString().split(",");
            }
            loc2 = 0;
            loc3 = xml.states.view;
            for each (xl in loc3) 
            {
                if (xl.@id.toString() == mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.FREEGAMES) 
                {
                    continue;
                }
                mst = xl.files.@mustHave.toString() != "" ? xl.files.@mustHave.toString().split(",") : null;
                nce = xl.files.@niceToHave.toString() != "" ? xl.files.@niceToHave.toString().split(",") : null;
                othr = xl.files.@other.toString() != "" ? xl.files.@other.toString().split(",") : null;
                compMustHave = xl.components.@mustHave.toString().split(",");
                compNiceToHave = xl.components.@niceToHave.toString().split(",");
                compOther = xl.components.@other.toString().split(",");
                if (freegameAvailable && !(xl.@id.toString() == mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD)) 
                {
                    mst = freeGameFiles.concat(mst);
                    compMustHave = freeGameComponents.concat(compMustHave);
                }
                ldr = loader.addStateToLoad(xl.@id.toString(), mst, nce, othr, compMustHave, compNiceToHave, compOther);
                if (ldr.mustHave != null) 
                {
                    must = new Vector.<mgs.aurora.games.common.components.loader.LoaderContainer>(ldr.mustHave.length);
                    i = 0;
                    while (i < ldr.mustHave.length) 
                    {
                        must[i] = loader.getResourceContainer(ldr.mustHave[i]);
                        this._blockLoadersQueue.add(new mgs.aurora.games.common.components.loader.BlockLoaderQueueItem(ldr.id, ldr.mustHave[i], LEVEL_MUST_HAVE));
                        ++i;
                    }
                }
                if (ldr.niceToHave != null) 
                {
                    nice = new Vector.<mgs.aurora.games.common.components.loader.LoaderContainer>(ldr.niceToHave.length);
                    i = 0;
                    while (i < ldr.niceToHave.length) 
                    {
                        nice[i] = loader.getResourceContainer(ldr.niceToHave[i]);
                        this._blockLoadersQueue.add(new mgs.aurora.games.common.components.loader.BlockLoaderQueueItem(ldr.id, ldr.niceToHave[i], LEVEL_NICE_TO_HAVE));
                        ++i;
                    }
                }
                if (ldr.other == null) 
                {
                    continue;
                }
                other = new Vector.<mgs.aurora.games.common.components.loader.LoaderContainer>(ldr.other.length);
                i = 0;
                while (i < ldr.other.length) 
                {
                    other[i] = loader.getResourceContainer(ldr.other[i]);
                    this._blockLoadersQueue.add(new mgs.aurora.games.common.components.loader.BlockLoaderQueueItem(ldr.id, ldr.other[i], LEVEL_OTHER));
                    ++i;
                }
            }
            preLdr = mgs.aurora.games.common.components.loader.StateLoadObject(mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getStateToLoad(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD));
            this._numberOfPreloadFile = preLdr.mustHave.length + 2;
            if (mgs.aurora.games.framework.ModuleReference.moduleInfo.hasRuleSet) 
            {
                loc3 = ((loc2 = this)._numberOfPreloadFile + 1);
                loc2._numberOfPreloadFile = loc3;
            }
            this._loaderXML = null;
            _trace("Start loading the files...", "test", this, 255);
            this.initLoad();
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            this.parseLoadPriorities();
            return;
        }

        internal function updateLoader(arg1:int):void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.preloader.setFileCount(arg1);
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_VIEW_READY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONFIG_RECEIVED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RULESET_RECEIVED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_FILE_LOADED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_GOT_IT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_LOADER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_LOADER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NEXT_STATE_READY));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.fileReceived, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_GOT_IT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_LOAD_PRIORITIES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onState, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRefresh, mgs.aurora.games.logicBlocks.publishers.ResponseServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ResponseServer.SERVICE_REFRESH);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGameComplete, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_GAME_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGameComplete, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_BONUS_GAME_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGameComplete, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onTestForNextState, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_TEST_FOR_NEXT_STATE_ASSETS);
            return;
        }

        internal function onRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._gotRefresh = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._gotLoaderXML = true;
            this._loaderXML = arg1.data;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function fileReceived(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.games.common.components.loader.LoaderContainer(mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer(arg1.data.request.id));
            var loc4:*=0;
            var loc5:*=mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.resourceMap;
            for each (loc2 in loc5) 
            {
                if (loc2.fileName != loc1.fileName) 
                {
                    continue;
                }
                loc2.loaded = true;
                loc2.data = arg1.data.content;
                syndicate(this, SERVICE_ON_FILE_LOADED, new mgs.aurora.games.framework.TransportLayer({"request":{"id":loc2.idName, "url":loc2.fileName, "contentType":arg1.data.request.contentType}, "content":arg1.data.content}));
            }
            if (arg1.data.request.id == "PreLoad" && !mgs.aurora.games.logicBlocks.data.SettingsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SettingsData.PUBLISHER_NAME)).viperClient && !(this._splash.name == "PreLoad")) 
            {
                this._splash = mgs.aurora.games.common.components.resourceProxy.Assets.getResource("PreLoad");
                mgs.aurora.games.framework.AuroraReference.aurora.preloader.backgroundAlpha = 0;
                mgs.aurora.games.framework.StageReference.getLevel("Preloader").addChild(this._splash);
            }
            var loc3:*;
            if ((loc3 = this.getFileToLoad()) == null) 
            {
                this.hideLoader();
                syndicate(this, SERVICE_COMPLETE);
                _trace("All files have loaded");
            }
            else 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.server.loadFile(new mgs.aurora.api.server.FileRequest(loc3.idName, mgs.aurora.games.framework.ModuleReference.moduleInfo.url + loc3.fileName, this.returnType(loc3.type)));
            }
            return;
        }

        internal function viewComplete(arg1:String, arg2:String, arg3:String):Boolean
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._blockLoadersQueue.queue;
            for each (loc1 in loc3) 
            {
                if (!(arg1 == loc1.id && arg2 == loc1.type && !(loc1.name == arg3))) 
                {
                    continue;
                }
                return false;
            }
            return true;
        }

        internal function sendViewComplete(arg1:String, arg2:String):void
        {
            var loc1:*=mgs.aurora.games.common.components.loader.StateLoadObject(mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getStateToLoad(arg1));
            var loc2:*=arg2;
            switch (loc2) 
            {
                case LEVEL_MUST_HAVE:
                {
                    this._loadedViewList.push(arg1);
                    syndicate(this, SERVICE_ON_VIEW_READY, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransViewReady(loc1.id, LEVEL_MUST_HAVE, loc1.componentsMust)));
                    break;
                }
                case LEVEL_NICE_TO_HAVE:
                {
                    syndicate(this, SERVICE_ON_VIEW_READY, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransViewReady(loc1.id, LEVEL_NICE_TO_HAVE, loc1.componentsNice)));
                    break;
                }
                case LEVEL_OTHER:
                {
                    syndicate(this, SERVICE_ON_VIEW_READY, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransViewReady(loc1.id, LEVEL_OTHER, loc1.componentsOther)));
                    break;
                }
            }
            return;
        }

        internal function getFileToLoad():mgs.aurora.games.common.components.loader.LoaderContainer
        {
            var loc4:*=null;
            var loc1:*=this._blockLoadersQueue.current.id;
            var loc2:*=this._blockLoadersQueue.current.type;
            var loc3:*=this._blockLoadersQueue.current.name;
            if (this.viewComplete(loc1, loc2, loc3)) 
            {
                this.sendViewComplete(loc1, loc2);
                if (loc1 != mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD) 
                {
                    this._firstShow = false;
                }
                else 
                {
                    this.shuffelBlocks(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME)).view);
                }
                if (loc2 == LEVEL_MUST_HAVE && loc1 == mgs.aurora.games.logicBlocks.publishers.ViewChangeServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME)).view) 
                {
                    this.hideLoader();
                }
            }
            this._blockLoadersQueue.getNextItem();
            if (this._blockLoadersQueue.current != null) 
            {
                if ((loc4 = mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getResourceContainer(this._blockLoadersQueue.current.name)).loaded && this._blockLoadersQueue.hasQueuedItems) 
                {
                    loc4 = this.getFileToLoad();
                }
                return loc4;
            }
            return null;
        }

        internal function traceQueue():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._blockLoadersQueue.queue;
            for each (loc1 in loc3) 
            {
                _trace("LEVEL:" + loc1.type + "  NAME:" + loc1.name + "  VIEW:" + loc1.id);
            }
            return;
        }

        internal function onGameComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this._blockLoadersQueue.hasQueuedItems) 
            {
                loc1 = mgs.aurora.games.logicBlocks.publishers.ViewChangeServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME)).view;
                this.shuffelBlocks(loc1);
                if (this.testForLoader(loc1, LEVEL_MUST_HAVE)) 
                {
                    this.showLoader(this.getNumberFilesToLoad(loc1, LEVEL_MUST_HAVE) + 1);
                }
            }
            return;
        }

        internal function onTestForNextState(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this._blockLoadersQueue.hasQueuedItems) 
            {
                loc1 = mgs.aurora.games.logicBlocks.publishers.ViewChangeServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME)).view;
                this.shuffelBlocks(loc1);
                if (!this.testForLoader(loc1, LEVEL_MUST_HAVE)) 
                {
                    syndicate(this, SERVICE_NEXT_STATE_READY, new mgs.aurora.games.framework.TransportLayer(loc1));
                }
            }
            else 
            {
                syndicate(this, SERVICE_NEXT_STATE_READY, new mgs.aurora.games.framework.TransportLayer(loc1));
            }
            return;
        }

        internal function onState(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            var loc2:*=mgs.aurora.games.common.components.loader.StateLoadObject(mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getStateToLoad(loc1));
            var loc3:*=mgs.aurora.games.common.components.loader.StateLoadObject(mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getStateToLoad(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD));
            if (loc2 == null) 
            {
                _trace("ERROR: View [" + loc1 + "] error. Check the loadInfo in your config.", "error", this, 16711680);
                return;
            }
            if (this._firstShow && !(loc2.id == mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD)) 
            {
                this.shuffelBlocks(mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PRELOAD);
                this.updateLoader(this._numberOfPreloadFile + loc2.mustHave.length);
                _trace("LOADING NUMFILES:" + (this._numberOfPreloadFile + loc2.mustHave.length));
            }
            var loc4:*;
            if ((loc4 = mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME))).id.verb == mgs.aurora.slots.components.enums.Verbs.FREESPIN || loc4.id.verb == mgs.aurora.slots.components.enums.Verbs.RESPIN || loc4.id.verb == mgs.aurora.slots.components.enums.Verbs.SPIN) 
            {
                if (loc4.wins.numberOf == 0 && !this._firstShow) 
                {
                    this.shuffelBlocks(loc1);
                    if (this.testForLoader(loc1, LEVEL_MUST_HAVE)) 
                    {
                        this.showLoader(this.getNumberFilesToLoad(loc1, LEVEL_MUST_HAVE) + 1);
                    }
                }
            }
            else if (!this._firstShow) 
            {
                this.shuffelBlocks(loc1);
                if (this.testForLoader(loc1, LEVEL_MUST_HAVE)) 
                {
                    this.showLoader(this.getNumberFilesToLoad(loc1, LEVEL_MUST_HAVE) + 1);
                }
            }
            return;
        }

        internal function testForLoader(arg1:String, arg2:String):Boolean
        {
            if (this.getNumberFilesToLoad(arg1, arg2) > 0) 
            {
                _trace("Show loader for view:" + arg1 + " level " + arg2 + " num files:" + this.getNumberFilesToLoad(arg1, arg2));
                return true;
            }
            return false;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._gotRefresh && this._gotLoaderXML;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const SERVICE_SHOW_LOADER:String="SHOW_LOADER";

        public static const PUBLISHER_NAME:String="PUBLISHER_NEOLOADER";

        public static const SERVICE_COMPLETE:String="COMPLETE";

        public static const SERVICE_CONFIG_RECEIVED:String="CONFIG_RECEIVED";

        public static const SERVICE_RULESET_RECEIVED:String="RULESET_RECEIVED";

        public static const SERVICE_ON_FILE_LOADED:String="ON_FILE_LOADED";

        public static const SERVICE_ON_VIEW_READY:String="ON_VIEW_READY";

        public static const SERVICE_HIDE_LOADER:String="HIDE_LOADER";

        public static const SERVICE_NEXT_STATE_READY:String="SERVICE_NEXT_STATE_READY";

        public static const LEVEL_MUST_HAVE:String="mustHave";

        public static const LEVEL_NICE_TO_HAVE:String="niceToHave";

        public static const LEVEL_OTHER:String="other";

        internal static const SERVICE_ON_GOT_IT:String="GOT_IT";

        internal var _numberOfPreloadFile:int=0;

        internal var _loadedViewList:__AS3__.vec.Vector.<String>;

        internal var _firstShow:Boolean=false;

        internal var _firstUpdate:Boolean=false;

        internal var _loaderXML:XMLList;

        internal var _splash:flash.display.MovieClip;

        internal var _currentLoadingBlock:mgs.aurora.games.common.components.loader.StateLoadObject;

        internal var _gotLoaderXML:Boolean=false;

        internal var _gotRefresh:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _isConfig:Boolean=false;

        internal var _blockLoadersQueue:mgs.aurora.games.common.components.loader.BlockLoaderQueueManager;

        internal var _activeLoadView:String;
    }
}


//            class ParticlesServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.particlerush.*;
    import mgs.aurora.slots.components.particlerush.data.*;
    import mgs.aurora.slots.components.particlerush.particleRushInterfaces.*;
    
    public class ParticlesServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ParticlesServer()
        {
            this._particleRushVector = new Vector.<mgs.aurora.slots.components.particlerush.ParticleRush>();
            super(mgs.aurora.games.logicBlocks.publishers.ParticlesServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ParticlesServer");
            return;
        }

        internal function endAllParticleRushesImmediately():void
        {
            var loc1:*=0;
            while (loc1 < this._particleRushVector.length) 
            {
                if (this._particleRushVector[loc1] != null) 
                {
                    this._particleRushVector[loc1].complete();
                }
                ++loc1;
            }
            return;
        }

        internal function idCurrentlyEnvoked(arg1:String):Boolean
        {
            this.removeCompleteRushInstances();
            var loc1:*=0;
            while (loc1 < this._particleRushVector.length) 
            {
                if (this._particleRushVector[loc1].Id == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        internal function removeCompleteRushInstances():void
        {
            var loc1:*=0;
            while (loc1 < this._particleRushVector.length) 
            {
                if (this._particleRushVector[loc1].particleRushComplete) 
                {
                    this._particleRushVector.splice(loc1, 1);
                    --loc1;
                }
                ++loc1;
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._gotConfigXML;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this.endAllParticleRushes();
                this.removeCompleteRushInstances();
                this._particleRushVector = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOPPED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SCREEN_CLEAR));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfigLoaded, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_PARTICLES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onComplete, mgs.aurora.games.logicBlocks.agents.ParticleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ParticleAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPlayParticle, mgs.aurora.games.logicBlocks.agents.ParticleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ParticleAgent.SERVICE_PLAY_PARTICLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onView, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.show, mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.show, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hide, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hide, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hide, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.show, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onKill, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onConfigLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._particlesXML = new XML(arg1.data);
            this._gotConfigXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            mgs.aurora.games.framework.StageReference.getLevel("Particles").mouseEnabled = false;
            mgs.aurora.games.framework.StageReference.getLevel("Particles").mouseChildren = false;
            return;
        }

        internal function onKill(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.endAllParticleRushesImmediately();
            return;
        }

        internal function onComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var t:mgs.aurora.games.framework.ITransportLayer=null;
            var data:mgs.aurora.games.common.dataTypes.TransParticleInterrupt;

            var loc1:*;
            data = null;
            t = arg1;
            if (t.data == null) 
            {
                this.endAllParticleRushes();
            }
            else 
            {
                data = t.data as mgs.aurora.games.common.dataTypes.TransParticleInterrupt;
                try 
                {
                    data.method.apply(t.data.method, [this.getParticleById(t.data.id)]);
                }
                catch (err:Error)
                {
                    _trace("ERROR #1 = " + err.message, "error", this, 16711680);
                }
            }
            return;
        }

        internal function onPlayParticle(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this.isReady) 
            {
                if (!this.idCurrentlyEnvoked(arg1.data)) 
                {
                    loc1 = new mgs.aurora.slots.components.particlerush.ParticleRush(this.createParticleRushData(arg1.data));
                    this._particleRushVector.push(loc1);
                }
            }
            return;
        }

        internal function hide(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (mgs.aurora.games.framework.StageReference.getLevel("Particles").visible) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("Particles").visible = false;
            }
            return;
        }

        internal function show(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!mgs.aurora.games.framework.StageReference.getLevel("Particles").visible) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("Particles").visible = true;
            }
            return;
        }

        internal function createParticleRushData(arg1:String="coins"):mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticleRushData
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=new XML();
            var loc4:*=0;
            var loc5:*=this._particlesXML.particle;
            for each (loc2 in loc5) 
            {
                if (arg1 != String(loc2.@id)) 
                {
                    continue;
                }
                loc1 = loc2;
                break;
            }
            (loc3 = new mgs.aurora.slots.components.particlerush.data.ParticleRushData()).ParticleRushLayer = flash.display.Sprite(mgs.aurora.games.framework.StageReference.getLevel("Particles"));
            loc3.GameEventDispatcher = this._gamedisp;
            loc3.ToThrowAtOnce = uint(loc1.@toThrowAtOnce);
            loc3.Continuous = Boolean(loc1.@continuous == "true");
            loc3.TotalToThrow = uint(loc1.@totalToThrow);
            loc3.YIncrement = int(loc1.@yIncrement);
            loc3.ZEnabled = Boolean(loc1.@zEnabled == "true");
            loc3.ZIncrement = int(loc1.@zIncrement);
            loc3.ZLimit = int(loc1.@zLimit);
            loc3.StartPos = new flash.geom.Point(int(loc1.@x), int(loc1.@y));
            loc3.Friction = Number(loc1.@friction);
            loc3.Gravity = Number(loc1.@gravity);
            loc3.MinXPos = int(loc1.@minXPos);
            loc3.MaxXPos = int(loc1.@maxXPos);
            loc3.MinYPos = int(loc1.@minYPos);
            loc3.MaxYPos = int(loc1.@maxYPos);
            loc3.CommandEndTime = uint(loc1.@commandEndTime);
            loc3.RushWidth = uint(loc1.@rushWidth);
            loc3.BezierPathsEnabled = Boolean(loc1.@bezierPathsEnabled == "true");
            loc3.BezierPaths = XMLList(loc1.emitter.paths);
            loc3.AssetId = String(loc1.@assetId);
            loc3.Id = String(loc1.@id);
            loc3.ImmediateKill = Boolean(loc1.@immediateKill == "true");
            loc3.ThrowRate = uint(loc1.@throwRate);
            loc3.ParticlesLimit = uint(loc1.@particlesLimit);
            return loc3;
        }

        internal function getParticleById(arg1:String):mgs.aurora.slots.components.particlerush.ParticleRush
        {
            this.removeCompleteRushInstances();
            var loc1:*=0;
            while (loc1 < this._particleRushVector.length) 
            {
                if (this._particleRushVector[loc1].Id == arg1) 
                {
                    return this._particleRushVector[loc1];
                }
                ++loc1;
            }
            return null;
        }

        internal function endAllParticleRushes():void
        {
            var loc1:*=0;
            while (loc1 < this._particleRushVector.length) 
            {
                if (this._particleRushVector[loc1] != null) 
                {
                    this._particleRushVector[loc1].endParticleRush();
                    this._particleRushVector[loc1] = null;
                }
                ++loc1;
            }
            this._particleRushVector.splice(0, this._particleRushVector.length);
            syndicate(this, SERVICE_STOPPED);
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_PARTICLES";

        public static const SERVICE_STOPPED:String="STOPPED";

        public static const SERVICE_SCREEN_CLEAR:String="SCREEN_CLEAR";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _gotConfigXML:Boolean=false;

        internal var _viewReady:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _particleRushVector:__AS3__.vec.Vector.<mgs.aurora.slots.components.particlerush.ParticleRush>;

        internal var _particlesXML:XML;

        internal var _gamedisp:flash.events.EventDispatcher;
    }
}


//            class PayLineWinDisplayServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class PayLineWinDisplayServer extends mgs.aurora.games.logicBlocks.publishers.WinDisplayServer
    {
        public function PayLineWinDisplayServer()
        {
            this._allPaylinesInWins = new Vector.<int>();
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.PayLineWinDisplayServer");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_LABELS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_LABELS));
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            return;
        }

        internal function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            clearScheduledActions();
            return;
        }

        protected override function setupForWinIterations():void
        {
            var loc1:*=0;
            super.setupForWinIterations();
            if (isReady) 
            {
                while (this._allPaylinesInWins.length > 0) 
                {
                    this._allPaylinesInWins.pop();
                }
                loc1 = 0;
                while (loc1 < _conductor.response.wins.numberOf) 
                {
                    this._allPaylinesInWins.push(_conductor.response.wins.wins[loc1].payline);
                    ++loc1;
                }
            }
            return;
        }

        protected override function doHighlightWin(arg1:mgs.aurora.games.logicBlocks.data.types.WinPacket):org.as3lib.kitchensync.action.group.IActionGroup
        {
            var win:mgs.aurora.games.logicBlocks.data.types.WinPacket;
            var scheduler:org.as3lib.kitchensync.action.group.KSSequenceGroup;
            var symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;
            var matchP:__AS3__.vec.Vector.<int>;
            var wins:__AS3__.vec.Vector.<int>;
            var numCoinsWon:Number;
            var id:int;
            var hde:org.as3lib.kitchensync.action.IAction;
            var hdeWinPayLines:org.as3lib.kitchensync.action.IAction;
            var hdeLabels:org.as3lib.kitchensync.action.IAction;
            var shwLabels:org.as3lib.kitchensync.action.IAction;
            var shwWinPayLines:org.as3lib.kitchensync.action.IAction;
            var shw:org.as3lib.kitchensync.action.IAction;
            var iHideAction:org.as3lib.kitchensync.action.group.IActionGroup;
            var iShowAction:org.as3lib.kitchensync.action.group.IActionGroup;
            var iAction:org.as3lib.kitchensync.action.group.IActionGroup;

            var loc1:*;
            matchP = null;
            wins = null;
            numCoinsWon = NaN;
            id = 0;
            hde = null;
            hdeWinPayLines = null;
            hdeLabels = null;
            shwLabels = null;
            shwWinPayLines = null;
            shw = null;
            iHideAction = null;
            iShowAction = null;
            iAction = null;
            win = arg1;
            scheduler = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            symbolsData = mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            try 
            {
                matchP = win.matchPos;
                wins = new Vector.<int>();
                wins.push(win.payline);
                numCoinsWon = win.numCoinsWon;
                id = win.id;
                hde = new org.as3lib.kitchensync.action.KSFunction(hideSymbols, symbolsData.iterationHideDelay, matchP, wins, numCoinsWon, id);
                hdeWinPayLines = new org.as3lib.kitchensync.action.KSFunction(hideWinLines, symbolsData.iterationHideDelay, matchP, wins, numCoinsWon, id);
                hdeLabels = new org.as3lib.kitchensync.action.KSFunction(this.hideWinLabels, symbolsData.iterationHideDelay, wins);
                shwLabels = new org.as3lib.kitchensync.action.KSFunction(this.showWinLabels, symbolsData.iterationShowDelay, wins);
                shwWinPayLines = new org.as3lib.kitchensync.action.KSFunction(showWinlines, symbolsData.iterationShowDelay, matchP, wins, numCoinsWon, id);
                shw = new org.as3lib.kitchensync.action.KSFunction(showSymbols, symbolsData.iterationShowDelay, matchP, wins, numCoinsWon, id);
                iHideAction = new org.as3lib.kitchensync.action.group.KSParallelGroup(hde, hdeWinPayLines, hdeLabels);
                iShowAction = new org.as3lib.kitchensync.action.group.KSParallelGroup(shw, shwWinPayLines, shwLabels);
                iAction = new org.as3lib.kitchensync.action.group.KSSequenceGroup(iShowAction, iHideAction);
                scheduler.addAction(new org.as3lib.kitchensync.action.group.KSLooper(iAction, symbolsData.numIterations, true));
                scheduler.addAction(iShowAction);
            }
            catch (e:Error)
            {
                _trace("Error in building wayWin sequence. -" + toString(), "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return scheduler;
        }

        protected override function doWinSummary():org.as3lib.kitchensync.action.group.IActionGroup
        {
            var scheduler:org.as3lib.kitchensync.action.group.KSSequenceGroup;
            var symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;
            var win:int;
            var sym:int;
            var i:int;
            var winlines:__AS3__.vec.Vector.<int>;
            var groupPayline:org.as3lib.kitchensync.action.group.KSParallelGroup;
            var groupHidePayline:org.as3lib.kitchensync.action.group.KSParallelGroup;
            var iAction:org.as3lib.kitchensync.action.group.IActionGroup;

            var loc1:*;
            win = 0;
            sym = 0;
            i = 0;
            winlines = null;
            groupPayline = null;
            groupHidePayline = null;
            iAction = null;
            if (this._allPaylinesInWins.length == 0) 
            {
                while (_allSymbolsInWins.length > 0) 
                {
                    _allSymbolsInWins.pop();
                }
                win = 0;
                while (win < _conductor.response.wins.numberOf) 
                {
                    sym = 0;
                    while (sym < _conductor.response.wins.wins[win].matchPos.length) 
                    {
                        _allSymbolsInWins.push(_conductor.response.wins.wins[win].matchPos[sym]);
                        ++sym;
                    }
                    ++win;
                }
                while (this._allPaylinesInWins.length > 0) 
                {
                    this._allPaylinesInWins.pop();
                }
                win = 0;
                while (win < _conductor.response.wins.numberOf) 
                {
                    this._allPaylinesInWins.push(_conductor.response.wins.wins[win].payline);
                    ++win;
                }
            }
            scheduler = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            symbolsData = mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            try 
            {
                i = _conductor.response.wins.wins.length;
                winlines = new Vector.<int>(i);
                while ((i = (i - 1)) > -1) 
                {
                    winlines[i] = _conductor.response.wins.wins[i].payline;
                }
                groupPayline = new org.as3lib.kitchensync.action.group.KSParallelGroup();
                groupPayline.addAction(new org.as3lib.kitchensync.action.KSFunction(showPaylines, 1, _allSymbolsInWins, this._allPaylinesInWins, _conductor.response.slot.win, -2));
                groupHidePayline = new org.as3lib.kitchensync.action.group.KSParallelGroup();
                groupHidePayline.addAction(new org.as3lib.kitchensync.action.KSFunction(hidePayLines, 1, _allSymbolsInWins, this._allPaylinesInWins, _conductor.response.slot.win, -2));
                iAction = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                iAction.addAction(groupPayline);
                iAction.addAction(new org.as3lib.kitchensync.action.KSWait(symbolsData.summaryShowDelay));
                iAction.addAction(groupHidePayline);
                iAction.addAction(new org.as3lib.kitchensync.action.KSWait(symbolsData.summaryHideDelay));
                scheduler.addAction(iAction);
            }
            catch (e:Error)
            {
                _trace("Error in building wayWin sequence. -" + toString(), "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return scheduler;
        }

        protected function hideWinLabels(arg1:__AS3__.vec.Vector.<int>):void
        {
            syndicate(this, SERVICE_HIDE_LABELS, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function showWinLabels(arg1:__AS3__.vec.Vector.<int>):void
        {
            syndicate(this, SERVICE_SHOW_LABELS, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        public static const SERVICE_SHOW_LABELS:String="SHOW_LABELS";

        public static const SERVICE_HIDE_LABELS:String="HIDE_LABELS";

        protected var _allPaylinesInWins:__AS3__.vec.Vector.<int>;
    }
}


//            class PaylineServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.system.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.tip.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.payline.*;
    import mgs.aurora.slots.components.payline.events.*;
    
    public class PaylineServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function PaylineServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.PaylineServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.PaylineServer");
            return;
        }

        protected function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._backToGameTriggered = false;
            this._betChanged = false;
            this.lockPaylines(true);
            this._paylineController.clearAll();
            this._paylineController.updateSelectors();
            if (this._conductor.autoplay.autoPlayActive) 
            {
                this._isAutoPlaySpin = true;
            }
            return;
        }

        protected function onBetData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (this.isReady) 
            {
                if (this._conductor.betData.numLines == this._NumPaylines) 
                {
                    if (this._NumCoins != this._conductor.betData.numChips) 
                    {
                        this._NumCoins = this._conductor.betData.numChips;
                        this._NumPaylines = this._conductor.betData.numLines;
                        NUM_SELECTOR_COINS = this._NumCoins;
                        this._paylineController.updateSelectors();
                    }
                }
                else 
                {
                    this._NumCoins = this._conductor.betData.numChips;
                    this._NumPaylines = this._conductor.betData.numLines;
                    NUM_SELECTOR_COINS = this._NumCoins;
                    loc1 = new Vector.<int>();
                    loc2 = 0;
                    while (loc2 < this._NumPaylines) 
                    {
                        loc1.push(loc2);
                        ++loc2;
                    }
                    this._paylineController.showPaylines(loc1);
                    this._paylineController.setActivePaylines(loc1.toString());
                }
            }
            return;
        }

        internal function onBoundaryChanged(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._paylineController.updateSelectors();
                if (this.canDo) 
                {
                    this.lockPaylines(false);
                }
                else 
                {
                    this.lockPaylines(true);
                }
            }
            return;
        }

        internal function getActivePaylinesIDs(arg1:int):String
        {
            var loc1:*="";
            var loc2:*=-1;
            while (loc2 < arg1) 
            {
                if (++loc2 == arg1) 
                {
                    loc1 = loc1 + loc2.toString();
                    continue;
                }
                loc1 = loc1 + (loc2.toString() + ",");
            }
            return loc1;
        }

        protected function lockPaylines(arg1:Boolean):void
        {
            if (arg1) 
            {
                this._hitmap.enabled = false;
                this._paylineController.disable();
                this._paylineSelectors.disable();
            }
            else 
            {
                this._hitmap.enabled = true;
                this._paylineController.enable();
                this._paylineSelectors.enable();
            }
            return;
        }

        protected function updateLines(arg1:mgs.aurora.slots.components.payline.events.PaylineSelectEvent):void
        {
            if (this._hitmap.enabled) 
            {
                this._NumPaylines = arg1.lineID + 1;
                syndicate(this, SERVICE_UPDATE_PAYLINES, new mgs.aurora.games.framework.TransportLayer(arg1.lineID));
                syndicate(this, SERVICE_PAYLINES_SELECTOR_UPDATE, new mgs.aurora.games.framework.TransportLayer(arg1.lineID));
            }
            return;
        }

        protected function hitmapHideToolTip(arg1:mgs.aurora.slots.components.payline.events.PaylineSelectEvent):void
        {
            mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
            return;
        }

        protected function hitmapShowToolTip(arg1:mgs.aurora.slots.components.payline.events.PaylineSelectEvent):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (this._hitmap.enabled) 
            {
                if (this._conductor.betData.numLines >= int(arg1.lineID) + 1) 
                {
                    loc1 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId("PAYLINE_TOOLTIP");
                    loc2 = String(arg1.lineID + 1);
                    loc3 = this._conductor.betData.numChips.toString();
                    mgs.aurora.games.framework.tip.ToolTipController.showToolTip(mgs.aurora.games.common.components.utils.StringFormatting.insertArgs(loc1, loc2, loc3));
                }
            }
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.getPaylineXML, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelsStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hideWinLines, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_HIDE_WINLINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showWinLines, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_SHOW_WINLINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hidePayLines, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_HIDE_PAYLINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showPayLines, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_SHOW_PAYLINE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.showLabels, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.PayLineWinDisplayServer.SERVICE_SHOW_LABELS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.hideLabels, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.PayLineWinDisplayServer.SERVICE_HIDE_LABELS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetMax, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_BET_MAX);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onXAutoplay, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAutoplayComplete, mgs.aurora.games.logicBlocks.data.AutoPlayData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.AutoPlayData.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoinSizeChanged, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_DEC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoinSizeChanged, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_INC);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundaryChanged, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetData, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGambleComplete, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COMPLETED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusSummaryOpen, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinSummaryOpen, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.BonusSummaryAgent.SERVICE_SUMMARY_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoinsUpdate, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreegameNow, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_USE_NOW);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUseLater, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_BACK_TO_GAME);
            return;
        }

        internal function getPaylineXML(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._gotPaylineXML) 
            {
                this._config = XML(arg1.data);
                this._gotPaylineXML = true;
                if (this.canConfig) 
                {
                    this.setup();
                }
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                return false;
            }
            if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.CHOOSING_BONUS) 
            {
                return false;
            }
            if (this._conductor.response.framework.state == 1 && this._conductor.response.gamble.gamblesMade > 0) 
            {
                return false;
            }
            if (this._conductor.response.slot.state == 1 || this._conductor.response.slot.state == 2) 
            {
                return false;
            }
            if (this._conductor.autoplay.autoPlayActive || !this._conductor.autoplay.autoPlayActive && this._isAutoPlaySpin) 
            {
                return false;
            }
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTERBONUS:
                {
                    if (this._conductor.betData.betValid) 
                    {
                        return true;
                    }
                    break;
                }
                default:
                {
                    return false;
                }
            }
            return false;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._gotPaylineXML && this._viewReady;
        }

        public function get paylineConfigSettings():mgs.aurora.slots.components.payline.PaylineConfigSettings
        {
            return this._paylineConfigSettings;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAUSE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CONTINUE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SEQUINCE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET_CHANGED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TIME_DELAY_REACHED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE_PAYLINES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PAYLINES_SELECTOR_UPDATE));
            this.defineSubscribers();
            return;
        }

        
        {
            NUM_SELECTOR_COINS = 1;
            FLASH_SELECTORS = false;
            FLASH_PAYLINES = false;
            HIDE_WIN_PAYLINE_BOXES = false;
            SHOW_BOX_BORDERS = false;
            SHOW_COINS_ON_SELECTORS = true;
        }

        internal function showLabels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data as Vector.<int>;
            var loc2:*=loc1.length;
            while (--loc2 > -1) 
            {
                this._paylineController.updateSelectorLabel(loc1[loc2], true, true);
            }
            return;
        }

        internal function hideLabels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data as Vector.<int>;
            var loc2:*=loc1.length;
            while (--loc2 > -1) 
            {
                this._paylineController.updateSelectorLabel(loc1[loc2], true, false);
            }
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = true;
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            var node:XML;
            var selectorDisplayType:int;
            var showBoxes:Boolean;
            var numTimeToFlash:int;
            var timeBetweenFlashes:int;
            var hitlookups:Object;
            var linecolors:Array;
            var lineBorderColors:Array;
            var fontnames:Object;
            var paylinesAppDomain:flash.system.ApplicationDomain;
            var paylineDrawerRef:mgs.aurora.slots.components.payline.IPaylineDrawer;

            var loc1:*;
            node = null;
            showBoxes = false;
            numTimeToFlash = 0;
            timeBetweenFlashes = 0;
            hitlookups = null;
            linecolors = null;
            lineBorderColors = null;
            fontnames = null;
            paylinesAppDomain = null;
            paylineDrawerRef = null;
            if (this._isConfig) 
            {
                return;
            }
            var loc3:*=0;
            var loc4:*=this._config.paylineConf.settings.rule;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (@id == "flashSelectors") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            FLASH_SELECTORS = loc2.@value != "true" ? false : true;
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "flashPaylines") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            FLASH_PAYLINES = loc2.@value != "true" ? false : true;
            SHOW_COINS_ON_SELECTORS;
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "selectorDisplayType") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            selectorDisplayType = int(loc2.@value);
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "showBoxes") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            showBoxes = loc2.@value != "true" ? false : true;
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "showBoxBorders") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            SHOW_BOX_BORDERS = loc2.@value != "true" ? false : true;
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "hideWinBoxes") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            HIDE_WIN_PAYLINE_BOXES = loc2.@value != "true" ? false : true;
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "numTimesToFlash") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            numTimeToFlash = int(loc2.@value);
            loc3 = 0;
            loc4 = this._config.paylineConf.settings.rule;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (@id == "timeBetweenFlashes") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            timeBetweenFlashes = int(loc2.@value);
            this._paylineConfigSettings = new mgs.aurora.slots.components.payline.PaylineConfigSettings(selectorDisplayType, FLASH_PAYLINES, numTimeToFlash, timeBetweenFlashes, showBoxes, SHOW_BOX_BORDERS, HIDE_WIN_PAYLINE_BOXES);
            hitlookups = new Object();
            loc2 = 0;
            loc3 = this._config.paylineConf.paylineSelectorLookups.lookup;
            for each (node in loc3) 
            {
                hitlookups[node.@name] = int(node.@payline);
            }
            linecolors = new Array();
            lineBorderColors = new Array();
            loc2 = 0;
            loc3 = this._config.paylineConf.paylines.payline;
            for each (node in loc3) 
            {
                linecolors[uint(node.@id)] = uint(node.@color);
                if (!SHOW_BOX_BORDERS) 
                {
                    continue;
                }
                lineBorderColors[uint(node.@id)] = uint(node.@borderColor);
            }
            fontnames = new Object();
            loc2 = 0;
            loc3 = this._config.paylineConf.paylineSelectorFonts.font;
            for each (node in loc3) 
            {
                fontnames[node.@name] = node.@className;
            }
            this._NumCoins = this._conductor.betData.numChips;
            this._NumPaylines = this._conductor.betData.numLines;
            NUM_SELECTOR_COINS = this._NumCoins;
            paylinesAppDomain = mgs.aurora.games.common.components.resourceProxy.Assets.getResource("paylines").loaderInfo.applicationDomain;
            this._hitmap = new (paylinesAppDomain.getDefinition("PaylineSelectorHitmap") as Class)();
            this._paylineSelectors = new mgs.aurora.slots.components.payline.PaylineSelectors(this._hitmap, hitlookups);
            this._paylineSelectors.addEventListener(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.SELECT, this.updateLines);
            this._paylineSelectors.addEventListener(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.MOUSE_OVER, this.hitmapShowToolTip);
            this._paylineSelectors.addEventListener(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.MOUSE_OUT, this.hitmapHideToolTip);
            paylineDrawerRef = new mgs.aurora.slots.components.payline.PaylineDrawer(paylinesAppDomain, Vector.<uint>(linecolors), fontnames, Vector.<uint>(lineBorderColors));
            this._paylineController = new mgs.aurora.slots.components.payline.PaylineController(mgs.aurora.games.framework.StageReference.getLevel("Paylines"), this._paylineSelectors, this._paylineConfigSettings);
            this._paylineController.build(new mgs.aurora.slots.components.payline.PaylineBuilder(this._conductor.response.bet.activePaylines, this._conductor.response.bet.numChips, this._conductor.response.bet.chipSize, this._conductor.response.bet.numPaylinesPerGame, paylineDrawerRef, this._paylineController.labelsContainer));
            this._paylineController.setActivePaylines(this._conductor.betData.activePaylines.toString());
            this._paylineController.updateSelectors();
            this._isConfig = true;
            this._paylineController.setWinningPaylines(this._conductor.response.wins.wins);
            this._betValue = this._conductor.betData.betValue;
            if (this.canDo) 
            {
                this.lockPaylines(false);
            }
            else 
            {
                this.lockPaylines(true);
            }
            return;
        }

        public function showWinLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            this._paylineController.showWinlines(loc1.paylines);
            this._paylineController.showSelectors(loc1.paylines);
            loc1 = null;
            return;
        }

        public function hideWinLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (FLASH_PAYLINES) 
            {
                this._paylineController.hideWinLines();
            }
            else 
            {
                this._paylineController.showWinlines(loc1.paylines);
            }
            if (FLASH_SELECTORS) 
            {
                this._paylineController.hideSelectors(loc1.paylines);
            }
            else 
            {
                this._paylineController.showSelectors(loc1.paylines);
            }
            loc1 = null;
            return;
        }

        public function showPayLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            this._paylineController.showPaylines(loc1.paylines, true, false);
            loc1 = null;
            return;
        }

        public function hidePayLines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (FLASH_PAYLINES) 
            {
                this._paylineController.hidePayLines();
            }
            loc1 = null;
            return;
        }

        protected function onFreeSpinSummaryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paylineController.updateSelectors();
            this.lockPaylines(true);
            return;
        }

        internal function onBonusSummaryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paylineController.updateSelectors();
            this.lockPaylines(true);
            return;
        }

        internal function onXAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data == 5 || arg1.data == 10) 
            {
                this.lockPaylines(true);
            }
            return;
        }

        internal function onAutoplayComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.canDo) 
            {
                this.lockPaylines(false);
            }
            else 
            {
                this.lockPaylines(true);
            }
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.lockPaylines(true);
            return;
        }

        protected function onCoinSizeChanged(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paylineController.updateSelectors();
            return;
        }

        internal function onCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paylineController.updateSelectors();
            return;
        }

        internal function onGambleComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.canDo) 
            {
                this.lockPaylines(false);
            }
            else 
            {
                this.lockPaylines(true);
            }
            return;
        }

        internal function onUseLater(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!(mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS == this._conductor.state.state) || !(mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS == this._conductor.state.state) || !(mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS == this._conductor.state.state) || !(mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS == this._conductor.state.state)) 
            {
                if (this.canDo) 
                {
                    this.lockPaylines(false);
                }
                else 
                {
                    this.lockPaylines(true);
                }
                this._paylineController.updateSelectors();
            }
            return;
        }

        internal function onFreegameNow(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._paylineController.updateSelectors();
            this.lockPaylines(true);
            return;
        }

        protected function onCoinsUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            _trace(arg1.data);
            this._NumCoins = mgs.aurora.games.common.dataTypes.TransCoins(arg1.data).coins;
            NUM_SELECTOR_COINS = this._NumCoins;
            this._paylineController.updateSelectors();
            return;
        }

        protected function onBetMax(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new Vector.<int>();
            var loc2:*=0;
            while (loc2 < this._conductor.betData.maxLines) 
            {
                loc1[loc2] = loc2;
                ++loc2;
            }
            this._NumCoins = this._conductor.betData.maxChips;
            NUM_SELECTOR_COINS = this._NumCoins;
            this._NumPaylines = this._conductor.betData.maxLines;
            this._paylineController.setActivePaylines(loc1.toString());
            this._betChanged = !(this._conductor.betData.previousCoins == this._conductor.betData.numChips) || !(this._conductor.betData.previousLines == this._conductor.betData.numLines) ? true : false;
            if (this._betChanged) 
            {
                this.lockPaylines(true);
                this._paylineController.showPaylines(loc1);
            }
            else 
            {
                this._paylineController.updateSelectors();
            }
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._backToGameTriggered = true;
            if (this.canDo) 
            {
                this.lockPaylines(false);
            }
            else 
            {
                this.lockPaylines(true);
            }
            this._paylineController.hidePayLines();
            this._paylineController.hideWinLines();
            this._paylineController.updateSelectors();
            return;
        }

        internal function onAllReelsStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isAutoPlaySpin = false;
            this._betChanged = false;
            this._betValue = this._conductor.betData.betValue;
            this._paylineController.updateSelectors();
            if (this._conductor.response.wins.wins != null) 
            {
                if (this._conductor.response.wins.wins.length != 0) 
                {
                    this._paylineController.setWinningPaylines(this._conductor.response.wins.wins);
                }
            }
            if (this.canDo) 
            {
                this.lockPaylines(false);
            }
            else 
            {
                this.lockPaylines(true);
            }
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_PAYLINES";

        public static const SERVICE_PAYLINES_SELECTOR_UPDATE:String="PAYLINES_SELECTOR_UPDATE";

        public static const SERVICE_BET_CHANGED:String="BET_CHANGED";

        public static const SERVICE_SHOW:String="SHOW";

        public static const SERVICE_HIDE_ALL_WIN_LINES:String="HIDE_ALL_WIN_LINES";

        public static const SERVICE_PAUSE:String="PAUSE";

        public static const SERVICE_CONTINUE:String="CONTINUE";

        public static const SERVICE_STOP:String="STOP";

        public static const SERVICE_SEQUINCE_COMPLETE:String="SEQUINCE_COMPLETE";

        public static const SERVICE_TIME_DELAY_REACHED:String="TIME_DELAY_REACHED";

        public static const SERVICE_SHOW_WIN_LINE:String="SHOW_WIN_LINE";

        public static const SERVICE_SHOW_ALL_WIN_LINES:String="SHOW_ALL_WIN_LINES";

        public static const SERVICE_HIDE_WIN_LINE:String="HIDE_WIN_LINE";

        public static const SERVICE_HIDE:String="HIDE";

        public static const SERVICE_UPDATE_PAYLINES:String="UPDATE_PAYLINES";

        internal var _hasConductor:Boolean=false;

        internal var _gotPaylineXML:Boolean=false;

        internal var _viewReady:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _paylineController:mgs.aurora.slots.components.payline.PaylineController;

        protected var _paylineSelectors:mgs.aurora.slots.components.payline.PaylineSelectors;

        protected var _config:XML;

        protected var _NumPaylines:int=0;

        protected var _NumCoins:Number=0;

        protected var _backToGameTriggered:Boolean=false;

        internal var _betValue:Number=0;

        internal var _betChanged:Boolean=false;

        internal var _isAutoPlaySpin:Boolean=false;

        internal var _paylineConfigSettings:mgs.aurora.slots.components.payline.PaylineConfigSettings;

        protected var _hitmap:flash.display.MovieClip;

        public static var NUM_SELECTOR_COINS:int=1;

        public static var FLASH_SELECTORS:Boolean=false;

        public static var FLASH_PAYLINES:Boolean=false;

        public static var HIDE_WIN_PAYLINE_BOXES:Boolean=false;

        public static var SHOW_BOX_BORDERS:Boolean=false;

        public static var SHOW_COINS_ON_SELECTORS:Boolean=true;

        protected var _isConfig:Boolean=false;
    }
}


//            class ReelsServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.hookAgents.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.reelEngine.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class ReelsServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ReelsServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ReelsServer");
            return;
        }

        internal function onWildReel(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=uint(arg1.data);
            this._outOfSequenceStop.push(loc1);
            this._reels.stopSpin(loc1, this._conductor.response.visarea.topReelPos[loc1]);
            return;
        }

        internal function onWildReelsActivated(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._delayedSpin = true;
            return;
        }

        internal function onLandAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._waitForLandAnim) 
            {
                this._waitForLandAnim = false;
                syndicate(this, SERVICE_ALL_REELS_STOPPED);
            }
            return;
        }

        internal function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onStop(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this._mustStop = true;
            this.doStop();
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            if (this._reels.isSpinning) 
            {
                throw new Error("ERROR: Can\'t spin while the reels are in motion.");
            }
            this._hasSwappedReels = false;
            this._gotResponse = false;
            this._delayedSpin = false;
            this._mustStop = false;
            this._canStopReels = false;
            this._breatheComplete = false;
            this._reels.quickSpin = this._conductor.options.isQuickSpin;
            this._timer = flash.utils.getTimer();
            this._outOfSequenceStop = new Vector.<uint>();
            if (!(this._conductor.rollingReels.hasReelSlideSteps && this._conductor.rollingReels.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_COMPLETE))) 
            {
                if (this._conductor.response.slot.state != mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE || this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
                    {
                        this._reels.setReelsIndexesByArray(this._conductor.response.nextSpin.reelSet, this._conductor.response.visarea.topReelPos);
                    }
                    else 
                    {
                        this._reels.setReelsIndexesByArray(this._conductor.response.slot.reelSet, this._conductor.response.visarea.topReelPos);
                    }
                }
            }
            if (this._conductor.options.isQuickSpin) 
            {
                this._startDelayed = new org.as3lib.kitchensync.action.KSFunction(this.startSpin, this._reels.behaviour[this._conductor.response.slot.reelSet].quickToStart);
                this._startDelayed.start();
            }
            else 
            {
                this._startDelayed = new org.as3lib.kitchensync.action.KSFunction(this.startSpin, this._reels.behaviour[this._conductor.response.slot.reelSet].delayToStart);
                this._startDelayed.start();
            }
            return;
        }

        internal function tryToStopReels(arg1:flash.events.TimerEvent):void
        {
            var loc1:*=false;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            this.sgroup = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            if (this._breatheComplete) 
            {
                if (this._conductor.options.isQuickSpin) 
                {
                    try 
                    {
                        this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.tryToStopReels);
                        this._stopTimer.stop();
                        this._stopTimer = null;
                    }
                    catch (e:Error)
                    {
                    };
                    this.sgroup.addAction(new org.as3lib.kitchensync.action.KSWait(50));
                    loc2 = 0;
                    while (loc2 < this._reels.columns) 
                    {
                        loc1 = false;
                        loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].quickBetweenStops[loc2];
                        loc4 = 0;
                        while (loc4 < this._outOfSequenceStop.length) 
                        {
                            if (loc2 == this._outOfSequenceStop[loc4]) 
                            {
                                loc1 = true;
                            }
                            ++loc4;
                        }
                        if (!loc1) 
                        {
                            if (loc2 != 0) 
                            {
                                if (this._visAreaData.anticipateList[(loc2 - 1)]) 
                                {
                                    loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].quickAnticipationDelay;
                                }
                                else 
                                {
                                    loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].quickBetweenStops[loc2];
                                }
                            }
                            this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.switchReelSet, 0, this._conductor.response.slot.reelSet));
                            this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.stopSpin, loc3, this._reels.behaviour[this._conductor.response.slot.reelSet].reelOrder[loc2], this._conductor.response.visarea.topReelPos[this._reels.behaviour[this._conductor.response.slot.reelSet].reelOrder[loc2]]));
                        }
                        ++loc2;
                    }
                    this.sgroup.start();
                }
                else if ((loc5 = flash.utils.getTimer()) - this._timer > this._reels.behaviour[this._conductor.response.slot.reelSet].minimumSpinTime) 
                {
                    try 
                    {
                        this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.tryToStopReels);
                        this._stopTimer.stop();
                        this._stopTimer = null;
                    }
                    catch (e:Error)
                    {
                    };
                    loc2 = 0;
                    while (loc2 < this._reels.columns) 
                    {
                        loc1 = false;
                        loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].delayBetweenStops[loc2];
                        loc4 = 0;
                        while (loc4 < this._outOfSequenceStop.length) 
                        {
                            if (loc2 == this._outOfSequenceStop[loc4]) 
                            {
                                loc1 = true;
                            }
                            ++loc4;
                        }
                        if (!loc1) 
                        {
                            loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].delayBetweenStops[loc2];
                            if (loc2 != 0) 
                            {
                                if (this._visAreaData.anticipateList[(loc2 - 1)]) 
                                {
                                    loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].anticipationDelay;
                                }
                                else 
                                {
                                    loc3 = this._reels.behaviour[this._conductor.response.slot.reelSet].delayBetweenStops[loc2];
                                }
                            }
                            this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.switchReelSet, 0, this._conductor.response.slot.reelSet));
                            this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.stopSpin, loc3, this._reels.behaviour[this._conductor.response.slot.reelSet].reelOrder[loc2], this._conductor.response.visarea.topReelPos[this._reels.behaviour[this._conductor.response.slot.reelSet].reelOrder[loc2]]));
                        }
                        ++loc2;
                    }
                    this.sgroup.start();
                }
            }
            return;
        }

        internal function doStop():void
        {
            var delay:int;
            var col:int;

            var loc1:*;
            delay = 0;
            col = 0;
            if (this._mustStop && this._minStopTime && this._gotResponse && !this._delayedSpin && this._breatheComplete && this._canStopReels && !this._conductor.options.isQuickSpin && !this._conductor.autoplay.autoPlayActive) 
            {
                this._mustStop = false;
                this._canStopReels = false;
                this._breatheComplete = false;
                this._isInstantStop = true;
                try 
                {
                    if (this._startDelayed.isRunning) 
                    {
                        this._startDelayed.stop();
                    }
                }
                catch (e:Error)
                {
                };
                try 
                {
                    if (this._startGroup.isRunning) 
                    {
                        this._startGroup.stop();
                    }
                }
                catch (e:Error)
                {
                };
                try 
                {
                    if (this.sgroup.isRunning) 
                    {
                        this.sgroup.stop();
                        this.sgroup = null;
                    }
                }
                catch (e:Error)
                {
                };
                if (this._stopTimer != null) 
                {
                    if (this._stopTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                    {
                        this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.tryToStopReels);
                    }
                }
                try 
                {
                    this.sgroup = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                    col = 0;
                    while (col < this._reels.columns) 
                    {
                        if (!this._reels.reels[col].isBouncing) 
                        {
                            if (col > 0) 
                            {
                                if (this._visAreaData.anticipateList[(col - 1)] && this._visAreaData.spinStopAnticipationOverride[(col - 1)]) 
                                {
                                    if (this._conductor.options.isQuickSpin) 
                                    {
                                        delay = this._reels.behaviour[this._conductor.response.slot.reelSet].quickAnticipationDelay;
                                    }
                                    else 
                                    {
                                        delay = this._reels.behaviour[this._conductor.response.slot.reelSet].anticipationDelay;
                                    }
                                    this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.stopSpin, delay, col, this._conductor.response.visarea.topReelPos[col]));
                                }
                                else 
                                {
                                    this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.immediateStop, this._conductor.settings.forceStopDelays, col, this._conductor.response.visarea.topReelPos[col]));
                                }
                            }
                            else 
                            {
                                this.sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.immediateStop, this._conductor.settings.forceStopDelays, col, this._conductor.response.visarea.topReelPos[col]));
                            }
                        }
                        ++col;
                    }
                    if (this.sgroup.childActions.length > 0) 
                    {
                        this.sgroup.start();
                    }
                }
                catch (e:Error)
                {
                    _trace("Error while trying to stop the reels. -" + toString(), "error", this, 16711680);
                    _trace(e.getStackTrace(), "error", this, 16711680);
                }
            }
            return;
        }

        internal function onRollingReelsComplete(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc1:*=(this._conductor.rollingReels.steps.length - 1);
            var loc2:*=this._conductor.rollingReels.steps[loc1].visArea.visAreaSymbols;
            this._reels.tackOnFakeSymbols(loc2);
            return;
        }

        internal function startSpin():void
        {
            var loc1:*=0;
            var loc4:*=0;
            this._reels.redraw();
            var loc2:*=[];
            this._minStopTime = false;
            new org.as3lib.kitchensync.action.KSFunction(this.minStopFn, this._conductor.settings.minStopTime).start();
            if (this._conductor.options.isQuickSpin) 
            {
                this._startGroup = new org.as3lib.kitchensync.action.group.KSStaggeredGroup(this._reels.behaviour[this._conductor.response.slot.reelSet].quickBetweenSpins);
            }
            else 
            {
                this._startGroup = new org.as3lib.kitchensync.action.group.KSStaggeredGroup(this._reels.behaviour[this._conductor.response.slot.reelSet].delayBetweenSpins);
            }
            var loc3:*=0;
            while (loc3 < this._reels.columns) 
            {
                this._startGroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this._reels.spin, 0, this._reels.behaviour[this._conductor.response.slot.reelSet].reelOrder[loc3]));
                loc4 = 0;
                while (loc4 < this._reels.rows) 
                {
                    loc1 = this._reels.columns * ((this._reels.rows - 1) - loc4) + this._reels.behaviour[this._conductor.response.slot.reelSet].reelOrder[loc3];
                    loc2.push(loc1);
                    ++loc4;
                }
                ++loc3;
            }
            this._startGroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.sequenceComplete, 1));
            this._startGroup.start();
            syndicate(this, SERVICE_REEL_START, new mgs.aurora.games.framework.TransportLayer(loc2));
            return;
        }

        internal function minStopFn():void
        {
            this._minStopTime = true;
            this.doStop();
            return;
        }

        internal function onReelEvent(arg1:mgs.aurora.slots.components.reelEngine.EReelEvent):void
        {
            syndicate(this, SERVICE_REEL_EVENT, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransReelAVEvent(arg1.reelId, arg1.type)));
            return;
        }

        internal function sequenceComplete():void
        {
            this._canStopReels = true;
            this.doStop();
            return;
        }

        internal function onAllReelStopped(arg1:flash.events.Event):void
        {
            this._eventHookManager.TriggerHookEvent(HOOK_EVENT_ALL_REELS_STOPPED);
            return;
        }

        public function onHookEventComplete(arg1:String):void
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case HOOK_EVENT_ALL_REELS_STOPPED:
                {
                    syndicate(this, SERVICE_ALL_REELS_STOPPED);
                    break;
                }
                case HOOK_EVENT_ALL_REELS_SPINNING:
                {
                    this.preTryToStopReels();
                    break;
                }
            }
            return;
        }

        internal function reelsStoppedSyndication():void
        {
            if (this._conductor.visArea.canPlayLandList[(this._conductor.reelData.columns - 1)] && !this._isInstantStop) 
            {
                this._waitForLandAnim = true;
                new org.as3lib.kitchensync.action.KSFunction(this.fallBackLandAnim, 2000).start();
            }
            else 
            {
                syndicate(this, SERVICE_ALL_REELS_STOPPED);
            }
            this._isInstantStop = false;
            return;
        }

        internal function fallBackLandAnim():void
        {
            if (this._waitForLandAnim) 
            {
                this._waitForLandAnim = false;
                syndicate(this, SERVICE_ALL_REELS_STOPPED);
            }
            return;
        }

        internal function allBreathe(arg1:flash.events.Event):void
        {
            this._breatheComplete = true;
            this.doStop();
            return;
        }

        public override function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        internal function stopReel():void
        {
            this._reels.stopSpin(this._respinReel, this._conductor.response.visarea.topReelPos[this._respinReel]);
            return;
        }

        internal function onReelStop(arg1:mgs.aurora.slots.components.reelEngine.EReelEvent):void
        {
            this.doStop();
            syndicate(this, SERVICE_REEL_STOPPED, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.ReelsToSymbolsTrans(arg1.reelId)));
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._onReelsXML && this._viewReady;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                if (this._reels != null) 
                {
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BREAHTE, this.onReelEvent);
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BOUNCE, this.onReelEvent);
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_SPIN, this.onReelEvent);
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_STOP, this.onReelEvent);
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_STOP, this.onReelStop);
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_ALL_REELS_STOP, this.onAllReelStopped);
                    this._reels.removeEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_ALL_BREATHE_COMPLETE, this.allBreathe);
                    this._reels.dispose();
                }
                this._reelSetsXML = null;
                this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.tryToStopReels);
                this._stopTimer.stop();
                this._stopTimer = null;
                this.sgroup.kill();
                this.sgroup = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ALL_REELS_STOPPED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_START));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_STOPPED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REEL_EVENT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REELS_SERVER_INIT));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_REELCONFIG);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onResponse, mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.ResponseData.SERVICE_RESPONSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStop, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.SERVICE_STOP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLandAnim, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostSymbolsAgent.SERVICE_LAND_ANIM_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReel, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsActivated, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_ACTIVE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsComplete, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_COMPLETE, 900);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._visAreaData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.VisAreaData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.VisAreaData;
            this._symbolsData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.SymbolsData;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onReelConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._reelSetsXML == null) 
            {
                this._reelSetsXML = new XMLList(arg1.data);
            }
            this._onReelsXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc8:*=null;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            if (!this._onReelsXML) 
            {
                throw new Error("Missing config information.");
            }
            this.CreateEventHookManagers();
            this.SetupEventHookManagers();
            var loc1:*=new XMLList(this._reelSetsXML);
            var loc2:*=new Vector.<mgs.aurora.games.common.dataTypes.ReelSetConfig>(loc1.reelSet.length());
            var loc3:*=0;
            while (loc3 < loc1.reelSet.length()) 
            {
                loc2[loc3] = new mgs.aurora.games.common.dataTypes.ReelSetConfig(int(loc1.reelSet[loc3].@delayBetweenSpins), int(loc1.reelSet[loc3].@delayToStart), int(loc1.reelSet[loc3].@minimumSpinTime), loc1.reelSet.length(), int(loc1.reelSet[loc3].@anticipationDelay), String(loc1.reelSet[loc3].@delayBetweenStops), int(loc1.reelSet[loc3].@quickBetweenSpins), int(loc1.reelSet[loc3].@quickToStart), int(loc1.reelSet[loc3].@quickSpinTime), int(loc1.reelSet[loc3].@quickAnticipationDelay), String(loc1.reelSet[loc3].@quickDelayBetweenStops), String(loc1.reelSet[loc3].@reelOrder));
                loc4 = 0;
                while (loc4 < loc1.reelSet[loc3].behaviour.reel.length()) 
                {
                    loc5 = new mgs.aurora.games.common.dataTypes.ReelConfig(loc4, Number(loc1.reelSet[loc3].behaviour.reel[loc4].breathe.@strength), Number(loc1.reelSet[loc3].behaviour.reel[loc4].breathe.@time), String(loc1.reelSet[loc3].behaviour.reel[loc4].breathe.@transition), Number(loc1.reelSet[loc3].behaviour.reel[loc4].breathe.@blurAmount), Number(loc1.reelSet[loc3].behaviour.reel[loc4].breathe.@pause), Number(loc1.reelSet[loc3].behaviour.reel[loc4].spin.@speed), Number(loc1.reelSet[loc3].behaviour.reel[loc4].spin.@blurAmount), Number(loc1.reelSet[loc3].behaviour.reel[loc4].bounce.@strength), Number(loc1.reelSet[loc3].behaviour.reel[loc4].bounce.@time), String(loc1.reelSet[loc3].behaviour.reel[loc4].bounce.@transition), Number(loc1.reelSet[loc3].behaviour.reel[loc4].bounce.@blurAmount), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbreathe.@strength), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbreathe.@time), String(loc1.reelSet[loc3].behaviour.reel[loc4].quickbreathe.@transition), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbreathe.@blurAmount), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbreathe.@pause), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickspin.@speed), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickspin.@blurAmount), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbounce.@strength), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbounce.@time), String(loc1.reelSet[loc3].behaviour.reel[loc4].quickbounce.@transition), Number(loc1.reelSet[loc3].behaviour.reel[loc4].quickbounce.@blurAmount));
                    loc2[loc3].addReel(loc3, loc5);
                    ++loc4;
                }
                ++loc3;
            }
            loc1 = new XMLList(this._reelSetsXML.config);
            this._reels = new mgs.aurora.slots.components.reelEngine.ReelEngine(mgs.aurora.games.framework.StageReference.getLevel("Reels"), this._conductor.reelData.numberOfSymbols, this._conductor.reelData.numberOfSets, this._conductor.reelData.rows, this._conductor.reelData.columns, this._conductor.reelData.width, this._conductor.reelData.height, loc2, this._conductor.reelData.x, this._conductor.reelData.y, this._conductor.reelData.xSpacing, this._conductor.reelData.ySpacing, this._conductor.reelData.scale);
            loc1 = new XMLList(this._reelSetsXML.ReelSets);
            loc3 = 0;
            while (loc3 < loc1.ReelSet.length()) 
            {
                loc4 = 0;
                while (loc4 < loc1.ReelSet[loc3].Reel.length()) 
                {
                    loc6 = loc1.ReelSet[loc3].Reel[loc4].@symbols.toString();
                    loc6 = mgs.aurora.games.common.components.utils.Scrambler.unscrambleArray(loc6);
                    this._reels.addReel(loc3, loc6);
                    ++loc4;
                }
                ++loc3;
            }
            this._reels.onInit();
            this._reelSetsXML = null;
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BREAHTE, this.onReelEvent);
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_BOUNCE, this.onReelEvent);
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_SPIN, this.onReelEvent);
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_STOP, this.onReelEvent);
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_REEL_STOP, this.onReelStop);
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_ALL_REELS_STOP, this.onAllReelStopped);
            this._reels.addEventListener(mgs.aurora.slots.components.reelEngine.ReelEngine.EVENT_ALL_BREATHE_COMPLETE, this.allBreathe);
            this._reels.setReelsIndexesByArray(this._conductor.response.slot.reelSet, this._conductor.response.visarea.topReelPos);
            this._reels.createReelStrips();
            if (this._conductor.rollingReels.hasReelSlideSteps) 
            {
                loc7 = (this._conductor.rollingReels.steps.length - 1);
                loc8 = this._conductor.rollingReels.steps[loc7].visArea.visAreaSymbols;
                this._reels.tackOnFakeSymbols(loc8);
            }
            this.AttemptSwapReels();
            syndicate(this, SERVICE_REELS_SERVER_INIT);
            return;
        }

        protected function CreateEventHookManagers():void
        {
            this._eventHookManager = new mgs.aurora.games.logicBlocks.hookAgents.EventHookAgentManager(this.onHookEventComplete);
            return;
        }

        protected function SetupEventHookManagers():void
        {
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            this.AttemptSwapReels();
            return;
        }

        protected function AttemptSwapReels():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=0;
            if (!this.isReady || this._hasSwappedReels) 
            {
                return;
            }
            if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE && (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME)) 
            {
                this._hasSwappedReels = true;
                this._reels.switchReelSet(this._conductor.response.nextSpin.reelSet);
                loc1 = this._conductor.visArea.visAreaPacket.visAreaSymbols;
                this._reels.tackOnFakeSymbols(loc1);
            }
            if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE && this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME) 
            {
                this._hasSwappedReels = true;
                this._reels.switchReelSet(this._conductor.response.nextSpin.reelSet);
                loc2 = mgs.aurora.games.logicBlocks.data.ReelsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ReelsData.PUBLISHER_NAME));
                loc3 = this._conductor.response.nextSpin.reelSet;
                loc4 = loc2.getDefaultPosition(loc3);
                loc5 = new Vector.<int>(loc4.length);
                loc6 = 0;
                while (loc6 < loc4.length) 
                {
                    --loc5[loc6];
                    ++loc6;
                }
                this._reels.setReelsIndexesByVector(loc3, loc5);
                this._reels.cacheAndRedraw();
            }
            return;
        }

        internal function onResponse(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc1:*=false;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            this._gotResponse = true;
            if (this.isReady) 
            {
                var loc5:*=this._conductor.response.id.verb;
                switch (loc5) 
                {
                    case mgs.aurora.slots.components.enums.Verbs.SPIN:
                    case mgs.aurora.slots.components.enums.Verbs.FREESPIN:
                    case mgs.aurora.slots.components.enums.Verbs.COLLECTSPIN:
                    {
                        this._eventHookManager.TriggerHookEvent(HOOK_EVENT_ALL_REELS_SPINNING);
                        break;
                    }
                    case mgs.aurora.slots.components.enums.Verbs.RESPIN:
                    {
                        this._reels.switchReelSet(this._conductor.response.slot.reelSet);
                        loc1 = true;
                        if (this._visAreaData.canAnticipate) 
                        {
                            loc3 = 0;
                            while (loc3 < this._visAreaData.symbolList[this._respinReel].length) 
                            {
                                if (!((loc4 = mgs.aurora.slots.components.triggercontroller.Trigger(this._symbolsData.getTrigger(this._visAreaData.symbolList[this._respinReel][loc3]))) == null) && loc4.anticipate == true) 
                                {
                                    loc1 = false;
                                }
                                ++loc3;
                            }
                        }
                        loc2 = this._visAreaData.canAnticipate && loc1 && !this._conductor.options.isQuickSpin ? this._reels.behaviour[this._conductor.response.slot.reelSet].anticipationDelay : 500;
                        new org.as3lib.kitchensync.action.KSFunction(this.stopReel, loc2).start();
                        break;
                    }
                }
            }
            return;
        }

        public function get reels():mgs.aurora.slots.components.reelEngine.ReelEngine
        {
            return this._reels;
        }

        internal function preTryToStopReels():void
        {
            this._reels.switchReelSet(this._conductor.response.slot.reelSet);
            this._stopTimer = new flash.utils.Timer(40);
            if (this._stopTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
            {
                this._stopTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.tryToStopReels);
            }
            this._stopTimer.addEventListener(flash.events.TimerEvent.TIMER, this.tryToStopReels);
            this._stopTimer.start();
            return;
        }

        internal function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc3:*=0;
            this._mustStop = false;
            this._canStopReels = false;
            this._breatheComplete = false;
            this._respinReel = arg1.data;
            this._reels.setReelsIndexesByArray(this._conductor.response.slot.reelSet, this._conductor.response.visarea.topReelPos);
            this._reels.quickSpin = this._conductor.options.isQuickSpin;
            this._reels.spin(this._respinReel);
            var loc1:*=[];
            var loc2:*=0;
            while (loc2 < this._reels.rows) 
            {
                loc3 = this._reels.columns * ((this._reels.rows - 1) - loc2) + this._respinReel;
                loc1.push(loc3);
                ++loc2;
            }
            syndicate(this, SERVICE_REEL_START, new mgs.aurora.games.framework.TransportLayer(loc1));
            return;
        }

        public static const HOOK_EVENT_ALL_REELS_SPINNING:String="HOOK_ALL_REELS_SPINNING_REELS";

        public static const PUBLISHER_NAME:String="PUBLISHER_REELS";

        public static const SERVICE_ALL_REELS_STOPPED:String="ALL_REELS_STOPPED";

        public static const SERVICE_REEL_START:String="REEL_START";

        public static const SERVICE_REEL_STOPPED:String="REEL_STOPPED";

        public static const SERVICE_REEL_EVENT:String="REEL_EVENT";

        public static const SERVICE_REELS_SERVER_INIT:String="SERVICE_REELS_SERVER_INIT";

        public static const HOOK_EVENT_ALL_REELS_STOPPED:String="HOOK_ALL_REELS_STOPPED_REELS";

        internal var _stopTimer:flash.utils.Timer;

        internal var _respinReel:int;

        internal var sgroup:org.as3lib.kitchensync.action.group.KSSequenceGroup;

        internal var _startGroup:org.as3lib.kitchensync.action.group.KSStaggeredGroup;

        internal var _startDelayed:org.as3lib.kitchensync.action.KSFunction;

        internal var _timer:int;

        internal var _canStopReels:Boolean=false;

        internal var _mustStop:Boolean=false;

        internal var _breatheComplete:Boolean=false;

        internal var _isConfig:Boolean=false;

        internal var _delayedSpin:Boolean=false;

        internal var _minStopTime:Boolean=false;

        internal var _waitForLandAnim:Boolean=false;

        internal var _hasSwappedReels:Boolean=false;

        internal var _isInstantStop:Boolean=false;

        protected var _outOfSequenceStop:__AS3__.vec.Vector.<uint>;

        protected var _eventHookManager:mgs.aurora.games.logicBlocks.hookAgents.EventHookAgentManager;

        internal var _reelSetsXML:XMLList;

        internal var _hasConductor:Boolean=false;

        internal var _viewReady:Boolean=false;

        internal var _onReelsXML:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _visAreaData:mgs.aurora.games.logicBlocks.data.VisAreaData;

        internal var _symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;

        protected var _reels:mgs.aurora.slots.components.reelEngine.ReelEngine;

        internal var _gotResponse:Boolean=false;
    }
}


//            class RequestServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import mgs.aurora.api.server.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class RequestServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function RequestServer()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.RequestServer");
            return;
        }

        public function defineServices():void
        {
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendRefresh, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendCollect, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendRespin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendBonusPick, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_PICK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendBonusCollect, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendFreeSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendGamble, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.sendRejectFreeGame, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_REJECT_FREEGAME);
            return;
        }

        internal function sendRefresh(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.REFRESH;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.REFRESH, loc1, true);
            return;
        }

        internal function sendSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            var loc2:*=new XML("<Request/>");
            loc2.@verbex = mgs.aurora.slots.components.enums.Verbs.SPIN;
            loc2.@chipSize = loc1.chipSize;
            loc2.@numChips = loc1.numChips;
            loc2.@activePaylines = loc1.activePaylines;
            if (loc1.offerId != -1) 
            {
                loc2.@offerId = loc1.offerId;
            }
            if (loc1.instanceId != -1) 
            {
                loc2.@instanceId = loc1.instanceId;
            }
            if (loc1.wildSymbols != null) 
            {
                loc2.@wildSymbols = loc1.wildSymbols;
            }
            if (loc1.sideBetConstant != -1) 
            {
                loc2.@sideBetConstant = loc1.sideBetConstant;
            }
            if (loc1.jackpotNumbers != null) 
            {
                loc2.@jackpotNumbers = loc1.jackpotNumbers;
            }
            if (loc1.gamePayIds != null) 
            {
                loc2.@gamePayIds = loc1.gamePayIds;
            }
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.SPIN, loc2, true);
            return;
        }

        internal function sendRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.RESPIN;
            loc1.@reelId = arg1.data;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.RESPIN, loc1, true);
            return;
        }

        internal function sendFreeSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.FREESPIN;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.FREESPIN, loc1, true);
            return;
        }

        internal function sendCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.COLLECT;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.COLLECT, loc1, true);
            return;
        }

        internal function sendGamble(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.GAMBLE;
            loc1.@method = arg1.data.method;
            loc1.@size = arg1.data.size;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.GAMBLE, loc1, true);
            return;
        }

        internal function sendRejectFreeGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc3:*=null;
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES;
            var loc2:*=new XML("<FreeGames/>");
            var loc4:*=0;
            while (loc4 < arg1.data.length) 
            {
                (loc3 = new XML("<FreeGame/>")).@offerId = arg1.data[loc4].offerID;
                loc3.@instanceId = arg1.data[loc4].instanceID;
                loc2.appendChild(loc3);
                ++loc4;
            }
            loc1.appendChild(loc2);
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.REJECTFREEGAMES, loc1, true);
            return;
        }

        internal function sendBonusPick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.BONUSPICK;
            loc1.@item = arg1.data;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.BONUSPICK, loc1, true);
            return;
        }

        internal function sendChooseBonusGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@id = arg1.data;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.CHOOSEBONUSGAME, loc1, true);
            return;
        }

        internal function sendBonusCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            mgs.aurora.games.base.BaseClass.trace("sendBonusCollect");
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.BONUSCOLLECT;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.BONUSCOLLECT, loc1, true);
            return;
        }

        internal function sendProgressiveInfo(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            var loc2:*=new XMLList();
            return;
        }

        internal function sendNudge(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.NUDGE;
            loc1.@reel = arg1.data.reel;
            loc1.@direction = arg1.data.direction;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.NUDGE, loc1, true);
            return;
        }

        internal function sendHold(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            loc1.@verbex = mgs.aurora.slots.components.enums.Verbs.HOLD;
            loc1.@holdReels = arg1.data;
            this.constructAndSend(mgs.aurora.slots.components.enums.Verbs.HOLD, loc1, true);
            return;
        }

        protected function sendPing(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XML("<Request/>");
            var loc2:*=new mgs.aurora.api.server.PacketRequest(mgs.aurora.games.framework.GameInfoReference.gameTypeID, "Ping", loc1, "0", mgs.aurora.games.framework.ModuleReference.moduleInfo.cid, true);
            _trace(loc2);
            mgs.aurora.games.framework.AuroraReference.aurora.server.sendPacket(loc2);
            return;
        }

        internal function constructAndSend(arg1:String, arg2:XML, arg3:Boolean=false):void
        {
            var loc1:*="version=\'" + mgs.aurora.games.framework.GameInfoReference.packetVersion + "\'";
            var loc2:*=new mgs.aurora.api.server.PacketRequest(mgs.aurora.games.framework.GameInfoReference.gameTypeID, mgs.aurora.games.framework.GameInfoReference.gameTypeID, arg2, mgs.aurora.games.framework.ModuleReference.moduleInfo.mid, mgs.aurora.games.framework.ModuleReference.moduleInfo.cid, arg3, loc1);
            _trace(loc2);
            mgs.aurora.games.framework.AuroraReference.aurora.server.sendPacket(loc2);
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_REQUEST";
    }
}


//            class ResponseServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class ResponseServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function ResponseServer()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ResponseServer");
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_REFRESH));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_VERB));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FRAMEWORK));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PLAYER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SLOT));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_VISAREA));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REELSLIDE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REELSETS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_NEXT_SPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREESPIN_AWARDS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BANKED_SPINS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_EXTENDED_SPIN_STYLES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_RESPIN));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BET));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_GAMBLE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PROGRESSIVE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_FREEGAMES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BONUSGAME));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ACHIEVEMENTS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRAILS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TOKENMANAGER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_REFRESH));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_COMPLETE));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRefresh, this.name, SERVICE_ON_REFRESH);
            return;
        }

        public function onRefresh(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=null;
            var loc11:*=0;
            var loc12:*=null;
            var loc13:*=0;
            var loc14:*=null;
            var loc15:*=null;
            var loc16:*=null;
            var loc17:*=null;
            var loc18:*=null;
            var loc19:*=null;
            var loc20:*=null;
            var loc21:*=null;
            var loc22:*=null;
            var loc23:*=null;
            var loc24:*=0;
            var loc25:*=null;
            var loc26:*=0;
            var loc27:*=null;
            var loc28:*=0;
            var loc29:*=null;
            var loc30:*=null;
            var loc31:*=null;
            var loc32:*=null;
            var loc33:*=null;
            var loc34:*=null;
            var loc35:*=null;
            var loc36:*=null;
            var loc37:*=null;
            var loc38:*=null;
            var loc39:*=null;
            var loc40:*=null;
            var loc41:*=null;
            var loc42:*=null;
            var loc43:*=null;
            var loc44:*=null;
            var loc45:*=0;
            var loc46:*=0;
            var loc47:*=0;
            var loc48:*=null;
            var loc49:*=null;
            var loc50:*=null;
            var loc51:*=null;
            var loc52:*=null;
            var loc1:*=arg1.data.Id;
            var loc2:*=false;
            if (loc1.length() != 0) 
            {
                if ((loc3 = new mgs.aurora.games.logicBlocks.data.types.IDPacket(loc1.@verb)).verb == mgs.aurora.slots.components.enums.Verbs.PING) 
                {
                    loc2 = true;
                }
                else 
                {
                    syndicate(this, SERVICE_VERB, new mgs.aurora.games.framework.TransportLayer(loc3));
                }
            }
            if (!loc2) 
            {
                loc1 = arg1.data.Response.Player;
                if (loc1.length() != 0) 
                {
                    loc5 = new mgs.aurora.games.logicBlocks.data.types.PlayerPacket(loc1.@balance, loc1.@totalWin, loc1.@userID, loc1.@transNumber, loc1.@type, loc1.@currency, loc1.@brandId, loc1.@hasPlayedBefore);
                    syndicate(this, SERVICE_PLAYER, new mgs.aurora.games.framework.TransportLayer(loc5));
                }
                loc1 = arg1.data.Response.Framework;
                if (loc1.length() != 0) 
                {
                    loc6 = new mgs.aurora.games.logicBlocks.data.types.FrameworkPacket(loc1.@state);
                    syndicate(this, SERVICE_FRAMEWORK, new mgs.aurora.games.framework.TransportLayer(loc6));
                }
                loc1 = arg1.data.Response.Slot;
                if (loc1.length() != 0) 
                {
                    loc7 = new mgs.aurora.games.logicBlocks.data.types.SlotPacket(loc1.@win, loc1.@triggeringWin, loc1.@state, loc1.@reelSet, loc1.@reelPos, loc1.@hasRespinFeature, loc1.@extraWilds, loc1.@freeSpinMultiplier, loc1.@freeSpinMultiplierStatus, loc1.@freeSpinGuaranteedWin, loc1.@scaledFreeSpinGuaranteedWin, loc1.@freeSpinMultiplyGuaranteedWin, loc1.@canBeExtraWild, loc1.@requiredUserWilds);
                    syndicate(this, SERVICE_SLOT, new mgs.aurora.games.framework.TransportLayer(loc7));
                }
                loc1 = arg1.data.Response.Slot.VisArea;
                if (loc1.length() != 0) 
                {
                    loc8 = new mgs.aurora.games.logicBlocks.data.types.VisAreaPacket(loc1.@numRows, loc1.@numCols, loc1.@numPaylines, loc1.@wildVABoxes);
                    loc1 = arg1.data.Response.Slot.VisArea.Row;
                    loc9 = 0;
                    while (loc9 < loc8.numRows) 
                    {
                        loc8.addRowReelPos(String(loc1.@reelPos[loc9]), loc9);
                        loc8.addRowSymbols(String(loc1.@symbols[loc9]), loc9);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_VISAREA, new mgs.aurora.games.framework.TransportLayer(loc8));
                }
                loc1 = arg1.data.Response.Slot.Wins;
                loc4 = new mgs.aurora.games.logicBlocks.data.types.WinsPacket(loc1.Win.length());
                if (loc1.length() != 0) 
                {
                    loc9 = 0;
                    while (loc9 < loc4.numberOf) 
                    {
                        loc10 = new mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulesPacket(loc1.Win[loc9].ExpandingWildRules.length());
                        loc11 = 0;
                        while (loc11 < loc10.numberOf) 
                        {
                            loc10.addRule(loc11, loc1.Win[loc9].ExpandingWildRules[loc11].@expandingWildRuleSet, loc1.Win[loc9].ExpandingWildRules[loc11].@expandingWildRules, loc1.Win[loc9].ExpandingWildRules[loc11].@multipliers);
                            ++loc11;
                        }
                        if (loc12 = loc1.Win[loc9]) 
                        {
                            loc13 = loc12.ExtendedSpinStyles.ExtendedSpinStyle.length();
                        }
                        else 
                        {
                            loc13 = 0;
                        }
                        loc14 = new mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket(loc13);
                        loc11 = 0;
                        while (loc11 < loc14.numberOf) 
                        {
                            loc14.addStyle(loc11, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@extendedSpinStyleID, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@multipliers, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@styleName, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@isActiveCurrentSpin, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@isActiveNextSpin, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@isFreeGame, loc1.Win[loc9].ExtendedSpinStyles.ExtendedSpinStyle[loc11].@wildVABoxes);
                            ++loc11;
                        }
                        loc4.addWin(loc9, loc1.Win[loc9].@payline, loc1.Win[loc9].@id, loc1.Win[loc9].@numCoinsWon, loc1.Win[loc9].@matchPos, loc1.Win[loc9].@multipliers, loc1.Win[loc9].@multiplierOperation, loc10, loc14);
                        ++loc9;
                    }
                }
                syndicate(this, SERVICE_WINS, new mgs.aurora.games.framework.TransportLayer(loc4));
                loc1 = arg1.data.Response.Slot.ReelSlide;
                if (loc1.length() != 0) 
                {
                    loc15 = new mgs.aurora.games.logicBlocks.data.types.ReelSlidePacket(loc1.@maxMultiplier, loc1.@maxReelSlides, loc1.@multiplierIncrement, loc1.ReelSlideStep.length());
                    loc9 = 0;
                    while (loc9 < loc15.numberOf) 
                    {
                        loc16 = loc1.ReelSlideStep[loc9].VisArea;
                        loc17 = new mgs.aurora.games.logicBlocks.data.types.VisAreaPacket(loc16.@numRows, loc16.@numCols, loc16.@numPaylines, loc16.@wildVABoxes);
                        loc11 = 0;
                        while (loc11 < loc16.Row.length()) 
                        {
                            loc17.addRowReelPos(String(loc16.Row.@reelPos[loc11]), loc11);
                            loc17.addRowSymbols(String(loc16.Row.@symbols[loc11]), loc11);
                            ++loc11;
                        }
                        loc16 = loc1.ReelSlideStep[loc9].Wins;
                        loc18 = new mgs.aurora.games.logicBlocks.data.types.WinsPacket(loc16.Win.length());
                        loc11 = 0;
                        while (loc11 < loc18.numberOf) 
                        {
                            if (loc23 = loc16.Win[loc11].ExpandingWildRules) 
                            {
                                loc24 = loc23.length();
                            }
                            else 
                            {
                                loc24 = 0;
                            }
                            loc25 = new mgs.aurora.games.logicBlocks.data.types.ExpandingWildRulesPacket(loc24);
                            loc26 = 0;
                            while (loc26 < loc25.numberOf) 
                            {
                                loc25.addRule(loc26, loc16.Win[loc11].ExpandingWildRules[loc26].@expandingWildRuleSet, loc16.Win[loc11].ExpandingWildRules[loc26].@expandingWildRules, loc16.Win[loc11].ExpandingWildRules[loc26].@multipliers);
                                ++loc26;
                            }
                            if (loc27 = loc16.Win[loc11].ExpandingWildRules) 
                            {
                                loc28 = loc27.length();
                            }
                            else 
                            {
                                loc28 = 0;
                            }
                            loc29 = new mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket(loc28);
                            loc26 = 0;
                            while (loc26 < loc29.numberOf) 
                            {
                                loc29.addStyle(loc26, loc16.Win[loc11].ExtendedSpinStyles[loc26].@extendedSpinStyleID, loc16.Win[loc11].ExtendedSpinStyles[loc26].@multipliers, loc16.Win[loc11].ExtendedSpinStyles[loc26].@styleName, loc16.Win[loc11].ExtendedSpinStyles[loc26].@isActiveCurrentSpin, loc16.Win[loc11].ExtendedSpinStyles[loc26].@isActiveNextSpin, loc16.Win[loc11].ExtendedSpinStyles[loc26].@isFreeGame, loc16.Win[loc9].ExtendedSpinStyles[loc26].@wildVABoxes);
                                ++loc26;
                            }
                            loc18.addWin(loc11, loc16.Win[loc11].@payline, loc16.Win[loc11].@id, loc16.Win[loc11].@numCoinsWon, loc16.Win[loc11].@matchPos, loc16.Win[loc11].@multipliers, loc16.Win[loc11].@multiplierOperation, loc25, loc29);
                            ++loc11;
                        }
                        if ((loc20 = (loc19 = loc1.ReelSlideStep[loc9]).@dissolvedVABoxes) != "") 
                        {
                            loc21 = loc20.split(",");
                        }
                        loc22 = new mgs.aurora.games.logicBlocks.data.types.ReelSlideStepPacket(loc19.@step, loc19.@activeMultiplier, loc21, loc19.@win, loc18, loc17);
                        loc15.addReelSlideStep(loc9, loc22);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_REELSLIDE, new mgs.aurora.games.framework.TransportLayer(loc15));
                }
                loc1 = arg1.data.Response.Slot.ReelSets;
                if (loc1.length() != 0) 
                {
                    loc30 = new mgs.aurora.games.logicBlocks.data.types.ReelSetPacket(loc1.ReelSet.length());
                    loc9 = 0;
                    while (loc9 < loc30.numSets) 
                    {
                        loc30.addReelsetSymbols(loc1.ReelSet[loc9].@defaultPos, loc9);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_REELSETS, new mgs.aurora.games.framework.TransportLayer(loc30));
                }
                loc1 = arg1.data.Response.Slot.NextSpin;
                if (loc1.length() != 0) 
                {
                    loc31 = new mgs.aurora.games.logicBlocks.data.types.NudgesPacket(loc1.Nudges.Nudge.length());
                    loc9 = 0;
                    while (loc9 < loc31.numberOf) 
                    {
                        loc31.addNudge(loc9, loc1.Nudges.Nudge[loc9].@matchPos, loc1.Nudges.Nudge[loc9].@direction, loc1.Nudges.Nudge[loc9].@count);
                        ++loc9;
                    }
                    loc32 = new mgs.aurora.games.logicBlocks.data.types.HoldsPacket(loc1.Holds.Hold.length);
                    loc9 = 0;
                    while (loc9 < loc32.numberOf) 
                    {
                        loc32.addHold(loc9, loc1.Holds.Hold[loc9].@symbols);
                        ++loc9;
                    }
                    loc33 = new mgs.aurora.games.logicBlocks.data.types.NextSpinPacket(loc1.@extraWilds, loc1.@freeSpinsRemaining, loc1.@reelSet, loc1.@freeSpinMultiplier, loc1.@freeSpinGuaranteedWin, loc1.@scaledFreeSpinGuaranteedWin, loc1.@freeSpinMultiplyGuaranteedWin, loc1.@superHoldReels, loc1.@nudgesRemaining, loc1.@nudgeDirection, loc1.@nextActivePaylines, loc1.@nextNumChips, loc1.@nextChipSize, loc31, loc32);
                    syndicate(this, SERVICE_NEXT_SPIN, new mgs.aurora.games.framework.TransportLayer(loc33));
                }
                loc1 = arg1.data.Response.Slot.FreeSpinAwards;
                if (loc1.length() != 0) 
                {
                    loc34 = new mgs.aurora.games.logicBlocks.data.types.FreeSpinAwardsPacket(loc1.FreeSpinAward.length());
                    loc9 = 0;
                    while (loc9 < loc34.numberOf) 
                    {
                        loc34.addFreeSpinAward(loc9, loc1.FreeSpinAward[loc9].@freeSpinNum, loc1.FreeSpinAward[loc9].@freeSpinReelSet, loc1.FreeSpinAward[loc9].@freeSpinMultiplier, loc1.FreeSpinAward[loc9].@freeSpinMaxMultiplier, loc1.FreeSpinAward[loc9].@freeSpinGuaranteedWin, loc1.FreeSpinAward[loc9].@freeSpinMultiplierGuaranteedWin, loc1.FreeSpinAward[loc9].@wasAwardedAtStart);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_FREESPIN_AWARDS, new mgs.aurora.games.framework.TransportLayer(loc34));
                }
                loc1 = arg1.data.Response.Slot.BankedSpins;
                if (loc1.length() != 0) 
                {
                    loc35 = new mgs.aurora.games.logicBlocks.data.types.BankedSpinsPacket(loc1.BankedSpin.length());
                    loc9 = 0;
                    while (loc9 < loc35.numberOf) 
                    {
                        loc35.addBankedSpin(loc9, loc1.BankedSpin[loc9].@bankedSpinName, loc1.BankedSpin[loc9].@bankedFreeSpins, loc1.BankedSpin[loc9].@bankedMultiplierIncrements, loc1.BankedSpin[loc9].@bankedTotalMultiplier);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_BANKED_SPINS, new mgs.aurora.games.framework.TransportLayer(loc35));
                }
                loc1 = arg1.data.Response.Slot.ExtendedSpinStyles;
                if (loc1.length() != 0) 
                {
                    loc36 = new mgs.aurora.games.logicBlocks.data.types.ExtendedSpinStylesPacket(loc1.ExtendedSpinStyle.length());
                    loc9 = 0;
                    while (loc9 < loc36.numberOf) 
                    {
                        loc36.addStyle(loc9, loc1.ExtendedSpinStyle[loc9].@extendedSpinStyleID, loc1.ExtendedSpinStyle[loc9].@multipliers, loc1.ExtendedSpinStyle[loc9].@styleName, loc1.ExtendedSpinStyle[loc9].@isActiveCurrentSpin, loc1.ExtendedSpinStyle[loc9].@isActiveNextSpin, loc1.ExtendedSpinStyle[loc9].@isFreeGame, loc1.ExtendedSpinStyle[loc9].@wildVABoxes);
                        ++loc9;
                    }
                    if (loc1.QualifyingRandomWildWins) 
                    {
                        loc9 = 0;
                        while (loc9 < loc1.QualifyingRandomWildWins.Win.length()) 
                        {
                            loc36.addQualifyingRandomWildWins(loc1.QualifyingRandomWildWins.Win[loc9].@payline, loc1.QualifyingRandomWildWins.Win[loc9].@id, loc1.QualifyingRandomWildWins.Win[loc9].@numCoinsWon, loc1.QualifyingRandomWildWins.Win[loc9].@matchPos, loc1.QualifyingRandomWildWins.Win[loc9].@multipliers, loc1.QualifyingRandomWildWins.Win[loc9].@multiplierOperation);
                            ++loc9;
                        }
                    }
                    syndicate(this, SERVICE_EXTENDED_SPIN_STYLES, new mgs.aurora.games.framework.TransportLayer(loc36));
                }
                loc1 = arg1.data.Response.Slot.Respin;
                if (loc1.length() != 0) 
                {
                    loc37 = new mgs.aurora.games.logicBlocks.data.types.RespinPacket(loc1.NextSpinCosts.length(), loc1.@respunReels);
                    loc9 = 0;
                    while (loc9 < loc37.numberOf) 
                    {
                        loc38 = new mgs.aurora.games.logicBlocks.data.types.NextSpinCostsPacket(loc1.NextSpinCosts[loc9].NextSpinCost.length());
                        loc11 = 0;
                        while (loc11 < loc38.numberOf) 
                        {
                            loc38.addNextSpinCost(loc11, loc1.NextSpinCosts[loc9].NextSpinCost.@reelId[loc11], loc1.NextSpinCosts[loc9].NextSpinCost.@cost[loc11]);
                            ++loc11;
                        }
                        loc37.addNextSpinsCosts(loc9, loc38);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_RESPIN, new mgs.aurora.games.framework.TransportLayer(loc37));
                }
                loc1 = arg1.data.Response.Bet;
                if (loc1.length() != 0) 
                {
                    loc39 = new mgs.aurora.games.logicBlocks.data.types.SideBetsPacket(loc1.SideBet.length());
                    loc9 = 0;
                    while (loc9 < loc39.numberOf) 
                    {
                        loc39.addSideBet(loc9, loc1.SideBet.@avaliableConstants[loc9], loc1.SideBet.@enforceMaxPaylines[loc9], loc1.SideBet.@tieToCoinsPerPayline[loc9], loc1.SideBet.@tieToNumPaylines[loc9], loc1.SideBet.@tieToChipSize[loc9]);
                        ++loc9;
                    }
                    loc40 = new mgs.aurora.games.logicBlocks.data.types.PaylinesPacket(loc1.Paylines.Payline.length());
                    loc9 = 0;
                    while (loc9 < loc40.numberOf) 
                    {
                        loc40.addPayline(loc9, loc1.Paylines.Payline.@payline[loc9], loc1.Paylines.Payline.@paylineCost[loc9]);
                        ++loc9;
                    }
                    loc41 = new mgs.aurora.games.logicBlocks.data.types.BetPacket(loc1.@numChips, loc1.@activePaylines, loc1.@nextActivePaylines, loc1.@maxChips, loc1.@minChips, loc1.@numActiveGames, loc1.@validNumGames, loc1.@numPaylinesPerGame, loc1.@chipSize, loc1.@validChips, loc1.@slotBetMethod, loc39, loc40);
                    syndicate(this, SERVICE_BET, new mgs.aurora.games.framework.TransportLayer(loc41));
                }
                loc1 = arg1.data.Response.Gamble;
                if (loc1.length() != 0) 
                {
                    loc42 = new mgs.aurora.games.logicBlocks.data.types.GamblePacket(loc1.@state, loc1.@maxAttempts, loc1.@allowedGambleMethod, loc1.@allowedGambleSize, loc1.@maxWin, loc1.@gamblesMade, loc1.@win, loc1.@method, loc1.@size, loc1.@card, loc1.@prevCards, loc1.@allowColour, loc1.@allowSuit, loc1.@allowHalf, loc1.@allowFull);
                    syndicate(this, SERVICE_GAMBLE, new mgs.aurora.games.framework.TransportLayer(loc42));
                }
                loc1 = arg1.data.Response.BonusGames;
                if (loc1.length() != 0) 
                {
                    loc43 = new mgs.aurora.games.logicBlocks.data.types.BonusGamesPacket(loc1.Bonus.length(), loc1.@lastBonusPlayed, loc1.@currentBonusID);
                    loc9 = 0;
                    while (loc9 < loc43.numberOf) 
                    {
                        loc44 = loc43.addBonus(loc9, loc1.Bonus[loc9].@id == null ? "" : loc1.Bonus[loc9].@id, loc1.Bonus[loc9].@bonusName == null ? "" : loc1.Bonus[loc9].@bonusName, loc1.Bonus[loc9].@state == null ? "" : loc1.Bonus[loc9].@state, loc1.Bonus[loc9].@tickets == null ? "" : loc1.Bonus[loc9].@tickets, loc1.Bonus[loc9].@ticketsNeeded == null ? "" : loc1.Bonus[loc9].@ticketsNeeded, loc1.Bonus[loc9].@winScaler == null ? "" : loc1.Bonus[loc9].@winScaler, loc1.Bonus[loc9].@win == null ? "" : loc1.Bonus[loc9].@win, loc1.Bonus[loc9].@activeBonusLevel == null ? "" : loc1.Bonus[loc9].@activeBonusLevel, loc1.Bonus[loc9].@extraPicksForActiveLevel == null ? "" : loc1.Bonus[loc9].@extraPicksForActiveLevel, loc1.Bonus[loc9].@maxPlayerPicksAllowed == null ? "" : loc1.Bonus[loc9].@maxPlayerPicksAllowed, loc1.Bonus[loc9].@items == null ? "" : loc1.Bonus[loc9].@items, loc1.Bonus[loc9].@levelStates == null ? "" : loc1.Bonus[loc9].@levelStates, loc1.Bonus[loc9].@lastPlayedBonusLevel == null ? "" : loc1.Bonus[loc9].@lastPlayedBonusLevel, loc1.Bonus[loc9].@gameEndRule == null ? "" : loc1.Bonus[loc9].@gameEndRule, loc1.Bonus[loc9].@extraCompletionWin == null ? "" : loc1.Bonus[loc9].@extraCompletionWin, loc1.Bonus[loc9].@numBonusLevels == null ? "" : loc1.Bonus[loc9].@numBonusLevels, loc1.Bonus[loc9].Picks.Pick.length(), loc1.Bonus[loc9].BonusSpecific.length(), loc1.Bonus[loc9].BonusGamble.length(), loc1.Bonus[loc9].TokenManager.length(), loc1.Bonus[loc9].BonusSpecific);
                        loc11 = 0;
                        while (loc11 < loc1.Bonus[loc9].TokenManager.length()) 
                        {
                            loc44.bonusTokenManagers.addToken(loc11, loc1.Bonus[loc9].TokenManager.@name[loc11], loc1.Bonus[loc9].TokenManager.@numTokensToCollect[loc11], loc1.Bonus[loc9].TokenManager.@tokenIDsAwarded[loc11], loc1.Bonus[loc9].TokenManager.@multiplier[loc11], loc1.Bonus[loc9].TokenManager.@bonusToTrigger[loc11]);
                            ++loc11;
                        }
                        loc45 = loc1.Bonus[loc9].Picks.Pick.length();
                        loc26 = 0;
                        while (loc26 < loc45) 
                        {
                            loc44.bonusPicks.addPick(loc26, loc1.Bonus[loc9].Picks.Pick.@item[loc26], loc1.Bonus[loc9].Picks.Pick.@pickedBy[loc26], loc1.Bonus[loc9].Picks.Pick.@pickedByLevel[loc26], loc1.Bonus[loc9].Picks.Pick[loc26].Result.length());
                            loc46 = loc1.Bonus[loc9].Picks.Pick[loc26].Result.length();
                            loc47 = 0;
                            while (loc47 < loc46) 
                            {
                                loc44.bonusPicks.picks[loc26].addResult(loc47, loc1.Bonus[loc9].Picks.Pick[loc26].Result.@id[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@rawValue[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@value[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@consolationValue[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@multiplier[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@playerBenefit[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@doesMultiplierApply[loc47], loc1.Bonus[loc9].Picks.Pick[loc26].Result.@credits[loc47]);
                                ++loc47;
                            }
                            ++loc26;
                        }
                        ++loc9;
                    }
                    syndicate(this, SERVICE_BONUSGAME, new mgs.aurora.games.framework.TransportLayer(loc43));
                }
                loc1 = arg1.data.Response.Progressive;
                if (loc1.length() != 0) 
                {
                    loc48 = new mgs.aurora.games.logicBlocks.data.types.ProgressivePacket("0", "0", 0, 0);
                    syndicate(this, SERVICE_PROGRESSIVE, new mgs.aurora.games.framework.TransportLayer(loc48));
                }
                loc1 = arg1.data.Response.FreeGames;
                if (loc1 != null) 
                {
                    loc49 = new mgs.aurora.games.logicBlocks.data.types.FreeGamesPacket(loc1.Games.FreeGame.length());
                    if (loc1.CurrentGame.length() != 0) 
                    {
                        loc49.addCurrentGame(int(loc1.CurrentGame.@offerId), int(loc1.CurrentGame.@instanceId), int(loc1.CurrentGame.@sumWinnings), int(loc1.CurrentGame.@gamesRemaining), int(loc1.CurrentGame.@gamesPlayed));
                    }
                    if (loc1.LastRealWager.length() != 0) 
                    {
                        loc49.addLastRealWager(int(loc1.LastRealWager.@coins), Vector.<int>(loc1.LastRealWager.@lines.split(",")), int(loc1.LastRealWager.@chipSize), int(loc1.LastRealWager.@sideBet));
                    }
                    if (loc1.Games.FreeGame.length() != 0) 
                    {
                        loc9 = 0;
                        while (loc9 < loc49.numberOf) 
                        {
                            loc49.addFreeGame(loc9, uint(loc1.Games.FreeGame.@offerId[loc9]), uint(loc1.Games.FreeGame.@instanceId[loc9]), uint(loc1.Games.FreeGame.@sumWinnings[loc9]), uint(loc1.Games.FreeGame.@gamesRemaining[loc9]), uint(loc1.Games.FreeGame.@gamesPlayed[loc9]), uint(loc1.Games.FreeGame.@creditType[loc9]), uint(loc1.Games.FreeGame.@maxCost[loc9]), uint(loc1.Games.FreeGame.@gamesAwarded[loc9]), String(loc1.Games.FreeGame.@name1[loc9]), String(loc1.Games.FreeGame.@name2[loc9]), String(loc1.Games.FreeGame.@endDate[loc9]));
                            loc49.freeGames[loc9].addDefaultBet(int(loc1.Games.FreeGame.DefaultBet.@coins[loc9]), int(loc1.Games.FreeGame.DefaultBet.@lines[loc9]), int(loc1.Games.FreeGame.DefaultBet.@chipSize[loc9]), int(loc1.Games.FreeGame.DefaultBet.@sideBet[loc9]));
                            ++loc9;
                        }
                    }
                    syndicate(this, SERVICE_FREEGAMES, new mgs.aurora.games.framework.TransportLayer(loc49));
                }
                loc1 = arg1.data.Response.Trails;
                if (loc1.length() != 0) 
                {
                    loc50 = new mgs.aurora.games.logicBlocks.data.types.TrailsPacket(0);
                    syndicate(this, SERVICE_TRAILS, new mgs.aurora.games.framework.TransportLayer(loc50));
                }
                loc1 = arg1.data.Response.Achievements;
                if (loc1.length() != 0) 
                {
                    loc51 = new mgs.aurora.games.logicBlocks.data.types.AchievementsPacket(loc1.Achievement.length());
                    loc9 = 0;
                    while (loc9 < loc51.numberOf) 
                    {
                        loc51.addAchievement(loc9, loc1.Achievement[loc9].@name, loc1.Achievement[loc9].@isComplete, loc1.Achievement[loc9].@wasJustAwarded, loc1.Achievement[loc9].@winCombosRequired, loc1.Achievement[loc9].@winCombosAcquired, loc1.Achievement[loc9].@tokensRequired, loc1.Achievement[loc9].@tokensCollected);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_ACHIEVEMENTS, new mgs.aurora.games.framework.TransportLayer(loc51));
                }
                loc1 = arg1.data.Response.TokenManagers;
                if (loc1.length() != 0) 
                {
                    loc52 = new mgs.aurora.games.logicBlocks.data.types.TokenManagersPacket(loc1.TokenManager.length());
                    loc9 = 0;
                    while (loc9 < loc52.numberOf) 
                    {
                        loc52.addToken(loc9, loc1.TokenManager.@name[loc9], loc1.TokenManager.@numTokensToCollect[loc9], loc1.TokenManager.@tokenIDsAwarded[loc9], loc1.TokenManager.@multiplier[loc9], loc1.TokenManager.@bonusToTrigger[loc9]);
                        ++loc9;
                    }
                    syndicate(this, SERVICE_TOKENMANAGER, new mgs.aurora.games.framework.TransportLayer(loc52));
                }
                if (loc3.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                {
                    syndicate(this, SERVICE_REFRESH);
                }
                syndicate(this, SERVICE_COMPLETE);
            }
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_ON_RESPONSE";

        public static const SERVICE_ON_REFRESH:String="ON_REFRESH";

        public static const SERVICE_VERB:String="VERB";

        public static const SERVICE_FRAMEWORK:String="FRAMEWORK";

        public static const SERVICE_PLAYER:String="PLAYER";

        public static const SERVICE_SLOT:String="SLOT";

        public static const SERVICE_VISAREA:String="VISAREA";

        public static const SERVICE_WINS:String="WINS";

        public static const SERVICE_REELSLIDE:String="REELSLIDE";

        public static const SERVICE_REELSETS:String="REELSETS";

        public static const SERVICE_NEXT_SPIN:String="NEXT_SPIN";

        public static const SERVICE_FREESPIN_AWARDS:String="FREESPIN_AWARDS";

        public static const SERVICE_BANKED_SPINS:String="BANKED_SPINS";

        public static const SERVICE_EXTENDED_SPIN_STYLES:String="EXTENDED_SPIN_STYLES";

        public static const SERVICE_RESPIN:String="RESPIN";

        public static const SERVICE_BET:String="BET";

        public static const SERVICE_GAMBLE:String="GAMBLE";

        public static const SERVICE_PROGRESSIVE:String="PROGRESSIVE";

        public static const SERVICE_FREEGAMES:String="FREEGAMES";

        public static const SERVICE_BONUSGAME:String="BONUSGAME";

        public static const SERVICE_ACHIEVEMENTS:String="ACHIEVEMENTS";

        public static const SERVICE_TRAILS:String="TRAILS";

        public static const SERVICE_TOKENMANAGER:String="TOKENMANAGER";

        public static const SERVICE_REFRESH:String="REFRESH";

        public static const SERVICE_COMPLETE:String="COMPLETE";
    }
}


//            class SlotSoundServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.media.*;
    import flash.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class SlotSoundServer extends mgs.aurora.games.logicBlocks.publishers.SoundServer implements mgs.aurora.games.framework.IActor
    {
        public function SlotSoundServer()
        {
            super();
            setClassDescription("mgs.aurora.slots.agents.sound.SlotSoundServer");
            this._winSoundMap = new flash.utils.Dictionary(true);
            this._winRangeSoundMap = new flash.utils.Dictionary(true);
            this._buttonSoundMap = new flash.utils.Dictionary(true);
            this._gameSoundMap = new flash.utils.Dictionary(true);
            this._backgroundSoundMap = new flash.utils.Dictionary(true);
            this._reelStopSounds = new Vector.<Vector.<String>>(0);
            return;
        }

        protected function stopSlotBackgroundSound(arg1:String):Boolean
        {
            var loc1:*=null;
            if (!(arg1 == this._activeBackgroundSound) && !(arg1 == this._backgroundSoundToPlay)) 
            {
                return true;
            }
            if (this._backgroundSoundToPlay == arg1) 
            {
                this._backgroundSoundToPlay = null;
            }
            if (this._activeBackgroundSound == arg1) 
            {
                loc1 = this.getBackgroundSound(arg1);
                if (!(loc1 == null) && !(loc1.sound == "")) 
                {
                    stopSound(loc1.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND);
                }
                this._activeBackgroundSound = null;
            }
            return true;
        }

        internal function getButtonSound(arg1:String):mgs.aurora.games.common.dataTypes.WinSoundContainer
        {
            return this._buttonSoundMap[arg1];
        }

        internal function getGameSound(arg1:String):mgs.aurora.games.common.dataTypes.WinSoundContainer
        {
            return this._gameSoundMap[arg1];
        }

        internal function getBackgroundSound(arg1:String):mgs.aurora.games.common.dataTypes.WinSoundContainer
        {
            return this._backgroundSoundMap[arg1];
        }

        internal function getWinRangeSound(arg1:int, arg2:uint):mgs.aurora.games.common.dataTypes.WinRangeSoundContainer
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._winRangeSoundMap;
            for each (loc1 in loc3) 
            {
                if (!loc1.resolve(arg1, arg2)) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        internal function getWinRangeSoundByName(arg1:String):mgs.aurora.games.common.dataTypes.WinRangeSoundContainer
        {
            return this._winRangeSoundMap[arg1];
        }

        internal function getWinSound(arg1:String):mgs.aurora.games.common.dataTypes.WinSoundContainer
        {
            return this._winSoundMap[arg1];
        }

        protected override function soundResourceLoaded(arg1:String):void
        {
            var loc1:*=arg1;
            _trace("Loaded sound Resource : " + arg1, "test", this, 4227200);
            if (this._activeBackgroundSound == null && !(this._backgroundSoundToPlay == null)) 
            {
                this.playSlotBackgroundSound(this._backgroundSoundToPlay);
                updateOptions();
            }
            return;
        }

        public override function get canConfig():Boolean
        {
            return super.canConfig && this._hasSoundEngineXML;
        }

        public override function dispose():void
        {
            try 
            {
                this._soundEngineXML = null;
                this._hasSoundEngineXML = false;
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLoadSoundsEngine, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SOUNDS_ENGINE);
            return;
        }

        protected function onLoadSoundsEngine(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._soundEngineXML = arg1.data as XMLList;
            this._hasSoundEngineXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected override function setup():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=false;
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc8:*=null;
            var loc9:*=false;
            if (_isConfig) 
            {
                return;
            }
            var loc10:*=0;
            var loc11:*=this._soundEngineXML.winRangeSound;
            for each (loc1 in loc11) 
            {
                loc8 = loc1.@id.toString().split(",");
                loc9 = false;
                if (loc1.@prefixDelaysSound.toString() && Boolean(loc1.@prefixDelaysSound.toString() == "true")) 
                {
                    loc9 = true;
                }
                this._winRangeSoundMap[loc1.@sound.toString()] = new mgs.aurora.games.common.dataTypes.WinRangeSoundContainer(Number(loc1.@rangeMin), Number(loc1.@rangeMax), loc1.@sound.toString(), loc8, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, loc1.@prefix.toString(), loc9);
            }
            loc10 = 0;
            loc11 = this._soundEngineXML.winSound;
            for each (loc1 in loc11) 
            {
                this._winSoundMap[loc1.@name.toString()] = new mgs.aurora.games.common.dataTypes.WinSoundContainer(loc1.@sound.toString(), [loc1.@name.toString()], "win");
            }
            loc10 = 0;
            loc11 = this._soundEngineXML.buttonSound;
            for each (loc1 in loc11) 
            {
                this._buttonSoundMap[loc1.@name.toString()] = new mgs.aurora.games.common.dataTypes.WinSoundContainer(loc1.@sound.toString(), [loc1.@name.toString()], "game");
            }
            loc10 = 0;
            loc11 = this._soundEngineXML.gameSound;
            for each (loc1 in loc11) 
            {
                this._gameSoundMap[loc1.@name.toString()] = new mgs.aurora.games.common.dataTypes.WinSoundContainer(loc1.@sound.toString(), [loc1.@name.toString()], "game");
            }
            loc10 = 0;
            loc11 = this._soundEngineXML.backgroundSound;
            for each (loc1 in loc11) 
            {
                this._backgroundSoundMap[loc1.@name.toString()] = new mgs.aurora.games.common.dataTypes.WinSoundContainer(loc1.@sound.toString(), [loc1.@name.toString()], "background");
            }
            loc4 = -1;
            loc7 = int(this._soundEngineXML.reelStopSounds.@numReels);
            loc10 = 0;
            loc11 = this._soundEngineXML.reelStopSounds.reelset;
            for each (loc1 in loc11) 
            {
                ++loc4;
                loc5 = loc1.@stop.toString();
                loc6 = new Vector.<String>(loc7);
                loc3 = loc1.@appendIds.toString().toLowerCase() == "true";
                loc2 = 0;
                while (loc2 < loc7) 
                {
                    loc6[loc2] = loc3 ? loc5 + "_" + loc4 + "_" + loc2 : loc5;
                    ++loc2;
                }
                this._reelStopSounds.push(loc6);
            }
            super.setup();
            return;
        }

        public function getStopSoundName(arg1:int, arg2:int):String
        {
            return this._reelStopSounds[arg1][arg2];
        }

        public function playButtonSound(arg1:String):Boolean
        {
            var loc1:*=this.getButtonSound(arg1);
            if (!(loc1 == null) && !(loc1.sound == "")) 
            {
                return playSound(loc1.sound, SOUNDS_GAME);
            }
            return false;
        }

        public function getSoundLength(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):Number
        {
            var loc2:*=null;
            var loc3:*=null;
            if (arg1 == null) 
            {
                return 0;
            }
            var loc1:*=null;
            if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME) 
            {
                if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN) 
                {
                    if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND) 
                    {
                        loc1 = this.getBackgroundSound(arg1.soundName);
                    }
                }
                else 
                {
                    loc1 = this.getWinSound(arg1.soundName);
                }
            }
            else 
            {
                loc1 = this.getGameSound(arg1.soundName);
            }
            if (loc1 == null || loc1.sound == "") 
            {
                return 0;
            }
            if (mgs.aurora.games.framework.StageReference.stage.loaderInfo.applicationDomain.hasDefinition(loc1.sound)) 
            {
                loc2 = flash.utils.getDefinitionByName(loc1.sound) as Class;
                return (loc3 = new loc2() as flash.media.Sound).length;
            }
            return 0;
        }

        public function processSoundAction(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):Boolean
        {
            if (arg1 == null) 
            {
                return false;
            }
            if (arg1.action == mgs.aurora.games.common.dataTypes.SlotSoundActionData.ACTION_PLAY) 
            {
                return this.playSlotSound(arg1);
            }
            if (arg1.action == mgs.aurora.games.common.dataTypes.SlotSoundActionData.ACTION_STOP) 
            {
                this.stopSlotSound(arg1);
                return true;
            }
            if (arg1.action == mgs.aurora.games.common.dataTypes.SlotSoundActionData.ACTION_SET_VOLUME) 
            {
                this.slotSetVolume(arg1);
                return true;
            }
            if (arg1.action == mgs.aurora.games.common.dataTypes.SlotSoundActionData.ACTION_SET_VOLUME_OVER_TIME) 
            {
                this.slotSetVolumeOverTime(arg1);
                return true;
            }
            return false;
        }

        protected function slotSetVolume(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):Boolean
        {
            var loc1:*=null;
            if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME) 
            {
                if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN) 
                {
                    if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND) 
                    {
                        loc1 = this.getBackgroundSound(arg1.soundName);
                    }
                }
                else 
                {
                    loc1 = this.getWinSound(arg1.soundName);
                }
            }
            else 
            {
                loc1 = this.getGameSound(arg1.soundName);
            }
            if (loc1 == null || loc1.sound == "") 
            {
                return false;
            }
            setVolumeForSound(loc1.sound, arg1.soundCat, arg1.endVolume);
            return true;
        }

        protected function slotSetVolumeOverTime(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):Boolean
        {
            var loc1:*=null;
            if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME) 
            {
                if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN) 
                {
                    if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND) 
                    {
                        loc1 = this.getBackgroundSound(arg1.soundName);
                    }
                }
                else 
                {
                    loc1 = this.getWinSound(arg1.soundName);
                }
            }
            else 
            {
                loc1 = this.getGameSound(arg1.soundName);
            }
            if (loc1 == null || loc1.sound == "") 
            {
                return false;
            }
            setVolumeOverTime(loc1.sound, arg1.soundCat, arg1.startVolume, arg1.endVolume, arg1.time / 1000);
            return true;
        }

        protected function playSlotSound(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):Boolean
        {
            var loc3:*=null;
            var loc1:*=arg1.loop ? 100000000 : 0;
            var loc2:*=null;
            if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME) 
            {
                if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN || arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN_2) 
                {
                    loc2 = this.getWinSound(arg1.soundName);
                    if (!(loc2 == null) && !(loc2.sound == "")) 
                    {
                        return playSound(loc2.sound, arg1.soundCat, 0, loc1, null, arg1.callback);
                    }
                }
                else 
                {
                    if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND) 
                    {
                        return this.playSlotBackgroundSound(arg1.soundName);
                    }
                    if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SlotSoundServer.SOUNDS_WIN_RANGE) 
                    {
                        if (!((loc3 = this.getWinRangeSound(arg1.id, arg1.amount)) == null) && !(loc3.sound == "")) 
                        {
                            if (loc3.prefix) 
                            {
                                return playPrefixSound(loc3.prefix, loc3.prefixDelaysSound, loc3.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, 0, loc1, null, arg1.callback);
                            }
                            return playSound(loc3.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN, 0, loc1, null, arg1.callback);
                        }
                    }
                }
            }
            else 
            {
                loc2 = this.getGameSound(arg1.soundName);
                if (!(loc2 == null) && !(loc2.sound == "")) 
                {
                    return playSound(loc2.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, 0, loc1, null, arg1.callback);
                }
            }
            return false;
        }

        protected function stopSlotSound(arg1:mgs.aurora.games.common.dataTypes.SlotSoundActionData):void
        {
            var loc2:*=null;
            var loc1:*=null;
            if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME) 
            {
                if (arg1.soundCat != mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN) 
                {
                    if (arg1.soundCat == mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND) 
                    {
                        this.stopSlotBackgroundSound(arg1.soundName);
                    }
                }
                else 
                {
                    loc1 = this.getWinSound(arg1.soundName);
                    if (loc1) 
                    {
                        if (!(loc1 == null) && !(loc1.sound == "")) 
                        {
                            stopSound(loc1.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN);
                        }
                    }
                    else 
                    {
                        loc2 = this.getWinRangeSoundByName(arg1.soundName);
                        if (loc2 && !(loc2.sound == "")) 
                        {
                            stopSound(loc2.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_WIN);
                        }
                    }
                }
            }
            else 
            {
                loc1 = this.getGameSound(arg1.soundName);
                if (!(loc1 == null) && !(loc1.sound == "")) 
                {
                    stopSound(loc1.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME);
                }
            }
            return;
        }

        protected function playSlotBackgroundSound(arg1:String):Boolean
        {
            var loc1:*=null;
            if (arg1 == this._activeBackgroundSound) 
            {
                return true;
            }
            loc1 = this.getBackgroundSound(arg1);
            if (loc1 == null || loc1.sound == "") 
            {
                return false;
            }
            if (this._activeBackgroundSound != null) 
            {
                this.stopSlotBackgroundSound(this._activeBackgroundSound);
            }
            if (playSound(loc1.sound, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, 0, 100000000, null, null)) 
            {
                this._activeBackgroundSound = arg1;
                this._backgroundSoundToPlay = null;
                return true;
            }
            this._activeBackgroundSound = null;
            this._backgroundSoundToPlay = arg1;
            return false;
        }

        public static const SOUNDS_WIN_RANGE:String="winRange";

        internal var _winSoundMap:flash.utils.Dictionary;

        internal var _winRangeSoundMap:flash.utils.Dictionary;

        internal var _buttonSoundMap:flash.utils.Dictionary;

        internal var _gameSoundMap:flash.utils.Dictionary;

        internal var _backgroundSoundMap:flash.utils.Dictionary;

        internal var _reelStopSounds:__AS3__.vec.Vector.<__AS3__.vec.Vector.<String>>;

        protected var _soundEngineXML:XMLList;

        protected var _hasSoundEngineXML:Boolean=false;

        protected var _activeBackgroundSound:String=null;

        protected var _backgroundSoundToPlay:String=null;
    }
}


//            class SoundServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import caurina.transitions.*;
    import flash.media.*;
    import flash.utils.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import org.as3lib.kitchensync.action.*;
    
    public class SoundServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function SoundServer(arg1:String="PUBLISHER_SOUND")
        {
            super(arg1);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.SoundServer");
            this._soundLoadedList = new flash.utils.Dictionary(true);
            return;
        }

        internal function onComplete():void
        {
            caurina.transitions.Tweener.removeTweens(this);
            return;
        }

        internal function setVolume():void
        {
            this.setVolumeForSound(this._fadeSound, this._fadeScope, this._fadeVolume);
            return;
        }

        public function updateOptions():void
        {
            if (this.isReady) 
            {
                if (this.sound.group(SOUNDS_GAME) != null) 
                {
                    this.sound.group(SOUNDS_GAME).mute = this._conductor.options.switchOffAllGameSounds;
                }
                if (this.sound.group(SOUNDS_BACKGROUND) != null) 
                {
                    this.sound.group(SOUNDS_BACKGROUND).mute = this._conductor.options.switchOffBgSounds;
                }
                if (this.sound.group(SOUNDS_WIN) != null) 
                {
                    this.sound.group(SOUNDS_WIN).mute = this._conductor.options.switchOffWinSounds;
                }
                if (this.sound.group(SOUNDS_WIN_2) != null) 
                {
                    this.sound.group(SOUNDS_WIN_2).mute = this._conductor.options.switchOffWinSounds;
                }
            }
            return;
        }

        protected function isChannel(arg1:String):Boolean
        {
            if (this.sound.getChannel(arg1) != null) 
            {
                return true;
            }
            return false;
        }

        protected function get sound():mgs.aurora.api.interfaces.ISounds
        {
            return mgs.aurora.games.framework.AuroraReference.aurora.sounds;
        }

        protected function defineSubscribers():void
        {
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._hasConfigXML && this._viewReady;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_MUTE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_UNMUTE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_ON_READY));
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SOUNDS, 9000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onLoaded, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_FILE_LOADED, 100);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onOptionsUpdate, mgs.aurora.games.logicBlocks.data.OptionsData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.OptionsData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY, 9000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewUpdate, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY, 9000);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMute, mgs.aurora.games.logicBlocks.publishers.SoundServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.SoundServer.SERVICE_ON_MUTE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onMuteAllExceptBackground, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_OPEN);
            this.defineSubscribers();
            return;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                caurina.transitions.Tweener.removeAllTweens();
                this.sound.removeAll(SOUNDS_GAME);
                this.sound.removeAll(SOUNDS_BACKGROUND);
                this.sound.removeAll(SOUNDS_WIN);
                this.sound.removeAll(SOUNDS_WIN_2);
                this._soundXML = null;
                this._soundLoadedList = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data as XMLList;
            this._soundXML = arg1.data as XMLList;
            this._hasConfigXML = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onViewUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            if (this.isReady) 
            {
                this.onOptionsUpdate(null);
                syndicate(this, SERVICE_ON_READY);
            }
            return;
        }

        internal function onMuteAllExceptBackground(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data == mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SCREEN_LAST_GAME_EXIT) 
            {
                this.sound.group(SOUNDS_GAME).stopAll();
                this.sound.group(SOUNDS_WIN).stopAll();
                this.sound.group(SOUNDS_WIN_2).stopAll();
            }
            return;
        }

        internal function onMute(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!arg1.data.target.mute) 
            {
                this.onOptionsUpdate();
            }
            return;
        }

        internal function onLoaded(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (this._hasConfigXML) 
            {
                loc1 = arg1.data.request.id.split("_")[0];
                if (loc1 == "SND") 
                {
                    this.configure(arg1.data.request.id);
                    this.soundResourceLoaded(arg1.data.request.id);
                    this.onOptionsUpdate();
                    syndicate(this, SERVICE_ON_COMPLETE, new mgs.aurora.games.framework.TransportLayer(arg1.data.request.id));
                }
            }
            return;
        }

        protected function soundResourceLoaded(arg1:String):void
        {
            return;
        }

        internal function onOptionsUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.updateOptions();
            return;
        }

        internal function configure(arg1:String):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._soundXML.sound;
            for each (loc1 in loc3) 
            {
                if (loc1.@res.toString() != arg1) 
                {
                    continue;
                }
                if (this._soundLoadedList[loc1.@id.toString()] != null) 
                {
                    continue;
                }
                this._soundLoadedList[loc1.@id.toString()] = loc1.@group.toString();
                this.sound.add(mgs.aurora.games.common.components.resourceProxy.Assets.getResource(loc1.@res.toString()).loaderInfo, [loc1.@id.toString()], loc1.@group.toString());
            }
            return;
        }

        protected function isSoundAvailable(arg1:String, arg2:String):Boolean
        {
            if (this._soundLoadedList[arg1] != null) 
            {
                if (this._soundLoadedList[arg1] == arg2) 
                {
                    return true;
                }
                return false;
            }
            return false;
        }

        protected function playSound(arg1:String, arg2:String, arg3:Number=0, arg4:int=0, arg5:flash.media.SoundTransform=null, arg6:Function=null, ... rest):Boolean
        {
            var soundClass:String;
            var scope:String;
            var startTime:Number=0;
            var loops:int=0;
            var sndTranform:flash.media.SoundTransform=null;
            var callback:Function=null;
            var args:Array;
            var snd:Class;
            var snd1:flash.media.Sound;

            var loc1:*;
            snd = null;
            snd1 = null;
            soundClass = arg1;
            scope = arg2;
            startTime = arg3;
            loops = arg4;
            sndTranform = arg5;
            callback = arg6;
            args = rest;
            if (!this.isSoundLoaded(soundClass)) 
            {
                return false;
            }
            try 
            {
                this.sound.play(soundClass, scope, startTime, loops, sndTranform);
                if (callback != null) 
                {
                    if (mgs.aurora.games.framework.StageReference.stage.loaderInfo.applicationDomain.hasDefinition(soundClass)) 
                    {
                        snd = flash.utils.getDefinitionByName(soundClass) as Class;
                        snd1 = new snd() as flash.media.Sound;
                        new org.as3lib.kitchensync.action.KSFunction(callback, (loops + 1) * snd1.length - startTime, args).start();
                    }
                    else 
                    {
                        callback.apply(callback, args);
                    }
                }
                return true;
            }
            catch (e:Error)
            {
                _trace("Sound [" + soundClass + "] could not be played.", "error", this, 16711680);
                return false;
            }
            return false;
        }

        protected function playPrefixSound(arg1:String, arg2:Boolean, arg3:String, arg4:String, arg5:Number=0, arg6:int=0, arg7:flash.media.SoundTransform=null, arg8:Function=null, ... rest):Boolean
        {
            var prefixedSound:String;
            var prefixDelaysSound:Boolean;
            var soundClass:String;
            var scope:String;
            var startTime:Number=0;
            var loops:int=0;
            var sndTranform:flash.media.SoundTransform=null;
            var callback:Function=null;
            var args:Array;
            var snd:Class;
            var snd1:flash.media.Sound;

            var loc1:*;
            snd = null;
            snd1 = null;
            prefixedSound = arg1;
            prefixDelaysSound = arg2;
            soundClass = arg3;
            scope = arg4;
            startTime = arg5;
            loops = arg6;
            sndTranform = arg7;
            callback = arg8;
            args = rest;
            if (!this.isSoundLoaded(prefixedSound)) 
            {
                return false;
            }
            if (!this.isSoundLoaded(soundClass)) 
            {
                return false;
            }
            try 
            {
                this.sound.play(prefixedSound, scope);
                if (prefixDelaysSound) 
                {
                    if (mgs.aurora.games.framework.StageReference.stage.loaderInfo.applicationDomain.hasDefinition(soundClass)) 
                    {
                        snd = flash.utils.getDefinitionByName(prefixedSound) as Class;
                        snd1 = new snd() as flash.media.Sound;
                        new org.as3lib.kitchensync.action.KSFunction(this.playSound, (loops + 1) * snd1.length - startTime, soundClass, scope, startTime, loops, sndTranform, callback, args).start();
                    }
                    else 
                    {
                        _trace("Sound [" + prefixedSound + "] could not be instantiated.", "error", this, 16711680);
                        throw new Error("Class Definition could not be found");
                    }
                }
                else 
                {
                    this.playSound(soundClass, scope, startTime, loops, sndTranform, callback, args);
                }
                return true;
            }
            catch (e:Error)
            {
                return false;
            }
            return false;
        }

        public function isSoundLoaded(arg1:String):Boolean
        {
            return mgs.aurora.games.framework.StageReference.stage.loaderInfo.applicationDomain.hasDefinition(arg1);
        }

        public function stopSound(arg1:String, arg2:String):void
        {
            var soundClass:String;
            var scope:String;

            var loc1:*;
            soundClass = arg1;
            scope = arg2;
            try 
            {
                this.sound.stop(soundClass, scope);
            }
            catch (e:Error)
            {
                _trace("Failed to stop sound : " + soundClass, "error", this, 16711680);
            }
            return;
        }

        public function stopAllSounds(arg1:String):void
        {
            this.sound.stopAll(arg1);
            return;
        }

        public function setVolumeForSound(arg1:String, arg2:String, arg3:Number):void
        {
            if (this.sound.group(arg2) != null) 
            {
                if (!this.sound.group(arg2).mute) 
                {
                    this.sound.setChannelVolume([arg1], arg3, arg2);
                }
            }
            return;
        }

        public function setVolumeOverTime(arg1:String, arg2:String, arg3:Number, arg4:Number, arg5:Number):void
        {
            caurina.transitions.Tweener.removeTweens(this);
            this._fadeSound = arg1;
            this._fadeScope = arg2;
            this._fadeVolume = arg3;
            caurina.transitions.Tweener.addTween(this, {"_fadeVolume":arg4, "time":arg5, "transition":"linear", "onUpdate":this.setVolume, "onComplete":this.onComplete});
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_SOUND";

        public static const SERVICE_ON_MUTE:String="ON_MUTE";

        public static const SERVICE_ON_UNMUTE:String="ON_UNMUTE";

        public static const SERVICE_ON_COMPLETE:String="ON_COMPLETE";

        public static const SERVICE_ON_READY:String="ON_READY";

        public static const SOUNDS_GAME:String="game";

        public static const SOUNDS_WIN:String="win";

        public static const SOUNDS_WIN_2:String="win2";

        public static const SOUNDS_BACKGROUND:String="background";

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _hasConfigXML:Boolean=false;

        protected var _viewReady:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        public var _fadeVolume:Number=100;

        internal var _fadeSound:String;

        internal var _fadeScope:String;

        internal var _soundLoadedList:flash.utils.Dictionary;

        protected var _soundXML:XMLList;
    }
}


//            class SymbolsServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.games.common.components.loader.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.slots.components.enums.*;
    import mgs.aurora.slots.components.symbol.*;
    import mgs.aurora.slots.components.triggercontroller.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class SymbolsServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function SymbolsServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.SymbolsServer");
            this._tempSafeArea = new Vector.<Object>();
            return;
        }

        protected function onWinDisplayHideSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=arg1.data;
            if (this.isReady && this.canDo && !mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
            {
                loc2 = loc1.symbols;
                loc3 = 0;
                while (loc3 < loc2.length) 
                {
                    loc4 = this._visAreaData.getSymbolIdFromVisArea(loc2[loc3]);
                    if (!this._symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && !this._symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && !(this._symbolController.getSymbolStateAtPosn(loc2[loc3]).stateID == mgs.aurora.slots.components.symbol.Symbol.SPECIAL)) 
                    {
                        this._symbolController.flashSymbol(loc2[loc3], mgs.aurora.slots.components.symbol.SymbolController.HIDE);
                    }
                    ++loc3;
                }
            }
            return;
        }

        protected function onWinDisplayStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            this._stopped = false;
            return;
        }

        protected function onWinDisplayStopSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            if (!this._stopped) 
            {
                this._stopped = true;
                this.showSymbols();
            }
            return;
        }

        protected function onWinDisplayShowSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc1:*=arg1.data;
            if (this.isReady && this.canDo && !mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
            {
                loc2 = loc1.symbols;
                loc3 = 0;
                while (loc3 < loc2.length) 
                {
                    loc4 = this._visAreaData.getSymbolIdFromVisArea(loc2[loc3]);
                    if (!this._symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && !this._symbolController.isSymbolStateAvailable(loc4.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && !(this._symbolController.getSymbolStateAtPosn(loc2[loc3]).stateID == mgs.aurora.slots.components.symbol.Symbol.SPECIAL)) 
                    {
                        this._symbolController.flashSymbol(loc2[loc3], mgs.aurora.slots.components.symbol.SymbolController.SHOW);
                    }
                    ++loc3;
                }
            }
            return;
        }

        protected function onPulseWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data;
            if (this.isReady && this.canDo && !mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
            {
                this.pulseSymbols(loc1, 0.25, 0.5, 1, 0, "linear");
            }
            return;
        }

        internal function pulseSymbols(arg1:__AS3__.vec.Vector.<int>, arg2:Number, arg3:Number=0, arg4:Number=1, arg5:uint=0, arg6:String="linear"):void
        {
            var loc1:*=null;
            var loc2:*=0;
            this._pulseSymbols = arg1;
            this._fadeOutAlpha = arg3;
            this._fadeInAlpha = arg4;
            this._repeatPulse = arg5 * 2;
            this._timeToFade = arg2;
            this._pulseTransition = arg6;
            this._numberOfPulses = 0;
            this._symbolsFaded = 0;
            this._pulsingSymbols = new Vector.<mgs.aurora.slots.components.symbol.SymbolState>();
            if (this._pulseSymbols.length > 1) 
            {
                loc2 = 0;
                while (loc2 < this._pulseSymbols.length) 
                {
                    loc1 = this._symbolController.getSymbolStateAtPosn(this._pulseSymbols[loc2]);
                    this._pulsingSymbols.push(loc1);
                    if (loc1 != null) 
                    {
                        loc1.visible = true;
                        loc1.alpha = 1;
                        this.pulseOut(loc1);
                    }
                    ++loc2;
                }
            }
            return;
        }

        internal function pulseIn(arg1:flash.display.MovieClip):void
        {
            caurina.transitions.Tweener.removeTweens(arg1);
            caurina.transitions.Tweener.addTween(arg1, {"alpha":this._fadeInAlpha, "time":this._timeToFade, "onComplete":this.pulseComplete, "onCompleteParams":[false], "transition":this._pulseTransition});
            return;
        }

        internal function pulseOut(arg1:flash.display.MovieClip):void
        {
            caurina.transitions.Tweener.removeTweens(arg1);
            caurina.transitions.Tweener.addTween(arg1, {"alpha":this._fadeOutAlpha, "time":this._timeToFade, "onComplete":this.pulseComplete, "onCompleteParams":[true], "transition":this._pulseTransition});
            return;
        }

        internal function pulseComplete(arg1:Boolean):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*;
            var loc4:*=((loc3 = this)._symbolsFaded + 1);
            loc3._symbolsFaded = loc4;
            if (this._pulseSymbols != null) 
            {
                if (this._pulseSymbols.length == this._symbolsFaded) 
                {
                    loc4 = ((loc3 = this)._numberOfPulses + 1);
                    loc3._numberOfPulses = loc4;
                    if (this._repeatPulse == 0 || this._numberOfPulses < this._repeatPulse) 
                    {
                        this._symbolsFaded = 0;
                        loc2 = 0;
                        while (loc2 < this._pulsingSymbols.length) 
                        {
                            loc1 = this._pulsingSymbols[loc2];
                            if (loc1 != null) 
                            {
                                if (arg1) 
                                {
                                    this.pulseIn(loc1);
                                }
                                else 
                                {
                                    this.pulseOut(loc1);
                                }
                            }
                            ++loc2;
                        }
                    }
                    else if (this._numberOfPulses == this._repeatPulse) 
                    {
                        syndicate(this, SERVICE_SYMBOL_PULSE_COMPLETE);
                    }
                }
            }
            return;
        }

        protected function interruptPulse():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=false;
            if (this._pulseSymbols) 
            {
                this._symbolsFaded = 0;
                loc2 = 0;
                while (loc2 < this._pulseSymbols.length) 
                {
                    loc1 = this._pulsingSymbols[loc2];
                    if (loc1 != null) 
                    {
                        loc3 = caurina.transitions.Tweener.removeTweens(loc1);
                        loc1.visible = true;
                        loc1.alpha = 1;
                    }
                    ++loc2;
                }
            }
            return;
        }

        protected function onRespin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            while (loc1 < this._conductor.reelData.columns) 
            {
                if (loc1 != arg1.data) 
                {
                    this.drawSymbolsForReal(loc1);
                }
                ++loc1;
            }
            return;
        }

        protected function playWinnings():void
        {
            var loc6:*=0;
            var loc7:*=0;
            var loc8:*=null;
            var loc9:*=null;
            this.cleanupTriggers();
            var loc1:*=-1;
            var loc2:*=-1;
            var loc3:*=-1;
            var loc4:*=-1;
            var loc5:*=0;
            while (loc5 < this._visAreaData.winningAnimationList.length) 
            {
                loc6 = this._visAreaData.winningAnimationList[loc5];
                loc7 = this._visAreaData.getSymbolIdFromVisArea(this._visAreaData.winningAnimationList[loc5]);
                loc8 = this._symbolsData.getTrigger(loc7);
                if (this._symbolController.isSymbolStateAvailable(loc7.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && this._visAreaData.triggerActivated && this.canPlayForThisTrigger(loc8)) 
                {
                    if (!(loc9 = this._symbolController.setSymbolStateAtPosn(loc6, mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM))) 
                    {
                        return;
                    }
                    if (loc9.totalFrames > loc3) 
                    {
                        loc4 = loc6;
                        loc3 = loc9.totalFrames;
                    }
                    syndicate(this, SERVICE_TRIGGER_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc7, "noAsset", loc6)));
                }
                else if (this.hasTrigger(loc7) && this._visAreaData.triggerActivated && this.canPlayForThisTrigger(loc8)) 
                {
                    if (this._symbolController.isSymbolStateAvailable(loc7.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK) && this._visAreaData.triggerActivated && this.canPlayForThisTrigger(loc8)) 
                    {
                        this._symbolController.setSymbolStateAtPosn(loc6, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                    }
                    this._flashTriggerSymbols = true;
                    this._flashingTriggers.push(loc6);
                    syndicate(this, SERVICE_TRIGGER_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc7, "noAsset", loc6)));
                }
                else if (this._symbolController.isSymbolStateAvailable(loc7.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && this.canDisplayWins) 
                {
                    (loc9 = this._symbolController.setSymbolStateAtPosn(loc6, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM)).gotoAndPlay(1);
                    if (loc9.totalFrames > loc1) 
                    {
                        loc2 = loc6;
                        loc1 = loc9.totalFrames;
                    }
                    syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc7, "noAsset", loc6)));
                }
                ++loc5;
            }
            if (!(loc4 == -1) && loc3 > 1) 
            {
                new org.as3lib.kitchensync.action.KSFunction(this.endOfTriggerAnimation, 40 * loc3, flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(loc4))).start();
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(loc4)), this.endOfTriggerAnimation, 10, 1, loc3);
            }
            else if (this._flashTriggerSymbols) 
            {
                this.playTriggerSequence();
            }
            else 
            {
                _trace("No trigger animation!!!");
                if (!(loc2 == -1) && loc1 > 1) 
                {
                    mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(loc2)), this.endOfAnimation, 10, 1, loc1);
                }
            }
            return;
        }

        protected function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.showSymbols();
            return;
        }

        protected function drawSymbols():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            this.showSymbols();
            if (this.canDo) 
            {
                loc1 = 0;
                while (loc1 < this._visAreaData.winningAnimationList.length) 
                {
                    loc2 = this._visAreaData.winningAnimationList[loc1];
                    loc3 = this._visAreaData.getSymbolIdFromVisArea(this._visAreaData.winningAnimationList[loc1]);
                    if (this._symbolController.isSymbolStateAvailable(loc3.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && !this.hasTrigger(loc3) && this.canDisplayWins) 
                    {
                        this._symbolController.setSymbolStateAtPosn(loc2, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM);
                        syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc3, "noAsset", loc2)));
                    }
                    else if (this._symbolController.isSymbolStateAvailable(loc3.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK) && !this.hasTrigger(loc3) && this.canDisplayWins) 
                    {
                        this._symbolController.setSymbolStateAtPosn(loc2, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                    }
                    else 
                    {
                        this._symbolController.setSymbolStateAtPosn(loc2, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                    }
                    ++loc1;
                }
            }
            syndicate(this, SERVICE_SYMBOLS_REFRESH);
            return;
        }

        protected function showSymbols():void
        {
            this._symbolController.clearHigherContainer();
            var loc1:*=0;
            while (loc1 < this._conductor.reelData.columns) 
            {
                this.drawSymbolsForReal(loc1);
                ++loc1;
            }
            syndicate(this, SERVICE_SYMBOLS_REFRESH);
            return;
        }

        protected function endOfTriggerAnimation(arg1:mgs.aurora.slots.components.symbol.SymbolState):void
        {
            if (this._allowTrigger) 
            {
                this._allowTrigger = false;
                syndicate(this, SERVICE_TRIGGER_ANIM_COMPLETE, new mgs.aurora.games.framework.TransportLayer(arg1));
            }
            return;
        }

        protected function endOfAnimation(arg1:mgs.aurora.slots.components.symbol.SymbolState):void
        {
            syndicate(this, SERVICE_WIN_ANIM_COMPLETE, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function drawSymbolsForReal(arg1:int):void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (this.isReady) 
            {
                if ((this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT || this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT) && this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    this.resetReelsToDefault();
                }
                else 
                {
                    loc1 = this._conductor.reelData.rows;
                    while (--loc1 >= 0) 
                    {
                        loc2 = this._conductor.reelData.columns * ((this._conductor.reelData.rows - 1) - loc1) + arg1;
                        this._symbolController.setSymbolAtPosn(loc2, this._visAreaData.getSymbolIdFromVisArea(loc2).toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                        this._symbolController.flashSymbol(loc2, mgs.aurora.slots.components.symbol.SymbolController.SHOW);
                    }
                }
            }
            else 
            {
                _trace("ERROR: Not ready to draw to the symbols.", "error", this, 16711680);
            }
            return;
        }

        protected function scatterAnimationComplete(arg1:flash.display.MovieClip):void
        {
            arg1.stop();
            var loc1:*=arg1 as mgs.aurora.slots.components.symbol.SymbolState;
            syndicate(this, SERVICE_LAND_ANIM_COMPLETE, new mgs.aurora.games.framework.TransportLayer(loc1));
            return;
        }

        protected function refreshReels():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            if (this.isReady && this.canDo) 
            {
                loc1 = 0;
                while (loc1 < this._visAreaData.winningAnimationList.length) 
                {
                    loc2 = this._visAreaData.winningAnimationList[loc1];
                    loc3 = this._visAreaData.getSymbolIdFromVisArea(this._visAreaData.winningAnimationList[loc1]);
                    if (this._stopped) 
                    {
                        this._symbolController.setSymbolStateAtPosn(loc2, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                    }
                    else if (this._symbolController.isSymbolStateAvailable(loc3.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && this.canDisplayWins) 
                    {
                        if (this._symbolController.getSymbolStateAtPosn(loc2).stateID == mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC || this._symbolController.getSymbolStateAtPosn(loc2).stateID == mgs.aurora.slots.components.symbol.Symbol.FALLBACK) 
                        {
                            this._symbolController.setSymbolStateAtPosn(loc2, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM);
                            syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc3, "noAsset", loc2)));
                        }
                    }
                    else if (this.canDisplayWins && this._symbolController.isSymbolStateAvailable(loc3.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK)) 
                    {
                        if (this._symbolController.getSymbolStateAtPosn(loc2).stateID == mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC) 
                        {
                            this._symbolController.setSymbolStateAtPosn(loc2, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                            syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc3, "noAsset", loc2)));
                        }
                    }
                    ++loc1;
                }
                this._symbolController.relayerSymbols(this._symbolsData);
            }
            return;
        }

        protected function get canDisplayWins():Boolean
        {
            if (this._hasConductor) 
            {
                if (this._winsAreBlocked) 
                {
                    return false;
                }
                if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLING || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_SUSPENDED) 
                {
                    if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                    {
                        return !this._summeryOpen;
                    }
                    if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) 
                    {
                        return false;
                    }
                    return true;
                }
                return false;
            }
            return false;
        }

        protected function playTriggerSequence():void
        {
            var loc1:*=new org.as3lib.kitchensync.action.group.KSParallelGroup();
            var loc2:*=new org.as3lib.kitchensync.action.group.KSParallelGroup();
            var loc3:*=0;
            while (loc3 < this._flashingTriggers.length) 
            {
                loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(this._symbolController.flashSymbol, this._symbolsData.iterationHideDelay, this._flashingTriggers[loc3], mgs.aurora.slots.components.symbol.SymbolController.HIDE));
                loc2.addAction(new org.as3lib.kitchensync.action.KSFunction(this._symbolController.flashSymbol, this._symbolsData.iterationShowDelay, this._flashingTriggers[loc3], mgs.aurora.slots.components.symbol.SymbolController.SHOW));
                ++loc3;
            }
            var loc4:*=new org.as3lib.kitchensync.action.group.KSSequenceGroup(loc1, loc2);
            this._triggerSequence.addAction(new org.as3lib.kitchensync.action.group.KSLooper(loc4, this._symbolsData.numIterations, true));
            this._triggerSequence.addAction(new org.as3lib.kitchensync.action.KSWait(100));
            this._triggerSequence.addAction(new org.as3lib.kitchensync.action.KSFunction(this.endOfTriggerAnimation, 0, flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(this._flashingTriggers[0]))));
            this._triggerSequence.start();
            return;
        }

        protected function canPlayForThisTrigger(arg1:mgs.aurora.slots.components.triggercontroller.Trigger):Boolean
        {
            if (arg1 == null) 
            {
                return false;
            }
            var loc1:*=arg1.featureTriggerID;
            if (loc1 == 0) 
            {
                return true;
            }
            var loc2:*=this._conductor.response.framework.state;
            switch (loc2) 
            {
                case 2:
                {
                    if (loc1 == 1) 
                    {
                        return true;
                    }
                    return false;
                }
                case 0:
                case 1:
                case 3:
                {
                    if (loc1 == 2) 
                    {
                        return true;
                    }
                    return false;
                }
            }
            return false;
        }

        protected function cleanupTriggers():void
        {
            this._flashTriggerSymbols = false;
            if (this._triggerSequence != null) 
            {
                if (this._triggerSequence.isRunning) 
                {
                    this._triggerSequence.stop();
                }
            }
            this._triggerSequence = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            this._flashingTriggers = new Vector.<int>();
            return;
        }

        protected function hasTrigger(arg1:int):Boolean
        {
            return this._symbolsData.getTrigger(arg1) == null ? false : true;
        }

        public function get symbols():mgs.aurora.slots.components.symbol.SymbolProvider
        {
            return this._symbols;
        }

        public function get symbolController():mgs.aurora.slots.components.symbol.SymbolController
        {
            return this._symbolController;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            var loc1:*=false;
            var loc3:*=this._conductor.state.state;
            switch (loc3) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_NUDGE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_NUDGE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_NUDGE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_NUDGE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    loc1 = true;
                    break;
                }
            }
            var loc2:*=true;
            loc3 = this._conductor.state.previousState;
            switch (loc3) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                {
                    loc2 = false;
                    break;
                }
            }
            return loc1 && !this._summeryOpen && loc2;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._gotSymbolsXML && this._viewReady;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._symbols.dispose();
                this._symbols = null;
                this._symbolsXML = null;
                this._symbolController.dispose();
                this._symbolController = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_WIN_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LAND_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER_ANIM));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_LAND_ANIM_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TRIGGER));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SYMBOLS_REFRESH));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SYMBOL_PULSE_COMPLETE));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.getSymbolsXML, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 1);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBonusOpen, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBonusAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFileLoad, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_FILE_LOADED, 1100);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPulseWin, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_PULSE_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinDisplayHideSymbols, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_HIDE_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinDisplayShowSymbols, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_SHOW_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinDisplayStart, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.SERVICE_START_WIN_DISPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWinDisplayStopSymbols, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinDisplayServer.SERVICE_CLEANUP_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRespin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBackToGame, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BACKTOGAME);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSummeryScreen, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetUpdate, mgs.aurora.games.logicBlocks.data.BetData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.BetData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesData, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinsRetrigger, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_RETRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.updateSymbolsForView, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ViewChangeServer.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.injectWildReels, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_RESOLVED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBlockingUpdate, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SERVICE_BLOCKING_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onShowRollingReelsStepSymbols, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_SHOW_STEP_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_REQUEST_WIN_DISPLAY_RESTART);
            return;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._visAreaData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.VisAreaData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.VisAreaData;
            this._symbolsData = mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME) as mgs.aurora.games.logicBlocks.data.SymbolsData;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function getSymbolsXML(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._gotSymbolsXML) 
            {
                this._symbolsXML = arg1.data;
                this._gotSymbolsXML = true;
                if (this.canConfig) 
                {
                    this.setup();
                }
            }
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc2:*=0;
            var loc3:*=0;
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                loc2 = loc1.components.length;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    if (loc1.components[loc3] == PUBLISHER_NAME) 
                    {
                        this._viewReady = true;
                        if (this.isReady && !this._summeryOpen) 
                        {
                            this.drawSymbols();
                        }
                    }
                    ++loc3;
                }
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            var loc1:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=NaN;
            var loc7:*=NaN;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            var loc2:*=new Vector.<flash.geom.Point>(this._conductor.reelData.rows * this._conductor.reelData.columns);
            var loc3:*=0;
            while (loc3 < this._conductor.reelData.rows) 
            {
                loc4 = 0;
                while (loc4 < this._conductor.reelData.columns) 
                {
                    loc5 = ((this._conductor.reelData.rows - 1) - loc3) * this._conductor.reelData.columns + loc4;
                    loc6 = loc4 * (this._conductor.reelData.xSpacing + this._conductor.reelData.width) * this._conductor.reelData.scale + this._conductor.reelData.x;
                    loc7 = loc3 * (this._conductor.reelData.ySpacing + this._conductor.reelData.height) * this._conductor.reelData.scale + this._conductor.reelData.y;
                    loc2[loc5] = new flash.geom.Point(loc6, loc7);
                    ++loc4;
                }
                ++loc3;
            }
            if (!this._conductor.freeGamesData.isFreeGameActive) 
            {
                if (this._conductor.freeGamesData.previousFreeGameTest || this._conductor.freeGamesData.previousFreeGameSelectedTest) 
                {
                    this._stopped = true;
                }
            }
            this._symbols = new mgs.aurora.slots.components.symbol.SymbolProvider();
            this.updateSymbolsForView();
            this._symbolController = new mgs.aurora.slots.components.symbol.SymbolController(loc2, mgs.aurora.games.framework.StageReference.getLevel("Symbols"), mgs.aurora.games.framework.StageReference.getLevel("Breakout"));
            this._symbolController.setProvider(this._symbols);
            this.showSymbols();
            this._symbolsXML = null;
            return;
        }

        protected function updateSymbolsForView(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this.isReady) 
            {
                return;
            }
            this.addSymbolStateFromEntitiesList(this._symbolsData.staticList, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
            this.addSymbolStateFromEntitiesList(this._symbolsData.animList, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM);
            this.addSymbolStateFromEntitiesList(this._symbolsData.landList, mgs.aurora.slots.components.symbol.Symbol.LANDING_ANIM);
            this.addSymbolStateFromEntitiesList(this._symbolsData.triggerAnimList, mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM);
            this.addSymbolStateFromEntitiesList(this._symbolsData.specialList, mgs.aurora.slots.components.symbol.Symbol.SPECIAL);
            this.addSymbolStateFromEntitiesList(this._symbolsData.fallbackList, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
            return;
        }

        protected function addSymbolStateFromEntitiesList(arg1:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.SymbolEntity>, arg2:String):void
        {
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                if (mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.isAssetLoaded(arg1[loc1].assetName)) 
                {
                    this._symbols.addSymbolState(arg1[loc1].id.toString(), arg2, arg1[loc1].assetName);
                }
                ++loc1;
            }
            return;
        }

        protected function BuildSymbolView():void
        {
            var loc1:*=this._conductor.view.view;
            return;
        }

        protected function onFreeSpinsRetrigger(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._allowTrigger = true;
            if (this.isReady) 
            {
                this._summeryOpen = false;
                if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS && this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE) 
                {
                    this.showSymbols();
                    new org.as3lib.kitchensync.action.KSFunction(this.playWinnings, 500).start();
                }
            }
            return;
        }

        protected function onFreeGamesData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._hasConductor) 
            {
                this._betValue = this._conductor.betData.betValue;
            }
            return;
        }

        protected function onSummeryScreen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                this._summeryOpen = true;
                this.showSymbols();
            }
            return;
        }

        protected function onBackToGame(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._allowTrigger = true;
            if (this.isReady) 
            {
                this._summeryOpen = false;
                this.showSymbols();
                if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE && !(this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE)) 
                {
                    new org.as3lib.kitchensync.action.KSFunction(this.playWinnings, 2000).start();
                }
                else if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                {
                    this.resetReelsToDefault();
                }
            }
            return;
        }

        protected function resetReelsToDefault():void
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=0;
            var loc7:*=0;
            if (this.isReady) 
            {
                loc2 = mgs.aurora.games.logicBlocks.data.ReelsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ReelsData.PUBLISHER_NAME));
                loc3 = this._conductor.response.nextSpin.reelSet;
                loc4 = loc2.GetDefaultReelPositionSymbols(loc3);
                loc5 = 0;
                while (loc5 < this._conductor.reelData.columns) 
                {
                    loc6 = 0;
                    while (loc6 < this._conductor.reelData.rows) 
                    {
                        loc1 = this._conductor.reelData.columns * ((this._conductor.reelData.rows - 1) - loc6) + loc5;
                        loc7 = loc4[loc5][loc6];
                        this._symbolController.setSymbolAtPosn(loc1, String(loc7), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                        ++loc6;
                    }
                    ++loc5;
                }
                this._symbolController.relayerSymbols(this._symbolsData);
            }
            return;
        }

        protected function onBetUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.isReady) 
            {
                if (this._conductor.betData.betValue != this._betValue) 
                {
                    this._betValue = this._conductor.betData.betValue;
                    this.showSymbols();
                }
            }
            return;
        }

        protected function onBonusOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=0;
            if (this.isReady) 
            {
                loc2 = this._conductor.reelData.rows * this._conductor.reelData.columns;
                while (--loc2 >= 0) 
                {
                    loc1 = this._symbolController.getSymbolStateAtPosn(loc2);
                    if (!loc1) 
                    {
                        continue;
                    }
                    if (loc1.stateID != mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC) 
                    {
                        loc1.gotoAndStop(loc1.totalFrames);
                    }
                    if (loc1.visible) 
                    {
                        continue;
                    }
                    loc1.visible = true;
                }
            }
            else 
            {
                _trace("ERROR: Not ready to draw to the symbols.", "error", this, 16711680);
            }
            return;
        }

        protected function onAllReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=NaN;
            var loc3:*=0;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=0;
            var loc8:*=0;
            var loc9:*=null;
            if (this._conductor.response.nextSpin.freeSpinsRetriggered && this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
            {
                return;
            }
            this.cleanupTriggers();
            this.interruptPulse();
            this._allowTrigger = true;
            this._reelsSpinning = false;
            if (this.isReady) 
            {
                if (this.canDo) 
                {
                    loc1 = -1;
                    loc2 = -1;
                    loc3 = -1;
                    loc4 = -1;
                    loc6 = 0;
                    while (loc6 < this._visAreaData.winningAnimationList.length) 
                    {
                        loc7 = this._visAreaData.winningAnimationList[loc6];
                        loc8 = this._visAreaData.getSymbolIdFromVisArea(this._visAreaData.winningAnimationList[loc6]);
                        loc9 = this._symbolsData.getTrigger(loc8);
                        if (this._symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM) && this._visAreaData.triggerActivated && !(this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) && this.canPlayForThisTrigger(loc9)) 
                        {
                            if ((loc5 = this._symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.TRIGGER_ANIM)).totalFrames > loc3) 
                            {
                                loc4 = loc7;
                                loc3 = loc5.totalFrames;
                            }
                            syndicate(this, SERVICE_TRIGGER_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc8, "noAsset", loc7)));
                        }
                        else if (this.hasTrigger(loc8) && this._visAreaData.triggerActivated && !(this._conductor.response.id.verb == mgs.aurora.slots.components.enums.Verbs.REFRESH) && this.canPlayForThisTrigger(loc9)) 
                        {
                            if (this._symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK)) 
                            {
                                this._symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                            }
                            this._flashTriggerSymbols = true;
                            this._flashingTriggers.push(loc7);
                            syndicate(this, SERVICE_TRIGGER_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc8, "noAsset", loc7)));
                        }
                        else if (this._symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM) && this.canDisplayWins) 
                        {
                            if (this._winsAreBlocked) 
                            {
                                loc5 = this._symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                            }
                            else 
                            {
                                (loc5 = this._symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.MAIN_ANIM)).play();
                            }
                            if (loc5.totalFrames > loc1) 
                            {
                                loc2 = loc7;
                                loc1 = loc5.totalFrames;
                            }
                            syndicate(this, SERVICE_WIN_ANIM, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.SymbolEntity(loc8, "noAsset", loc7)));
                        }
                        else if (this._symbolController.isSymbolStateAvailable(loc8.toString(), mgs.aurora.slots.components.symbol.Symbol.FALLBACK) && this.canDisplayWins) 
                        {
                            this._symbolController.setSymbolStateAtPosn(loc7, mgs.aurora.slots.components.symbol.Symbol.FALLBACK);
                        }
                        ++loc6;
                    }
                    if (this._conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        if (!(loc4 == -1) && loc3 > 1) 
                        {
                            new org.as3lib.kitchensync.action.KSFunction(this.endOfTriggerAnimation, 40 * loc3, flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(loc4))).start();
                            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(loc4)), this.endOfTriggerAnimation, 10, 1, loc3);
                        }
                        else if (this._flashTriggerSymbols) 
                        {
                            this.playTriggerSequence();
                        }
                        else 
                        {
                            _trace("No trigger animation!!!");
                            if (!(loc2 == -1) && loc1 > 1) 
                            {
                                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(flash.display.MovieClip(this._symbolController.getSymbolStateAtPosn(loc2)), this.endOfAnimation, 10, 1, loc1);
                            }
                        }
                    }
                    this._symbolController.relayerSymbols(this._symbolsData);
                }
            }
            return;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        protected function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            this._stopped = false;
            this._reelsSpinning = true;
            this._allowTrigger = true;
            var loc2:*=arg1.data;
            var loc3:*=0;
            while (loc3 < loc2.length) 
            {
                this._symbolController.removeSymbolAtPosn(loc2[loc3]);
                ++loc3;
            }
            return;
        }

        protected function onShowRollingReelsStepSymbols(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc5:*=0;
            var loc6:*=0;
            var loc7:*=0;
            var loc8:*=0;
            if (!this.isReady) 
            {
                return;
            }
            var loc1:*=arg1.data;
            var loc2:*=this._conductor.rollingReels.steps[loc1].visArea;
            var loc3:*=loc2.visAreaSymbols;
            var loc4:*=0;
            while (loc4 < loc3.length) 
            {
                loc5 = 0;
                while (loc5 < loc3[loc4].length) 
                {
                    loc6 = this._conductor.reelData.columns * ((this._conductor.reelData.rows - 1) - loc4) + loc5;
                    loc7 = (this._conductor.reelData.rows - 1) - loc4;
                    loc8 = loc2.visAreaSymbols[loc4][loc5];
                    this._symbolController.setSymbolAtPosn(loc6, String(loc8), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                    this._symbolController.flashSymbol(loc6, mgs.aurora.slots.components.symbol.SymbolController.SHOW);
                    ++loc5;
                }
                ++loc4;
            }
            return;
        }

        protected function onReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            if (this.isReady) 
            {
                loc1 = arg1.data;
                loc3 = 0;
                while (loc3 < this._conductor.reelData.rows) 
                {
                    loc2 = this._conductor.reelData.columns * ((this._conductor.reelData.rows - 1) - loc3) + loc1.reelId;
                    if (!((loc4 = this._visAreaData.isTrigger(loc2)) == null) && this._visAreaData.canPlayLandList[loc1.reelId]) 
                    {
                        mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._symbolController.setSymbolAtPosn(loc2, loc4.id.toString(), mgs.aurora.slots.components.symbol.Symbol.LANDING_ANIM), this.scatterAnimationComplete);
                    }
                    else 
                    {
                        this._symbolController.setSymbolAtPosn(loc2, String(this._visAreaData.getSymbolIdFromVisArea(loc2)), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                    }
                    ++loc3;
                }
                this._symbolController.relayerSymbols(this._symbolsData);
            }
            else 
            {
                _trace("ERROR: Not ready to add the symbols to the screen.", "error", this, 16711680);
            }
            return;
        }

        protected function injectWildReels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            if (this.isReady) 
            {
                loc1 = arg1.data.reelId;
                loc2 = arg1.data.baseWildId;
                loc4 = 0;
                while (loc4 < this._conductor.reelData.rows) 
                {
                    loc3 = this._conductor.reelData.columns * ((this._conductor.reelData.rows - 1) - loc4) + loc1;
                    this._symbolController.setSymbolAtPosn(loc3, String(this._symbolsData.getStaticSymbol(loc2 + loc4).id), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                    ++loc4;
                }
            }
            return;
        }

        protected function onBlockingUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data == true;
            var loc2:*=!(this._winsAreBlocked == loc1);
            this._winsAreBlocked = loc1;
            if (this._conductor.rollingReels.hasReelSlideSteps && (this._conductor.rollingReels.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_STARTING) || this._conductor.rollingReels.isState(mgs.aurora.games.logicBlocks.data.RollingReelsData.STATE_ACTIVE))) 
            {
                return;
            }
            if (this._conductor.autoplay.autoPlayActive) 
            {
                return;
            }
            var loc3:*=this._conductor.state.state;
            switch (loc3) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    return;
                }
            }
            return;
        }

        protected function onFileLoad(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._isConfig) 
            {
                return;
            }
            if (this._symbolsData.isLateLoadingFile(arg1.data.request.id)) 
            {
                this.updateSymbolsForView();
                if (!this._stopped && !this._reelsSpinning) 
                {
                    this.refreshReels();
                }
            }
            return;
        }

        protected function onFreeGamesClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._isConfig) 
            {
                return;
            }
            if (this._conductor.freeGamesData.isFreeGameActive) 
            {
                if (this._conductor.freeGamesData.lastPlayedFreeGameId != this._conductor.freeGamesData.activeGame.uniqueId) 
                {
                    this._stopped = true;
                }
            }
            else if (this._conductor.freeGamesData.previousFreeGameTest || this._conductor.freeGamesData.previousFreeGameSelectedTest) 
            {
                this._stopped = true;
            }
            this.refreshReels();
            return;
        }

        public static const SERVICE_SYMBOL_PULSE_COMPLETE:String="SYMBOL_PULSE_COMPLETE";

        public static const PUBLISHER_NAME:String="PUBLISHER_SYMBOLS";

        public static const SERVICE_TRIGGER_ANIM_COMPLETE:String="TRIGGER_ANIM_COMPLETE";

        public static const SERVICE_WIN_ANIM_COMPLETE:String="WIN_ANIM_COMPLETE";

        public static const SERVICE_WIN_ANIM:String="WIN_ANIM";

        public static const SERVICE_LAND_ANIM:String="LAND_ANIM";

        public static const SERVICE_TRIGGER_ANIM:String="TRIGGER_ANIM";

        public static const SERVICE_LAND_ANIM_COMPLETE:String="LAND_ANIM_COMPLETE";

        public static const SERVICE_TRIGGER:String="TRIGGER";

        public static const SERVICE_SYMBOLS_REFRESH:String="SYMBOLS_REFRESH";

        protected var _symbolsXML:XMLList;

        protected var _betValue:Number;

        protected var _stopped:Boolean=false;

        protected var _summeryOpen:Boolean;

        protected var _reelsSpinning:Boolean;

        protected var _allowTrigger:Boolean=true;

        protected var _flashTriggerSymbols:Boolean;

        protected var _summaryShown:Boolean=true;

        protected var _triggerSequence:org.as3lib.kitchensync.action.group.KSSequenceGroup;

        protected var _flashingTriggers:__AS3__.vec.Vector.<int>;

        protected var _isConfig:Boolean;

        internal var _fadeOutAlpha:Number;

        internal var _repeatPulse:uint=0;

        internal var _pulseSymbols:__AS3__.vec.Vector.<int>;

        internal var _timeToFade:Number;

        internal var _numberOfPulses:uint=0;

        internal var _symbolsFaded:uint=0;

        internal var _pulseTransition:String;

        internal var _pulsingSymbols:__AS3__.vec.Vector.<mgs.aurora.slots.components.symbol.SymbolState>;

        protected var _winsAreBlocked:Boolean;

        protected var _tempSafeArea:__AS3__.vec.Vector.<Object>;

        protected var _hasConductor:Boolean;

        protected var _gotSymbolsXML:Boolean;

        protected var _viewReady:Boolean;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _symbolController:mgs.aurora.slots.components.symbol.SymbolController;

        protected var _symbols:mgs.aurora.slots.components.symbol.SymbolProvider;

        protected var _visAreaData:mgs.aurora.games.logicBlocks.data.VisAreaData;

        protected var _symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;

        protected var _haveTriggered:Boolean;

        internal var _fadeInAlpha:Number;
    }
}


//            class UserInterruptServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import org.as3lib.kitchensync.action.*;
    
    public class UserInterruptServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function UserInterruptServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.UserInterruptServer");
            this._enabled = true;
            this._stage = mgs.aurora.games.framework.StageReference.stage;
            this._stage.addEventListener(flash.events.MouseEvent.CLICK, this.onClick, false, 0, false);
            return;
        }

        internal function delayedEnable():void
        {
            this._enabled = true;
            return;
        }

        internal function delayedClick():void
        {
            if (this._enabled) 
            {
                syndicate(this, SERVICE_INTERRUPT);
                this._enabled = false;
            }
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._stage.removeEventListener(flash.events.MouseEvent.CLICK, this.onClick, false);
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_INTERRUPT));
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.enable, mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BigWinServer.SERVICE_BIGWIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.disable, mgs.aurora.games.logicBlocks.agents.PostBigWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostBigWinAgent.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.disable, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReels, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.enable, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.SERVICE_ON_CLOSE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.enable, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_DIALOG_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConsoleClick, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_PAYTABLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onConsoleClick, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_CLICK);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAuroraConsoleClick, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraConsoleAgent.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWayWinsClick, mgs.aurora.games.logicBlocks.agents.WayWinsSliderAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WayWinsSliderAgent.SERVICE_EVENT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReels, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPreBigWin, mgs.aurora.games.logicBlocks.publishers.BigWinServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BigWinServer.SERVICE_PRE_BIGWIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpin, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PreReelsAgent.SERVICE_SPIN);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        internal function onSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isBigWin = false;
            return;
        }

        internal function onPreBigWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isBigWin = true;
            return;
        }

        internal function enable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            new org.as3lib.kitchensync.action.KSFunction(this.delayedEnable, 20).start();
            return;
        }

        internal function disable(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._enabled = false;
            return;
        }

        internal function onAllReels(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._conductor.response.slot.win > 0) 
            {
                this._enabled = true;
            }
            return;
        }

        internal function onConsoleClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data == CONSOLE_EVENT_ID && !this._conductor.options.isQuickSpin && this._isBigWin) 
            {
                return;
            }
            new org.as3lib.kitchensync.action.KSFunction(this.delayedClick, 20).start();
            return;
        }

        internal function onAuroraConsoleClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data == mgs.aurora.api.enums.SystemButtonTypes.BANK) 
            {
                this._enabled = true;
                this.delayedClick();
            }
            return;
        }

        internal function onPaytableOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.delayedClick();
            return;
        }

        internal function onWayWinsClick(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._dontSyndicate = true;
            return;
        }

        internal function onClick(arg1:flash.events.MouseEvent):void
        {
            if (flash.display.DisplayObject(arg1.target).name == CONSOLE_BUTTON_NAME && !this._conductor.options.isQuickSpin && this._isBigWin) 
            {
                this._isBigWin = false;
                return;
            }
            if (this._dontSyndicate) 
            {
                this._dontSyndicate = false;
                return;
            }
            new org.as3lib.kitchensync.action.KSFunction(this.delayedClick, 20).start();
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_UserInterruptServer";

        public static const SERVICE_INTERRUPT:String="INTERRUPT";

        protected static const CONSOLE_EVENT_ID:String="stop_autoplay";

        protected static const CONSOLE_BUTTON_NAME:String="Button_STOP_Autoplay";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _enabled:Boolean;

        internal var _dontSyndicate:Boolean;

        internal var _stage:flash.display.Sprite;

        internal var _isBigWin:Boolean;
    }
}


//            class ViewChangeServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import mgs.aurora.api.enums.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    
    public class ViewChangeServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher
    {
        public function ViewChangeServer()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.ViewChangeServer");
            this._view = PRELOAD;
            this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING;
            return;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_UPDATE));
            this.subscriptions();
            return;
        }

        public function subscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdate, mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.GameStateAgent.SERVICE_UPDATE, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onExit, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.AuroraSystemAgent.SERVICE_REQUEST_EXIT);
            return;
        }

        protected function get isBonusActiveState():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            if (loc1.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_ACTIVE_BONUS) 
            {
                return true;
            }
            return false;
        }

        protected function get isBonusCompleteState():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            if (loc1.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE || loc1.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS) 
            {
                return true;
            }
            return false;
        }

        protected function getBonusId():int
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            if (this.isBonusActiveState) 
            {
                return loc1.bonusGames.currentBonusID;
            }
            if (this.isBonusCompleteState) 
            {
                return loc1.bonusGames.lastBonusPlayedID;
            }
            throw new Error("No Bonus ID found");
        }

        public function getFreeSpinsUniqueId():String
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.ResponseData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.ResponseData.PUBLISHER_NAME));
            if (loc1.freeSpinAwards.numberOf <= 0) 
            {
                throw new Error("Attempting to build a FreeSpins ID while not in FS!");
            }
            var loc2:*=loc1.freeSpinAwards.freeSpinAwards[0].freeSpinReelSet;
            return "REELSET_" + loc2;
        }

        internal function onExit(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._isExiting = true;
            return;
        }

        internal function onUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=0;
            var loc2:*=mgs.aurora.games.logicBlocks.agents.GameStateAgent(mgs.aurora.games.framework.Broker.instance.publisherByName(mgs.aurora.games.logicBlocks.agents.GameStateAgent.PUBLISHER_NAME));
            if (this._isExiting) 
            {
                return;
            }
            var loc3:*=loc2.state;
            switch (loc3) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_NUDGE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS_AFTER_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_NUDGE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_NUDGE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_NUDGE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS_AFTER_BONUS:
                {
                    this._view = BASEGAME;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    this._view = FREESPINS + "_" + this.getFreeSpinsUniqueId();
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    this._view = FREESPINS_COMPLETE + "_" + this.getFreeSpinsUniqueId();
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_WIN:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_WIN:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_GAMBLE_SUMMARY:
                {
                    this._view = GAMBLE;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_REFRESH:
                {
                    loc1 = this.getBonusId();
                    this._view = BONUS + loc1;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_BONUS_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SELECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SELECT:
                {
                    loc1 = this.getBonusId();
                    this._view = BONUS_PICK + loc1;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_BONUS_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUMMARY:
                {
                    loc1 = this.getBonusId();
                    this._view = BONUS_COMPLETE + loc1;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_BONUS_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUSPEND:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_BONUS_SUSPEND:
                {
                    this._view = SUSPEND;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING_BONUS_FEATURE;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME:
                {
                    this._view = FREEGAMES;
                    this._viewText = mgs.aurora.api.enums.PreloaderTextLabel.LOADING;
                    syndicate(this, SERVICE_UPDATE, new mgs.aurora.games.framework.TransportLayer(this._view));
                    break;
                }
            }
            return;
        }

        public function get view():String
        {
            return this._view;
        }

        public function get viewText():String
        {
            return this._viewText;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_VIEW_CHANGE";

        public static const SERVICE_UPDATE:String="UPDATE";

        public static const PRELOAD:String="PRELOAD";

        public static const CONFIGS:String="CONFIGS";

        public static const INTRO:String="INTRO";

        public static const BASEGAME:String="BASEGAME";

        public static const FREESPINS:String="FREESPINS";

        public static const FREESPINS_COMPLETE:String="FREESPINS_COMPLETE";

        public static const GAMBLE:String="GAMBLE";

        public static const BONUS:String="BONUS";

        public static const BONUS_PICK:String="BONUS_PICK";

        public static const BONUS_COMPLETE:String="BONUS_COMPLETE";

        public static const FREEGAMES:String="FREEGAMES";

        public static const SUSPEND:String="SUSPEND";

        internal var _view:String;

        internal var _hasView:Boolean=false;

        internal var _viewText:String;

        internal var _isExiting:Boolean=false;
    }
}


//            class WayWinDisplayServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class WayWinDisplayServer extends mgs.aurora.games.logicBlocks.publishers.WinDisplayServer
    {
        public function WayWinDisplayServer()
        {
            super(PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.WayWinDisplayServer");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            return;
        }

        protected override function doHighlightWin(arg1:mgs.aurora.games.logicBlocks.data.types.WinPacket):org.as3lib.kitchensync.action.group.IActionGroup
        {
            var win:mgs.aurora.games.logicBlocks.data.types.WinPacket;
            var scheduler:org.as3lib.kitchensync.action.group.KSSequenceGroup;
            var symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;
            var hde:org.as3lib.kitchensync.action.IAction;
            var shw:org.as3lib.kitchensync.action.IAction;
            var iAction:org.as3lib.kitchensync.action.group.IActionGroup;

            var loc1:*;
            hde = null;
            shw = null;
            iAction = null;
            win = arg1;
            scheduler = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            symbolsData = mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            try 
            {
                scheduler.addAction(new org.as3lib.kitchensync.action.KSFunction(showSymbols, 1, win.matchPos, win.payline, win.numCoinsWon, win.id));
                hde = new org.as3lib.kitchensync.action.KSFunction(hideSymbols, symbolsData.iterationHideDelay, win.matchPos, win.payline, win.numCoinsWon, win.id);
                shw = new org.as3lib.kitchensync.action.KSFunction(showSymbols, symbolsData.iterationShowDelay, win.matchPos, win.payline, win.numCoinsWon, win.id);
                iAction = new org.as3lib.kitchensync.action.group.KSSequenceGroup(hde, shw);
                scheduler.addAction(new org.as3lib.kitchensync.action.group.KSLooper(iAction, symbolsData.numIterations, true));
            }
            catch (e:Error)
            {
                _trace("Error in building wayWin sequence. -" + toString(), "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return scheduler;
        }

        protected override function doWinSummary():org.as3lib.kitchensync.action.group.IActionGroup
        {
            var scheduler:org.as3lib.kitchensync.action.group.KSSequenceGroup;
            var symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;
            var hde:org.as3lib.kitchensync.action.IAction;
            var shw:org.as3lib.kitchensync.action.IAction;
            var iAction:org.as3lib.kitchensync.action.group.IActionGroup;

            var loc1:*;
            hde = null;
            shw = null;
            iAction = null;
            scheduler = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            symbolsData = mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            try 
            {
                scheduler.addAction(new org.as3lib.kitchensync.action.KSFunction(showSymbols, 0, _allSymbolsInWins, -2, _conductor.response.slot.win, -2));
                hde = new org.as3lib.kitchensync.action.KSFunction(hideSymbols, symbolsData.iterationHideDelay, _allSymbolsInWins, -2, _conductor.response.slot.win, -2);
                shw = new org.as3lib.kitchensync.action.KSFunction(showSymbols, symbolsData.iterationShowDelay, _allSymbolsInWins, -2, _conductor.response.slot.win, -2);
                iAction = new org.as3lib.kitchensync.action.group.KSSequenceGroup(hde, shw);
                scheduler.addAction(new org.as3lib.kitchensync.action.group.KSLooper(iAction, symbolsData.numIterations, true));
            }
            catch (e:Error)
            {
                _trace("Error in building wayWin sequence. -" + toString(), "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return scheduler;
        }
    }
}


//            class WinDisplayServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    import org.as3lib.kitchensync.core.*;
    
    public class WinDisplayServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function WinDisplayServer(arg1:String)
        {
            this._allSymbolsInWins = new Vector.<int>();
            super(arg1);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.WinDisplayServer");
            this.defineSubscribers();
            return;
        }

        protected function hidePayLines(arg1:__AS3__.vec.Vector.<int>, arg2:__AS3__.vec.Vector.<int>, arg3:Number, arg4:int):void
        {
            syndicate(this, SERVICE_HIDE_PAYLINE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.PayLineWinIndicator(arg1, arg2, arg3, arg4)));
            return;
        }

        protected function showPaylines(arg1:__AS3__.vec.Vector.<int>, arg2:__AS3__.vec.Vector.<int>, arg3:Number, arg4:int):void
        {
            syndicate(this, SERVICE_SHOW_PAYLINE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.PayLineWinIndicator(arg1, arg2, arg3, arg4)));
            return;
        }

        protected function get canDoPreWinSummary():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            return loc1.hasWinSummary && (loc1.repeatWinSummary || !this._hasWinSummaryBeenShown) && !loc1.isPostSummary;
        }

        protected function get canDoPostWinSummary():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            return loc1.hasWinSummary && (loc1.repeatWinSummary || !this._hasWinSummaryBeenShown) && loc1.isPostSummary;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = mgs.aurora.games.logicBlocks.agents.ConductorAgent(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME));
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return true;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._hasSymbolConfig;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SEQUINCE_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_CLEANUP_COMPLETE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_PULSE_SYMBOLS));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_PAYLINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_PAYLINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_SHOW_WINLINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_WINLINE));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_ALL_WINLINES));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_ALL_PAYLINES));
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartDisplayWins, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.SERVICE_START_WIN_DISPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStopDisplayWins, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.WinLogicServer.SERVICE_STOP_WIN_DISPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSymbolConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SYMBOLS);
            return;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onSymbolConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            if (!this._hasSymbolConfig) 
            {
                this._hasSymbolConfig = true;
                loc1 = new XMLList(arg1.data);
                if (this.canConfig) 
                {
                    this.setup();
                }
            }
            return;
        }

        protected function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            return;
        }

        protected function onStartDisplayWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.setupForWinIterations();
            this.doWinIterations();
            return;
        }

        protected function onStopDisplayWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.clearScheduledActions();
            syndicate(this, SERVICE_CLEANUP_COMPLETE);
            return;
        }

        protected function setupForWinIterations():void
        {
            var loc1:*=null;
            var loc2:*=0;
            this._hasWinSummaryBeenShown = false;
            this._numIterationsDisplayed = 0;
            this.clearScheduledActions();
            if (this.isReady) 
            {
                while (this._allSymbolsInWins.length > 0) 
                {
                    this._allSymbolsInWins.pop();
                }
                loc1 = this._conductor.visArea.winningSymbolList;
                loc2 = 0;
                while (loc2 < loc1.length) 
                {
                    this._allSymbolsInWins.push(loc1[loc2]);
                    ++loc2;
                }
            }
            return;
        }

        protected function doWinIterations():void
        {
            var symbolsData:mgs.aurora.games.logicBlocks.data.SymbolsData;
            var winIndex:int;

            var loc1:*;
            winIndex = 0;
            symbolsData = mgs.aurora.games.logicBlocks.data.SymbolsData(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.data.SymbolsData.PUBLISHER_NAME));
            try 
            {
                this._scheduledActions = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                this._scheduledActions.autoDelete = true;
                this._scheduledActions.addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, this.loopWinIteration);
                if (this.canDoPreWinSummary) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSWait(symbolsData.iterationHideDelay));
                    this._scheduledActions.addAction(this.doWinSummary());
                    this._hasWinSummaryBeenShown = true;
                }
                winIndex = 0;
                while (winIndex < this._conductor.visArea.wins.numberOf) 
                {
                    this._scheduledActions.addAction(this.doHighlightWin(this._conductor.visArea.wins.wins[winIndex]));
                    ++winIndex;
                }
                if (this.canDoPostWinSummary) 
                {
                    this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSWait(symbolsData.iterationHideDelay));
                    this._scheduledActions.addAction(this.doWinSummary());
                    this._hasWinSummaryBeenShown = true;
                }
                this._scheduledActions.addAction(new org.as3lib.kitchensync.action.KSFunction(this.onIterationComplete));
                this._scheduledActions.start();
            }
            catch (e:Error)
            {
                _trace("Error in building Display Win sequence. -" + toString(), "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        protected function loopWinIteration(arg1:flash.events.Event):void
        {
            this.clearScheduledActions();
            this.doWinIterations();
            return;
        }

        protected function onIterationComplete():void
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._numIterationsDisplayed + 1);
            loc1._numIterationsDisplayed = loc2;
            syndicate(this, SERVICE_SEQUINCE_COMPLETE, new mgs.aurora.games.framework.TransportLayer(this._numIterationsDisplayed));
            return;
        }

        protected function doHighlightWin(arg1:mgs.aurora.games.logicBlocks.data.types.WinPacket):org.as3lib.kitchensync.action.group.IActionGroup
        {
            var loc1:*=new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            loc1.addAction(new org.as3lib.kitchensync.action.KSWait(100));
            loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(_trace, 0, "Hilighting WinID : " + arg1.id, "error", this, 16711680));
            return loc1;
        }

        protected function doWinSummary():org.as3lib.kitchensync.action.group.IActionGroup
        {
            var loc1:*=new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            loc1.addAction(new org.as3lib.kitchensync.action.KSWait(100));
            loc1.addAction(new org.as3lib.kitchensync.action.KSFunction(_trace, 0, "Doing Win Summary for " + this._allSymbolsInWins.length + " symbols", "error", this, 16711680));
            return loc1;
        }

        protected function clearScheduledActions():void
        {
            var isrunnnig:Boolean;
            var seq:int;

            var loc1:*;
            isrunnnig = false;
            seq = 0;
            if (this._scheduledActions != null) 
            {
                isrunnnig = false;
                this._scheduledActions.removeEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, this.loopWinIteration);
                if (this._scheduledActions.isRunning) 
                {
                    isrunnnig = true;
                    this._scheduledActions.stop();
                }
                seq = 0;
                while (seq < this._scheduledActions.childActions.length) 
                {
                    try 
                    {
                        this._scheduledActions.removeAction(this._scheduledActions.childActions[seq]);
                    }
                    catch (e:Error)
                    {
                        _trace("Error in removing scheduled actions. -" + toString(), "error", this, 16711680);
                        _trace(e.getStackTrace(), "error", this, 16711680);
                    }
                    ++seq;
                }
                this._scheduledActions.kill();
                if (isrunnnig) 
                {
                    syndicate(this, SERVICE_HIDE_ALL_WINLINES);
                    syndicate(this, SERVICE_HIDE_ALL_PAYLINES);
                }
            }
            return;
        }

        protected function hideSymbols(arg1:__AS3__.vec.Vector.<int>, arg2:int, arg3:Number, arg4:int):void
        {
            syndicate(this, SERVICE_HIDE_SYMBOLS, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransWinIndicator(arg1, arg2, arg3, arg4)));
            return;
        }

        protected function showSymbols(arg1:__AS3__.vec.Vector.<int>, arg2:int, arg3:Number, arg4:int):void
        {
            syndicate(this, SERVICE_SHOW_SYMBOLS, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.TransWinIndicator(arg1, arg2, arg3, arg4)));
            return;
        }

        protected function pulseSymbols(arg1:__AS3__.vec.Vector.<int>):void
        {
            syndicate(this, SERVICE_PULSE_SYMBOLS, new mgs.aurora.games.framework.TransportLayer(arg1));
            return;
        }

        protected function hideWinLines(arg1:__AS3__.vec.Vector.<int>, arg2:__AS3__.vec.Vector.<int>, arg3:Number, arg4:int):void
        {
            syndicate(this, SERVICE_HIDE_WINLINE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.PayLineWinIndicator(arg1, arg2, arg3, arg4)));
            return;
        }

        protected function showWinlines(arg1:__AS3__.vec.Vector.<int>, arg2:__AS3__.vec.Vector.<int>, arg3:Number, arg4:int):void
        {
            syndicate(this, SERVICE_SHOW_WINLINE, new mgs.aurora.games.framework.TransportLayer(new mgs.aurora.games.common.dataTypes.PayLineWinIndicator(arg1, arg2, arg3, arg4)));
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_WIN_DISPLAY_SERVER";

        public static const SERVICE_SEQUINCE_COMPLETE:String="SEQUINCE_COMPLETE";

        public static const SERVICE_CLEANUP_COMPLETE:String="CLEANUP_COMPLETE";

        public static const SERVICE_SHOW_SYMBOLS:String="SHOW_SYMBOLS";

        public static const SERVICE_HIDE_SYMBOLS:String="HIDE_SYMBOLS";

        public static const SERVICE_PULSE_SYMBOLS:String="SERVICE_PULSE_SYMBOLS";

        public static const SERVICE_SHOW_WINLINE:String="SHOW_WINLINE";

        public static const SERVICE_HIDE_WINLINE:String="HIDE_WINLINE";

        public static const SERVICE_SHOW_PAYLINE:String="SHOW_PAYLINE";

        public static const SERVICE_HIDE_PAYLINE:String="HIDE_PAYLINE";

        public static const SERVICE_HIDE_ALL_WINLINES:String="HIDE_ALL_WINLINES";

        public static const SERVICE_HIDE_ALL_PAYLINES:String="HIDE_ALL_PAYLINES";

        protected var _hasWinSummaryBeenShown:Boolean=false;

        protected var _numIterationsDisplayed:int;

        protected var _scheduledActions:org.as3lib.kitchensync.action.group.KSSequenceGroup;

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _hasSymbolConfig:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        protected var _allSymbolsInWins:__AS3__.vec.Vector.<int>;

        public var _viewReady:Boolean=false;
    }
}


//            class WinLogicServer
package mgs.aurora.games.logicBlocks.publishers 
{
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    
    public class WinLogicServer extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function WinLogicServer()
        {
            super(mgs.aurora.games.logicBlocks.publishers.WinLogicServer.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.logicBlocks.publishers.WinLogicServer");
            return;
        }

        protected function get canDisplayWins():Boolean
        {
            if (!this.hasWins || this._winsAreBlocked) 
            {
                return false;
            }
            if (this._hasConductor) 
            {
                if (this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.PLAYING_MAIN_GAME || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLING || this._conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_SUSPENDED) 
                {
                    if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.FREESPIN_MODE_COMPLETE) 
                    {
                        return !this._summaryShown;
                    }
                    if (this._conductor.response.slot.state == mgs.aurora.slots.components.enums.SlotStates.STARTING_FREESPIN_MODE) 
                    {
                        return false;
                    }
                    if (this._conductor.response.gamble != null) 
                    {
                        if (this._conductor.response.gamble.gamblesMade > 0) 
                        {
                            return false;
                        }
                        return true;
                    }
                    return true;
                }
                return false;
            }
            return false;
        }

        protected function get hasWins():Boolean
        {
            if (this._conductor.visArea.wins != null) 
            {
                if (this._conductor.visArea.wins.numberOf > 0) 
                {
                    return true;
                }
            }
            return false;
        }

        protected function addDelayTimer():void
        {
            if (this.isReady) 
            {
                if (this._conductor.autoplay.autoPlayActive) 
                {
                    if (this._conductor.options.isQuickSpin) 
                    {
                        this._pause = new org.as3lib.kitchensync.action.KSFunction(this.sendDelayReached, this._conductor.settings.autoplayContiTimeQuickspin);
                    }
                    else 
                    {
                        this._pause = new org.as3lib.kitchensync.action.KSFunction(this.sendDelayReached, this._conductor.settings.autoplayContiTime);
                    }
                    this._pause.start();
                }
                else if (this._conductor.freeSpinsData.isFreespinsActive) 
                {
                    this._pause = new org.as3lib.kitchensync.action.KSFunction(this.sendDelayReached, this._conductor.settings.freespinContiTime);
                    this._pause.start();
                }
            }
            return;
        }

        protected function sendDelayReached():void
        {
            syndicate(this, SERVICE_TIME_DELAY_REACHED);
            return;
        }

        public function get canShow():Boolean
        {
            return true;
        }

        protected function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._viewReady && this._hasSymbolConfig;
        }

        public function defineServices():void
        {
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_START_WIN_DISPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_STOP_WIN_DISPLAY));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_TIME_DELAY_REACHED));
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_HIDE_ALL_WINLINES));
            this.defineSubscribers();
            return;
        }

        protected function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onAllReelStopped, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED, 500);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReelStart, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_REEL_START);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBetChanged, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_BET_CHANGED, 6);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onStartAutoplay, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_START_AUTOPLAY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onViewReady, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.NeoLoadServer.SERVICE_ON_VIEW_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCollect, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_COLLECT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGamble, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_GAMBLE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onGamble, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostGambleAgent.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinComplete, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBoundary, mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DialogAgent.SERVICE_BOUNDARY_NOTICE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesData, mgs.aurora.games.logicBlocks.data.FreeGamesData.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.data.FreeGamesData.SERVICE_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSymbolConfig, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_SYMBOLS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUpdatePaylines, mgs.aurora.games.logicBlocks.publishers.PaylineServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.PaylineServer.SERVICE_UPDATE_PAYLINES);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeSpinSummeryOpen, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.SERVICE_SUMMARY_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDoSpin, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostRespinAgent.SERVICE_RESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDoSpin, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_SPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDoSpin, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.cleanupWins, mgs.aurora.games.logicBlocks.agents.PreSpinCleanupAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PreSpinCleanupAgent.SERVICE_DO_PRESPIN_CLEANUP);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBlockingUpdate, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent.SERVICE_BLOCKING_UPDATE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onUserInterrupt, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.UserInterruptServer.SERVICE_INTERRUPT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRollingReelsStopWin, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_STOP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onDoRollingReelsStepWins, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.RollingReelsAgent.SERVICE_DO_STEP_WINS);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onRequestWinDisplayRestart, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.MovieWinAgent.SERVICE_REQUEST_WIN_DISPLAY_RESTART);
            return;
        }

        public override function dispose():void
        {
            try 
            {
                if (this._pause != null) 
                {
                    if (this._pause.isRunning) 
                    {
                        this._pause.stop();
                    }
                }
                this._pause = null;
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        protected function onViewReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=mgs.aurora.games.common.dataTypes.TransViewReady(arg1.data);
            if (!this._viewReady) 
            {
                this._viewReady = testView(loc1.components);
            }
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function onSymbolConfig(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=new XMLList(arg1.data);
            this._hasSymbolConfig = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        protected function setup():void
        {
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            if (this.canDisplayWins) 
            {
                this.startWins();
            }
            return;
        }

        protected function onFreeGamesClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._hasConductor) 
            {
                if (mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
                {
                    this.onInterrupt();
                }
            }
            return;
        }

        protected function onFreeGamesData(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._hasConductor) 
            {
                if (mgs.aurora.games.common.components.utils.GameHelper.resetWinOnFreeGameSwitch()) 
                {
                    this.onInterrupt();
                }
            }
            return;
        }

        protected function onAllReelStopped(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.canDisplayWins) 
            {
                this.startWins();
                this.addDelayTimer();
            }
            return;
        }

        protected function onDoRollingReelsStepWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.canDisplayWins) 
            {
                this.startWins();
                this.addDelayTimer();
            }
            return;
        }

        protected function onRequestWinDisplayRestart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this.canDisplayWins) 
            {
                this.startWins();
                this.addDelayTimer();
            }
            return;
        }

        protected function onUpdatePaylines(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onBlockingUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (arg1.data) 
            {
                this.blockWins();
            }
            else 
            {
                this.unblockWins();
            }
            return;
        }

        protected function blockWins():void
        {
            this.onInterrupt();
            this._winsAreBlocked = true;
            return;
        }

        protected function unblockWins():void
        {
            if (this._winsAreBlocked) 
            {
                this._winsAreBlocked = false;
                this.sendDelayReached();
            }
            return;
        }

        protected function cleanupWins(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onFreeSpinComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onGamble(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onBetChanged(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onBetUpdate(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            return;
        }

        protected function onBoundary(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onCollect(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onStartAutoplay(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onFreeSpinsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onFreeSpinSummeryOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._summaryShown = true;
            this.onInterrupt();
            return;
        }

        protected function onReelStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._summaryShown = false;
            return;
        }

        protected function onDoSpin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onRollingReelsStopWin(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this.onInterrupt();
            return;
        }

        protected function onUserInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=this._conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPIN_BONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPIN_BONUS:
                {
                    if (this._conductor.response.id.verb != mgs.aurora.slots.components.enums.Verbs.REFRESH) 
                    {
                        this.onInterrupt();
                    }
                    break;
                }
            }
            return;
        }

        protected function onInterrupt(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!this._doingWinDisplay) 
            {
                return;
            }
            if (this._pause != null) 
            {
                if (this._pause.isRunning) 
                {
                    this._pause.stop();
                    this.sendDelayReached();
                }
            }
            if (this._winsAreBlocked) 
            {
                return;
            }
            this._doingWinDisplay = false;
            syndicate(this, SERVICE_STOP_WIN_DISPLAY);
            return;
        }

        protected function startWins():void
        {
            this._doingWinDisplay = true;
            syndicate(this, SERVICE_START_WIN_DISPLAY);
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_WIN_LOGIC_SERVER";

        public static const SERVICE_START_WIN_DISPLAY:String="START_WIN_DISPLAY";

        public static const SERVICE_STOP_WIN_DISPLAY:String="STOP_WIN_DISPLAY";

        public static const SERVICE_TIME_DELAY_REACHED:String="TIME_DELAY_REACHED";

        public static const SERVICE_HIDE_ALL_WINLINES:String="HIDE_ALL_WINLINES";

        protected var _isConfig:Boolean=false;

        protected var _hasConductor:Boolean=false;

        protected var _viewReady:Boolean=false;

        protected var _hasSymbolConfig:Boolean=false;

        protected var _summaryShown:Boolean=true;

        protected var _pause:org.as3lib.kitchensync.action.KSFunction;

        protected var _winsAreBlocked:Boolean=false;

        protected var _doingWinDisplay:Boolean=false;

        protected var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;
    }
}


//          package subscribers
//            class DebugSubscriber
package mgs.aurora.games.logicBlocks.subscribers 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import flash.system.*;
    import flash.text.*;
    import flash.utils.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.tip.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class DebugSubscriber extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function DebugSubscriber(arg1:String="DEBUG_SUBSCRIBER")
        {
            this._color = [14461697, 16697358, 16700743, 1179409, 5242703, 7995257];
            super(arg1);
            setClassDescription("mgs.aurora.games.logicBlocks.subscribers.DebugSubscriber");
            this._transportDict = {};
            this._transportList = new Vector.<Object>();
            this._int = 0;
            this._align = this.ALIGN_MIDDLE;
            return;
        }

        public function defineServices():void
        {
            return;
        }

        public function defineSubscriptions():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.generateButtons, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.DrawLayersAgent.SERVICE_DRAWLAYERS);
            return;
        }

        public function addCustomService(arg1:String, arg2:String, arg3:mgs.aurora.games.framework.ITransportLayer=null, arg4:String=null):void
        {
            var loc1:*=mgs.aurora.games.framework.Broker.instance.publisherByName(arg1) as mgs.aurora.games.framework.server.Publisher;
            this._transportDict["id" + this._int] = {};
            this._transportDict["id" + this._int].publisher = arg1;
            this._transportDict["id" + this._int].service = arg2;
            this._transportDict["id" + this._int].transport = arg3;
            this._transportDict["id" + this._int].description = arg4;
            this._transportDict["id" + this._int].name = "id" + this._int;
            this._transportList.push(this._transportDict["id" + this._int]);
            var loc2:*;
            var loc3:*=((loc2 = this)._int + 1);
            loc2._int = loc3;
            if (!loc1.isService(arg2)) 
            {
                mgs.aurora.games.framework.Broker.instance.addServicesToPublisher(loc1, new mgs.aurora.games.framework.server.ServiceLayer(mgs.aurora.games.framework.Broker.instance.publisherByName(arg1), arg2));
            }
            return;
        }

        public function get align():String
        {
            return this._align;
        }

        public function set align(arg1:String):void
        {
            this._align = arg1;
            return;
        }

        protected function generateButtons(arg1:mgs.aurora.games.framework.ITransportLayer):void
        {
            var loc7:*=0;
            var loc8:*=null;
            var loc9:*=NaN;
            var loc10:*=NaN;
            var loc11:*=NaN;
            var loc12:*=NaN;
            var loc1:*=mgs.aurora.games.framework.StageReference.getLevel("Debug") as flash.display.Sprite;
            loc1.alpha = 0.1;
            var loc2:*=new flash.display.Sprite();
            loc2.name = name;
            loc1.addChild(loc2);
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            while (loc6 < this._transportList.length) 
            {
                loc7 = this._color[loc6 % this._color.length];
                (loc8 = this.makeButton(this._transportList[loc6].name, loc7)).addEventListener(flash.events.MouseEvent.CLICK, this.makeithappen);
                loc8.addEventListener(flash.events.MouseEvent.MOUSE_OVER, this.showTooltip);
                loc8.addEventListener(flash.events.MouseEvent.MOUSE_OUT, this.hideTooltip);
                this._transportDict[this._transportList[loc6].name].button = loc8;
                loc2.addChild(loc8);
                loc9 = loc8.width;
                loc10 = loc8.height;
                loc11 = 1024;
                loc12 = 600;
                var loc13:*=this._align;
                switch (loc13) 
                {
                    case this.ALIGN_TOP:
                    case this.ALIGN_BOTTOM:
                    {
                        if (loc4 > loc11 - loc9 * 2) 
                        {
                            loc3 = 0;
                            loc5 = loc5 + (loc10 + 5);
                        }
                        loc4 = (loc9 + 5) * loc3;
                        break;
                    }
                    case this.ALIGN_MIDDLE:
                    {
                        if (loc4 > 500 - loc9 * 2) 
                        {
                            loc3 = 0;
                            loc5 = loc5 + (loc10 + 5);
                        }
                        loc4 = (loc9 + 5) * loc3;
                        break;
                    }
                    case this.ALIGN_LEFT:
                    case this.ALIGN_RIGHT:
                    {
                        if (loc5 > loc12 - loc10 * 3) 
                        {
                            loc3 = 0;
                            loc4 = loc4 + (loc9 + 5);
                        }
                        loc5 = (loc10 + 5) * loc3;
                        break;
                    }
                }
                loc8.x = loc4;
                loc8.y = loc5;
                loc13 = this._align;
                switch (loc13) 
                {
                    case this.ALIGN_TOP:
                    {
                        loc2.y = 40;
                        loc2.x = loc11 / 2 - loc2.width / 2;
                        break;
                    }
                    case this.ALIGN_BOTTOM:
                    {
                        loc2.y = loc12 - loc2.height;
                        loc2.x = loc11 / 2 - loc2.width / 2;
                        break;
                    }
                    case this.ALIGN_MIDDLE:
                    {
                        loc2.x = loc11 / 2 - loc2.width / 2;
                        loc2.y = loc12 / 2 - loc2.height / 2;
                        break;
                    }
                    case this.ALIGN_LEFT:
                    {
                        loc2.x = 20;
                        loc2.y = loc12 / 2 - loc2.height / 2;
                        break;
                    }
                    case this.ALIGN_RIGHT:
                    {
                        loc2.x = loc11 - loc2.width - 10;
                        loc2.y = loc12 / 2 - loc2.height / 2;
                        break;
                    }
                }
                ++loc3;
                ++loc6;
            }
            return;
        }

        internal function showTooltip(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=this._transportDict[arg1.target.name];
            if (loc1.description != null) 
            {
                mgs.aurora.games.framework.tip.ToolTipController.showToolTip(loc1.description);
            }
            caurina.transitions.Tweener.removeTweens(mgs.aurora.games.framework.StageReference.getLevel("Debug"));
            caurina.transitions.Tweener.addTween(mgs.aurora.games.framework.StageReference.getLevel("Debug"), {"alpha":1, "time":0.2});
            return;
        }

        internal function hideTooltip(arg1:flash.events.MouseEvent):void
        {
            mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
            caurina.transitions.Tweener.removeTweens(mgs.aurora.games.framework.StageReference.getLevel("Debug"));
            caurina.transitions.Tweener.addTween(mgs.aurora.games.framework.StageReference.getLevel("Debug"), {"alpha":0.1, "time":1, "delay":1});
            return;
        }

        internal function makeButton(arg1:String, arg2:uint):flash.display.SimpleButton
        {
            var loc1:*=new flash.display.SimpleButton();
            var loc2:*;
            (loc2 = new flash.display.Sprite()).graphics.lineStyle(1, 16777215);
            loc2.graphics.beginFill(arg2, 1);
            loc2.graphics.drawRect(0, 0, 150, 30);
            loc2.cacheAsBitmap = true;
            var loc3:*;
            (loc3 = new flash.text.TextField()).width = 150;
            loc3.height = 30;
            loc3.wordWrap = false;
            loc3.selectable = false;
            var loc4:*;
            (loc4 = new flash.text.TextFormat()).font = "Arial";
            loc4.color = 0;
            loc4.size = 8;
            loc4.bold = false;
            loc4.align = "center";
            loc3.defaultTextFormat = loc4;
            loc3.text = arg1 + ":" + this._transportDict[arg1].publisher + "\n (" + this._transportDict[arg1].service + ")";
            loc2.addChild(loc3);
            loc1.upState = loc2;
            loc1.downState = loc2;
            loc1.overState = loc2;
            loc1.useHandCursor = true;
            loc1.hitTestState = loc2;
            loc1.name = arg1;
            return loc1;
        }

        internal function makeithappen(arg1:flash.events.Event):void
        {
            var loc9:*=null;
            var loc1:*=this._transportDict[arg1.target.name];
            var loc2:*=mgs.aurora.games.framework.Broker.instance.publisherByName(loc1.publisher);
            var loc3:*=loc1.service;
            var loc4:*;
            if ((loc4 = loc1.transport) != null) 
            {
                if (typeof loc4.data == "function") 
                {
                    loc9 = loc4.data as Function;
                    loc4 = new mgs.aurora.games.framework.TransportLayer(loc9.call());
                }
            }
            var loc5:*=flash.system.System.totalMemory;
            var loc6:*=flash.utils.getTimer();
            mgs.aurora.games.framework.Diplomat.syndicate(loc2, loc3, loc4);
            var loc7:*=flash.utils.getTimer();
            var loc8:*=flash.system.System.totalMemory;
            _trace("Syndication for service [" + loc1.publisher + "] took " + (loc7 - loc6) + "ms to execute and used " + (loc8 - loc5) / 1024 + " kb.", "test", this, 8388863);
            return;
        }

        public override function dispose():void
        {
            var i:String;

            var loc1:*;
            i = null;
            try 
            {
                loc2 = 0;
                var loc3:*=this._transportDict;
                for (i in loc3) 
                {
                    this._transportDict[i].button.removeEventListener(flash.events.MouseEvent.CLICK, this.makeithappen);
                    this._transportDict[i].button.removeEventListener(flash.events.MouseEvent.MOUSE_OVER, this.showTooltip);
                    this._transportDict[i].button.removeEventListener(flash.events.MouseEvent.MOUSE_OUT, this.hideTooltip);
                    delete this._transportDict[i];
                    this._transportDict[i] = null;
                }
                this._transportList = null;
                this._transportDict = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            this._transportDict = null;
            super.dispose();
            return;
        }

        public const ALIGN_TOP:String="top";

        public const ALIGN_LEFT:String="left";

        public const ALIGN_RIGHT:String="right";

        public const ALIGN_BOTTOM:String="bottom";

        public const ALIGN_MIDDLE:String="middle";

        internal var _transportDict:Object;

        internal var _transportList:__AS3__.vec.Vector.<Object>;

        internal var _int:uint;

        internal var _align:String;

        internal var _color:Array;
    }
}


//        package slots
//          package ImmortalRomance
//            class ImmortalRomance
package mgs.aurora.games.slots.ImmortalRomance 
{
    import com.jac.mouse.*;
    import flash.display.*;
    import mgs.aurora.api.interfaces.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.games.slots.agents.*;
    import mgs.aurora.slots.components.paytable.helpers.*;
    
    public final class ImmortalRomance extends mgs.aurora.games.framework.KickStart implements mgs.aurora.games.framework.IKickStart, mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function ImmortalRomance()
        {
            super();
            setClassDescription("mgs.aurora.games.slots.ImmortalRomance.ImmortalRomance");
            return;
        }

        public override function registerPublishers():void
        {
            super.registerPublishers();
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.DialogAgent.PUBLISHER_NAME);
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.DialogAgent2());
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.GambleServer.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.MessengerAgent.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.PostRespinAgent.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.RespinAgent.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.BetChangedDialogAgent.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.PaylineServer.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.DynamicMiniPaytableServer.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.DynamicPaytableServer.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.ReelsServer.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME);
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.publishers.RequestServer.PUBLISHER_NAME);
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostBackgroundClickAgent());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceWayWinDisplayServer());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.ProgressPickXofY());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.PostWinDisplayBlockingAgent());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.MovieWinAgent());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.CoinRush());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.AchievementsDataManager());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.AchievementNotification());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.SlotBackgroundAgent());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.WildReelsAgent());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceReelsServer());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceDynamicPaytableServer());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.ReelAnticipationAgent());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.TroyBats());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.SarahVines());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceSymbolServer());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.agents.NarratorSoundAgent());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.TroyBatsSoundAgent());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.WildVinesSoundAgent());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.WildReelsSoundAgent());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.ImmortalRomanceCustomModalRule());
            _broker.registerPublisher(new mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceRequestServer());
            _broker.registerPublisher(new mgs.aurora.slots.components.paytable.helpers.ConsoleBreakoutSwappingAgent());
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.PostBonusAgent.PUBLISHER_NAME);
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.ImmortalRomancePostBonusAgent());
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.ImmortalRomanceTransitionAgent());
            _broker.unRegisterPublisher(mgs.aurora.games.logicBlocks.agents.BaseGameSoundAgent.PUBLISHER_NAME);
            _broker.registerPublisher(new mgs.aurora.games.slots.agents.ImmortalRomanceBaseGameSoundAgent());
            return;
        }

        public override function setup(arg1:mgs.aurora.api.interfaces.IAuroraApi, arg2:flash.display.DisplayObjectContainer):void
        {
            com.jac.mouse.MouseWheelEnabler.init(arg2.stage);
            super.setup(arg1, arg2);
            return;
        }
    }
}


//            class ImmortalRomanceEntry
package mgs.aurora.games.slots.ImmortalRomance 
{
    import flash.events.*;
    import mgs.aurora.moduleBase.*;
    
    public class ImmortalRomanceEntry extends mgs.aurora.moduleBase.ModuleBase
    {
        public function ImmortalRomanceEntry()
        {
            super();
            return;
        }

        protected override function init(arg1:flash.events.Event=null):void
        {
            super._moduleMain = new mgs.aurora.games.slots.ImmortalRomance.ImmortalRomance();
            super.init(arg1);
            return;
        }

        protected override function getModuleName():String
        {
            return ImmortalRomanceEntry.NAME;
        }

        public static const NAME:String="ImmortalRomance";
    }
}


class ProductInformation extends Object
{
    public function ProductInformation()
    {
        super();
        return;
    }

    
    {
        v_versionid = "5.10136.5";
        v_copyright = "copyright (c) Microgaming 2011";
        v_product = "Aurora";
        v_gameName = "ImmortalRomance";
    }

    public static var v_versionid:String="5.10136.5";

    public static var v_copyright:String="copyright (c) Microgaming 2011";

    public static var v_product:String="Aurora";

    public static var v_gameName:String="ImmortalRomance";
}

//          package agents
//            class ImmortalRomanceBaseGameSoundAgent
package mgs.aurora.games.slots.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class ImmortalRomanceBaseGameSoundAgent extends mgs.aurora.games.logicBlocks.agents.BaseGameSoundAgent
    {
        public function ImmortalRomanceBaseGameSoundAgent()
        {
            super();
            setClassDescription("mgs.aurora.games.slots.agents.ImmortalRomanceBaseGameSoundAgent");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFSTransitionStart, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT);
            return;
        }

        protected function onFSTransitionStart(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            var loc1:*=SND_GAME_SUMMARY_FS + "_" + _conductor.view.getFreeSpinsUniqueId();
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(loc1, mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            this.playAppropriateBackgroundSound();
            return;
        }

        protected override function playAppropriateBackgroundSound():void
        {
            _trace("playAppropriateBackgroundSound()");
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().updateOptions();
            var loc1:*=_conductor.state.state;
            switch (loc1) 
            {
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_GAMBLE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COLLECT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTERBONUS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_AFTER_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_SUMMARY:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.GAMBLE_WIN:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.BONUS_SUMMARY:
                {
                    setActiveBackgroundSound(SND_BACKGROUND);
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_STARTING_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_REFRESH:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_STARTING_FREESPINS:
                {
                    setActiveBackgroundSound(SND_BACKGROUND + "_" + _conductor.view.view);
                    break;
                }
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT_FREESPINS_COMPLETE:
                case mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT_FREESPINS_COMPLETE:
                {
                    setActiveBackgroundSound(SND_BACKGROUND);
                    break;
                }
            }
            return;
        }
    }
}


//            class ImmortalRomanceCustomModalRule
package mgs.aurora.games.slots.agents 
{
    import flash.display.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class ImmortalRomanceCustomModalRule extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber, mgs.aurora.games.framework.userInterface.IPublisher, mgs.aurora.games.framework.IActor
    {
        public function ImmortalRomanceCustomModalRule()
        {
            super(mgs.aurora.games.slots.agents.ImmortalRomanceCustomModalRule.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.slots.agents.ImmortalRomanceCustomModalRule");
            return;
        }

        public function defineServices():void
        {
            this.defineSubscribers();
            return;
        }

        internal function defineSubscribers():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onReady, mgs.aurora.games.logicBlocks.agents.ConductorAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConductorAgent.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onModalsReady, mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.SERVICE_READY);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onNewModalServed, mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.SERVICE_NEW_MODAL);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFSTrigger, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.DynamicFreeSpinsServer.SERVICE_FREESPIN_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onSpinComplete, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostReelsAgent.SERVICE_ALL_REELS_STOPPED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onCoinsCredits, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostConsoleAgent.SERVICE_COINS_CREDITS);
            return;
        }

        internal function onReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._conductor = arg1.data;
            this._hasConductor = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            return;
        }

        internal function onModalsReady(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._configDone = true;
            if (this.canConfig) 
            {
                this.setup();
            }
            this._firstFSBlankModal = true;
            return;
        }

        internal function onNewModalServed(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            if (this.isReady) 
            {
                this._spinCount = 0;
                this._firstFSBlankModal = false;
                var loc4:*=arg1.data;
                switch (loc4) 
                {
                    case "winDuringFreeSpins":
                    case "winDuringBonus":
                    case "wild":
                    case "winUpTo":
                    {
                        this._lastRandomShown = arg1.data;
                        break;
                    }
                }
                this._currentShown = arg1.data;
                loc1 = mgs.aurora.games.framework.StageReference.getLevel("Modals").getChildByName(arg1.data) as flash.display.MovieClip;
                loc2 = loc1.getChildByName("modalParent") as flash.display.MovieClip;
                if (arg1.data == "winUpTo") 
                {
                    if (this._conductor.options.displayAsCoins) 
                    {
                        loc2.gotoAndStop("coins");
                        loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField("ModalHeaderBonusNumCoins");
                    }
                    else 
                    {
                        loc2.gotoAndStop("credits");
                        loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField("ModalHeaderBonusNumCredits");
                    }
                    loc3.addTo(loc2.getChildByName("modalNums") as flash.display.MovieClip);
                    loc3.text = "3645000";
                }
            }
            return;
        }

        internal function onCoinsCredits(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            if (this._currentShown == "winUpTo") 
            {
                loc1 = mgs.aurora.games.framework.StageReference.getLevel("Modals").getChildByName(this._currentShown) as flash.display.MovieClip;
                loc2 = loc1.getChildByName("modalParent") as flash.display.MovieClip;
                if (loc5 = (loc4 = loc2.getChildByName("modalNums") as flash.display.MovieClip).getChildByName("ModalHeaderBonusNumCoins")) 
                {
                    loc4.removeChild(loc5);
                }
                if (loc5 = loc4.getChildByName("ModalHeaderBonusNumCredits")) 
                {
                    loc4.removeChild(loc5);
                }
                if (this._conductor.options.displayAsCoins) 
                {
                    loc2.gotoAndStop("coins");
                    loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField("ModalHeaderBonusNumCoins");
                }
                else 
                {
                    loc2.gotoAndStop("credits");
                    loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField("ModalHeaderBonusNumCredits");
                }
                loc3.addTo(loc2.getChildByName("modalNums") as flash.display.MovieClip);
                loc3.text = "3645000";
            }
            return;
        }

        internal function setup():void
        {
            var loc1:*;
            if (this._isConfig) 
            {
                return;
            }
            this._isConfig = true;
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("winDuringFreeSpins").method = function ():Boolean
            {
                return false;
            }
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("winDuringFreeSpins").randomRule = this.winDuringFreeSpinsCheck;
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("winDuringBonus").method = function ():Boolean
            {
                return false;
            }
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("winDuringBonus").randomRule = this.winDuringBonusCheck;
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("wild").method = function ():Boolean
            {
                return false;
            }
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("wild").randomRule = this.wildCheck;
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("winUpTo").method = function ():Boolean
            {
                return false;
            }
            mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.publishers.ModalHeaderServer.PUBLISHER_NAME)).getRuleById("winUpTo").randomRule = this.winUptoCheck;
            return;
        }

        internal function winDuringBonusCheck():Boolean
        {
            return this.winUpTo("winDuringBonus");
        }

        internal function winDuringFreeSpinsCheck():Boolean
        {
            return this.winUpTo("winDuringFreeSpins");
        }

        internal function wildCheck():Boolean
        {
            return this.winUpTo("wild");
        }

        internal function winUptoCheck():Boolean
        {
            return this.winUpTo("winUpTo");
        }

        internal function winUpTo(arg1:String):Boolean
        {
            if (this.isReady && this.canShow) 
            {
                try 
                {
                    if (this._conductor.options.isQuickSpin && this._conductor.autoplay.autoPlayActive) 
                    {
                        return false;
                    }
                    if (this._lastRandomShown == arg1) 
                    {
                        return false;
                    }
                    if (this._conductor.freeSpinsData.isFreespinsActive) 
                    {
                        return false;
                    }
                    if (this._spinCount < 2) 
                    {
                        return false;
                    }
                    return true;
                }
                catch (e:Error)
                {
                };
            }
            return false;
        }

        internal function onSpinComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._spinCount + 1);
            loc1._spinCount = loc2;
            return;
        }

        internal function onFSTrigger(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            this._firstFSBlankModal = true;
            this._spinCount = 0;
            return;
        }

        public function get canShow():Boolean
        {
            var loc1:*=false;
            if (this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.FREEGAME_SLOT || this._conductor.state.state == mgs.aurora.games.logicBlocks.agents.GameStateAgent.SLOT) 
            {
                loc1 = true;
            }
            return loc1;
        }

        public function get canDo():Boolean
        {
            return true;
        }

        public function get isReady():Boolean
        {
            return this._isConfig;
        }

        public function get canConfig():Boolean
        {
            return !this._isConfig && this._hasConductor && this._configDone;
        }

        public override function dispose():void
        {
            try 
            {
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_ImmortalRomanceCustomModalRule";

        internal var _isConfig:Boolean=false;

        internal var _hasConductor:Boolean=false;

        internal var _configDone:Boolean=false;

        internal var _hasConfigXML:Boolean=false;

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _lastRandomShown:String;

        internal var _currentShown:String;

        internal var _spinCount:uint=0;

        internal var _firstFSBlankModal:Boolean=false;
    }
}


//            class ImmortalRomancePostBonusAgent
package mgs.aurora.games.slots.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class ImmortalRomancePostBonusAgent extends mgs.aurora.games.logicBlocks.agents.PostBonusAgent
    {
        public function ImmortalRomancePostBonusAgent()
        {
            super();
            setClassDescription("mgs.aurora.games.slots.agents.ImmortalRomancePostBonusAgent");
            return;
        }

        protected override function defineSubscriptions():void
        {
            super.defineSubscriptions();
            mgs.aurora.games.framework.Diplomat.subscribe(this, onBonusComplete, mgs.aurora.games.slots.agents.ProgressPickXofY.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BonusServer.SERVICE_COMPLETE);
            mgs.aurora.games.framework.Diplomat.subscribe(this, onOpen, mgs.aurora.games.slots.agents.ProgressPickXofY.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BonusServer.SERVICE_OPEN);
            mgs.aurora.games.framework.Diplomat.subscribe(this, onSoundAction, mgs.aurora.games.slots.agents.ProgressPickXofY.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BonusServer.SERVICE_SND_ACTION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, onPick, mgs.aurora.games.slots.agents.ProgressPickXofY.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.BonusServer.SERVICE_PICK);
            return;
        }
    }
}


//            class ImmortalRomanceTransitionAgent
package mgs.aurora.games.slots.agents 
{
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class ImmortalRomanceTransitionAgent extends mgs.aurora.games.logicBlocks.agents.TransitionAgent
    {
        public function ImmortalRomanceTransitionAgent()
        {
            super();
            setClassDescription("mgs.aurora.games.slots.agents.ImmortalRomanceTransitionAgent");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, onServiceOpenSyndication, mgs.aurora.games.slots.agents.ProgressPickXofY.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT);
            mgs.aurora.games.framework.Diplomat.subscribe(this, onServiceOpenSyndication, mgs.aurora.games.logicBlocks.agents.FreeSpinSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.TransitionAgent.SERVICE_TRANSITION_START_POINT);
            return;
        }
    }
}


//            class ProgressPickXofY
package mgs.aurora.games.slots.agents 
{
    import caurina.transitions.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.agents.BonusGameTypes.*;
    import mgs.aurora.games.logicBlocks.data.types.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.achievements.*;
    import mgs.aurora.slots.components.enums.*;
    import org.as3lib.kitchensync.action.*;
    
    public class ProgressPickXofY extends mgs.aurora.games.logicBlocks.agents.BonusGameTypes.SimplePickXofYBonusAgent
    {
        public function ProgressPickXofY()
        {
            this._goldStatusButtons = [];
            this._unlockDialogueLevels = [];
            super();
            _publisherName = mgs.aurora.games.slots.agents.ProgressPickXofY.PUBLISHER_NAME;
            setClassDescription("mgs.aurora.games.slots.agents.ProgressPickXofY");
            return;
        }

        protected override function enableItemPickButtons():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            if (this.isGoldStatus) 
            {
                loc1 = 0;
                while (loc1 < this._goldStatusButtons.length) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1]).enableInteraction(true);
                    ++loc1;
                }
                loc2 = bonusData.picksNumberOf;
                loc3 = 0;
                while (loc3 < loc2) 
                {
                    loc4 = bonusData.bonusPicks.picks[loc3].item;
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4]).enableInteraction(false);
                    ++loc3;
                }
            }
            else 
            {
                super.enableItemPickButtons();
            }
            return;
        }

        protected override function updateButtonsOnPick():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=null;
            if (this.isGoldStatus) 
            {
                loc1 = bonusData.picksNumberOf;
                loc2 = 0;
                while (loc2 < loc1) 
                {
                    loc3 = bonusData.bonusPicks.picks[loc2];
                    if (isPickAgainResult(loc3.result[0].id)) 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc3.item]).processResult_win(getWinValueString(loc3.totalWin), true);
                    }
                    else if (isWinAllResult(loc3.result[0].id)) 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc3.item]).processResult_winAll(getWinValueString(loc3.totalWin), true);
                    }
                    else 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc3.item]).processResult_win(getWinValueString(loc3.totalWin), true);
                    }
                    ++loc2;
                }
            }
            else 
            {
                super.updateButtonsOnPick();
            }
            return;
        }

        protected function get isGoldStatus():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.agents.AchievementsDataManager(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME));
            return loc1.isCompleteByName(this._goldStatusAchievementName);
        }

        protected function get isGoldStatusJustTriggered():Boolean
        {
            var loc1:*=mgs.aurora.games.logicBlocks.agents.AchievementsDataManager(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME));
            var loc2:*=_currentbonusState == BONUS_STATE_REFRESH_COMPLETE || _currentbonusState == BONUS_STATE_REFRESH;
            return loc1.wasJustAwardedByName(this._goldStatusAchievementName) && !loc2;
        }

        protected override function onBonusStart():void
        {
            super.onBonusStart();
            return;
        }

        protected function DoIntroDialogue():void
        {
            var loc5:*=0;
            var loc6:*=0;
            var loc1:*=mgs.aurora.games.logicBlocks.agents.AchievementsDataManager(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME));
            var loc2:*=loc1.tokensCollectedByName(this._goldStatusAchievementName) == 1;
            var loc3:*=this.isGoldStatusJustTriggered;
            var loc4:*=loc1.tokensCollectedByName(this._goldStatusAchievementName);
            if (loc2) 
            {
                this._doingIntro = true;
                doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_DIALOGUE_FIRST), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, false, this.DoneIntroDialogue));
            }
            else if (loc3) 
            {
                doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_DIALOGUE_GOLD_AWARDED), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            }
            else 
            {
                loc5 = 0;
                while (loc5 < this._unlockDialogueLevels.length) 
                {
                    if ((loc6 = this._unlockDialogueLevels[loc5]) == loc4) 
                    {
                        doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction(makeUniqueBonusString(SND_DIALOGUE_UNLOCK + "_" + loc6.toString()), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
                    }
                    ++loc5;
                }
            }
            return;
        }

        protected function DoneIntroDialogue(... rest):void
        {
            if (!isReady) 
            {
                return;
            }
            this._doingIntro = false;
            return;
        }

        protected function fadeOutIntroDialogue():void
        {
            var loc1:*=mgs.aurora.games.logicBlocks.agents.AchievementsDataManager(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME));
            this._doingIntro = false;
            var loc2:*=1000;
            doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createSetVolumeOverTimeAction(makeUniqueBonusString(SND_DIALOGUE_FIRST), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, 100, 0, loc2));
            new org.as3lib.kitchensync.action.KSFunction(this.stopIntroDialogue, loc2).start();
            return;
        }

        protected function stopIntroDialogue():void
        {
            doSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction(makeUniqueBonusString(SND_DIALOGUE_FIRST), mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        protected override function cleanupComplete():void
        {
            super.cleanupComplete();
            if (this._goldStatusBackground) 
            {
                if (this._goldStatusBackground.parent) 
                {
                    this._goldStatusBackground.parent.removeChild(this._goldStatusBackground);
                }
                this._goldStatusBackground = null;
            }
            if (this._goldStatusForeground) 
            {
                if (this._goldStatusForeground.parent) 
                {
                    this._goldStatusForeground.parent.removeChild(this._goldStatusForeground);
                }
                this._goldStatusForeground = null;
            }
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onFreeGamesClose, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FreeGameSummaryAgent.SERVICE_SCREEN_CLOSED);
            return;
        }

        protected override function setupBonusSpecificData():void
        {
            var str:String;
            var backgroundName:String;
            var foregroundName:String;
            var barName:String;
            var barX:int;
            var barY:int;
            var levels:String;
            var backgroundFadeName:String;
            var bar:flash.display.MovieClip;

            var loc1:*;
            str = null;
            backgroundName = null;
            foregroundName = null;
            barName = null;
            barX = 0;
            barY = 0;
            levels = null;
            backgroundFadeName = null;
            bar = null;
            super.setupBonusSpecificData();
            str = makeUniqueBonusString("background_gold");
            var loc3:*=0;
            var loc4:*=_xmlData.settings.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            backgroundName = loc2.@val.toString();
            if (backgroundName != "") 
            {
                this._goldStatusBackground = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(backgroundName);
            }
            str = makeUniqueBonusString("foreground_gold");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            foregroundName = loc2.@val.toString();
            if (foregroundName != "") 
            {
                this._goldStatusForeground = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(foregroundName);
            }
            str = makeUniqueBonusString("progressBar");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            barName = loc2.@val.toString();
            str = makeUniqueBonusString("progressBar_xPos");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            barX = int(loc2.@val.toString());
            str = makeUniqueBonusString("progressBar_yPos");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            barY = int(loc2.@val.toString());
            str = makeUniqueBonusString("gold_status_achievement");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._goldStatusAchievementName = loc2.@val.toString();
            if (!(barName == "") && !this._progressBar) 
            {
                bar = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(barName);
                if (bar) 
                {
                    this._progressBar = new mgs.aurora.slots.components.achievements.AchievementProgressBar(bar, _bonusLayer, barX, barY, this._goldStatusAchievementName);
                }
            }
            str = makeUniqueBonusString("unlockDialogueLevels");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            levels = loc2.@val.toString();
            if (levels != "") 
            {
                this._unlockDialogueLevels = levels.split(",");
            }
            str = makeUniqueBonusString("background_fade");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            backgroundFadeName = loc2.@val.toString();
            if (backgroundFadeName != "") 
            {
                this._backgroundFade = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(backgroundFadeName);
            }
            str = makeUniqueBonusString("background_fade_start_time");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._backgroundFadeStartTime = int(loc2.@val.toString());
            str = makeUniqueBonusString("background_fade_time");
            loc3 = 0;
            loc4 = _xmlData.settings.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("id") == str) 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._backgroundFadeTime = int(loc2.@val.toString());
            return;
        }

        protected function createGoldStatusPickButtonForItem(arg1:int):mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton
        {
            return new mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(_activeBonusId, arg1, _xmlData, _showPickWinAmount, _bonusLayer, _fontResLinkage, _fontName, _fontYOffsetSpecialWin, this.itemButtonClick, onProcessButtonPickResultComplete, itemButtonRollover, "gold");
        }

        protected override function showBackground(arg1:Boolean):void
        {
            if (this.isGoldStatus) 
            {
                if (this._goldStatusBackground != null) 
                {
                    if (arg1) 
                    {
                        if (this._goldStatusBackground.parent == null) 
                        {
                            mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer).addChild(this._goldStatusBackground);
                        }
                    }
                    else if (this._goldStatusBackground.parent != null) 
                    {
                        this._goldStatusBackground.parent.removeChild(this._goldStatusBackground);
                    }
                }
            }
            else 
            {
                super.showBackground(arg1);
            }
            return;
        }

        protected override function onBonusRefresh():void
        {
            super.onBonusRefresh();
            if (_currentbonusState == BONUS_STATE_REFRESH_COMPLETE && _showCompleteResultsOnRefresh || _currentbonusState == BONUS_STATE_REFRESH) 
            {
                if (this._progressBar) 
                {
                    this._progressBar.Show(true, false, this.isGoldStatus);
                }
            }
            if (!_conductor.freeGamesData.isFreeGameActive) 
            {
                this.DoIntroDialogue();
            }
            return;
        }

        protected function onFreeGamesClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (_currentbonusState != BONUS_STATE_INACTIVE) 
            {
                this.DoIntroDialogue();
            }
            return;
        }

        protected override function onTransitionComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (isWaitingForTransitionToReturn) 
            {
                if (!this.isGoldStatus || this.isGoldStatusJustTriggered) 
                {
                    if (this._progressBar) 
                    {
                        this._progressBar.Show(true, false, this.isGoldStatus && !this.isGoldStatusJustTriggered);
                    }
                }
                this.DoIntroDialogue();
                super.onTransitionComplete(arg1);
                if (this.isGoldStatusJustTriggered) 
                {
                    caurina.transitions.Tweener.addTween(this._backgroundFade, {"alpha":0, "delay":this._backgroundFadeStartTime / 1000, "time":this._backgroundFadeTime / 1000, "onComplete":this.removeFade, "transition":"linear"});
                }
            }
            return;
        }

        protected function removeFade():void
        {
            if (this._backgroundFade.parent) 
            {
                this._backgroundFade.parent.removeChild(this._backgroundFade);
            }
            return;
        }

        protected override function showForeground(arg1:Boolean):void
        {
            if (this.isGoldStatus) 
            {
                if (this._goldStatusForeground != null) 
                {
                    if (arg1) 
                    {
                        if (this._goldStatusForeground.parent == null) 
                        {
                            mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer).addChild(this._goldStatusForeground);
                        }
                    }
                    else if (this._goldStatusForeground.parent != null) 
                    {
                        this._goldStatusForeground.parent.removeChild(this._goldStatusForeground);
                    }
                }
                if (this.isGoldStatusJustTriggered) 
                {
                    if (arg1 && !(this._backgroundFade == null)) 
                    {
                        mgs.aurora.games.framework.StageReference.getLevel(_bonusLayer).addChild(this._backgroundFade);
                    }
                }
                if (this._progressBar) 
                {
                    this._progressBar.Show(arg1, true, !this.isGoldStatusJustTriggered);
                }
            }
            else 
            {
                super.showForeground(arg1);
                if (this._progressBar) 
                {
                    this._progressBar.Show(arg1, true);
                }
            }
            return;
        }

        protected override function updateButtonStatesOnRefresh():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            if (this.isGoldStatus) 
            {
                loc1 = bonusData.picksNumberOf;
                loc2 = lastPlayerMadePickIndex;
                loc3 = 0;
                while (loc3 < loc1) 
                {
                    loc4 = bonusData.bonusPicks.picks[loc3];
                    if (loc3 < loc2) 
                    {
                        if (isWinAllResult(loc4.result[0].id)) 
                        {
                            mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4.item]).processResult_winAll(getWinValueString(loc4.totalWin), true);
                        }
                        else 
                        {
                            mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4.item]).processResult_win(getWinValueString(loc4.totalWin), true);
                        }
                    }
                    else if (isPickAgainResult(loc4.result[0].id)) 
                    {
                        if (_conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.BONUS_COMPLETE || _conductor.response.framework.state == mgs.aurora.slots.components.enums.FrameworkStates.GAMBLE_AFTER_BONUS) 
                        {
                            mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4.item]).processResult_win(getWinValueString(loc4.totalWin), true);
                        }
                        else 
                        {
                            mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4.item]).processResult_pickAgain(getWinValueString(loc4.totalWin), true);
                        }
                    }
                    else if (isWinAllResult(loc4.result[0].id)) 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4.item]).processResult_winAll(getWinValueString(loc4.totalWin), true);
                    }
                    else 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc4.item]).processResult_win(getWinValueString(loc4.totalWin), true);
                    }
                    ++loc3;
                }
            }
            else 
            {
                super.updateButtonStatesOnRefresh();
            }
            return;
        }

        protected override function onBonusPickResponse(arg1:int):void
        {
            var loc1:*=null;
            if (this.isGoldStatus) 
            {
                loc1 = bonusData.bonusPicks.picks[arg1];
                _numServerPicksToProcess = bonusData.bonusPicks.numberOf - (arg1 + 1);
                playPickSound();
                if (isPickAgainResult(loc1.result[0].id)) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1.item]).processResult_pickAgain(getWinValueString(loc1.totalWin));
                }
                else if (isWinAllResult(loc1.result[0].id)) 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1.item]).processResult_winAll(getWinValueString(loc1.totalWin));
                }
                else 
                {
                    mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1.item]).processResult_win(getWinValueString(loc1.totalWin));
                }
            }
            else 
            {
                super.onBonusPickResponse(arg1);
            }
            return;
        }

        protected override function itemButtonClick(arg1:int):void
        {
            if (this._doingIntro) 
            {
                this.fadeOutIntroDialogue();
            }
            super.itemButtonClick(arg1);
            return;
        }

        protected override function handleSystemPick(arg1:int):void
        {
            var loc1:*=null;
            if (this.isGoldStatus) 
            {
                loc1 = bonusData.bonusPicks.picks[arg1];
                playPickSound();
                mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1.item]).processResult_win(getWinValueString(loc1.totalWin));
            }
            else 
            {
                super.handleSystemPick(arg1);
            }
            return;
        }

        protected override function freeButtons():void
        {
            super.freeButtons();
            var loc1:*=0;
            while (loc1 < this._goldStatusButtons.length) 
            {
                if (this._goldStatusButtons[loc1] != null) 
                {
                    this._goldStatusButtons[loc1].dispose();
                    this._goldStatusButtons[loc1] = null;
                }
                ++loc1;
            }
            return;
        }

        protected override function createItemPickButtons():void
        {
            var loc2:*=0;
            super.createItemPickButtons();
            var loc1:*=bonusData.items.length;
            loc2 = 0;
            while (loc2 < loc1) 
            {
                this._goldStatusButtons[loc2] = this.createGoldStatusPickButtonForItem(loc2);
                ++loc2;
            }
            if (this.isGoldStatus) 
            {
                loc2 = 0;
                while (loc2 < loc1) 
                {
                    _buttons[loc2].showButton(false);
                    this._goldStatusButtons[loc2].showButton(true);
                    ++loc2;
                }
            }
            else 
            {
                loc2 = 0;
                while (loc2 < loc1) 
                {
                    _buttons[loc2].showButton(true);
                    this._goldStatusButtons[loc2].showButton(false);
                    ++loc2;
                }
            }
            return;
        }

        protected override function disableItemPickButtons(arg1:int=-1):void
        {
            var loc1:*=0;
            if (this.isGoldStatus) 
            {
                loc1 = 0;
                while (loc1 < this._goldStatusButtons.length) 
                {
                    if (loc1 != arg1) 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1]).enableInteraction(false);
                    }
                    else 
                    {
                        mgs.aurora.games.logicBlocks.agents.BonusGameTypes.AnimatedBonusPickButton(this._goldStatusButtons[loc1]).enableInteraction(false, true);
                    }
                    ++loc1;
                }
            }
            else 
            {
                super.disableItemPickButtons(arg1);
            }
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_ProgressPickXofY";

        public static const SND_DIALOGUE_FIRST:String="dialogue_first";

        public static const SND_DIALOGUE_GOLD_AWARDED:String="dialogue_gold_awarded";

        public static const SND_DIALOGUE_UNLOCK:String="dialogue_unlock";

        protected var _goldStatusButtons:Array;

        protected var _goldStatusBackground:flash.display.MovieClip=null;

        protected var _goldStatusForeground:flash.display.MovieClip=null;

        protected var _backgroundFade:flash.display.MovieClip=null;

        protected var _progressBar:mgs.aurora.slots.components.achievements.AchievementProgressBar;

        protected var _goldStatusAchievementName:String;

        protected var _doingIntro:Boolean;

        protected var _backgroundFadeTime:int;

        protected var _backgroundFadeStartTime:int;

        protected var _unlockDialogueLevels:Array;
    }
}


//            class SarahVines
package mgs.aurora.games.slots.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.games.slots.data.*;
    
    public class SarahVines extends mgs.aurora.games.logicBlocks.agents.JumpingWildAgent
    {
        public function SarahVines()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.agents.SarahVines");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_VINE_ANIMATION));
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onJumpingWildAnimComplete, mgs.aurora.games.logicBlocks.publishers.SymbolsServer.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.publishers.ImmortalRomanceSymbolServer.SERVICE_JUMPING_WILD_ANIM_COMPLETE);
            return;
        }

        protected override function setup():void
        {
            var loc1:*=null;
            super.setup();
            this._vineLoopId = _xmlConfig.wildVines.@loopAnimId;
            this._vineEndId = _xmlConfig.wildVines.@endAnimId;
            this._vineData = new Vector.<mgs.aurora.games.slots.data.VineData>();
            this._betweenVinesDelay = uint(_xmlConfig.wildVines.@betweenVinesDelay);
            this._revealDelay = uint(_xmlConfig.wildVines.@revealDelay);
            this._vineOffsetX = int(_xmlConfig.wildVines.@offsetX);
            this._vineOffsetY = int(_xmlConfig.wildVines.@offsetY);
            var loc2:*=0;
            var loc3:*=_xmlConfig.wildVines.vine;
            for each (loc1 in loc3) 
            {
                this._vineData.push(new mgs.aurora.games.slots.data.VineData(loc1));
            }
            return;
        }

        protected override function onLandAnimComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            super.onLandAnimComplete(arg1);
            if (_conductor.response.slot.reelSet == _reelSet && _mainWild.owner.id == _wildSymbolId) 
            {
                this._loopVineAnim = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._vineLoopId);
                this._numberOfVines = (_conductor.response.visarea.wildVABoxes.length - 1);
                this._vineCounter = 0;
                if (this._loopVineAnim) 
                {
                    this._loopVineAnim.x = _mainWild.x;
                    this._loopVineAnim.y = _mainWild.y;
                    _layer.addChild(this._loopVineAnim);
                    this._loopVineAnim.play();
                    loc1 = new flash.utils.Timer(1000, 1);
                    loc1.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startVines);
                    loc1.start();
                }
            }
            return;
        }

        internal function startVines(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.startVines);
            this.shootVine();
            return;
        }

        internal function shootVine():void
        {
            var loc1:*=_conductor.response.visarea.wildVABoxes[this._vineCounter];
            var loc2:*=loc1 / _conductor.reelData.columns;
            var loc3:*=loc1 - _conductor.reelData.columns * loc2;
            var loc4:*=loc3 - 2;
            var loc5:*=Math.floor(_mainWild.vaPosn / _conductor.reelData.columns) - loc2;
            var loc6:*=this.getVine(loc4, loc5);
            var loc7:*=this.getRotation(loc4, loc5, loc6);
            var loc8:*="";
            var loc9:*=0;
            while (loc9 < this._vineData.length) 
            {
                if (this._vineData[loc9].id == loc6) 
                {
                    loc8 = this._vineData[loc9].index;
                }
                ++loc9;
            }
            var loc10:*;
            (loc10 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc8)).x = _mainWild.x + this._vineOffsetX;
            loc10.y = _mainWild.y + this._vineOffsetY;
            loc10.rotation = loc7;
            this.vineLayer = mgs.aurora.games.framework.StageReference.getLevel(loc8);
            this.vineLayer.addChild(loc10);
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc10, this.onAnimComplete);
            syndicate(this, SERVICE_VINE_ANIMATION);
            var loc11:*;
            (loc11 = new flash.utils.Timer(this._revealDelay, 1)).addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onRevealWild);
            loc11.start();
            return;
        }

        internal function onJumpingWildAnimComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._vineCounter != _conductor.response.visarea.wildVABoxes.length) 
            {
                loc2 = new flash.utils.Timer(this._betweenVinesDelay, 1);
                loc2.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onBetweenVinesDelayComplete);
                loc2.start();
            }
            else 
            {
                loc1 = new flash.utils.Timer(_delayBeforeComplete, 1);
                loc1.addEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onAllVinesShot);
                loc1.start();
            }
            return;
        }

        internal function onAllVinesShot(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onAllVinesShot);
            this.addEndAnim();
            return;
        }

        internal function onRevealWild(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onRevealWild);
            var loc1:*;
            var loc2:*=((loc1 = this)._vineCounter + 1);
            loc1._vineCounter = loc2;
            revealWild(_conductor.response.visarea.wildVABoxes[(loc1 = this)._vineCounter]);
            return;
        }

        protected override function onAnimComplete(arg1:flash.display.MovieClip=null):void
        {
            arg1.stop();
            this.vineLayer.removeChild(arg1);
            return;
        }

        internal function onBetweenVinesDelayComplete(arg1:flash.events.TimerEvent):void
        {
            arg1.currentTarget.stop();
            arg1.currentTarget.removeEventListener(flash.events.TimerEvent.TIMER_COMPLETE, this.onBetweenVinesDelayComplete);
            this.shootVine();
            return;
        }

        internal function addEndAnim():void
        {
            this._loopVineAnim.stop();
            _layer.removeChild(this._loopVineAnim);
            this._endVineAnim = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._vineEndId);
            if (this._endVineAnim) 
            {
                this._endVineAnim.x = _mainWild.x;
                this._endVineAnim.y = _mainWild.y;
                _layer.addChild(this._endVineAnim);
                mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._endVineAnim, this.onEndVineAnimComplete);
            }
            return;
        }

        internal function onEndVineAnimComplete(arg1:flash.display.MovieClip=null):void
        {
            this._endVineAnim.stop();
            _layer.removeChild(this._endVineAnim);
            revealsComplete();
            return;
        }

        internal function getVine(arg1:int, arg2:int):uint
        {
            var loc1:*=2;
            if (Math.abs(arg1) + Math.abs(arg2) == 1) 
            {
                loc1 = 1;
            }
            if (Math.abs(arg1) > 1 || Math.abs(arg2) > 1) 
            {
                loc1 = 3;
            }
            return loc1;
        }

        internal function getRotation(arg1:int, arg2:int, arg3:int):Number
        {
            var loc2:*=0;
            var loc3:*=NaN;
            var loc1:*=0;
            if (arg3 <= 2) 
            {
                loc2 = arg1 + arg2;
                if (arg1 != 0) 
                {
                    if (arg1 == -1) 
                    {
                        loc2 = Math.abs(loc2) + 4;
                    }
                }
                else 
                {
                    loc2 = loc2 + 2;
                }
                if (arg2 < 0 && arg1 >= 0) 
                {
                    loc2 = 8 - loc2;
                }
                loc1 = (loc2 - 1) * 45;
            }
            else if (arg3 == 3) 
            {
                loc3 = 22.5;
                if (Math.abs(arg1) == 1) 
                {
                    loc3 = 30;
                }
                if (arg1 > 0) 
                {
                    loc1 = arg2 * loc3;
                }
                else if (arg1 < 0) 
                {
                    loc1 = 180 - arg2 * loc3;
                }
                else if (arg2 < 0) 
                {
                    loc1 = 270;
                }
                else if (arg2 > 0) 
                {
                    loc1 = 90;
                }
            }
            return loc1;
        }

        public static const SERVICE_VINE_ANIMATION:String="SERVICE_VINE_ANIMATION";

        internal var _vineLoopId:String;

        internal var _vineEndId:String;

        internal var _loopVineAnim:flash.display.MovieClip;

        internal var _endVineAnim:flash.display.MovieClip;

        internal var _numberOfVines:uint;

        internal var _vineCounter:uint;

        internal var _vineData:__AS3__.vec.Vector.<mgs.aurora.games.slots.data.VineData>;

        internal var _betweenVinesDelay:uint;

        internal var _revealDelay:uint;

        internal var _vineOffsetX:int;

        internal var _vineOffsetY:int;

        protected var vineLayer:flash.display.DisplayObjectContainer;
    }
}


//            class TroyBats
package mgs.aurora.games.slots.agents 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.slots.data.*;
    
    public class TroyBats extends mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent
    {
        public function TroyBats()
        {
            super();
            setClassDescription("mgs.aurora.games.logicBlocks.agents.TroyBats");
            return;
        }

        public override function defineServices():void
        {
            super.defineServices();
            registerService(new mgs.aurora.games.framework.server.ServiceLayer(this, SERVICE_BAT_ANIMATION));
            return;
        }

        protected override function setup():void
        {
            var loc1:*=null;
            super.setup();
            this._wildBats = new Vector.<mgs.aurora.games.slots.data.BatData>();
            var loc2:*=0;
            var loc3:*=_xmlConfig.wildBats.bat;
            for each (loc1 in loc3) 
            {
                this._wildBats.push(new mgs.aurora.games.slots.data.BatData(loc1));
            }
            return;
        }

        protected override function playAnimation(arg1:uint):void
        {
            var loc2:*=0;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=0;
            while (loc1 < this._wildBats.length) 
            {
                if (arg1 == this._wildBats[loc1].vaPosn) 
                {
                    loc2 = this._wildBats[loc1].batAssets.length;
                    loc3 = this._wildBats[loc1].batAssets[Math.round(Math.random() * (loc2 - 1))];
                    (loc4 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc3.id)).x = loc3.x;
                    loc4.y = loc3.y;
                    if (loc3.flip) 
                    {
                        loc4.scaleX = -1;
                    }
                    _layer.addChild(loc4);
                    syndicate(this, SERVICE_BAT_ANIMATION);
                    mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(loc4, this.onAnimComplete);
                }
                ++loc1;
            }
            return;
        }

        protected override function onAnimComplete(arg1:flash.display.MovieClip=null):void
        {
            super.onAnimComplete();
            arg1.stop();
            _layer.removeChild(arg1);
            return;
        }

        public static const SERVICE_BAT_ANIMATION:String="SERVICE_BAT_ANIMATION";

        internal var _wildBats:__AS3__.vec.Vector.<mgs.aurora.games.slots.data.BatData>;
    }
}


//            class TroyBatsSoundAgent
package mgs.aurora.games.slots.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class TroyBatsSoundAgent extends mgs.aurora.games.logicBlocks.agents.SoundLogicAgent
    {
        public function TroyBatsSoundAgent()
        {
            super(mgs.aurora.games.slots.agents.TroyBatsSoundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.slots.agents.TroyBatsSoundAgent");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onBatAnimation, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.slots.agents.TroyBats.SERVICE_BAT_ANIMATION);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildValueReveal, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.FloatingWildMultiplierAgent.SERVICE_REPLACE_SYMBOL);
            return;
        }

        internal function onBatAnimation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("TroyBatFly", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function onWildValueReveal(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("TroyMultiplier", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_TROY_BATS_SOUND";
    }
}


//            class WildReelsSoundAgent
package mgs.aurora.games.slots.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class WildReelsSoundAgent extends mgs.aurora.games.logicBlocks.agents.SoundLogicAgent
    {
        public function WildReelsSoundAgent()
        {
            super(mgs.aurora.games.slots.agents.WildReelsSoundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.slots.agents.WildReelsSoundAgent");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsTriggered, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REELS_TRIGGERED);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelAnim, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_SOUND);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWildReelsComplete, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.WildReelsAgent.SERVICE_WILD_REEL_COMPLETE);
            return;
        }

        internal function onWildReelsTriggered(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("WildReelsIntro", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, false, this.playWildBackroundSound));
            return;
        }

        internal function onWildReelAnim(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            if (getSlotSoundServer().isSoundLoaded("WildReelsBG")) 
            {
                getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction("background", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND));
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("WildReelsWild", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function onWildReelsComplete(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady || !this._wildReelsBackground) 
            {
                return;
            }
            this._wildReelsBackground = false;
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createStopAction("WildReelsBG", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND));
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("WildReelsOutro", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME, false, this.playBaseBackgroundSound));
            return;
        }

        internal function playWildBackroundSound(... rest):void
        {
            if (!isReady) 
            {
                return;
            }
            this._wildReelsBackground = true;
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("WildReelsBG", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND, true));
            return;
        }

        internal function playBaseBackgroundSound(... rest):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("background", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_BACKGROUND));
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_WILD_REELS_SOUND";

        internal var _wildReelsBackground:Boolean;
    }
}


//            class WildVinesSoundAgent
package mgs.aurora.games.slots.agents 
{
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class WildVinesSoundAgent extends mgs.aurora.games.logicBlocks.agents.SoundLogicAgent
    {
        public function WildVinesSoundAgent()
        {
            super(mgs.aurora.games.slots.agents.WildVinesSoundAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.games.slots.agents.WildVinesSoundAgent");
            return;
        }

        protected override function defineSubscribers():void
        {
            super.defineSubscribers();
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onWild, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.SERVICE_WILD);
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.onVineAnimation, mgs.aurora.games.logicBlocks.agents.JumpingWildAgent.PUBLISHER_NAME, mgs.aurora.games.slots.agents.SarahVines.SERVICE_VINE_ANIMATION);
            return;
        }

        internal function onWild(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("Sarah_Land", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        internal function onVineAnimation(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (!isReady) 
            {
                return;
            }
            getSlotSoundServer().processSoundAction(mgs.aurora.games.common.dataTypes.SlotSoundActionData.createPlayAction("Sarah_Shoot", mgs.aurora.games.logicBlocks.publishers.SoundServer.SOUNDS_GAME));
            return;
        }

        public static const PUBLISHER_NAME:String="AGENT_WILD_VINES_SOUND";
    }
}


//          package data
//            class BatAssetData
package mgs.aurora.games.slots.data 
{
    public class BatAssetData extends Object
    {
        public function BatAssetData(arg1:String, arg2:int, arg3:int, arg4:Boolean)
        {
            super();
            this._id = arg1;
            this._x = arg2;
            this._y = arg3;
            this._flip = arg4;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get x():int
        {
            return this._x;
        }

        public function get y():int
        {
            return this._y;
        }

        public function get flip():Boolean
        {
            return this._flip;
        }

        internal var _id:String;

        internal var _x:int;

        internal var _y:int;

        internal var _flip:Boolean;
    }
}


//            class BatData
package mgs.aurora.games.slots.data 
{
    import __AS3__.vec.*;
    
    public class BatData extends Object
    {
        public function BatData(arg1:XML)
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=false;
            var loc5:*=null;
            super();
            this._vaPosn = uint(arg1.@vaPosn);
            this._batAssets = new Vector.<mgs.aurora.games.slots.data.BatAssetData>();
            var loc6:*=0;
            var loc7:*=arg1.asset;
            for each (loc5 in loc7) 
            {
                loc1 = String(loc5.@id);
                loc2 = int(loc5.@x);
                loc3 = int(loc5.@y);
                loc4 = uint(loc5.@flip) == 1;
                this._batAssets.push(new mgs.aurora.games.slots.data.BatAssetData(loc1, loc2, loc3, loc4));
            }
            return;
        }

        public function get vaPosn():uint
        {
            return this._vaPosn;
        }

        public function get batAssets():__AS3__.vec.Vector.<mgs.aurora.games.slots.data.BatAssetData>
        {
            return this._batAssets;
        }

        internal var _vaPosn:uint;

        internal var _batAssets:__AS3__.vec.Vector.<mgs.aurora.games.slots.data.BatAssetData>;
    }
}


//            class VineData
package mgs.aurora.games.slots.data 
{
    public class VineData extends Object
    {
        public function VineData(arg1:XML)
        {
            super();
            this._id = uint(arg1.@id);
            this._index = arg1.@index.toXMLString();
            return;
        }

        public function get id():uint
        {
            return this._id;
        }

        public function get index():String
        {
            return this._index;
        }

        internal var _id:uint;

        internal var _index:String;
    }
}


//      package slots
//        package components
//          package achievements
//            class AchievementProgressBar
package mgs.aurora.slots.components.achievements 
{
    import flash.display.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class AchievementProgressBar extends mgs.aurora.games.base.BaseClass
    {
        public function AchievementProgressBar(arg1:flash.display.MovieClip, arg2:String, arg3:int, arg4:int, arg5:String)
        {
            super();
            this._bar = arg1;
            this._layer = arg2;
            this._x = arg3;
            this._y = arg4;
            this._achievementName = arg5;
            return;
        }

        public function Show(arg1:Boolean, arg2:Boolean=false, arg3:Boolean=false):void
        {
            var loc1:*;
            var loc2:*=(loc1 = mgs.aurora.games.logicBlocks.agents.AchievementsDataManager(mgs.aurora.games.framework.Diplomat.publisherByName(mgs.aurora.games.logicBlocks.agents.AchievementsDataManager.PUBLISHER_NAME))).tokensCollectedByName(this._achievementName);
            var loc3:*=true;
            if (loc2 == 0) 
            {
                arg1 = false;
            }
            if (arg3) 
            {
                loc2 = loc2 + 1;
            }
            if (arg1) 
            {
                if (this._lastNumFramesShown == loc2) 
                {
                    loc3 = false;
                }
                if (!arg2) 
                {
                    this._lastNumFramesShown = loc2;
                }
                if (this._bar.parent == null && this._layer) 
                {
                    mgs.aurora.games.framework.StageReference.getLevel(this._layer).addChild(this._bar);
                    this._bar.x = this._x;
                    this._bar.y = this._y;
                }
                if (loc3) 
                {
                    this.Update(loc2, arg2);
                }
            }
            else if (this._bar) 
            {
                if (this._bar.parent) 
                {
                    this._bar.parent.removeChild(this._bar);
                }
            }
            return;
        }

        protected function Update(arg1:int, arg2:Boolean):void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (arg2) 
            {
                this._bar.gotoAndStop(arg1);
                loc1 = 0;
                while (loc1 < this._bar.numChildren) 
                {
                    if (loc2 = this._bar.getChildAt(loc1) as flash.display.MovieClip) 
                    {
                        loc2.gotoAndStop(1);
                    }
                    ++loc1;
                }
            }
            else 
            {
                this._bar.gotoAndStop(arg1);
                loc1 = 0;
                while (loc1 < this._bar.numChildren) 
                {
                    if (loc2 = this._bar.getChildAt(loc1) as flash.display.MovieClip) 
                    {
                        loc2.gotoAndPlay(1);
                    }
                    ++loc1;
                }
            }
            return;
        }

        public override function dispose():void
        {
            try 
            {
                if (this._bar) 
                {
                    if (this._bar.parent) 
                    {
                        this._bar.parent.removeChild(this._bar);
                    }
                    this._bar = null;
                }
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        protected var _bar:flash.display.MovieClip;

        protected var _achievementName:String;

        protected var _layer:String;

        protected var _x:int;

        protected var _y:int;

        protected var _lastNumFramesShown:int=-1;
    }
}


//          package console
//            class ConsoleEngine
package mgs.aurora.slots.components.console 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.api.enums.*;
    import mgs.aurora.api.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.ui.assetPooling.*;
    import mgs.aurora.games.common.components.ui.builders.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.ui.containers.console.*;
    import mgs.aurora.games.common.components.ui.containers.ucs.*;
    import mgs.aurora.games.common.components.ui.events.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.tip.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public class ConsoleEngine extends mgs.aurora.games.base.BaseClass implements flash.events.IEventDispatcher
    {
        public function ConsoleEngine()
        {
            super();
            setClassDescription("mgs.aurora.slots.components.console.ConsoleEngine");
            this._event = new flash.events.EventDispatcher(this);
            this._assetPools = new flash.utils.Dictionary(true);
            return;
        }

        public function showUseLater(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    this.disableButtons("Button_Skip_Offer_Exp,Button_Bet_Max_Exp,Button_Bet_Max");
                    this.hideButtons("Button_Skip_Offer_Exp,Button_Bet_Max_Exp,Button_Bet_Max");
                    this.showButtons("Button_Skip_Offer");
                    this.enableButtons("Button_Skip_Offer");
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                {
                    this.disableButtons("Button_Skip_Offer,Button_Bet_Max_Exp,Button_Bet_Max");
                    this.hideButtons("Button_Skip_Offer,Button_Bet_Max_Exp,Button_Bet_Max");
                    this.showButtons("Button_Skip_Offer_Exp");
                    this.enableButtons("Button_Skip_Offer_Exp");
                    break;
                }
            }
            return;
        }

        public function showBetMax(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    this.disableButtons("Button_Skip_Offer_Exp,Button_Bet_Max_Exp,Button_Skip_Offer");
                    this.hideButtons("Button_Skip_Offer_Exp,Button_Bet_Max_Exp,Button_Skip_Offer");
                    this.showButtons("Button_Bet_Max");
                    this.enableButtons("Button_Bet_Max");
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                {
                    this.disableButtons("Button_Skip_Offer,Button_Bet_Max,Button_Skip_Offer_Exp");
                    this.hideButtons("Button_Skip_Offer,Button_Bet_Max,Button_Skip_Offer_Exp");
                    this.showButtons("Button_Bet_Max_Exp");
                    this.enableButtons("Button_Bet_Max_Exp");
                    break;
                }
            }
            return;
        }

        public function hideBetMax(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    this.hideButtons("Button_Bet_Max");
                    this.disableButtons("Button_Bet_Max");
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                {
                    this.hideButtons("Button_Bet_Max_Exp");
                    this.disableButtons("Button_Bet_Max_Exp");
                    break;
                }
            }
            return;
        }

        public function isStopEnabled():Boolean
        {
            return this.isButtonEnabled("Button_STOP");
        }

        public function isButtonEnabled(arg1:String):Boolean
        {
            return this._console.getActiveConsole().buttons.enabledList.indexOf(arg1) != -1 ? true : false;
        }

        public function disableCoins(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this._currentUser = arg1;
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.UserType.REAL:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Coins");
                    this.disableButtons("Button_Display_Coins");
                    break;
                }
                case mgs.aurora.api.enums.UserType.GUEST:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_GuestCoins");
                    this.disableButtons("Button_Display_GuestCoins");
                    break;
                }
                case mgs.aurora.api.enums.UserType.DEMO:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_DemoCoins");
                    this.disableButtons("Button_Display_DemoCoins");
                    break;
                }
                case mgs.aurora.api.enums.UserType.PRACTICE:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_PracticeCoins");
                    this.disableButtons("Button_Display_PracticeCoins");
                    break;
                }
                default:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Coins");
                    this.disableButtons("Button_Display_Coins");
                    break;
                }
            }
            return;
        }

        public function disableCredits(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this._currentUser = arg1;
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.UserType.REAL:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Credits");
                    this.disableButtons("Button_Display_Credits");
                    break;
                }
                case mgs.aurora.api.enums.UserType.GUEST:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_GuestCredits");
                    this.disableButtons("Button_Display_GuestCredits");
                    break;
                }
                case mgs.aurora.api.enums.UserType.DEMO:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_DemoCredits");
                    this.disableButtons("Button_Display_DemoCredits");
                    break;
                }
                case mgs.aurora.api.enums.UserType.PRACTICE:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_PracticeCredits");
                    this.disableButtons("Button_Display_PracticeCredits");
                    break;
                }
                default:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Credits");
                    this.disableButtons("Button_Display_Credits");
                    break;
                }
            }
            return;
        }

        public function disableAllCoins():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Dec_Coin_Exp,Inc_Coin_Exp,Button_Coins_Exp,Button_Coins");
            return;
        }

        public function enableAllCoins():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.enableButtons("Dec_Coin_Exp,Inc_Coin_Exp,Button_Coins_Exp,Button_Coins");
            return;
        }

        public function disableAllLines():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Dec_Line_Exp,Inc_Line_Exp,Button_Lines_Exp,Button_Lines");
            return;
        }

        public function enableAllLines():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.enableButtons("Dec_Line_Exp,Inc_Line_Exp,Button_Lines_Exp,Button_Lines");
            return;
        }

        internal function setInterActiveObject(arg1:String):void
        {
            var buttonId:String;
            var xpos:int;
            var ypos:int;
            var placeBonusBubble:flash.geom.Point;

            var loc1:*;
            xpos = 0;
            ypos = 0;
            placeBonusBubble = null;
            buttonId = arg1;
            try 
            {
                mgs.aurora.games.framework.AuroraReference.aurora.frame.bonusBubbleTrigger = flash.display.InteractiveObject(this._console.getActiveConsole().button(buttonId).displayObject);
                var loc3:*=0;
                var loc4:*=this._config.positions.pos;
                loc2 = new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        if (@id == "bonusBubble") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                xpos = int(loc2.@x);
                loc3 = 0;
                loc4 = this._config.positions.pos;
                loc2 = new XMLList("");
                for each (loc5 in loc4) 
                {
                    with (loc6 = loc5) 
                    {
                        if (@id == "bonusBubble") 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
                ypos = int(loc2.@y);
                placeBonusBubble = new flash.geom.Point(xpos, ypos);
                mgs.aurora.games.framework.AuroraReference.aurora.frame.bonusBubbleCoordinates = placeBonusBubble;
            }
            catch (e:Error)
            {
                _trace("ERROR: Setting bonus bubble", "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._event.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._event.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._event.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._event.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._event.willTrigger(arg1);
        }

        public override function dispose():void
        {
            try 
            {
                this._console.dispose();
                this._console.removeEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_CONTROLER_BUTTON, this.onConsoleButton);
                this._console.removeEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_MOUSE_EVENT, this.onConsoleButton);
                this._assetPools = null;
                this._ucsModel = null;
                flash.display.MovieClip(mgs.aurora.games.framework.StageReference.getLevel("Console")).addEventListener(flash.events.MouseEvent.CLICK, this.onContainerClick);
            }
            catch (e:Error)
            {
            };
            super.dispose();
            return;
        }

        public function setUp(arg1:XML, arg2:flash.display.LoaderInfo, arg3:mgs.aurora.games.logicBlocks.data.BetData):void
        {
            var loc1:*="default";
            this._assetPools[loc1] = new mgs.aurora.games.common.components.ui.assetPooling.ConsoleAssetProvider();
            this._betData = arg3;
            this._ucsModel = new mgs.aurora.games.common.components.ui.containers.ucs.UCSModel();
            this._config = arg1;
            this.buildButtonViewAliases();
            this._builder = new mgs.aurora.games.common.components.ui.builders.ConsolesBuilder(arg1, arg2, this._assetPools, mgs.aurora.games.framework.AuroraReference.aurora.frame.currentFrame.controls.buttons, this._ucsModel);
            this._builder.addEventListener(flash.events.Event.COMPLETE, this.onConsoleBuilderComplete);
            this._builder.build();
            return;
        }

        protected function buildButtonViewAliases():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=0;
            var loc8:*=0;
            var loc9:*=null;
            var loc10:*=null;
            this._buttonViewAliases = new flash.utils.Dictionary();
            if (this._config.buttonViewAliases.length() == 0) 
            {
                return;
            }
            var loc1:*=0;
            while (loc1 < this._config.buttonViewAliases.view.length()) 
            {
                loc2 = this._config.buttonViewAliases.view[loc1].@id.toString();
                loc3 = loc2.split(",");
                loc4 = 0;
                while (loc4 < loc3.length) 
                {
                    this._buttonViewAliases[loc3[loc4]] = new flash.utils.Dictionary();
                    loc5 = this._buttonViewAliases[loc3[loc4]];
                    if ((loc7 = (loc6 = this._config.buttonViewAliases.view[loc1].button).length()) > 0) 
                    {
                        loc8 = 0;
                        while (loc8 < loc7) 
                        {
                            loc9 = loc6[loc8].@name.toString();
                            loc10 = loc6[loc8].@alias.toString();
                            loc5[loc9] = loc10;
                            ++loc8;
                        }
                    }
                    ++loc4;
                }
                ++loc1;
            }
            return;
        }

        public function set view(arg1:String):void
        {
            this._view = arg1;
            return;
        }

        protected function GetButtonViewAlias(arg1:String):String
        {
            var loc1:*=this._buttonViewAliases[this._view];
            if (loc1) 
            {
                if (loc1[arg1]) 
                {
                    return loc1[arg1];
                }
            }
            return arg1;
        }

        protected function GetButtonFromViewAlias(arg1:String):String
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=this._buttonViewAliases[this._view];
            if (loc1) 
            {
                var loc4:*=0;
                var loc5:*=loc1;
                for (loc2 in loc5) 
                {
                    if ((loc3 = loc1[loc2]) != arg1) 
                    {
                        continue;
                    }
                    return loc2;
                }
            }
            return arg1;
        }

        protected function CreateAliasedStringList(arg1:String):String
        {
            var loc1:*=this._buttonViewAliases[this._view];
            if (!loc1) 
            {
                return arg1;
            }
            var loc2:*=arg1.split(",");
            var loc3:*="";
            var loc4:*=0;
            while (loc4 < loc2.length) 
            {
                if (loc2[loc4] != "") 
                {
                    if (loc4 > 0) 
                    {
                        loc3 = loc3 + "," + this.GetButtonViewAlias(loc2[loc4]);
                    }
                    else 
                    {
                        loc3 = this.GetButtonViewAlias(loc2[loc4]);
                    }
                }
                ++loc4;
            }
            return loc3;
        }

        public function refreshConsole():void
        {
            this.switchConsole(this._activeConsole);
            return;
        }

        public function setConsole(arg1:String):void
        {
            var consoleId:String;

            var loc1:*;
            consoleId = arg1;
            try 
            {
                mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
                this.switchConsole(consoleId);
                this._activeConsole = consoleId;
            }
            catch (e:Error)
            {
                _trace("ERROR while setting the console [" + consoleId + "]. Possible missing console or button class.", "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            return;
        }

        public function setValue(arg1:String, arg2:*):void
        {
            var id:String;
            var value:*;

            var loc1:*;
            id = arg1;
            value = arg2;
            try 
            {
                if (this._console.consoleText(id).text != null) 
                {
                    this._console.consoleText(id).text = String(value);
                }
            }
            catch (e:TypeError)
            {
                _trace("Console element [" + id + "] not found -" + toString(), "note", this, 10460928);
            }
            catch (e:Error)
            {
                _trace(e.message, "error", this, 16711680);
            }
            return;
        }

        internal function onConsoleBuilderComplete(arg1:flash.events.Event):void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=this._assetPools["default"];
            this._buttonStringMap = "";
            var loc4:*=0;
            var loc5:*=loc1.buttons;
            for (loc2 in loc5) 
            {
                this._buttonStringMap = this._buttonStringMap + (loc2 + ",");
            }
            this._aliasedButtonStringMap = this.CreateAliasedStringList(this._buttonStringMap);
            loc3 = mgs.aurora.games.framework.StageReference.getLevel("Console") as flash.display.MovieClip;
            this._console = new mgs.aurora.games.common.components.ui.containers.console.ConsoleController(loc3);
            this._console.setConsoles(loc1.consoles);
            this._console.addEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.CONSOLE_CONTROLER_BUTTON, this.onConsoleButton);
            this._console.addEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_MOUSE_EVENT, this.onConsoleButton);
            this._console.addEventListener(mgs.aurora.games.common.components.ui.events.ConsoleEvent.UCS_KEYBOARD_EVENT, this.onConsoleButton);
            loc3.addEventListener(flash.events.MouseEvent.CLICK, this.onContainerClick);
            this.dispatchEvent(new flash.events.Event(EVENT_COMPLETE));
            return;
        }

        internal function onContainerClick(arg1:flash.events.MouseEvent):void
        {
            this.dispatchEvent(arg1);
            return;
        }

        internal function onConsoleButton(arg1:mgs.aurora.games.common.components.ui.events.ConsoleEvent):void
        {
            var loc1:*=null;
            var loc2:*=null;
            loc1 = this.GetButtonFromViewAlias(arg1.event.id);
            this._unAliasedStr = loc1;
            var loc3:*=arg1.event.type;
            switch (loc3) 
            {
                case mgs.aurora.api.events.ApiMouseEvent.CLICK:
                case mgs.aurora.api.events.ApiKeyboardEvent.KEY_UP:
                {
                    loc3 = loc1;
                    switch (loc3) 
                    {
                        case "UCS_Dec_Button":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_DEC));
                            break;
                        }
                        case "UCS_Inc_Button":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_INC));
                            break;
                        }
                        case "ViewPaytableButton":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_PAYTABLE));
                            break;
                        }
                        case "Button_STOP_Autoplay":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_STOP_AUTOPLAY));
                            break;
                        }
                        case "Button_STOP":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_STOP));
                            break;
                        }
                        case "Button_SPIN":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_SPIN));
                            break;
                        }
                        case "Button_Bet_Max_Exp":
                        case "Button_Bet_Max":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_MAXBET));
                            break;
                        }
                        case "Button_Coins_Exp":
                        case "Button_Coins":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_COINS));
                            break;
                        }
                        case "Button_Lines_Exp":
                        case "Button_Lines":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_PAYLINES));
                            break;
                        }
                        case "Inc_Coin_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_INC_COINS));
                            break;
                        }
                        case "Inc_Line_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_INC_PAYLINES));
                            break;
                        }
                        case "Dec_Line_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_DEC_PAYLINES));
                            break;
                        }
                        case "Dec_Coin_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_DEC_COINS));
                            break;
                        }
                        case "Button_Auto_Play":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_AUTOPLAY));
                            break;
                        }
                        case "X25_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_25X));
                            break;
                        }
                        case "X10_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_10X));
                            break;
                        }
                        case "X5_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_5X));
                            break;
                        }
                        case "Autoplay_10x":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_10X));
                            break;
                        }
                        case "Autoplay_25x":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_25X));
                            break;
                        }
                        case "Autoplay_50x":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_50X));
                            break;
                        }
                        case "Autoplay_75x":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_75X));
                            break;
                        }
                        case "Autoplay_100x":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_100X));
                            break;
                        }
                        case "Autoplay_150x":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_150X));
                            break;
                        }
                        case "Autoplay_UntilStop":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_UNTILSTOP));
                            break;
                        }
                        case "Autoplay_Custom":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_CUSTOM));
                            break;
                        }
                        case "Button_Win":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_WIN));
                            break;
                        }
                        case "Button_Bet":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_BET));
                            break;
                        }
                        case "Inc_Coins":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_INC_COINS));
                            break;
                        }
                        case "Dec_Coins":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_DEC_COINS));
                            break;
                        }
                        case "Inc_Bet":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_INC_COINS));
                            break;
                        }
                        case "Dec_Bet":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_DEC_COINS));
                            break;
                        }
                        case "Button_Collect":
                        case "Button_Collect_Exp":
                        case "Button_Collect_Gamble":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_COLLECT));
                            break;
                        }
                        case "Button_Gamble":
                        case "Button_Gamble_Exp":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_GAMBLE));
                            break;
                        }
                        case "Button_Display_Credits":
                        case "Button_Display_DemoCredits":
                        case "Button_Display_GuestCredits":
                        case "Button_Display_RealCredits":
                        case "Button_Display_PracticeCredits":
                        case "Button_Display_Bubble_Credits":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_SET_COINS));
                            break;
                        }
                        case "Button_Display_Coins":
                        case "Button_Display_GuestCoins":
                        case "Button_Display_DemoCoins":
                        case "Button_Display_RealCoins":
                        case "Button_Display_PracticeCoins":
                        case "Button_Display_Bubble_Coins":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_SET_CREDITS));
                            break;
                        }
                        case "Button_Freespins_Stop":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_FREESPIN_STOP));
                            break;
                        }
                        case "Button_Freespins_Start":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_FREESPIN_START));
                            break;
                        }
                        case "Button_Freespins_Continue":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_FREESPIN_CONTINUE));
                            break;
                        }
                        case "Button_Back_To_Game":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_FREESPIN_BACKTOGAME));
                            break;
                        }
                        case "Button_Gamble_Back_To_Game":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_GAMBLE_BACKTOGAME));
                            break;
                        }
                        case "Button_Gamble_Collect":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_GAMBLE_COLLECT));
                            break;
                        }
                        case "Button_Skip_Offer_Exp":
                        case "Button_Skip_Offer":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_DISCARD_OFFER));
                            break;
                        }
                        case "Mc_Creditbox":
                        {
                            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_BUTTON, BUTTON_CREDITBOX));
                            break;
                        }
                        default:
                        {
                            _trace("ERROR: Button id [" + arg1.event.id + "] not Handled - " + toString(), "error", this, 16711680);
                            break;
                        }
                    }
                    mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
                    break;
                }
                case mgs.aurora.api.events.ApiMouseEvent.ROLL_OVER:
                {
                    loc2 = mgs.aurora.games.framework.AuroraReference.aurora.localized.getStringFromId(loc1.toUpperCase());
                    if (!(loc2 == null) && !(loc2 == "")) 
                    {
                        mgs.aurora.games.framework.tip.ToolTipController.showToolTip(loc2);
                    }
                    break;
                }
                case mgs.aurora.api.events.ApiMouseEvent.ROLL_OUT:
                {
                    mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
                    break;
                }
                case mgs.aurora.api.events.ApiKeyboardEvent.KEY_UP:
                {
                    loc3 = loc1;
                    switch (loc3) 
                    {
                        case "":
                        {
                            break;
                        }
                        default:
                        {
                            _trace("ERROR: Button id [" + loc1 + "] not Handled - " + toString(), "error", this, 16711680);
                            break;
                        }
                    }
                    break;
                }
                default:
                {
                    break;
                }
            }
            return;
        }

        public function enableConsole(arg1:String, arg2:Boolean=false, arg3:Boolean=true, arg4:Boolean=true):void
        {
            var frameMode:String;
            var freegames:Boolean=false;
            var doCoins:Boolean=true;
            var doCredits:Boolean=true;

            var loc1:*;
            frameMode = arg1;
            freegames = arg2;
            doCoins = arg3;
            doCredits = arg4;
            if (this._lockConsole) 
            {
                return;
            }
            this._isEnabled = true;
            try 
            {
                this._console.enableButtons(this._aliasedButtonStringMap);
                if (freegames) 
                {
                    this.disableAllCoins();
                    this.disableAllLines();
                    this.hideBetMax(frameMode);
                }
                else 
                {
                    this.showBetMax(frameMode);
                }
                if (doCoins) 
                {
                    if (!doCredits) 
                    {
                        this.disableCoins(this._currentUser);
                    }
                }
                else if (doCredits) 
                {
                    if (!doCoins) 
                    {
                        this.disableCredits(this._currentUser);
                    }
                }
                if (this._hideFreespinButtons) 
                {
                    this.hideFreespinButtons();
                }
                if (this._lockUCS) 
                {
                    this._ucsModel.ucsIsEnabled = false;
                    this.disableUCS();
                }
                else 
                {
                    this._ucsModel.ucsIsEnabled = true;
                    this.enableUCS();
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: While enabling the console [" + frameMode + "] buttons - " + toString(), "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_CONSOLE, CONSOLE_ENABLE));
            return;
        }

        internal function enableUCS():void
        {
            if (this._console.getActiveConsole().ucs("ucs") != null) 
            {
                mgs.aurora.games.common.components.ui.containers.ucs.UCS(this._console.getActiveConsole().ucs("ucs")).enable();
            }
            return;
        }

        internal function disableUCS():void
        {
            if (this._console.getActiveConsole().ucs("ucs") != null) 
            {
                mgs.aurora.games.common.components.ui.containers.ucs.UCS(this._console.getActiveConsole().ucs("ucs")).disable();
            }
            return;
        }

        public function hideButtons(arg1:String):void
        {
            var loc1:*=null;
            if (this._lockConsole) 
            {
                return;
            }
            try 
            {
                loc1 = this.CreateAliasedStringList(arg1);
                this._console.hideButtons(loc1);
            }
            catch (e:Error)
            {
            };
            return;
        }

        public function showButtons(arg1:String):void
        {
            var loc1:*=null;
            if (this._lockConsole) 
            {
                return;
            }
            try 
            {
                loc1 = this.CreateAliasedStringList(arg1);
                this._console.showButtons(loc1);
            }
            catch (e:Error)
            {
            };
            return;
        }

        public function enableButtons(arg1:String):void
        {
            var loc1:*=null;
            if (this._lockConsole) 
            {
                return;
            }
            try 
            {
                loc1 = this.CreateAliasedStringList(arg1);
                this._console.enableButtons(loc1);
            }
            catch (e:Error)
            {
            };
            return;
        }

        public function disableButtons(arg1:String):void
        {
            var loc1:*=null;
            if (this._lockConsole) 
            {
                return;
            }
            try 
            {
                loc1 = this.CreateAliasedStringList(arg1);
                this._console.disableButtons(loc1);
            }
            catch (e:Error)
            {
            };
            return;
        }

        public function disableConsole():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
            this._isEnabled = false;
            try 
            {
                this._console.disableButtons(this._aliasedButtonStringMap);
            }
            catch (e:Error)
            {
            };
            this.disableUCS();
            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_CONSOLE, CONSOLE_DISABLE));
            return;
        }

        public function set lockUCS(arg1:Boolean):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this._lockUCS = arg1;
            this._ucsModel.ucsIsEnabled = !this._lockUCS;
            if (this._lockUCS) 
            {
                this.disableUCS();
            }
            else 
            {
                this.enableUCS();
            }
            return;
        }

        public function incChip():void
        {
            mgs.aurora.games.common.components.ui.containers.ucs.UCS(this._console.getActiveConsole().ucs("ucs")).incBet();
            return;
        }

        public function decChip():void
        {
            mgs.aurora.games.common.components.ui.containers.ucs.UCS(this._console.getActiveConsole().ucs("ucs")).decBet();
            return;
        }

        public function set chipSize(arg1:Number):void
        {
            this._ucsModel.chipSize = arg1;
            return;
        }

        public function get chipSize():Number
        {
            return this._ucsModel.chipSize;
        }

        public function set chipRange(arg1:Array):void
        {
            var loc1:*=new Array();
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc1[loc2] = arg1[loc2] / 100;
                ++loc2;
            }
            this._ucsModel.chipRange = loc1;
            return;
        }

        public function get chipRange():Array
        {
            return this._ucsModel.chipRange;
        }

        public function setBetMax(arg1:String, arg2:String, arg3:String):void
        {
            this.setValue("Coins_Display", arg1);
            this.setValue("Lines_Display", arg2);
            this.setValue("Bet_Display", arg3);
            return;
        }

        public function set line(arg1:String):void
        {
            this.setValue("Lines_Display", arg1);
            return;
        }

        public function set coins(arg1:String):void
        {
            this.setValue("Coins_Display", arg1);
            return;
        }

        public function set bet(arg1:String):void
        {
            this.setValue("Bet_Display", arg1);
            return;
        }

        public function set balance(arg1:String):void
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField("Balance_Box");
            if (loc1) 
            {
                loc1.text = arg1;
            }
            else 
            {
                this.setValue("Balance_Box", arg1);
            }
            return;
        }

        public function set message(arg1:String):void
        {
            this.setValue("Message_Bar", arg1);
            return;
        }

        public function set winAmount(arg1:String):void
        {
            var loc1:*=mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField("Win_Display");
            if (loc1) 
            {
                loc1.text = arg1;
            }
            else 
            {
                this.setValue("Win_Display", arg1);
            }
            return;
        }

        public function get isEnabled():Boolean
        {
            return this._isEnabled;
        }

        public function set isEnabled(arg1:Boolean):void
        {
            this._isEnabled = arg1;
            return;
        }

        public function get lockConsole():Boolean
        {
            return this._lockConsole;
        }

        public function set lockConsole(arg1:Boolean):void
        {
            this._lockConsole = arg1;
            return;
        }

        public function get console():mgs.aurora.games.common.components.ui.containers.console.ConsoleController
        {
            return this._console;
        }

        public function setSpinDisplay(arg1:String):void
        {
            this.setValue("Spins_Display", arg1);
            return;
        }

        public function switchConsole(arg1:String):void
        {
            var frameMode:String;

            var loc1:*;
            frameMode = arg1;
            mgs.aurora.games.framework.tip.ToolTipController.hideToolTip();
            try 
            {
                this._console.switchConsole(frameMode);
            }
            catch (e:Error)
            {
                _trace("ERROR: Error while switching console [" + frameMode + "]", "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            this.dispatchEvent(new mgs.aurora.slots.components.console.EConsoleEvent(EVENT_CONSOLE_SWITCH, CONSOLE_SWITCHED));
            return;
        }

        public function hideFreespinButtons():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Button_Freespins_Start,Button_Back_To_Game,Button_Freespins_Stop,Button_Freespins_Continue");
            this.hideButtons("Button_Freespins_Start,Button_Back_To_Game,Button_Freespins_Stop,Button_Freespins_Continue");
            this._hideFreespinButtons = true;
            return;
        }

        public function showFreespinStop():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.hideFreespinButtons();
            this.showButtons("Button_Freespins_Stop");
            this.enableButtons("Button_Freespins_Stop");
            this._hideFreespinButtons = false;
            return;
        }

        public function showFreespinStart():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.hideFreespinButtons();
            this.showButtons("Button_Freespins_Start");
            this.enableButtons("Button_Freespins_Start");
            this._hideFreespinButtons = false;
            return;
        }

        public function showFreespinContinue():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.hideFreespinButtons();
            this.showButtons("Button_Freespins_Continue");
            this.enableButtons("Button_Freespins_Continue");
            this._hideFreespinButtons = false;
            return;
        }

        public function showFreespinBackToGame():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.hideFreespinButtons();
            this.showButtons("Button_Back_To_Game");
            this.enableButtons("Button_Back_To_Game");
            this._hideFreespinButtons = false;
            return;
        }

        public function showGambleCollect():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.showButtons("Button_Gamble_Collect");
            this.enableButtons("Button_Gamble_Collect");
            this.hideButtons("Button_Gamble_Back_To_Game");
            this.disableButtons("Button_Gamble_Back_To_Game");
            this._hideFreespinButtons = false;
            return;
        }

        public function showGambleBackToGame():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.hideButtons("Button_Gamble_Collect");
            this.disableButtons("Button_Gamble_Collect");
            this.showButtons("Button_Gamble_Back_To_Game");
            this.enableButtons("Button_Gamble_Back_To_Game");
            this._hideFreespinButtons = false;
            return;
        }

        public function showStopButton():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Button_STOP_Autoplay,Button_SPIN");
            this.hideButtons("Button_STOP_Autoplay,Button_SPIN");
            this.showButtons("Button_STOP");
            this.enableButtons("Button_STOP");
            return;
        }

        public function showAutoPlayStopButton():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Button_STOP,Button_SPIN");
            this.hideButtons("Button_STOP,Button_SPIN");
            this.showButtons("Button_STOP_Autoplay");
            this.enableButtons("Button_STOP_Autoplay");
            return;
        }

        public function showSpin():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Button_STOP,Button_STOP_Autoplay");
            this.hideButtons("Button_STOP,Button_STOP_Autoplay");
            this.showButtons("Button_SPIN");
            this.enableButtons("Button_SPIN");
            return;
        }

        public function showAutoPlayTab():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.showButtons("Autoplay_Custom,Autoplay_UntilStop,Autoplay_150x,Autoplay_100x,Autoplay_75x,Autoplay_50x,Autoplay_25x,Autoplay_10x,Frame_PopupPanel_Autoplay");
            this.enableButtons("Autoplay_Custom,Autoplay_UntilStop,Autoplay_150x,Autoplay_100x,Autoplay_75x,Autoplay_50x,Autoplay_25x,Autoplay_10x,Frame_PopupPanel_Autoplay");
            return;
        }

        public function hideAutoPlayTab():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("Autoplay_Custom,Autoplay_UntilStop,Autoplay_150x,Autoplay_100x,Autoplay_75x,Autoplay_50x,Autoplay_25x,Autoplay_10x,Frame_PopupPanel_Autoplay");
            this.hideButtons("Autoplay_Custom,Autoplay_UntilStop,Autoplay_150x,Autoplay_100x,Autoplay_75x,Autoplay_50x,Autoplay_25x,Autoplay_10x,Frame_PopupPanel_Autoplay");
            return;
        }

        public function hideAllTabsOnButtonPress():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            if (this._unAliasedStr == "Button_Auto_Play") 
            {
                return;
            }
            this.hideAutoPlayTab();
            return;
        }

        public function showWinTab():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.showButtons("txt_WinPopUp_Top5wins,Frame_PopupPanel_Win");
            this.enableButtons("txt_WinPopUp_Top5wins,Frame_PopupPanel_Win");
            return;
        }

        public function hideWinTab():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("txt_WinPopUp_Top5wins,Frame_PopupPanel_Win");
            this.hideButtons("txt_WinPopUp_Top5wins,Frame_PopupPanel_Win");
            return;
        }

        public function showBetTab():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.showButtons("txt_BetPopUp_coinsize,txt_BetPopUp_coins,Inc_Coins,Dec_Coins,UCS_Dec_Button,UCS_Inc_Button");
            this.enableButtons("txt_BetPopUp_coinsize,txt_BetPopUp_coins,Inc_Coins,Dec_Coins,UCS_Dec_Button,UCS_Inc_Button");
            mgs.aurora.games.common.components.ui.containers.ucs.UCS(this._console.getActiveConsole().ucs("ucs")).visible = true;
            return;
        }

        public function hideBetTab():void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this.disableButtons("txt_BetPopUp_coinsize,txt_BetPopUp_coins,Inc_Coins,Dec_Coins,UCS_Dec_Button,UCS_Inc_Button");
            this.hideButtons("txt_BetPopUp_coinsize,txt_BetPopUp_coins,Inc_Coins,Dec_Coins,UCS_Dec_Button,UCS_Inc_Button");
            mgs.aurora.games.common.components.ui.containers.ucs.UCS(this._console.getActiveConsole().ucs("ucs")).visible = false;
            return;
        }

        public function showGambleButton(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    this.disableButtons("Button_Gamble_Exp");
                    this.hideButtons("Button_Gamble_Exp");
                    this.showButtons("Button_Gamble");
                    this.enableButtons("Button_Gamble");
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                {
                    this.disableButtons("Button_Gamble");
                    this.hideButtons("Button_Gamble");
                    this.showButtons("Button_Gamble_Exp");
                    this.enableButtons("Button_Gamble_Exp");
                    break;
                }
            }
            return;
        }

        public function showGambleCollectButton(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.SystemButtonTypes.REGULAR:
                {
                    this.disableButtons("Button_Collect_Exp");
                    this.hideButtons("Button_Collect_Exp");
                    this.showButtons("Button_Collect");
                    this.enableButtons("Button_Collect");
                    break;
                }
                case mgs.aurora.api.enums.SystemButtonTypes.EXPERT:
                {
                    this.disableButtons("Button_Collect");
                    this.hideButtons("Button_Collect");
                    this.showButtons("Button_Collect_Exp");
                    this.enableButtons("Button_Collect_Exp");
                    break;
                }
            }
            return;
        }

        public function showCredits(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this._currentUser = arg1;
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.UserType.REAL:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Credits");
                    this.enableButtons("Button_Display_Credits");
                    this.showButtons("Button_Display_Bubble_Credits");
                    this.enableButtons("Button_Display_Bubble_Credits");
                    this.setInterActiveObject("Button_Display_Bubble_Credits");
                    break;
                }
                case mgs.aurora.api.enums.UserType.GUEST:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_GuestCredits");
                    this.enableButtons("Button_Display_GuestCredits");
                    this.showButtons("Button_Display_Bubble_Credits");
                    this.enableButtons("Button_Display_Bubble_Credits");
                    this.setInterActiveObject("Button_Display_Bubble_Credits");
                    break;
                }
                case mgs.aurora.api.enums.UserType.DEMO:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_DemoCredits");
                    this.enableButtons("Button_Display_DemoCredits");
                    this.showButtons("Button_Display_Bubble_Credits");
                    this.enableButtons("Button_Display_Bubble_Credits");
                    this.setInterActiveObject("Button_Display_Bubble_Credits");
                    break;
                }
                case mgs.aurora.api.enums.UserType.PRACTICE:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_PracticeCredits");
                    this.enableButtons("Button_Display_PracticeCredits");
                    this.showButtons("Button_Display_Bubble_Credits");
                    this.enableButtons("Button_Display_Bubble_Credits");
                    this.setInterActiveObject("Button_Display_Bubble_Credits");
                    break;
                }
                default:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Credits");
                    this.enableButtons("Button_Display_Credits");
                    this.showButtons("Button_Display_Bubble_Credits");
                    this.enableButtons("Button_Display_Bubble_Credits");
                    this.setInterActiveObject("Button_Display_Bubble_Credits");
                    break;
                }
            }
            return;
        }

        public function showCoins(arg1:String):void
        {
            if (this._lockConsole) 
            {
                return;
            }
            this._currentUser = arg1;
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.api.enums.UserType.REAL:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Coins");
                    this.enableButtons("Button_Display_Coins");
                    this.showButtons("Button_Display_Bubble_Coins");
                    this.enableButtons("Button_Display_Bubble_Coins");
                    this.setInterActiveObject("Button_Display_Bubble_Coins");
                    break;
                }
                case mgs.aurora.api.enums.UserType.GUEST:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_GuestCoins");
                    this.enableButtons("Button_Display_GuestCoins");
                    this.showButtons("Button_Display_Bubble_Coins");
                    this.enableButtons("Button_Display_Bubble_Coins");
                    this.setInterActiveObject("Button_Display_Bubble_Coins");
                    break;
                }
                case mgs.aurora.api.enums.UserType.DEMO:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_DemoCoins");
                    this.enableButtons("Button_Display_DemoCoins");
                    this.showButtons("Button_Display_Bubble_Coins");
                    this.enableButtons("Button_Display_Bubble_Coins");
                    this.setInterActiveObject("Button_Display_Bubble_Coins");
                    break;
                }
                case mgs.aurora.api.enums.UserType.PRACTICE:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_PracticeCoins");
                    this.enableButtons("Button_Display_PracticeCoins");
                    this.showButtons("Button_Display_Bubble_Coins");
                    this.enableButtons("Button_Display_Bubble_Coins");
                    this.setInterActiveObject("Button_Display_Bubble_Coins");
                    break;
                }
                default:
                {
                    this.hideCreditCoins();
                    this.showButtons("Button_Display_Coins");
                    this.enableButtons("Button_Display_Coins");
                    this.showButtons("Button_Display_Bubble_Coins");
                    this.enableButtons("Button_Display_Bubble_Coins");
                    this.setInterActiveObject("Button_Display_Bubble_Coins");
                    break;
                }
            }
            return;
        }

        public function hideCreditCoins():void
        {
            this.disableButtons("Button_Display_GuestCredits,Button_Display_DemoCredits,Button_Display_RealCredits," + "Button_Display_PracticeCredits,Button_Display_Credits,Button_Display_GuestCoins," + "Button_Display_DemoCoins,Button_Display_RealCoins,Button_Display_PracticeCoins," + "Button_Display_Coins,Button_Display_Bubble_Coins,Button_Display_Bubble_Credits");
            this.hideButtons("Button_Display_GuestCredits,Button_Display_DemoCredits,Button_Display_RealCredits," + "Button_Display_PracticeCredits,Button_Display_Credits,Button_Display_GuestCoins," + "Button_Display_DemoCoins,Button_Display_RealCoins,Button_Display_PracticeCoins," + "Button_Display_Coins,Button_Display_Bubble_Coins,Button_Display_Bubble_Credits");
            return;
        }

        public static const EVENT_CONSOLE:String="consoleEvent";

        public static const BUTTON_FREESPIN_CONTINUE:String="freespin_continue";

        public static const BUTTON_FREESPIN_BACKTOGAME:String="freespin_backtogame";

        public static const BUTTON_GAMBLE_BACKTOGAME:String="gamble_backtogame";

        public static const BUTTON_DISCARD_OFFER:String="discard_offer";

        public static const BUTTON_DEC:String="dec_bet";

        public static const BUTTON_INC:String="inc_bet";

        public static const BUTTON_CREDITBOX:String="credit_box";

        public static const CONSOLE_ENABLE:String="consoleEnable";

        public static const CONSOLE_DISABLE:String="consoleDisable";

        public static const BUTTON_DEC_COINS:String="dec_coins";

        public static const CONSOLE_SWITCHED:String="consoleSwitched";

        public static const PLAYER_REAL:int=0;

        public static const PLAYER_GUEST:int=1;

        public static const PLAYER_COMPETITION:int=2;

        public static const PLAYER_MAINTAINANCE:int=3;

        public static const PLAYER_PUB_USER:int=4;

        public static const PLAYER_DEMO:int=5;

        public static const EVENT_COMPLETE:String="complete";

        public static const EVENT_BUTTON:String="buttonEvent";

        public static const COINS_INCREMENT:int=5;

        public static const EVENT_CONSOLE_SWITCH:String="consoleSwitch";

        public static const FRAME_EXPERT:String="BASE_EXPERT";

        public static const FRAME_REGULAR:String="BASE_REGULAR";

        public static const FRAME_GAMBLE_EXPERT:String="GAMBLE_EXPERT";

        public static const FRAME_GAMBLE_REGULAR:String="GAMBLE_REGULAR";

        public static const FRAME_FREESPINS_REGULAR:String="REGULAR";

        public static const FRAME_FREESPINS_EXPERT:String="EXPERT";

        public static const FRAME_BONUS_REGULAR:String="BONUS_REGULAR";

        public static const FRAME_BONUS_EXPERT:String="BONUS_EXPERT";

        public static const FRAME_GAMBLING_EXPERT:String="GAMBLING_EXPERT";

        public static const FRAME_GAMBLING_REGULAR:String="GAMBLING_REGULAR";

        public static const BUTTON_PAYTABLE:String="paytable";

        public static const BUTTON_STOP:String="stop";

        public static const BUTTON_STOP_AUTOPLAY:String="stop_autoplay";

        public static const BUTTON_SPIN:String="spin";

        public static const BUTTON_MAXBET:String="maxbet";

        public static const BUTTON_COINS:String="coins";

        public static const BUTTON_PAYLINES:String="lines";

        public static const BUTTON_INC_COINS:String="inc_coins";

        public static const BUTTON_GAMBLE_COLLECT:String="gamble_collect";

        public static const BUTTON_INC_BET:String="inc_bet";

        public static const BUTTON_DEC_BET:String="dec_bet";

        public static const BUTTON_INC_PAYLINES:String="inc_lines";

        public static const BUTTON_DEC_PAYLINES:String="dec_lines";

        public static const BUTTON_AUTOPLAY:String="autoplay";

        public static const BUTTON_25X:String="25x";

        public static const BUTTON_10X:String="10x";

        public static const BUTTON_5X:String="5X";

        public static const BUTTON_50X:String="50X";

        public static const BUTTON_75X:String="75X";

        public static const BUTTON_100X:String="100X";

        public static const BUTTON_150X:String="150X";

        public static const BUTTON_UNTILSTOP:String="until_stop";

        public static const BUTTON_CUSTOM:String="custom";

        public static const BUTTON_WIN:String="win";

        public static const BUTTON_BET:String="bet";

        public static const BUTTON_COLLECT:String="collect";

        public static const BUTTON_GAMBLE:String="gamble";

        public static const BUTTON_SET_CREDITS:String="set_credits";

        public static const BUTTON_SET_COINS:String="set_coins";

        public static const BUTTON_FREESPIN_STOP:String="freespin_stop";

        public static const BUTTON_FREESPIN_START:String="freespin_start";

        internal var _event:flash.events.EventDispatcher;

        internal var _assetPools:flash.utils.Dictionary;

        internal var _ucsModel:mgs.aurora.games.common.components.ui.containers.ucs.IUCSModel;

        internal var _console:mgs.aurora.games.common.components.ui.containers.console.ConsoleController;

        internal var _buttonStringMap:String;

        internal var _aliasedButtonStringMap:String;

        internal var _unAliasedStr:String;

        internal var _activeConsole:String;

        internal var _betData:mgs.aurora.games.logicBlocks.data.BetData;

        internal var _isEnabled:Boolean=true;

        internal var _lockConsole:Boolean=false;

        internal var _currentUser:String;

        internal var _hideFreespinButtons:Boolean=false;

        internal var _config:XML;

        internal var _view:String;

        internal var _buttonViewAliases:flash.utils.Dictionary;

        internal var _lockUCS:Boolean=false;

        internal var _builder:mgs.aurora.games.common.components.ui.builders.ConsolesBuilder;
    }
}


//            class EConsoleEvent
package mgs.aurora.slots.components.console 
{
    import flash.events.*;
    
    public class EConsoleEvent extends flash.events.Event
    {
        public function EConsoleEvent(arg1:String, arg2:String, arg3:Boolean=false, arg4:Boolean=false)
        {
            super(arg1, arg3, arg4);
            this._type = arg1;
            this._id = arg2;
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        internal var _type:String;

        internal var _id:String;
    }
}


//          package enums
//            class BonusStates
package mgs.aurora.slots.components.enums 
{
    public class BonusStates extends Object
    {
        public function BonusStates()
        {
            super();
            return;
        }

        public static const COLLECTING_TICKETS:Number=0;

        public static const STARTING_BONUS:Number=1;

        public static const PLAYING_BONUS:Number=2;

        public static const BONUS_COMPLETE:Number=3;

        public static const GAMBLING_AFTER_BONUS:Number=4;

        public static const GAMBLE_COMPLETE:Number=5;
    }
}


//            class FrameworkStates
package mgs.aurora.slots.components.enums 
{
    public class FrameworkStates extends Object
    {
        public function FrameworkStates()
        {
            super();
            return;
        }

        public static const PLAYING_MAIN_GAME:Number=0;

        public static const GAMBLING:Number=1;

        public static const PLAYING_ACTIVE_BONUS:Number=2;

        public static const BONUS_COMPLETE:Number=3;

        public static const GAMBLE_COMPLETE:Number=4;

        public static const CHOOSING_BONUS:Number=5;

        public static const GAMBLE_AFTER_BONUS:Number=6;

        public static const BONUS_SUSPENDED:Number=7;
    }
}


//            class SlotStates
package mgs.aurora.slots.components.enums 
{
    public class SlotStates extends Object
    {
        public function SlotStates()
        {
            super();
            return;
        }

        public static const NORMAL_SPIN_MODE:Number=0;

        public static const STARTING_FREESPIN_MODE:Number=1;

        public static const FREESPIN_MODE:Number=2;

        public static const FREESPIN_MODE_COMPLETE:Number=3;

        public static const STARTING_SUPERHOLD_MODE:Number=4;

        public static const SUPERHOLD_MODE:Number=5;

        public static const SUPERHOLD_MODE_COMPLETE:Number=6;

        public static const NUDGE_MODE:Number=7;

        public static const HOLD_MODE:Number=8;
    }
}


//            class Verbs
package mgs.aurora.slots.components.enums 
{
    public class Verbs extends Object
    {
        public function Verbs()
        {
            super();
            return;
        }

        public static const REFRESH:String="Refresh";

        public static const SPIN:String="Spin";

        public static const RESPIN:String="Respin";

        public static const COLLECTSPIN:String="CollectSpin";

        public static const FREESPIN:String="FreeSpin";

        public static const COLLECT:String="Collect";

        public static const GAMBLE:String="Gamble";

        public static const BONUSPICK:String="BonusPick";

        public static const CHOOSEBONUSGAME:String="ChooseBonusGame";

        public static const SELECTBONUSGAME:String="SelectBonusGame";

        public static const BONUSCOLLECT:String="BonusCollect";

        public static const NUDGE:String="Nudge";

        public static const HOLD:String="Hold";

        public static const GETGAMEDATA:String="GetGameData";

        public static const PLAY:String="Play";

        public static const REJECT:String="Reject";

        public static const PLAYFREEGAMES:String="PlayFreeGames";

        public static const REJECTFREEGAMES:String="RejectFreeGames";

        public static const GETPROGINFO:String="RejectFreeGames";

        public static const PING:String="Ping";
    }
}


//          package events
//            class GameEvent
package mgs.aurora.slots.components.events 
{
    import flash.events.*;
    
    public class GameEvent extends flash.events.Event
    {
        public function GameEvent(arg1:String, arg2:*=null)
        {
            super(arg1);
            this.eventData = arg2;
            return;
        }

        public override function toString():String
        {
            return formatToString("GameEvent", "type", "eventData", "bubbles", "cancelable", "eventPhase");
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.slots.components.events.GameEvent(this.type, this.eventData);
        }

        public static const BALANCE_UPDATE:String="balanceupdate";

        public static const GAME_START:String="gamestart";

        public static const PACKET_RETURN:String="packetreturn";

        public static const FILE_LOAD:String="fileload";

        public static const GAME_COMPLETE:String="gamecomplete";

        public static const LOAD_COMPLETE:String="loadcomplete";

        public static const USELATER_CLICKED:String="uselaterclicked";

        public static const DIALOG_OPEN:String="dialogopen";

        public static const DIALOG_CLOSE:String="dialogclose";

        public static const HELP_OPEN:String="helpopen";

        public static const HELP_CLOSE:String="helpclose";

        public static const BANK_OPEN:String="bankopen";

        public static const BANK_RETURN:String="bankreturn";

        public static const EXIT_GAME:String="exitgame";

        public static const ALL_REELS_STOPPED:String="allreelsstopped";

        public static const FREE_GAME_SCREEN_CLOSE:String="freegamescreenclose";

        public static const FREE_GAME_SCREEN_OPEN:String="freegamescreenopen";

        public static const GAMBLE_LIMIT_REACHED:String="gamblelimitreached";

        public static const INIT:String="init";

        public static const CAN_STOP_REEL:String="canstopreel";

        public static const REEL_SPIN_START:String="startreelspin";

        public static const REEL_STOP_0:String="reelstop0";

        public static const REEL_STOP_1:String="reelstop1";

        public static const REEL_STOP_2:String="reelstop2";

        public static const REEL_STOP_3:String="reelstop3";

        public static const REEL_STOP_4:String="reelstop4";

        public static const LAND_ANIM_DONE:String="landanimdone";

        public static const SYSTEM_READY:String="systemready";

        public static const WIN_DISPLAY_UPDATE:String="windisplayupdate";

        public static const MESSAGE_BAR_UPDATE:String="messagebarupdate";

        public static const BET_DISPLAY_UPDATE:String="betdisplayupdate";

        public static const COINS_DISPLAY_UPDATE:String="coinsdisplayupdate";

        public static const LINES_DISPLAY_UPDATE:String="linesdisplayupdate";

        public static const SEND_FREESPIN_PACKET:String="sendfreespinpacket";

        public static const SPINS_DISPLAY_UPDATE:String="spinsdisplayupdate";

        public static const SEND_SPIN_PACKET:String="sendspinpacket";

        public static const AUTOPLAY_COMPLETE:String="autoplaycomplete";

        public static const FREE_SPIN_START:String="freespinstart";

        public static const FREE_SPIN_CONTINUE:String="freespincontinue";

        public static const FREE_SPIN_COMPLETE:String="freespincomplete";

        public static const CLEAR_VIS_AREA:String="clearvisarea";

        public static const FREE_SPINS_DISPLAY_UPDATE:String="freespinsdisplayupdate";

        public static const FREE_SPINS_REMAINING_DISPLAY_UPDATE:String="freespinsremainingdisplayupdate";

        public static const FREE_SPINS_CONGRATES_DISPLAY_UPDATE:String="freespinscongratesdisplayupdate";

        public static const FREE_SPINS_TOTALWIN_DISPLAY_UPDATE:String="fstotaleindisplayupdate";

        public static const PLAY_REEL_STOP_SOUND:String="playreelstopsound";

        public static const PLAY_SCATTER_REEL_STOP:String="playscatterreelstop";

        public var eventData:*;
    }
}


//          package freespins
//            package data
//              class FreeSpinsModalData
package mgs.aurora.slots.components.freespins.data 
{
    public class FreeSpinsModalData extends Object
    {
        public function FreeSpinsModalData(arg1:XML)
        {
            var config:XML;

            var loc1:*;
            config = arg1;
            super();
            this._id = config.@id.toString();
            this._views = config.@views.toString().split(",");
            var loc3:*=0;
            var loc4:*=config.setting;
            var loc2:*=new XMLList("");
            for each (var loc5:* in loc4) 
            {
                var loc6:*;
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "fadeIn") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._timeIn = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "fadeOut") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._timeOut = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "headerX") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._headerX = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "headerY") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._headerY = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "totalFontLinkage") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._totalFont = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "remainingFontLinkage") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._remainingFont = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "multiplierFontLinkage") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._multiplierFont = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "resourceFile") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._resourceFile = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "fontSpace") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._fontSpace = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "totalTarget") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._totalTarget = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "remaingTarget") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._remaingTarget = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "multiplierTarget") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._multiplierTarget = loc2.@val.toString();
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "pauseBeforeSpin") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._pauseBeforeSpin = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "winCountUpTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._winCountUpTime = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "blinkRetrigger") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._blinkRetrigger = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "blinkRetriggerTime") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._blinkRetriggerTime = int(loc2.@val);
            loc3 = 0;
            loc4 = config.setting;
            loc2 = new XMLList("");
            for each (loc5 in loc4) 
            {
                with (loc6 = loc5) 
                {
                    if (attribute("variable") == "freespinHeader") 
                    {
                        loc2[loc3] = loc5;
                    }
                }
            }
            this._movieHeaderName = loc2.@val.toString();
            return;
        }

        public function get movieHeaderName():String
        {
            return this._movieHeaderName;
        }

        public function activeInView(arg1:String):Boolean
        {
            var loc1:*=0;
            while (loc1 < this._views.length) 
            {
                if (this._views[loc1] == arg1) 
                {
                    return true;
                }
                ++loc1;
            }
            return false;
        }

        public function get timeIn():int
        {
            return this._timeIn;
        }

        public function get timeOut():int
        {
            return this._timeOut;
        }

        public function get headerX():int
        {
            return this._headerX;
        }

        public function get headerY():int
        {
            return this._headerY;
        }

        public function get totalFont():String
        {
            return this._totalFont;
        }

        public function get remainingFont():String
        {
            return this._remainingFont;
        }

        public function get multiplierFont():String
        {
            return this._multiplierFont;
        }

        public function get resourceFile():String
        {
            return this._resourceFile;
        }

        public function get fontSpace():int
        {
            return this._fontSpace;
        }

        public function get totalTarget():String
        {
            return this._totalTarget;
        }

        public function get remaingTarget():String
        {
            return this._remaingTarget;
        }

        public function get multiplierTarget():String
        {
            return this._multiplierTarget;
        }

        public function get pauseBeforeSpin():int
        {
            return this._pauseBeforeSpin;
        }

        public function get winCountUpTime():int
        {
            return this._winCountUpTime;
        }

        public function get blinkRetrigger():int
        {
            return this._blinkRetrigger;
        }

        public function get blinkRetriggerTime():int
        {
            return this._blinkRetriggerTime;
        }

        internal var _id:String;

        internal var _views:Array;

        internal var _timeIn:int;

        internal var _timeOut:int;

        internal var _headerX:int;

        internal var _headerY:int;

        internal var _totalFont:String;

        internal var _remainingFont:String;

        internal var _multiplierFont:String;

        internal var _resourceFile:String;

        internal var _fontSpace:int;

        internal var _totalTarget:String;

        internal var _remaingTarget:String;

        internal var _multiplierTarget:String;

        internal var _pauseBeforeSpin:int;

        internal var _winCountUpTime:int;

        internal var _blinkRetrigger:int;

        internal var _blinkRetriggerTime:int;

        internal var _movieHeaderName:String;
    }
}


//            class MasterFreeSpinsHeader
package mgs.aurora.slots.components.freespins 
{
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    import mgs.aurora.slots.components.freespins.data.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class MasterFreeSpinsHeader extends mgs.aurora.games.base.BaseEventDispatcherClass
    {
        public function MasterFreeSpinsHeader(arg1:mgs.aurora.slots.components.freespins.data.FreeSpinsModalData)
        {
            var data:mgs.aurora.slots.components.freespins.data.FreeSpinsModalData;

            var loc1:*;
            data = arg1;
            super();
            setClassDescription("mgs.aurora.slots.components.freespins.MasterFreeSpinsHeader");
            this._data = data;
            try 
            {
                this._formatter = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("FreespinsFormat");
            }
            catch (e:Error)
            {
                _trace("ERROR: No format named [FreespinsFormat] specified in you config. Check you formatting nodes.", "error", this, 16711680);
            }
            return;
        }

        public function init():void
        {
            if (this._inited) 
            {
                return;
            }
            this._modalHeader = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._data.movieHeaderName);
            this._modalHeader.x = this._data.headerX;
            this._modalHeader.y = this._data.headerY;
            if (this.getMoveClipElement(this._data.multiplierTarget) != null) 
            {
                this._multiplier = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._data.multiplierFont);
                this._multiplier.addTo(this.getMoveClipElement(this._data.multiplierTarget));
            }
            if (this.getMoveClipElement(this._data.remaingTarget) != null) 
            {
                this._remaining = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._data.remainingFont);
                this._remaining.addTo(this.getMoveClipElement(this._data.remaingTarget));
            }
            if (this.getMoveClipElement(this._data.totalTarget) != null) 
            {
                this._total = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._data.totalFont);
                this._total.addTo(this.getMoveClipElement(this._data.totalTarget));
            }
            this.multiplier = "0";
            this.remaining = "0";
            this.total = "0";
            return;
        }

        public function activeInView(arg1:String):Boolean
        {
            return this._data.activeInView(arg1);
        }

        public function set multiplier(arg1:String):void
        {
            if (this._multiplier) 
            {
                this._multiplier.text = arg1;
            }
            return;
        }

        public function set remaining(arg1:String):void
        {
            if (this._remaining) 
            {
                this._remaining.text = arg1;
            }
            return;
        }

        public function set total(arg1:String):void
        {
            if (this._total) 
            {
                this._total.text = arg1 != "" ? this._formatter.format(arg1) : arg1;
            }
            return;
        }

        public function show(arg1:flash.display.MovieClip):void
        {
            if (this._modalHeader.parent == null) 
            {
                this._modalHeader.alpha = 1;
                arg1.addChild(this._modalHeader);
            }
            return;
        }

        public function hide():void
        {
            if (this._modalHeader.parent != null) 
            {
                this._modalHeader.parent.removeChild(this._modalHeader);
            }
            return;
        }

        public function tweenIn(arg1:flash.display.MovieClip):void
        {
            this.show(arg1);
            this._modalHeader.alpha = 0;
            caurina.transitions.Tweener.addTween(this._modalHeader, {"alpha":1, "time":this._data.timeIn, "onComplete":this.onShow});
            return;
        }

        internal function onShow():void
        {
            dispatchEvent(new flash.events.Event(EVENT_TWEEN_IN_COMPLETE));
            return;
        }

        public function tweenOut():void
        {
            caurina.transitions.Tweener.addTween(this._modalHeader, {"alpha":0, "time":this._data.timeOut, "onComplete":this.onHide});
            return;
        }

        internal function onHide():void
        {
            this.hide();
            dispatchEvent(new flash.events.Event(EVENT_TWEEN_OUT_COMPLETE));
            return;
        }

        internal function getMoveClipElement(arg1:String):flash.display.MovieClip
        {
            var target:String;

            var loc1:*;
            target = arg1;
            try 
            {
                return this._modalHeader.getChildByName(target) as flash.display.MovieClip;
            }
            catch (e:flash.events.Event)
            {
                _trace("ERROR:Could not find instance [" + target + "]. Please check art and config.", "error", this, 16711680);
            }
            return null;
        }

        public function playRetrigger():void
        {
            this._sgroup = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            var loc1:*=0;
            while (loc1 < this._data.blinkRetrigger) 
            {
                this._sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.blinkOff, this._data.blinkRetriggerTime));
                this._sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.blinkOn, this._data.blinkRetriggerTime));
                ++loc1;
            }
            this._sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.doNextSpinAfterRetrigger, this._data.blinkRetriggerTime));
            this._sgroup.start();
            return;
        }

        internal function doNextSpinAfterRetrigger():void
        {
            dispatchEvent(new flash.events.Event(EVENT_RETRIGGER_COMPLETE));
            return;
        }

        internal function blinkOn():void
        {
            this.getMoveClipElement(this._data.remaingTarget).alpha = 1;
            return;
        }

        internal function blinkOff():void
        {
            this.getMoveClipElement(this._data.remaingTarget).alpha = 0;
            return;
        }

        public function get data():mgs.aurora.slots.components.freespins.data.FreeSpinsModalData
        {
            return this._data;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._sgroup.kill();
                this._sgroup = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const EVENT_TWEEN_IN_COMPLETE:String="in_complete";

        public static const EVENT_TWEEN_OUT_COMPLETE:String="out_complete";

        public static const EVENT_RETRIGGER_COMPLETE:String="retrigger_complete";

        internal var _data:mgs.aurora.slots.components.freespins.data.FreeSpinsModalData;

        internal var _modalHeader:flash.display.MovieClip;

        internal var _formatter:mgs.aurora.games.common.components.utils.text.format.ITextFormatter;

        internal var _total:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _remaining:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _multiplier:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _sgroup:org.as3lib.kitchensync.action.group.KSSequenceGroup;

        internal var _inited:Boolean=false;
    }
}


//          package gamble
//            package gamble
//              class GambleModel
package mgs.aurora.slots.components.gamble.gamble 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.logicBlocks.data.*;
    import mgs.aurora.slots.components.events.*;
    import mgs.aurora.slots.components.gamble.gambleInterfaces.*;
    
    public class GambleModel extends Object
    {
        public function GambleModel(arg1:GambleModelSingletonEnforcer, arg2:mgs.aurora.slots.components.gamble.gambleInterfaces.IGambleData)
        {
            super();
            return;
        }

        public function get TotalWin():Number
        {
            return Number(this._totalWin);
        }

        public function get gambleLayer():flash.display.Sprite
        {
            return this._data.GambleLayer;
        }

        public function findPrevCardsPoint(arg1:String):flash.geom.Point
        {
            var loc2:*=null;
            var loc1:*=new flash.geom.Point(0, 0);
            var loc3:*=0;
            var loc4:*=this._data.PrevCards.card;
            for each (loc2 in loc4) 
            {
                if (loc2.@name != arg1) 
                {
                    continue;
                }
                loc1 = new flash.geom.Point(loc2.@x, loc2.@y);
                return loc1;
            }
            return loc1;
        }

        internal function lookupIntervalDelay(arg1:String):int
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._data.Intervals.interval;
            for each (loc1 in loc3) 
            {
                if (loc1.@name != arg1) 
                {
                    continue;
                }
                return loc1.@value;
            }
            return 0;
        }

        internal function onGambleMessageRxed(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            var loc1:*=arg1.eventData.responseData;
            this._responseData = loc1;
            if (loc1.gamble.state != GAMBLE_STATE_USERCOLLECTED) 
            {
                this._totalWin = loc1.gamble.win;
            }
            var loc2:*=new mgs.aurora.slots.components.events.GameEvent(mgs.aurora.slots.components.gamble.gamble.GambleModel.MODEL_RXED_GAMBLE_MESSAGE, {});
            this._gameEventDispatcher.dispatchEvent(loc2);
            return;
        }

        internal function onGambleConsoleButtonSelected(arg1:mgs.aurora.slots.components.events.GameEvent):void
        {
            var loc1:*=int(arg1.eventData.buttonId);
            this.LastSelection = loc1;
            return;
        }

        public function dispose():void
        {
            this._responseData = null;
            return;
        }

        public static function getSuit(arg1:int):String
        {
            if (arg1 > 38) 
            {
                return "Hearts";
            }
            if (arg1 > 25) 
            {
                return "Diamonds";
            }
            if (arg1 > 12) 
            {
                return "Clubs";
            }
            return "Spades";
        }

        public function get ColorWinMultiplier():uint
        {
            return uint(this._data.Multipliers.@colorWinMultiplier);
        }

        public static function getInstance(arg1:mgs.aurora.slots.components.gamble.gambleInterfaces.IGambleData=null):mgs.aurora.slots.components.gamble.gamble.GambleModel
        {
            if (_gambleModel == null) 
            {
                if (arg1 == null) 
                {
                    throw Error("ERROR: resources missing on singleton creation");
                }
                _gambleModel = new GambleModel(new GambleModelSingletonEnforcer(), arg1);
            }
            if (arg1 != null) 
            {
                _gambleModel.update(arg1);
            }
            return _gambleModel;
        }

        internal function update(arg1:mgs.aurora.slots.components.gamble.gambleInterfaces.IGambleData):void
        {
            mgs.aurora.games.base.BaseClass.trace(arg1, "GCL", this);
            this._data = arg1;
            this._gambleMCRef = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(arg1.GambleMCLinkage);
            this._gameEventDispatcher = this._data.GameEventDispatcher;
            this._gambleReturnDelay = this.lookupIntervalDelay("gambleReturnDelay");
            this._showCardBackDelay = this.lookupIntervalDelay("showCardBackDelay");
            this._responseData = this._data.GambleResponseData;
            this._totalWin = this._responseData.player.totalWin;
            if (!this._gameEventDispatcher.hasEventListener(mgs.aurora.slots.components.gamble.gamble.GambleModel.GAME_EVENT_GAMBLE_MESSAGE_RXED)) 
            {
                this._gameEventDispatcher.addEventListener(mgs.aurora.slots.components.gamble.gamble.GambleModel.GAME_EVENT_GAMBLE_MESSAGE_RXED, this.onGambleMessageRxed, false, 0, true);
            }
            if (!this._gameEventDispatcher.hasEventListener(mgs.aurora.slots.components.gamble.gamble.GambleModel.GAME_EVENT_GAMBLE_CONSOLE_BUTTON_SELECTED)) 
            {
                this._gameEventDispatcher.addEventListener(mgs.aurora.slots.components.gamble.gamble.GambleModel.GAME_EVENT_GAMBLE_CONSOLE_BUTTON_SELECTED, this.onGambleConsoleButtonSelected, false, 0, true);
            }
            return;
        }

        public function get GambleMCRef():flash.display.MovieClip
        {
            return this._gambleMCRef;
        }

        public function get GameEventDispatcher():flash.events.EventDispatcher
        {
            return this._gameEventDispatcher;
        }

        public function get GambleSize():Number
        {
            return this._data.Size;
        }

        public function get GambleResourceLinkage():String
        {
            return this._data.GambleResourceLinkage;
        }

        public function get GambleMCLinkage():String
        {
            return this._data.GambleMCLinkage;
        }

        public function get CustomFontLabelLinkage():String
        {
            return this._data.CustomFontLabelLinkage;
        }

        
        {
            _gambleModel = null;
        }

        public function get SuitWinMultiplier():uint
        {
            return uint(this._data.Multipliers.@suitWinMultiplier);
        }

        public function get GambleReturnDelay():int
        {
            return this._gambleReturnDelay;
        }

        public function get ShowCardBackDelay():int
        {
            return this._showCardBackDelay;
        }

        public function get CreditsMode():Boolean
        {
            return this._creditsMode;
        }

        public function get ChipSize():Number
        {
            return this._chipSize;
        }

        public function set LastSelection(arg1:int):void
        {
            this._lastSelection = arg1;
            var loc1:*=new mgs.aurora.slots.components.events.GameEvent(mgs.aurora.slots.components.gamble.gamble.GambleModel.GAME_EVENT_SEND_GAMBLE_SELECTION, {"buttonId":this._lastSelection});
            this._gameEventDispatcher.dispatchEvent(loc1);
            return;
        }

        public function get LastSelection():int
        {
            return this._lastSelection;
        }

        public function get PrevCards():String
        {
            return String(this._responseData.gamble.prevCards.toString());
        }

        public function get Card():int
        {
            return int(this._responseData.gamble.card);
        }

        public function get GambleState():int
        {
            return int(this._responseData.gamble.state);
        }

        public function get GambleMethod():int
        {
            return int(this._responseData.gamble.method);
        }

        public function get GambleWon():Boolean
        {
            return Boolean(this._responseData.gamble.state == GAMBLE_STATE_GAMBLING);
        }

        public static const GAMBLE_SIZE_HALF:Number=0;

        public static const SOUND_GAMBLESTOPAMBIENT:String="Sound:stopGambleAmbient";

        public static const INFOBARMESSAGE_GAMBLELIMIT:String="Message:gambleLimit";

        public static const INFOBARMESSAGE_GAMBLESELECTED:String="Message:gambleSelected";

        public static const INFOBARMESSAGE_GAMBLEWELCOME:String="Message:gambleWelcome";

        public static const INFOBARMESSAGE_GAMBLEWON:String="Message:gambleWon";

        public static const SOUND_GAMBLEPLAYAMBIENT:String="Sound:playGambleAmbient";

        public static const GAME_EVENT_SEND_GAMBLE_SELECTION:String="sendGambleSelection";

        public static const GAME_EVENT_GAMBLE_MESSAGE_RXED:String="onGambleMessageRxed";

        public static const MODEL_RXED_GAMBLE_MESSAGE:String="ModelRxedGambleMessage";

        public static const GAME_EVENT_GAMBLE_CONSOLE_BUTTON_SELECTED:String="GambleConsoleButtonSelected";

        public static const GAME_EVENT_GAMBLE_ON_ACTION:String="GambleOnAction";

        public static const GAME_EVENT_CARD_FLIP_ANIM_COMPLETE:String="cardFlipAnimComplete";

        public static const GAME_EVENT_GAMBLE_COMPLETE:String="onGambleComplete";

        public static const END_GAMBLE:String="endGamble";

        public static const GAMBLE_OVER:String="gambleOver";

        public static const GAMBLE_STATE_DORMANT:Number=0;

        public static const GAMBLE_STATE_GAMBLING:Number=1;

        public static const GAMBLE_STATE_USERCOLLECTED:Number=2;

        public static const GAMBLE_STATE_LIMITREACHED:Number=3;

        public static const GAMBLE_STATE_GAMBLELOST:Number=4;

        public static const GAMBLE_METHOD_RED:Number=0;

        public static const GAMBLE_METHOD_BLACK:Number=1;

        public static const GAMBLE_METHOD_SPADES:Number=2;

        public static const GAMBLE_METHOD_CLUBS:Number=3;

        public static const GAMBLE_METHOD_DIAMONDS:Number=4;

        public static const GAMBLE_METHOD_HEARTS:Number=5;

        public static const GAMBLE_METHOD_COLLECT:Number=6;

        public static const GAMBLE_SIZE_FULL:Number=1;

        public static const GAMBLE_SIZE_BOTH:Number=2;

        public static const SOUND_CARDFLIP:String="Sound:cardFlip";

        public static const SOUND_GAMBLEBUTTON:String="Sound:betButton";

        public static const SOUND_GAMBLEWIN:String="Sound:win";

        public static const SOUND_GAMBLELOSE:String="Sound:lose";

        public static const SOUND_GAMBLELIMIT:String="Sound:limitReached";

        public static const SOUND_GAMBLESETAMBIENT:String="Sound:setGambleAmbient";

        internal var _gambleMCRef:flash.display.MovieClip;

        internal var _gameEventDispatcher:flash.events.EventDispatcher;

        internal var _gambleReturnDelay:int;

        internal var _showCardBackDelay:int;

        internal var _responseData:mgs.aurora.games.logicBlocks.data.ResponseData;

        internal var _totalWin:Number;

        internal var _lastSelection:int;

        internal static var _gambleModel:mgs.aurora.slots.components.gamble.gamble.GambleModel=null;

        internal var _data:mgs.aurora.slots.components.gamble.gambleInterfaces.IGambleData;

        internal var _creditsMode:Boolean=false;

        internal var _chipSize:Number=1;
    }
}


class GambleModelSingletonEnforcer extends Object
{
    public function GambleModelSingletonEnforcer()
    {
        super();
        return;
    }
}

//            package gambleInterfaces
//              class IGambleData
package mgs.aurora.slots.components.gamble.gambleInterfaces 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public interface IGambleData
    {
        function set GambleLayer(arg1:flash.display.Sprite):void;

        function get GambleLayer():flash.display.Sprite;

        function set GameEventDispatcher(arg1:flash.events.EventDispatcher):void;

        function get GameEventDispatcher():flash.events.EventDispatcher;

        function set Size(arg1:uint):void;

        function get Size():uint;

        function set Multipliers(arg1:XMLList):void;

        function get Multipliers():XMLList;

        function set PrevCards(arg1:XMLList):void;

        function get PrevCards():XMLList;

        function set Intervals(arg1:XMLList):void;

        function get Intervals():XMLList;

        function set GambleResourceLinkage(arg1:String):void;

        function get GambleResourceLinkage():String;

        function set GambleMCLinkage(arg1:String):void;

        function get GambleMCLinkage():String;

        function set CustomFontLabelLinkage(arg1:String):void;

        function get CustomFontLabelLinkage():String;

        function set GambleResponseData(arg1:mgs.aurora.games.logicBlocks.data.ResponseData):void;

        function get GambleResponseData():mgs.aurora.games.logicBlocks.data.ResponseData;

        function get name():String;

        function dispose():void;
    }
}


//          package masterGamble
//            package data
//              class MasterGambleData
package mgs.aurora.slots.components.masterGamble.data 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.framework.*;
    
    public class MasterGambleData extends Object
    {
        public function MasterGambleData(arg1:XML)
        {
            var loc1:*=null;
            super();
            this._size = int(arg1.@size);
            this._gambleResourceLinkage = arg1.@gambleResourceLinkage.toString();
            this._gambleMCLinkage = arg1.@gambleMCLinkage.toString();
            this._colorFont = arg1.@colorFont.toString();
            this._suiteFont = arg1.@suiteFont.toString();
            this._colorWinMultiplier = int(arg1.multipliers.@colorWinMultiplier);
            this._suitWinMultiplier = int(arg1.multipliers.@suitWinMultiplier);
            this._level = flash.display.Sprite(mgs.aurora.games.framework.StageReference.stage.getChildByName(arg1.@level.toString()));
            this._gambleReturnDelay = int(arg1.intervals.@gambleReturnDelay);
            this._showCardBackDelay = int(arg1.intervals.@showCardBackDelay);
            this._delayBetweenGambles = int(arg1.intervals.@delayBetweenGambles);
            this._delayConsoleEnable = int(arg1.intervals.@delayConsoleEnable);
            this._previousCards = new Vector.<mgs.aurora.slots.components.masterGamble.data.PreviousCards>(arg1.prevCards.card.length);
            var loc2:*=0;
            var loc3:*=arg1.prevCards.card;
            for each (loc1 in loc3) 
            {
                this._previousCards.push(new mgs.aurora.slots.components.masterGamble.data.PreviousCards(loc1.@name));
            }
            return;
        }

        public function get previousCards():__AS3__.vec.Vector.<mgs.aurora.slots.components.masterGamble.data.PreviousCards>
        {
            return this._previousCards;
        }

        public function get size():int
        {
            return this._size;
        }

        public function get gambleResourceLinkage():String
        {
            return this._gambleResourceLinkage;
        }

        public function get gambleMCLinkage():String
        {
            return this._gambleMCLinkage;
        }

        public function get colorWinMultiplier():int
        {
            return this._colorWinMultiplier;
        }

        public function get suitWinMultiplier():int
        {
            return this._suitWinMultiplier;
        }

        public function get gambleReturnDelay():int
        {
            return this._gambleReturnDelay;
        }

        public function get showCardBackDelay():int
        {
            return this._showCardBackDelay;
        }

        public function get level():flash.display.Sprite
        {
            return this._level;
        }

        public function get delayBetweenGambles():int
        {
            return this._delayBetweenGambles;
        }

        public function get suiteFont():String
        {
            return this._suiteFont;
        }

        public function get colorFont():String
        {
            return this._colorFont;
        }

        public function get delayConsoleEnable():int
        {
            return this._delayConsoleEnable;
        }

        internal var _previousCards:__AS3__.vec.Vector.<mgs.aurora.slots.components.masterGamble.data.PreviousCards>;

        internal var _size:int;

        internal var _gambleResourceLinkage:String;

        internal var _gambleMCLinkage:String;

        internal var _colorWinMultiplier:int=0;

        internal var _suitWinMultiplier:int=0;

        internal var _gambleReturnDelay:int=0;

        internal var _showCardBackDelay:int=0;

        internal var _level:flash.display.Sprite;

        internal var _delayBetweenGambles:int;

        internal var _delayConsoleEnable:int;

        internal var _suiteFont:String;

        internal var _colorFont:String;
    }
}


//              class PreviousCards
package mgs.aurora.slots.components.masterGamble.data 
{
    import flash.display.*;
    
    public class PreviousCards extends Object
    {
        public function PreviousCards(arg1:String)
        {
            super();
            this._displayObject = this.displayObject;
            this._name = arg1;
            return;
        }

        public function get name():String
        {
            return this._name;
        }

        public function get displayObject():flash.display.MovieClip
        {
            return this._displayObject;
        }

        public function set displayObject(arg1:flash.display.MovieClip):void
        {
            this._displayObject = arg1;
            return;
        }

        public static const CARD_SPADES:String="Spades";

        public static const CARD_HEARTS:String="Hearts";

        public static const CARD_CLUBS:String="Clubs";

        public static const CARD_DIAMONDS:String="Diamonds";

        internal var _name:String;

        internal var _displayObject:flash.display.MovieClip;
    }
}


//            class GambleCardAnim
package mgs.aurora.slots.components.masterGamble 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public class GambleCardAnim extends mgs.aurora.games.base.BaseEventDispatcherClass implements mgs.aurora.slots.components.masterGamble.IGambleCardAnim
    {
        public function GambleCardAnim(arg1:flash.display.MovieClip, arg2:int=100)
        {
            super();
            setClassDescription("mgs.aurora.slots.components.masterGamble.GambleCardAnim");
            this._delay = arg2;
            this._card = arg1;
            this._deck = flash.display.MovieClip(this._card.getChildByName("deck"));
            return;
        }

        public function resetCard():void
        {
            this._card.gotoAndStop(1);
            this._deck.gotoAndStop(1);
            return;
        }

        public function flipCard(arg1:String):void
        {
            this._type = arg1;
            this._card.gotoAndStop(FRAME_START);
            this._deck.gotoAndStop(CARD_BACK);
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._card, this.onReveal, this._delay, FRAME_START, FRAME_SHOW);
            dispatchEvent(new flash.events.Event(EVENT_START));
            return;
        }

        public function showCard(arg1:String):void
        {
            this._type = arg1;
            this._card.gotoAndStop(FRAME_REFRESH);
            this._deck.gotoAndStop(this._type);
            return;
        }

        internal function onReveal(arg1:flash.display.MovieClip):void
        {
            this._deck.gotoAndStop(this._type);
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(arg1, this.onRevealComplete, 0, FRAME_SHOW, FRAME_SHOW_COMPLETE);
            return;
        }

        internal function onRevealComplete(arg1:flash.display.MovieClip):void
        {
            arg1.gotoAndStop(FRAME_REFRESH);
            this._deck.gotoAndStop(this._type);
            dispatchEvent(new flash.events.Event(EVENT_REVEALED));
            return;
        }

        public function hideCard(arg1:String):void
        {
            this._type = arg1;
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(this._card, this.onHideFace, 500, FRAME_REMOVE, FRAME_HIDE);
            this._card.gotoAndStop(FRAME_REMOVE);
            this._deck.gotoAndStop(this._type);
            return;
        }

        internal function onHideFace(arg1:flash.display.MovieClip):void
        {
            mgs.aurora.games.common.components.utils.Toolbox.timeLineWatcher(arg1, this.onComplete, 0, FRAME_HIDE, FRAME_HIDE_COMPLETE);
            this._deck.gotoAndStop(CARD_BACK);
            return;
        }

        internal function onComplete(arg1:flash.display.MovieClip):void
        {
            arg1.gotoAndStop(FRAME_START);
            dispatchEvent(new flash.events.Event(EVENT_COMPLETE));
            return;
        }

        public function get target():flash.display.MovieClip
        {
            return this._card;
        }

        public static const CARD:String="Select";

        public static const FRAME_START:String="Start";

        public static const FRAME_SHOW:String="ShowCardFace";

        public static const FRAME_SHOW_COMPLETE:String="CardFaceAnimComplete";

        public static const FRAME_REFRESH:String="Refresh";

        public static const FRAME_REMOVE:String="Remove";

        public static const FRAME_HIDE:String="HideCardFace";

        public static const FRAME_HIDE_COMPLETE:String="CardBackAnimComplete";

        public static const CARD_BACK:String="CardBack";

        public static const CARD_SPADES:String="Spades";

        public static const CARD_CLUBS:String="Clubs";

        public static const CARD_DIAMONDS:String="Diamonds";

        public static const CARD_HEARTS:String="Hearts";

        public static const EVENT_START:String="Start";

        public static const EVENT_REVEALED:String="Reveal";

        public static const EVENT_COMPLETE:String="Complete";

        internal var _card:flash.display.MovieClip;

        internal var _deck:flash.display.MovieClip;

        internal var _delay:int;

        internal var _type:String;
    }
}


//            class IGambleCardAnim
package mgs.aurora.slots.components.masterGamble 
{
    import flash.display.*;
    import flash.events.*;
    
    public interface IGambleCardAnim extends flash.events.IEventDispatcher
    {
        function hideCard(arg1:String):void;

        function resetCard():void;

        function flipCard(arg1:String):void;

        function showCard(arg1:String):void;

        function get target():flash.display.MovieClip;
    }
}


//            class IMasterGamble
package mgs.aurora.slots.components.masterGamble 
{
    import __AS3__.vec.*;
    import flash.events.*;
    import mgs.aurora.slots.components.masterGamble.data.*;
    
    public interface IMasterGamble extends flash.events.IEventDispatcher
    {
        function disableButton(arg1:String):void;

        function enableButton(arg1:String):void;

        function disableAllButtons():void;

        function enableAllButtons():void;

        function showGambleWin(arg1:int):void;

        function showGambleLimit(arg1:int):void;

        function showGambleLost(arg1:int):void;

        function showGambleView():void;

        function revealCard(arg1:int):void;

        function reset(arg1:int):void;

        function refreshPreviousCard(arg1:__AS3__.vec.Vector.<int>):void;

        function clearPreviousCard():void;

        function flipCard(arg1:int):void;

        function hideCard(arg1:int):void;

        function set colorPays(arg1:int):void;

        function set suitPays(arg1:int):void;

        function show():void;

        function hide():void;

        function get data():mgs.aurora.slots.components.masterGamble.data.MasterGambleData;
    }
}


//            class MasterGamble
package mgs.aurora.slots.components.masterGamble 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.button.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.common.components.utils.text.format.*;
    import mgs.aurora.slots.components.events.*;
    import mgs.aurora.slots.components.masterGamble.data.*;
    import org.as3lib.kitchensync.action.*;
    
    public class MasterGamble extends mgs.aurora.games.base.BaseEventDispatcherClass implements mgs.aurora.slots.components.masterGamble.IMasterGamble
    {
        public function MasterGamble(arg1:mgs.aurora.slots.components.masterGamble.data.MasterGambleData)
        {
            var data:mgs.aurora.slots.components.masterGamble.data.MasterGambleData;

            var loc1:*;
            data = arg1;
            super();
            setClassDescription("mgs.aurora.slots.components.masterGamble.MasterGamble");
            this._artButtons = new Vector.<mgs.aurora.games.common.components.ui.components.button.ArtButton>();
            this._data = data;
            this._gambleMovie = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._data.gambleResourceLinkage);
            this.setupButtons();
            this.setupPreviousCards();
            if (this._gambleMovie.getChildByName(mgs.aurora.slots.components.masterGamble.GambleCardAnim.CARD) == null) 
            {
                _trace("ERROR: Gamble Card not found. Please check your Art setup.", "error", this, 16711680);
            }
            else 
            {
                this._card = new mgs.aurora.slots.components.masterGamble.GambleCardAnim(flash.display.MovieClip(this._gambleMovie.getChildByName(mgs.aurora.slots.components.masterGamble.GambleCardAnim.CARD)));
                this._card.addEventListener(mgs.aurora.slots.components.masterGamble.GambleCardAnim.EVENT_START, this.onCardStartReveal);
                this._card.addEventListener(mgs.aurora.slots.components.masterGamble.GambleCardAnim.EVENT_REVEALED, this.onCardReveal);
                this._card.addEventListener(mgs.aurora.slots.components.masterGamble.GambleCardAnim.EVENT_COMPLETE, this.onCardComplete);
            }
            this._formatter = mgs.aurora.games.common.components.utils.text.format.TextFormat.instance.getFormatter("GambleAreaFormat");
            this._colorPays = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._data.colorFont);
            this._suitPays = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(this._data.suiteFont);
            this._colorPaysHolder = this.getMovieClipElement("colorPays");
            this._suitPaysHolder = this.getMovieClipElement("suitePays");
            this._betText = this.getMovieClipElement("BetText");
            this._previousCardText = this.getMovieClipElement("prevCardText");
            this._gambleText = this.getMovieClipElement("GambleText");
            this._winBanner = this.getMovieClipElement("WinBanner");
            try 
            {
                this._colorPays.addTo(this._colorPaysHolder);
                this._colorPays.text = "0";
            }
            catch (e:Error)
            {
                _trace("ERROR: Missing [colorPays] on Gamble. Please check your art", "error", this, 16711680);
            }
            this.showColorPaysHolder();
            try 
            {
                this._suitPays.addTo(this._suitPaysHolder);
                this._suitPays.text = "0";
            }
            catch (e:Error)
            {
                _trace("ERROR: Missing [suitePays]. Please check your art", "error", this, 16711680);
            }
            this.showSuitePaysHolder();
            return;
        }

        internal function showBetText():void
        {
            var loc1:*;
            try 
            {
                if (this._betText.parent == null) 
                {
                    this._gambleMovie.addChild(this._betText);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [BetText]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function setupButtons():void
        {
            if (this.hasMovieElement(BUTTON_NAME_RED)) 
            {
                this._artButtons.push(new mgs.aurora.games.common.components.ui.components.button.ArtButton(flash.display.MovieClip(this._gambleMovie.getChildByName(BUTTON_NAME_RED)), this.redButton, true, null, 82));
            }
            if (this.hasMovieElement(BUTTON_NAME_BLACK)) 
            {
                this._artButtons.push(new mgs.aurora.games.common.components.ui.components.button.ArtButton(flash.display.MovieClip(this._gambleMovie.getChildByName(BUTTON_NAME_BLACK)), this.blackButton, true, null, 66));
            }
            if (this.hasMovieElement(BUTTON_NAME_DIAMOND)) 
            {
                this._artButtons.push(new mgs.aurora.games.common.components.ui.components.button.ArtButton(flash.display.MovieClip(this._gambleMovie.getChildByName(BUTTON_NAME_DIAMOND)), this.diamondButton, true, null, 68));
            }
            if (this.hasMovieElement(BUTTON_NAME_SPADE)) 
            {
                this._artButtons.push(new mgs.aurora.games.common.components.ui.components.button.ArtButton(flash.display.MovieClip(this._gambleMovie.getChildByName(BUTTON_NAME_SPADE)), this.spadeButton, true, null, 83));
            }
            if (this.hasMovieElement(BUTTON_NAME_CLUB)) 
            {
                this._artButtons.push(new mgs.aurora.games.common.components.ui.components.button.ArtButton(flash.display.MovieClip(this._gambleMovie.getChildByName(BUTTON_NAME_CLUB)), this.clubButton, true, null, 67));
            }
            if (this.hasMovieElement(BUTTON_NAME_HEART)) 
            {
                this._artButtons.push(new mgs.aurora.games.common.components.ui.components.button.ArtButton(flash.display.MovieClip(this._gambleMovie.getChildByName(BUTTON_NAME_HEART)), this.heartButton, true, null, 72));
            }
            return;
        }

        internal function heartButton():void
        {
            this.disableAllButtons();
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_HEART, GAMBLE_METHOD_HEARTS));
            return;
        }

        internal function clubButton():void
        {
            this.disableAllButtons();
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_CLUB, GAMBLE_METHOD_CLUBS));
            return;
        }

        internal function spadeButton():void
        {
            this.disableAllButtons();
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_SPADE, GAMBLE_METHOD_SPADES));
            return;
        }

        internal function diamondButton():void
        {
            this.disableAllButtons();
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_DIAMOND, GAMBLE_METHOD_DIAMONDS));
            return;
        }

        internal function redButton():void
        {
            this.disableAllButtons();
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_RED, GAMBLE_METHOD_RED));
            return;
        }

        internal function blackButton():void
        {
            this.disableAllButtons();
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_BLACK, GAMBLE_METHOD_BLACK));
            return;
        }

        internal function hasMovieElement(arg1:String):Boolean
        {
            if (this._gambleMovie.getChildByName(arg1) != null) 
            {
                return true;
            }
            return false;
        }

        internal function getCard(arg1:int):String
        {
            if (arg1 > 38) 
            {
                return mgs.aurora.slots.components.masterGamble.GambleCardAnim.CARD_HEARTS;
            }
            if (arg1 > 25) 
            {
                return mgs.aurora.slots.components.masterGamble.GambleCardAnim.CARD_DIAMONDS;
            }
            if (arg1 > 12) 
            {
                return mgs.aurora.slots.components.masterGamble.GambleCardAnim.CARD_CLUBS;
            }
            return mgs.aurora.slots.components.masterGamble.GambleCardAnim.CARD_SPADES;
        }

        public function revealCard(arg1:int):void
        {
            this._card.showCard(this.getCard(arg1));
            return;
        }

        internal function getMovieClipElement(arg1:String):flash.display.MovieClip
        {
            if (this._gambleMovie.getChildByName(arg1) == null) 
            {
                _trace("ERROR: Missing art element [" + arg1 + "]. Please check your art setup.", "error", this, 16711680);
            }
            return this._gambleMovie.getChildByName(arg1) as flash.display.MovieClip;
        }

        public override function dispose():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._artButtons;
            for each (loc1 in loc3) 
            {
                loc1.dispose();
            }
            this._artButtons = null;
            this._data = null;
            this.hide();
            this._gambleMovie = null;
            this._formatter = null;
            super.dispose();
            return;
        }

        public function disableButton(arg1:String):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._artButtons;
            for each (loc1 in loc3) 
            {
                if (loc1.target.name != arg1) 
                {
                    continue;
                }
                loc1.disable();
            }
            return;
        }

        public function enableButton(arg1:String):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._artButtons;
            for each (loc1 in loc3) 
            {
                if (loc1.target.name != arg1) 
                {
                    continue;
                }
                loc1.enable();
            }
            return;
        }

        public function disableAllButtons():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._artButtons;
            for each (loc1 in loc3) 
            {
                loc1.disable();
            }
            return;
        }

        public function enableAllButtons():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._artButtons;
            for each (loc1 in loc3) 
            {
                loc1.enable();
            }
            return;
        }

        public function showGambleWin(arg1:int):void
        {
            this._card.showCard(this.getCard(arg1));
            this.disableAllButtons();
            this.showBetText();
            this.showPreviousText();
            this.showColorPaysHolder();
            this.showSuitePaysHolder();
            this.showWinBanner();
            this._gambleText.gotoAndStop(GAMBLE_TEXT_CONGRADS);
            return;
        }

        public function showGambleLimit(arg1:int):void
        {
            this._card.showCard(this.getCard(arg1));
            this.disableAllButtons();
            this.hideBetText();
            this.showPreviousText();
            this.hideColorPaysHolder();
            this.hideSuitePaysHolder();
            this._gambleText.gotoAndStop(GAMBLE_TEXT_LIMIT);
            this.hideWinBanner();
            return;
        }

        public function showGambleLost(arg1:int):void
        {
            this._card.showCard(this.getCard(arg1));
            this.disableAllButtons();
            this.hideBetText();
            this.showPreviousText();
            this.hideColorPaysHolder();
            this.hideSuitePaysHolder();
            this._gambleText.gotoAndStop(GAMBLE_TEXT_LOST);
            this.hideWinBanner();
            return;
        }

        public function showGambleView():void
        {
            this._card.resetCard();
            this.enableAllButtons();
            this.showBetText();
            this.showPreviousText();
            this.showColorPaysHolder();
            this.showSuitePaysHolder();
            this._gambleText.gotoAndStop(GAMBLE_TEXT_DEFAULT);
            this.hideWinBanner();
            return;
        }

        public function get data():mgs.aurora.slots.components.masterGamble.data.MasterGambleData
        {
            return this._data;
        }

        public function reset(arg1:int):void
        {
            this._card.resetCard();
            return;
        }

        internal function onGambleComplete():void
        {
            this._gambleText.gotoAndStop(GAMBLE_TEXT_DEFAULT);
            dispatchEvent(new mgs.aurora.slots.components.events.GameEvent(EVENT_GAMBLE_COMPLETE, EVENT_GAMBLE_COMPLETE));
            return;
        }

        public function refreshPreviousCard(arg1:__AS3__.vec.Vector.<int>):void
        {
            var loc2:*=null;
            this.clearPreviousCard();
            var loc1:*=0;
            while (loc1 < this._data.previousCards.length) 
            {
                loc2 = this._data.previousCards[loc1];
                if (loc1 > (arg1.length - 1)) 
                {
                    flash.display.MovieClip(loc2.displayObject).gotoAndStop(1);
                }
                else 
                {
                    flash.display.MovieClip(loc2.displayObject).gotoAndStop(this.getCard(arg1[loc1]));
                }
                ++loc1;
            }
            return;
        }

        public function clearPreviousCard():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._data.previousCards;
            for each (loc1 in loc3) 
            {
                flash.display.MovieClip(loc1.displayObject).gotoAndStop(1);
            }
            return;
        }

        public function flipCard(arg1:int):void
        {
            this._card.flipCard(this.getCard(arg1));
            return;
        }

        public function hideCard(arg1:int):void
        {
            this.hideWinBanner();
            this._card.hideCard(this.getCard(arg1));
            return;
        }

        public function set colorPays(arg1:int):void
        {
            this._colorPays.text = this._formatter.format(arg1.toString());
            return;
        }

        public function set suitPays(arg1:int):void
        {
            this._suitPays.text = this._formatter.format(arg1.toString());
            return;
        }

        public function show():void
        {
            if (this._gambleMovie == null) 
            {
                _trace("ERROR: Gamble not ready to show!!", "error", this, 16711680);
            }
            else 
            {
                this.enableAllButtons();
                if (this._gambleMovie.parent == null) 
                {
                    this._data.level.addChild(this._gambleMovie);
                }
            }
            return;
        }

        public function hide():void
        {
            if (this._gambleMovie == null) 
            {
                _trace("ERROR: Can\'t hide, that, that can\'t be hidden!!", "error", this, 16711680);
            }
            else 
            {
                this.disableAllButtons();
                if (this._gambleMovie.parent != null) 
                {
                    this._data.level.removeChild(this._gambleMovie);
                }
            }
            return;
        }

        internal function showWinBanner():void
        {
            var loc1:*;
            try 
            {
                if (this._winBanner.parent == null) 
                {
                    this._gambleMovie.addChild(this._winBanner);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [WinBanner]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function hideWinBanner():void
        {
            var loc1:*;
            try 
            {
                if (this._winBanner.parent != null) 
                {
                    this._winBanner.parent.removeChild(this._winBanner);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [WinBanner]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function showColorPaysHolder():void
        {
            var loc1:*;
            try 
            {
                if (this._colorPaysHolder.parent == null) 
                {
                    this._gambleMovie.addChild(this._colorPaysHolder);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [colorPays]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function hideColorPaysHolder():void
        {
            var loc1:*;
            try 
            {
                if (this._colorPaysHolder.parent != null) 
                {
                    this._colorPaysHolder.parent.removeChild(this._colorPaysHolder);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [colorPays]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function showSuitePaysHolder():void
        {
            var loc1:*;
            try 
            {
                if (this._suitPaysHolder.parent == null) 
                {
                    this._gambleMovie.addChild(this._suitPaysHolder);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [suitePays]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function hideSuitePaysHolder():void
        {
            var loc1:*;
            try 
            {
                if (this._suitPaysHolder.parent != null) 
                {
                    this._suitPaysHolder.parent.removeChild(this._suitPaysHolder);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [suitePays]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function setupPreviousCards():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._data.previousCards;
            for each (loc1 in loc3) 
            {
                loc1.displayObject = this._gambleMovie.getChildByName(loc1.name) as flash.display.MovieClip;
            }
            return;
        }

        internal function onCardComplete(arg1:flash.events.Event):void
        {
            dispatchEvent(new flash.events.Event(EVENT_FLIP_COMPLETE));
            new org.as3lib.kitchensync.action.KSFunction(this.onGambleComplete, this._data.delayConsoleEnable).start();
            return;
        }

        internal function onCardReveal(arg1:flash.events.Event):void
        {
            dispatchEvent(new flash.events.Event(EVENT_FLIP_REVEALED));
            return;
        }

        internal function onCardStartReveal(arg1:flash.events.Event):void
        {
            dispatchEvent(new flash.events.Event(EVENT_FLIP_START));
            return;
        }

        internal function hidePreviousText():void
        {
            var loc1:*;
            try 
            {
                if (this._previousCardText.parent != null) 
                {
                    this._previousCardText.parent.removeChild(this._previousCardText);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [prevCardText]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function showPreviousText():void
        {
            var loc1:*;
            try 
            {
                if (this._previousCardText.parent == null) 
                {
                    this._gambleMovie.addChild(this._previousCardText);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [prevCardText]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function hideBetText():void
        {
            var loc1:*;
            try 
            {
                if (this._betText.parent != null) 
                {
                    this._betText.parent.removeChild(this._betText);
                }
            }
            catch (e:Error)
            {
                _trace("ERROR: Could not find movie [BetText]. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        public static const GAMBLE_STATE_USERCOLLECTED:Number=2;

        public static const GAMBLE_STATE_LIMITREACHED:Number=3;

        public static const GAMBLE_STATE_GAMBLELOST:Number=4;

        public static const GAMBLE_METHOD_RED:Number=0;

        public static const GAMBLE_METHOD_BLACK:Number=1;

        public static const GAMBLE_METHOD_SPADES:Number=2;

        public static const BUTTON_NAME_BLACK:String="black";

        public static const GAMBLE_METHOD_DIAMONDS:Number=4;

        public static const GAMBLE_METHOD_HEARTS:Number=5;

        public static const GAMBLE_METHOD_COLLECT:Number=6;

        public static const GAMBLE_SIZE_HALF:Number=0;

        public static const GAMBLE_SIZE_FULL:Number=1;

        public static const GAMBLE_SIZE_BOTH:Number=2;

        public static const EVENT_COLLECT:String="collect";

        public static const EVENT_FLIP_COMPLETE:String="card_flip_complete";

        public static const EVENT_FLIP_START:String="card_flip_start";

        public static const EVENT_FLIP_REVEALED:String="card_revealed";

        public static const EVENT_BLACK:String="black";

        public static const EVENT_RED:String="red";

        public static const EVENT_DIAMOND:String="diamond";

        public static const EVENT_CLUB:String="club";

        public static const EVENT_SPADE:String="spade";

        public static const EVENT_HEART:String="heart";

        public static const EVENT_GAMBLE_COMPLETE:String="gambleComplete";

        public static const GAMBLE_METHOD_CLUBS:Number=3;

        public static const BUTTON_NAME_RED:String="red";

        public static const BUTTON_NAME_DIAMOND:String="diamonds";

        public static const BUTTON_NAME_CLUB:String="clubs";

        public static const BUTTON_NAME_SPADE:String="spades";

        public static const BUTTON_NAME_HEART:String="hearts";

        public static const GAMBLE_TEXT_DEFAULT:String="Default";

        public static const GAMBLE_TEXT_LOST:String="GambleLost";

        public static const GAMBLE_TEXT_LIMIT:String="GambleLimitReached";

        public static const GAMBLE_TEXT_CONGRADS:String="Congratulations";

        public static const GAMBLE_STATE_DORMANT:Number=0;

        public static const GAMBLE_STATE_GAMBLING:Number=1;

        internal var _data:mgs.aurora.slots.components.masterGamble.data.MasterGambleData;

        internal var _gambleMovie:flash.display.MovieClip;

        internal var _card:mgs.aurora.slots.components.masterGamble.IGambleCardAnim;

        internal var _artButtons:__AS3__.vec.Vector.<mgs.aurora.games.common.components.ui.components.button.ArtButton>;

        internal var _colorPays:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _suitPays:mgs.aurora.games.common.components.ui.components.text.IComponentText;

        internal var _previousCardText:flash.display.MovieClip;

        internal var _gambleText:flash.display.MovieClip;

        internal var _colorPaysHolder:flash.display.MovieClip;

        internal var _formatter:mgs.aurora.games.common.components.utils.text.format.ITextFormatter;

        internal var _winBanner:flash.display.MovieClip;

        internal var _suitPaysHolder:flash.display.MovieClip;

        internal var _betText:flash.display.MovieClip;
    }
}


//          package modals
//            class IModalHeader
package mgs.aurora.slots.components.modals 
{
    import flash.display.*;
    
    public interface IModalHeader
    {
        function get duration():int;

        function get priority():int;

        function get canBeRandom():Boolean;

        function get x():Number;

        function get y():Number;

        function get instance():flash.display.MovieClip;

        function get id():String;

        function get removeAtStartSpin():Boolean;

        function get instanceId():String;
    }
}


//            class IRuleContainer
package mgs.aurora.slots.components.modals 
{
    public interface IRuleContainer
    {
        function set method(arg1:Function):void;

        function set randomRule(arg1:Function):void;
    }
}


//            class MasterModalHeader
package mgs.aurora.slots.components.modals 
{
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.action.group.*;
    
    public class MasterModalHeader extends mgs.aurora.games.base.BaseEventDispatcherClass
    {
        public function MasterModalHeader(arg1:XMLList)
        {
            super();
            setClassDescription("mgs.aurora.slots.components.modals.MasterModalHeader");
            this._data = arg1;
            this._modalHeader = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._data.@id);
            this._modalHeader.x = this._data.@x;
            this._modalHeader.y = this._data.@y;
            return;
        }

        public function show(arg1:flash.display.MovieClip):void
        {
            if (this._modalHeader.parent == null) 
            {
                this._modalHeader.alpha = 1;
                arg1.addChild(this._modalHeader);
            }
            return;
        }

        public function hide():void
        {
            if (this._modalHeader.parent != null) 
            {
                this._modalHeader.parent.removeChild(this._modalHeader);
            }
            return;
        }

        public function tweenIn(arg1:flash.display.MovieClip):void
        {
            this.show(arg1);
            this._modalHeader.alpha = 0;
            caurina.transitions.Tweener.addTween(this._modalHeader, {"alpha":1, "time":this._data.@fadeIn, "onComplete":this.onShow});
            return;
        }

        internal function onShow():void
        {
            dispatchEvent(new flash.events.Event(EVENT_TWEEN_IN_COMPLETE));
            return;
        }

        public function tweenOut():void
        {
            caurina.transitions.Tweener.addTween(this._modalHeader, {"alpha":0, "time":this._data.@fadeOut, "onComplete":this.onHide});
            return;
        }

        internal function onHide():void
        {
            this.hide();
            dispatchEvent(new flash.events.Event(EVENT_TWEEN_OUT_COMPLETE));
            return;
        }

        internal function getMoveClipElement(arg1:String):flash.display.MovieClip
        {
            var target:String;

            var loc1:*;
            target = arg1;
            try 
            {
                return this._modalHeader.getChildByName(target) as flash.display.MovieClip;
            }
            catch (e:flash.events.Event)
            {
                _trace("ERROR:Could not find instance [" + target + "]. Please check art and config.", "error", this, 16711680);
            }
            return null;
        }

        public function playRetrigger():void
        {
            this._sgroup = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            var loc1:*=0;
            while (loc1 < this._data.@blinkRetrigger) 
            {
                this._sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.blinkOff, this._data.@blinkRetriggerTime));
                this._sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.blinkOn, this._data.@blinkRetriggerTime));
                ++loc1;
            }
            this._sgroup.addAction(new org.as3lib.kitchensync.action.KSFunction(this.doNextSpinAfterRetrigger, this._data.@blinkRetriggerTime));
            this._sgroup.start();
            return;
        }

        internal function doNextSpinAfterRetrigger():void
        {
            dispatchEvent(new flash.events.Event(EVENT_RETRIGGER_COMPLETE));
            return;
        }

        internal function blinkOn():void
        {
            this.getMoveClipElement(this._data.@remaingTarget).alpha = 1;
            return;
        }

        internal function blinkOff():void
        {
            this.getMoveClipElement(this._data.@remaingTarget).alpha = 0;
            return;
        }

        public function getModalHeader():flash.display.MovieClip
        {
            return this._modalHeader;
        }

        public override function dispose():void
        {
            var loc1:*;
            try 
            {
                this._sgroup.kill();
                this._sgroup = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public static const EVENT_TWEEN_IN_COMPLETE:String="in_complete";

        public static const EVENT_TWEEN_OUT_COMPLETE:String="out_complete";

        public static const EVENT_RETRIGGER_COMPLETE:String="retrigger_complete";

        internal var _data:XMLList;

        internal var _modalHeader:flash.display.MovieClip;

        internal var _sgroup:org.as3lib.kitchensync.action.group.KSSequenceGroup;
    }
}


//            class ModalHeader
package mgs.aurora.slots.components.modals 
{
    import flash.display.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    
    public class ModalHeader extends mgs.aurora.games.base.BaseClass implements mgs.aurora.slots.components.modals.IModalHeader
    {
        public function ModalHeader(arg1:String, arg2:int, arg3:int, arg4:Boolean, arg5:Number, arg6:Number, arg7:String, arg8:Boolean=false, arg9:String="", arg10:String="", arg11:String="", arg12:String="")
        {
            super();
            setClassDescription("mgs.aurora.slots.components.modals.ModalHeader");
            this._id = arg1;
            this._duration = arg2;
            this._priority = arg3;
            this._canBeRandom = arg4;
            this._x = arg5;
            this._y = arg6;
            this._instanceId = arg7;
            this._removeAtStartSpin = arg8;
            this._parentMCLinkage = arg9;
            this._movieClipLinkage = arg10;
            this._customFontLabelLinkage = arg11;
            this._winUpToValue = arg12;
            return;
        }

        public function get duration():int
        {
            return this._duration;
        }

        public function get priority():int
        {
            return this._priority;
        }

        public function get canBeRandom():Boolean
        {
            return this._canBeRandom;
        }

        public function get x():Number
        {
            return this._x;
        }

        public function get y():Number
        {
            return this._y;
        }

        public function get instance():flash.display.MovieClip
        {
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._instanceId);
            loc1.x = this.x;
            loc1.y = this.y;
            loc1.name = this.id;
            return loc1;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get removeAtStartSpin():Boolean
        {
            return this._removeAtStartSpin;
        }

        public function get instanceId():String
        {
            return this._instanceId;
        }

        public function get parentMCLinkage():String
        {
            return this._parentMCLinkage;
        }

        public function get mcLinkage():String
        {
            return this._movieClipLinkage;
        }

        public function get customFontLabelLinkage():String
        {
            return this._customFontLabelLinkage;
        }

        public function get winUpToValue():String
        {
            return this._winUpToValue;
        }

        internal var _duration:int;

        internal var _priority:int;

        internal var _canBeRandom:Boolean;

        internal var _x:Number;

        internal var _y:Number;

        internal var _instanceId:String;

        internal var _id:String;

        internal var _removeAtStartSpin:Boolean=false;

        internal var _parentMCLinkage:String;

        internal var _movieClipLinkage:String;

        internal var _customFontLabelLinkage:String;

        internal var _winUpToValue:String;
    }
}


//            class RuleContainer
package mgs.aurora.slots.components.modals 
{
    import mgs.aurora.games.base.*;
    
    public class RuleContainer extends mgs.aurora.games.base.BaseClass implements mgs.aurora.slots.components.modals.IRuleContainer
    {
        public function RuleContainer(arg1:String, arg2:Array)
        {
            super();
            setClassDescription("mgs.aurora.slots.components.modals.ModalContainer");
            this._func = this.func;
            this._randomFunc = this.func;
            this._id = arg1;
            this._args = arg2;
            return;
        }

        public function get func():Function
        {
            return this._func;
        }

        public function get randomFunc():Function
        {
            return this._randomFunc;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get argument():Array
        {
            return this._args;
        }

        public function get validate():Boolean
        {
            if (this._func == null) 
            {
                throw new Error("No method was set for rule [" + this.id + "]. Can\'t call the method.");
            }
            return this._func.apply(this._func, this._args);
        }

        public function get validateRandom():Boolean
        {
            if (this._randomFunc != null) 
            {
                return this._randomFunc.apply(this._randomFunc, this._args);
            }
            return this._func.apply(this._func, this._args);
        }

        public function set method(arg1:Function):void
        {
            this._func = arg1;
            return;
        }

        public function set randomRule(arg1:Function):void
        {
            this._randomFunc = arg1;
            return;
        }

        internal var _func:Function;

        internal var _randomFunc:Function;

        internal var _id:String;

        internal var _args:Array;
    }
}


//          package particlerush
//            package data
//              class ParticleRushData
package mgs.aurora.slots.components.particlerush.data 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.slots.components.particlerush.particleRushInterfaces.*;
    
    public class ParticleRushData extends Object implements mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticleRushData
    {
        public function ParticleRushData()
        {
            super();
            return;
        }

        public function get MaxXPos():int
        {
            return this._maxXPos;
        }

        public function set MinYPos(arg1:int):void
        {
            this._minYPos = arg1;
            return;
        }

        public function get MinYPos():int
        {
            return this._minYPos;
        }

        public function set MaxYPos(arg1:int):void
        {
            this._maxYPos = arg1;
            return;
        }

        public function get MaxYPos():int
        {
            return this._maxYPos;
        }

        public function set CommandEndTime(arg1:uint):void
        {
            this._commandEndTime = arg1;
            return;
        }

        public function get CommandEndTime():uint
        {
            return this._commandEndTime;
        }

        public function set RushWidth(arg1:uint):void
        {
            this._rushWidth = arg1;
            return;
        }

        public function get ZEnabled():Boolean
        {
            return this._zEnabled;
        }

        public function get RushWidth():uint
        {
            return this._rushWidth;
        }

        public function set BezierPathsEnabled(arg1:Boolean):void
        {
            this._bezierPathsEnabled = arg1;
            return;
        }

        public function get BezierPathsEnabled():Boolean
        {
            return this._bezierPathsEnabled;
        }

        public function set BezierPaths(arg1:XMLList):void
        {
            this._bezierPaths = arg1;
            return;
        }

        public function get BezierPaths():XMLList
        {
            return this._bezierPaths;
        }

        public function set AssetId(arg1:String):void
        {
            this._assetId = arg1;
            return;
        }

        public function get AssetId():String
        {
            return this._assetId;
        }

        public function set Id(arg1:String):void
        {
            this._id = arg1;
            return;
        }

        public function set ImmediateKill(arg1:Boolean):void
        {
            this._immediateKill = arg1;
            return;
        }

        public function get ImmediateKill():Boolean
        {
            return this._immediateKill;
        }

        public function set ThrowRate(arg1:uint):void
        {
            if (arg1 > 0) 
            {
                this._throwRate = arg1;
            }
            return;
        }

        public function get ThrowRate():uint
        {
            return this._throwRate;
        }

        public function set ParticlesLimit(arg1:uint):void
        {
            this._particlesLimit = arg1;
            return;
        }

        public function get ParticlesLimit():uint
        {
            return this._particlesLimit;
        }

        public function get name():String
        {
            return NAME;
        }

        public function dispose():void
        {
            this._bezierPaths = null;
            return;
        }

        public function set ParticleRushLayer(arg1:flash.display.Sprite):void
        {
            this._particleRushLayer = arg1;
            return;
        }

        public function get ParticleRushLayer():flash.display.Sprite
        {
            return this._particleRushLayer;
        }

        public function set GameEventDispatcher(arg1:flash.events.EventDispatcher):void
        {
            this._gameEventDispatcher = arg1;
            return;
        }

        public function get GameEventDispatcher():flash.events.EventDispatcher
        {
            return this._gameEventDispatcher;
        }

        public function set ToThrowAtOnce(arg1:uint):void
        {
            this._toThrowAtOnce = arg1;
            return;
        }

        public function get ToThrowAtOnce():uint
        {
            return this._toThrowAtOnce;
        }

        public function set Continuous(arg1:Boolean):void
        {
            this._continuous = arg1;
            return;
        }

        public function get Continuous():Boolean
        {
            return this._continuous;
        }

        public function set TotalToThrow(arg1:uint):void
        {
            this._totalToThrow = arg1;
            this._totalToThrow = this._totalToThrow <= 0 ? 1 : this._totalToThrow;
            return;
        }

        public function get TotalToThrow():uint
        {
            return this._totalToThrow;
        }

        public function set YIncrement(arg1:int):void
        {
            this._yIncrement = arg1;
            return;
        }

        public function get YIncrement():int
        {
            return this._yIncrement;
        }

        public function set ZEnabled(arg1:Boolean):void
        {
            this._zEnabled = arg1;
            return;
        }

        public function get Id():String
        {
            return this._id;
        }

        public function set ZIncrement(arg1:int):void
        {
            this._zIncrement = arg1;
            return;
        }

        public function get ZIncrement():int
        {
            return this._zIncrement;
        }

        public function set ZLimit(arg1:int):void
        {
            this._zLimit = arg1;
            return;
        }

        public function get ZLimit():int
        {
            return this._zLimit;
        }

        public function set StartPos(arg1:flash.geom.Point):void
        {
            this._startPos = arg1;
            return;
        }

        public function get StartPos():flash.geom.Point
        {
            return this._startPos;
        }

        public function set Friction(arg1:Number):void
        {
            this._friction = arg1;
            return;
        }

        public function get Friction():Number
        {
            return this._friction;
        }

        public function set Gravity(arg1:Number):void
        {
            this._gravity = arg1;
            return;
        }

        public function get Gravity():Number
        {
            return this._gravity;
        }

        public function set MinXPos(arg1:int):void
        {
            this._minXPos = arg1;
            return;
        }

        public function get MinXPos():int
        {
            return this._minXPos;
        }

        public function set MaxXPos(arg1:int):void
        {
            arg1 = this._maxXPos;
            return;
        }

        public static const NAME:String="ParticleRushData";

        internal var _particleRushLayer:flash.display.Sprite;

        internal var _gameEventDispatcher:flash.events.EventDispatcher;

        internal var _toThrowAtOnce:uint;

        internal var _continuous:Boolean;

        internal var _totalToThrow:uint;

        internal var _yIncrement:int;

        internal var _zEnabled:Boolean;

        internal var _zIncrement:int=0;

        internal var _startPos:flash.geom.Point;

        internal var _friction:Number;

        internal var _gravity:Number;

        internal var _minXPos:int=0;

        internal var _maxXPos:int=800;

        internal var _minYPos:int=0;

        internal var _maxYPos:int=600;

        internal var _commandEndTime:uint=2500;

        internal var _rushWidth:uint=100;

        internal var _bezierPathsEnabled:Boolean;

        internal var _bezierPaths:XMLList;

        internal var _assetId:String;

        internal var _id:String;

        internal var _immediateKill:Boolean=true;

        internal var _throwRate:uint=500;

        internal var _particlesLimit:uint=100;

        internal var _zLimit:int=100;
    }
}


//            package particleEmitter
//              class BezierParticle
package mgs.aurora.slots.components.particlerush.particleEmitter 
{
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.slots.components.particlerush.particleRushInterfaces.*;
    import org.flashdevelop.utils.*;
    
    public class BezierParticle extends mgs.aurora.slots.components.particlerush.particleEmitter.BezierParticleModel implements mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticle
    {
        public function BezierParticle(arg1:XML, arg2:flash.display.MovieClip, arg3:int, arg4:int)
        {
            var loc1:*=new flash.geom.Point(arg1.@startX, arg1.@startY);
            super(arg1, loc1, arg3, arg4);
            this._particleRef = arg2;
            this.setPosition();
            return;
        }

        internal function setPosition():void
        {
            var loc1:*=NaN;
            if (!this._removedFromLayer) 
            {
                this._particleRef.x = _position.x;
                this._particleRef.y = _position.y;
                if (_zPosition < _zLimit) 
                {
                    loc1 = Number((this.Z_SCALE_FACTOR + _particleZIncrement) / this.Z_SCALE_FACTOR);
                    this._particleRef.scaleX = this._particleRef.scaleX * loc1;
                    this._particleRef.scaleY = this._particleRef.scaleY * loc1;
                }
                if (this.shouldRemoveFromLayer()) 
                {
                    this.removeFromLayer();
                }
            }
            return;
        }

        internal function shouldRemoveFromLayer():Boolean
        {
            if (_t >= 1) 
            {
                return true;
            }
            return false;
        }

        public function removeFromLayer():void
        {
            var loc1:*;
            if (!this._removedFromLayer) 
            {
                try 
                {
                    this._removedFromLayer = true;
                    this._particleRef.parent.removeChild(this._particleRef);
                }
                catch (error:ReferenceError)
                {
                    org.flashdevelop.utils.FlashConnect.trace("Particle::removeFromLayer::removeFromLayer() error = " + error.message);
                }
            }
            return;
        }

        public function get RemovedFromLayer():Boolean
        {
            return this._removedFromLayer;
        }

        public override function update():void
        {
            var loc1:*;
            try 
            {
                super.update();
                this.setPosition();
            }
            catch (error:ReferenceError)
            {
                org.flashdevelop.utils.FlashConnect.trace("Particle::update() error = " + error.message);
            }
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            this._particleRef = null;
            return;
        }

        internal const Z_SCALE_FACTOR:Number=1000;

        internal var _particleRef:flash.display.MovieClip;

        internal var _removedFromLayer:Boolean=false;
    }
}


//              class BezierParticleModel
package mgs.aurora.slots.components.particlerush.particleEmitter 
{
    import flash.geom.*;
    
    public class BezierParticleModel extends Object
    {
        public function BezierParticleModel(arg1:XML, arg2:flash.geom.Point, arg3:int, arg4:int)
        {
            super();
            this._bezierPath = arg1;
            this._position = arg2;
            this._particleZIncrement = arg3;
            this._zLimit = arg4;
            this._a = arg2;
            this._b = new flash.geom.Point(arg1.@finishX, arg1.@finishY);
            this._v1 = new flash.geom.Point(arg1.@v1X, arg1.@v1Y);
            this._v2 = new flash.geom.Point(arg1.@v2X, arg1.@v2Y);
            this._t = 0;
            return;
        }

        public function update():void
        {
            this.updateUsingBezierPath();
            return;
        }

        internal function updateUsingBezierPath():void
        {
            this._t = this._t + 0.025;
            if (this._t <= 1) 
            {
                this._position = cspline(this._a, this._v1, this._b, this._v2, this._t);
            }
            if (this._zPosition < this._zLimit) 
            {
                this._zPosition = this._zPosition + this._particleZIncrement;
            }
            return;
        }

        public function dispose():void
        {
            this._position = null;
            return;
        }

        public static function cspline(arg1:flash.geom.Point, arg2:flash.geom.Point, arg3:flash.geom.Point, arg4:flash.geom.Point, arg5:Number):flash.geom.Point
        {
            var loc1:*=arg1.add(arg2);
            var loc2:*=arg3.add(arg4);
            var loc3:*=arg5;
            var loc4:*=1 - arg5;
            var loc5:*=mul1(arg1, Math.pow(loc4, 3));
            var loc6:*=mul1(mul1(mul1(loc1, 3), Math.pow(loc4, 2)), loc3);
            var loc7:*=mul1(mul1(mul1(loc2, 3), loc4), Math.pow(loc3, 2));
            var loc8:*=mul1(arg3, Math.pow(loc3, 3));
            return loc5.add(loc6).add(loc7).add(loc8);
        }

        public static function mul1(arg1:flash.geom.Point, arg2:Number):flash.geom.Point
        {
            return new flash.geom.Point(arg1.x * arg2, arg1.y * arg2);
        }

        protected var _bezierPath:XML;

        protected var _position:flash.geom.Point;

        protected var _zPosition:int=0;

        protected var _particleZIncrement:int;

        protected var _zLimit:int;

        internal var _a:flash.geom.Point;

        protected var _b:flash.geom.Point;

        internal var _v1:flash.geom.Point;

        internal var _v2:flash.geom.Point;

        protected var _t:Number;
    }
}


//              class Particle
package mgs.aurora.slots.components.particlerush.particleEmitter 
{
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.slots.components.particlerush.particleRushInterfaces.*;
    import org.flashdevelop.utils.*;
    
    public class Particle extends mgs.aurora.slots.components.particlerush.particleEmitter.ParticleModel implements mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticle
    {
        public function Particle(arg1:flash.display.MovieClip, arg2:flash.geom.Point, arg3:flash.geom.Point, arg4:int, arg5:int, arg6:int, arg7:Number, arg8:int, arg9:int, arg10:int, arg11:int)
        {
            super(arg2, arg3, arg4, arg5, arg6, arg7);
            this._particleRef = arg1;
            this._minXPos = arg8;
            this._maxXPos = arg9;
            this._minYPos = arg10;
            this._maxYPos = arg11;
            this.setPosition();
            return;
        }

        internal function setPosition():void
        {
            var loc1:*=NaN;
            if (!this._removedFromLayer) 
            {
                this._particleRef.x = _position.x;
                this._particleRef.y = _position.y;
                if (_zPosition < _zLimit) 
                {
                    loc1 = Number((this.Z_SCALE_FACTOR + _particleZIncrement) / this.Z_SCALE_FACTOR);
                    this._particleRef.scaleX = this._particleRef.scaleX * loc1;
                    this._particleRef.scaleY = this._particleRef.scaleY * loc1;
                }
                if (this.shouldRemoveFromLayer()) 
                {
                    this.removeFromLayer();
                }
            }
            return;
        }

        internal function shouldRemoveFromLayer():Boolean
        {
            if (_position.x < this._minXPos) 
            {
                return true;
            }
            if (_position.x > this._maxXPos) 
            {
                return true;
            }
            if (_position.y < this._minYPos) 
            {
                return true;
            }
            if (_position.y > this._maxYPos) 
            {
                return true;
            }
            return false;
        }

        public function removeFromLayer():void
        {
            var loc1:*;
            if (!this._removedFromLayer) 
            {
                try 
                {
                    this._removedFromLayer = true;
                    this._particleRef.parent.removeChild(this._particleRef);
                }
                catch (error:ReferenceError)
                {
                    org.flashdevelop.utils.FlashConnect.trace("Particle::removeFromLayer::removeFromLayer() error = " + error.message);
                }
            }
            return;
        }

        public function get RemovedFromLayer():Boolean
        {
            return this._removedFromLayer;
        }

        public override function update():void
        {
            var loc1:*;
            try 
            {
                super.update();
                this.setPosition();
            }
            catch (error:ReferenceError)
            {
                org.flashdevelop.utils.FlashConnect.trace("Particle::update() error = " + error.message);
            }
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            this._particleRef = null;
            return;
        }

        internal const Z_SCALE_FACTOR:Number=1000;

        internal var _particleRef:flash.display.MovieClip;

        internal var _minXPos:int;

        internal var _maxXPos:int;

        internal var _minYPos:int;

        internal var _maxYPos:int;

        internal var _removedFromLayer:Boolean=false;
    }
}


//              class ParticleEmitter
package mgs.aurora.slots.components.particlerush.particleEmitter 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.slots.components.particlerush.particleRushInterfaces.*;
    import org.flashdevelop.utils.*;
    
    public class ParticleEmitter extends Object
    {
        public function ParticleEmitter(arg1:flash.display.Sprite, arg2:String=null, arg3:XMLList=null, arg4:uint=100)
        {
            super();
            this._particleRushLayer = arg1;
            this._assetId = arg2;
            this._bezierPaths = arg3;
            this._particleEmitterVector = new Vector.<mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticle>();
            this._particlesLimit = arg4;
            return;
        }

        public function emitParticleBezier(arg1:int, arg2:int):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._particleEmitterVector.length < this._particlesLimit) 
            {
                this._particleMC = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._assetId);
                this._particleMC.mouseEnabled = false;
                this._particleMC.buttonMode = false;
                this._particleRushLayer.addChild(this._particleMC);
                this._particleMC.gotoAndPlay(Math.floor(Math.random() * this._particleMC.totalFrames));
                arg1 = (Math.random() - Math.random()) * arg1;
                loc1 = this._bezierPaths.path[this._roundRobinBezier];
                this._roundRobinBezier = this._roundRobinBezier + 1;
                if (this._roundRobinBezier >= this._bezierPaths.path.length()) 
                {
                    this._roundRobinBezier = 0;
                }
                loc2 = new mgs.aurora.slots.components.particlerush.particleEmitter.BezierParticle(loc1, this._particleMC, arg1, arg2);
                this._particleEmitterVector.push(loc2);
                var loc3:*;
                var loc4:*=((loc3 = this)._numParticlesEmitted + 1);
                loc3._numParticlesEmitted = loc4;
            }
            return;
        }

        public function emitParticle(arg1:Number, arg2:Number, arg3:flash.geom.Point, arg4:int, arg5:int, arg6:int, arg7:int, arg8:int, arg9:int, arg10:int, arg11:int):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=null;
            if (this._particleEmitterVector.length < this._particlesLimit) 
            {
                this._particleMC = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._assetId);
                this._particleMC.mouseEnabled = false;
                this._particleMC.buttonMode = false;
                this._particleRushLayer.addChild(this._particleMC);
                this._particleMC.gotoAndPlay(Math.floor(Math.random() * this._particleMC.totalFrames));
                loc1 = (Math.random() - Math.random()) * arg4;
                loc2 = (Math.random() - Math.random()) * arg6;
                loc3 = new mgs.aurora.slots.components.particlerush.particleEmitter.Particle(this._particleMC, arg3, new flash.geom.Point(loc1, arg5), loc2, arg7, arg1, arg2, arg8, arg9, arg10, arg11);
                this._particleEmitterVector.push(loc3);
                var loc4:*;
                var loc5:*=((loc4 = this)._numParticlesEmitted + 1);
                loc4._numParticlesEmitted = loc5;
            }
            return;
        }

        public function update():void
        {
            var loc1:*=0;
            while (loc1 < this._particleEmitterVector.length) 
            {
                this._particleEmitterVector[loc1].update();
                if (this._particleEmitterVector[loc1].RemovedFromLayer) 
                {
                    this._particleEmitterVector[loc1].dispose();
                    this._particleEmitterVector.splice(loc1, 1);
                    --loc1;
                }
                ++loc1;
            }
            return;
        }

        public function removeParticlesFromLayer():void
        {
            var particle:mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticle;

            var loc1:*;
            particle = null;
            var loc2:*=0;
            var loc3:*=this._particleEmitterVector;
            for each (particle in loc3) 
            {
            };
            return;
        }

        public function get NumParticlesEmitted():uint
        {
            return this._numParticlesEmitted;
        }

        public function dispose():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._particleEmitterVector;
            for each (loc1 in loc3) 
            {
                loc1.dispose();
            }
            this._particleEmitterVector = null;
            return;
        }

        internal var _particleRushLayer:flash.display.Sprite;

        internal var _assetId:String;

        internal var _particleMC:flash.display.MovieClip;

        internal var _bezierPaths:XMLList;

        internal var _roundRobinBezier:uint=0;

        internal var _particleEmitterVector:__AS3__.vec.Vector.<mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticle>;

        internal var _numParticlesEmitted:uint;

        internal var _particlesLimit:uint=100;
    }
}


//              class ParticleModel
package mgs.aurora.slots.components.particlerush.particleEmitter 
{
    import flash.geom.*;
    
    public class ParticleModel extends Object
    {
        public function ParticleModel(arg1:flash.geom.Point, arg2:flash.geom.Point, arg3:int, arg4:int, arg5:int, arg6:Number)
        {
            super();
            this._position = arg1;
            this._vector = arg2;
            this._particleZIncrement = arg3;
            this._zLimit = arg4;
            this._gravity = arg5;
            this._friction = arg6;
            return;
        }

        public function update():void
        {
            this.updateUsingVector();
            return;
        }

        internal function updateUsingVector():void
        {
            this._position.x = this._position.x + this._vector.x;
            this._position.y = this._position.y + this._vector.y;
            this._vector.y = this._vector.y + this._gravity;
            this._vector.x = this._vector.x * this._friction;
            if (this._zPosition < this._zLimit) 
            {
                this._zPosition = this._zPosition + this._particleZIncrement;
            }
            return;
        }

        public function dispose():void
        {
            this._position = null;
            this._vector = null;
            return;
        }

        protected var _position:flash.geom.Point;

        protected var _zPosition:int=0;

        protected var _vector:flash.geom.Point;

        protected var _particleZIncrement:int;

        protected var _zLimit:int;

        internal var _gravity:int;

        internal var _friction:Number;
    }
}


//            package particleRushInterfaces
//              class IParticle
package mgs.aurora.slots.components.particlerush.particleRushInterfaces 
{
    public interface IParticle
    {
        function removeFromLayer():void;

        function get RemovedFromLayer():Boolean;

        function update():void;

        function dispose():void;
    }
}


//              class IParticleRushData
package mgs.aurora.slots.components.particlerush.particleRushInterfaces 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    
    public interface IParticleRushData
    {
        function set ParticleRushLayer(arg1:flash.display.Sprite):void;

        function get ParticleRushLayer():flash.display.Sprite;

        function set GameEventDispatcher(arg1:flash.events.EventDispatcher):void;

        function get GameEventDispatcher():flash.events.EventDispatcher;

        function set ToThrowAtOnce(arg1:uint):void;

        function get ToThrowAtOnce():uint;

        function set Continuous(arg1:Boolean):void;

        function get Continuous():Boolean;

        function set TotalToThrow(arg1:uint):void;

        function get TotalToThrow():uint;

        function set YIncrement(arg1:int):void;

        function get YIncrement():int;

        function set ZEnabled(arg1:Boolean):void;

        function get ZEnabled():Boolean;

        function set ZIncrement(arg1:int):void;

        function get ZIncrement():int;

        function set ZLimit(arg1:int):void;

        function get ZLimit():int;

        function set StartPos(arg1:flash.geom.Point):void;

        function get StartPos():flash.geom.Point;

        function set Friction(arg1:Number):void;

        function get Friction():Number;

        function set Gravity(arg1:Number):void;

        function get Gravity():Number;

        function set MinXPos(arg1:int):void;

        function get MinXPos():int;

        function set MaxXPos(arg1:int):void;

        function get MaxXPos():int;

        function set MinYPos(arg1:int):void;

        function get MinYPos():int;

        function set MaxYPos(arg1:int):void;

        function get MaxYPos():int;

        function set CommandEndTime(arg1:uint):void;

        function get CommandEndTime():uint;

        function set RushWidth(arg1:uint):void;

        function get RushWidth():uint;

        function set BezierPathsEnabled(arg1:Boolean):void;

        function get BezierPathsEnabled():Boolean;

        function set BezierPaths(arg1:XMLList):void;

        function get BezierPaths():XMLList;

        function set AssetId(arg1:String):void;

        function get AssetId():String;

        function set Id(arg1:String):void;

        function get Id():String;

        function set ImmediateKill(arg1:Boolean):void;

        function get ImmediateKill():Boolean;

        function set ThrowRate(arg1:uint):void;

        function get ThrowRate():uint;

        function set ParticlesLimit(arg1:uint):void;

        function get ParticlesLimit():uint;

        function get name():String;

        function dispose():void;
    }
}


//            class ParticleRush
package mgs.aurora.slots.components.particlerush 
{
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import flash.utils.*;
    import mgs.aurora.slots.components.particlerush.particleEmitter.*;
    import mgs.aurora.slots.components.particlerush.particleRushInterfaces.*;
    import org.flashdevelop.utils.*;
    
    public class ParticleRush extends flash.events.EventDispatcher
    {
        public function ParticleRush(arg1:mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticleRushData)
        {
            super();
            this._data = arg1;
            this._particleRushLayer = this._data.ParticleRushLayer;
            if (!this._data.ZEnabled) 
            {
                this._data.ZIncrement = 0;
            }
            this._particleEmitter = new mgs.aurora.slots.components.particlerush.particleEmitter.ParticleEmitter(this._particleRushLayer, this._data.AssetId, this._data.BezierPaths, this._data.ParticlesLimit);
            this._particleRushLayer.addEventListener(flash.events.Event.ENTER_FRAME, this.onParticleRender, false, 0, true);
            this.throwParticles();
            this._throwParticleTimer = new flash.utils.Timer(this._data.ThrowRate, 0);
            this._throwParticleTimer.addEventListener(flash.events.TimerEvent.TIMER, this.throwParticleTimerListener);
            this._throwParticleTimer.start();
            return;
        }

        public function get Id():String
        {
            return this._data.Id;
        }

        public function endParticleRush():void
        {
            this._endingParticleRush = true;
            if (this._data.ImmediateKill) 
            {
                this.complete();
            }
            else 
            {
                this.startTimer();
            }
            return;
        }

        internal function timerComplete(arg1:flash.events.TimerEvent):void
        {
            this.complete();
            return;
        }

        internal function emitParticles(arg1:uint):void
        {
            var loc1:*=0;
            while (loc1 < arg1) 
            {
                if (this._data.BezierPathsEnabled) 
                {
                    this._particleEmitter.emitParticleBezier(this._data.ZIncrement, this._data.ZLimit);
                }
                else 
                {
                    this._particleEmitter.emitParticle(this._data.Gravity, this._data.Friction, new flash.geom.Point(this._data.StartPos.x, this._data.StartPos.y), this._data.RushWidth, this._data.YIncrement, this._data.ZIncrement, this._data.ZLimit, this._data.MinXPos, this._data.MaxXPos, this._data.MinYPos, this._data.MaxYPos);
                }
                ++loc1;
            }
            return;
        }

        internal function onParticleRender(arg1:flash.events.Event):void
        {
            if (this._particleEmitter != null) 
            {
                this._particleEmitter.update();
            }
            return;
        }

        internal function throwParticleTimerListener(arg1:flash.events.TimerEvent):void
        {
            this.throwParticles();
            return;
        }

        internal function throwParticles():void
        {
            var loc1:*=0;
            if (this._particleEmitter != null) 
            {
                if (this._data.Continuous) 
                {
                    if (!this._endingParticleRush) 
                    {
                        this.emitParticles(this._data.ToThrowAtOnce);
                    }
                }
                else if (!this._timerStarted) 
                {
                    if (this._particleEmitter.NumParticlesEmitted < this._data.TotalToThrow) 
                    {
                        if (!this._endingParticleRush) 
                        {
                            loc1 = this._data.ToThrowAtOnce;
                            if (loc1 > this._data.TotalToThrow - this._particleEmitter.NumParticlesEmitted) 
                            {
                                loc1 = this._data.TotalToThrow - this._particleEmitter.NumParticlesEmitted;
                            }
                            this.emitParticles(loc1);
                        }
                    }
                    else 
                    {
                        this.startTimer();
                    }
                }
            }
            return;
        }

        internal function startTimer():void
        {
            if (!this._timerStarted) 
            {
                this._timerStarted = true;
                this._timer = new flash.utils.Timer(this._data.CommandEndTime);
                this._timer.addEventListener(flash.events.TimerEvent.TIMER, this.timerComplete, false, 0, true);
                this._timer.start();
            }
            return;
        }

        public function complete():void
        {
            var loc1:*;
            if (this._timer != null) 
            {
                if (this._timer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._timer.stop();
                    this._timer.removeEventListener(flash.events.TimerEvent.TIMER, this.timerComplete);
                }
            }
            if (this._throwParticleTimer != null) 
            {
                if (this._throwParticleTimer.hasEventListener(flash.events.TimerEvent.TIMER)) 
                {
                    this._throwParticleTimer.stop();
                    this._throwParticleTimer.removeEventListener(flash.events.TimerEvent.TIMER, this.throwParticleTimerListener);
                }
            }
            try 
            {
                if (this._particleEmitter != null) 
                {
                    this._particleEmitter.removeParticlesFromLayer();
                    this._particleEmitter.dispose();
                    this._particleEmitter = null;
                }
            }
            catch (e:Error)
            {
                org.flashdevelop.utils.FlashConnect.trace("ParticleRush complete Error = " + e.message);
            }
            this._data = null;
            this._particleRushComplete = true;
            return;
        }

        public function get particleRushComplete():Boolean
        {
            return this._particleRushComplete;
        }

        public function getName():String
        {
            return NAME;
        }

        public static const NAME:String="ParticleRush";

        internal var _data:mgs.aurora.slots.components.particlerush.particleRushInterfaces.IParticleRushData;

        internal var _particleRushLayer:flash.display.Sprite;

        internal var _particleEmitter:mgs.aurora.slots.components.particlerush.particleEmitter.ParticleEmitter;

        internal var _endingParticleRush:Boolean=false;

        internal var _timer:flash.utils.Timer;

        internal var _timerStarted:Boolean=false;

        internal var _particleRushComplete:Boolean=false;

        internal var _throwParticleTimer:flash.utils.Timer;
    }
}


//          package payline
//            package events
//              class PaylineSelectEvent
package mgs.aurora.slots.components.payline.events 
{
    import flash.events.*;
    
    public class PaylineSelectEvent extends flash.events.Event
    {
        public function PaylineSelectEvent(arg1:String, arg2:int, arg3:String, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this.lineID = arg2;
            this.activePaylineIDs = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.slots.components.payline.events.PaylineSelectEvent(type, this.lineID, this.activePaylineIDs, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("PaylineSelectEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        public static const SELECT:String="select";

        public static const MOUSE_OVER:String="mouseover";

        public static const MOUSE_OUT:String="mouseout";

        public var lineID:int;

        public var activePaylineIDs:String;
    }
}


//            class ILineGenerator
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public interface ILineGenerator
    {
        function addPuncher(arg1:mgs.aurora.slots.components.payline.ILinePuncher):void;

        function generateLineBitmapData(arg1:int, arg2:__AS3__.vec.Vector.<uint>):flash.display.BitmapData;

        function generateLineSprite(arg1:int, arg2:__AS3__.vec.Vector.<uint>):flash.display.Sprite;
    }
}


//            class ILinePuncher
package mgs.aurora.slots.components.payline 
{
    public interface ILinePuncher
    {
    }
}


//            class IPayline
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public interface IPayline
    {
        function set coinsBet(arg1:Number):void;

        function get coinsBet():Number;

        function set coinsWon(arg1:Number):void;

        function get coinsWon():Number;

        function get cost():Number;

        function set drawObject(arg1:mgs.aurora.slots.components.payline.IPaylineDrawer):void;

        function get id():int;

        function get isActive():Boolean;

        function set isActive(arg1:Boolean):void;

        function get isSelected():Boolean;

        function set isSelected(arg1:Boolean):void;

        function get state():String;

        function setWins(arg1:__AS3__.vec.Vector.<int>):void;

        function getStateInstance(arg1:String):flash.display.DisplayObject;

        function setSelectorLabelText(arg1:String):void;

        function setSelectorLabelVisibility(arg1:Boolean):void;

        function setSelectorLabelActive(arg1:Boolean):void;
    }
}


//            class IPaylineBuilder
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    
    public interface IPaylineBuilder
    {
        function build():__AS3__.vec.Vector.<mgs.aurora.slots.components.payline.IPayline>;
    }
}


//            class IPaylineController
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    
    public interface IPaylineController
    {
        function build(arg1:mgs.aurora.slots.components.payline.IPaylineBuilder):void;

        function disable():void;

        function enable():void;

        function getActivePaylines():String;

        function setActivePaylines(arg1:String):void;

        function setSelectorText(arg1:int, arg2:String):void;

        function setWinningPaylines(arg1:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>):void;

        function updateSelectors():void;

        function showPaylines(arg1:__AS3__.vec.Vector.<int>, arg2:Boolean=true, arg3:Boolean=true):void;

        function showWinlines(arg1:__AS3__.vec.Vector.<int>, arg2:Boolean=true):void;
    }
}


//            class IPaylineDrawer
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public interface IPaylineDrawer extends mgs.aurora.games.common.components.generic.IDisposable
    {
        function drawState(arg1:String, arg2:int, arg3:__AS3__.vec.Vector.<int>=null):flash.display.DisplayObject;

        function set lineGenerator(arg1:mgs.aurora.slots.components.payline.ILineGenerator):void;

        function get inactiveFont():mgs.aurora.games.common.components.utils.CustomFont;

        function get activeFont():mgs.aurora.games.common.components.utils.CustomFont;

        function set labelsHolder(arg1:flash.display.DisplayObjectContainer):void;

        function getSelectorLabels(arg1:int):__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>;
    }
}


//            class IPaylineSelectors
package mgs.aurora.slots.components.payline 
{
    import flash.display.*;
    
    public interface IPaylineSelectors
    {
        function getHitmapInstance():flash.display.MovieClip;

        function enable():void;

        function disable():void;

        function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void;

        function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void;
    }
}


//            class Payline
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.common.components.utils.*;
    
    public class Payline extends flash.events.EventDispatcher implements mgs.aurora.slots.components.payline.IPayline, mgs.aurora.games.common.components.generic.IDisposable
    {
        public function Payline(arg1:int, arg2:Number, arg3:flash.display.DisplayObjectContainer)
        {
            super();
            this._id = arg1;
            this._cost = arg2;
            this._state = mgs.aurora.slots.components.payline.Payline.HIDDEN;
            this.matchPos = null;
            this._displayObjectsCache = new Object();
            this._selectorInstances = new Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>(0);
            this._labelsHolder = arg3;
            return;
        }

        internal function forEachSelector_dispose(arg1:mgs.aurora.games.common.components.utils.CustomFontLabel, arg2:int, arg3:__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>):void
        {
            arg1.dispose();
            arg1 = null;
            return;
        }

        internal function forEachSelector_active(arg1:mgs.aurora.games.common.components.utils.CustomFontLabel, arg2:int, arg3:__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>):void
        {
            arg1.font = this._selectorActive ? this._drawObject.activeFont : this._drawObject.inactiveFont;
            return;
        }

        internal function forEachSelector_visible(arg1:mgs.aurora.games.common.components.utils.CustomFontLabel, arg2:int, arg3:__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>):void
        {
            arg1.visible = this._selectorVis;
            return;
        }

        internal function forEachSelector_text(arg1:mgs.aurora.games.common.components.utils.CustomFontLabel, arg2:int, arg3:__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>):void
        {
            arg1.text = this._selectorText;
            return;
        }

        public function get cost():Number
        {
            return this._cost;
        }

        public function setSelectorLabelActive(arg1:Boolean):void
        {
            this._selectorActive = arg1;
            this._selectorInstances.forEach(this.forEachSelector_active);
            return;
        }

        public function setSelectorLabelVisibility(arg1:Boolean):void
        {
            this._selectorVis = arg1;
            this._selectorInstances.forEach(this.forEachSelector_visible);
            return;
        }

        public function setSelectorLabelText(arg1:String):void
        {
            this._selectorText = arg1;
            this._selectorInstances.forEach(this.forEachSelector_text);
            return;
        }

        public function getStateInstance(arg1:String):flash.display.DisplayObject
        {
            var loc1:*=null;
            if (arg1 == WINLINE_HIGH || arg1 == WINLINE_LOW) 
            {
                loc1 = arg1 + this.matchPos.length.toString();
            }
            else 
            {
                loc1 = arg1;
            }
            var loc2:*=this._displayObjectsCache[loc1];
            if (!loc2) 
            {
                loc2 = this._drawObject.drawState(arg1, this.id, this.matchPos);
                this._displayObjectsCache[loc1] = loc2;
                this._selectorInstances = this._drawObject.getSelectorLabels(this._id);
            }
            this._state = arg1;
            return loc2;
        }

        public function setWins(arg1:__AS3__.vec.Vector.<int>):void
        {
            this.matchPos = arg1;
            return;
        }

        public function set drawObject(arg1:mgs.aurora.slots.components.payline.IPaylineDrawer):void
        {
            this._drawObject = arg1;
            this._drawObject.labelsHolder = this._labelsHolder;
            return;
        }

        public function get coinsBet():Number
        {
            return this._coinsBet;
        }

        public function set coinsBet(arg1:Number):void
        {
            this._coinsBet = arg1;
            return;
        }

        public function get coinsWon():Number
        {
            return this._coinsWon;
        }

        public function set coinsWon(arg1:Number):void
        {
            this._coinsWon = arg1;
            return;
        }

        public function get state():String
        {
            return this._state;
        }

        public function get isSelected():Boolean
        {
            return this.selected;
        }

        public function set isSelected(arg1:Boolean):void
        {
            this.selected = arg1;
            return;
        }

        public function get isActive():Boolean
        {
            return this.active;
        }

        public function set isActive(arg1:Boolean):void
        {
            this.active = arg1;
            return;
        }

        public function get id():int
        {
            return this._id;
        }

        public function dispose():void
        {
            this._selectorInstances.forEach(this.forEachSelector_dispose);
            this._selectorInstances = null;
            this._displayObjectsCache = null;
            this._drawObject.dispose();
            this._drawObject = null;
            this.matchPos = null;
            return;
        }

        public static const INACTIVE:String="inactive";

        public static const HIDDEN:String="hidden";

        public static const ACTIVE:String="active";

        public static const PAYLINE_HIGH:String="paylinehigh";

        public static const PAYLINE_LOW:String="paylinelow";

        public static const WINLINE_HIGH:String="winlinehigh";

        public static const WINLINE_LOW:String="winlinelow";

        internal var active:Boolean=false;

        internal var selected:Boolean=false;

        internal var _state:String;

        internal var _coinsBet:uint;

        internal var _drawObject:mgs.aurora.slots.components.payline.IPaylineDrawer;

        internal var _cost:Number;

        internal var _coinsWon:uint;

        internal var _selectorActive:Boolean=true;

        internal var _selectorVis:Boolean=true;

        internal var _id:int;

        internal var _selectorText:String;

        internal var _selectorInstances:__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>;

        internal var _displayObjectsCache:Object;

        internal var _labelsHolder:flash.display.DisplayObjectContainer;

        internal var matchPos:__AS3__.vec.Vector.<int>;
    }
}


//            class PaylineBuilder
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public class PaylineBuilder extends Object implements mgs.aurora.slots.components.payline.IPaylineBuilder
    {
        public function PaylineBuilder(arg1:__AS3__.vec.Vector.<int>, arg2:Number, arg3:Number, arg4:int, arg5:mgs.aurora.slots.components.payline.IPaylineDrawer, arg6:flash.display.DisplayObjectContainer, arg7:Number=1)
        {
            var loc5:*=null;
            var loc7:*=0;
            super();
            var loc1:*=new Vector.<int>();
            loc1 = arg1;
            var loc2:*=new Object();
            var loc3:*=0;
            while (loc3 < loc1.length) 
            {
                loc2[loc3] = 1;
                ++loc3;
            }
            this.paylines = new Vector.<mgs.aurora.slots.components.payline.IPayline>(arg4);
            var loc4:*=arg4 * arg3;
            var loc6:*=0;
            while (loc6 < arg4) 
            {
                loc7 = loc6;
                this.paylines[loc7] = new mgs.aurora.slots.components.payline.Payline(loc7, arg7, arg6);
                this.paylines[loc7].coinsBet = loc4;
                this.paylines[loc7].drawObject = arg5;
                ++loc6;
            }
            return;
        }

        public function build():__AS3__.vec.Vector.<mgs.aurora.slots.components.payline.IPayline>
        {
            return this.paylines;
        }

        internal var paylines:__AS3__.vec.Vector.<mgs.aurora.slots.components.payline.IPayline>;
    }
}


//            class PaylineConfigSettings
package mgs.aurora.slots.components.payline 
{
    public class PaylineConfigSettings extends Object
    {
        public function PaylineConfigSettings(arg1:int, arg2:Boolean, arg3:int, arg4:int, arg5:Boolean, arg6:Boolean, arg7:Boolean)
        {
            super();
            this._selectorDisplayType = arg1;
            this._flashPayline = arg2;
            this._numTimesToFlash = arg3;
            this._timeBetweenFlashes = arg4;
            this._showBoxes = arg5;
            this._showBoxBorders = arg6;
            this._hideWinBoxes = arg7;
            return;
        }

        public function get flashPayline():Boolean
        {
            return this._flashPayline;
        }

        public function get numTimesToFlash():int
        {
            return this._numTimesToFlash;
        }

        public function get timeBetweenFlashes():int
        {
            return this._timeBetweenFlashes;
        }

        public function get selectorDisplayType():int
        {
            return this._selectorDisplayType;
        }

        public function get showBoxes():Boolean
        {
            return this._showBoxes;
        }

        public function get showBoxBorders():Boolean
        {
            return this._showBoxBorders;
        }

        public function get hideWinBoxes():Boolean
        {
            return this._hideWinBoxes;
        }

        internal var _selectorDisplayType:int;

        internal var _flashPayline:Boolean;

        internal var _numTimesToFlash:int;

        internal var _timeBetweenFlashes:int;

        internal var _showBoxes:Boolean;

        internal var _showBoxBorders:Boolean;

        internal var _hideWinBoxes:Boolean;
    }
}


//            class PaylineController
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    import mgs.aurora.slots.components.payline.events.*;
    
    public class PaylineController extends Object implements mgs.aurora.slots.components.payline.IPaylineController, mgs.aurora.games.common.components.generic.IDisposable
    {
        public function PaylineController(arg1:flash.display.DisplayObjectContainer, arg2:mgs.aurora.slots.components.payline.IPaylineSelectors, arg3:mgs.aurora.slots.components.payline.PaylineConfigSettings)
        {
            super();
            this._paylineConfigSettings = arg3;
            this.selectors = arg2;
            this.selectors.addEventListener(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.SELECT, this.onPaylineSelect, false, 0, true);
            this.container = arg1;
            this.linesContainer = new flash.display.Sprite();
            this.linesContainer.name = PAYLINE_CONTAINER;
            this.container.addChild(this.linesContainer);
            this.linesContainer.mouseChildren = false;
            this.linesContainer.mouseEnabled = false;
            this.labelsContainer = new flash.display.Sprite();
            this.labelsContainer.name = SELECTOR_LABELS_CONTAINER;
            this.labelsContainer.mouseChildren = false;
            this.labelsContainer.mouseEnabled = false;
            this.container.addChild(this.labelsContainer);
            this.hitmapContainer = new flash.display.Sprite();
            this.hitmapContainer.name = HITMAP_CONTAINER;
            this.hitmapContainer.addChild(this.selectors.getHitmapInstance());
            this.container.addChild(this.hitmapContainer);
            this._paylineConfigSettings = arg3;
            this.activePaylines = "0";
            return;
        }

        internal function showPayline(arg1:int, arg2:Boolean=true):void
        {
            if (arg1 < 0) 
            {
                return;
            }
            var loc1:*=arg2 != true ? mgs.aurora.slots.components.payline.Payline.PAYLINE_LOW : mgs.aurora.slots.components.payline.Payline.PAYLINE_HIGH;
            var loc2:*;
            (loc2 = this.paylines[arg1].getStateInstance(loc1)).visible = true;
            loc2.name = mgs.aurora.slots.components.payline.PaylineController.PAYLINE_NAME_PREFIX + arg1;
            this.linesContainer.addChild(loc2);
            return;
        }

        public function showWinlines(arg1:__AS3__.vec.Vector.<int>, arg2:Boolean=true):void
        {
            this.clearAll();
            var loc1:*={};
            var loc2:*=-1;
            while (++loc2 < arg1.length) 
            {
                loc1[arg1[loc2]] = true;
            }
            loc2 = -1;
            while (++loc2 < this.paylines.length) 
            {
                if (loc1[loc2] == true) 
                {
                    this.showWinline(loc2, arg2);
                    this.updateSelectorLabel(loc2, true, true);
                    continue;
                }
                if (this.paylines[loc2].isActive == true) 
                {
                    this.showActiveSelector(loc2);
                    this.updateSelectorLabel(loc2, true, true);
                    continue;
                }
                this.showInactiveSelector(loc2);
                this.updateSelectorLabel(loc2, false, true);
            }
            return;
        }

        internal function showWinline(arg1:int, arg2:Boolean=true):void
        {
            if (arg1 < 0) 
            {
                return;
            }
            var loc1:*=arg2 != true ? mgs.aurora.slots.components.payline.Payline.WINLINE_LOW : mgs.aurora.slots.components.payline.Payline.WINLINE_HIGH;
            var loc2:*;
            (loc2 = this.paylines[arg1].getStateInstance(loc1)).name = mgs.aurora.slots.components.payline.PaylineController.PAYLINE_NAME_PREFIX + arg1;
            this.linesContainer.addChild(loc2);
            return;
        }

        public function hideWinLines():void
        {
            var loc1:*=new Vector.<int>();
            loc1.push(-1);
            this.showWinlines(loc1);
            return;
        }

        public function hidePayLines():void
        {
            var loc1:*=new Vector.<int>();
            loc1.push(-1);
            this.showPaylines(loc1, true, false);
            return;
        }

        public function showSelectors(arg1:__AS3__.vec.Vector.<int>):void
        {
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                if (arg1[loc1] < 0) 
                {
                    break;
                }
                this.showActiveSelector(loc1);
                this.paylines[arg1[loc1]].setSelectorLabelVisibility(true);
                ++loc1;
            }
            return;
        }

        public function hideSelectors(arg1:__AS3__.vec.Vector.<int>):void
        {
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                if (arg1[loc1] < 0) 
                {
                    break;
                }
                this.paylines[arg1[loc1]].setSelectorLabelVisibility(false);
                ++loc1;
            }
            return;
        }

        public function updateSelectorLabel(arg1:int, arg2:Boolean, arg3:Boolean, arg4:Boolean=false):void
        {
            if (arg1 < 0) 
            {
                return;
            }
            if (arg4) 
            {
                this.paylines[arg1].setSelectorLabelText("");
            }
            else if (mgs.aurora.games.logicBlocks.publishers.PaylineServer.SHOW_COINS_ON_SELECTORS) 
            {
                this.paylines[arg1].setSelectorLabelText(String(mgs.aurora.games.logicBlocks.publishers.PaylineServer.NUM_SELECTOR_COINS));
            }
            else 
            {
                this.paylines[arg1].setSelectorLabelText(String(arg1 + 1));
            }
            this.paylines[arg1].setSelectorLabelActive(arg2);
            this.paylines[arg1].setSelectorLabelVisibility(arg3);
            return;
        }

        public function dispose():void
        {
            this.selectors.removeEventListener(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.SELECT, this.onPaylineSelect);
            return;
        }

        public function build(arg1:mgs.aurora.slots.components.payline.IPaylineBuilder):void
        {
            this.paylines = arg1.build();
            return;
        }

        internal function onPaylineSelect(arg1:mgs.aurora.slots.components.payline.events.PaylineSelectEvent):void
        {
            this.setActivePaylines(arg1.activePaylineIDs);
            this.clearAll();
            var loc1:*=new Array();
            var loc2:*=new Vector.<int>();
            loc1 = arg1.activePaylineIDs.split(",");
            var loc3:*=0;
            while (loc3 < loc1.length) 
            {
                loc2[loc3] = int(loc1[loc3]);
                ++loc3;
            }
            this.showPaylines(loc2, true);
            return;
        }

        public function hideAllPayLines():void
        {
            this.showPaylines(new Vector.<int>([-1]));
            return;
        }

        public function clearAll():void
        {
            var loc1:*=this.linesContainer.numChildren;
            while (--loc1 >= 0) 
            {
                this.linesContainer.removeChildAt(loc1);
            }
            return;
        }

        public function enable():void
        {
            this.selectors.enable();
            return;
        }

        public function disable():void
        {
            this.selectors.disable();
            return;
        }

        public function getActivePaylines():String
        {
            return this.activePaylines;
        }

        public function setActivePaylines(arg1:String):void
        {
            this.activePaylines = arg1.slice(0);
            var loc1:*=arg1.split(",");
            var loc2:*=loc1.length;
            var loc3:*=-1;
            var loc4:*={};
            loc2 = this.paylines.length;
            loc3 = -1;
            while (++loc3 < loc2) 
            {
                loc4["pl" + loc1[loc3]] = true;
            }
            loc2 = this.paylines.length;
            loc3 = -1;
            while (++loc3 < loc2) 
            {
                if (loc4["pl" + loc3] == true) 
                {
                    this.paylines[loc3].isActive = true;
                    continue;
                }
                this.paylines[loc3].isActive = false;
            }
            return;
        }

        public function setSelectorText(arg1:int, arg2:String):void
        {
            var loc1:*=this._paylineConfigSettings.selectorDisplayType;
            switch (loc1) 
            {
                case 0:
                {
                    this.paylines[arg1].setSelectorLabelText(arg2);
                    break;
                }
                case 1:
                {
                    this.paylines[arg1].setSelectorLabelText((arg1 + 1).toString());
                    break;
                }
                default:
                {
                    this.paylines[arg1].setSelectorLabelText((arg1 + 1).toString());
                    break;
                }
            }
            return;
        }

        public function setWinningPaylines(arg1:__AS3__.vec.Vector.<mgs.aurora.games.logicBlocks.data.types.WinPacket>):void
        {
            var loc1:*=-1;
            while (++loc1 < arg1.length) 
            {
                if (!(arg1[loc1].payline >= 0)) 
                {
                    continue;
                }
                this.paylines[arg1[loc1].payline].setWins(arg1[loc1].matchPos);
            }
            return;
        }

        public function updateSelectors():void
        {
            this.showActiveSelectors();
            this.showInactiveSelectors();
            return;
        }

        internal function showActiveSelectors():void
        {
            var loc1:*=this.paylines.length;
            var loc2:*=-1;
            while (++loc2 < loc1) 
            {
                if (this.paylines[loc2].isActive != true) 
                {
                    continue;
                }
                this.showActiveSelector(loc2);
                this.updateSelectorLabel(loc2, true, true);
            }
            return;
        }

        internal function showActiveSelector(arg1:int):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.slots.components.payline.PaylineController.PAYLINE_NAME_PREFIX + arg1;
            if (this.linesContainer.getChildByName(loc1) == null) 
            {
                loc2 = this.paylines[arg1].getStateInstance(mgs.aurora.slots.components.payline.Payline.ACTIVE);
                loc2.name = loc1;
                this.linesContainer.addChild(loc2);
            }
            return;
        }

        internal function showInactiveSelectors():void
        {
            var loc1:*=this.paylines.length;
            var loc2:*=-1;
            while (++loc2 < loc1) 
            {
                if (this.paylines[loc2].isActive != false) 
                {
                    continue;
                }
                this.showInactiveSelector(loc2);
                this.updateSelectorLabel(loc2, false, true);
            }
            return;
        }

        internal function showInactiveSelector(arg1:int):void
        {
            var loc2:*=null;
            var loc1:*=mgs.aurora.slots.components.payline.PaylineController.PAYLINE_NAME_PREFIX + arg1;
            if (this.linesContainer.getChildByName(loc1) == null) 
            {
                loc2 = this.paylines[arg1].getStateInstance(mgs.aurora.slots.components.payline.Payline.INACTIVE);
                loc2.name = loc1;
                this.linesContainer.addChild(loc2);
            }
            return;
        }

        public function showPaylines(arg1:__AS3__.vec.Vector.<int>, arg2:Boolean=true, arg3:Boolean=true):void
        {
            this.clearAll();
            var loc1:*={};
            var loc2:*=-1;
            loc2 = 0;
            while (loc2 < arg1.length) 
            {
                loc1[arg1[loc2]] = true;
                ++loc2;
            }
            if (arg3) 
            {
                loc2 = arg1.length;
                while (loc2 < this.paylines.length) 
                {
                    this.paylines[loc2].isActive = false;
                    ++loc2;
                }
            }
            loc2 = -1;
            while (++loc2 < this.paylines.length) 
            {
                if (loc1[loc2] == true) 
                {
                    this.showPayline(loc2, arg2);
                    this.updateSelectorLabel(loc2, true, true);
                    continue;
                }
                if (this.paylines[loc2].isActive == true) 
                {
                    this.showActiveSelector(loc2);
                    this.updateSelectorLabel(loc2, true, true);
                    continue;
                }
                this.showInactiveSelector(loc2);
                this.updateSelectorLabel(loc2, false, true);
            }
            return;
        }

        internal static const SELECTOR_LABELS_CONTAINER:String="selectorlabelscontainer";

        internal static const PAYLINE_CONTAINER:String="linescontainer";

        internal static const HITMAP_CONTAINER:String="hitmapcontainer";

        internal static const PAYLINE_NAME_PREFIX:String="payline_";

        internal var container:flash.display.DisplayObjectContainer;

        internal var hitmapContainer:flash.display.Sprite;

        internal var linesContainer:flash.display.Sprite;

        public var labelsContainer:flash.display.Sprite;

        internal var activePaylines:String;

        internal var paylines:__AS3__.vec.Vector.<mgs.aurora.slots.components.payline.IPayline>;

        internal var selectors:mgs.aurora.slots.components.payline.IPaylineSelectors;

        internal var cusFont:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _paylineConfigSettings:mgs.aurora.slots.components.payline.PaylineConfigSettings;
    }
}


//            class PaylineDrawer
package mgs.aurora.slots.components.payline 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.geom.*;
    import flash.system.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.logicBlocks.publishers.*;
    
    public class PaylineDrawer extends Object implements mgs.aurora.slots.components.payline.IPaylineDrawer
    {
        public function PaylineDrawer(arg1:flash.system.ApplicationDomain, arg2:__AS3__.vec.Vector.<uint>, arg3:Object, arg4:__AS3__.vec.Vector.<uint>=null)
        {
            var loc1:*=null;
            super();
            if (!mgs.aurora.games.logicBlocks.publishers.PaylineServer.HIDE_WIN_PAYLINE_BOXES) 
            {
                this.generatorBoxes = arg1.getDefinition("generatorBoxes") as Class;
                this.punchBoxes = arg1.getDefinition("punchBoxes") as Class;
            }
            this.generatorLines = arg1.getDefinition("generatorLines") as Class;
            var loc2:*=0;
            var loc3:*=arg3;
            for (loc1 in loc3) 
            {
                this[loc1] = new mgs.aurora.games.common.components.utils.CustomFont(arg1, arg3[loc1]);
            }
            this.lineColors = arg2;
            if (arg4 != null) 
            {
                this.lineBorderColors = arg4;
            }
            return;
        }

        public function drawState(arg1:String, arg2:int, arg3:__AS3__.vec.Vector.<int>=null):flash.display.DisplayObject
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case mgs.aurora.slots.components.payline.Payline.WINLINE_HIGH:
                {
                    return this.drawWinline(arg2, true, arg3);
                }
                case mgs.aurora.slots.components.payline.Payline.WINLINE_LOW:
                {
                    return this.drawWinline(arg2, false, arg3);
                }
                case mgs.aurora.slots.components.payline.Payline.PAYLINE_HIGH:
                {
                    return this.drawPayline(arg2, true);
                }
                case mgs.aurora.slots.components.payline.Payline.PAYLINE_LOW:
                {
                    return this.drawPayline(arg2, false);
                }
                case mgs.aurora.slots.components.payline.Payline.ACTIVE:
                {
                    return this.drawSelector(arg2, true);
                }
                case mgs.aurora.slots.components.payline.Payline.INACTIVE:
                {
                    return this.drawSelector(arg2, false);
                }
                case mgs.aurora.slots.components.payline.Payline.HIDDEN:
                {
                    return new flash.display.Sprite();
                }
            }
            return null;
        }

        internal function drawPayline(arg1:int, arg2:Boolean):flash.display.DisplayObject
        {
            var loc1:*=new this.generatorLines();
            loc1.gotoAndStop(arg1 * NUM_FRAMES_PER_LINE + (arg2 ? ACTIVE_LINE_OFFSET : INACTIVE_LINE_OFFSET));
            this.addLabels(loc1, arg1);
            return loc1;
        }

        internal function drawWinline(arg1:int, arg2:Boolean, arg3:__AS3__.vec.Vector.<int>):flash.display.DisplayObject
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=null;
            var loc1:*;
            (loc1 = new flash.display.Sprite()).blendMode = flash.display.BlendMode.LAYER;
            loc1.addChild(this.drawPayline(arg1, true));
            if (!mgs.aurora.games.logicBlocks.publishers.PaylineServer.HIDE_WIN_PAYLINE_BOXES) 
            {
                loc2 = new this.generatorBoxes();
                loc4 = arg3.length;
                loc3 = 0;
                while (loc3 < loc4) 
                {
                    (loc2.getChildByName("box" + arg3[loc3]) as flash.display.MovieClip).gotoAndStop(BOX_SHOW_FRAME);
                    if (arg2 && mgs.aurora.games.logicBlocks.publishers.PaylineServer.SHOW_BOX_BORDERS) 
                    {
                        (loc2.getChildByName("box" + arg3[loc3]) as flash.display.MovieClip).getChildByName("Box").transform.colorTransform = this.getColorTransform(this.lineColors[arg1]);
                        (loc2.getChildByName("box" + arg3[loc3]) as flash.display.MovieClip).getChildByName("BoxBorder").transform.colorTransform = this.getColorTransform(this.lineBorderColors[arg1]);
                    }
                    ++loc3;
                }
                if (arg2 && !mgs.aurora.games.logicBlocks.publishers.PaylineServer.SHOW_BOX_BORDERS) 
                {
                    loc2.transform.colorTransform = this.getColorTransform(this.lineColors[arg1]);
                }
                loc1.addChild(loc2);
                loc5 = new this.punchBoxes();
                loc3 = 0;
                while (loc3 < loc4) 
                {
                    (loc5.getChildByName("box" + arg3[loc3]) as flash.display.MovieClip).gotoAndStop(BOX_SHOW_FRAME);
                    ++loc3;
                }
                loc5.blendMode = flash.display.BlendMode.ERASE;
                loc1.addChild(loc5);
            }
            this.addLabels(loc1, arg1);
            loc1.cacheAsBitmap = true;
            return loc1;
        }

        internal function drawSelector(arg1:int, arg2:Boolean):flash.display.DisplayObject
        {
            var loc1:*=new this.generatorLines();
            loc1.gotoAndStop(arg1 * NUM_FRAMES_PER_LINE + (arg2 ? ACTIVE_SELECTOR_OFFSET : INACTIVE_SELECTOR_OFFSET));
            this.addLabels(loc1, arg1);
            return loc1;
        }

        internal function addLabels(arg1:flash.display.Sprite, arg2:int):void
        {
            var loc1:*="label_" + arg2.toString();
            if (arg1.getChildByName("coinselectlabelholder_0")) 
            {
                if (!this._labelsHolder.getChildByName(loc1 + "_0")) 
                {
                    this.addLabel(arg1.getChildByName("coinselectlabelholder_0"), arg2, loc1 + "_0");
                }
            }
            if (arg1.getChildByName("coinselectlabelholder_1")) 
            {
                if (!this._labelsHolder.getChildByName(loc1 + "_1")) 
                {
                    this.addLabel(arg1.getChildByName("coinselectlabelholder_1"), arg2, loc1 + "_1");
                }
            }
            return;
        }

        internal function addLabel(arg1:flash.display.DisplayObject, arg2:int, arg3:String):void
        {
            var loc1:*;
            (loc1 = new mgs.aurora.games.common.components.utils.CustomFontLabel(this.Active, "", mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN)).name = arg3;
            loc1.x = arg1.x;
            loc1.y = arg1.y;
            this._labelsHolder.addChild(loc1);
            return;
        }

        public function getSelectorLabels(arg1:int):__AS3__.vec.Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>
        {
            var loc1:*=new Vector.<mgs.aurora.games.common.components.utils.CustomFontLabel>(0);
            if (this._labelsHolder.getChildByName("label_" + arg1.toString() + "_0")) 
            {
                loc1.push(this._labelsHolder.getChildByName("label_" + arg1.toString() + "_0"));
            }
            if (this._labelsHolder.getChildByName("label_" + arg1.toString() + "_1")) 
            {
                loc1.push(this._labelsHolder.getChildByName("label_" + arg1.toString() + "_1"));
            }
            return loc1;
        }

        internal function getColorTransform(arg1:uint):flash.geom.ColorTransform
        {
            return new flash.geom.ColorTransform(0, 0, 0, 0, arg1 >>> 16 & 255, arg1 >>> 8 & 255, arg1 & 255, arg1 >>> 24);
        }

        public function set labelsHolder(arg1:flash.display.DisplayObjectContainer):void
        {
            this._labelsHolder = arg1;
            return;
        }

        public function set lineGenerator(arg1:mgs.aurora.slots.components.payline.ILineGenerator):void
        {
            return;
        }

        public function get activeFont():mgs.aurora.games.common.components.utils.CustomFont
        {
            return this.Active;
        }

        public function get inactiveFont():mgs.aurora.games.common.components.utils.CustomFont
        {
            return this.InActive;
        }

        public function dispose():void
        {
            this.lineColors = null;
            this.Active.dispose();
            this.InActive.dispose();
            return;
        }

        internal static const NUM_FRAMES_PER_LINE:int=4;

        internal static const ACTIVE_LINE_OFFSET:int=4;

        internal static const INACTIVE_LINE_OFFSET:int=3;

        internal static const ACTIVE_SELECTOR_OFFSET:int=2;

        internal static const INACTIVE_SELECTOR_OFFSET:int=1;

        internal static const BOX_SHOW_FRAME:int=2;

        internal var generatorLines:Class;

        internal var generatorBoxes:Class;

        internal var punchBoxes:Class;

        internal var InActive:mgs.aurora.games.common.components.utils.CustomFont;

        internal var Active:mgs.aurora.games.common.components.utils.CustomFont;

        internal var lineColors:__AS3__.vec.Vector.<uint>;

        internal var lineBorderColors:__AS3__.vec.Vector.<uint>;

        internal var _labelsHolder:flash.display.DisplayObjectContainer;
    }
}


//            class PaylineSelectors
package mgs.aurora.slots.components.payline 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.slots.components.payline.events.*;
    
    public class PaylineSelectors extends flash.events.EventDispatcher implements mgs.aurora.slots.components.payline.IPaylineSelectors, mgs.aurora.games.common.components.generic.IDisposable
    {
        public function PaylineSelectors(arg1:flash.display.MovieClip, arg2:Object)
        {
            super();
            this.hitlookup = arg2;
            this.selectorHitmap = arg1;
            this.selectorHitmap.name = PaylineSelectors.HITMAP;
            var loc1:*=-1;
            var loc2:*=this.selectorHitmap.numChildren;
            while (++loc1 < loc2) 
            {
                (this.selectorHitmap.getChildAt(loc1) as flash.display.SimpleButton).useHandCursor = false;
                this.selectorHitmap.getChildAt(loc1).addEventListener(flash.events.MouseEvent.ROLL_OUT, this.onHitmapRollOut, false, 0, true);
                this.selectorHitmap.getChildAt(loc1).addEventListener(flash.events.MouseEvent.ROLL_OVER, this.onHitmapRollOver, false, 0, true);
            }
            this.selectorHitmap.addEventListener(flash.events.MouseEvent.CLICK, this.onHitmapClick, false, 0, true);
            return;
        }

        internal function onHitmapRollOut(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=this.hitlookup[arg1.target.name];
            this.dispatchEvent(new mgs.aurora.slots.components.payline.events.PaylineSelectEvent(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.MOUSE_OUT, loc1, this.getActivePaylinesIDs(loc1)));
            return;
        }

        internal function onHitmapRollOver(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=this.hitlookup[arg1.target.name];
            this.dispatchEvent(new mgs.aurora.slots.components.payline.events.PaylineSelectEvent(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.MOUSE_OVER, loc1, this.getActivePaylinesIDs(loc1)));
            return;
        }

        public function getHitmapInstance():flash.display.MovieClip
        {
            return this.selectorHitmap;
        }

        internal function onHitmapClick(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=0;
            if (this.isEnabled == true && !(this.hitlookup[arg1.target.name] == undefined)) 
            {
                loc1 = this.hitlookup[arg1.target.name];
                this.dispatchEvent(new mgs.aurora.slots.components.payline.events.PaylineSelectEvent(mgs.aurora.slots.components.payline.events.PaylineSelectEvent.SELECT, loc1, this.getActivePaylinesIDs(loc1)));
            }
            return;
        }

        internal function getActivePaylinesIDs(arg1:int):String
        {
            var loc1:*="";
            var loc2:*=-1;
            while (loc2 < arg1) 
            {
                if (++loc2 == arg1) 
                {
                    loc1 = loc1 + loc2.toString();
                    continue;
                }
                loc1 = loc1 + (loc2.toString() + ",");
            }
            return loc1;
        }

        public function dispose():void
        {
            this.selectorHitmap.removeEventListener(flash.events.MouseEvent.CLICK, this.onHitmapClick);
            return;
        }

        public function enable():void
        {
            this._isEnabled = true;
            return;
        }

        public function disable():void
        {
            this._isEnabled = false;
            return;
        }

        public function get isEnabled():Boolean
        {
            return this._isEnabled;
        }

        internal static const HITMAP:String="hitmap";

        internal var selectorHitmap:flash.display.MovieClip;

        internal var hitlookup:Object;

        internal var _isEnabled:Boolean=false;
    }
}


//          package paytable
//            package data
//              package dyn
//                class AchievementData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    import __AS3__.vec.*;
    
    public class AchievementData extends Object
    {
        public function AchievementData(arg1:XML)
        {
            super();
            this.name = arg1.@name.toString();
            this.bg = arg1.@bg.toString();
            this.x = uint(arg1.@x);
            this.y = uint(arg1.@y);
            this.plaque = arg1.@plaque.toString();
            this.parsePanels(arg1.panel);
            return;
        }

        internal function parsePanels(arg1:XMLList):void
        {
            var loc1:*=null;
            this._panels = new Vector.<mgs.aurora.slots.components.paytable.data.dyn.PanelData>();
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._panels.push(new mgs.aurora.slots.components.paytable.data.dyn.PanelData(loc1));
            }
            return;
        }

        public function getPanel(arg1:uint):mgs.aurora.slots.components.paytable.data.dyn.PanelData
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._panels;
            for each (loc1 in loc3) 
            {
                if (loc1.winId != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public function get numFields():uint
        {
            return this._panels.length;
        }

        public var name:String;

        public var bg:String;

        public var x:uint;

        public var y:uint;

        public var plaque:String;

        internal var _panels:__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.PanelData>;
    }
}


//                class DynamicPaytableData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import mgs.aurora.games.framework.*;
    
    public class DynamicPaytableData extends Object
    {
        public function DynamicPaytableData(arg1:XML)
        {
            super();
            this.parsePages(arg1.page);
            this.parseAchievements(arg1.achievements);
            this.parseProgress(arg1.progressBar);
            this._storyData = new mgs.aurora.slots.components.paytable.data.dyn.StoryData(XML(arg1.story));
            this.paytableName = arg1.@paytableMCLinkage.toXMLString();
            this.nextButtonName = arg1.@nextButtonMCLinkage.toXMLString();
            this.previousButtonName = arg1.@prevButtonMCLinkage.toXMLString();
            this.backToGameButtonName = arg1.@backButtonMCLinkage.toXMLString();
            this.backToGameHitArea = arg1.@backToGameHitAreaMCLinkage.toXMLString();
            this._backToGameClosePayTable = arg1.@backGroundClosePayTable.toXMLString() == "true";
            this.layer = flash.display.Sprite(mgs.aurora.games.framework.StageReference.stage.getChildByName("Paytable"));
            this._currentPage = this.lastSavedPage();
            return;
        }

        public function get numPages():uint
        {
            return this._pages.length;
        }

        public function getPageData(arg1:uint):mgs.aurora.slots.components.paytable.data.dyn.PageData
        {
            return this._pages[arg1];
        }

        public function getAchievementData(arg1:String):mgs.aurora.slots.components.paytable.data.dyn.AchievementData
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._achievements;
            for each (loc1 in loc3) 
            {
                if (loc1.name != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public function getAchievementHolder():String
        {
            return this._achievementsHolder;
        }

        public function getAchievementFieldPrefix():String
        {
            return this._achievementsPrefix;
        }

        public function getAchievementPage():uint
        {
            return this._achievementsPage;
        }

        public function get progressAssetId():String
        {
            return this._progressAssetId;
        }

        public function getProgressPage():uint
        {
            return this._progressPage;
        }

        public function get progressX():uint
        {
            return this._progressX;
        }

        public function get progressY():uint
        {
            return this._progressY;
        }

        public function get progressAchievementName():String
        {
            return this._progressAchievementName;
        }

        public function get currentPage():uint
        {
            return this._currentPage;
        }

        public function set currentPage(arg1:uint):void
        {
            this._currentPage = arg1;
            return;
        }

        public function get storyData():mgs.aurora.slots.components.paytable.data.dyn.StoryData
        {
            return this._storyData;
        }

        public function get goldAchievementName():String
        {
            return this._goldAchievementPage;
        }

        public function get goldBGName():String
        {
            return this._goldBGName;
        }

        public function get goldWinUpto():String
        {
            return this._goldWinUpto;
        }

        public function get goldWinUptoFieldId():uint
        {
            return this._goldWinUptoFieldId;
        }

        public function get goldFrameLabel():String
        {
            return this._goldFrameLabel;
        }

        public function get plaqueHolder():String
        {
            return this._plaqueHolder;
        }

        public function get plaqueX():int
        {
            return this._plaqueX;
        }

        public function get plaqueY():int
        {
            return this._plaqueY;
        }

        public function getNotificationFadeTransition():String
        {
            return this._fadeTransition;
        }

        public function getNotificationAutoFadeWinIds():__AS3__.vec.Vector.<uint>
        {
            return this._autoFadeWinIds;
        }

        internal function parseAchievements(arg1:XMLList):void
        {
            var loc1:*=null;
            this._achievements = new Vector.<mgs.aurora.slots.components.paytable.data.dyn.AchievementData>();
            this._achievementsHolder = arg1.@holder;
            this._achievementsPrefix = arg1.@fieldPrefix;
            this._achievementsPage = uint(arg1.@page);
            this._goldBGName = arg1.@goldBGName;
            this._goldWinUpto = arg1.@goldWinUpto;
            this._goldWinUptoFieldId = uint(arg1.@goldWinUptoFieldId);
            this._goldFrameLabel = arg1.@goldFrameLabel;
            this._goldAchievementPage = arg1.@goldAchievement;
            this._plaqueHolder = arg1.@plaqueHolder;
            this._plaqueX = int(arg1.@plaqueX);
            this._plaqueY = int(arg1.@plaqueY);
            this._fadeTime = Number(arg1.@fadeTime);
            this._fadeTransition = arg1.@fadeTransition;
            this._autoFadeWinIds = Vector.<uint>(arg1.@autoFadeWinIds.toString().split(","));
            this._autoFadeTime = Number(arg1.@autoFadeTime);
            var loc2:*=0;
            var loc3:*=arg1.achievement;
            for each (loc1 in loc3) 
            {
                this._achievements.push(new mgs.aurora.slots.components.paytable.data.dyn.AchievementData(loc1));
            }
            return;
        }

        public function getNotificationAutoFadeTime():Number
        {
            return this._autoFadeTime;
        }

        public function get backToGameClosePayTable():Boolean
        {
            return this._backToGameClosePayTable;
        }

        public function next():mgs.aurora.slots.components.paytable.data.dyn.PageData
        {
            if (this._currentPage != (this._pages.length - 1)) 
            {
                var loc1:*;
                var loc2:*=((loc1 = this)._currentPage + 1);
                loc1._currentPage = loc2;
            }
            else 
            {
                this._currentPage = 0;
            }
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "Paytable", String(this._currentPage));
            return this._pages[this._currentPage];
        }

        public function previous():mgs.aurora.slots.components.paytable.data.dyn.PageData
        {
            if (this._currentPage != 0) 
            {
                var loc1:*;
                var loc2:*=((loc1 = this)._currentPage - 1);
                loc1._currentPage = loc2;
            }
            else 
            {
                this._currentPage = (this._pages.length - 1);
            }
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "Paytable", String(this._currentPage));
            return this._pages[this._currentPage];
        }

        public function forceSaveOfLastPage():void
        {
            mgs.aurora.games.framework.AuroraReference.aurora.storage.saveData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "Paytable", String(this._currentPage));
            return;
        }

        internal function lastSavedPage():uint
        {
            var loc1:*=mgs.aurora.games.framework.AuroraReference.aurora.storage.loadData(mgs.aurora.games.framework.ModuleReference.moduleInfo.id, "Paytable");
            if (loc1 == null || loc1 == "") 
            {
                loc1 = "0";
            }
            var loc2:*=uint(loc1);
            if (this._currentPage > (this._pages.length - 1)) 
            {
                this._currentPage = 0;
            }
            else if (this._currentPage < 0) 
            {
                this._currentPage = (this._pages.length - 1);
            }
            return loc2;
        }

        internal function parsePages(arg1:XMLList):void
        {
            var loc1:*=null;
            this._pages = new Vector.<mgs.aurora.slots.components.paytable.data.dyn.PageData>();
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._pages.push(new mgs.aurora.slots.components.paytable.data.dyn.PageData(loc1));
            }
            return;
        }

        public function getNotificationFadeTime():Number
        {
            return this._fadeTime;
        }

        internal function parseProgress(arg1:XMLList):void
        {
            this._progressPage = uint(arg1.@progressPage);
            this._progressAssetId = arg1.@assetId.toString();
            this._progressX = uint(arg1.@x);
            this._progressY = uint(arg1.@y);
            this._progressAchievementName = arg1.@achievementName.toString();
            return;
        }

        public var layer:flash.display.Sprite;

        internal var _pages:__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.PageData>;

        internal var _currentPage:uint;

        internal var _backToGameClosePayTable:Boolean;

        internal var _achievements:__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.AchievementData>;

        internal var _achievementsHolder:String;

        internal var _achievementsPrefix:String;

        internal var _progressPage:uint;

        internal var _progressAssetId:String;

        internal var _progressX:uint;

        internal var _progressY:uint;

        internal var _progressAchievementName:String;

        internal var _storyData:mgs.aurora.slots.components.paytable.data.dyn.StoryData;

        internal var _plaqueHolder:String;

        internal var _plaqueX:int;

        internal var _plaqueY:int;

        internal var _fadeTime:Number;

        internal var _fadeTransition:String;

        internal var _autoFadeWinIds:__AS3__.vec.Vector.<uint>;

        internal var _autoFadeTime:Number;

        internal var _goldAchievementPage:String;

        internal var _goldBGName:String;

        internal var _goldFrameLabel:String;

        internal var _goldWinUptoFieldId:uint;

        public var paytableName:String;

        public var nextButtonName:String;

        public var previousButtonName:String;

        public var backToGameButtonName:String;

        public var backToGameHitArea:String;

        internal var _goldWinUpto:String;

        internal var _achievementsPage:uint;
    }
}


//                class FieldData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    public class FieldData extends Object
    {
        public function FieldData(arg1:XML)
        {
            super();
            this.type = arg1.@type.toXMLString();
            this.value = arg1.@value.toXMLString();
            this.alt = arg1.@alt.toXMLString();
            return;
        }

        public var type:String;

        public var value:String;

        public var alt:String;
    }
}


//                class PageData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    import __AS3__.vec.*;
    
    public class PageData extends Object
    {
        public function PageData(arg1:XML)
        {
            super();
            this.parseFields(arg1.field);
            this.index = arg1.childIndex();
            this.attachPrefix = arg1.@attach.toXMLString();
            return;
        }

        internal function parseFields(arg1:XMLList):void
        {
            var loc1:*=null;
            this._fields = new Vector.<mgs.aurora.slots.components.paytable.data.dyn.FieldData>();
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._fields.push(new mgs.aurora.slots.components.paytable.data.dyn.FieldData(loc1));
            }
            return;
        }

        public function getField(arg1:uint):mgs.aurora.slots.components.paytable.data.dyn.FieldData
        {
            return this._fields[arg1];
        }

        public function get numFields():uint
        {
            return this._fields.length;
        }

        public var index:uint;

        internal var _fields:__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.FieldData>;

        public var attachPrefix:String;
    }
}


//                class PanelData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    public class PanelData extends Object
    {
        public function PanelData(arg1:XML)
        {
            super();
            this.id = arg1.@id.toXMLString();
            this.winId = uint(arg1.@winId);
            this.x = uint(arg1.@x);
            this.y = uint(arg1.@y);
            this.fields = String(arg1.@fields).split(",");
            return;
        }

        public var id:String;

        public var winId:uint;

        public var x:uint;

        public var y:uint;

        public var fields:Array;
    }
}


//                class PaytableDisplayEvent
package mgs.aurora.slots.components.paytable.data.dyn 
{
    import flash.events.*;
    
    public class PaytableDisplayEvent extends flash.events.Event
    {
        public function PaytableDisplayEvent(arg1:String, arg2:Boolean=false, arg3:Boolean=false)
        {
            super(arg1, arg2, arg3);
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(type, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("PaytableDisplayEvent", "type", "bubbles", "cancelable", "eventPhase");
        }

        internal static const NAME:String="PaytableDisplayEvent";

        public static const OPEN:String=NAME + "/type/open";

        public static const CLOSE:String=NAME + "/type/close";

        public static const NEXT:String=NAME + "/type/next";

        public static const PREVIOUS:String=NAME + "/type/previous";

        public static const HIDE:String=NAME + "/type/hide";

        public static const STORY_OPEN:String=NAME + "/type/story_open";

        public static const STORY_CLOSE:String=NAME + "/type/story_close";
    }
}


//                class StoryButtonData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    public class StoryButtonData extends Object
    {
        public function StoryButtonData(arg1:XML)
        {
            super();
            this._id = arg1.@id.toString();
            this._prefix = arg1.@prefix.toString();
            this._buttonName = this._prefix + "_story_button";
            this._infoButtonName = this._prefix + "_info_button";
            this._scroller = this._prefix + "_scroller";
            this._scrollerStart = int(arg1.@scrollerStartY);
            this._scrollOffset = uint(arg1.@scrollOffset);
            this._page = uint(arg1.@page);
            this._x = int(arg1.@x);
            this._y = int(arg1.@y);
            this._scrollUpX = int(arg1.@scrollUpX);
            this._scrollUpY = int(arg1.@scrollUpY);
            this._scrollDownX = int(arg1.@scrollDownX);
            this._scrollDownY = int(arg1.@scrollDownY);
            this._scrollPercentageDelay = uint(arg1.@scrollPerecentageDelay);
            this._storyHitX = int(arg1.@scrollHitX);
            this._storyHitY = int(arg1.@scrollHitY);
            return;
        }

        public function get id():String
        {
            return this._id;
        }

        public function get buttonName():String
        {
            return this._buttonName;
        }

        public function get prefix():String
        {
            return this._prefix;
        }

        public function get page():uint
        {
            return this._page;
        }

        public function get x():int
        {
            return this._x;
        }

        public function get y():int
        {
            return this._y;
        }

        public function get infoButtonName():String
        {
            return this._infoButtonName;
        }

        public function get scroller():String
        {
            return this._scroller;
        }

        public function get scrollOffset():uint
        {
            return this._scrollOffset;
        }

        public function get scrollerStartPosition():int
        {
            return this._scrollerStart;
        }

        public function get scrollUpX():int
        {
            return this._scrollUpX;
        }

        public function get scrollUpY():int
        {
            return this._scrollUpY;
        }

        public function get scrollDownX():int
        {
            return this._scrollDownX;
        }

        public function get scrollDownY():int
        {
            return this._scrollDownY;
        }

        public function get scrollPercentageDelay():int
        {
            return this._scrollPercentageDelay;
        }

        public function get storyHitX():int
        {
            return this._storyHitX;
        }

        public function get storyHitY():int
        {
            return this._storyHitY;
        }

        internal var _id:String;

        internal var _buttonName:String;

        internal var _prefix:String;

        internal var _page:uint;

        internal var _x:int;

        internal var _y:int;

        internal var _infoButtonName:String;

        internal var _scroller:String;

        internal var _scrollerStart:int;

        internal var _scrollOffset:uint;

        internal var _scrollUpX:int;

        internal var _scrollUpY:int;

        internal var _scrollDownX:int;

        internal var _scrollDownY:int;

        internal var _scrollPercentageDelay:uint;

        internal var _storyHitX:int;

        internal var _storyHitY:int;
    }
}


//                class StoryData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    import __AS3__.vec.*;
    
    public class StoryData extends Object
    {
        public function StoryData(arg1:XML)
        {
            super();
            this._offset = uint(arg1.@offset);
            this._tweenTime = Number(arg1.@tween);
            this._layer = arg1.@layer.toString();
            this._timeDivider = uint(arg1.@timeDivider);
            this._scrollLayer = arg1.@scrollLayer.toString();
            this.parseButtons(arg1.storyData);
            return;
        }

        internal function parseButtons(arg1:XMLList):void
        {
            var loc1:*=null;
            this._storyButtons = new Vector.<mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData>();
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._storyButtons.push(new mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData(loc1));
            }
            return;
        }

        public function getStoryButton(arg1:String):mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._storyButtons;
            for each (loc1 in loc3) 
            {
                if (loc1.buttonName != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public function getInfoStoryButton(arg1:String):mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._storyButtons;
            for each (loc1 in loc3) 
            {
                if (loc1.infoButtonName != arg1) 
                {
                    continue;
                }
                return loc1;
            }
            return null;
        }

        public function getStoryButtons(arg1:uint):__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData>
        {
            var loc2:*=null;
            var loc1:*=new Vector.<mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData>();
            var loc3:*=0;
            var loc4:*=this._storyButtons;
            for each (loc2 in loc4) 
            {
                if (loc2.page != arg1) 
                {
                    continue;
                }
                loc1.push(loc2);
            }
            return loc1;
        }

        public function get offset():uint
        {
            return this._offset;
        }

        public function get tweenTime():Number
        {
            return this._tweenTime;
        }

        public function get layer():String
        {
            return this._layer;
        }

        public function get timeDivider():uint
        {
            return this._timeDivider;
        }

        public function get scrollLayer():String
        {
            return this._scrollLayer;
        }

        internal var _storyButtons:__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData>;

        internal var _offset:uint;

        internal var _tweenTime:uint;

        internal var _layer:String;

        internal var _timeDivider:uint;

        internal var _scrollLayer:String;
    }
}


//                class SymbolData
package mgs.aurora.slots.components.paytable.data.dyn 
{
    import __AS3__.vec.*;
    
    public class SymbolData extends Object
    {
        public function SymbolData(arg1:XML)
        {
            super();
            this.parseFields(arg1.field);
            this.index = arg1.childIndex();
            this.id = arg1.@id.toXMLString();
            this.attachPrefix = arg1.@attach.toXMLString();
            return;
        }

        internal function parseFields(arg1:XMLList):void
        {
            var loc1:*=null;
            this._fields = new Vector.<mgs.aurora.slots.components.paytable.data.dyn.FieldData>();
            var loc2:*=0;
            var loc3:*=arg1;
            for each (loc1 in loc3) 
            {
                this._fields.push(new mgs.aurora.slots.components.paytable.data.dyn.FieldData(loc1));
            }
            return;
        }

        public function getField(arg1:uint):mgs.aurora.slots.components.paytable.data.dyn.FieldData
        {
            return this._fields[arg1];
        }

        public function get numFields():uint
        {
            return this._fields.length;
        }

        public var index:uint;

        public var id:String;

        public var attachPrefix:String;

        internal var _fields:__AS3__.vec.Vector.<mgs.aurora.slots.components.paytable.data.dyn.FieldData>;
    }
}


//            package helpers
//              class ConsoleBreakoutSwappingAgent
package mgs.aurora.slots.components.paytable.helpers 
{
    import flash.display.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.games.framework.server.*;
    import mgs.aurora.games.framework.userInterface.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    
    public class ConsoleBreakoutSwappingAgent extends mgs.aurora.games.framework.server.Publisher implements mgs.aurora.games.framework.userInterface.ISubscriber
    {
        public function ConsoleBreakoutSwappingAgent()
        {
            super(mgs.aurora.slots.components.paytable.helpers.ConsoleBreakoutSwappingAgent.PUBLISHER_NAME);
            setClassDescription("mgs.aurora.slots.components.paytable.helpers.ConsoleBreakoutSwappingAgent");
            return;
        }

        public function defineServices():void
        {
            mgs.aurora.games.framework.Diplomat.subscribe(this, this.setup, mgs.aurora.games.logicBlocks.agents.ConfigAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.ConfigAgent.SERVICE_CONSOLE_BREAKOUT_SWAPPINGAGENT);
            return;
        }

        protected function setup(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            var loc1:*=arg1.data[0];
            this.console = mgs.aurora.games.framework.StageReference.getLevel(loc1.@swapLayer1.toString());
            this.breakout = mgs.aurora.games.framework.StageReference.getLevel(loc1.@swapLayer2.toString());
            if (this.console && this.breakout) 
            {
                mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytableOpen, mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent.SERVICE_ON_OPEN);
                mgs.aurora.games.framework.Diplomat.subscribe(this, this.onPaytableClose, mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent.PUBLISHER_NAME, mgs.aurora.games.logicBlocks.agents.PostPayTablesAgent.SERVICE_ON_CLOSE);
                this._isSetup = true;
            }
            return;
        }

        protected function onPaytableOpen(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._isSetup) 
            {
                this.console.parent.swapChildren(this.console, this.breakout);
            }
            return;
        }

        protected function onPaytableClose(arg1:mgs.aurora.games.framework.ITransportLayer=null):void
        {
            if (this._isSetup) 
            {
                this.console.parent.swapChildren(this.console, this.breakout);
            }
            return;
        }

        public override function dispose():void
        {
            this.breakout = null;
            this.console = null;
            return;
        }

        public static const PUBLISHER_NAME:String="PUBLISHER_CONSOLE_BREAKOUT_SWAPPING";

        protected var breakout:flash.display.DisplayObjectContainer;

        protected var console:flash.display.DisplayObjectContainer;

        protected var _isSetup:Boolean;
    }
}


//            package paytable
//              package dyn
//                class DynamicAchievementPaytable
package mgs.aurora.slots.components.paytable.paytable.dyn 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.geom.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.achievements.*;
    import mgs.aurora.slots.components.paytable.data.dyn.*;
    
    public class DynamicAchievementPaytable extends mgs.aurora.slots.components.paytable.paytable.dyn.DynamicPaytable
    {
        public function DynamicAchievementPaytable(arg1:mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData, arg2:mgs.aurora.games.logicBlocks.agents.ConductorAgent)
        {
            super(arg1);
            this._conductor = arg2;
            var loc1:*=mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(_config.progressAssetId);
            if (loc1) 
            {
                this._progressBar = new mgs.aurora.slots.components.achievements.AchievementProgressBar(loc1, _config.layer.name, _config.progressX, _config.progressY, _config.progressAchievementName);
            }
            setClassDescription("mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable");
            return;
        }

        public override function show():void
        {
            if (!_art) 
            {
                _art = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(_config.paytableName);
                if (_art.numChildren == 0) 
                {
                    _art = null;
                    return;
                }
                _art.gotoAndStop(_config.currentPage + 1);
                _config.layer.addChild(_art);
                setupButtons();
                setupTextFields();
                this.setupAchievementFields();
                this.setupProgressBar();
                setEngineBadge(_art);
                dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.OPEN));
            }
            return;
        }

        public override function hide():void
        {
            super.hide();
            if (this._progressBar) 
            {
                this._progressBar.Show(false);
            }
            return;
        }

        protected override function switchPage():void
        {
            super.switchPage();
            this.setupAchievementFields();
            this.setupProgressBar();
            return;
        }

        protected override function removeTextFields():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=_config.getPageData(_config.currentPage);
            var loc5:*=0;
            while (loc5 < loc1.numFields) 
            {
                loc2 = loc1.getField(loc5);
                loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2.type);
                if ((loc4 = flash.display.DisplayObjectContainer(_art.getChildByName(loc1.attachPrefix + loc5))) && loc3) 
                {
                    if (loc3.displayObject.parent != loc4) 
                    {
                        loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2.alt);
                        if (loc3) 
                        {
                            loc4.removeChild(loc3.displayObject);
                        }
                    }
                    else 
                    {
                        loc4.removeChild(loc3.displayObject);
                    }
                }
                ++loc5;
            }
            return;
        }

        protected function setupProgressBar():void
        {
            if (this._progressBar) 
            {
                if (_config.currentPage != _config.getProgressPage()) 
                {
                    this._progressBar.Show(false, false);
                }
                else 
                {
                    this._progressBar.Show(true, false);
                }
                this._firstShowProgressBar = false;
            }
            return;
        }

        protected function isGold():Boolean
        {
            var loc1:*=0;
            if (this._isGold) 
            {
                return true;
            }
            loc1 = 0;
            while (loc1 < this._conductor.response.achievements.numberOf) 
            {
                if (this._conductor.response.achievements.achievements[loc1].name == _config.goldAchievementName) 
                {
                    if (this._conductor.response.achievements.achievements[loc1].isComplete) 
                    {
                        this._isGold = true;
                        return true;
                    }
                }
                ++loc1;
            }
            return false;
        }

        protected function setupAchievementFields():void
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=null;
            var loc7:*=null;
            if (_config.getAchievementPage() == _config.currentPage) 
            {
                if (this.isGold()) 
                {
                    flash.display.MovieClip(_art.getChildByName(_config.goldBGName)).gotoAndStop(_config.goldFrameLabel);
                    flash.display.MovieClip(_art.getChildByName(_config.goldWinUpto)).gotoAndStop(_config.goldFrameLabel);
                    this.replaceTextField(_config.goldWinUptoFieldId);
                }
                loc1 = 0;
                while (loc1 < this._conductor.response.achievements.numberOf) 
                {
                    loc2 = _config.getAchievementData(this._conductor.response.achievements.achievements[loc1].name);
                    if (loc2) 
                    {
                        if (this._conductor.response.achievements.achievements[loc1].isComplete) 
                        {
                            loc3 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc2.bg);
                            loc3.x = loc2.x;
                            loc3.y = loc2.y;
                            flash.display.MovieClip(_art.getChildByName(_config.getAchievementHolder())).addChild(loc3);
                        }
                        if (this._conductor.response.achievements.achievements[loc1].winCombosAcquired && this._conductor.response.achievements.achievements[loc1].winCombosAcquired.length > 0) 
                        {
                            loc4 = 0;
                            while (loc4 < this._conductor.response.achievements.achievements[loc1].winCombosAcquired.length) 
                            {
                                loc5 = this._conductor.response.achievements.achievements[loc1].winCombosAcquired[loc4];
                                if (loc6 = loc2.getPanel(loc5)) 
                                {
                                    (loc7 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc6.id)).x = loc6.x;
                                    loc7.y = loc6.y;
                                    flash.display.MovieClip(_art.getChildByName(_config.getAchievementHolder())).addChild(loc7);
                                    this.replaceTextFields(loc6.fields);
                                }
                                ++loc4;
                            }
                        }
                    }
                    ++loc1;
                }
            }
            return;
        }

        public function getNotificationPlaques(arg1:__AS3__.vec.Vector.<String>):__AS3__.vec.Vector.<String>
        {
            var loc3:*=null;
            var loc1:*=new Vector.<String>();
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                if (loc3 = _config.getAchievementData(arg1[loc2])) 
                {
                    loc1.push(loc3.plaque);
                }
                ++loc2;
            }
            return loc1.length > 0 ? loc1 : null;
        }

        public function getNotificationPlacementPos():flash.geom.Point
        {
            return new flash.geom.Point(_config.plaqueX, _config.plaqueY);
        }

        public function getNotificationPlacementLayer():String
        {
            return _config.plaqueHolder;
        }

        public function getNotificationFadeTime():Number
        {
            return _config.getNotificationFadeTime();
        }

        public function getNotificationFadeTransition():String
        {
            return _config.getNotificationFadeTransition();
        }

        public function getNotificationAutoFadeWinIds():__AS3__.vec.Vector.<uint>
        {
            return _config.getNotificationAutoFadeWinIds();
        }

        public function getNotificationAutoFadeTime():Number
        {
            return _config.getNotificationAutoFadeTime();
        }

        public function openAchievementPaytablePage():void
        {
            _config.currentPage = _config.getAchievementPage();
            _config.forceSaveOfLastPage();
            this.show();
            return;
        }

        protected function replaceTextFields(arg1:Array):void
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc1:*=_config.getPageData(_config.currentPage);
            var loc7:*=0;
            while (loc7 < arg1.length) 
            {
                loc2 = String(arg1[loc7]);
                loc3 = uint(loc2.substr(_config.getAchievementFieldPrefix().length));
                this.replaceTextField(loc3);
                ++loc7;
            }
            return;
        }

        protected function replaceTextField(arg1:uint):void
        {
            var loc1:*=_config.getPageData(_config.currentPage);
            var loc2:*=loc1.getField(arg1);
            var loc3:*=mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2.type);
            var loc4:*=flash.display.DisplayObjectContainer(_art.getChildByName(loc1.attachPrefix + arg1));
            loc3.removeFromContainer();
            (loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2.alt)).text = loc2.value;
            loc3.addTo(loc4);
            return;
        }

        internal var _conductor:mgs.aurora.games.logicBlocks.agents.ConductorAgent;

        internal var _progressBar:mgs.aurora.slots.components.achievements.AchievementProgressBar;

        internal var _firstShowProgressBar:Boolean=true;

        internal var _isGold:Boolean;
    }
}


//                class DynamicPaytable
package mgs.aurora.slots.components.paytable.paytable.dyn 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.ui.components.text.factories.*;
    import mgs.aurora.games.framework.*;
    import mgs.aurora.slots.components.paytable.data.dyn.*;
    import mgs.aurora.slots.components.paytable.paytableInterfaces.generic.*;
    
    public class DynamicPaytable extends mgs.aurora.games.base.BaseEventDispatcherClass implements mgs.aurora.slots.components.paytable.paytableInterfaces.generic.IPaytable
    {
        public function DynamicPaytable(arg1:mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData)
        {
            super();
            setClassDescription("mgs.aurora.slots.components.paytable.paytable.dyn.DynamicPaytable");
            this._config = arg1;
            return;
        }

        public function show():void
        {
            if (!this._art) 
            {
                this._art = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._config.paytableName);
                if (this._art.numChildren == 0) 
                {
                    this._art = null;
                    return;
                }
                this._art.gotoAndStop(this._config.currentPage + 1);
                this._config.layer.addChild(this._art);
                this.setupButtons();
                this.setupTextFields();
                this.setEngineBadge(this._art);
                dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.OPEN));
            }
            return;
        }

        protected function setupButtons():void
        {
            this._nextButton = flash.display.InteractiveObject(this._art.getChildByName(this._config.nextButtonName));
            if (this._nextButton == null) 
            {
                _trace("ERROR: No Next [" + this._config.nextButtonName + "] Button found. Please check your art.", "error", this, 16711680);
            }
            else 
            {
                this._nextButton.addEventListener(flash.events.MouseEvent.CLICK, this.onNextClicked, false, 0, true);
            }
            this._previousButton = flash.display.InteractiveObject(this._art.getChildByName(this._config.previousButtonName));
            if (this._previousButton == null) 
            {
                _trace("ERROR: No Previous [" + this._config.previousButtonName + "] Button found. Please check your art.", "error", this, 16711680);
            }
            else 
            {
                this._previousButton.addEventListener(flash.events.MouseEvent.CLICK, this.onPreviousClicked, false, 0, true);
            }
            this._backToGameButton = flash.display.InteractiveObject(this._art.getChildByName(this._config.backToGameButtonName));
            if (this._backToGameButton == null) 
            {
                _trace("ERROR: No Back To Game [" + this._config.backToGameButtonName + "] Button found. Please check your art.", "error", this, 16711680);
            }
            else 
            {
                this._backToGameButton.addEventListener(flash.events.MouseEvent.CLICK, this.onBackToGameClicked, false, 0, true);
            }
            this._backToGameHitArea = flash.display.InteractiveObject(this._art.getChildByName(this._config.backToGameHitArea));
            if (this._art.getChildByName(this._config.backToGameHitArea) != null) 
            {
                flash.display.MovieClip(this._art.getChildByName(this._config.backToGameHitArea)).useHandCursor = false;
            }
            if (!(this._backToGameHitArea == null) && this._config.backToGameClosePayTable) 
            {
                this._backToGameHitArea.addEventListener(flash.events.MouseEvent.CLICK, this.onBackToGameClicked, false, 0, true);
            }
            else if (this._backToGameHitArea == null) 
            {
                _trace("ERROR: No back modal[" + this._config.backToGameHitArea + "] Button found. Please check your art.", "error", this, 16711680);
            }
            return;
        }

        internal function onNextClicked(arg1:flash.events.MouseEvent):void
        {
            this.removeTextFields();
            this._config.next();
            this.switchPage();
            dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.NEXT));
            return;
        }

        internal function onPreviousClicked(arg1:flash.events.MouseEvent):void
        {
            this.removeTextFields();
            this._config.previous();
            this.switchPage();
            dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.PREVIOUS));
            return;
        }

        protected function switchPage():void
        {
            this._art.gotoAndStop(this._config.currentPage + 1);
            this.setupTextFields();
            this.setEngineBadge(this._art);
            return;
        }

        protected function setEngineBadge(arg1:flash.display.MovieClip):void
        {
            var currentScreen:flash.display.MovieClip;
            var badge:flash.display.MovieClip;

            var loc1:*;
            badge = null;
            currentScreen = arg1;
            try 
            {
                badge = currentScreen.getChildByName("engineBadge") as flash.display.MovieClip;
                if (mgs.aurora.games.framework.ModuleReference.moduleInfo.engineBadge) 
                {
                    badge.visible = true;
                }
                else 
                {
                    badge.visible = false;
                }
            }
            catch (e:Error)
            {
                _trace("Could not find the engineBadge. Check your Art setup.", "error", this, 16711680);
            }
            return;
        }

        internal function onBackToGameClicked(arg1:flash.events.MouseEvent):void
        {
            dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.CLOSE));
            return;
        }

        protected function removeTextFields():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=this._config.getPageData(this._config.currentPage);
            var loc5:*=0;
            while (loc5 < loc1.numFields) 
            {
                loc2 = loc1.getField(loc5);
                loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2.type);
                if ((loc4 = flash.display.DisplayObjectContainer(this._art.getChildByName(loc1.attachPrefix + loc5))) && loc3) 
                {
                    loc4.removeChild(loc3.displayObject);
                }
                ++loc5;
            }
            return;
        }

        protected function setupTextFields():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=this._config.getPageData(this._config.currentPage);
            var loc5:*=0;
            while (loc5 < loc1.numFields) 
            {
                loc2 = loc1.getField(loc5);
                loc3 = mgs.aurora.games.common.components.ui.components.text.factories.TextFieldAbstractFactory.getTextField(loc2.type);
                loc3.text = loc2.value;
                loc4 = flash.display.DisplayObjectContainer(this._art.getChildByName(loc1.attachPrefix + loc5));
                loc3.addTo(loc4);
                ++loc5;
            }
            return;
        }

        public function hide():void
        {
            this.removeTextFields();
            if (this._art) 
            {
                this._config.layer.removeChild(this._art);
            }
            this._art = null;
            dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.HIDE));
            return;
        }

        public override function dispose():void
        {
            this.hide();
            return;
        }

        protected var _config:mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData;

        protected var _art:flash.display.MovieClip;

        internal var _nextButton:flash.display.InteractiveObject;

        internal var _previousButton:flash.display.InteractiveObject;

        internal var _backToGameButton:flash.display.InteractiveObject;

        internal var _backToGameHitArea:flash.display.InteractiveObject;
    }
}


//                class ImmortalRomanceDynamicStoryAchievementPaytable
package mgs.aurora.slots.components.paytable.paytable.dyn 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.logicBlocks.agents.*;
    import mgs.aurora.slots.components.paytable.data.dyn.*;
    
    public class ImmortalRomanceDynamicStoryAchievementPaytable extends mgs.aurora.slots.components.paytable.paytable.dyn.DynamicAchievementPaytable
    {
        public function ImmortalRomanceDynamicStoryAchievementPaytable(arg1:mgs.aurora.slots.components.paytable.data.dyn.DynamicPaytableData, arg2:mgs.aurora.games.logicBlocks.agents.ConductorAgent)
        {
            super(arg1, arg2);
            setClassDescription("mgs.aurora.slots.components.paytable.paytable.dyn.DynamicStoryAchievementPaytable");
            return;
        }

        internal function retractActiveStory():void
        {
            var loc3:*=null;
            this.dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.STORY_CLOSE));
            this._userInteraction = false;
            this._scrollingUp = false;
            this.removeAllScrollTweens();
            var loc1:*=this._activeStory;
            var loc2:*=flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.layer));
            if (loc1 && loc2) 
            {
                loc3 = flash.display.MovieClip(loc2.getChildByName(loc1.id));
                this.swapAndSetupButton(loc1, false);
                caurina.transitions.Tweener.addTween(loc3, {"y":loc1.y, "time":_config.storyData.tweenTime, "transition":"easeOutSine"});
            }
            return;
        }

        internal function hideStories():void
        {
            var loc1:*=null;
            if (this._activeStory) 
            {
                this.dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.STORY_CLOSE));
                this.removeAllScrollTweens();
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.layer));
                loc1.removeChild(loc1.getChildByName(this._activeStory.id));
                this.swapAndSetupButton(this._activeStory, false);
            }
            return;
        }

        internal function swapAndSetupButton(arg1:mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData, arg2:Boolean):void
        {
            var loc1:*=arg2 ? flash.display.MovieClip(_art.getChildByName(arg1.buttonName)) : flash.display.MovieClip(_art.getChildByName(arg1.infoButtonName));
            if (loc1) 
            {
                this.removeEventListeners(loc1);
                loc1.gotoAndStop(INACTIVE);
                loc1.visible = false;
            }
            loc1 = arg2 ? flash.display.MovieClip(_art.getChildByName(arg1.infoButtonName)) : flash.display.MovieClip(_art.getChildByName(arg1.buttonName));
            if (loc1) 
            {
                loc1.visible = true;
                loc1.gotoAndStop(ACTIVE);
                loc1.mouseChildren = false;
                if (arg2) 
                {
                    this.addInfoEventListeners(loc1);
                }
                else 
                {
                    this.addEventListeners(loc1);
                }
            }
            return;
        }

        internal function onOver(arg1:flash.events.MouseEvent):void
        {
            flash.display.MovieClip(arg1.target).gotoAndStop(OVER);
            return;
        }

        internal function onOut(arg1:flash.events.MouseEvent):void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=_config.storyData.getStoryButtons(_config.currentPage);
            var loc2:*=flash.display.MovieClip(arg1.target);
            loc2.gotoAndStop(ACTIVE);
            var loc5:*=0;
            var loc6:*=loc1;
            for each (loc4 in loc6) 
            {
                if (loc2.name == loc4.buttonName) 
                {
                    continue;
                }
                loc3 = flash.display.MovieClip(_art.getChildByName(loc4.buttonName));
                break;
            }
            if (loc3 && flash.display.MovieClip(loc2.getChildByName("pulse")) && flash.display.MovieClip(loc2.getChildByName("textPulse")) && flash.display.MovieClip(loc3.getChildByName("pulse")) && flash.display.MovieClip(loc3.getChildByName("textPulse"))) 
            {
                flash.display.MovieClip(loc2.getChildByName("pulse")).gotoAndPlay(flash.display.MovieClip(loc3.getChildByName("pulse")).currentFrame);
                flash.display.MovieClip(loc2.getChildByName("textPulse")).gotoAndPlay(flash.display.MovieClip(loc3.getChildByName("textPulse")).currentFrame);
            }
            return;
        }

        protected override function switchPage():void
        {
            this.hideStories();
            this.cleanupScrollAssets();
            this._activeStory = null;
            super.switchPage();
            this.setupStoryButtons();
            return;
        }

        public function get activeStoryId():String
        {
            return this._activeStory.id;
        }

        public function get activeStoryAutoScrollDelay():uint
        {
            return this._activeStory.scrollPercentageDelay;
        }

        public override function show():void
        {
            super.show();
            this._activeStory = null;
            return;
        }

        public override function hide():void
        {
            this.hideStories();
            this.cleanupScrollAssets();
            this._activeStory = null;
            super.hide();
            return;
        }

        protected override function setupButtons():void
        {
            super.setupButtons();
            this.setupStoryButtons();
            return;
        }

        internal function onDown(arg1:flash.events.MouseEvent):void
        {
            flash.display.MovieClip(arg1.target).gotoAndStop(DEPRESSED);
            return;
        }

        internal function setupStoryButtons():void
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc1:*=_config.storyData.getStoryButtons(_config.currentPage);
            var loc5:*=0;
            var loc6:*=loc1;
            for each (loc2 in loc6) 
            {
                loc3 = flash.display.MovieClip(_art.getChildByName(loc2.buttonName));
                loc4 = flash.display.MovieClip(_art.getChildByName(loc2.infoButtonName));
                if (loc3) 
                {
                    loc3.gotoAndStop(ACTIVE);
                    loc3.mouseChildren = false;
                    this.addEventListeners(loc3);
                }
                if (!loc4) 
                {
                    continue;
                }
                loc4.visible = false;
            }
            return;
        }

        internal function addEventListeners(arg1:flash.display.MovieClip):void
        {
            this.addGenericListeners(arg1);
            arg1.addEventListener(flash.events.MouseEvent.CLICK, this.onClick);
            return;
        }

        internal function removeEventListeners(arg1:flash.display.MovieClip):void
        {
            this.removeGenericListeners(arg1);
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, this.onClick);
            return;
        }

        internal function addInfoEventListeners(arg1:flash.display.MovieClip):void
        {
            this.addGenericListeners(arg1);
            arg1.addEventListener(flash.events.MouseEvent.CLICK, this.onInfoClick);
            return;
        }

        internal function removeInfoEventListeners(arg1:flash.display.MovieClip):void
        {
            this.removeGenericListeners(arg1);
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, this.onInfoClick);
            return;
        }

        internal function addGenericListeners(arg1:flash.display.MovieClip):void
        {
            arg1.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onDown);
            arg1.addEventListener(flash.events.MouseEvent.ROLL_OVER, this.onOver);
            arg1.addEventListener(flash.events.MouseEvent.ROLL_OUT, this.onOut);
            return;
        }

        internal function removeGenericListeners(arg1:flash.display.MovieClip):void
        {
            arg1.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onDown);
            arg1.removeEventListener(flash.events.MouseEvent.ROLL_OVER, this.onOver);
            arg1.removeEventListener(flash.events.MouseEvent.ROLL_OUT, this.onOut);
            return;
        }

        internal function onClick(arg1:flash.events.MouseEvent):void
        {
            var loc3:*=null;
            var loc1:*=flash.display.MovieClip(arg1.target).name;
            var loc2:*=_config.storyData.getStoryButton(loc1);
            if (this._activeStory && !(this._activeStory == loc2)) 
            {
                this.retractActiveStory();
                this.cleanupScrollAssets();
            }
            var loc4:*=flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.layer));
            if (!(loc3 = flash.display.MovieClip(loc4.getChildByName(loc2.id)))) 
            {
                (loc3 = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(loc2.id)).x = loc2.x;
                loc3.y = loc2.y;
                loc4.addChild(loc3);
            }
            var loc5:*;
            (loc5 = flash.display.MovieClip(loc3.getChildByName(loc2.scroller))).y = loc2.scrollerStartPosition;
            this._activeStory = loc2;
            this.setupStoryHitBox();
            this.swapAndSetupButton(loc2, true);
            this.dispatchEvent(new mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent(mgs.aurora.slots.components.paytable.data.dyn.PaytableDisplayEvent.STORY_OPEN));
            caurina.transitions.Tweener.addTween(loc3, {"y":loc2.y + _config.storyData.offset, "time":_config.storyData.tweenTime, "transition":"easeOutSine", "onComplete":this.onStoryTweenedOut});
            return;
        }

        internal function onStoryTweenedOut():void
        {
            this.setupScrollDownButton();
            return;
        }

        internal function setupStoryHitBox():void
        {
            var loc1:*=null;
            if (!this._storyHitBox) 
            {
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.scrollLayer));
                this._storyHitBox = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Story_HitBox");
                this._storyHitBox.x = this._activeStory.storyHitX;
                this._storyHitBox.y = this._activeStory.storyHitY;
                loc1.addChild(this._storyHitBox);
                this._storyHitBox.addEventListener(flash.events.MouseEvent.MOUSE_WHEEL, this.onScroll);
            }
            return;
        }

        internal function removeStoryHitBox():void
        {
            var loc1:*=null;
            if (this._storyHitBox) 
            {
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.scrollLayer));
                if (this._storyHitBox.parent == loc1 && !(loc1 == null)) 
                {
                    this._storyHitBox.removeEventListener(flash.events.MouseEvent.MOUSE_WHEEL, this.onScroll);
                    loc1.removeChild(this._storyHitBox);
                }
                this._storyHitBox = null;
            }
            return;
        }

        internal function setupScrollDownButton():void
        {
            var loc1:*=null;
            if (!this._scrollDownButton) 
            {
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.scrollLayer));
                this._scrollDownButton = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Down_Arrow");
                this._scrollDownButton.x = this._activeStory.scrollDownX;
                this._scrollDownButton.y = this._activeStory.scrollDownY;
                this._scrollDownButton.mouseChildren = false;
                this._scrollDownButton.name = "scroll_down";
                loc1.addChild(this._scrollDownButton);
                this.setupScrollListeners(this._scrollDownButton);
            }
            return;
        }

        internal function removeScrollDownButton():void
        {
            var loc1:*=null;
            if (this._scrollDownButton) 
            {
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.scrollLayer));
                this.removeScrollListeners(this._scrollDownButton);
                if (this._scrollDownButton.parent == loc1 && !(loc1 == null)) 
                {
                    loc1.removeChild(this._scrollDownButton);
                }
                this._scrollDownButton = null;
            }
            return;
        }

        internal function setupScrollUpButton():void
        {
            var loc1:*=null;
            if (!this._scrollUpButton) 
            {
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.scrollLayer));
                this._scrollUpButton = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("Up_Arrow");
                this._scrollUpButton.x = this._activeStory.scrollUpX;
                this._scrollUpButton.y = this._activeStory.scrollUpY;
                this._scrollUpButton.mouseChildren = false;
                this._scrollUpButton.name = "scroll_up";
                loc1.addChild(this._scrollUpButton);
                this.setupScrollListeners(this._scrollUpButton);
            }
            return;
        }

        internal function cleanupScrollAssets():void
        {
            this._scrollingUp = false;
            this.removeScrollUpButton();
            this.removeScrollDownButton();
            this.removeStoryHitBox();
            return;
        }

        internal function removeScrollUpButton():void
        {
            var loc1:*=null;
            if (this._scrollUpButton) 
            {
                loc1 = flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.scrollLayer));
                this.removeScrollListeners(this._scrollUpButton);
                loc1.removeChild(this._scrollUpButton);
                this._scrollUpButton = null;
            }
            return;
        }

        internal function setupScrollListeners(arg1:flash.display.MovieClip):void
        {
            arg1.addEventListener(flash.events.MouseEvent.CLICK, this.onScroll);
            return;
        }

        internal function removeScrollListeners(arg1:flash.display.MovieClip):void
        {
            arg1.removeEventListener(flash.events.MouseEvent.CLICK, this.onScroll);
            return;
        }

        internal function onScroll(arg1:flash.events.MouseEvent):void
        {
            var loc4:*=0;
            var loc5:*=NaN;
            if (!this._scrollDownButton && !this._scrollUpButton) 
            {
                return;
            }
            var loc1:*=flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.layer));
            var loc2:*=flash.display.MovieClip(loc1.getChildByName(this._activeStory.id));
            var loc3:*=flash.display.MovieClip(loc2.getChildByName(this._activeStory.scroller));
            this._userInteraction = true;
            if (this._scrollingUp && (flash.display.MovieClip(arg1.target).name == "scroll_up" || arg1.delta > 0)) 
            {
                if (!this._scrollDownButton) 
                {
                    this.setupScrollDownButton();
                }
                this._scrollDownButton.visible = true;
                loc4 = this._activeStory.scrollerStartPosition;
                loc5 = this.adjustScrollSpeed(this.calcTimeToScroll(loc4, loc3, false), arg1.delta != 0 ? false : true);
                if (loc3.y != loc4) 
                {
                    caurina.transitions.Tweener.addTween(loc3, {"y":loc4, "time":loc5, "transition":"linear", "onComplete":this.scrollTopReached});
                }
                this._scrollingUp = false;
            }
            if (!this._scrollingUp && (flash.display.MovieClip(arg1.target).name == "scroll_down" || arg1.delta < 0)) 
            {
                if (!this._scrollUpButton) 
                {
                    this.setupScrollUpButton();
                }
                this._scrollUpButton.visible = true;
                loc4 = this.calcEndScrollPoint(loc3);
                loc5 = this.adjustScrollSpeed(this.calcTimeToScroll(loc4, loc3, true), arg1.delta != 0 ? false : true);
                if (loc3.y != loc4) 
                {
                    caurina.transitions.Tweener.addTween(loc3, {"y":loc4, "time":loc5, "transition":"linear", "onComplete":this.scrollBottomReached});
                }
                this._scrollingUp = true;
            }
            return;
        }

        internal function adjustScrollSpeed(arg1:Number, arg2:Boolean):Number
        {
            var loc1:*=NaN;
            if (arg2) 
            {
                loc1 = Math.floor(arg1 / 2);
            }
            else 
            {
                loc1 = Math.floor(arg1 / 2 * 0.75);
            }
            return loc1;
        }

        public function autoScroll(arg1:String):void
        {
            var loc4:*=0;
            var loc5:*=NaN;
            var loc1:*=flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.layer));
            var loc2:*=flash.display.MovieClip(loc1.getChildByName(this._activeStory.id));
            var loc3:*=flash.display.MovieClip(loc2.getChildByName(this._activeStory.scroller));
            if (!this._scrollUpButton) 
            {
                this.setupScrollUpButton();
            }
            this._scrollUpButton.visible = true;
            loc4 = this.calcEndScrollPoint(loc3);
            loc5 = this.calcTimeToScroll(loc4, loc3, true) * 2;
            if (!(loc3.y == loc4) && !this._userInteraction) 
            {
                caurina.transitions.Tweener.addTween(loc3, {"y":loc4, "time":loc5, "transition":"linear", "onComplete":this.scrollBottomReached});
            }
            return;
        }

        internal function calcEndScrollPoint(arg1:flash.display.MovieClip):int
        {
            var loc1:*=arg1.height;
            var loc2:*=310;
            return loc2 - loc1 + this._activeStory.scrollOffset;
        }

        internal function calcTimeToScroll(arg1:int, arg2:flash.display.MovieClip, arg3:Boolean=false):int
        {
            if (arg3) 
            {
                return (arg2.y - arg1) / _config.storyData.timeDivider;
            }
            return (arg1 - arg2.y) / _config.storyData.timeDivider;
        }

        internal function scrollBottomReached():void
        {
            this._scrollDownButton.visible = false;
            this.setupScrollUpButton();
            return;
        }

        internal function scrollTopReached():void
        {
            this._scrollUpButton.visible = false;
            this.setupScrollDownButton();
            return;
        }

        internal function onInfoClick(arg1:flash.events.MouseEvent):void
        {
            this.retractActiveStory();
            this.cleanupScrollAssets();
            return;
        }

        internal function removeAllScrollTweens():void
        {
            var loc1:*=flash.display.DisplayObjectContainer(_art.getChildByName(_config.storyData.layer));
            var loc2:*=flash.display.MovieClip(loc1.getChildByName(this._activeStory.id));
            var loc3:*=flash.display.MovieClip(loc2.getChildByName(this._activeStory.scroller));
            if (caurina.transitions.Tweener.isTweening(loc3)) 
            {
                caurina.transitions.Tweener.removeAllTweens();
            }
            return;
        }

        public static const INACTIVE:String="Inactive";

        public static const ACTIVE:String="Active";

        public static const OVER:String="Over";

        public static const DEPRESSED:String="Depressed";

        internal var _activeStory:mgs.aurora.slots.components.paytable.data.dyn.StoryButtonData;

        internal var _scrollUpButton:flash.display.MovieClip;

        internal var _scrollDownButton:flash.display.MovieClip;

        internal var _storyHitBox:flash.display.MovieClip;

        internal var _scrollingUp:Boolean=false;

        internal var _userInteraction:Boolean;
    }
}


//            package paytableInterfaces
//              package generic
//                class IPaytable
package mgs.aurora.slots.components.paytable.paytableInterfaces.generic 
{
    import mgs.aurora.games.common.components.generic.*;
    
    public interface IPaytable extends mgs.aurora.games.common.components.generic.IDisposable
    {
        function show():void;

        function hide():void;
    }
}


//          package reelEngine
//            class EReel
package mgs.aurora.slots.components.reelEngine 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.filters.*;
    import flash.geom.*;
    import mgs.aurora.games.base.*;
    
    public class EReel extends mgs.aurora.games.base.BaseClass implements mgs.aurora.slots.components.reelEngine.IEReel
    {
        public function EReel(arg1:flash.display.BitmapData, arg2:__AS3__.vec.Vector.<__AS3__.vec.Vector.<flash.display.BitmapData>>, arg3:int, arg4:int, arg5:int, arg6:int, arg7:int=0, arg8:int=0)
        {
            super();
            setClassDescription("mgs.aurora.slots.components.reelsEngine.EReel");
            this._rect = new flash.geom.Rectangle(arg3 * arg5 + arg3 * arg7, 0, arg5, arg6 * arg4 + arg8 * arg4);
            this._ySpacing = arg8;
            this._Y = 0;
            this._currentIndex = 0;
            this._rows = arg4;
            this._reelID = arg3;
            this._reelLength = 0;
            this._symbolWidth = arg5;
            this._symbolHeight = arg6;
            this._symbolSpace = arg6 + this._ySpacing;
            this._canvas = arg1;
            this._symbols = arg2;
            this._blurr = 0;
            this._spin = false;
            this._stopping = false;
            this._blurUpdate = false;
            this._viewArray = [];
            this._reelIndexes = new Vector.<int>();
            this._reelVisSymbols = new Vector.<flash.display.BitmapData>();
            this._buffer = new flash.display.BitmapData(this._symbolWidth, this._rect.height + this._symbolSpace, true, 0);
            return;
        }

        public function get reelStripLength():Number
        {
            return this._reelStripLength;
        }

        public function get reelLength():int
        {
            return this._reelLength;
        }

        public function set index(arg1:int):void
        {
            this._currentIndex = arg1;
            return;
        }

        public function get index():int
        {
            return this._currentIndex;
        }

        public function setY(arg1:Number):void
        {
            this.y = arg1;
            return;
        }

        public function get y():Number
        {
            return this._Y;
        }

        public function set isSpinning(arg1:Boolean):void
        {
            this._spin = arg1;
            return;
        }

        public function set y(arg1:Number):void
        {
            this._Y = arg1;
            return;
        }

        public function get isSpinning():Boolean
        {
            return this._spin;
        }

        public function set isActive(arg1:Boolean):void
        {
            this._active = arg1;
            return;
        }

        public function get isActive():Boolean
        {
            return this._active;
        }

        public function set isStopping(arg1:Boolean):void
        {
            this._stopping = arg1;
            return;
        }

        public function get isStopping():Boolean
        {
            return this._stopping;
        }

        public function set stopPosition(arg1:Number):void
        {
            this._stopPosition = arg1;
            return;
        }

        public function get stopPosition():Number
        {
            return this._stopPosition;
        }

        public function redraw(arg1:Boolean=false):void
        {
            this._internalIndex = this.indexFromY(this._Y);
            var loc1:*=this.correctSymY();
            if (!(this._renderedY == this._Y) && !(this._internalIndex == this._previousIndex)) 
            {
                if (this._Y < this._renderedY) 
                {
                    var loc2:*;
                    var loc3:*;
                    this._currentIndex = this.getCorrectedIndex(loc2._currentIndex = loc3 = ((loc2 = this)._currentIndex - 1));
                    this._viewArray.pop();
                    this._reelVisSymbols.pop();
                    this._viewArray.unshift(this._reelIndexes[this._currentIndex]);
                    this._reelVisSymbols.unshift(this._symbols[this._reelSet][this._reelIndexes[this._currentIndex]]);
                }
                else if (this._Y > this._renderedY) 
                {
                    this._currentIndex = this.getCorrectedIndex(loc2._currentIndex = loc3 = ((loc2 = this)._currentIndex + 1));
                    this._viewArray.shift();
                    this._reelVisSymbols.shift();
                    this._viewArray.push(this._reelIndexes[this._currentIndex]);
                    this._reelVisSymbols.push(this._symbols[this._reelSet][this._reelIndexes[this._currentIndex]]);
                }
                this.cacheBitmaps();
                this._buffer.applyFilter(this._buffer, new flash.geom.Rectangle(0, 0, this._symbolWidth, this._rect.height + this._symbolSpace), new flash.geom.Point(0, 0), new flash.filters.BlurFilter(0, this._blurr));
            }
            else if (this._blurUpdate) 
            {
                this._blurUpdate = false;
                this.cacheBitmaps();
                this._buffer.applyFilter(this._buffer, new flash.geom.Rectangle(0, 0, this._symbolWidth, this._rect.height + this._symbolSpace), new flash.geom.Point(0, 0), new flash.filters.BlurFilter(0, this._blurr));
            }
            if (!(this._renderedY == this._Y) || arg1) 
            {
                this._canvas.copyPixels(this._buffer, new flash.geom.Rectangle(0, 0, this._symbolWidth, this._rect.height + this._symbolSpace), new flash.geom.Point(this._rect.x, loc1 * -1));
            }
            this._renderedY = this._Y;
            this._previousIndex = this._internalIndex;
            return;
        }

        public function createStartUpIndexes():void
        {
            var loc2:*=0;
            this._viewArray = [];
            this._reelVisSymbols = new Vector.<flash.display.BitmapData>();
            var loc1:*=0;
            while (loc1 <= this._rows) 
            {
                loc2 = this.getCorrectedIndex(this._currentIndex + loc1);
                this._viewArray.push(this._reelIndexes[loc2]);
                this._reelVisSymbols.push(this._symbols[this._reelSet][this._reelIndexes[loc2]]);
                ++loc1;
            }
            this.cacheBitmaps();
            return;
        }

        public function swapSymbol(arg1:int, arg2:int, arg3:int):void
        {
            this._reelVisSymbols[arg3] = this._symbols[arg2][arg1];
            this.cacheBitmaps();
            this.redraw();
            return;
        }

        public function cacheBitmaps():void
        {
            var loc1:*=0;
            while (loc1 <= this._rows) 
            {
                this._buffer.copyPixels(this._reelVisSymbols[loc1], new flash.geom.Rectangle(0, 0, this._symbolWidth, this._symbolHeight), new flash.geom.Point(0, loc1 * this._symbolSpace));
                ++loc1;
            }
            return;
        }

        public function get yFromIndex():int
        {
            var loc1:*=this._currentIndex * this._symbolSpace;
            return loc1;
        }

        public function set isBreathing(arg1:Boolean):void
        {
            this._isBreathing = arg1;
            return;
        }

        public function get isBouncing():Boolean
        {
            return this._isBouncing;
        }

        public function set isBouncing(arg1:Boolean):void
        {
            this._isBouncing = arg1;
            return;
        }

        public function resetReelLength():void
        {
            this._reelLength = this._reelIndexes.length;
            this._reelStripLength = this._symbolWidth * this._reelLength + this._reelLength * this._ySpacing;
            return;
        }

        public function correctSymY():Number
        {
            var loc1:*=int(this._Y % this._symbolSpace);
            if (loc1 < 0) 
            {
                loc1 = this._symbolSpace + loc1;
            }
            return loc1;
        }

        internal function indexFromY(arg1:int):int
        {
            var loc1:*=arg1;
            var loc2:*=Math.floor(loc1 / this._symbolSpace);
            return loc2;
        }

        public function correctY(arg1:Number):Number
        {
            arg1 = arg1 % this._reelStripLength;
            arg1 = arg1 < 0 ? this._reelStripLength + arg1 : arg1;
            return arg1;
        }

        public function getCorrectedIndex(arg1:int):int
        {
            var loc1:*=arg1 % this._reelLength;
            loc1 = loc1 < 0 ? this._reelLength + loc1 : loc1;
            return loc1;
        }

        public override function dispose():void
        {
            this._canvas.dispose();
            this._buffer.dispose();
            this._canvas = null;
            this._buffer = null;
            this._symbols = null;
            super.dispose();
            return;
        }

        public function setReels(arg1:__AS3__.vec.Vector.<int>, arg2:int, arg3:int):void
        {
            this._reelSet = arg3;
            this._currentIndex = arg2;
            this._reelIndexes = arg1;
            this.resetReelLength();
            if (this._viewArray.length == 0) 
            {
                this.createStartUpIndexes();
            }
            return;
        }

        public function setTackedOnReels(arg1:__AS3__.vec.Vector.<int>, arg2:int, arg3:int):void
        {
            this.setReels(arg1, arg2, arg3);
            this.createStartUpIndexes();
            this.redraw();
            return;
        }

        public function get isBreathing():Boolean
        {
            return this._isBreathing;
        }

        public function set blur(arg1:int):void
        {
            this._blurUpdate = true;
            this._blurr = arg1;
            return;
        }

        public function get blur():int
        {
            return this._blurr;
        }

        public function get id():int
        {
            return this._reelID;
        }

        internal var _currentIndex:int;

        internal var _Y:Number;

        internal var _canvas:flash.display.BitmapData;

        internal var _buffer:flash.display.BitmapData;

        internal var _ySpacing:Number;

        internal var _rows:int;

        internal var _reelID:int;

        internal var _symbolSpace:Number;

        internal var _symbolWidth:Number;

        internal var _symbolHeight:Number;

        internal var _reelLength:Number;

        internal var _stopPosition:Number;

        internal var _reelIndexes:__AS3__.vec.Vector.<int>;

        internal var _reelVisSymbols:__AS3__.vec.Vector.<flash.display.BitmapData>;

        internal var _reelStripLength:int;

        internal var _symbols:__AS3__.vec.Vector.<__AS3__.vec.Vector.<flash.display.BitmapData>>;

        internal var _blurr:Number;

        internal var _spin:Boolean;

        internal var _stopping:Boolean;

        internal var _isBreathing:Boolean=false;

        internal var _isBouncing:Boolean=false;

        internal var _blurUpdate:Boolean;

        internal var _internalIndex:int;

        internal var _previousIndex:int;

        internal var _renderedY:Number;

        internal var _active:Boolean=false;

        internal var _reelSet:int=0;

        internal var _viewArray:Array;

        internal var _rect:flash.geom.Rectangle;
    }
}


//            class EReelEvent
package mgs.aurora.slots.components.reelEngine 
{
    import flash.events.*;
    
    public class EReelEvent extends flash.events.Event
    {
        public function EReelEvent(arg1:String, arg2:int)
        {
            super(arg1);
            this._reel = arg2;
            return;
        }

        public function get reelId():int
        {
            return this._reel;
        }

        internal var _reel:int;
    }
}


//            class IEReel
package mgs.aurora.slots.components.reelEngine 
{
    public interface IEReel
    {
        function get blur():int;

        function set blur(arg1:int):void;

        function get y():Number;

        function set y(arg1:Number):void;

        function get isSpinning():Boolean;

        function set isSpinning(arg1:Boolean):void;

        function get isActive():Boolean;

        function set isActive(arg1:Boolean):void;

        function get id():int;

        function get stopPosition():Number;

        function set stopPosition(arg1:Number):void;

        function set isStopping(arg1:Boolean):void;

        function get isStopping():Boolean;

        function redraw(arg1:Boolean=false):void;

        function correctSymY():Number;

        function correctY(arg1:Number):Number;

        function get yFromIndex():int;

        function get isBreathing():Boolean;

        function get isBouncing():Boolean;
    }
}


//            class ReelEngine
package mgs.aurora.slots.components.reelEngine 
{
    import __AS3__.vec.*;
    import caurina.transitions.*;
    import flash.display.*;
    import flash.events.*;
    import flash.geom.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.timing.*;
    import mgs.aurora.games.common.dataTypes.*;
    import mgs.aurora.games.framework.*;
    import org.as3lib.kitchensync.action.*;
    
    public class ReelEngine extends mgs.aurora.games.base.BaseClass implements flash.events.IEventDispatcher
    {
        public function ReelEngine(arg1:flash.display.DisplayObjectContainer, arg2:int, arg3:int, arg4:int, arg5:int, arg6:int, arg7:int, arg8:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.ReelSetConfig>, arg9:Number=10, arg10:Number=10, arg11:int=10, arg12:int=0, arg13:Number=1)
        {
            super();
            setClassDescription("mgs.aurora.slots.components.reelsEngine.ReelEngine");
            this._rows = arg4;
            this._columns = arg5;
            this._xSpacing = arg11 * arg13;
            this._ySpacing = arg12 * arg13;
            this._scale = arg13;
            this._reelIndex = new Vector.<Vector.<int>>();
            this._reels = new Vector.<mgs.aurora.slots.components.reelEngine.EReel>(this._columns);
            this._symbolHeight = arg7 * arg13;
            this._symbolWidth = arg6 * arg13;
            this._activeReelSet = 0;
            this._quickSpin = false;
            this._x = arg9;
            this._y = arg10;
            this._visHeight = this._symbolHeight * this._rows + (this._rows - 1) * this._ySpacing;
            this._visWidth = this._symbolWidth * this._columns + (this._columns - 1) * this._xSpacing;
            this._numberSymbols = arg2;
            this._topLeftIndex = (this._rows - 1) * this._columns;
            this._visRectangle = new flash.geom.Rectangle(0, 0, this._visWidth, this._visHeight);
            this._numberOfReelSets = arg3;
            this._reelSets = new Vector.<Vector.<Vector.<int>>>(this._numberOfReelSets, true);
            this._tackedOnSymbols = new Vector.<Vector.<int>>(this._numberOfReelSets, true);
            this._symbolCache = new Vector.<Vector.<flash.display.BitmapData>>(this._numberOfReelSets);
            this._behaviour = arg8;
            this._event = new flash.events.EventDispatcher(this);
            this._spinningReels = new Vector.<Boolean>(this._columns);
            this.setCanvas(arg1);
            return;
        }

        public function get numberOfSets():int
        {
            return this._reelSets.length;
        }

        public function get isSpinning():Boolean
        {
            return this._isSpinning;
        }

        public function get spinningReels():__AS3__.vec.Vector.<Boolean>
        {
            return this._spinningReels;
        }

        public function get reels():__AS3__.vec.Vector.<mgs.aurora.slots.components.reelEngine.EReel>
        {
            return this._reels;
        }

        public function get quickSpin():Boolean
        {
            return this._quickSpin;
        }

        public function set quickSpin(arg1:Boolean):void
        {
            this._quickSpin = arg1;
            return;
        }

        public function switchReelSet(arg1:int):void
        {
            var loc1:*=0;
            if (arg1 > (this._reelSets.length - 1)) 
            {
                throw new Error("Reel-set id [" + arg1 + "] out of bounds. - " + toString());
            }
            if (arg1 != this._activeReelSet) 
            {
                this._activeReelSet = arg1;
                loc1 = 0;
                while (loc1 < this._columns) 
                {
                    this._reels[loc1].setReels(this._reelSets[this._activeReelSet][loc1], this._reelIndex[this._activeReelSet][loc1], this._activeReelSet);
                    ++loc1;
                }
            }
            return;
        }

        public function tackOnFakeSymbols(arg1:__AS3__.vec.Vector.<Array>):void
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=this._reelSets[this._activeReelSet];
            var loc2:*=arg1.length;
            var loc3:*=0;
            while (loc3 < this._columns) 
            {
                loc4 = 0;
                while (loc4 < loc2) 
                {
                    loc1[loc3].push(arg1[loc4][loc3]);
                    var loc6:*;
                    var loc7:*;
                    var loc8:*=((loc6 = this._tackedOnSymbols[this._activeReelSet])[loc7 = loc3] + 1);
                    loc6[loc7] = loc8;
                    ++loc4;
                }
                loc5 = loc1[loc3].length - loc2;
                this._reelIndex[this._activeReelSet][loc3] = loc5;
                this._reels[loc3].setTackedOnReels(loc1[loc3], this._reelIndex[this._activeReelSet][loc3], this._activeReelSet);
                ++loc3;
            }
            return;
        }

        public function stripTackedOnSymbols():void
        {
            var loc3:*=0;
            var loc1:*=this._reelSets[this._activeReelSet];
            var loc2:*=0;
            while (loc2 < this._columns) 
            {
                if (this._tackedOnSymbols[this._activeReelSet][loc2] != 0) 
                {
                    loc3 = 0;
                    while (loc3 < this._tackedOnSymbols[this._activeReelSet][loc2]) 
                    {
                        loc1[loc2].pop();
                        ++loc3;
                    }
                    this._tackedOnSymbols[this._activeReelSet][loc2] = 0;
                    if (this._reelIndex[this._activeReelSet][loc2] >= loc1[loc2].length) 
                    {
                        this._reelIndex[this._activeReelSet][loc2] = loc1[loc2].length - 2;
                    }
                    this._reels[loc2].setReels(loc1[loc2], this._reelIndex[this._activeReelSet][loc2], this._activeReelSet);
                }
                ++loc2;
            }
            return;
        }

        public function setReelIndex(arg1:int, arg2:int):void
        {
            this._reels[arg1].index = arg2;
            return;
        }

        public function get activeReelSet():Number
        {
            return this._activeReelSet;
        }

        public function createReelStrips():void
        {
            if (!this._gotCanvas) 
            {
                throw new Error("No Canvas! Please call [setCanvas()] first - " + toString());
            }
            this._reels = new Vector.<mgs.aurora.slots.components.reelEngine.EReel>(this._columns);
            var loc1:*=0;
            while (loc1 < this._columns) 
            {
                this._reels[loc1] = new mgs.aurora.slots.components.reelEngine.EReel(this._bufferData, this._symbolCache, loc1, this._rows, this._symbolWidth, this.symbolHeight, this._xSpacing, this._ySpacing);
                this._reels[loc1].setReels(this._reelSets[this._activeReelSet][loc1], this._reelIndex[this._activeReelSet][loc1], this._activeReelSet);
                this._spinningReels[loc1] = false;
                ++loc1;
            }
            return;
        }

        internal function setCanvas(arg1:flash.display.DisplayObject):void
        {
            var loc1:*=arg1 as flash.display.DisplayObjectContainer;
            this._canvasData = new flash.display.BitmapData(this._visWidth, this._visHeight, true, 16711935);
            this._bufferData = new flash.display.BitmapData(this._visWidth, this._visHeight, true, 16711935);
            var loc2:*=new flash.display.Bitmap(this._canvasData);
            loc1.addChild(loc2);
            loc2.x = this._x;
            loc2.y = this._y;
            this._gotCanvas = true;
            return;
        }

        internal function cacheSymbolBitmapData():void
        {
            var i:int;
            var sym:int;
            var symbl:flash.display.MovieClip;
            var t:flash.display.Sprite;

            var loc1:*;
            i = 0;
            sym = 0;
            symbl = null;
            t = null;
            try 
            {
                i = 0;
                while (i < this._numberOfReelSets) 
                {
                    this._symbolCache[i] = new Vector.<flash.display.BitmapData>(this._numberSymbols);
                    sym = 0;
                    while (sym < this._numberSymbols) 
                    {
                        symbl = mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip("symbol_" + sym + "_" + i) as flash.display.MovieClip;
                        t = new flash.display.Sprite();
                        t.addChild(symbl);
                        symbl.scaleX = this._scale;
                        symbl.scaleY = this._scale;
                        this._symbolCache[i][sym] = new flash.display.BitmapData(this.symbolWidth, this.symbolHeight, true, 0);
                        this._symbolCache[i][sym].draw(t, null, null, null, null, true);
                        ++sym;
                    }
                    ++i;
                }
            }
            catch (e:ReferenceError)
            {
                _trace(e.message, "error", this, 16711680);
                _trace(e.getStackTrace(), "error", this, 16711680);
            }
            this._cached = true;
            return;
        }

        public function stopSpin(arg1:int, arg2:int):void
        {
            caurina.transitions.Tweener.removeTweens(this._reels[arg1]);
            var loc1:*=this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, arg1);
            if (loc1.spinSpeed < 0) 
            {
                this._reels[arg1].index = this._reels[arg1].getCorrectedIndex(arg2 + (this._rows + 1));
            }
            else 
            {
                this._reels[arg1].index = this._reels[arg1].getCorrectedIndex(arg2 - 2);
            }
            this._reels[arg1].isSpinning = false;
            this.stopping(this._reels[arg1]);
            return;
        }

        public function immediateStop(arg1:int, arg2:int):void
        {
            var loc2:*=0;
            if (this._reels[arg1].isBouncing || !this._spinningReels[arg1]) 
            {
                return;
            }
            caurina.transitions.Tweener.removeTweens(this._reels[arg1]);
            this._reels[arg1].isSpinning = false;
            this._reels[arg1].isStopping = false;
            this._reels[arg1].isBouncing = false;
            this._reels[arg1].isBreathing = false;
            this._reels[arg1].index = arg2;
            this._reels[arg1].createStartUpIndexes();
            var loc1:*=this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, this._reels[arg1].id);
            if (loc1.spinSpeed < 0) 
            {
                if (this._quickSpin) 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 1) + loc1.quickBounceStrength;
                }
                else 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 1) + loc1.bounceStrength;
                }
                this._reels[arg1].stopPosition = this._reels[arg1].y - loc2 - this._reels[arg1].correctSymY();
            }
            else 
            {
                if (this._quickSpin) 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 2) - loc1.quickBounceStrength;
                }
                else 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 2) - loc1.bounceStrength;
                }
                this._reels[arg1].stopPosition = this._reels[arg1].y + loc2 - this._reels[arg1].correctSymY();
            }
            this._reels[arg1].blur = 0;
            this._reels[arg1].y = this._reels[arg1].stopPosition;
            this._reels[arg1].redraw(true);
            this.bounce(this._reels[arg1]);
            return;
        }

        public function spin(arg1:int):void
        {
            this._isSpinning = true;
            this._reels[arg1].redraw(true);
            this._reels[arg1].isSpinning = false;
            this._reels[arg1].isStopping = false;
            this._reels[arg1].isBouncing = false;
            this._reels[arg1].isBreathing = false;
            this._reels[arg1].isActive = true;
            this._spinningReels[arg1] = true;
            this.breath(arg1);
            if (!mgs.aurora.games.framework.StageReference.getLevel("Reels").hasEventListener(flash.events.Event.ENTER_FRAME)) 
            {
                mgs.aurora.games.framework.StageReference.getLevel("Reels").addEventListener(flash.events.Event.ENTER_FRAME, this.renderReels);
            }
            this.renderReels();
            var loc1:*=Math.min(this._behaviour[this._activeReelSet].quickSpinTime, this._behaviour[this._activeReelSet].minimumSpinTime);
            new org.as3lib.kitchensync.action.KSFunction(this.stripTackedOnSymbols, loc1 / 2).start();
            return;
        }

        internal function breath(arg1:int):void
        {
            var reelId:int;
            var reelConf:mgs.aurora.games.common.dataTypes.ReelConfig;

            var loc1:*;
            reelConf = null;
            reelId = arg1;
            reelConf = this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, reelId);
            this._reels[reelId].isBreathing = true;
            caurina.transitions.Tweener.removeTweens(this._reels[reelId]);
            if (this._quickSpin) 
            {
                this._reels[reelId].blur = reelConf.quickBreatheBlur;
                caurina.transitions.Tweener.addTween(this._reels[reelId], {"y":this._reels[reelId].y + reelConf.quickBreatheStrength, "time":reelConf.quickBreatheTime, "onComplete":function ():void
                {
                    new org.as3lib.kitchensync.action.KSFunction(scrollReels, reelConf.quickBreathePause, _reels[reelId]).start();
                    return;
                }, "transition":reelConf.quickBreatheTransition, "onUpdate":function ():void
                {
                    tweenRenderReels(this);
                    return;
                }})
            }
            else 
            {
                this._reels[reelId].blur = reelConf.breatheBlur;
                caurina.transitions.Tweener.addTween(this._reels[reelId], {"y":this._reels[reelId].y + reelConf.breatheStrength, "time":reelConf.breatheTime, "onComplete":function ():void
                {
                    new org.as3lib.kitchensync.action.KSFunction(scrollReels, reelConf.breathePause, _reels[reelId]).start();
                    return;
                }, "transition":reelConf.breatheTransition, "onUpdate":function ():void
                {
                    tweenRenderReels(this);
                    return;
                }})
            }
            this.dispatchEvent(new mgs.aurora.slots.components.reelEngine.EReelEvent(EVENT_REEL_BREAHTE, reelId));
            return;
        }

        internal function scrollReels(arg1:mgs.aurora.slots.components.reelEngine.IEReel):void
        {
            var loc3:*=null;
            this.dispatchEvent(new mgs.aurora.slots.components.reelEngine.EReelEvent(EVENT_REEL_SPIN, arg1.id));
            caurina.transitions.Tweener.removeTweens(arg1);
            var loc1:*=this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, arg1.id);
            if (this._quickSpin) 
            {
                arg1.blur = loc1.quickSpinBlur;
            }
            else 
            {
                arg1.blur = loc1.spinBlur;
            }
            this._reels[arg1.id].isBreathing = false;
            if (!arg1.isStopping) 
            {
                arg1.isSpinning = true;
            }
            var loc2:*=true;
            var loc4:*=0;
            var loc5:*=this._reels;
            for each (loc3 in loc5) 
            {
                if (!loc3.isBreathing) 
                {
                    continue;
                }
                loc2 = false;
            }
            if (loc2) 
            {
                this.dispatchEvent(new mgs.aurora.slots.components.reelEngine.EReelEvent(EVENT_ALL_BREATHE_COMPLETE, -1));
            }
            return;
        }

        internal function stopping(arg1:mgs.aurora.slots.components.reelEngine.IEReel):void
        {
            var loc2:*=0;
            var loc1:*=this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, arg1.id);
            if (loc1.spinSpeed < 0) 
            {
                if (this._quickSpin) 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 1) + loc1.quickBounceStrength;
                }
                else 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 1) + loc1.bounceStrength;
                }
                arg1.stopPosition = arg1.y - loc2 - arg1.correctSymY();
            }
            else 
            {
                if (this._quickSpin) 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 2) - loc1.quickBounceStrength;
                }
                else 
                {
                    loc2 = (this._symbolHeight + this._ySpacing) * (this._rows + 2) - loc1.bounceStrength;
                }
                arg1.stopPosition = arg1.y + loc2 - arg1.correctSymY();
            }
            arg1.isSpinning = false;
            arg1.isStopping = true;
            if (this._quickSpin) 
            {
                arg1.blur = loc1.quickSpinBlur;
            }
            else 
            {
                arg1.blur = loc1.spinBlur;
            }
            return;
        }

        public function bounce(arg1:mgs.aurora.slots.components.reelEngine.IEReel):void
        {
            var reel:mgs.aurora.slots.components.reelEngine.IEReel;
            var reelConf:mgs.aurora.games.common.dataTypes.ReelConfig;

            var loc1:*;
            reel = arg1;
            reel.isSpinning = false;
            reel.isStopping = false;
            this._reels[reel.id].isBouncing = true;
            reelConf = this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, reel.id);
            if (this._quickSpin) 
            {
                reel.blur = reelConf.quickBounceBlurAmount;
                reel.redraw(true);
                caurina.transitions.Tweener.removeTweens(reel.id);
                caurina.transitions.Tweener.addTween(reel, {"y":reel.y + reelConf.quickBounceStrength, "time":reelConf.quickBounceTime, "transition":reelConf.quickBounceTransition, "onUpdate":function ():void
                {
                    tweenRenderReels(this);
                    return;
                }, "onComplete":function ():void
                {
                    reelStopped(this);
                    return;
                }})
            }
            else 
            {
                reel.blur = reelConf.bounceBlurAmount;
                reel.redraw(true);
                caurina.transitions.Tweener.removeTweens(reel.id);
                caurina.transitions.Tweener.addTween(reel, {"y":reel.y + reelConf.bounceStrength, "time":reelConf.bounceTime, "transition":reelConf.bounceTransition, "onUpdate":function ():void
                {
                    tweenRenderReels(this);
                    return;
                }, "onComplete":function ():void
                {
                    reelStopped(this);
                    return;
                }})
            }
            this.dispatchEvent(new mgs.aurora.slots.components.reelEngine.EReelEvent(EVENT_REEL_BOUNCE, reel.id));
            return;
        }

        internal function reelStopped(arg1:mgs.aurora.slots.components.reelEngine.IEReel):void
        {
            var loc1:*=arg1.id;
            this._reels[loc1].isBreathing = false;
            this._reels[loc1].isBouncing = false;
            this._reels[loc1].isSpinning = false;
            this._reels[loc1].isActive = false;
            this._reels[loc1].blur = 0;
            var loc2:*=this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, loc1);
            if (loc2.spinSpeed > 0) 
            {
                this._reels[loc1].index = this._reels[loc1].getCorrectedIndex(this._reels[loc1].index - 3);
            }
            this._reels[loc1].createStartUpIndexes();
            caurina.transitions.Tweener.removeTweens(arg1);
            this._spinningReels[loc1] = false;
            this._bufferData.fillRect(new flash.geom.Rectangle(loc1 * (this._symbolWidth + this._xSpacing), 0, this._symbolWidth, this._visHeight), 0);
            this.dispatchEvent(new mgs.aurora.slots.components.reelEngine.EReelEvent(EVENT_REEL_STOP, loc1));
            var loc3:*=true;
            var loc4:*=0;
            while (loc4 < this._spinningReels.length) 
            {
                if (this._spinningReels[loc4]) 
                {
                    loc3 = false;
                }
                ++loc4;
            }
            if (loc3) 
            {
                this._isSpinning = false;
                this.dispatchEvent(new mgs.aurora.slots.components.reelEngine.EReelEvent(EVENT_ALL_REELS_STOP, -1));
                this._canvasData.fillRect(this._visRectangle, 0);
                mgs.aurora.games.framework.StageReference.getLevel("Reels").removeEventListener(flash.events.Event.ENTER_FRAME, this.renderReels);
            }
            return;
        }

        public function tweenRenderReels(arg1:mgs.aurora.slots.components.reelEngine.EReel):void
        {
            arg1.redraw();
            return;
        }

        public function renderReels(arg1:flash.events.Event=null):void
        {
            var loc1:*=NaN;
            var loc2:*=null;
            var loc3:*=null;
            this._canvasData.lock();
            var loc4:*=0;
            var loc5:*=this._reels;
            for each (loc2 in loc5) 
            {
                loc3 = this._behaviour[this._activeReelSet].getReelSetConfig(this._activeReelSet, loc2.id);
                if (loc2.isSpinning) 
                {
                    if (this._quickSpin) 
                    {
                        loc2.y = loc2.y + loc3.quickSpinSpeed;
                    }
                    else 
                    {
                        loc2.y = loc2.y + loc3.spinSpeed;
                    }
                    loc2.redraw();
                    if (loc2.isStopping) 
                    {
                        loc2.isSpinning = false;
                    }
                    continue;
                }
                if (loc2.isStopping && this._quickSpin) 
                {
                    loc2.y = loc2.y + loc3.quickSpinSpeed;
                    if (loc3.quickSpinSpeed < 0) 
                    {
                        if (loc2.y + loc3.quickSpinSpeed < loc2.stopPosition) 
                        {
                            loc2.isStopping = false;
                            loc2.isSpinning = false;
                            loc2.y = loc2.stopPosition;
                            this.bounce(loc2);
                        }
                    }
                    else if (loc3.quickSpinSpeed > 0) 
                    {
                        if (loc2.y - loc3.quickSpinSpeed > loc2.stopPosition) 
                        {
                            loc2.isStopping = false;
                            loc2.isSpinning = false;
                            loc2.y = loc2.stopPosition;
                            this.bounce(loc2);
                        }
                    }
                    loc2.redraw();
                    continue;
                }
                if (!(loc2.isStopping && !this._quickSpin)) 
                {
                    continue;
                }
                loc2.y = loc2.y + loc3.spinSpeed;
                if (loc3.spinSpeed < 0) 
                {
                    if (loc2.y + loc3.spinSpeed < loc2.stopPosition) 
                    {
                        loc2.isStopping = false;
                        loc2.isSpinning = false;
                        loc2.y = loc2.stopPosition;
                        this.bounce(loc2);
                    }
                }
                else if (loc3.spinSpeed > 0) 
                {
                    if (loc2.y - loc3.spinSpeed > loc2.stopPosition) 
                    {
                        loc2.isStopping = false;
                        loc2.isSpinning = false;
                        loc2.y = loc2.stopPosition;
                        this.bounce(loc2);
                    }
                }
                loc2.redraw();
            }
            this._canvasData.copyPixels(this._bufferData, this._visRectangle, new flash.geom.Point(0, 0));
            this._canvasData.unlock();
            return;
        }

        public function redraw():void
        {
            var loc1:*=null;
            if (!this._cached) 
            {
                throw new Error("Can\'t redraw. No Symbols cached. - " + toString());
            }
            var loc2:*=0;
            var loc3:*=this._reels;
            for each (loc1 in loc3) 
            {
                loc1.blur = 0;
                loc1.redraw(true);
            }
            return;
        }

        public function cacheAndRedraw():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._reels;
            for each (loc1 in loc3) 
            {
                loc1.createStartUpIndexes();
                loc1.blur = 0;
                loc1.redraw(true);
            }
            return;
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._event.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._event.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._event.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._event.willTrigger(arg1);
        }

        public override function callMethod(arg1:String, ... rest):void
        {
            var loc1:*=this[arg1];
            loc1.apply(loc1, rest);
            return;
        }

        public override function dispose():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            caurina.transitions.Tweener.removeTweens(this);
            caurina.transitions.Tweener.removeAllTweens();
            mgs.aurora.games.framework.StageReference.getLevel("Reels").removeEventListener(flash.events.Event.ENTER_FRAME, this.renderReels);
            var loc4:*=0;
            var loc5:*=this._reels;
            for each (loc1 in loc5) 
            {
                loc1.dispose();
                loc1 = null;
            }
            loc4 = 0;
            loc5 = this._symbolCache;
            for each (loc2 in loc5) 
            {
                var loc6:*=0;
                var loc7:*=loc2;
                for each (loc3 in loc7) 
                {
                    loc3.dispose();
                }
                delete this._symbolCache[loc2];
            }
            this._symbolCache = null;
            this._reelSets = null;
            this._reelIndex = null;
            this._canvasData.dispose();
            this._bufferData.dispose();
            this._canvasData = null;
            this._bufferData = null;
            this._visRectangle = null;
            this._reels = null;
            super.dispose();
            return;
        }

        public function onInit():void
        {
            this.cacheSymbolBitmapData();
            this.createReelStrips();
            return;
        }

        public function get visWidth():Number
        {
            return this._visWidth;
        }

        public function get visHeight():Number
        {
            return this._visHeight;
        }

        public function get topLeftIndex():int
        {
            return this._topLeftIndex;
        }

        public function get x():Number
        {
            return this._x;
        }

        public function get y():Number
        {
            return this._y;
        }

        public function get scale():Number
        {
            return this._scale;
        }

        public function get symbolHeight():Number
        {
            return this._symbolHeight;
        }

        public function get symbolWidth():Number
        {
            return this._symbolWidth;
        }

        public function get rows():Number
        {
            return this._rows;
        }

        public function get columns():Number
        {
            return this._columns;
        }

        public function get numberSymbols():Number
        {
            return this._numberSymbols;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._event.dispatchEvent(arg1);
        }

        public function get behaviour():__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.ReelSetConfig>
        {
            return this._behaviour;
        }

        public function get reelset():__AS3__.vec.Vector.<__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>>
        {
            return this._reelSets;
        }

        public function addReel(arg1:int, arg2:String):void
        {
            if (this._reelSets[arg1] == null) 
            {
                this._reelSets[arg1] = new Vector.<Vector.<int>>();
                this._reelIndex[arg1] = new Vector.<int>();
                this._tackedOnSymbols[arg1] = new Vector.<int>();
            }
            this._reelSets[arg1].push(Vector.<int>(arg2.split(",")));
            this._reelIndex[arg1].push(0);
            this._tackedOnSymbols[arg1].push(0);
            return;
        }

        public function setReelsIndexes(arg1:int, arg2:String):void
        {
            this._activeReelSet = arg1;
            var loc1:*=Vector.<int>(arg2.split(","));
            this._reelIndex[arg1] = loc1;
            var loc2:*=0;
            while (loc2 < this._reelIndex[arg1].length) 
            {
                this._reels[loc2].index = this._reelIndex[arg1][loc2];
                ++loc2;
            }
            return;
        }

        public function setReelsIndexesByArray(arg1:int, arg2:Array):void
        {
            this._activeReelSet = arg1;
            var loc1:*=Vector.<int>(arg2);
            this._reelIndex[arg1] = loc1;
            var loc2:*=0;
            while (loc2 < this._reelIndex[arg1].length) 
            {
                this._reels[loc2].index = this._reelIndex[arg1][loc2];
                ++loc2;
            }
            return;
        }

        public function setReelsIndexesByVector(arg1:int, arg2:__AS3__.vec.Vector.<int>):void
        {
            this._activeReelSet = arg1;
            this._reelIndex[arg1] = arg2;
            var loc1:*=0;
            while (loc1 < this._reelIndex[arg1].length) 
            {
                this._reels[loc1].index = this._reels[loc1].getCorrectedIndex(this._reelIndex[arg1][loc1]);
                ++loc1;
            }
            return;
        }

        public static const EVENT_ALL_BREATHE_COMPLETE:String="allBreatheComplete";

        public static const EVENT_REEL_STOP:String="reelStop";

        public static const EVENT_ALL_REELS_STOP:String="AllReelsStop";

        public static const EVENT_REEL_BREAHTE:String="reelBreathe";

        public static const EVENT_REEL_BOUNCE:String="reelBounce";

        public static const EVENT_REEL_SPIN:String="reelSpin";

        internal var _reelsAdded:Boolean;

        internal var _symbolCache:__AS3__.vec.Vector.<__AS3__.vec.Vector.<flash.display.BitmapData>>;

        internal var _symbolHeight:int;

        internal var _symbolWidth:int;

        internal var _gotCanvas:Boolean;

        internal var _activeReelSet:int;

        internal var _canvasData:flash.display.BitmapData;

        internal var _bufferData:flash.display.BitmapData;

        internal var _visRectangle:flash.geom.Rectangle;

        internal var _reels:__AS3__.vec.Vector.<mgs.aurora.slots.components.reelEngine.EReel>;

        internal var _isSpinning:Boolean;

        internal var _event:flash.events.EventDispatcher;

        internal var _visHeight:int;

        internal var _rows:int;

        internal var _xSpacing:int;

        internal var _ySpacing:int;

        internal var _x:Number;

        internal var _y:Number;

        internal var _numberSymbols:int;

        internal var _topLeftIndex:int;

        internal var _numberOfReelSets:int;

        internal var _scale:Number;

        internal var _behaviour:__AS3__.vec.Vector.<mgs.aurora.games.common.dataTypes.ReelSetConfig>;

        internal var _gameLoop:mgs.aurora.games.common.components.timing.GameLoop;

        internal var _quickSpin:Boolean;

        internal var _cached:Boolean;

        internal var _columns:int;

        internal var _reelSets:__AS3__.vec.Vector.<__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>>;

        internal var _tackedOnSymbols:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;

        internal var _reelIndex:__AS3__.vec.Vector.<__AS3__.vec.Vector.<int>>;

        internal var _spinningReels:__AS3__.vec.Vector.<Boolean>;

        internal var _visWidth:int;
    }
}


//          package respin
//            class RespinEngine
package mgs.aurora.slots.components.respin 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.base.*;
    import mgs.aurora.games.common.components.resourceProxy.*;
    import mgs.aurora.games.common.components.ui.components.text.*;
    import mgs.aurora.games.common.components.utils.*;
    import mgs.aurora.games.framework.*;
    
    public class RespinEngine extends mgs.aurora.games.base.BaseClass implements flash.events.IEventDispatcher
    {
        public function RespinEngine()
        {
            super();
            setClassDescription("mgs.aurora.slots.components.respin.RespinEngine");
            this._event = new flash.events.EventDispatcher(this);
            this._largeTextVec = new Vector.<mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite>();
            this._smallTextVec = new Vector.<mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite>();
            return;
        }

        public function toggleRespins(arg1:Boolean):void
        {
            var enable:Boolean;
            var i:int;
            var hitArea:flash.display.MovieClip;

            var loc1:*;
            hitArea = null;
            enable = arg1;
            i = 0;
            while (i < this._buttons.length) 
            {
                try 
                {
                    hitArea = this._buttons[i].getChildByName("hitarea") as flash.display.MovieClip;
                    if (enable) 
                    {
                        hitArea.visible = true;
                        this._buttons[i].enabled = true;
                        hitArea.useHandCursor = true;
                        if (this._respinUsed) 
                        {
                            this._buttons[i].gotoAndStop("Active");
                        }
                        else 
                        {
                            this._buttons[i].gotoAndStop("Active");
                            this._buttons[i].gotoAndStop("Flashing");
                        }
                        this._buttons[i].getChildByName("respinCostLarge").visible = false;
                        if (!hitArea.hitTestPoint(mgs.aurora.games.framework.StageReference.stage.mouseX, mgs.aurora.games.framework.StageReference.stage.mouseY, true)) 
                        {
                        };
                    }
                    else 
                    {
                        hitArea.visible = false;
                        this._buttons[i].getChildByName("respinCostLarge").visible = false;
                        this._buttons[i].enabled = false;
                        hitArea.useHandCursor = false;
                        this._buttons[i].gotoAndStop("Inactive");
                    }
                }
                catch (e:TypeError)
                {
                    _trace("Art error. Art [hitarea] not defined.-" + toString(), "error", this, 16711680);
                    _trace(e.getStackTrace(), "error", this, 16711680);
                }
                ++i;
            }
            if (enable) 
            {
                this.showSpinCost();
            }
            else 
            {
                this.hideSpinCost();
            }
            return;
        }

        internal function onMouseOver(arg1:flash.events.MouseEvent):void
        {
            var e:flash.events.MouseEvent;

            var loc1:*;
            e = arg1;
            if (e.target.parent.enabled == true) 
            {
                this.dispatchEvent(new mgs.aurora.slots.components.respin.RespinEvent(EVENT_MOUSE_OVER, -1, "none"));
                this._stage.setChildIndex(e.currentTarget.parent, 0);
                e.currentTarget.parent.gotoAndStop("Over");
                try 
                {
                    if (this._hideRespinCost) 
                    {
                        e.currentTarget.parent.getChildByName("respin_over").visible = false;
                        e.currentTarget.parent.getChildByName("respinCostLarge").visible = false;
                    }
                    else 
                    {
                        e.currentTarget.parent.getChildByName("respin_over").visible = true;
                        e.currentTarget.parent.getChildByName("respinCostLarge").visible = true;
                    }
                }
                catch (e:TypeError)
                {
                    _trace("Art error. Art [respin_over] or [respinCostLarge] not defined.-" + toString(), "error", this, 16711680);
                }
                this.dispatchEvent(new mgs.aurora.slots.components.respin.RespinEvent(EVENT_MOUSE_OVER, -1, "none"));
            }
            return;
        }

        internal function onMouseOverRedraw(arg1:int):void
        {
            var reelId:int;
            var mov:flash.display.MovieClip;

            var loc1:*;
            reelId = arg1;
            mov = this._buttons[reelId] as flash.display.MovieClip;
            mov.gotoAndStop("Over");
            try 
            {
                if (this._hideRespinCost) 
                {
                    mov.getChildByName("respin_over").visible = false;
                    mov.getChildByName("respinCostLarge").visible = false;
                }
                else 
                {
                    mov.getChildByName("respin_over").visible = true;
                    mov.getChildByName("respinCostLarge").visible = true;
                }
            }
            catch (e:TypeError)
            {
                _trace("Art error. Art [respin_over] or [respinCostLarge] not defined.-" + toString(), "error", this, 16711680);
            }
            return;
        }

        public function hideSpinCost():void
        {
            var len:int;
            var mov:flash.display.MovieClip;
            var i:int;

            var loc1:*;
            mov = null;
            len = this._buttons.length;
            i = 0;
            while (i < len) 
            {
                try 
                {
                    mov = this._buttons[i].getChildByName("respinCostSmall") as flash.display.MovieClip;
                    mov.visible = false;
                }
                catch (e:TypeError)
                {
                    _trace("Could not find [respinCostSmall] movieclip. Check your Art setup.-" + toString(), "error", this, 16711680);
                }
                ++i;
            }
            return;
        }

        public function setRespinCost(arg1:Array):void
        {
            var cost:Array;
            var len:int;
            var mov:flash.display.MovieClip;
            var i:int;

            var loc1:*;
            mov = null;
            cost = arg1;
            len = cost.length;
            i = 0;
            while (i < len) 
            {
                try 
                {
                    this._smallTextVec[i].text = mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(cost[i], ".");
                }
                catch (e:TypeError)
                {
                    _trace("Could not find [respinCostSmall] movieclip. Check your Art setup.-" + toString(), "error", this, 16711680);
                }
                try 
                {
                    this._largeTextVec[i].text = mgs.aurora.games.common.components.utils.StringFormatting.formatAsCredits(cost[i], ".");
                }
                catch (e:TypeError)
                {
                    _trace("Could not find [respinCostLarge] movieclip. Check your Art setup.-" + toString(), "error", this, 16711680);
                }
                ++i;
            }
            return;
        }

        public function showSpinCost():void
        {
            var len:int;
            var mov:flash.display.MovieClip;
            var i:int;

            var loc1:*;
            mov = null;
            len = this._buttons.length;
            i = 0;
            while (i < len) 
            {
                try 
                {
                    mov = this._buttons[i].getChildByName("respinCostSmall") as flash.display.MovieClip;
                    mov.visible = true;
                }
                catch (e:TypeError)
                {
                    _trace("Could not find [respinCostSmall] movieclip. Check your Art setup.-" + toString(), "error", this, 16711680);
                }
                ++i;
            }
            return;
        }

        public function startFlashing():void
        {
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                if (!this._respinUsed && this._buttons[loc1].enabled) 
                {
                    this._buttons[loc1].gotoAndStop("Flashing");
                }
                ++loc1;
            }
            return;
        }

        public function stopFlashing():void
        {
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                if (!this._respinUsed && this._buttons[loc1].enabled) 
                {
                    this._buttons[loc1].gotoAndStop("Active");
                }
                ++loc1;
            }
            return;
        }

        public function hide():void
        {
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                if (this._buttons[loc1].parent != null) 
                {
                    this._buttons[loc1].parent.removeChild(this._buttons[loc1]);
                }
                ++loc1;
            }
            return;
        }

        public function show():void
        {
            var loc1:*=0;
            while (loc1 < this._buttons.length) 
            {
                if (this._buttons[loc1].parent == null) 
                {
                    this._stage.addChild(this._buttons[loc1]);
                }
                ++loc1;
            }
            return;
        }

        public function getButton(arg1:int):flash.display.MovieClip
        {
            return this._buttons[arg1];
        }

        public function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._event.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._event.dispatchEvent(arg1);
        }

        public function hasEventListener(arg1:String):Boolean
        {
            return this._event.hasEventListener(arg1);
        }

        public function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._event.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public override function dispose():void
        {
            var mov:flash.display.MovieClip;
            var j:mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite;
            var hitArea:flash.display.MovieClip;

            var loc1:*;
            mov = null;
            j = null;
            hitArea = null;
            try 
            {
                loc2 = 0;
                var loc3:*=this._buttons;
                for each (mov in loc3) 
                {
                    hitArea = mov.getChildByName("hitarea") as flash.display.MovieClip;
                    hitArea.removeEventListener(flash.events.MouseEvent.ROLL_OVER, this.onMouseOver);
                    hitArea.removeEventListener(flash.events.MouseEvent.ROLL_OUT, this.onMouseOut);
                    hitArea.removeEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onRespinClick);
                    hitArea.removeEventListener(flash.events.MouseEvent.CLICK, this.onRespinRelease);
                    mov = null;
                }
                loc2 = 0;
                loc3 = this._largeTextVec;
                for each (j in loc3) 
                {
                    j = null;
                }
                loc2 = 0;
                loc3 = this._smallTextVec;
                for each (j in loc3) 
                {
                    j = null;
                }
                this._largeNumbers.dispose();
                this._largeNumbers = null;
                this._smallNumbers.dispose();
                this._smallNumbers = null;
                this._respinCostFont = null;
                this._fontRespin = null;
                this._fontResource = null;
                this._respinButtonId = null;
                this._respinNumFont = null;
                this._costs = null;
                this._event = null;
            }
            catch (e:Error)
            {
                _trace("Error while cleaning up :[" + classPath + "]", "error", this, 16711680);
            }
            super.dispose();
            return;
        }

        public function setup(arg1:flash.display.DisplayObjectContainer, arg2:String, arg3:String, arg4:String, arg5:String):void
        {
            this._stage = arg1;
            this._respinButtonId = arg2;
            this._fontResource = arg3;
            this._respinNumFont = arg4;
            this._respinCostFont = arg5;
            this._buttons = new Vector.<flash.display.MovieClip>();
            this._costs = [];
            return;
        }

        public function get numButtons():int
        {
            return this._buttons.length;
        }

        public function get hideRespinCost():Boolean
        {
            return this._hideRespinCost;
        }

        public function set hideRespinCost(arg1:Boolean):void
        {
            this._hideRespinCost = arg1;
            return;
        }

        public function addRespin(arg1:Number, arg2:Number):void
        {
            var x:Number;
            var y:Number;
            var index:int;
            var hitArea:flash.display.MovieClip;

            var loc1:*;
            hitArea = null;
            x = arg1;
            y = arg2;
            this._buttons.push(mgs.aurora.games.common.components.resourceProxy.Assets.getMovieClip(this._respinButtonId) as flash.display.MovieClip);
            index = (this._buttons.length - 1);
            this._buttons[index].name = "button_" + (this._buttons.length - 1);
            this._buttons[index].x = x;
            this._buttons[index].y = y;
            try 
            {
                hitArea = this._buttons[index].getChildByName("hitarea") as flash.display.MovieClip;
                hitArea.addEventListener(flash.events.MouseEvent.ROLL_OVER, this.onMouseOver);
                hitArea.addEventListener(flash.events.MouseEvent.ROLL_OUT, this.onMouseOut);
                hitArea.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, this.onRespinClick);
                hitArea.addEventListener(flash.events.MouseEvent.CLICK, this.onRespinRelease);
            }
            catch (e:TypeError)
            {
                _trace("Could not find [hitarea] movieclip. Check your Art setup.- " + toString(), "error", this, 16711680);
            }
            this._smallNumbers = new mgs.aurora.games.common.components.utils.CustomFontExt(this._respinNumFont, 10);
            this._largeNumbers = new mgs.aurora.games.common.components.utils.CustomFontExt(this._respinCostFont, 10);
            this._largeTextVec.push(new mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite(this._largeNumbers, mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN));
            this._smallTextVec.push(new mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite(this._smallNumbers, mgs.aurora.games.common.components.utils.CustomFontLabel.CENTRE_ALIGN));
            return;
        }

        public function setupCost():void
        {
            var len:int;
            var mov:flash.display.MovieClip;
            var i:int;

            var loc1:*;
            mov = null;
            len = this._buttons.length;
            i = 0;
            while (i < len) 
            {
                try 
                {
                    mov = this._buttons[i].getChildByName("respinCostSmall") as flash.display.MovieClip;
                    this._smallTextVec[i].addTo(mov);
                    this._smallTextVec[i].text = "0.00";
                }
                catch (e:TypeError)
                {
                    _trace("Could not find [respinCostSmall] movieclip. Check your Art setup.-" + toString(), "error", this, 16711680);
                }
                try 
                {
                    mov = this._buttons[i].getChildByName("respinCostLarge") as flash.display.MovieClip;
                    mov.mouseEnabled = false;
                    mov.mouseChildren = false;
                    mov.visible = false;
                    this._largeTextVec[i].addTo(mov);
                    this._largeTextVec[i].text = "0.00";
                }
                catch (e:TypeError)
                {
                    _trace("Could not find [respinCostLarge] movieclip. Check your Art setup.-" + toString(), "error", this, 16711680);
                }
                ++i;
            }
            return;
        }

        public function willTrigger(arg1:String):Boolean
        {
            return this._event.willTrigger(arg1);
        }

        internal function onRespinRelease(arg1:flash.events.MouseEvent):void
        {
            var me:flash.events.MouseEvent;
            var id:int;

            var loc1:*;
            id = 0;
            me = arg1;
            if (me.target.parent.enabled == true) 
            {
                try 
                {
                    me.currentTarget.parent.gotoAndStop("Active");
                    me.currentTarget.parent.getChildByName("respinCostLarge").visible = false;
                    id = int(me.target.parent.name.split("_")[1]);
                    this.dispatchEvent(new mgs.aurora.slots.components.respin.RespinEvent(EVENT_MOUSE_RELEASE, id, VERB_RESPIN));
                    this._respinUsed = true;
                }
                catch (e:Error)
                {
                    _trace("Art error. Art not configured.-" + toString(), "error", this, 16711680);
                }
            }
            return;
        }

        internal function onRespinClick(arg1:flash.events.MouseEvent):void
        {
            var me:flash.events.MouseEvent;

            var loc1:*;
            me = arg1;
            if (me.target.parent.enabled == true) 
            {
                try 
                {
                    me.currentTarget.parent.gotoAndStop("Mouse_On");
                    if (this._hideRespinCost) 
                    {
                        me.currentTarget.parent.getChildByName("respin_over").visible = false;
                        me.currentTarget.parent.getChildByName("respinCostLarge").visible = false;
                    }
                    else 
                    {
                        me.currentTarget.parent.getChildByName("respin_over").visible = true;
                        me.currentTarget.parent.getChildByName("respinCostLarge").visible = true;
                    }
                }
                catch (e:Error)
                {
                    _trace("Art error. Art [respin_over] or [respinCostLarge] not defined.-" + toString(), "error", this, 16711680);
                }
            }
            return;
        }

        internal function onMouseOut(arg1:flash.events.MouseEvent):void
        {
            var loc1:*=0;
            if (arg1.target.parent.enabled == true) 
            {
                arg1.currentTarget.parent.getChildByName("respinCostLarge").visible = false;
                loc1 = int(arg1.target.parent.name.split("_")[1]);
                this.dispatchEvent(new mgs.aurora.slots.components.respin.RespinEvent(EVENT_MOUSE_OUT, loc1, "none"));
                this.toggleRespins(true);
            }
            return;
        }

        public static const EVENT_MOUSE_OVER:String="mouseOver";

        public static const EVENT_MOUSE_RELEASE:String="mouseRelease";

        public static const EVENT_MOUSE_OUT:String="mouseOut";

        public static const VERB_RESPIN:String="respin";

        internal var _event:flash.events.EventDispatcher;

        internal var _largeNumbers:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _smallNumbers:mgs.aurora.games.common.components.utils.CustomFont;

        internal var _buttons:__AS3__.vec.Vector.<flash.display.MovieClip>;

        internal var _respinUsed:Boolean=false;

        internal var _buttonsReady:Boolean=false;

        internal var _respinCostFont:String;

        internal var _fontRespin:String;

        internal var _fontResource:String;

        internal var _respinButtonId:String;

        internal var _largeTextVec:__AS3__.vec.Vector.<mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite>;

        internal var _smallTextVec:__AS3__.vec.Vector.<mgs.aurora.games.common.components.ui.components.text.ComponentTextSprite>;

        internal var _respinNumFont:String;

        internal var _hideRespinCost:Boolean=true;

        internal var _stage:flash.display.DisplayObjectContainer;

        internal var _costs:Array;
    }
}


//            class RespinEvent
package mgs.aurora.slots.components.respin 
{
    import flash.events.*;
    
    public class RespinEvent extends flash.events.Event
    {
        public function RespinEvent(arg1:String, arg2:int, arg3:String, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._id = arg2;
            this._verb = arg3;
            return;
        }

        public function get id():int
        {
            return this._id;
        }

        public function get verb():String
        {
            return this._verb;
        }

        internal var _id:int;

        internal var _verb:String;
    }
}


//          package symbol
//            class ISymbol
package mgs.aurora.slots.components.symbol 
{
    import flash.display.*;
    
    public interface ISymbol
    {
        function addSymbolState(arg1:String, arg2:Class):void;

        function getNewSymbolState(arg1:String):mgs.aurora.slots.components.symbol.SymbolState;

        function get id():uint;

        function getNewBitmapData(arg1:String):flash.display.BitmapData;

        function dispose():void;
    }
}


//            class ISymbolController
package mgs.aurora.slots.components.symbol 
{
    import __AS3__.vec.*;
    import flash.display.*;
    
    public interface ISymbolController
    {
        function clearVASymbols():void;

        function flashSymbol(arg1:uint, arg2:uint):void;

        function getSymbolBitmapDataAtPosn(arg1:uint):flash.display.BitmapData;

        function placeVASymbols(arg1:__AS3__.vec.Vector.<String>):void;

        function placeVASymbolsFromUint(arg1:__AS3__.vec.Vector.<uint>):void;

        function removeSymbolAtPosn(arg1:uint):void;

        function setSymbolAtPosn(arg1:uint, arg2:String, arg3:String):mgs.aurora.slots.components.symbol.SymbolState;

        function setSymbolStateAtPosn(arg1:uint, arg2:String):mgs.aurora.slots.components.symbol.SymbolState;

        function getSymbolStateAtPosn(arg1:uint):mgs.aurora.slots.components.symbol.SymbolState;

        function isSymbolStateAvailable(arg1:String, arg2:String):Boolean;
    }
}


//            class ISymbolProvider
package mgs.aurora.slots.components.symbol 
{
    import flash.display.*;
    
    public interface ISymbolProvider
    {
        function addSymbolState(arg1:String, arg2:String, arg3:String):void;

        function isSymbolStateAvailable(arg1:String, arg2:String):Boolean;

        function clearSymbols():void;

        function dispose():void;

        function getSymbol(arg1:String):mgs.aurora.slots.components.symbol.ISymbol;

        function getSymbolBitmapData(arg1:String, arg2:String):flash.display.BitmapData;

        function getSymbolState(arg1:String, arg2:String):mgs.aurora.slots.components.symbol.SymbolState;

        function removeSymbol(arg1:String):void;
    }
}


//            class Symbol
package mgs.aurora.slots.components.symbol 
{
    import flash.display.*;
    
    public class Symbol extends Object implements mgs.aurora.slots.components.symbol.ISymbol
    {
        public function Symbol(arg1:uint)
        {
            super();
            this.stateClasses = new Object();
            this._id = arg1;
            return;
        }

        public function get id():uint
        {
            return this._id;
        }

        public function addSymbolState(arg1:String, arg2:Class):void
        {
            var stateID:String;
            var classRef:Class;

            var loc1:*;
            stateID = arg1;
            classRef = arg2;
            try 
            {
                this.stateClasses[stateID] = classRef;
            }
            catch (error:ReferenceError)
            {
            };
            return;
        }

        public function getNewSymbolState(arg1:String):mgs.aurora.slots.components.symbol.SymbolState
        {
            if (this.stateClasses[arg1] == undefined) 
            {
                return null;
            }
            var loc1:*=new this.stateClasses[arg1]();
            loc1.stateID = arg1;
            loc1.owner = this;
            return loc1;
        }

        public function getNewBitmapData(arg1:String):flash.display.BitmapData
        {
            var loc1:*=this.getNewSymbolState(arg1);
            if (loc1 == null) 
            {
                return null;
            }
            loc1.stop();
            var loc2:*=new flash.display.BitmapData(loc1.width, loc1.height, true, 0);
            loc2.draw(loc1);
            return loc2;
        }

        public function isSymbolStateAvailable(arg1:String):Boolean
        {
            var loc1:*=false;
            loc1 = !(this.stateClasses[arg1] == null);
            return loc1;
        }

        public function dispose():void
        {
            this.stateClasses = null;
            return;
        }

        public static const MAIN_STATIC:String="mainstatic";

        public static const MAIN_ANIM:String="mainanim";

        public static const LANDING_ANIM:String="landanim";

        public static const TRIGGER_ANIM:String="triggeranim";

        public static const SPECIAL:String="special";

        public static const FALLBACK:String="fallback";

        internal var stateClasses:Object;

        internal var _id:uint;
    }
}


//            class SymbolController
package mgs.aurora.slots.components.symbol 
{
    import __AS3__.vec.*;
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.games.common.components.generic.*;
    import mgs.aurora.games.logicBlocks.data.*;
    
    public class SymbolController extends Object implements mgs.aurora.games.common.components.generic.IDisposable, mgs.aurora.slots.components.symbol.ISymbolController
    {
        public function SymbolController(arg1:__AS3__.vec.Vector.<flash.geom.Point>, arg2:flash.display.DisplayObjectContainer, arg3:flash.display.DisplayObjectContainer)
        {
            super();
            this.positions = arg1;
            this.visArea = new Vector.<mgs.aurora.slots.components.symbol.SymbolState>(this.positions.length);
            this.setDisplayContainer(arg2);
            this.setHigherDisplayContainer(arg3);
            this._breakoutSymbols = new Vector.<mgs.aurora.slots.components.symbol.SymbolState>();
            return;
        }

        public function setDisplayContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this.container = arg1;
            return;
        }

        public function setHigherDisplayContainer(arg1:flash.display.DisplayObjectContainer):void
        {
            this._higherContainer = arg1;
            return;
        }

        public function setProvider(arg1:mgs.aurora.slots.components.symbol.ISymbolProvider):void
        {
            this.provider = arg1;
            return;
        }

        public function isSymbolStateAvailable(arg1:String, arg2:String):Boolean
        {
            if (this.provider == null) 
            {
                return false;
            }
            return this.provider.isSymbolStateAvailable(arg1, arg2);
        }

        public function placeVASymbols(arg1:__AS3__.vec.Vector.<String>):void
        {
            return;
        }

        public function placeVASymbolsFromUint(arg1:__AS3__.vec.Vector.<uint>):void
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                loc2 = this.provider.getSymbolState(arg1[loc1].toString(), mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
                this.removeSymbolAtPosn(loc1);
                if (loc2 == null) 
                {
                    this.visArea[loc1] = null;
                }
                else 
                {
                    loc2.name = this.getName(arg1[loc1].toString(), loc1.toString());
                    this.visArea[loc1] = loc2;
                    this.visArea[loc1].vaPosn = loc1;
                    this.visArea[loc1].x = this.positions[loc1].x;
                    this.visArea[loc1].y = this.positions[loc1].y;
                    if (this.visArea[loc1].totalFrames <= 2) 
                    {
                        this.visArea[loc1].stop();
                    }
                    this.container.addChild(this.visArea[loc1]);
                }
                ++loc1;
            }
            return;
        }

        public function setGameEventDispatcher(arg1:flash.events.EventDispatcher):void
        {
            this._gameEventDispatcher = arg1;
            return;
        }

        public function clearVASymbols():void
        {
            var loc1:*=0;
            while (loc1 < this.visArea.length) 
            {
                this.removeSymbolAtPosn(loc1);
                ++loc1;
            }
            return;
        }

        public function setSymbolAtPosn(arg1:uint, arg2:String, arg3:String):mgs.aurora.slots.components.symbol.SymbolState
        {
            var loc1:*=this.visArea[arg1];
            var loc2:*=this.provider.getSymbolState(arg2, arg3);
            if (!(loc1 == null) && loc1 == loc2) 
            {
                return loc1;
            }
            if (loc2 == null) 
            {
                loc2 = this.provider.getSymbolState(arg2, mgs.aurora.slots.components.symbol.Symbol.MAIN_STATIC);
            }
            if (loc1 != null) 
            {
                if (this.container != loc1.parent) 
                {
                    this.container.addChild(loc1);
                }
            }
            if (loc2 != null) 
            {
                loc2.name = this.getName(arg2, String(arg1));
                loc2.vaPosn = arg1;
                loc2.x = this.positions[arg1].x;
                loc2.y = this.positions[arg1].y;
                this.container.addChild(loc2);
                if (loc1 != null) 
                {
                    this.container.swapChildren(loc1, loc2);
                    this.container.removeChild(loc1);
                }
                this.visArea[arg1] = loc2;
                return loc2;
            }
            if (loc1 != null) 
            {
                this.container.removeChild(loc1);
            }
            this.visArea[arg1] = null;
            return null;
        }

        public function setSymbolStateAtPosn(arg1:uint, arg2:String):mgs.aurora.slots.components.symbol.SymbolState
        {
            var loc1:*=this.visArea[arg1];
            var loc2:*;
            var loc3:*;
            if ((loc3 = (loc2 = loc1.owner).getNewSymbolState(arg2)) == null) 
            {
                return null;
            }
            loc3.vaPosn = arg1;
            loc3.x = loc1.x;
            loc3.y = loc1.y;
            loc3.name = this.getName(loc1.id.toString(), arg1.toString());
            this.container.addChild(loc3);
            if (this.container != loc1.parent) 
            {
                this.container.addChild(loc1);
            }
            this.container.swapChildren(loc1, loc3);
            this.container.removeChild(loc1);
            this.visArea[arg1] = loc3;
            return loc3;
        }

        public function getSymbolStateAtPosn(arg1:uint):mgs.aurora.slots.components.symbol.SymbolState
        {
            var loc1:*=this.visArea[arg1];
            if (loc1 == null) 
            {
                return null;
            }
            return loc1;
        }

        public function flashSymbol(arg1:uint, arg2:uint):void
        {
            if (!(this.visArea == null) && !(this.visArea[arg1] == null)) 
            {
                this.visArea[arg1].visible = arg2 == mgs.aurora.slots.components.symbol.SymbolController.SHOW;
            }
            return;
        }

        public function getSymbolBitmapDataAtPosn(arg1:uint):flash.display.BitmapData
        {
            if (this.visArea[arg1] == null) 
            {
                return null;
            }
            return this.visArea[arg1].bitmapdata;
        }

        public function removeSymbolAtPosn(arg1:uint):void
        {
            var loc1:*=this.visArea[arg1];
            if (loc1 != null) 
            {
                loc1.visible = false;
                if (loc1.parent != null) 
                {
                    loc1.parent.removeChild(loc1);
                }
                this.visArea[arg1] = null;
            }
            return;
        }

        public function relayerSymbols(arg1:mgs.aurora.games.logicBlocks.data.SymbolsData):void
        {
            var loc3:*=false;
            var loc6:*=0;
            var loc7:*=null;
            var loc1:*=arg1.getPriorityLayerOrder();
            var loc2:*=arg1.getPriorityLayerSymbols();
            var loc4:*=0;
            var loc5:*=0;
            while (loc5 < loc1.length) 
            {
                loc3 = false;
                loc6 = 0;
                while (loc6 < loc2.length) 
                {
                    if ((loc7 = this.getSymbolStateAtPosn(loc1[loc5])) && loc7.owner.id == loc2[loc6].id && !(loc7.parent.name == "Breakout") && !loc3) 
                    {
                        loc3 = true;
                        this.container.swapChildren(loc7, this.container.getChildAt((this.container.numChildren - 1) - loc4));
                        ++loc4;
                    }
                    ++loc6;
                }
                ++loc5;
            }
            loc5 = (loc1.length - 1);
            while (loc5 >= 0) 
            {
                loc7 = this.getSymbolStateAtPosn(loc1[loc5]);
                loc6 = 0;
                while (loc6 < loc2.length) 
                {
                    if (loc7 && loc7.owner && loc7.owner.id == loc2[loc6].id) 
                    {
                        this._higherContainer.addChild(loc7);
                    }
                    ++loc6;
                }
                --loc5;
            }
            return;
        }

        public function clearHigherContainer():void
        {
            var loc2:*=null;
            var loc1:*=0;
            while (loc1 < this.visArea.length) 
            {
                loc2 = this.visArea[loc1];
                if (this._higherContainer && loc2 && loc2.parent && loc2.parent.name == this._higherContainer.name) 
                {
                    this._higherContainer.removeChild(loc2);
                    this.container.addChild(loc2);
                }
                ++loc1;
            }
            return;
        }

        internal function getName(arg1:String, arg2:String):String
        {
            return SYMBOL_NAME_PREFIX + arg1 + "_" + arg2;
        }

        public function dispose():void
        {
            this.positions = null;
            this.visArea = null;
            this.provider.dispose();
            this.provider = null;
            return;
        }

        public function get symbolProvider():mgs.aurora.slots.components.symbol.ISymbolProvider
        {
            return this.provider;
        }

        public static const HIDE:uint=0;

        public static const SHOW:uint=1;

        internal static const SYMBOL_NAME_PREFIX:String="symbol";

        internal var container:flash.display.DisplayObjectContainer;

        internal var _higherContainer:flash.display.DisplayObjectContainer;

        internal var provider:mgs.aurora.slots.components.symbol.ISymbolProvider;

        internal var visArea:__AS3__.vec.Vector.<mgs.aurora.slots.components.symbol.SymbolState>;

        internal var positions:__AS3__.vec.Vector.<flash.geom.Point>;

        internal var _gameEventDispatcher:flash.events.EventDispatcher;

        internal var _breakoutSymbols:__AS3__.vec.Vector.<mgs.aurora.slots.components.symbol.SymbolState>;
    }
}


//            class SymbolProvider
package mgs.aurora.slots.components.symbol 
{
    import flash.display.*;
    import flash.utils.*;
    import mgs.aurora.games.common.components.loader.*;
    
    public class SymbolProvider extends Object implements mgs.aurora.slots.components.symbol.ISymbolProvider
    {
        public function SymbolProvider()
        {
            super();
            this.symbolPool = new Object();
            return;
        }

        public function addSymbolState(arg1:String, arg2:String, arg3:String):void
        {
            if (this.symbolPool[arg1] == null) 
            {
                this.symbolPool[arg1] = new mgs.aurora.slots.components.symbol.Symbol(uint(arg1));
            }
            var loc1:*=flash.utils.getDefinitionByName(mgs.aurora.games.common.components.loader.TheMostIntelligentLoader.instance.getAsset(arg3).className) as Class;
            mgs.aurora.slots.components.symbol.Symbol(this.symbolPool[arg1]).addSymbolState(arg2, loc1);
            return;
        }

        public function isSymbolStateAvailable(arg1:String, arg2:String):Boolean
        {
            if (this.symbolPool[arg1] != null) 
            {
                return (this.symbolPool[arg1] as mgs.aurora.slots.components.symbol.Symbol).isSymbolStateAvailable(arg2);
            }
            return false;
        }

        public function getSymbol(arg1:String):mgs.aurora.slots.components.symbol.ISymbol
        {
            return this.symbolPool[arg1] as mgs.aurora.slots.components.symbol.ISymbol;
        }

        public function getSymbolState(arg1:String, arg2:String):mgs.aurora.slots.components.symbol.SymbolState
        {
            var loc1:*=mgs.aurora.slots.components.symbol.Symbol(this.symbolPool[arg1]);
            if (loc1 == null) 
            {
                return null;
            }
            return loc1.getNewSymbolState(arg2);
        }

        public function getSymbolBitmapData(arg1:String, arg2:String):flash.display.BitmapData
        {
            var loc1:*=this.symbolPool[arg1] as mgs.aurora.slots.components.symbol.Symbol;
            return loc1.getNewBitmapData(arg2);
        }

        public function clearSymbols():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this.symbolPool;
            for (loc1 in loc3) 
            {
                this.removeSymbol(loc1);
            }
            return;
        }

        public function removeSymbol(arg1:String):void
        {
            this.symbolPool[arg1] = null;
            delete this.symbolPool[arg1];
            return;
        }

        public function dispose():void
        {
            this.symbolPool = null;
            return;
        }

        internal var symbolPool:Object;
    }
}


//            class SymbolState
package mgs.aurora.slots.components.symbol 
{
    import flash.display.*;
    
    public class SymbolState extends flash.display.MovieClip
    {
        public function SymbolState()
        {
            super();
            this._stateID = null;
            this._id = 900000;
            return;
        }

        public function get stateID():String
        {
            return this._stateID;
        }

        public function set stateID(arg1:String):void
        {
            this._stateID = arg1;
            return;
        }

        public function get id():uint
        {
            return this._id;
        }

        public function set id(arg1:uint):void
        {
            this._id = arg1;
            return;
        }

        public function get vaPosn():uint
        {
            return this._vaPosn;
        }

        public function set vaPosn(arg1:uint):void
        {
            this._vaPosn = arg1;
            return;
        }

        public function get owner():mgs.aurora.slots.components.symbol.ISymbol
        {
            return this._owner;
        }

        public function set owner(arg1:mgs.aurora.slots.components.symbol.ISymbol):void
        {
            this._owner = arg1;
            return;
        }

        public function get bitmapdata():flash.display.BitmapData
        {
            var loc1:*=new flash.display.BitmapData(this.width, this.height, true, 0);
            loc1.draw(this);
            return loc1;
        }

        internal var _id:uint;

        internal var _stateID:String;

        internal var _vaPosn:uint;

        internal var _owner:mgs.aurora.slots.components.symbol.ISymbol;
    }
}


//          package triggercontroller
//            class Trigger
package mgs.aurora.slots.components.triggercontroller 
{
    public class Trigger extends Object
    {
        public function Trigger(arg1:Number, arg2:Number, arg3:Boolean, arg4:String, arg5:Number, arg6:Boolean=true, arg7:int=0, arg8:int=0, arg9:Boolean=false, arg10:int=-1)
        {
            super();
            this._maxAnticipateReel = arg10;
            this._spinStopOverride = arg9;
            this._featureTriggerID = arg8;
            this._minAnticipateReel = arg7;
            this._id = arg1;
            this._rank = arg2;
            this._adjacency = arg3;
            this._direction = arg4;
            this._minimum = arg5;
            this._anticipate = arg6;
            return;
        }

        public function get id():Number
        {
            return this._id;
        }

        public function get rank():Number
        {
            return this._rank;
        }

        public function get adjacency():Boolean
        {
            return this._adjacency;
        }

        public function get minimum():Number
        {
            return this._minimum;
        }

        public function get direction():String
        {
            return this._direction;
        }

        public function get anticipate():Boolean
        {
            return this._anticipate;
        }

        public function get minAnticipateReel():int
        {
            return this._minAnticipateReel;
        }

        public function get featureTriggerID():int
        {
            return this._featureTriggerID;
        }

        public function get spinStopOverride():Boolean
        {
            return this._spinStopOverride;
        }

        public function get maxAnticipateReel():int
        {
            return this._maxAnticipateReel;
        }

        
        {
            Left = "Left";
            Right = "Right";
            Any = "Any";
        }

        internal var _id:Number;

        internal var _rank:Number;

        internal var _adjacency:Boolean;

        internal var _minimum:Number;

        internal var _direction:String;

        internal var _anticipate:Boolean;

        internal var _minAnticipateReel:int;

        internal var _featureTriggerID:int;

        internal var _spinStopOverride:Boolean;

        internal var _maxAnticipateReel:int;

        public static var Left:String="Left";

        public static var Right:String="Right";

        public static var Any:String="Any";
    }
}


//  package org
//    package as3lib
//      package errors
//        class AbstractError
package org.as3lib.errors 
{
    public class AbstractError extends Error
    {
        public function AbstractError(arg1:String="", arg2:int=0)
        {
            super(arg1, arg2);
            return;
        }

        public static const METHOD_ERROR:String="ERROR: Failed to implement an abstract method.";

        public static const CONSTRUCTOR_ERROR:String="ERROR: An abstract class may not be instantiated.";
    }
}


//      package kitchensync
//        package action
//          package group
//            class AbstractActionGroup
package org.as3lib.kitchensync.action.group 
{
    import flash.errors.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.core.*;
    import org.as3lib.utils.*;
    
    public class AbstractActionGroup extends org.as3lib.kitchensync.action.AbstractAction implements org.as3lib.kitchensync.action.group.IActionGroup
    {
        public function AbstractActionGroup()
        {
            this._childActions = new Array();
            super();
            org.as3lib.utils.AbstractEnforcer.enforceConstructor(this, org.as3lib.kitchensync.action.group.AbstractActionGroup);
            return;
        }

        public function get resetChildrenAtStart():Boolean
        {
            return this._resetChildrenAtStart;
        }

        public function set resetChildrenAtStart(arg1:Boolean):void
        {
            this._resetChildrenAtStart = arg1;
            return;
        }

        public function get childActions():Array
        {
            return this._childActions;
        }

        public override function set duration(arg1:*):void
        {
            throw new Error("duration is ignored for IActionGroups");
        }

        public function get totalDuration():int
        {
            var loc2:*=null;
            var loc1:*=duration;
            var loc3:*=0;
            var loc4:*=this.childActions;
            for each (loc2 in loc4) 
            {
                loc1 = loc1 + (loc2.delay + loc2.duration);
            }
            return loc1;
        }

        public function addAction(arg1:org.as3lib.kitchensync.action.IAction, ... rest):void
        {
            if (arg1 != null) 
            {
                this._childActions.push(arg1);
            }
            var loc1:*=0;
            var loc2:*=rest;
            for each (arg1 in loc2) 
            {
                if (arg1 == null) 
                {
                    continue;
                }
                this._childActions.push(arg1);
            }
            return;
        }

        public function addActionAtIndex(arg1:org.as3lib.kitchensync.action.IAction, arg2:int=-1):void
        {
            if (arg2 < 0) 
            {
                this._childActions.push(arg1);
            }
            else 
            {
                this._childActions.splice(arg2, 0, arg1);
            }
            return;
        }

        public function removeAction(arg1:org.as3lib.kitchensync.action.IAction):org.as3lib.kitchensync.action.IAction
        {
            var loc1:*=this._childActions.indexOf(arg1);
            if (loc1 != -1) 
            {
                return this._childActions.splice(loc1, 1)[0];
            }
            throw new Error("Specified child action does not exist");
        }

        public function removeActionAtIndex(arg1:int):org.as3lib.kitchensync.action.IAction
        {
            if (arg1 < 0 || arg1 >= this._childActions.length) 
            {
                throw new RangeError("Specified index does not exist");
            }
            return this._childActions.splice(arg1, 1)[0];
        }

        public function getChildAtIndex(arg1:int):org.as3lib.kitchensync.action.IAction
        {
            if (arg1 < 0 || arg1 >= this._childActions.length) 
            {
                throw new RangeError("Specified index does not exist");
            }
            return org.as3lib.kitchensync.action.IAction(this._childActions[arg1]);
        }

        public function reverseChildOrder():void
        {
            if (isRunning) 
            {
                throw new flash.errors.IllegalOperationError("reverseChildOrder cannot be called while the group is running.");
            }
            this._childActions = this._childActions.reverse();
            return;
        }

        protected function onChildStart(arg1:org.as3lib.kitchensync.core.KitchenSyncEvent):void
        {
            dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.CHILD_ACTION_START, arg1.timestamp));
            return;
        }

        protected function onChildFinished(arg1:org.as3lib.kitchensync.core.KitchenSyncEvent):void
        {
            dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.CHILD_ACTION_COMPLETE, arg1.timestamp));
            return;
        }

        public override function start():org.as3lib.kitchensync.action.IAction
        {
            var loc1:*=null;
            if (this.resetChildrenAtStart && !_running && !_paused) 
            {
                var loc2:*=0;
                var loc3:*=this._childActions;
                for each (loc1 in loc3) 
                {
                    loc1.reset();
                }
            }
            return super.start();
        }

        public override function pause():void
        {
            var loc1:*=null;
            super.pause();
            var loc2:*=0;
            var loc3:*=this.childActions;
            for each (loc1 in loc3) 
            {
                loc1.pause();
            }
            return;
        }

        public override function unpause():void
        {
            var loc1:*=null;
            super.unpause();
            var loc2:*=0;
            var loc3:*=this.childActions;
            for each (loc1 in loc3) 
            {
                loc1.unpause();
            }
            return;
        }

        public override function stop():void
        {
            var loc1:*=null;
            super.stop();
            var loc2:*=0;
            var loc3:*=this.childActions;
            for each (loc1 in loc3) 
            {
                loc1.stop();
            }
            return;
        }

        public override function reset():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._childActions;
            for each (loc1 in loc3) 
            {
                loc1.reset();
            }
            super.reset();
            return;
        }

        public override function kill():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._childActions;
            for each (loc1 in loc3) 
            {
                loc1.kill();
            }
            this._childActions = [];
            super.kill();
            return;
        }

        public override function toString():String
        {
            return "ActionGroup [" + this._childActions.toString() + "]";
        }

        protected var _resetChildrenAtStart:Boolean=false;

        protected var _childActions:Array;
    }
}


//            class IActionGroup
package org.as3lib.kitchensync.action.group 
{
    import org.as3lib.kitchensync.action.*;
    
    public interface IActionGroup extends org.as3lib.kitchensync.action.IAction
    {
        function get childActions():Array;

        function get totalDuration():int;

        function addAction(arg1:org.as3lib.kitchensync.action.IAction, ... rest):void;

        function addActionAtIndex(arg1:org.as3lib.kitchensync.action.IAction, arg2:int=-1):void;

        function removeAction(arg1:org.as3lib.kitchensync.action.IAction):org.as3lib.kitchensync.action.IAction;

        function removeActionAtIndex(arg1:int):org.as3lib.kitchensync.action.IAction;

        function getChildAtIndex(arg1:int):org.as3lib.kitchensync.action.IAction;

        function reverseChildOrder():void;
    }
}


//            class KSLooper
package org.as3lib.kitchensync.action.group 
{
    import org.as3lib.kitchensync.action.*;
    
    public class KSLooper extends org.as3lib.kitchensync.action.group.KSSequenceGroup
    {
        public function KSLooper(arg1:org.as3lib.kitchensync.action.IAction, arg2:int, arg3:Boolean=true)
        {
            super();
            resetChildrenAtStart = true;
            arg2 = Math.max(arg2, 1);
            var loc1:*=0;
            while (loc1 < arg2) 
            {
                if (arg3) 
                {
                    addAction(arg1);
                }
                else 
                {
                    addAction(arg1.clone());
                }
                ++loc1;
            }
            return;
        }

        public function get currentLoop():int
        {
            return currentActionIndex + 1;
        }
    }
}


//            class KSParallelGroup
package org.as3lib.kitchensync.action.group 
{
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.core.*;
    
    public class KSParallelGroup extends org.as3lib.kitchensync.action.group.AbstractActionGroup
    {
        public function KSParallelGroup(... rest)
        {
            super();
            var loc1:*=rest.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                this.addActionOrSequence(rest[loc2]);
                ++loc2;
            }
            return;
        }

        public function get childrenAreRunning():Boolean
        {
            return this._runningChildren > 0;
        }

        public override function get totalDuration():int
        {
            var loc2:*=null;
            var loc3:*=0;
            var loc1:*=0;
            var loc4:*=0;
            var loc5:*=childActions;
            for each (loc2 in loc5) 
            {
                loc3 = loc2.delay + loc2.duration;
                if (!(loc3 > loc1)) 
                {
                    continue;
                }
                loc1 = loc3;
            }
            return loc1;
        }

        function addActionOrSequence(arg1:Object):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg1 is org.as3lib.kitchensync.action.IAction) 
            {
                addAction(org.as3lib.kitchensync.action.IAction(arg1));
                return;
            }
            if (arg1 is Array) 
            {
                loc1 = new org.as3lib.kitchensync.action.group.KSSequenceGroup();
                var loc3:*=0;
                var loc4:*=arg1 as Array;
                for each (loc2 in loc4) 
                {
                    loc1.addActionOrParallel(loc2);
                }
                addAction(loc1);
                return;
            }
            return;
        }

        public override function update(arg1:int):void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (startTimeHasElapsed(arg1) && !this.childrenAreRunning) 
            {
                this._runningChildren = 0;
                loc1 = 0;
                while (loc1 < _childActions.length) 
                {
                    var loc3:*;
                    var loc4:*=((loc3 = this)._runningChildren + 1);
                    loc3._runningChildren = loc4;
                    loc2 = org.as3lib.kitchensync.action.IAction(_childActions[loc1]);
                    loc2.addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_START, onChildStart);
                    loc2.addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, this.onChildFinished);
                    loc2.start();
                    ++loc1;
                }
                unregister();
            }
            return;
        }

        protected override function onChildFinished(arg1:org.as3lib.kitchensync.core.KitchenSyncEvent):void
        {
            super.onChildFinished(arg1);
            var loc1:*=org.as3lib.kitchensync.action.IAction(arg1.target);
            loc1.removeEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, this.onChildFinished);
            loc1.removeEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_START, onChildStart);
            var loc2:*;
            var loc3:*=((loc2 = this)._runningChildren - 1);
            loc2._runningChildren = loc3;
            if (this._runningChildren <= 0) 
            {
                complete();
            }
            return;
        }

        public override function stop():void
        {
            super.stop();
            this._runningChildren = 0;
            return;
        }

        public override function clone():org.as3lib.kitchensync.action.IAction
        {
            var loc3:*=null;
            var loc1:*=new org.as3lib.kitchensync.action.group.KSParallelGroup();
            var loc2:*=0;
            while (loc2 < _childActions.length) 
            {
                loc3 = getChildAtIndex(loc2).clone();
                loc1.addActionAtIndex(loc3, loc2);
                ++loc2;
            }
            loc1.delay = _delay;
            loc1.autoDelete = _autoDelete;
            return loc1;
        }

        public override function toString():String
        {
            return "KSParallelGroup [" + _childActions + "]";
        }

        protected var _runningChildren:int=0;
    }
}


//            class KSSequenceGroup
package org.as3lib.kitchensync.action.group 
{
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.core.*;
    
    public class KSSequenceGroup extends org.as3lib.kitchensync.action.group.AbstractActionGroup
    {
        public function KSSequenceGroup(... rest)
        {
            super();
            var loc1:*=rest.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                this.addActionOrParallel(rest[loc2] as Object);
                ++loc2;
            }
            return;
        }

        public function get currentActionIndex():int
        {
            return this._currentActionIndex;
        }

        public function get currentAction():org.as3lib.kitchensync.action.IAction
        {
            return this._currentAction;
        }

        function addActionOrParallel(arg1:Object):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (arg1 is org.as3lib.kitchensync.action.IAction) 
            {
                addAction(org.as3lib.kitchensync.action.IAction(arg1));
                return;
            }
            if (arg1 is Array) 
            {
                loc1 = new org.as3lib.kitchensync.action.group.KSParallelGroup();
                var loc3:*=0;
                var loc4:*=arg1 as Array;
                for each (loc2 in loc4) 
                {
                    loc1.addActionOrSequence(loc2);
                }
                addAction(loc1);
                return;
            }
            throw new TypeError("The action added must be either an action or an array.");
        }

        public override function update(arg1:int):void
        {
            if (startTimeHasElapsed(arg1)) 
            {
                this.startNextAction();
                unregister();
            }
            return;
        }

        protected function startNextAction():org.as3lib.kitchensync.action.IAction
        {
            var loc1:*;
            var loc2:*=((loc1 = this)._currentActionIndex + 1);
            loc1._currentActionIndex = loc2;
            this._currentAction = getChildAtIndex(this._currentActionIndex);
            this._currentAction.addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, this.onChildFinished);
            this._currentAction.addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_START, onChildStart);
            this._currentAction.start();
            return this._currentAction;
        }

        protected override function onChildFinished(arg1:org.as3lib.kitchensync.core.KitchenSyncEvent):void
        {
            super.onChildFinished(arg1);
            this._currentAction.removeEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, this.onChildFinished);
            this._currentAction.removeEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_START, onChildStart);
            if (this.checkForComplete()) 
            {
                this.complete();
            }
            else 
            {
                this.startNextAction();
            }
            return;
        }

        protected function checkForComplete():Boolean
        {
            if (_childActions && _childActions.length > 0 && this._currentActionIndex >= (_childActions.length - 1)) 
            {
                return true;
            }
            return false;
        }

        protected override function complete():void
        {
            this._currentActionIndex = this.NO_CURRENT_ACTION_INDEX;
            this._currentAction = null;
            super.complete();
            return;
        }

        public override function start():org.as3lib.kitchensync.action.IAction
        {
            super.start();
            if (childActions && childActions.length < 1) 
            {
                this.complete();
            }
            return this;
        }

        public override function clone():org.as3lib.kitchensync.action.IAction
        {
            var loc3:*=null;
            var loc1:*=new org.as3lib.kitchensync.action.group.KSSequenceGroup();
            var loc2:*=0;
            while (loc2 < _childActions.length) 
            {
                loc3 = getChildAtIndex(loc2).clone();
                loc1.addActionAtIndex(loc3, loc2);
                ++loc2;
            }
            loc1.delay = _delay;
            loc1.autoDelete = _autoDelete;
            return loc1;
        }

        public override function toString():String
        {
            var loc2:*=null;
            var loc1:*="KSSequenceGroup[";
            var loc3:*=0;
            var loc4:*=_childActions;
            for each (loc2 in loc4) 
            {
                loc1 = loc1 + (Object(loc2).toString() + ", ");
            }
            loc1 = loc1 + "]";
            return loc1;
        }

        protected const NO_CURRENT_ACTION_INDEX:int=-1;

        protected var _currentAction:org.as3lib.kitchensync.action.IAction=null;

        protected var _currentActionIndex:int=-1;
    }
}


//            class KSStaggeredGroup
package org.as3lib.kitchensync.action.group 
{
    import org.as3lib.kitchensync.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.core.*;
    import org.as3lib.kitchensync.utils.*;
    
    public class KSStaggeredGroup extends org.as3lib.kitchensync.action.group.KSParallelGroup
    {
        public function KSStaggeredGroup(arg1:*, ... rest)
        {
            super();
            resetChildrenAtStart = true;
            var loc1:*=rest.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                addAction(org.as3lib.kitchensync.action.IAction(rest[loc2]));
                ++loc2;
            }
            this.stagger = arg1;
            return;
        }

        public function get stagger():int
        {
            return this._stagger;
        }

        public function set stagger(arg1:*):void
        {
            var loc1:*=null;
            if (isNaN(Number(arg1))) 
            {
                loc1 = arg1.toString();
                this._stagger = org.as3lib.kitchensync.KitchenSync.timeStringParser.parseTimeString(loc1);
            }
            else 
            {
                this._stagger = arg1;
            }
            if (this._stagger <= 0) 
            {
                throw new RangeError("Stagger amount must be an integer greater than 0.");
            }
            return;
        }

        public override function get totalDuration():int
        {
            return super.totalDuration + this._stagger * (childActions.length - 1);
        }

        public override function start():org.as3lib.kitchensync.action.IAction
        {
            this._previousChildStartTime = -1;
            this._previousChildIndex = -1;
            var loc1:*=super.start();
            return loc1;
        }

        public override function update(arg1:int):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=null;
            if (startTimeHasElapsed(arg1)) 
            {
                if (this._previousChildStartTime < 0) 
                {
                    _runningChildren = _childActions.length;
                }
                if (this._previousChildStartTime < 0 || arg1 - this._previousChildStartTime > this._stagger) 
                {
                    this._previousChildStartTime = arg1;
                    loc1 = arg1 - delay - _startTime;
                    loc2 = Math.floor(loc1 / this._stagger);
                    loc3 = this._previousChildIndex + 1;
                    while (loc3 <= loc2) 
                    {
                        if (loc3 < childActions.length) 
                        {
                            (loc4 = org.as3lib.kitchensync.action.IAction(_childActions[loc3])).addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, onChildFinished);
                            loc4.addEventListener(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_START, onChildStart);
                            if (loc4 is org.as3lib.kitchensync.action.IPrecisionAction) 
                            {
                                org.as3lib.kitchensync.action.IPrecisionAction(loc4).startAtTime(_startTime + delay + loc3 * this._stagger);
                            }
                            else 
                            {
                                loc4.start();
                            }
                        }
                        ++loc3;
                    }
                    this._previousChildIndex = loc2;
                    if (loc2 == (_childActions.length - 1)) 
                    {
                        unregister();
                    }
                }
            }
            return;
        }

        public override function clone():org.as3lib.kitchensync.action.IAction
        {
            var loc3:*=null;
            var loc1:*=new org.as3lib.kitchensync.action.group.KSStaggeredGroup(this._stagger);
            var loc2:*=0;
            while (loc2 < _childActions.length) 
            {
                loc3 = getChildAtIndex(loc2).clone();
                loc1.addActionAtIndex(loc3, loc2);
                ++loc2;
            }
            loc1.delay = _delay;
            loc1.autoDelete = _autoDelete;
            return loc1;
        }

        public override function toString():String
        {
            return "KSStaggeredGroup [" + _childActions.toString() + "]";
        }

        protected var _stagger:int;

        protected var _previousChildStartTime:int;

        protected var _previousChildIndex:int;
    }
}


//          package tween
//            const AUTO_TWEEN_VALUE
package org.as3lib.kitchensync.action.tween 
{
    public const AUTO_TWEEN_VALUE:Number=NaN;
}


//            class FilterTargetProperty
package org.as3lib.kitchensync.action.tween 
{
    import flash.display.*;
    import flash.filters.*;
    
    public class FilterTargetProperty extends Object implements org.as3lib.kitchensync.action.tween.IFilterTweenTarget
    {
        public function FilterTargetProperty(arg1:flash.display.DisplayObject, arg2:Class, arg3:String, arg4:Number=NaN, arg5:Number=NaN)
        {
            super();
            this._target = arg1;
            this._filterType = arg2;
            this._property = arg3;
            this._startValue = isNaN(arg4) ? this.currentValue : arg4;
            this._endValue = isNaN(arg5) ? this.currentValue : arg5;
            return;
        }

        public function get target():flash.display.DisplayObject
        {
            return this._target;
        }

        public function get filterType():Class
        {
            return this._filterType;
        }

        public function get property():String
        {
            return this._property;
        }

        public function get startValue():Number
        {
            return this._startValue;
        }

        public function set startValue(arg1:Number):void
        {
            this._startValue = arg1;
            return;
        }

        public function get endValue():Number
        {
            return this._endValue;
        }

        public function set endValue(arg1:Number):void
        {
            this._endValue = arg1;
            return;
        }

        public function get differenceInValues():Number
        {
            return this._endValue - this._startValue;
        }

        public function updateTween(arg1:Number):Number
        {
            var loc1:*;
            this.currentValue = loc1 = arg1 * this.differenceInValues + this.startValue;
            return loc1;
        }

        public function get currentValue():Number
        {
            return Number(this._previousFilter[this.property]);
        }

        public function set currentValue(arg1:Number):void
        {
            var loc3:*=null;
            var loc1:*=[];
            if (this.filters && this.filters.length > 0) 
            {
                var loc4:*=0;
                var loc5:*=this.filters;
                for each (loc3 in loc5) 
                {
                    if (loc3 is this._filterType) 
                    {
                        this._previousFilter = loc3;
                        continue;
                    }
                    loc1.push(loc3);
                }
            }
            var loc2:*=this._previousFilter != null ? this._previousFilter : this.getDefaultFilter(this._filterType);
            loc2[this._property] = arg1;
            loc1.push(loc2);
            this.filters = loc1;
            this._previousFilter = loc2;
            return;
        }

        protected function get filters():Array
        {
            if (this._target != null) 
            {
                return this._target.filters;
            }
            return null;
        }

        protected function set filters(arg1:Array):void
        {
            if (this._target == null) 
            {
                throw new Error("The target must be defined before setting filters");
            }
            else 
            {
                this._target.filters = arg1;
            }
            return;
        }

        protected function getDefaultFilter(arg1:Class):flash.filters.BitmapFilter
        {
            var loc1:*=flash.filters.BitmapFilter(new arg1());
            return loc1;
        }

        public function reset():void
        {
            this.currentValue = this.startValue;
            return;
        }

        public function clone():org.as3lib.kitchensync.action.tween.ITweenTarget
        {
            return new org.as3lib.kitchensync.action.tween.FilterTargetProperty(this._target, this._filterType, this._property, this._startValue, this._endValue);
        }

        protected var _target:flash.display.DisplayObject;

        protected var _filterType:Class;

        protected var _property:String;

        protected var _startValue:Number;

        protected var _endValue:Number;

        protected var _previousFilter:flash.filters.BitmapFilter=null;
    }
}


//            class IFilterTweenTarget
package org.as3lib.kitchensync.action.tween 
{
    public interface IFilterTweenTarget extends org.as3lib.kitchensync.action.tween.ITweenTarget
    {
        function get filterType():Class;
    }
}


//            class ITween
package org.as3lib.kitchensync.action.tween 
{
    import org.as3lib.kitchensync.action.*;
    
    public interface ITween extends org.as3lib.kitchensync.action.IPrecisionAction
    {
        function get easingFunction():Function;

        function set easingFunction(arg1:Function):void;

        function get easingMod1():Number;

        function set easingMod1(arg1:Number):void;

        function get easingMod2():Number;

        function set easingMod2(arg1:Number):void;
    }
}


//            class ITweenObjectParser
package org.as3lib.kitchensync.action.tween 
{
    public interface ITweenObjectParser
    {
        function parseObject(arg1:Object):org.as3lib.kitchensync.action.tween.ITween;
    }
}


//            class ITweenTarget
package org.as3lib.kitchensync.action.tween 
{
    import org.as3lib.math.*;
    
    public interface ITweenTarget extends org.as3lib.math.INumericController
    {
        function updateTween(arg1:Number):Number;

        function get startValue():Number;

        function set startValue(arg1:Number):void;

        function get endValue():Number;

        function set endValue(arg1:Number):void;

        function reset():void;

        function clone():org.as3lib.kitchensync.action.tween.ITweenTarget;
    }
}


//            class ITweenTargetCollection
package org.as3lib.kitchensync.action.tween 
{
    public interface ITweenTargetCollection
    {
        function get tweenTargets():Array;

        function addTweenTarget(arg1:org.as3lib.kitchensync.action.tween.ITweenTarget):void;

        function removeTweenTarget(arg1:org.as3lib.kitchensync.action.tween.ITweenTarget):void;
    }
}


//            class KSTween
package org.as3lib.kitchensync.action.tween 
{
    import org.as3lib.kitchensync.*;
    import org.as3lib.kitchensync.action.*;
    import org.as3lib.kitchensync.core.*;
    import org.as3lib.kitchensync.easing.*;
    import org.as3lib.kitchensync.utils.*;
    
    public class KSTween extends org.as3lib.kitchensync.action.AbstractAction implements org.as3lib.kitchensync.action.tween.ITween, org.as3lib.kitchensync.action.IPrecisionAction, org.as3lib.kitchensync.action.tween.ITweenTargetCollection
    {
        public function KSTween(arg1:*, arg2:*=0, arg3:*=0, arg4:Function=null, arg5:Number=NaN, arg6:Number=NaN)
        {
            var loc1:*=null;
            var loc2:*=null;
            super();
            this._tweenTargets = new Array();
            if (arg1 is org.as3lib.kitchensync.action.tween.ITweenTarget) 
            {
                this.addTweenTarget(org.as3lib.kitchensync.action.tween.ITweenTarget(arg1));
            }
            else if (arg1 is Array && !(arg1 == null)) 
            {
                loc1 = arg1 as Array;
                var loc3:*=0;
                var loc4:*=loc1;
                for each (loc2 in loc4) 
                {
                    this.addTweenTarget(loc2);
                }
            }
            else 
            {
                throw new TypeError("\'tweenTargets\' parameter must be of type ITweenTarget or of type Array (containting ITweenTarget).");
            }
            this.snapToValueOnComplete = org.as3lib.kitchensync.KitchenSyncDefaults.snapToValueOnComplete;
            this.duration = arg2;
            this.delay = arg3;
            if (arg4 == null) 
            {
                arg4 = org.as3lib.kitchensync.KitchenSyncDefaults.easingFunction;
            }
            this._easingFunction = arg4;
            this._easingMod1 = arg5;
            this._easingMod2 = arg6;
            return;
        }

        public function get easingFunction():Function
        {
            return this._easingFunction;
        }

        public function set easingFunction(arg1:Function):void
        {
            if (arg1 == null) 
            {
                arg1 = org.as3lib.kitchensync.KitchenSyncDefaults.easingFunction;
            }
            this._easingFunction = arg1;
            return;
        }

        public function get tweenTargets():Array
        {
            return this._tweenTargets;
        }

        public function addTweenTarget(arg1:org.as3lib.kitchensync.action.tween.ITweenTarget):void
        {
            if (arg1 == null) 
            {
                throw new ArgumentError("tweenTarget cannot be null");
            }
            else 
            {
                this._tweenTargets.push(arg1);
            }
            return;
        }

        public function removeTweenTarget(arg1:org.as3lib.kitchensync.action.tween.ITweenTarget):void
        {
            var loc1:*=this._tweenTargets.indexOf(arg1);
            if (loc1 >= 0) 
            {
                this._tweenTargets.splice(loc1, 1);
            }
            return;
        }

        public function removeAllTweenTargets():void
        {
            this._tweenTargets = new Array();
            return;
        }

        public function get easingMod1():Number
        {
            return this._easingMod1;
        }

        public function set easingMod1(arg1:Number):void
        {
            this._easingMod1 = arg1;
            return;
        }

        public function get easingMod2():Number
        {
            return this._easingMod2;
        }

        public function set easingMod2(arg1:Number):void
        {
            this._easingMod2 = arg1;
            return;
        }

        public function get snapToValueOnComplete():Boolean
        {
            return this._snapToValueOnComplete;
        }

        public function set snapToValueOnComplete(arg1:Boolean):void
        {
            this._snapToValueOnComplete = arg1;
            return;
        }

        public override function start():org.as3lib.kitchensync.action.IAction
        {
            return this.startAtTime(-1);
        }

        public function startAtTime(arg1:int):org.as3lib.kitchensync.action.IPrecisionAction
        {
            if (this._tweenTargets && this._tweenTargets.length >= 0) 
            {
                super.start();
                if (arg1 > 0) 
                {
                    _startTime = arg1;
                }
                return this;
            }
            throw new Error("Tween must have at least one tween target. use addTweenTarget().");
        }

        public override function reset():void
        {
            var loc1:*=null;
            stop();
            this._firstUpdate = true;
            var loc2:*=0;
            var loc3:*=this._tweenTargets;
            for each (loc1 in loc3) 
            {
                loc1.reset();
            }
            return;
        }

        public override function update(arg1:int):void
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=NaN;
            if (startTimeHasElapsed(arg1)) 
            {
                loc1 = arg1 - _startTime - _delay;
                if (this._firstUpdate) 
                {
                    this._firstUpdate = false;
                    var loc4:*=0;
                    var loc5:*=this._tweenTargets;
                    for each (loc2 in loc5) 
                    {
                        if (isNaN(loc2.startValue)) 
                        {
                            loc2.startValue = loc2.currentValue;
                        }
                        if (!isNaN(loc2.endValue)) 
                        {
                            continue;
                        }
                        loc2.endValue = loc2.currentValue;
                    }
                }
                loc3 = org.as3lib.kitchensync.easing.EasingUtil.call(this._easingFunction, loc1, duration, this._easingMod1, this._easingMod2);
                loc4 = 0;
                loc5 = this._tweenTargets;
                for each (loc2 in loc5) 
                {
                    loc2.updateTween(loc3);
                }
                if (durationHasElapsed(arg1)) 
                {
                    if (this._snapToValueOnComplete) 
                    {
                        loc4 = 0;
                        loc5 = this._tweenTargets;
                        for each (loc2 in loc5) 
                        {
                            loc2.updateTween(1);
                        }
                    }
                    this.complete();
                }
            }
            return;
        }

        public function reverse():void
        {
            var loc1:*=null;
            var loc2:*=NaN;
            var loc3:*=0;
            var loc4:*=this._tweenTargets;
            for each (loc1 in loc4) 
            {
                loc2 = loc1.startValue;
                loc1.startValue = loc1.endValue;
                loc1.endValue = loc2;
            }
            return;
        }

        public override function clone():org.as3lib.kitchensync.action.IAction
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=[];
            var loc4:*=0;
            var loc5:*=this.tweenTargets;
            for each (loc2 in loc5) 
            {
                loc1.push(loc2.clone());
            }
            loc3 = new org.as3lib.kitchensync.action.tween.KSTween(loc1, this.duration, this.delay, this.easingFunction);
            loc3._easingMod1 = this._easingMod1;
            loc3._easingMod2 = this._easingMod2;
            loc3.autoDelete = _autoDelete;
            loc3.snapToValueOnComplete = this._snapToValueOnComplete;
            return loc3;
        }

        public function cloneWithTargetProperty(arg1:*, arg2:String=""):org.as3lib.kitchensync.action.tween.KSTween
        {
            var loc1:*=this.tweenTargets[0] as org.as3lib.kitchensync.action.tween.TargetProperty;
            if (!loc1) 
            {
                throw new Error("You can\'t use this method unless the first tweenTarget is a TargetProperty");
            }
            var loc2:*=loc1.clone() as org.as3lib.kitchensync.action.tween.TargetProperty;
            if (arg2 == "") 
            {
                arg2 = loc1.property;
            }
            loc2.setTargetPropterty(arg1, arg2);
            var loc3:*;
            (loc3 = this.clone() as org.as3lib.kitchensync.action.tween.KSTween).removeAllTweenTargets();
            loc3.addTweenTarget(loc2);
            return loc3;
        }

        public function cloneWithTweenTarget(arg1:org.as3lib.kitchensync.action.tween.ITweenTarget):org.as3lib.kitchensync.action.tween.KSTween
        {
            var loc1:*=this.clone() as org.as3lib.kitchensync.action.tween.KSTween;
            loc1.removeAllTweenTargets();
            loc1.addTweenTarget(arg1);
            return loc1;
        }

        public function cloneReversed():org.as3lib.kitchensync.action.tween.KSTween
        {
            var loc1:*=null;
            loc1 = org.as3lib.kitchensync.action.tween.KSTween(this.clone());
            loc1.reverse();
            return loc1;
        }

        protected override function complete():void
        {
            this._firstUpdate = true;
            super.complete();
            return;
        }

        public override function kill():void
        {
            super.kill();
            this.removeAllTweenTargets();
            return;
        }

        public override function toString():String
        {
            var loc2:*=null;
            var loc1:*="KSTween ";
            loc1 = loc1 + "[";
            var loc3:*=0;
            var loc4:*=this._tweenTargets;
            for each (loc2 in loc4) 
            {
                loc1 = loc1 + (Object(loc2).toString() + ", ");
            }
            loc1 = loc1 + "]";
            if (description != "") 
            {
                loc1 = loc1 + (" - " + description);
            }
            return loc1;
        }

        protected var _easingFunction:Function;

        protected var _tweenTargets:Array;

        protected var _firstUpdate:Boolean=true;

        protected var _easingMod1:Number;

        protected var _easingMod2:Number;

        protected var _snapToValueOnComplete:Boolean;
    }
}


//            class KitchenSyncObjectParser
package org.as3lib.kitchensync.action.tween 
{
    import flash.utils.*;
    
    public final class KitchenSyncObjectParser extends Object implements org.as3lib.kitchensync.action.tween.ITweenObjectParser
    {
        public function KitchenSyncObjectParser()
        {
            this._keywords = [];
            this._allKeywords = [];
            super();
            this.addKeyword(new Keyword("duration", Object, true, "An integer or a parsable time string for the duration of the tween.", 1000, "time", "dur", "d"));
            this.addKeyword(new Keyword("delay", Object, true, "An integer or a parsable time string for the delay of the tween.", 0, "offset", "del"));
            this.addKeyword(new Keyword("easingFunction", Function, true, "The easing function for this tween.", null, "easing", "ease", "e"));
            this.addKeyword(new Keyword("easingMod1", Number, true, "An optional modifier for the easing function.", NaN, "mod1", "mod"));
            this.addKeyword(new Keyword("easingMod2", Number, true, "An optional modifier for the easing function.", NaN, "mod2"));
            this.addKeyword(new Keyword("autoDelete", Boolean, true, "When true, the tween will attempt to delete itself upon completion.", false));
            this.addKeyword(new Keyword("snapToValueOnComplete", Boolean, true, "A boolean for whether to snap to the endValue on the completion of the tween (regardless of the easingFunciton results).", true));
            this.addKeyword(new Keyword("description", String, true, "A description of the tween.", "Tween generated by KitchenSyncObjectParser"));
            TARGET_KEYWORD = new Keyword("target", Object, false, "A single target or an array of targets of the tween.", null, "targets", "t");
            SCALE_KEYWORD = new Keyword("scale", Number, false, "A shortcut property for scaling x and y at once.");
            FILTER_KEYWORD = new Keyword("filterType", Class, false, "A reference to the filter type whose properties you want to control with this tween. NOTE: If this is defined, all the properties will affect the filter, not the target.", null, "filter");
            this.addKeyword(TARGET_KEYWORD);
            this.addKeyword(SCALE_KEYWORD);
            this.addKeyword(FILTER_KEYWORD);
            return;
        }

        internal function addKeyword(arg1:Keyword):void
        {
            this._keywords.push(arg1);
            this._allKeywords.concat(arg1.allKeywords);
            return;
        }

        public function describeKeywords():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._keywords;
            for each (loc1 in loc3) 
            {
                trace(loc1.toString());
            }
            return;
        }

        internal function isPropertyAKeyword(arg1:String):Boolean
        {
            if (this._allKeywords.indexOf(arg1) >= 0) 
            {
                return true;
            }
            return false;
        }

        internal function parseKeyword(arg1:Object, arg2:Keyword):*
        {
            var loc1:*=null;
            var loc2:*=undefined;
            var loc3:*=0;
            var loc4:*=arg2.allKeywords;
            for each (loc1 in loc4) 
            {
                if ((loc2 = arg1[loc1] as arg2.type) == undefined) 
                {
                    continue;
                }
                if (loc2 == null) 
                {
                    throw new TypeError("The value provided for " + loc1 + " must be of type " + arg2.type);
                }
                arg1[loc1] = null;
                delete arg1[loc1];
                return loc2;
            }
            return arg2.defaultValue;
        }

        internal function parseAllKeywords(arg1:Object, arg2:org.as3lib.kitchensync.action.tween.KSTween):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._keywords;
            for each (loc1 in loc3) 
            {
                if (!loc1.includeInParsing) 
                {
                    continue;
                }
                arg2[loc1.term] = this.parseKeyword(arg1, loc1);
            }
            return;
        }

        internal function getFirstDefinedValue(arg1:Object, ... rest):*
        {
            var loc1:*=null;
            var loc2:*=undefined;
            var loc3:*=0;
            loc3 = 0;
            while (loc3 < rest.length) 
            {
                loc1 = rest[loc3];
                if (!((loc2 = arg1[loc1] as Object) == null) && !(loc2 == undefined)) 
                {
                    return loc2;
                }
                ++loc3;
            }
            return null;
        }

        public function parseObject(arg1:Object):org.as3lib.kitchensync.action.tween.ITween
        {
            var parameters:Object;
            var tween:org.as3lib.kitchensync.action.tween.KSTween;
            var targets:Array;
            var filterType:Class;
            var properties:Array;
            var i:int;
            var j:int;
            var tl:int;
            var pl:int;
            var target:Object;
            var propertyData:PropertyData;
            var tweenTarget:org.as3lib.kitchensync.action.tween.ITweenTarget;
            var createTargetProperty:Function;
            var createFilterTargetProperty:Function;

            var loc1:*;
            target = null;
            propertyData = null;
            tweenTarget = null;
            parameters = arg1;
            createTargetProperty = function (arg1:*, arg2:PropertyData):org.as3lib.kitchensync.action.tween.ITweenTarget
            {
                return new org.as3lib.kitchensync.action.tween.TargetProperty(arg1, arg2.propertyName, arg2.startValue, arg2.endValue);
            }
            createFilterTargetProperty = function (arg1:*, arg2:Class, arg3:PropertyData):org.as3lib.kitchensync.action.tween.ITweenTarget
            {
                return new org.as3lib.kitchensync.action.tween.FilterTargetProperty(arg1, arg2, arg3.propertyName, arg3.startValue, arg3.endValue);
            }
            tween = new org.as3lib.kitchensync.action.tween.KSTween([]);
            targets = this.parseTargets(parameters);
            this.parseAllKeywords(parameters, tween);
            filterType = this.parseKeyword(parameters, FILTER_KEYWORD);
            properties = this.parseProperties(parameters);
            i = 0;
            j = 0;
            tl = targets.length;
            pl = properties.length;
            while (i < tl) 
            {
                target = targets[i] as Object;
                while (j < pl) 
                {
                    propertyData = properties[j] as PropertyData;
                    if (filterType == FILTER_KEYWORD.defaultValue) 
                    {
                        tweenTarget = createTargetProperty(target, propertyData);
                    }
                    else 
                    {
                        tweenTarget = createFilterTargetProperty(target, filterType, propertyData);
                    }
                    tween.addTweenTarget(tweenTarget);
                    j = j + 1;
                }
                i = i + 1;
            }
            return tween;
        }

        internal function parseTargets(arg1:Object):Array
        {
            var loc1:*=this.parseKeyword(arg1, TARGET_KEYWORD);
            if (loc1 is Array) 
            {
                return loc1;
            }
            if (loc1 == null) 
            {
                throw new SyntaxError("At least one target must be defined.");
            }
            return [loc1];
        }

        internal function parseProperties(arg1:Object):Array
        {
            var loc2:*=null;
            var loc3:*=NaN;
            var loc4:*=NaN;
            var loc5:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=0;
            var loc11:*=0;
            var loc12:*=undefined;
            var loc13:*=undefined;
            var loc1:*=new Array();
            var loc6:*=new flash.utils.Dictionary();
            var loc14:*=0;
            var loc15:*=arg1;
            for (loc5 in loc15) 
            {
                loc7 = new PropertyData();
                if ((loc8 = arg1[loc5].toString()).search("~") >= 0) 
                {
                    loc9 = loc8.split("~");
                    loc7.propertyName = loc5;
                    loc7.startValue = loc9[0];
                    loc7.endValue = loc9[1];
                }
                else 
                {
                    loc10 = loc5.search(START_VALUE_MARKER);
                    loc11 = loc5.search(END_VALUE_MARKER);
                    if (loc10 >= 0) 
                    {
                        loc7.propertyName = loc5.slice(0, loc10);
                        if (loc6[loc7.propertyName] != true) 
                        {
                            loc7.startValue = arg1[loc5] as Number;
                            loc12 = this.getFirstDefinedValue(arg1, loc7.propertyName + "_end", loc7.propertyName + "End", loc7.propertyName + "_to", loc7.propertyName + "To");
                            loc7.endValue = loc12 != null ? loc12 as Number : org.as3lib.kitchensync.action.tween.AUTO_TWEEN_VALUE;
                            loc1.push(loc7);
                            loc6[loc7.propertyName] = true;
                        }
                        continue;
                    }
                    else if (loc11 >= 0) 
                    {
                        loc7.propertyName = loc5.slice(0, loc11);
                        if (loc6[loc7.propertyName] != true) 
                        {
                            loc7.endValue = arg1[loc5] as Number;
                            loc13 = this.getFirstDefinedValue(arg1, loc7.propertyName + "_start", loc7.propertyName + "Start", loc7.propertyName + "_from", loc7.propertyName + "From") as Number;
                            loc7.startValue = loc13 != null ? loc13 as Number : org.as3lib.kitchensync.action.tween.AUTO_TWEEN_VALUE;
                            loc1.push(loc7);
                            loc6[loc7.propertyName] = true;
                        }
                        continue;
                    }
                }
                var loc16:*=loc7.propertyName;
                switch (loc16) 
                {
                    case "scale":
                    {
                        loc1.push(new PropertyData("scaleX", loc7.startValue, loc7.endValue));
                        loc1.push(new PropertyData("scaleY", loc7.startValue, loc7.endValue));
                        break;
                    }
                    default:
                    {
                        loc1.push(loc7);
                    }
                }
                arg1[loc5] = null;
                delete arg1[loc5];
            }
            return loc1;
        }

        internal static const PROP_DELIMITER:RegExp=new RegExp("\\s*,\\s*");

        internal static const PROP_VALUE_DELIMITER:RegExp=new RegExp("\\s*(=|:)\\s*");

        internal static const VALUE_RANGE_DELIMITER:RegExp=new RegExp("\\s*[~]\\s*");

        internal static const START_VALUE_MARKER:RegExp=new RegExp("(_start|Start|_from|From)");

        internal static const END_VALUE_MARKER:RegExp=new RegExp("(_end|End|_to|To)");

        internal var _keywords:Array;

        internal var _allKeywords:Array;

        internal static var TARGET_KEYWORD:Keyword;

        internal static var SCALE_KEYWORD:Keyword;

        internal static var MOVE_KEYWORD:Keyword;

        internal static var FILTER_KEYWORD:Keyword;
    }
}

import flash.utils.*;


class Keyword extends Object
{
    public function Keyword(arg1:String, arg2:Class, arg3:Boolean=true, arg4:String="", arg5:*=null, ... rest)
    {
        var loc1:*=null;
        super();
        this._term = arg1;
        this._type = arg2;
        this._includeInParsing = arg3;
        this._description = arg4;
        this._defaultValue = arg5;
        this._aliases = new Array();
        var loc2:*=0;
        var loc3:*=rest;
        for each (loc1 in loc3) 
        {
            this._aliases.push(loc1);
        }
        return;
    }

    public function get term():String
    {
        return this._term;
    }

    public function get type():Class
    {
        return this._type;
    }

    public function get includeInParsing():Boolean
    {
        return this._includeInParsing;
    }

    public function get description():String
    {
        return this._description;
    }

    public function get aliases():Array
    {
        return this._aliases;
    }

    public function get hasAliases():Boolean
    {
        return this._aliases.length > 0;
    }

    public function get allKeywords():Array
    {
        return this._aliases.concat(this._term);
    }

    public function get defaultValue():*
    {
        return this._defaultValue;
    }

    public function toString():String
    {
        var loc1:*=null;
        loc1 = this.term + ":" + flash.utils.getQualifiedClassName(this.type) + "\n";
        if (this.hasAliases) 
        {
            loc1 = loc1 + ("\tAliases: " + this.allKeywords.join(", ") + "\n");
        }
        loc1 = loc1 + ("\tDefault value: " + this.defaultValue + "\n");
        loc1 = loc1 + ("\t" + this.description + "\n");
        return loc1;
    }

    internal var _term:String;

    internal var _type:Class;

    internal var _includeInParsing:Boolean;

    internal var _description:String;

    internal var _aliases:Array;

    internal var _defaultValue:*;
}

class PropertyData extends Object
{
    public function PropertyData(arg1:String="", arg2:Number=NaN, arg3:Number=NaN)
    {
        super();
        this.propertyName = arg1;
        this.startValue = arg2;
        this.endValue = arg3;
        return;
    }

    public function toString():String
    {
        return this.propertyName + ":" + this.startValue + "~" + this.endValue;
    }

    public var propertyName:String;

    public var startValue:Number;

    public var endValue:Number;
}

//            class TargetProperty
package org.as3lib.kitchensync.action.tween 
{
    import org.as3lib.kitchensync.*;
    
    public class TargetProperty extends Object implements org.as3lib.kitchensync.action.tween.ITweenTarget
    {
        public function TargetProperty(arg1:Object, arg2:String, arg3:Number=NaN, arg4:Number=NaN)
        {
            super();
            this.setTargetPropterty(arg1, arg2);
            this._startValue = arg3;
            this._endValue = arg4;
            this._snapToInteger = org.as3lib.kitchensync.KitchenSyncDefaults.snapToInteger;
            return;
        }

        public function get target():Object
        {
            return this._target;
        }

        public function get property():String
        {
            return this._property;
        }

        public function setTargetPropterty(arg1:Object, arg2:String):void
        {
            if (this.isPropertyValid(arg1, arg2)) 
            {
                this._target = arg1;
                this._property = arg2;
            }
            else 
            {
                throw new Error(this.NON_NUMERIC_PROPERTY_ERROR);
            }
            return;
        }

        protected function isPropertyValid(arg1:Object, arg2:String):Boolean
        {
            return !(arg1[arg2] == undefined) && arg1[arg2] is Number;
        }

        public function get currentValue():Number
        {
            if (this._target) 
            {
                return this._target[this._property];
            }
            throw new Error("Target doesn\'t exist.");
        }

        public function set currentValue(arg1:Number):void
        {
            if (this._target && this._property) 
            {
                this._target[this._property] = arg1;
            }
            else 
            {
                throw new Error("Target and Property must both be defined before setting the value.");
            }
            return;
        }

        public function get startValue():Number
        {
            return this._startValue;
        }

        public function set startValue(arg1:Number):void
        {
            this._startValue = arg1;
            return;
        }

        public function get endValue():Number
        {
            return this._endValue;
        }

        public function set endValue(arg1:Number):void
        {
            this._endValue = arg1;
            return;
        }

        public function get differenceInValues():Number
        {
            return this._endValue - this._startValue;
        }

        public function get snapToInteger():Boolean
        {
            return this._snapToInteger;
        }

        public function set snapToInteger(arg1:Boolean):void
        {
            this._snapToInteger = arg1;
            return;
        }

        public function updateTween(arg1:Number):Number
        {
            this.currentValue = arg1 * this.differenceInValues + this.startValue;
            if (this._snapToInteger) 
            {
                this.currentValue = Math.round(this.currentValue);
            }
            return Number(this.currentValue);
        }

        public function reset():void
        {
            this.currentValue = this.startValue;
            return;
        }

        public function clone():org.as3lib.kitchensync.action.tween.ITweenTarget
        {
            var loc1:*=new org.as3lib.kitchensync.action.tween.TargetProperty(this._target, this._property, this._startValue, this._endValue);
            loc1.snapToInteger = this._snapToInteger;
            return loc1;
        }

        public function cloneWithTarget(arg1:Object, arg2:String=""):org.as3lib.kitchensync.action.tween.TargetProperty
        {
            var loc1:*=this.clone() as org.as3lib.kitchensync.action.tween.TargetProperty;
            if (arg1 is String) 
            {
                loc1.setTargetPropterty(loc1.target, arg1 as String);
            }
            else if (arg2 != "") 
            {
                loc1.setTargetPropterty(arg1, arg2);
            }
            else 
            {
                loc1.setTargetPropterty(arg1, loc1.property);
            }
            return loc1;
        }

        public function toString():String
        {
            return this.target + "." + this.property + " from " + this.startValue + " to " + this.endValue;
        }

        protected const NON_NUMERIC_PROPERTY_ERROR:String="The \'property\' of the object \'target\' must be a Number, int, or uint.";

        protected var _target:Object;

        protected var _property:String;

        protected var _startValue:Number;

        protected var _endValue:Number;

        protected var _snapToInteger:Boolean;
    }
}


//          class AbstractAction
package org.as3lib.kitchensync.action 
{
    import flash.errors.*;
    import flash.events.*;
    import org.as3lib.kitchensync.*;
    import org.as3lib.kitchensync.core.*;
    import org.as3lib.kitchensync.utils.*;
    import org.as3lib.utils.*;
    
    public class AbstractAction extends flash.events.EventDispatcher implements org.as3lib.kitchensync.action.IJumpableAction
    {
        public function AbstractAction()
        {
            super();
            this.autoDelete = org.as3lib.kitchensync.KitchenSyncDefaults.autoDelete;
            org.as3lib.utils.AbstractEnforcer.enforceConstructor(this, org.as3lib.kitchensync.action.AbstractAction);
            return;
        }

        public function get duration():int
        {
            return this._duration;
        }

        public function set duration(arg1:*):void
        {
            var loc1:*=null;
            if (isNaN(arg1)) 
            {
                loc1 = arg1.toString();
                this._duration = org.as3lib.kitchensync.KitchenSync.timeStringParser.parseTimeString(loc1);
            }
            else 
            {
                this._duration = arg1;
            }
            return;
        }

        public function update(arg1:int):void
        {
            org.as3lib.utils.AbstractEnforcer.enforceMethod();
            return;
        }

        public function get delay():int
        {
            return this._delay;
        }

        public function set delay(arg1:*):void
        {
            var loc1:*=null;
            if (isNaN(arg1)) 
            {
                loc1 = arg1.toString();
                this._delay = org.as3lib.kitchensync.KitchenSync.timeStringParser.parseTimeString(loc1);
            }
            else 
            {
                this._delay = arg1;
            }
            return;
        }

        protected function startTimeHasElapsed(arg1:int):Boolean
        {
            if (isNaN(this._startTime) || !this._running || this._paused) 
            {
                return false;
            }
            if (this._startTime + this._delay <= arg1) 
            {
                return true;
            }
            return false;
        }

        public function get progress():Number
        {
            if (!this._running) 
            {
                return 0;
            }
            return Math.max(0, org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime - (this._delay + this._startTime));
        }

        public function get description():String
        {
            return this._description;
        }

        public function set description(arg1:String):void
        {
            this._description = arg1;
            return;
        }

        protected function durationHasElapsed(arg1:int):Boolean
        {
            if (isNaN(this._startTime) || !this._running || this._paused) 
            {
                return false;
            }
            if (this._startTime + this._delay + this._duration <= arg1) 
            {
                return true;
            }
            return false;
        }

        public function get isInstantaneous():Boolean
        {
            return this._delay <= 0 && this._duration <= 0;
        }

        public function get autoDelete():Boolean
        {
            return this._autoDelete;
        }

        public function set autoDelete(arg1:Boolean):void
        {
            this._autoDelete = arg1;
            return;
        }

        protected function complete():void
        {
            this._running = false;
            this.unregister();
            dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_COMPLETE, org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime));
            if (this._autoDelete) 
            {
                this.kill();
            }
            return;
        }

        public function get isRunning():Boolean
        {
            return this._running;
        }

        protected function forceUpdate():void
        {
            this.update(org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime);
            return;
        }

        public function get isPaused():Boolean
        {
            return this._paused;
        }

        protected function register():void
        {
            org.as3lib.kitchensync.core.Synchronizer.getInstance().registerClient(this);
            this.forceUpdate();
            return;
        }

        protected function get startTime():int
        {
            return this._startTime;
        }

        protected function unregister():void
        {
            org.as3lib.kitchensync.core.Synchronizer.getInstance().unregisterClient(this);
            return;
        }

        protected function get pauseTime():int
        {
            return this._pauseTime;
        }

        public function get runningTime():int
        {
            if (!this._running) 
            {
                return 0;
            }
            if (this.isPaused) 
            {
                return this._pauseTime - this._startTime;
            }
            return org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime - this._startTime;
        }

        public function start():org.as3lib.kitchensync.action.IAction
        {
            if (this._paused) 
            {
                this.unpause();
            }
            else if (this._running) 
            {
                throw new flash.errors.IllegalOperationError("The start() method cannot be called when the action is already running. Try stopping the action first or using the clone() method to create a copy of it.");
            }
            else 
            {
                this._running = true;
                this._startTime = org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime;
                this.register();
                dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_START, this._startTime));
            }
            return this;
        }

        public function pause():void
        {
            var loc1:*=0;
            if (this._running && !this._paused) 
            {
                loc1 = org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime;
                this._pauseTime = loc1;
                this._paused = true;
                this.unregister();
                dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_PAUSE, loc1));
            }
            return;
        }

        public function unpause():void
        {
            var loc1:*=0;
            var loc2:*=0;
            if (this._running && this._paused) 
            {
                this._paused = false;
                loc1 = org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime;
                loc2 = loc1 - this._pauseTime;
                this._startTime = this._startTime + loc2;
                this.register();
                dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.ACTION_UNPAUSE, loc1));
            }
            return;
        }

        public function togglePause():void
        {
            if (this._paused) 
            {
                this.unpause();
            }
            this.pause();
            return;
        }

        public function stop():void
        {
            if (this._running) 
            {
                this._paused = false;
                this._running = false;
                this._startTime = -1;
                this.unregister();
            }
            return;
        }

        public function reset():void
        {
            this.stop();
            return;
        }

        public function jumpToTime(arg1:*, arg2:Boolean=false):void
        {
            var loc1:*=0;
            var loc4:*=null;
            if (!this.isRunning || this._duration == 0) 
            {
                throw new flash.errors.IllegalOperationError("Can\'t jump to time if the action isn\'t running or if duration is 0.");
            }
            if (isNaN(arg1)) 
            {
                loc4 = arg1.toString();
                loc1 = org.as3lib.kitchensync.KitchenSync.timeStringParser.parseTimeString(loc4);
            }
            else 
            {
                loc1 = int(arg1);
            }
            var loc2:*=arg2 ? this.duration : this.duration + this.delay;
            var loc3:*=org.as3lib.kitchensync.core.Synchronizer.getInstance().currentTime;
            if (loc1 > loc2 || loc1 < 0) 
            {
                throw new RangeError("\'time\' must be less than the total time of the action and greater than 0.");
            }
            this._startTime = -1 * (loc1 - loc3);
            if (arg2) 
            {
                this._startTime = this._startTime - this.delay;
            }
            return;
        }

        public function jumpByTime(arg1:*):void
        {
            var loc1:*=0;
            var loc2:*=null;
            if (isNaN(arg1)) 
            {
                loc2 = arg1.toString();
                loc1 = org.as3lib.kitchensync.KitchenSync.timeStringParser.parseTimeString(loc2);
            }
            else 
            {
                loc1 = int(arg1);
            }
            this.jumpToTime(this.runningTime + loc1);
            return;
        }

        public function clone():org.as3lib.kitchensync.action.IAction
        {
            org.as3lib.utils.AbstractEnforcer.enforceMethod();
            return this;
        }

        public function kill():void
        {
            if (this._running) 
            {
                this.complete();
            }
            return;
        }

        protected var _duration:int=0;

        protected var _delay:int=0;

        protected var _description:String;

        protected var _autoDelete:Boolean;

        protected var _running:Boolean=false;

        protected var _paused:Boolean=false;

        protected var _pauseTime:int;

        protected var _startTime:int;
    }
}


//          class IAction
package org.as3lib.kitchensync.action 
{
    import flash.events.*;
    import org.as3lib.kitchensync.core.*;
    
    public interface IAction extends org.as3lib.kitchensync.core.ISynchronizerClient, flash.events.IEventDispatcher, org.as3lib.kitchensync.core.IPauseable
    {
        function get duration():int;

        function set duration(arg1:*):void;

        function get delay():int;

        function set delay(arg1:*):void;

        function get isInstantaneous():Boolean;

        function get runningTime():int;

        function get isRunning():Boolean;

        function start():org.as3lib.kitchensync.action.IAction;

        function stop():void;

        function reset():void;

        function clone():org.as3lib.kitchensync.action.IAction;

        function kill():void;
    }
}


//          class IJumpableAction
package org.as3lib.kitchensync.action 
{
    public interface IJumpableAction extends org.as3lib.kitchensync.action.IAction
    {
        function jumpToTime(arg1:*, arg2:Boolean=false):void;

        function jumpByTime(arg1:*):void;
    }
}


//          class IPrecisionAction
package org.as3lib.kitchensync.action 
{
    public interface IPrecisionAction extends org.as3lib.kitchensync.action.IAction
    {
        function startAtTime(arg1:int):org.as3lib.kitchensync.action.IPrecisionAction;
    }
}


//          class KSFunction
package org.as3lib.kitchensync.action 
{
    import flash.errors.*;
    
    public class KSFunction extends org.as3lib.kitchensync.action.AbstractAction
    {
        public function KSFunction(arg1:Function, arg2:Object=0, ... rest)
        {
            super();
            _duration = 0;
            this.func = arg1;
            this.delay = arg2;
            this._args = rest;
            return;
        }

        public function get func():Function
        {
            return this._func;
        }

        public function set func(arg1:Function):void
        {
            this._func = arg1;
            return;
        }

        public override function set duration(arg1:*):void
        {
            throw new flash.errors.IllegalOperationError("Duration cannot be set for KSFunction");
        }

        public function get result():*
        {
            return this._result;
        }

        public function invoke():*
        {
            this._result = this._func.apply(this, this._args);
            return this._result;
        }

        public override function update(arg1:int):void
        {
            if (startTimeHasElapsed(arg1)) 
            {
                this.invoke();
                if (durationHasElapsed(arg1)) 
                {
                    complete();
                }
            }
            return;
        }

        public override function clone():org.as3lib.kitchensync.action.IAction
        {
            var loc1:*=new org.as3lib.kitchensync.action.KSFunction(this._func);
            loc1._args = this._args;
            loc1._result = this._result;
            loc1.autoDelete = _autoDelete;
            return loc1;
        }

        public override function kill():void
        {
            super.kill();
            this._func = null;
            this._args = null;
            this._result = null;
            return;
        }

        protected var _func:Function;

        protected var _result:*;

        protected var _args:Array;
    }
}


//          class KSWait
package org.as3lib.kitchensync.action 
{
    public class KSWait extends org.as3lib.kitchensync.action.AbstractAction
    {
        public function KSWait(arg1:*)
        {
            super();
            this.delay = arg1;
            return;
        }

        public override function set duration(arg1:*):void
        {
            throw new Error("duration is ignored for this action");
        }

        public override function update(arg1:int):void
        {
            if (startTimeHasElapsed(arg1)) 
            {
                if (durationHasElapsed(arg1)) 
                {
                    complete();
                }
            }
            return;
        }

        public override function clone():org.as3lib.kitchensync.action.IAction
        {
            var loc1:*=new org.as3lib.kitchensync.action.KSWait(_delay);
            loc1.autoDelete = _autoDelete;
            return loc1;
        }
    }
}


//        package core
//          class EnterFrameCore
package org.as3lib.kitchensync.core 
{
    import flash.display.*;
    import flash.events.*;
    
    public class EnterFrameCore extends Object implements org.as3lib.kitchensync.core.ISynchronizerCore
    {
        public function EnterFrameCore(arg1:flash.display.DisplayObject=null)
        {
            super();
            if (arg1 == null) 
            {
                arg1 = new flash.display.Sprite();
            }
            this._displayObject = arg1;
            return;
        }

        public function start():void
        {
            this._displayObject.addEventListener(flash.events.Event.ENTER_FRAME, this.onEnterFrame);
            return;
        }

        public function stop():void
        {
            this._displayObject.removeEventListener(flash.events.Event.ENTER_FRAME, this.onEnterFrame);
            return;
        }

        internal function onEnterFrame(arg1:flash.events.Event):void
        {
            org.as3lib.kitchensync.core.Synchronizer.getInstance().dispatchUpdate();
            return;
        }

        internal var _displayObject:flash.display.DisplayObject;
    }
}


//          class IPauseable
package org.as3lib.kitchensync.core 
{
    public interface IPauseable
    {
        function get isPaused():Boolean;

        function pause():void;

        function unpause():void;
    }
}


//          class ISynchronizerClient
package org.as3lib.kitchensync.core 
{
    public interface ISynchronizerClient
    {
        function update(arg1:int):void;
    }
}


//          class ISynchronizerCore
package org.as3lib.kitchensync.core 
{
    public interface ISynchronizerCore
    {
        function start():void;

        function stop():void;
    }
}


//          class KitchenSyncEvent
package org.as3lib.kitchensync.core 
{
    import flash.events.*;
    
    public class KitchenSyncEvent extends flash.events.Event
    {
        public function KitchenSyncEvent(arg1:String, arg2:int)
        {
            super(arg1, false, false);
            this._timestamp = arg2;
            return;
        }

        public function get timestamp():int
        {
            return this._timestamp;
        }

        public static const SYNCHRONIZER_UPDATE:String="synchronizerUpdate";

        public static const ACTION_START:String="actionStart";

        public static const ACTION_PAUSE:String="actionPause";

        public static const ACTION_UNPAUSE:String="actionUnpause";

        public static const ACTION_COMPLETE:String="actionComplete";

        public static const CHILD_ACTION_START:String="childActionStart";

        public static const CHILD_ACTION_COMPLETE:String="childActionComplete";

        internal var _timestamp:int;
    }
}


//          class Synchronizer
package org.as3lib.kitchensync.core 
{
    import flash.events.*;
    import flash.utils.*;
    import org.as3lib.kitchensync.*;
    
    public final class Synchronizer extends flash.events.EventDispatcher
    {
        public function Synchronizer(arg1:SingletonEnforcer)
        {
            this._clients = new flash.utils.Dictionary(org.as3lib.kitchensync.KitchenSyncDefaults.syncrhonizerUsesWeakReferences);
            super();
            return;
        }

        public function get core():org.as3lib.kitchensync.core.ISynchronizerCore
        {
            return this._core;
        }

        public function set core(arg1:org.as3lib.kitchensync.core.ISynchronizerCore):void
        {
            if (this._core) 
            {
                this._core.stop();
            }
            this._core = arg1;
            this._core.start();
            return;
        }

        public function get currentTime():int
        {
            return this._currentTime;
        }

        public function get cycles():int
        {
            return this._cycles;
        }

        public function get activeClients():int
        {
            var loc2:*=undefined;
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=this._clients;
            for each (loc2 in loc4) 
            {
                ++loc1;
            }
            return loc1;
        }

        public function registerClient(arg1:org.as3lib.kitchensync.core.ISynchronizerClient):void
        {
            if (this._core == null) 
            {
                org.as3lib.kitchensync.KitchenSync.initialize();
            }
            this._clients[arg1] = arg1;
            return;
        }

        public function unregisterClient(arg1:org.as3lib.kitchensync.core.ISynchronizerClient):void
        {
            delete this._clients[arg1];
            return;
        }

        function dispatchUpdate():void
        {
            var loc1:*=null;
            this._currentTime = flash.utils.getTimer();
            var loc2:*;
            var loc3:*=((loc2 = this)._cycles + 1);
            loc2._cycles = loc3;
            loc2 = 0;
            loc3 = this._clients;
            for each (loc1 in loc3) 
            {
                loc1.update(this.currentTime);
            }
            dispatchEvent(new org.as3lib.kitchensync.core.KitchenSyncEvent(org.as3lib.kitchensync.core.KitchenSyncEvent.SYNCHRONIZER_UPDATE, this.currentTime));
            return;
        }

        public static function getInstance():org.as3lib.kitchensync.core.Synchronizer
        {
            if (_instance == null) 
            {
                _instance = new Synchronizer(new SingletonEnforcer());
            }
            return _instance;
        }

        
        {
            _instance = null;
        }

        internal var _core:org.as3lib.kitchensync.core.ISynchronizerCore;

        internal var _currentTime:int=0;

        internal var _cycles:int=0;

        internal var _clients:flash.utils.Dictionary;

        internal static var _instance:org.as3lib.kitchensync.core.Synchronizer=null;
    }
}


class SingletonEnforcer extends Object
{
    public function SingletonEnforcer()
    {
        super();
        return;
    }
}

//        package easing
//          class EasingUtil
package org.as3lib.kitchensync.easing 
{
    public class EasingUtil extends Object
    {
        public function EasingUtil()
        {
            super();
            return;
        }

        public static function call(arg1:Function, arg2:Number, arg3:Number, arg4:Number=NaN, arg5:Number=NaN):Number
        {
            var func:Function;
            var timeElapsed:Number;
            var duration:Number;
            var mod1:Number=NaN;
            var mod2:Number=NaN;
            var result:Number;

            var loc1:*;
            result = NaN;
            func = arg1;
            timeElapsed = arg2;
            duration = arg3;
            mod1 = arg4;
            mod2 = arg5;
            try 
            {
                if (isNaN(mod1)) 
                {
                    result = func.apply(func, [timeElapsed, duration]);
                }
                else if (isNaN(mod2)) 
                {
                    result = func.apply(func, [timeElapsed, duration, mod1]);
                }
                else 
                {
                    result = func.apply(func, [timeElapsed, duration, mod1, mod2]);
                }
            }
            catch (e:ArgumentError)
            {
                e.message = "You most likely tried to add modifier parameters (e.g. aplitude, overshoot) to an easing function that couldn\'t handle them or you are using an invalid function. " + e.message;
                throw e;
            }
            catch (e:Error)
            {
                e.message = "Make sure you are using a valid easing function with the signature funcitonName(timeElapsed:Number, duration:Number):Number. " + e.message;
            }
            return result;
        }

        public static function generateArray(arg1:Function, arg2:int, arg3:Number=NaN, arg4:Number=NaN):Array
        {
            var loc1:*=new Array();
            var loc2:*=0;
            while (loc2 < arg2) 
            {
                loc1.push(call(arg1, loc2, (arg2 - 1), arg3, arg4));
                ++loc2;
            }
            return loc1;
        }

        public static function getAveragedFunction(arg1:Function, arg2:Function):Function
        {
            var easingFunction1:Function;
            var easingFunction2:Function;
            var func:Function;
            var results:Number;

            var loc1:*;
            func = null;
            results = NaN;
            easingFunction1 = arg1;
            easingFunction2 = arg2;
            func = function (arg1:Number, arg2:Number, arg3:Number=NaN, arg4:Number=NaN):Number
            {
                var loc1:*=org.as3lib.kitchensync.easing.EasingUtil.call(easingFunction1, arg1, arg2, arg3, arg4);
                var loc2:*=org.as3lib.kitchensync.easing.EasingUtil.call(easingFunction2, arg1, arg2, arg3, arg4);
                return (loc1 + loc2) / 2;
            }
            return func;
        }
    }
}


//          class Linear
package org.as3lib.kitchensync.easing 
{
    public class Linear extends Object
    {
        public function Linear()
        {
            super();
            return;
        }

        public static function ease(arg1:Number, arg2:Number):Number
        {
            return arg1 / arg2;
        }
    }
}


//        package utils
//          class ITimeStringParser
package org.as3lib.kitchensync.utils 
{
    public interface ITimeStringParser
    {
        function parseTimeString(arg1:String):int;
    }
}


//          class TimeStringParser_en
package org.as3lib.kitchensync.utils 
{
    public class TimeStringParser_en extends Object implements org.as3lib.kitchensync.utils.ITimeStringParser
    {
        public function TimeStringParser_en(arg1:int=30)
        {
            super();
            this.frameRate = arg1;
            return;
        }

        public function get frameRate():int
        {
            return this._frameRate;
        }

        public function set frameRate(arg1:int):void
        {
            this._frameRate = Math.max(arg1, 1);
            return;
        }

        public function parseTimeString(arg1:String):int
        {
            var timeString:String;
            var result:Number;
            var negate:Boolean;
            var unitValuePairs:Array;
            var pair:String;
            var framesToMilliseconds:Function;
            var ms:int;
            var timeMatch:Array;
            var frameMatch:Array;
            var time:Number;
            var timeUnit:String;

            var loc1:*;
            pair = null;
            ms = 0;
            timeMatch = null;
            frameMatch = null;
            time = NaN;
            timeUnit = null;
            timeString = arg1;
            framesToMilliseconds = function (arg1:Number):int
            {
                return Math.ceil(arg1 / frameRate * 1000);
            }
            result = 0;
            if (!timeString) 
            {
                throw new SyntaxError("The input object containes no data.");
            }
            if (!isNaN(Number(timeString))) 
            {
                result = Number(timeString);
                return result;
            }
            negate = false;
            if (timeString.match(NEGATIVE_SEARCH)) 
            {
                timeString = timeString.substr(1);
                negate = true;
            }
            timeString = timeString.toLocaleLowerCase();
            if (timeString.search(TIMECODE_FORMAT_SEARCH) >= 0) 
            {
                ms = 0;
                timeMatch = timeString.match(TIMECODE_SEGMENT_SEARCH);
                if (timeMatch && timeMatch.length >= 1) 
                {
                    timeMatch = timeMatch.reverse();
                    if (timeMatch.length > 4) 
                    {
                        throw new SyntaxError("The timecode wasn\'t formatted correctly. It has too many segments.");
                    }
                    if (timeMatch[0]) 
                    {
                        ms = timeMatch[0].toString().match(TIMECODE_DIGIT_SEARCH)[0] * SECONDS_VALUE;
                        result = result + ms;
                    }
                    if (timeMatch[1]) 
                    {
                        ms = timeMatch[1].toString().match(TIMECODE_DIGIT_SEARCH)[0] * MINUTES_VALUE;
                        result = result + ms;
                    }
                    if (timeMatch[2]) 
                    {
                        ms = timeMatch[2].toString().match(TIMECODE_DIGIT_SEARCH)[0] * HOURS_VALUE;
                        result = result + ms;
                    }
                    if (timeMatch[3]) 
                    {
                        ms = timeMatch[3].toString().match(TIMECODE_DIGIT_SEARCH)[0] * DAYS_VALUE;
                        result = result + ms;
                    }
                }
                frameMatch = timeString.match(TIMECODE_FRAME_SEARCH);
                if (frameMatch && frameMatch.length >= 1) 
                {
                    ms = framesToMilliseconds(frameMatch[0].toString().match(TIMECODE_DIGIT_SEARCH)[0]);
                    result = result + ms;
                }
                return result;
            }
            unitValuePairs = timeString.match(NUMBER_UNIT_PAIR_SEARCH);
            if (unitValuePairs.length < 1) 
            {
                throw new SyntaxError("The input object contains malformed data: " + timeString);
            }
            var loc2:*=0;
            var loc3:*=unitValuePairs;
            for each (pair in loc3) 
            {
                time = Number(pair.match(NUMBER_SEARCH)[0]);
                timeUnit = pair.match(LETTER_SEARCH)[0];
                if (timeUnit.search(FRAMES_SEARCH) >= 0) 
                {
                    time = framesToMilliseconds(time);
                }
                else if (timeUnit.search(MILLISECONDS_SEARCH) >= 0) 
                {
                    time = time * MILLISECONDS_VALUE;
                }
                else if (timeUnit.search(SECONDS_SEARCH) >= 0) 
                {
                    time = time * SECONDS_VALUE;
                }
                else if (timeUnit.search(MINUTES_SEARCH) >= 0) 
                {
                    time = time * MINUTES_VALUE;
                }
                else if (timeUnit.search(HOURS_SEARCH) >= 0) 
                {
                    time = time * HOURS_VALUE;
                }
                else if (timeUnit.search(DAYS_SEARCH) >= 0) 
                {
                    time = time * DAYS_VALUE;
                }
                else 
                {
                    throw new SyntaxError("The input object contains malformed data.");
                }
                time = Math.round(time);
                result = result + time;
            }
            if (negate) 
            {
                result = result * -1;
            }
            return int(result);
        }

        internal static const MILLISECONDS_VALUE:Number=1;

        internal static const SECONDS_VALUE:Number=1000;

        internal static const MINUTES_VALUE:Number=60000;

        internal static const HOURS_VALUE:Number=3600000;

        internal static const DAYS_VALUE:Number=86400000;

        internal static const NUMBER_UNIT_PAIR_SEARCH:RegExp=new RegExp("(\\d*\\.?\\d+)\\s*[a-z]+\\s*,?\\s*", "g");

        internal static const NUMBER_SEARCH:RegExp=new RegExp("\\d*\\.?\\d+", "g");

        internal static const LETTER_SEARCH:RegExp=new RegExp("[a-z]+");

        internal static const NEGATIVE_SEARCH:RegExp=new RegExp("^-.+");

        internal static const FRAMES_SEARCH:RegExp=new RegExp("([^a-z]|^)(f|fr|frames?)");

        internal static const MILLISECONDS_SEARCH:RegExp=new RegExp("([^a-z]|^)(ms|msecs?|milliseconds?)");

        internal static const SECONDS_SEARCH:RegExp=new RegExp("([^a-z]|^)(s|secs?|seconds?)");

        internal static const MINUTES_SEARCH:RegExp=new RegExp("([^a-z]|^)(m|mins?|minutes?)");

        internal static const HOURS_SEARCH:RegExp=new RegExp("(h|hrs?|hours?)");

        internal static const DAYS_SEARCH:RegExp=new RegExp("(d|days?)");

        internal static const TIMECODE_FORMAT_SEARCH:RegExp=new RegExp("(\\d\\d?)?(:\\d\\d)+(;\\d\\d)?");

        internal static const TIMECODE_SEGMENT_SEARCH:RegExp=new RegExp("(^\\d\\d?)|(:\\d\\d)", "g");

        internal static const TIMECODE_FRAME_SEARCH:RegExp=new RegExp(";(\\d\\d)");

        internal static const TIMECODE_DIGIT_SEARCH:RegExp=new RegExp("(\\d\\d?)");

        protected var _frameRate:int;
    }
}


//        class KitchenSync
package org.as3lib.kitchensync 
{
    import flash.display.*;
    import flash.errors.*;
    import org.as3lib.kitchensync.core.*;
    import org.as3lib.kitchensync.utils.*;
    
    public final class KitchenSync extends Object
    {
        public function KitchenSync()
        {
            super();
            throw new flash.errors.IllegalOperationError("There is no need to instantiate this class. use KitchenSync.initialize() instead");
        }

        public static function get isInitialized():Boolean
        {
            return _isInitialized;
        }

        public static function get timeStringParser():org.as3lib.kitchensync.utils.ITimeStringParser
        {
            return _timeStringParser;
        }

        public static function set timeStringParser(arg1:org.as3lib.kitchensync.utils.ITimeStringParser):void
        {
            _timeStringParser = arg1;
            return;
        }

        public static function initialize(arg1:flash.display.DisplayObject=null, arg2:String="2.0"):void
        {
            var loc1:*=new org.as3lib.kitchensync.core.EnterFrameCore();
            initializeWithCore(loc1, arg2);
            return;
        }

        public static function initializeWithCore(arg1:org.as3lib.kitchensync.core.ISynchronizerCore, arg2:String="2.0"):void
        {
            var loc1:*=null;
            if (_isInitialized) 
            {
                trace("Warning: KitchenSync has already been initialized.");
                return;
            }
            if (arg2 != VERSION) 
            {
                throw new Error("Version check failed. You tested for version " + arg2 + " but it\'s actually version " + VERSION + ". Some syntax may have changed in this version.");
            }
            loc1 = org.as3lib.kitchensync.core.Synchronizer.getInstance();
            loc1.core = arg1;
            timeStringParser = org.as3lib.kitchensync.KitchenSyncDefaults.timeStringParser;
            _isInitialized = true;
            return;
        }

        
        {
            _isInitialized = false;
        }

        public static const VERSION:String="2.0";

        internal static var _isInitialized:Boolean=false;

        internal static var _timeStringParser:org.as3lib.kitchensync.utils.ITimeStringParser;
    }
}


//        class KitchenSyncDefaults
package org.as3lib.kitchensync 
{
    import org.as3lib.kitchensync.action.tween.*;
    import org.as3lib.kitchensync.easing.*;
    import org.as3lib.kitchensync.utils.*;
    
    public class KitchenSyncDefaults extends Object
    {
        public function KitchenSyncDefaults()
        {
            super();
            return;
        }

        
        {
            syncrhonizerUsesWeakReferences = false;
            autoDelete = false;
            timeStringParser = new org.as3lib.kitchensync.utils.TimeStringParser_en();
            easingFunction = org.as3lib.kitchensync.easing.Linear.ease;
            duration = 1000;
            snapToValueOnComplete = true;
            snapToInteger = false;
            tweenObjectParser = new org.as3lib.kitchensync.action.tween.KitchenSyncObjectParser();
        }

        public static var syncrhonizerUsesWeakReferences:Boolean=false;

        public static var autoDelete:Boolean=false;

        public static var timeStringParser:org.as3lib.kitchensync.utils.ITimeStringParser;

        public static var easingFunction:Function;

        public static var duration:int=1000;

        public static var snapToValueOnComplete:Boolean=true;

        public static var snapToInteger:Boolean=false;

        public static var tweenObjectParser:org.as3lib.kitchensync.action.tween.ITweenObjectParser;
    }
}


//      package math
//        class INumericController
package org.as3lib.math 
{
    public interface INumericController
    {
        function get currentValue():Number;

        function set currentValue(arg1:Number):void;
    }
}


//      package utils
//        class AbstractEnforcer
package org.as3lib.utils 
{
    import org.as3lib.errors.*;
    
    public class AbstractEnforcer extends Object
    {
        public function AbstractEnforcer()
        {
            super();
            return;
        }

        public static function enforceConstructor(arg1:Object, arg2:Class):void
        {
            if (org.as3lib.utils.strictIs(arg1, arg2)) 
            {
                throw new org.as3lib.errors.AbstractError(org.as3lib.errors.AbstractError.CONSTRUCTOR_ERROR);
            }
            return;
        }

        public static function enforceMethod():void
        {
            throw new org.as3lib.errors.AbstractError(org.as3lib.errors.AbstractError.METHOD_ERROR);
        }
    }
}


//        function strictIs
package org.as3lib.utils 
{
    import flash.utils.*;
    
    public function strictIs(arg1:Object, arg2:Class):Boolean
    {
        return arg2 == Class(arg1.constructor);
    }
}


