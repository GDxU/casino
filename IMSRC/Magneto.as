//ActionScript 3.0
//  package com
//    package hurlant
//      package crypto
//        package cert
//          class MozillaRootCertificates
package com.hurlant.crypto.cert 
{
    public class MozillaRootCertificates extends com.hurlant.crypto.cert.X509CertificateCollection
    {
        public function MozillaRootCertificates()
        {
            super();
            super.addPEMCertificate("Verisign/RSA Secure Server CA", "MF8xCzAJBgNVBAYTAlVTMSAwHgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEuMCwGA1UE" + "CxMlU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIICNDCCAaECEAKtZn5ORf5eV288mBle3cAwDQYJKoZIhvcNAQECBQAwXzELMAkG\n" + "A1UEBhMCVVMxIDAeBgNVBAoTF1JTQSBEYXRhIFNlY3VyaXR5LCBJbmMuMS4wLAYD\n" + "VQQLEyVTZWN1cmUgU2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk0\n" + "MTEwOTAwMDAwMFoXDTEwMDEwNzIzNTk1OVowXzELMAkGA1UEBhMCVVMxIDAeBgNV\n" + "BAoTF1JTQSBEYXRhIFNlY3VyaXR5LCBJbmMuMS4wLAYDVQQLEyVTZWN1cmUgU2Vy\n" + "dmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGbMA0GCSqGSIb3DQEBAQUAA4GJ\n" + "ADCBhQJ+AJLOesGugz5aqomDV6wlAXYMra6OLDfO6zV4ZFQD5YRAUcm/jwjiioII\n" + "0haGN1XpsSECrXZogZoFokvJSyVmIlZsiAeP94FZbYQHZXATcXY+m3dM41CJVphI\n" + "uR2nKRoTLkoRWZweFdVJVCxzOmmCsZc5nG1wZ0jl3S3WyB57AgMBAAEwDQYJKoZI\n" + "hvcNAQECBQADfgBl3X7hsuyw4jrg7HFGmhkRuNPHoLQDQCYCPgmc4RKz0Vr2N6W3\n" + "YQO2WxZpO8ZECAyIUwxrl0nHPjXcbLm7qt9cuzovk2C2qUtN8iD3zV9/ZHuO3ABc\n" + "1/p3yjkWWW8O6tO1g39NTUJWdrTJXwT4OPjr0l91X817/OWOgHz8UA==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GTE CyberTrust Root CA", "MEUxCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9HVEUgQ29ycG9yYXRpb24xHDAaBgNVBAMTE0dURSBD" + "eWJlclRydXN0IFJvb3Q=", "-----BEGIN CERTIFICATE-----\n" + "MIIB+jCCAWMCAgGjMA0GCSqGSIb3DQEBBAUAMEUxCzAJBgNVBAYTAlVTMRgwFgYD\n" + "VQQKEw9HVEUgQ29ycG9yYXRpb24xHDAaBgNVBAMTE0dURSBDeWJlclRydXN0IFJv\n" + "b3QwHhcNOTYwMjIzMjMwMTAwWhcNMDYwMjIzMjM1OTAwWjBFMQswCQYDVQQGEwJV\n" + "UzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMRwwGgYDVQQDExNHVEUgQ3liZXJU\n" + "cnVzdCBSb290MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC45k+625h8cXyv\n" + "RLfTD0bZZOWTwUKOx7pJjTUteueLveUFMVnGsS8KDPufpz+iCWaEVh43KRuH6X4M\n" + "ypqfpX/1FZSj1aJGgthoTNE3FQZor734sLPwKfWVWgkWYXcKIiXUT0Wqx73llt/5\n" + "1KiOQswkwB6RJ0q1bQaAYznEol44AwIDAQABMA0GCSqGSIb3DQEBBAUAA4GBABKz\n" + "dcZfHeFhVYAA1IFLezEPI2PnPfMD+fQ2qLvZ46WXTeorKeDWanOB5sCJo9Px4KWl\n" + "IjeaY8JIILTbcuPI9tl8vrGvU9oUtCG41tWW4/5ODFlitppK+ULdjG+BqXH/9Apy\n" + "bW1EDp3zdHSo1TRJ6V6e6bR64eVaH4QwnNOfpSXY\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GTE CyberTrust Global Root", "MHUxCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9HVEUgQ29ycG9yYXRpb24xJzAlBgNVBAsTHkdURSBD" + "eWJlclRydXN0IFNvbHV0aW9ucywgSW5jLjEjMCEGA1UEAxMaR1RFIEN5YmVyVHJ1c3QgR2xvYmFs" + "IFJvb3Q=", "-----BEGIN CERTIFICATE-----\n" + "MIICWjCCAcMCAgGlMA0GCSqGSIb3DQEBBAUAMHUxCzAJBgNVBAYTAlVTMRgwFgYD\n" + "VQQKEw9HVEUgQ29ycG9yYXRpb24xJzAlBgNVBAsTHkdURSBDeWJlclRydXN0IFNv\n" + "bHV0aW9ucywgSW5jLjEjMCEGA1UEAxMaR1RFIEN5YmVyVHJ1c3QgR2xvYmFsIFJv\n" + "b3QwHhcNOTgwODEzMDAyOTAwWhcNMTgwODEzMjM1OTAwWjB1MQswCQYDVQQGEwJV\n" + "UzEYMBYGA1UEChMPR1RFIENvcnBvcmF0aW9uMScwJQYDVQQLEx5HVEUgQ3liZXJU\n" + "cnVzdCBTb2x1dGlvbnMsIEluYy4xIzAhBgNVBAMTGkdURSBDeWJlclRydXN0IEds\n" + "b2JhbCBSb290MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCVD6C28FCc6HrH\n" + "iM3dFw4usJTQGz0O9pTAipTHBsiQl8i4ZBp6fmw8U+E3KHNgf7KXUwefU/ltWJTS\n" + "r41tiGeA5u2ylc9yMcqlHHK6XALnZELn+aks1joNrI1CqiQBOeacPwGFVw1Yh0X4\n" + "04Wqk2kmhXBIgD8SFcd5tB8FLztimQIDAQABMA0GCSqGSIb3DQEBBAUAA4GBAG3r\n" + "GwnpXtlR22ciYaQqPEh346B8pt5zohQDhT37qw4wxYMWM4ETCJ57NE7fQMh017l9\n" + "3PR2VX2bY1QY6fDq81yx2YtCHrnAlU66+tXifPVoYb+O7AWXX1uw16OFNMQkpw0P\n" + "lZPvy5TYnh+dXIVtx6quTx8itc2VrbqnzPmrC3p/\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Thawte Personal Basic CA", "MIHLMQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYDVQQHEwlDYXBlIFRv" + "d24xGjAYBgNVBAoTEVRoYXd0ZSBDb25zdWx0aW5nMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNl" + "cnZpY2VzIERpdmlzaW9uMSEwHwYDVQQDExhUaGF3dGUgUGVyc29uYWwgQmFzaWMgQ0ExKDAmBgkq" + "hkiG9w0BCQEWGXBlcnNvbmFsLWJhc2ljQHRoYXd0ZS5jb20=", "-----BEGIN CERTIFICATE-----\n" + "MIIDITCCAoqgAwIBAgIBADANBgkqhkiG9w0BAQQFADCByzELMAkGA1UEBhMCWkEx\n" + "FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMRowGAYD\n" + "VQQKExFUaGF3dGUgQ29uc3VsdGluZzEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBT\n" + "ZXJ2aWNlcyBEaXZpc2lvbjEhMB8GA1UEAxMYVGhhd3RlIFBlcnNvbmFsIEJhc2lj\n" + "IENBMSgwJgYJKoZIhvcNAQkBFhlwZXJzb25hbC1iYXNpY0B0aGF3dGUuY29tMB4X\n" + "DTk2MDEwMTAwMDAwMFoXDTIwMTIzMTIzNTk1OVowgcsxCzAJBgNVBAYTAlpBMRUw\n" + "EwYDVQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEaMBgGA1UE\n" + "ChMRVGhhd3RlIENvbnN1bHRpbmcxKDAmBgNVBAsTH0NlcnRpZmljYXRpb24gU2Vy\n" + "dmljZXMgRGl2aXNpb24xITAfBgNVBAMTGFRoYXd0ZSBQZXJzb25hbCBCYXNpYyBD\n" + "QTEoMCYGCSqGSIb3DQEJARYZcGVyc29uYWwtYmFzaWNAdGhhd3RlLmNvbTCBnzAN\n" + "BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAvLyTU23AUE+CFeZIlDWmWr5vQvoPR+53\n" + "dXLdjUmbllegeNTKP1GzaQuRdhciB5dqxFGTS+CN7zeVoQxN2jSQHReJl+A1OFdK\n" + "wPQIcOk8RHtQfmGakOMj04gRRif1CwcOu93RfyAKiLlWCy4cgNrx454p7xS9CkT7\n" + "G1sY0b8jkyECAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQQF\n" + "AAOBgQAt4plrsD16iddZopQBHyvdEktTwq1/qqcAXJFAVyVKOKqEcLnZgA+le1z7\n" + "c8a914phXAPjLSeoF+CEhULcXpvGt7Jtu3Sv5D/Lp7ew4F2+eIMllNLbgQ95B21P\n" + "9DkVWlIBe94y1k049hJcBlDfBVu9FEuh3ym6O0GN92NWod8isQ==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Thawte Personal Premium CA", "MIHPMQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYDVQQHEwlDYXBlIFRv" + "d24xGjAYBgNVBAoTEVRoYXd0ZSBDb25zdWx0aW5nMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNl" + "cnZpY2VzIERpdmlzaW9uMSMwIQYDVQQDExpUaGF3dGUgUGVyc29uYWwgUHJlbWl1bSBDQTEqMCgG" + "CSqGSIb3DQEJARYbcGVyc29uYWwtcHJlbWl1bUB0aGF3dGUuY29t", "-----BEGIN CERTIFICATE-----\n" + "MIIDKTCCApKgAwIBAgIBADANBgkqhkiG9w0BAQQFADCBzzELMAkGA1UEBhMCWkEx\n" + "FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMRowGAYD\n" + "VQQKExFUaGF3dGUgQ29uc3VsdGluZzEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBT\n" + "ZXJ2aWNlcyBEaXZpc2lvbjEjMCEGA1UEAxMaVGhhd3RlIFBlcnNvbmFsIFByZW1p\n" + "dW0gQ0ExKjAoBgkqhkiG9w0BCQEWG3BlcnNvbmFsLXByZW1pdW1AdGhhd3RlLmNv\n" + "bTAeFw05NjAxMDEwMDAwMDBaFw0yMDEyMzEyMzU5NTlaMIHPMQswCQYDVQQGEwJa\n" + "QTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYDVQQHEwlDYXBlIFRvd24xGjAY\n" + "BgNVBAoTEVRoYXd0ZSBDb25zdWx0aW5nMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9u\n" + "IFNlcnZpY2VzIERpdmlzaW9uMSMwIQYDVQQDExpUaGF3dGUgUGVyc29uYWwgUHJl\n" + "bWl1bSBDQTEqMCgGCSqGSIb3DQEJARYbcGVyc29uYWwtcHJlbWl1bUB0aGF3dGUu\n" + "Y29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJZtn4B0TPuYwu8KHvE0Vs\n" + "Bd/eJxZRNkERbGw77f4QfRKe5ZtCmv5gMcNmt3M6SK5O0DI3lIi1DbbZ8/JE2dWI\n" + "Et12TfIa/G8jHnrx2JhFTgcQ7xZC0EN1bUre4qrJMf8fAHB8Zs8QJQi6+u4A6UYD\n" + "ZicRFTuqW/KY3TZCstqIdQIDAQABoxMwETAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\n" + "SIb3DQEBBAUAA4GBAGk2ifc0KjNyL2071CKyuG+axTZmDhs8obF1Wub9NdP4qPIH\n" + "b4Vnjt4rueIXsDqg8A6iAJrf8xQVbrvIhVqYgPn/vnQdPfP+MCXRNzRn+qVxeTBh\n" + "KXLA4CxM+1bkOqhv5TJZUtt1KFBZDPgLGeSs2a+WjS9Q2wfD6h+rM+D1KzGJ\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Thawte Personal Freemail CA", "MIHRMQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYDVQQHEwlDYXBlIFRv" + "d24xGjAYBgNVBAoTEVRoYXd0ZSBDb25zdWx0aW5nMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9uIFNl" + "cnZpY2VzIERpdmlzaW9uMSQwIgYDVQQDExtUaGF3dGUgUGVyc29uYWwgRnJlZW1haWwgQ0ExKzAp" + "BgkqhkiG9w0BCQEWHHBlcnNvbmFsLWZyZWVtYWlsQHRoYXd0ZS5jb20=", "-----BEGIN CERTIFICATE-----\n" + "MIIDLTCCApagAwIBAgIBADANBgkqhkiG9w0BAQQFADCB0TELMAkGA1UEBhMCWkEx\n" + "FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMRowGAYD\n" + "VQQKExFUaGF3dGUgQ29uc3VsdGluZzEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBT\n" + "ZXJ2aWNlcyBEaXZpc2lvbjEkMCIGA1UEAxMbVGhhd3RlIFBlcnNvbmFsIEZyZWVt\n" + "YWlsIENBMSswKQYJKoZIhvcNAQkBFhxwZXJzb25hbC1mcmVlbWFpbEB0aGF3dGUu\n" + "Y29tMB4XDTk2MDEwMTAwMDAwMFoXDTIwMTIzMTIzNTk1OVowgdExCzAJBgNVBAYT\n" + "AlpBMRUwEwYDVQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEa\n" + "MBgGA1UEChMRVGhhd3RlIENvbnN1bHRpbmcxKDAmBgNVBAsTH0NlcnRpZmljYXRp\n" + "b24gU2VydmljZXMgRGl2aXNpb24xJDAiBgNVBAMTG1RoYXd0ZSBQZXJzb25hbCBG\n" + "cmVlbWFpbCBDQTErMCkGCSqGSIb3DQEJARYccGVyc29uYWwtZnJlZW1haWxAdGhh\n" + "d3RlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1GnX1LCUZFtx6UfY\n" + "DFG26nKRsIRefS0Nj3sS34UldSh0OkIsYyeflXtL734Zhx2G6qPduc6WZBrCFG5E\n" + "rHzmj+hND3EfQDimAKOHePb5lIZererAXnbr2RSjXW56fAylS1V/Bhkpf56aJtVq\n" + "uzgkCGqYx7Hao5iR/Xnb5VrEHLkCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zAN\n" + "BgkqhkiG9w0BAQQFAAOBgQDH7JJ+Tvj1lqVnYiqk8E0RYNBvjWBYYawmu1I1XAjP\n" + "MPuoSpaKH2JCI4wXD/S6ZJwXrEcp352YXtJsYHFcoqzceePnbgBHH7UNKOgCneSa\n" + "/RP0ptl8sfjcXyMmCZGAc9AUG95DqYMl8uacLxXK/qarigd1iwzdUYRr5PjRznei\n" + "gQ==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Thawte Server CA", "MIHEMQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYDVQQHEwlDYXBlIFRv" + "d24xHTAbBgNVBAoTFFRoYXd0ZSBDb25zdWx0aW5nIGNjMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9u" + "IFNlcnZpY2VzIERpdmlzaW9uMRkwFwYDVQQDExBUaGF3dGUgU2VydmVyIENBMSYwJAYJKoZIhvcN" + "AQkBFhdzZXJ2ZXItY2VydHNAdGhhd3RlLmNvbQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIDEzCCAnygAwIBAgIBATANBgkqhkiG9w0BAQQFADCBxDELMAkGA1UEBhMCWkEx\n" + "FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYD\n" + "VQQKExRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlv\n" + "biBTZXJ2aWNlcyBEaXZpc2lvbjEZMBcGA1UEAxMQVGhhd3RlIFNlcnZlciBDQTEm\n" + "MCQGCSqGSIb3DQEJARYXc2VydmVyLWNlcnRzQHRoYXd0ZS5jb20wHhcNOTYwODAx\n" + "MDAwMDAwWhcNMjAxMjMxMjM1OTU5WjCBxDELMAkGA1UEBhMCWkExFTATBgNVBAgT\n" + "DFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYDVQQKExRUaGF3\n" + "dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNl\n" + "cyBEaXZpc2lvbjEZMBcGA1UEAxMQVGhhd3RlIFNlcnZlciBDQTEmMCQGCSqGSIb3\n" + "DQEJARYXc2VydmVyLWNlcnRzQHRoYXd0ZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQAD\n" + "gY0AMIGJAoGBANOkUG7I/1Zr5s9dtuoMaHVHoqrC2oQl/Kj0R1HahbUgdJSGHg91\n" + "yekIYfUGbTBuFRkC6VLAYttNmZ7iagxEOM3+vuNkCXDF/rFrKbYvScg71CcEJRCX\n" + "L+eQbcAoQpnXTEPew/UhbVSfXcNY4cDk2VuwuNy0e982OsK1ZiIS1ocNAgMBAAGj\n" + "EzARMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEEBQADgYEAB/pMaVz7lcxG\n" + "7oWDTSEwjsrZqG9JGubaUeNgcGyEYRGhGshIPllDfU+VPaGLtwtimHp1it2ITk6e\n" + "QNuozDJ0uW8NxuOzRAvZim+aKZuZGCg70eNAKJpaPNW15yAbi8qkq43pUdniTCxZ\n" + "qdq5snUb9kLy78fyGPmJvKP/iiMucEc=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Thawte Premium Server CA", "MIHOMQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYDVQQHEwlDYXBlIFRv" + "d24xHTAbBgNVBAoTFFRoYXd0ZSBDb25zdWx0aW5nIGNjMSgwJgYDVQQLEx9DZXJ0aWZpY2F0aW9u" + "IFNlcnZpY2VzIERpdmlzaW9uMSEwHwYDVQQDExhUaGF3dGUgUHJlbWl1bSBTZXJ2ZXIgQ0ExKDAm" + "BgkqhkiG9w0BCQEWGXByZW1pdW0tc2VydmVyQHRoYXd0ZS5jb20=", "-----BEGIN CERTIFICATE-----\n" + "MIIDJzCCApCgAwIBAgIBATANBgkqhkiG9w0BAQQFADCBzjELMAkGA1UEBhMCWkEx\n" + "FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTESMBAGA1UEBxMJQ2FwZSBUb3duMR0wGwYD\n" + "VQQKExRUaGF3dGUgQ29uc3VsdGluZyBjYzEoMCYGA1UECxMfQ2VydGlmaWNhdGlv\n" + "biBTZXJ2aWNlcyBEaXZpc2lvbjEhMB8GA1UEAxMYVGhhd3RlIFByZW1pdW0gU2Vy\n" + "dmVyIENBMSgwJgYJKoZIhvcNAQkBFhlwcmVtaXVtLXNlcnZlckB0aGF3dGUuY29t\n" + "MB4XDTk2MDgwMTAwMDAwMFoXDTIwMTIzMTIzNTk1OVowgc4xCzAJBgNVBAYTAlpB\n" + "MRUwEwYDVQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEdMBsG\n" + "A1UEChMUVGhhd3RlIENvbnN1bHRpbmcgY2MxKDAmBgNVBAsTH0NlcnRpZmljYXRp\n" + "b24gU2VydmljZXMgRGl2aXNpb24xITAfBgNVBAMTGFRoYXd0ZSBQcmVtaXVtIFNl\n" + "cnZlciBDQTEoMCYGCSqGSIb3DQEJARYZcHJlbWl1bS1zZXJ2ZXJAdGhhd3RlLmNv\n" + "bTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA0jY2aovXwlue2oFBYo847kkE\n" + "VdbQ7xwblRZH7xhINTpS9CtqBo87L+pW46+GjZ4X9560ZXUCTe/LCaIhUdib0GfQ\n" + "ug2SBhRz1JPLlyoAnFxODLz6FVL88kRu2hFKbgifLy3j+ao6hnO2RlNYyIkFvYMR\n" + "uHM/qgeN9EJN50CdHDcCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG\n" + "9w0BAQQFAAOBgQAmSCwWwlj66BZ0DKqqX1Q/8tfJeGBeXm43YyJ3Nn6yF8Q0ufUI\n" + "hfzJATj/Tb7yFkJD57taRvvBxhEf8UqwKEbJw8RCfbz6q1lu1bdRiBHjpIUZa4JM\n" + "pAwSremkrj/xw0llmozFyD4lt5SZu5IycQfwhl7tUCemDaYj+bvLpgcUQg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Equifax Secure CA", "ME4xCzAJBgNVBAYTAlVTMRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3Vy" + "ZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHk=", "-----BEGIN CERTIFICATE-----\n" + "MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV\n" + "UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy\n" + "dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1\n" + "MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx\n" + "dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B\n" + "AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f\n" + "BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A\n" + "cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC\n" + "AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ\n" + "MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm\n" + "aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw\n" + "ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj\n" + "IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF\n" + "MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA\n" + "A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y\n" + "7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh\n" + "1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("ABAecom (sub., Am. Bankers Assn.) Root CA", "MIGJMQswCQYDVQQGEwJVUzELMAkGA1UECBMCREMxEzARBgNVBAcTCldhc2hpbmd0b24xFzAVBgNV" + "BAoTDkFCQS5FQ09NLCBJTkMuMRkwFwYDVQQDExBBQkEuRUNPTSBSb290IENBMSQwIgYJKoZIhvcN" + "AQkBFhVhZG1pbkBkaWdzaWd0cnVzdC5jb20=", "-----BEGIN CERTIFICATE-----\n" + "MIIDtTCCAp2gAwIBAgIRANAeQJAAAEZSAAAAAQAAAAQwDQYJKoZIhvcNAQEFBQAw\n" + "gYkxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJEQzETMBEGA1UEBxMKV2FzaGluZ3Rv\n" + "bjEXMBUGA1UEChMOQUJBLkVDT00sIElOQy4xGTAXBgNVBAMTEEFCQS5FQ09NIFJv\n" + "b3QgQ0ExJDAiBgkqhkiG9w0BCQEWFWFkbWluQGRpZ3NpZ3RydXN0LmNvbTAeFw05\n" + "OTA3MTIxNzMzNTNaFw0wOTA3MDkxNzMzNTNaMIGJMQswCQYDVQQGEwJVUzELMAkG\n" + "A1UECBMCREMxEzARBgNVBAcTCldhc2hpbmd0b24xFzAVBgNVBAoTDkFCQS5FQ09N\n" + "LCBJTkMuMRkwFwYDVQQDExBBQkEuRUNPTSBSb290IENBMSQwIgYJKoZIhvcNAQkB\n" + "FhVhZG1pbkBkaWdzaWd0cnVzdC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw\n" + "ggEKAoIBAQCx0xHgeVVDBwhMywVCAOINg0Y95JO6tgbTDVm9PsHOQ2cBiiGo77zM\n" + "0KLMsFWWU4RmBQDaREmA2FQKpSWGlO1jVv9wbKOhGdJ4vmgqRF4vz8wYXke8OrFG\n" + "PR7wuSw0X4x8TAgpnUBV6zx9g9618PeKgw6hTLQ6pbNfWiKX7BmbwQVo/ea3qZGU\n" + "LOR4SCQaJRk665WcOQqKz0Ky8BzVX/tr7WhWezkscjiw7pOp03t3POtxA6k4ShZs\n" + "iSrK2jMTecJVjO2cu/LLWxD4LmE1xilMKtAqY9FlWbT4zfn0AIS2V0KFnTKo+SpU\n" + "+/94Qby9cSj0u5C8/5Y0BONFnqFGKECBAgMBAAGjFjAUMBIGA1UdEwEB/wQIMAYB\n" + "Af8CAQgwDQYJKoZIhvcNAQEFBQADggEBAARvJYbk5pYntNlCwNDJALF/VD6Hsm0k\n" + "qS8Kfv2kRLD4VAe9G52dyntQJHsRW0mjpr8SdNWJt7cvmGQlFLdh6X9ggGvTZOir\n" + "vRrWUfrAtF13Gn9kCF55xgVM8XrdTX3O5kh7VNJhkoHWG9YA8A6eKHegTYjHInYZ\n" + "w8eeG6Z3ePhfm1bR8PIXrI6dWeYf/le22V7hXZ9F7GFoGUHhsiAm/lowdiT/QHI8\n" + "eZ98IkirRs3bs4Ysj78FQdPB4xTjQRcm0HyncUwZ6EoPclgxfexgeqMiKL0ZJGA/\n" + "O4dzwGvky663qyVDslUte6sGDnVdNOVdc22esnVApVnJTzFxiNmIf1Q=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Digital Signature Trust Co. Global CA 1", "MEYxCzAJBgNVBAYTAlVTMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xETAP" + "BgNVBAsTCERTVENBIEUx", "-----BEGIN CERTIFICATE-----\n" + "MIIDKTCCApKgAwIBAgIENnAVljANBgkqhkiG9w0BAQUFADBGMQswCQYDVQQGEwJV\n" + "UzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMREwDwYDVQQL\n" + "EwhEU1RDQSBFMTAeFw05ODEyMTAxODEwMjNaFw0xODEyMTAxODQwMjNaMEYxCzAJ\n" + "BgNVBAYTAlVTMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4x\n" + "ETAPBgNVBAsTCERTVENBIEUxMIGdMA0GCSqGSIb3DQEBAQUAA4GLADCBhwKBgQCg\n" + "bIGpzzQeJN3+hijM3oMv+V7UQtLodGBmE5gGHKlREmlvMVW5SXIACH7TpWJENySZ\n" + "j9mDSI+ZbZUTu0M7LklOiDfBu1h//uG9+LthzfNHwJmm8fOR6Hh8AMthyUQncWlV\n" + "Sn5JTe2io74CTADKAqjuAQIxZA9SLRN0dja1erQtcQIBA6OCASQwggEgMBEGCWCG\n" + "SAGG+EIBAQQEAwIABzBoBgNVHR8EYTBfMF2gW6BZpFcwVTELMAkGA1UEBhMCVVMx\n" + "JDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0IENvLjERMA8GA1UECxMI\n" + "RFNUQ0EgRTExDTALBgNVBAMTBENSTDEwKwYDVR0QBCQwIoAPMTk5ODEyMTAxODEw\n" + "MjNagQ8yMDE4MTIxMDE4MTAyM1owCwYDVR0PBAQDAgEGMB8GA1UdIwQYMBaAFGp5\n" + "fpFpRhgTCgJ3pVlbYJglDqL4MB0GA1UdDgQWBBRqeX6RaUYYEwoCd6VZW2CYJQ6i\n" + "+DAMBgNVHRMEBTADAQH/MBkGCSqGSIb2fQdBAAQMMAobBFY0LjADAgSQMA0GCSqG\n" + "SIb3DQEBBQUAA4GBACIS2Hod3IEGtgllsofIH160L+nEHvI8wbsEkBFKg05+k7lN\n" + "QseSJqBcNJo4cvj9axY+IO6CizEqkzaFI4iKPANo08kJD038bKTaKHKTDomAsH3+\n" + "gG9lbRgzl4vCa4nuYD3Im+9/KzJic5PLPON74nZ4RbyhkwS7hp86W0N6w4pl\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Digital Signature Trust Co. Global CA 3", "MEYxCzAJBgNVBAYTAlVTMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xETAP" + "BgNVBAsTCERTVENBIEUy", "-----BEGIN CERTIFICATE-----\n" + "MIIDKTCCApKgAwIBAgIENm7TzjANBgkqhkiG9w0BAQUFADBGMQswCQYDVQQGEwJV\n" + "UzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMREwDwYDVQQL\n" + "EwhEU1RDQSBFMjAeFw05ODEyMDkxOTE3MjZaFw0xODEyMDkxOTQ3MjZaMEYxCzAJ\n" + "BgNVBAYTAlVTMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4x\n" + "ETAPBgNVBAsTCERTVENBIEUyMIGdMA0GCSqGSIb3DQEBAQUAA4GLADCBhwKBgQC/\n" + "k48Xku8zExjrEH9OFr//Bo8qhbxe+SSmJIi2A7fBw18DW9Fvrn5C6mYjuGODVvso\n" + "LeE4i7TuqAHhzhy2iCoiRoX7n6dwqUcUP87eZfCocfdPJmyMvMa1795JJ/9IKn3o\n" + "TQPMx7JSxhcxEzu1TdvIxPbDDyQq2gyd55FbgM2UnQIBA6OCASQwggEgMBEGCWCG\n" + "SAGG+EIBAQQEAwIABzBoBgNVHR8EYTBfMF2gW6BZpFcwVTELMAkGA1UEBhMCVVMx\n" + "JDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0IENvLjERMA8GA1UECxMI\n" + "RFNUQ0EgRTIxDTALBgNVBAMTBENSTDEwKwYDVR0QBCQwIoAPMTk5ODEyMDkxOTE3\n" + "MjZagQ8yMDE4MTIwOTE5MTcyNlowCwYDVR0PBAQDAgEGMB8GA1UdIwQYMBaAFB6C\n" + "TShlgDzJQW6sNS5ay97u+DlbMB0GA1UdDgQWBBQegk0oZYA8yUFurDUuWsve7vg5\n" + "WzAMBgNVHRMEBTADAQH/MBkGCSqGSIb2fQdBAAQMMAobBFY0LjADAgSQMA0GCSqG\n" + "SIb3DQEBBQUAA4GBAEeNg61i8tuwnkUiBbmi1gMOOHLnnvx75pO2mqWilMg0HZHR\n" + "xdf0CiUPPXiBng+xZ8SQTGPdXqfiup/1902lMXucKS1M/mQ+7LZT/uqb7YLbdHVL\n" + "B3luHtgZg3Pe9T7Qtd7nS2h9Qy4qIOF+oHhEngj1mPnHfxsb1gYgAlihw6ID\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Digital Signature Trust Co. Global CA 2", "MIGpMQswCQYDVQQGEwJ1czENMAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkx" + "JDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0IENvLjERMA8GA1UECxMIRFNUQ0EgWDEx" + "FjAUBgNVBAMTDURTVCBSb290Q0EgWDExITAfBgkqhkiG9w0BCQEWEmNhQGRpZ3NpZ3RydXN0LmNv" + "bQ==", "-----BEGIN CERTIFICATE-----\n" + "MIID2DCCAsACEQDQHkCLAAACfAAAAAIAAAABMA0GCSqGSIb3DQEBBQUAMIGpMQsw\n" + "CQYDVQQGEwJ1czENMAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENp\n" + "dHkxJDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0IENvLjERMA8GA1UE\n" + "CxMIRFNUQ0EgWDExFjAUBgNVBAMTDURTVCBSb290Q0EgWDExITAfBgkqhkiG9w0B\n" + "CQEWEmNhQGRpZ3NpZ3RydXN0LmNvbTAeFw05ODEyMDExODE4NTVaFw0wODExMjgx\n" + "ODE4NTVaMIGpMQswCQYDVQQGEwJ1czENMAsGA1UECBMEVXRhaDEXMBUGA1UEBxMO\n" + "U2FsdCBMYWtlIENpdHkxJDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0\n" + "IENvLjERMA8GA1UECxMIRFNUQ0EgWDExFjAUBgNVBAMTDURTVCBSb290Q0EgWDEx\n" + "ITAfBgkqhkiG9w0BCQEWEmNhQGRpZ3NpZ3RydXN0LmNvbTCCASIwDQYJKoZIhvcN\n" + "AQEBBQADggEPADCCAQoCggEBANLGJrbnpT3BxGjVUG9TxW9JEwm4ryxIjRRqoxdf\n" + "WvnTLnUv2Chi0ZMv/E3Uq4flCMeZ55I/db3rJbQVwZsZPdJEjdd0IG03Ao9pk1uK\n" + "xBmd9LIO/BZsubEFkoPRhSxglD5FVaDZqwgh5mDoO3TymVBRaNADLbGAvqPYUrBE\n" + "zUNKcI5YhZXhTizWLUFv1oTnyJhEykfbLCSlaSbPa7gnYsP0yXqSI+0TZ4KuRS5F\n" + "5X5yP4WdlGIQ5jyRoa13AOAV7POEgHJ6jm5gl8ckWRA0g1vhpaRptlc1HHhZxtMv\n" + "OnNn7pTKBBMFYgZwI7P0fO5F2WQLW0mqpEPOJsREEmy43XkCAwEAATANBgkqhkiG\n" + "9w0BAQUFAAOCAQEAojeyP2n714Z5VEkxlTMr89EJFEliYIalsBHiUMIdBlc+Legz\n" + "ZL6bqq1fG03UmZWii5rJYnK1aerZWKs17RWiQ9a2vAd5ZWRzfdd5ynvVWlHG4VME\n" + "lo04z6MXrDlxawHDi1M8Y+nuecDkvpIyZHqzH5eUYr3qsiAVlfuX8ngvYzZAOONG\n" + "Dx3drJXK50uQe7FLqdTF65raqtWjlBRGjS0f8zrWkzr2Pnn86Oawde3uPclwx12q\n" + "gUtGJRzHbBXjlU4PqjI3lAoXJJIThFjSY28r9+ZbYgsTF7ANUkz+/m9c4pFuHf2k\n" + "Ytdo+o56T9II2pPc8JIRetDccpMMc5NihWjQ9A==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Digital Signature Trust Co. Global CA 4", "MIGpMQswCQYDVQQGEwJ1czENMAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkx" + "JDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0IENvLjERMA8GA1UECxMIRFNUQ0EgWDIx" + "FjAUBgNVBAMTDURTVCBSb290Q0EgWDIxITAfBgkqhkiG9w0BCQEWEmNhQGRpZ3NpZ3RydXN0LmNv" + "bQ==", "-----BEGIN CERTIFICATE-----\n" + "MIID2DCCAsACEQDQHkCLAAB3bQAAAAEAAAAEMA0GCSqGSIb3DQEBBQUAMIGpMQsw\n" + "CQYDVQQGEwJ1czENMAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENp\n" + "dHkxJDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0IENvLjERMA8GA1UE\n" + "CxMIRFNUQ0EgWDIxFjAUBgNVBAMTDURTVCBSb290Q0EgWDIxITAfBgkqhkiG9w0B\n" + "CQEWEmNhQGRpZ3NpZ3RydXN0LmNvbTAeFw05ODExMzAyMjQ2MTZaFw0wODExMjcy\n" + "MjQ2MTZaMIGpMQswCQYDVQQGEwJ1czENMAsGA1UECBMEVXRhaDEXMBUGA1UEBxMO\n" + "U2FsdCBMYWtlIENpdHkxJDAiBgNVBAoTG0RpZ2l0YWwgU2lnbmF0dXJlIFRydXN0\n" + "IENvLjERMA8GA1UECxMIRFNUQ0EgWDIxFjAUBgNVBAMTDURTVCBSb290Q0EgWDIx\n" + "ITAfBgkqhkiG9w0BCQEWEmNhQGRpZ3NpZ3RydXN0LmNvbTCCASIwDQYJKoZIhvcN\n" + "AQEBBQADggEPADCCAQoCggEBANx18IzAdZaawGIfJvfE4Zrq4FZzW5nNAUSoCLbV\n" + "p9oaBBg5kkp4o4HC9Xd6ULRw/5qrxsfKboNPQpj7Jgva3G3WqZlVUmfpKAOS3OWw\n" + "BZoPFflrWXJW8vo5/Kpo7g8fEIMv/J36F5bdguPmRX3AS4BEH+0s4IT9kVySVGkl\n" + "5WJp3OXuAFK9MwutdQKFp2RQLcUZGTDAJtvJ0/0uma1ZtQtN1EGuhUhDWdy3qOKi\n" + "3sOP17ihYqZoUFLkzzGnlIXan0YyF1bl8utmPRL/Q9uY73fPy4GNNLHGUEom0eQ+\n" + "QVCvbK4iNC7Va26Dunm4dmVI2gkpZGMiuftHdoWMhkTLCdsCAwEAATANBgkqhkiG\n" + "9w0BAQUFAAOCAQEAtTYOXeFhKFoRZcA/gwN5Tb4opgsHAlKFzfiR0BBstWogWxyQ\n" + "2TA8xkieil5k+aFxd+8EJx8H6+Qm93N0yUQYGmbT4EOvkTvRyyzYdFQ6HE3K1GjN\n" + "I3wdEJ5F6fYAbqbNGf9PLCmPV03Ed5K+4EwJ+11EhmYhqLkyolbV6YyDfFk/xPEL\n" + "553snr2cGA4+wjl5KLcDDQjLxufZATdQEOzMYRZA1K8xdHv8PzGn0EdzMzkbzE5q\n" + "10mDEQb+64JYMzJM8FasHpwvVpp7wUocpf1VNs78lk30sPDst2yC7S8xmUJMqbIN\n" + "uBVd8d+6ybVK1GSYsyapMMj9puyrliGtf8J4tg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 1 Public Primary Certification Authority", "MF8xCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3Mg" + "MSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIICPTCCAaYCEQDNun9W8N/kvFT+IqyzcqpVMA0GCSqGSIb3DQEBAgUAMF8xCzAJ\n" + "BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xh\n" + "c3MgMSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05\n" + "NjAxMjkwMDAwMDBaFw0yODA4MDEyMzU5NTlaMF8xCzAJBgNVBAYTAlVTMRcwFQYD\n" + "VQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3MgMSBQdWJsaWMgUHJp\n" + "bWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOB\n" + "jQAwgYkCgYEA5Rm/baNWYS2ZSHH2Z965jeu3noaACpEO+jglr0aIguVzqKCbJF0N\n" + "H8xlbgyw0FaEGIeaBpsQoXPftFg5a27B9hXVqKg/qhIGjTGsf7A01480Z4gJzRQR\n" + "4k5FVmkfeAKA2txHkSm7NsljXMXg1y2He6G3MrB7MLoqLzGq7qNn2tsCAwEAATAN\n" + "BgkqhkiG9w0BAQIFAAOBgQBMP7iLxmjf7kMzDl3ppssHhE16M/+SG/Q2rdiVIjZo\n" + "EWx8QszznC7EBz8UsA9P/5CSdvnivErpj82ggAr3xSnxgiJduLHdgSOjeyUVRjB5\n" + "FvjqBUuUfx3CHMjjt/QQQDwTw18fU+hI5Ia0e6E1sHslurjTjqs/OJ0ANACY89Fx\n" + "lA==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 2 Public Primary Certification Authority", "MF8xCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3Mg" + "MiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIICPDCCAaUCEC0b/EoXjaOR6+f/9YtFvgswDQYJKoZIhvcNAQECBQAwXzELMAkG\n" + "A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz\n" + "cyAyIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2\n" + "MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV\n" + "BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAyIFB1YmxpYyBQcmlt\n" + "YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN\n" + "ADCBiQKBgQC2WoujDWojg4BrzzmH9CETMwZMJaLtVRKXxaeAufqDwSCg+i8VDXyh\n" + "YGt+eSz6Bg86rvYbb7HS/y8oUl+DfUvEerf4Zh+AVPy3wo5ZShRXRtGak75BkQO7\n" + "FYCTXOvnzAhsPz6zSvz/S2wj1VCCJkQZjiPDceoZJEcEnnW/yKYAHwIDAQABMA0G\n" + "CSqGSIb3DQEBAgUAA4GBAIobK/o5wXTXXtgZZKJYSi034DNHD6zt96rbHuSLBlxg\n" + "J8pFUs4W7z8GZOeUaHxgMxURaa+dYo2jA1Rrpr7l7gUYYAS/QoD90KioHgE796Nc\n" + "r6Pc5iaAIzy4RHT3Cq5Ji2F4zCS/iIqnDupzGUH9TQPwiNHleI2lKk/2lw0Xd8rY\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 3 Public Primary Certification Authority", "MF8xCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3Mg" + "MyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIICPDCCAaUCEHC65B0Q2Sk0tjjKewPMur8wDQYJKoZIhvcNAQECBQAwXzELMAkG\n" + "A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz\n" + "cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2\n" + "MDEyOTAwMDAwMFoXDTI4MDgwMTIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV\n" + "BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt\n" + "YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN\n" + "ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE\n" + "BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is\n" + "I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G\n" + "CSqGSIb3DQEBAgUAA4GBALtMEivPLCYATxQT3ab7/AoRhIzzKBxnki98tsX63/Do\n" + "lbwdj2wsqFHMc9ikwFPwTtYmwHYBV4GSXiHx0bH/59AhWM1pF+NEHJwZRDmJXNyc\n" + "AA9WjQKZ7aKQRUzkuxCkPfAyAw7xzvjoyVGM5mKf5p/AfbdynMk2OmufTqj/ZA1k\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 1 Public Primary Certification Authority - G2", "MIHBMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNz" + "IDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx" + "KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTEfMB0GA1UE" + "CxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yaw==", "-----BEGIN CERTIFICATE-----\n" + "MIIDAjCCAmsCEEzH6qqYPnHTkxD4PTqJkZIwDQYJKoZIhvcNAQEFBQAwgcExCzAJ\n" + "BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh\n" + "c3MgMSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy\n" + "MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp\n" + "emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X\n" + "DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw\n" + "FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMSBQdWJsaWMg\n" + "UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo\n" + "YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5\n" + "MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB\n" + "AQUAA4GNADCBiQKBgQCq0Lq+Fi24g9TK0g+8djHKlNgdk4xWArzZbxpvUjZudVYK\n" + "VdPfQ4chEWWKfo+9Id5rMj8bhDSVBZ1BNeuS65bdqlk/AVNtmU/t5eIqWpDBucSm\n" + "Fc/IReumXY6cPvBkJHalzasab7bYe1FhbqZ/h8jit+U03EGI6glAvnOSPWvndQID\n" + "AQABMA0GCSqGSIb3DQEBBQUAA4GBAKlPww3HZ74sy9mozS11534Vnjty637rXC0J\n" + "h9ZrbWB85a7FkCMMXErQr7Fd88e2CtvgFZMN3QO8x3aKtd1Pw5sTdbgBwObJW2ul\n" + "uIncrKTdcu1OofdPvAbT6shkdHvClUGcZXNY8ZCaPGqxmMnEh7zPRW1F4m4iP/68\n" + "DzFc6PLZ\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 2 Public Primary Certification Authority - G2", "MIHBMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNz" + "IDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx" + "KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTEfMB0GA1UE" + "CxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yaw==", "-----BEGIN CERTIFICATE-----\n" + "MIIDAzCCAmwCEQC5L2DMiJ+hekYJuFtwbIqvMA0GCSqGSIb3DQEBBQUAMIHBMQsw\n" + "CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0Ns\n" + "YXNzIDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH\n" + "MjE6MDgGA1UECxMxKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9y\n" + "aXplZCB1c2Ugb25seTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazAe\n" + "Fw05ODA1MTgwMDAwMDBaFw0yODA4MDEyMzU5NTlaMIHBMQswCQYDVQQGEwJVUzEX\n" + "MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNzIDIgUHVibGlj\n" + "IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx\n" + "KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s\n" + "eTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazCBnzANBgkqhkiG9w0B\n" + "AQEFAAOBjQAwgYkCgYEAp4gBIXQs5xoD8JjhlzwPIQjxnNuX6Zr8wgQGE75fUsjM\n" + "HiwSViy4AWkszJkfrbCWrnkE8hM5wXuYuggs6MKEEyyqaekJ9MepAqRCwiNPStjw\n" + "DqL7MWzJ5m+ZJwf15vRMeJ5t60aG+rmGyVTyssSv1EYcWskVMP8NbPUtDm3Of3cC\n" + "AwEAATANBgkqhkiG9w0BAQUFAAOBgQByLvl/0fFx+8Se9sVeUYpAmLho+Jscg9ji\n" + "nb3/7aHmZuovCfTK1+qlK5X2JGCGTUQug6XELaDTrnhpb3LabK4I8GOSN+a7xDAX\n" + "rXfMSTWqz9iP0b63GJZHc2pUIjRkLbYWm1lbtFFZOrMLFPQS32eg9K0yZF6xRnIn\n" + "jBJ7xUS0rg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 3 Public Primary Certification Authority - G2", "MIHBMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNz" + "IDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx" + "KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTEfMB0GA1UE" + "CxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yaw==", "-----BEGIN CERTIFICATE-----\n" + "MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ\n" + "BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh\n" + "c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy\n" + "MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp\n" + "emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X\n" + "DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw\n" + "FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg\n" + "UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo\n" + "YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5\n" + "MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB\n" + "AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4\n" + "pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0\n" + "13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID\n" + "AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk\n" + "U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i\n" + "F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY\n" + "oJ2daZH9\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 4 Public Primary Certification Authority - G2", "MIHBMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNz" + "IDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx" + "KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTEfMB0GA1UE" + "CxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yaw==", "-----BEGIN CERTIFICATE-----\n" + "MIIDAjCCAmsCEDKIjprS9esTR/h/xCA3JfgwDQYJKoZIhvcNAQEFBQAwgcExCzAJ\n" + "BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh\n" + "c3MgNCBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy\n" + "MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp\n" + "emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X\n" + "DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw\n" + "FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgNCBQdWJsaWMg\n" + "UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo\n" + "YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5\n" + "MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB\n" + "AQUAA4GNADCBiQKBgQC68OTP+cSuhVS5B1f5j8V/aBH4xBewRNzjMHPVKmIquNDM\n" + "HO0oW369atyzkSTKQWI8/AIBvxwWMZQFl3Zuoq29YRdsTjCG8FE3KlDHqGKB3FtK\n" + "qsGgtG7rL+VXxbErQHDbWk2hjh+9Ax/YA9SPTJlxvOKCzFjomDqG04Y48wApHwID\n" + "AQABMA0GCSqGSIb3DQEBBQUAA4GBAIWMEsGnuVAVess+rLhDityq3RS6iYF+ATwj\n" + "cSGIL4LcY/oCRaxFWdcqWERbt5+BO5JoPeI3JPV7bI92NZYJqFmduc4jq3TWg/0y\n" + "cyfYaT5DdPauxYma51N86Xv2S/PBZYPejYqcPIiNOVn8qj8ijaHBZlCBckztImRP\n" + "T8qAkbYp\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GlobalSign Root CA", "MFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9iYWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290" + "IENBMRswGQYDVQQDExJHbG9iYWxTaWduIFJvb3QgQ0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIDdTCCAl2gAwIBAgILAgAAAAAA1ni3lAUwDQYJKoZIhvcNAQEEBQAwVzELMAkG\n" + "A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv\n" + "b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw\n" + "MDBaFw0xNDAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i\n" + "YWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT\n" + "aWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ\n" + "jc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp\n" + "xy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp\n" + "1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG\n" + "snUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ\n" + "U26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8\n" + "9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIABjAdBgNVHQ4EFgQU\n" + "YHtmGkUNl8qJUC99BM00qP/8/UswDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0B\n" + "AQQFAAOCAQEArqqf/LfSyx9fOSkoGJ40yWxPbxrwZKJwSk8ThptgKJ7ogUmYfQq7\n" + "5bCdPTbbjwVR/wkxKh/diXeeDy5slQTthsu0AD+EAk2AaioteAuubyuig0SDH81Q\n" + "gkwkr733pbTIWg/050deSY43lv6aiAU62cDbKYfmGZZHpzqmjIs8d/5GY6dT2iHR\n" + "rH5Jokvmw2dZL7OKDrssvamqQnw1wdh/1acxOk5jQzmvCLBhNIzTmKlDNPYPhyk7\n" + "ncJWWJh3w/cbrPad+D6qp1RF8PX51TFl/mtYnHGzHtdS6jIX/EBgHcl5JLL2bP2o\n" + "Zg6C3ZjL2sJETy6ge/L3ayx2EYRGinij4w==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GlobalSign Root CA - R2", "MEwxIDAeBgNVBAsTF0dsb2JhbFNpZ24gUm9vdCBDQSAtIFIyMRMwEQYDVQQKEwpHbG9iYWxTaWdu" + "MRMwEQYDVQQDEwpHbG9iYWxTaWdu", "-----BEGIN CERTIFICATE-----\n" + "MIIDujCCAqKgAwIBAgILBAAAAAABD4Ym5g0wDQYJKoZIhvcNAQEFBQAwTDEgMB4G\n" + "A1UECxMXR2xvYmFsU2lnbiBSb290IENBIC0gUjIxEzARBgNVBAoTCkdsb2JhbFNp\n" + "Z24xEzARBgNVBAMTCkdsb2JhbFNpZ24wHhcNMDYxMjE1MDgwMDAwWhcNMjExMjE1\n" + "MDgwMDAwWjBMMSAwHgYDVQQLExdHbG9iYWxTaWduIFJvb3QgQ0EgLSBSMjETMBEG\n" + "A1UEChMKR2xvYmFsU2lnbjETMBEGA1UEAxMKR2xvYmFsU2lnbjCCASIwDQYJKoZI\n" + "hvcNAQEBBQADggEPADCCAQoCggEBAKbPJA6+Lm8omUVCxKs+IVSbC9N/hHD6ErPL\n" + "v4dfxn+G07IwXNb9rfF73OX4YJYJkhD10FPe+3t+c4isUoh7SqbKSaZeqKeMWhG8\n" + "eoLrvozps6yWJQeXSpkqBy+0Hne/ig+1AnwblrjFuTosvNYSuetZfeLQBoZfXklq\n" + "tTleiDTsvHgMCJiEbKjNS7SgfQx5TfC4LcshytVsW33hoCmEofnTlEnLJGKRILzd\n" + "C9XZzPnqJworc5HGnRusyMvo4KD0L5CLTfuwNhv2GXqF4G3yYROIXJ/gkwpRl4pa\n" + "zq+r1feqCapgvdzZX99yqWATXgAByUr6P6TqBwMhAo6CygPCm48CAwEAAaOBnDCB\n" + "mTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUm+IH\n" + "V2ccHsBqBt5ZtJot39wZhi4wNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2NybC5n\n" + "bG9iYWxzaWduLm5ldC9yb290LXIyLmNybDAfBgNVHSMEGDAWgBSb4gdXZxwewGoG\n" + "3lm0mi3f3BmGLjANBgkqhkiG9w0BAQUFAAOCAQEAmYFThxxol4aR7OBKuEQLq4Gs\n" + "J0/WwbgcQ3izDJr86iw8bmEbTUsp9Z8FHSbBuOmDAGJFtqkIk7mpM0sYmsL4h4hO\n" + "291xNBrBVNpGP+DTKqttVCL1OmLNIG+6KYnX3ZHu01yiPqFbQfXf5WRDLenVOavS\n" + "ot+3i9DAgBkcRcAtjOj4LaR0VknFBbVPFd5uRHg5h6h+u/N5GJG79G+dwfCMNYxd\n" + "AfvDbbnvRG15RjF+Cv6pgsH/76tuIMRQyV+dTZsXjAzlAcmgQWpzU/qlULRuJQ/7\n" + "TBj0/VLZjmmx6BEP3ojY+x1J96relc8geMJgEtslQIxq/H5COEBkEveegeGTLg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("ValiCert Class 1 VA", "MIG7MSQwIgYDVQQHExtWYWxpQ2VydCBWYWxpZGF0aW9uIE5ldHdvcmsxFzAVBgNVBAoTDlZhbGlD" + "ZXJ0LCBJbmMuMTUwMwYDVQQLEyxWYWxpQ2VydCBDbGFzcyAxIFBvbGljeSBWYWxpZGF0aW9uIEF1" + "dGhvcml0eTEhMB8GA1UEAxMYaHR0cDovL3d3dy52YWxpY2VydC5jb20vMSAwHgYJKoZIhvcNAQkB" + "FhFpbmZvQHZhbGljZXJ0LmNvbQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0\n" + "IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz\n" + "BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDEgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y\n" + "aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG\n" + "9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNTIyMjM0OFoXDTE5MDYy\n" + "NTIyMjM0OFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y\n" + "azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs\n" + "YXNzIDEgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw\n" + "Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl\n" + "cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDYWYJ6ibiWuqYvaG9Y\n" + "LqdUHAZu9OqNSLwxlBfw8068srg1knaw0KWlAdcAAxIiGQj4/xEjm84H9b9pGib+\n" + "TunRf50sQB1ZaG6m+FiwnRqP0z/x3BkGgagO4DrdyFNFCQbmD3DD+kCmDuJWBQ8Y\n" + "TfwggtFzVXSNdnKgHZ0dwN0/cQIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFBoPUn0\n" + "LBwGlN+VYH+Wexf+T3GtZMjdd9LvWVXoP+iOBSoh8gfStadS/pyxtuJbdxdA6nLW\n" + "I8sogTLDAHkY7FkXicnGah5xyf23dKUlRWnFSKsZ4UWKJWsZ7uW7EvV/96aNUcPw\n" + "nXS3qT6gpf+2SQMT2iLM7XGCK5nPOrf1LXLI\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("ValiCert Class 2 VA", "MIG7MSQwIgYDVQQHExtWYWxpQ2VydCBWYWxpZGF0aW9uIE5ldHdvcmsxFzAVBgNVBAoTDlZhbGlD" + "ZXJ0LCBJbmMuMTUwMwYDVQQLEyxWYWxpQ2VydCBDbGFzcyAyIFBvbGljeSBWYWxpZGF0aW9uIEF1" + "dGhvcml0eTEhMB8GA1UEAxMYaHR0cDovL3d3dy52YWxpY2VydC5jb20vMSAwHgYJKoZIhvcNAQkB" + "FhFpbmZvQHZhbGljZXJ0LmNvbQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0\n" + "IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz\n" + "BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y\n" + "aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG\n" + "9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE5MDYy\n" + "NjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y\n" + "azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs\n" + "YXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw\n" + "Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl\n" + "cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5avIWZJV16vY\n" + "dA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zfN1SLUzm1NZ9\n" + "WlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwbP7RfZHM047QS\n" + "v4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQUAA4GBADt/UG9v\n" + "UJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQC1u+mNr0HZDzTu\n" + "IYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMMj4QssxsodyamEwC\n" + "W/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("RSA Root Certificate 1", "MIG7MSQwIgYDVQQHExtWYWxpQ2VydCBWYWxpZGF0aW9uIE5ldHdvcmsxFzAVBgNVBAoTDlZhbGlD" + "ZXJ0LCBJbmMuMTUwMwYDVQQLEyxWYWxpQ2VydCBDbGFzcyAzIFBvbGljeSBWYWxpZGF0aW9uIEF1" + "dGhvcml0eTEhMB8GA1UEAxMYaHR0cDovL3d3dy52YWxpY2VydC5jb20vMSAwHgYJKoZIhvcNAQkB" + "FhFpbmZvQHZhbGljZXJ0LmNvbQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0\n" + "IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAz\n" + "BgNVBAsTLFZhbGlDZXJ0IENsYXNzIDMgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9y\n" + "aXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG\n" + "9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMjIzM1oXDTE5MDYy\n" + "NjAwMjIzM1owgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29y\n" + "azEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENs\n" + "YXNzIDMgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRw\n" + "Oi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNl\n" + "cnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDjmFGWHOjVsQaBalfD\n" + "cnWTq8+epvzzFlLWLU2fNUSoLgRNB0mKOCn1dzfnt6td3zZxFJmP3MKS8edgkpfs\n" + "2Ejcv8ECIMYkpChMMFp2bbFc893enhBxoYjHW5tBbcqwuI4V7q0zK89HBFx1cQqY\n" + "JJgpp0lZpd34t0NiYfPT4tBVPwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAFa7AliE\n" + "Zwgs3x/be0kz9dNnnfS0ChCzycUs4pJqcXgn8nCDQtM+z6lU9PHYkhaM0QTLS6vJ\n" + "n0WuPIqpsHEzXcjFV9+vqDWzf4mH6eglkrh/hXqu1rweN1gqZ8mRzyqBPu3GOd/A\n" + "PhmcGcwTTYJBtYze4D1gCCAPRX5ron+jjBXu\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 1 Public Primary Certification Authority - G3", "MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJbmMuIC0gRm9y" + "IGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDEgUHVibGljIFBy" + "aW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMw==", "-----BEGIN CERTIFICATE-----\n" + "MIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw\n" + "CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl\n" + "cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu\n" + "LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT\n" + "aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\n" + "dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD\n" + "VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT\n" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ\n" + "bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu\n" + "IENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\n" + "LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4\n" + "nN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO\n" + "8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV\n" + "ojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb\n" + "PG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2\n" + "6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr\n" + "n5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a\n" + "qtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4\n" + "wTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3\n" + "ns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs\n" + "pSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4\n" + "E1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 2 Public Primary Certification Authority - G3", "MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJbmMuIC0gRm9y" + "IGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDIgUHVibGljIFBy" + "aW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMw==", "-----BEGIN CERTIFICATE-----\n" + "MIIEGTCCAwECEGFwy0mMX5hFKeewptlQW3owDQYJKoZIhvcNAQEFBQAwgcoxCzAJ\n" + "BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVy\n" + "aVNpZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24s\n" + "IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNp\n" + "Z24gQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\n" + "eSAtIEczMB4XDTk5MTAwMTAwMDAwMFoXDTM2MDcxNjIzNTk1OVowgcoxCzAJBgNV\n" + "BAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNp\n" + "Z24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24sIElu\n" + "Yy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNpZ24g\n" + "Q2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAt\n" + "IEczMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArwoNwtUs22e5LeWU\n" + "J92lvuCwTY+zYVY81nzD9M0+hsuiiOLh2KRpxbXiv8GmR1BeRjmL1Za6tW8UvxDO\n" + "JxOeBUebMXoT2B/Z0wI3i60sR/COgQanDTAM6/c8DyAd3HJG7qUCyFvDyVZpTMUY\n" + "wZF7C9UTAJu878NIPkZgIIUq1ZC2zYugzDLdt/1AVbJQHFauzI13TccgTacxdu9o\n" + "koqQHgiBVrKtaaNS0MscxCM9H5n+TOgWY47GCI72MfbS+uV23bUckqNJzc0BzWjN\n" + "qWm6o+sdDZykIKbBoMXRRkwXbdKsZj+WjOCE1Db/IlnF+RFgqF8EffIa9iVCYQ/E\n" + "Srg+iQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQA0JhU8wI1NQ0kdvekhktdmnLfe\n" + "xbjQ5F1fdiLAJvmEOjr5jLX77GDx6M4EsMjdpwOPMPOY36TmpDHf0xwLRtxyID+u\n" + "7gU8pDM/CzmscHhzS5kr3zDCVLCoO1Wh/hYozUK9dG6A2ydEp85EXdQbkJgNHkKU\n" + "sQAsBNB0owIFImNjzYO1+8FtYmtpdf1dcEG59b98377BMnMiIYtYgXsVkXq642RI\n" + "sH/7NiXaldDxJBQX3RiAa0YjOVT1jmIJBB2UkKab5iXiQkWquJCtvgiPqQtCGJTP\n" + "cjnhsUPgKM+351psE2tJs//jGHyJizNdrDPXp/naOlXJWBD5qu9ats9LS98q\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 3 Public Primary Certification Authority - G3", "MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJbmMuIC0gRm9y" + "IGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDMgUHVibGljIFBy" + "aW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMw==", "-----BEGIN CERTIFICATE-----\n" + "MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw\n" + "CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl\n" + "cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu\n" + "LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT\n" + "aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\n" + "dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD\n" + "VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT\n" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ\n" + "bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu\n" + "IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\n" + "LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b\n" + "N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t\n" + "KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu\n" + "kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm\n" + "CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ\n" + "Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu\n" + "imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te\n" + "2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe\n" + "DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC\n" + "/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p\n" + "F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt\n" + "TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Class 4 Public Primary Certification Authority - G3", "MIHKMQswCQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJbmMuIC0gRm9y" + "IGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWduIENsYXNzIDQgUHVibGljIFBy" + "aW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMw==", "-----BEGIN CERTIFICATE-----\n" + "MIIEGjCCAwICEQDsoKeLbnVqAc/EfMwvlF7XMA0GCSqGSIb3DQEBBQUAMIHKMQsw\n" + "CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl\n" + "cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu\n" + "LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT\n" + "aWduIENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\n" + "dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD\n" + "VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT\n" + "aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ\n" + "bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu\n" + "IENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg\n" + "LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK3LpRFpxlmr8Y+1\n" + "GQ9Wzsy1HyDkniYlS+BzZYlZ3tCD5PUPtbut8XzoIfzk6AzufEUiGXaStBO3IFsJ\n" + "+mGuqPKljYXCKtbeZjbSmwL0qJJgfJxptI8kHtCGUvYynEFYHiK9zUVilQhu0Gbd\n" + "U6LM8BDcVHOLBKFGMzNcF0C5nk3T875Vg+ixiY5afJqWIpA7iCXy0lOIAgwLePLm\n" + "NxdLMEYH5IBtptiWLugs+BGzOA1mppvqySNb247i8xOOGlktqgLw7KSHZtzBP/XY\n" + "ufTsgsbSPZUd5cBPhMnZo0QoBmrXRazwa2rvTl/4EYIeOGM0ZlDUPpNz+jDDZq3/\n" + "ky2X7wMCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAj/ola09b5KROJ1WrIhVZPMq1\n" + "CtRK26vdoV9TxaBXOcLORyu+OshWv8LZJxA6sQU8wHcxuzrTBXttmhwwjIDLk5Mq\n" + "g6sFUYICABFna/OIYUdfA5PVWw3g8dShMjWFsjrbsIKr0csKvE+MW8VLADsfKoKm\n" + "fjaF3H48ZwC15DtS4KjrXRX5xm3wrR0OhbepmnMUWluPQSjA1egtTaRezarZ7c7c\n" + "2NU8Qh0XwRJdRTjDOPP8hS6DRkiy1yBfkjaP53kPmF6Z6PDQpLv1U70qzlmwr25/\n" + "bLvSHgCwIe34QWKCudiyxLtGUPMxxY8BqHTr9Xgn2uf3ZkPznoM+IKrDNWCRzg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Entrust.net Secure Server CA", "MIHDMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRy" + "dXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykg" + "MTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2Vy" + "dmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5", "-----BEGIN CERTIFICATE-----\n" + "MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC\n" + "VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u\n" + "ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc\n" + "KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u\n" + "ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1\n" + "MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE\n" + "ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j\n" + "b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF\n" + "bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg\n" + "U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA\n" + "A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/\n" + "I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3\n" + "wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC\n" + "AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb\n" + "oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5\n" + "BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p\n" + "dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk\n" + "MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp\n" + "b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu\n" + "dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0\n" + "MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi\n" + "E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa\n" + "MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI\n" + "hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN\n" + "95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd\n" + "2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Entrust.net Secure Personal CA", "MIHJMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxSDBGBgNVBAsUP3d3dy5lbnRy" + "dXN0Lm5ldC9DbGllbnRfQ0FfSW5mby9DUFMgaW5jb3JwLiBieSByZWYuIGxpbWl0cyBsaWFiLjEl" + "MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5u" + "ZXQgQ2xpZW50IENlcnRpZmljYXRpb24gQXV0aG9yaXR5", "-----BEGIN CERTIFICATE-----\n" + "MIIE7TCCBFagAwIBAgIEOAOR7jANBgkqhkiG9w0BAQQFADCByTELMAkGA1UEBhMC\n" + "VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MUgwRgYDVQQLFD93d3cuZW50cnVzdC5u\n" + "ZXQvQ2xpZW50X0NBX0luZm8vQ1BTIGluY29ycC4gYnkgcmVmLiBsaW1pdHMgbGlh\n" + "Yi4xJTAjBgNVBAsTHChjKSAxOTk5IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNV\n" + "BAMTKkVudHJ1c3QubmV0IENsaWVudCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe\n" + "Fw05OTEwMTIxOTI0MzBaFw0xOTEwMTIxOTU0MzBaMIHJMQswCQYDVQQGEwJVUzEU\n" + "MBIGA1UEChMLRW50cnVzdC5uZXQxSDBGBgNVBAsUP3d3dy5lbnRydXN0Lm5ldC9D\n" + "bGllbnRfQ0FfSW5mby9DUFMgaW5jb3JwLiBieSByZWYuIGxpbWl0cyBsaWFiLjEl\n" + "MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMq\n" + "RW50cnVzdC5uZXQgQ2xpZW50IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0G\n" + "CSqGSIb3DQEBAQUAA4GLADCBhwKBgQDIOpleMRffrCdvkHvkGf9FozTC28GoT/Bo\n" + "6oT9n3V5z8GKUZSvx1cDR2SerYIbWtp/N3hHuzeYEpbOxhN979IMMFGpOZ5V+Pux\n" + "5zDeg7K6PvHViTs7hbqqdCz+PzFur5GVbgbUB01LLFZHGARS2g4Qk79jkJvh34zm\n" + "AqTmT173iwIBA6OCAeAwggHcMBEGCWCGSAGG+EIBAQQEAwIABzCCASIGA1UdHwSC\n" + "ARkwggEVMIHkoIHhoIHepIHbMIHYMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50\n" + "cnVzdC5uZXQxSDBGBgNVBAsUP3d3dy5lbnRydXN0Lm5ldC9DbGllbnRfQ0FfSW5m\n" + "by9DUFMgaW5jb3JwLiBieSByZWYuIGxpbWl0cyBsaWFiLjElMCMGA1UECxMcKGMp\n" + "IDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5uZXQg\n" + "Q2xpZW50IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCyg\n" + "KqAohiZodHRwOi8vd3d3LmVudHJ1c3QubmV0L0NSTC9DbGllbnQxLmNybDArBgNV\n" + "HRAEJDAigA8xOTk5MTAxMjE5MjQzMFqBDzIwMTkxMDEyMTkyNDMwWjALBgNVHQ8E\n" + "BAMCAQYwHwYDVR0jBBgwFoAUxPucKXuXzUyW/O5bs8qZdIuV6kwwHQYDVR0OBBYE\n" + "FMT7nCl7l81MlvzuW7PKmXSLlepMMAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EA\n" + "BAwwChsEVjQuMAMCBJAwDQYJKoZIhvcNAQEEBQADgYEAP66K8ddmAwWePvrqHEa7\n" + "pFuPeJoSSJn59DXeDDYHAmsQOokUgZwxpnyyQbJq5wcBoUv5nyU7lsqZwz6hURzz\n" + "wy5E97BnRqqS5TvaHBkUODDV4qIxJS7x7EU47fgGWANzYrAQMY9Av2TgXD7FTx/a\n" + "EkP/TOYGJqibGapEPHayXOw=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Entrust.net Premium 2048 Secure Server CA", "MIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3LmVudHJ1c3QubmV0L0NQU18y" + "MDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMcKGMpIDE5OTkgRW50" + "cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5uZXQgQ2VydGlmaWNhdGlvbiBBdXRo" + "b3JpdHkgKDIwNDgp", "-----BEGIN CERTIFICATE-----\n" + "MIIEXDCCA0SgAwIBAgIEOGO5ZjANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChML\n" + "RW50cnVzdC5uZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBp\n" + "bmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5\n" + "IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNVBAMTKkVudHJ1c3QubmV0IENlcnRp\n" + "ZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQxNzUwNTFaFw0xOTEy\n" + "MjQxODIwNTFaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3\n" + "LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxp\n" + "YWIuKTElMCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEG\n" + "A1UEAxMqRW50cnVzdC5uZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgp\n" + "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArU1LqRKGsuqjIAcVFmQq\n" + "K0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOLGp18EzoOH1u3Hs/lJBQe\n" + "sYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSrhRSGlVuX\n" + "MlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVT\n" + "XTzWnLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/\n" + "HoZdenoVve8AjhUiVBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH\n" + "4QIDAQABo3QwcjARBglghkgBhvhCAQEEBAMCAAcwHwYDVR0jBBgwFoAUVeSB0RGA\n" + "vtiJuQijMfmhJAkWuXAwHQYDVR0OBBYEFFXkgdERgL7YibkIozH5oSQJFrlwMB0G\n" + "CSqGSIb2fQdBAAQQMA4bCFY1LjA6NC4wAwIEkDANBgkqhkiG9w0BAQUFAAOCAQEA\n" + "WUesIYSKF8mciVMeuoCFGsY8Tj6xnLZ8xpJdGGQC49MGCBFhfGPjK50xA3B20qMo\n" + "oPS7mmNz7W3lKtvtFKkrxjYR0CvrB4ul2p5cGZ1WEvVUKcgF7bISKo30Axv/55IQ\n" + "h7A6tcOdBTcSo8f0FbnVpDkWm1M6I5HxqIKiaohowXkCIryqptau37AUX7iH0N18\n" + "f3v/rxzP5tsHrV7bhZ3QKw0z2wTR5klAEyt2+z7pnIkPFc4YsIV4IU9rTw76NmfN\n" + "B/L/CNDi3tm/Kq+4h4YhPATKt5Rof8886ZjXOP/swNlQ8C5LWK5Gb9Auw2DaclVy\n" + "vUxFnmG6v4SBkgPR0ml8xQ==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Baltimore CyberTrust Root", "MFoxCzAJBgNVBAYTAklFMRIwEAYDVQQKEwlCYWx0aW1vcmUxEzARBgNVBAsTCkN5YmVyVHJ1c3Qx" + "IjAgBgNVBAMTGUJhbHRpbW9yZSBDeWJlclRydXN0IFJvb3Q=", "-----BEGIN CERTIFICATE-----\n" + "MIIDdzCCAl+gAwIBAgIEAgAAuTANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJJ\n" + "RTESMBAGA1UEChMJQmFsdGltb3JlMRMwEQYDVQQLEwpDeWJlclRydXN0MSIwIAYD\n" + "VQQDExlCYWx0aW1vcmUgQ3liZXJUcnVzdCBSb290MB4XDTAwMDUxMjE4NDYwMFoX\n" + "DTI1MDUxMjIzNTkwMFowWjELMAkGA1UEBhMCSUUxEjAQBgNVBAoTCUJhbHRpbW9y\n" + "ZTETMBEGA1UECxMKQ3liZXJUcnVzdDEiMCAGA1UEAxMZQmFsdGltb3JlIEN5YmVy\n" + "VHJ1c3QgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKMEuyKr\n" + "mD1X6CZymrV51Cni4eiVgLGw41uOKymaZN+hXe2wCQVt2yguzmKiYv60iNoS6zjr\n" + "IZ3AQSsBUnuId9Mcj8e6uYi1agnnc+gRQKfRzMpijS3ljwumUNKoUMMo6vWrJYeK\n" + "mpYcqWe4PwzV9/lSEy/CG9VwcPCPwBLKBsua4dnKM3p31vjsufFoREJIE9LAwqSu\n" + "XmD+tqYF/LTdB1kC1FkYmGP1pWPgkAx9XbIGevOF6uvUA65ehD5f/xXtabz5OTZy\n" + "dc93Uk3zyZAsuT3lySNTPx8kmCFcB5kpvcY67Oduhjprl3RjM71oGDHweI12v/ye\n" + "jl0qhqdNkNwnGjkCAwEAAaNFMEMwHQYDVR0OBBYEFOWdWTCCR1jMrPoIVDaGezq1\n" + "BE3wMBIGA1UdEwEB/wQIMAYBAf8CAQMwDgYDVR0PAQH/BAQDAgEGMA0GCSqGSIb3\n" + "DQEBBQUAA4IBAQCFDF2O5G9RaEIFoN27TyclhAO992T9Ldcw46QQF+vaKSm2eT92\n" + "9hkTI7gQCvlYpNRhcL0EYWoSihfVCr3FvDB81ukMJY2GQE/szKN+OMY3EU/t3Wgx\n" + "jkzSswF07r51XgdIGn9w/xZchMB5hbgF/X++ZRGjD8ACtPhSNzkE1akxehi/oCr0\n" + "Epn3o0WC4zxe9Z2etciefC7IpJ5OCBRLbf1wbWsaY71k5h+3zvDyny67G7fyUIhz\n" + "ksLi4xaNmjICq44Y3ekQEe5+NauQrz4wlHrQMz2nZQ/1/I6eYs9HRCwBXbsdtTLS\n" + "R9I4LtD+gdwyah617jzV/OeBHRnDJELqYzmp\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Equifax Secure Global eBusiness CA", "MFoxCzAJBgNVBAYTAlVTMRwwGgYDVQQKExNFcXVpZmF4IFNlY3VyZSBJbmMuMS0wKwYDVQQDEyRF" + "cXVpZmF4IFNlY3VyZSBHbG9iYWwgZUJ1c2luZXNzIENBLTE=", "-----BEGIN CERTIFICATE-----\n" + "MIICkDCCAfmgAwIBAgIBATANBgkqhkiG9w0BAQQFADBaMQswCQYDVQQGEwJVUzEc\n" + "MBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEtMCsGA1UEAxMkRXF1aWZheCBT\n" + "ZWN1cmUgR2xvYmFsIGVCdXNpbmVzcyBDQS0xMB4XDTk5MDYyMTA0MDAwMFoXDTIw\n" + "MDYyMTA0MDAwMFowWjELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE0VxdWlmYXggU2Vj\n" + "dXJlIEluYy4xLTArBgNVBAMTJEVxdWlmYXggU2VjdXJlIEdsb2JhbCBlQnVzaW5l\n" + "c3MgQ0EtMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAuucXkAJlsTRVPEnC\n" + "UdXfp9E3j9HngXNBUmCbnaEXJnitx7HoJpQytd4zjTov2/KaelpzmKNc6fuKcxtc\n" + "58O/gGzNqfTWK8D3+ZmqY6KxRwIP1ORROhI8bIpaVIRw28HFkM9yRcuoWcDNM50/\n" + "o5brhTMhHD4ePmBudpxnhcXIw2ECAwEAAaNmMGQwEQYJYIZIAYb4QgEBBAQDAgAH\n" + "MA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUvqigdHJQa0S3ySPY+6j/s1dr\n" + "aGwwHQYDVR0OBBYEFL6ooHRyUGtEt8kj2Puo/7NXa2hsMA0GCSqGSIb3DQEBBAUA\n" + "A4GBADDiAVGqx+pf2rnQZQ8w1j7aDRRJbpGTJxQx78T3LUX47Me/okENI7SS+RkA\n" + "Z70Br83gcfxaz2TE4JaY0KNA4gGK7ycH8WUBikQtBmV1UsCGECAhX2xrD2yuCRyv\n" + "8qIYNMR1pHMc8Y3c7635s3a0kr/clRAevsvIO1qEYBlWlKlV\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Equifax Secure eBusiness CA 1", "MFMxCzAJBgNVBAYTAlVTMRwwGgYDVQQKExNFcXVpZmF4IFNlY3VyZSBJbmMuMSYwJAYDVQQDEx1F" + "cXVpZmF4IFNlY3VyZSBlQnVzaW5lc3MgQ0EtMQ==", "-----BEGIN CERTIFICATE-----\n" + "MIICgjCCAeugAwIBAgIBBDANBgkqhkiG9w0BAQQFADBTMQswCQYDVQQGEwJVUzEc\n" + "MBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5jLjEmMCQGA1UEAxMdRXF1aWZheCBT\n" + "ZWN1cmUgZUJ1c2luZXNzIENBLTEwHhcNOTkwNjIxMDQwMDAwWhcNMjAwNjIxMDQw\n" + "MDAwWjBTMQswCQYDVQQGEwJVUzEcMBoGA1UEChMTRXF1aWZheCBTZWN1cmUgSW5j\n" + "LjEmMCQGA1UEAxMdRXF1aWZheCBTZWN1cmUgZUJ1c2luZXNzIENBLTEwgZ8wDQYJ\n" + "KoZIhvcNAQEBBQADgY0AMIGJAoGBAM4vGbwXt3fek6lfWg0XTzQaDJj0ItlZ1MRo\n" + "RvC0NcWFAyDGr0WlIVFFQesWWDYyb+JQYmT5/VGcqiTZ9J2DKocKIdMSODRsjQBu\n" + "WqDZQu4aIZX5UkxVWsUPOE9G+m34LjXWHXzr4vCwdYDIqROsvojvOm6rXyo4YgKw\n" + "Env+j6YDAgMBAAGjZjBkMBEGCWCGSAGG+EIBAQQEAwIABzAPBgNVHRMBAf8EBTAD\n" + "AQH/MB8GA1UdIwQYMBaAFEp4MlIR21kWNl7fwRQ2QGpHfEyhMB0GA1UdDgQWBBRK\n" + "eDJSEdtZFjZe38EUNkBqR3xMoTANBgkqhkiG9w0BAQQFAAOBgQB1W6ibAxHm6VZM\n" + "zfmpTMANmvPMZWnmJXbMWbfWVMMdzZmsGd20hdXgPfxiIKeES1hl8eL5lSE/9dR+\n" + "WB5Hh1Q+WKG1tfgq73HnvMP2sUlG4tega+VWeponmHxGYhTnyfxuAxJ5gDgdSIKN\n" + "/Bf+KpYrtWKmpj29f5JZzVoqgrI3eQ==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Equifax Secure eBusiness CA 2", "ME4xCzAJBgNVBAYTAlVTMRcwFQYDVQQKEw5FcXVpZmF4IFNlY3VyZTEmMCQGA1UECxMdRXF1aWZh" + "eCBTZWN1cmUgZUJ1c2luZXNzIENBLTI=", "-----BEGIN CERTIFICATE-----\n" + "MIIDIDCCAomgAwIBAgIEN3DPtTANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV\n" + "UzEXMBUGA1UEChMORXF1aWZheCBTZWN1cmUxJjAkBgNVBAsTHUVxdWlmYXggU2Vj\n" + "dXJlIGVCdXNpbmVzcyBDQS0yMB4XDTk5MDYyMzEyMTQ0NVoXDTE5MDYyMzEyMTQ0\n" + "NVowTjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDkVxdWlmYXggU2VjdXJlMSYwJAYD\n" + "VQQLEx1FcXVpZmF4IFNlY3VyZSBlQnVzaW5lc3MgQ0EtMjCBnzANBgkqhkiG9w0B\n" + "AQEFAAOBjQAwgYkCgYEA5Dk5kx5SBhsoNviyoynF7Y6yEb3+6+e0dMKP/wXn2Z0G\n" + "vxLIPw7y1tEkshHe0XMJitSxLJgJDR5QRrKDpkWNYmi7hRsgcDKqQM2mll/EcTc/\n" + "BPO3QSQ5BxoeLmFYoBIL5aXfxavqN3HMHMg3OrmXUqesxWoklE6ce8/AatbfIb0C\n" + "AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEX\n" + "MBUGA1UEChMORXF1aWZheCBTZWN1cmUxJjAkBgNVBAsTHUVxdWlmYXggU2VjdXJl\n" + "IGVCdXNpbmVzcyBDQS0yMQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTkw\n" + "NjIzMTIxNDQ1WjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUUJ4L6q9euSBIplBq\n" + "y/3YIHqngnYwHQYDVR0OBBYEFFCeC+qvXrkgSKZQasv92CB6p4J2MAwGA1UdEwQF\n" + "MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA\n" + "A4GBAAyGgq3oThr1jokn4jVYPSm0B482UJW/bsGe68SQsoWou7dC4A8HOd/7npCy\n" + "0cE+U58DRLB+S/Rv5Hwf5+Kx5Lia78O9zt4LMjTZ3ijtM2vE1Nc9ElirfQkty3D1\n" + "E4qUoSek1nDFbZS1yX2doNLGCEnZZpum0/QL3MUmV+GRMOrN\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Visa International Global Root 2", "MGExCzAJBgNVBAYTAlVTMQ0wCwYDVQQKEwRWSVNBMS8wLQYDVQQLEyZWaXNhIEludGVybmF0aW9u" + "YWwgU2VydmljZSBBc3NvY2lhdGlvbjESMBAGA1UEAxMJR1AgUm9vdCAy", "-----BEGIN CERTIFICATE-----\n" + "MIIDgDCCAmigAwIBAgICAx4wDQYJKoZIhvcNAQEFBQAwYTELMAkGA1UEBhMCVVMx\n" + "DTALBgNVBAoTBFZJU0ExLzAtBgNVBAsTJlZpc2EgSW50ZXJuYXRpb25hbCBTZXJ2\n" + "aWNlIEFzc29jaWF0aW9uMRIwEAYDVQQDEwlHUCBSb290IDIwHhcNMDAwODE2MjI1\n" + "MTAwWhcNMjAwODE1MjM1OTAwWjBhMQswCQYDVQQGEwJVUzENMAsGA1UEChMEVklT\n" + "QTEvMC0GA1UECxMmVmlzYSBJbnRlcm5hdGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRp\n" + "b24xEjAQBgNVBAMTCUdQIFJvb3QgMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\n" + "AQoCggEBAKkBcLWqxEDwq2omYXkZAPy/mzdZDK9vZBv42pWUJGkzEXDK41Z0ohdX\n" + "ZFwgBuHW73G3O/erwWnQSaSxBNf0V2KJXLB1LRckaeNCYOTudNargFbYiCjh+20i\n" + "/SN8RnNPflRzHqgsVVh1t0zzWkWlAhr62p3DRcMiXvOL8WAp0sdftAw6UYPvMPjU\n" + "58fy+pmjIlC++QU3o63tmsPm7IgbthknGziLgE3sucfFicv8GjLtI/C1AVj59o/g\n" + "halMCXI5Etuz9c9OYmTaxhkVOmMd6RdVoUwiPDQyRvhlV7or7zaMavrZ2UT0qt2E\n" + "1w0cslSsMoW0ZA3eQbuxNMYBhjJk1Z8CAwEAAaNCMEAwHQYDVR0OBBYEFJ59SzS/\n" + "ca3CBfYDdYDOqU8axCRMMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEG\n" + "MA0GCSqGSIb3DQEBBQUAA4IBAQAhpXYUVfmtJ3CPPPTVbMjMCqujmAuKBiPFyWHb\n" + "mQdpNSYx/scuhMKZYdQN6X0uEyt8joW2hcdLzzW2LEc9zikv2G+fiRxkk78IvXbQ\n" + "kIqUs38oW26sTTMs7WXcFsziza6kPWKSBpUmv9+55CCmc2rBvveURNZNbyoLaxhN\n" + "dBA2aGpawWqn3TYpjLgwi08hPwAuVDAHOrqK5MOeyti12HvOdUVmB/RtLdh6yumJ\n" + "ivIj2C/LbgA2T/vwLwHMD8AiZfSr4k5hLQOCfZEWtTDVFN5ex5D8ofyrEK9ca3Cn\n" + "B+8phuiyJccg/ybdd+95RBTEvd07xQObdyPsoOy7Wjm1zK0G\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("beTRUSTed Root CA", "MFoxCzAJBgNVBAYTAldXMRIwEAYDVQQKEwliZVRSVVNUZWQxGzAZBgNVBAMTEmJlVFJVU1RlZCBS" + "b290IENBczEaMBgGA1UEAxMRYmVUUlVTVGVkIFJvb3QgQ0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIFLDCCBBSgAwIBAgIEOU99hzANBgkqhkiG9w0BAQUFADBaMQswCQYDVQQGEwJX\n" + "VzESMBAGA1UEChMJYmVUUlVTVGVkMRswGQYDVQQDExJiZVRSVVNUZWQgUm9vdCBD\n" + "QXMxGjAYBgNVBAMTEWJlVFJVU1RlZCBSb290IENBMB4XDTAwMDYyMDE0MjEwNFoX\n" + "DTEwMDYyMDEzMjEwNFowWjELMAkGA1UEBhMCV1cxEjAQBgNVBAoTCWJlVFJVU1Rl\n" + "ZDEbMBkGA1UEAxMSYmVUUlVTVGVkIFJvb3QgQ0FzMRowGAYDVQQDExFiZVRSVVNU\n" + "ZWQgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANS0c3oT\n" + "CjhVAb6JVuGUntS+WutKNHUbYSnE4a0IYCF4SP+00PpeQY1hRIfo7clY+vyTmt9P\n" + "6j41ffgzeubx181vSUs9Ty1uDoM6GHh3o8/n9E1z2Jo7Gh2+lVPPIJfCzz4kUmwM\n" + "jmVZxXH/YgmPqsWPzGCgc0rXOD8Vcr+il7dw6K/ifhYGTPWqZCZyByWtNfwYsSbX\n" + "2P8ZDoMbjNx4RWc0PfSvHI3kbWvtILNnmrRhyxdviTX/507AMhLn7uzf/5cwdO2N\n" + "R47rtMNE5qdMf1ZD6Li8tr76g5fmu/vEtpO+GRg+jIG5c4gW9JZDnGdzF5DYCW5j\n" + "rEq2I8QBoa2k5MUCAwEAAaOCAfgwggH0MA8GA1UdEwEB/wQFMAMBAf8wggFZBgNV\n" + "HSAEggFQMIIBTDCCAUgGCisGAQQBsT4BAAAwggE4MIIBAQYIKwYBBQUHAgIwgfQa\n" + "gfFSZWxpYW5jZSBvbiB0aGlzIGNlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBhc3N1\n" + "bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0\n" + "ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGFuZCBjZXJ0aWZpY2F0aW9uIHBy\n" + "YWN0aWNlIHN0YXRlbWVudCwgd2hpY2ggY2FuIGJlIGZvdW5kIGF0IGJlVFJVU1Rl\n" + "ZCdzIHdlYiBzaXRlLCBodHRwczovL3d3dy5iZVRSVVNUZWQuY29tL3ZhdWx0L3Rl\n" + "cm1zMDEGCCsGAQUFBwIBFiVodHRwczovL3d3dy5iZVRSVVNUZWQuY29tL3ZhdWx0\n" + "L3Rlcm1zMDQGA1UdHwQtMCswKaAnoCWkIzAhMRIwEAYDVQQKEwliZVRSVVNUZWQx\n" + "CzAJBgNVBAYTAldXMB0GA1UdDgQWBBQquZtpLjub2M3eKjEENGvKBxirZzAfBgNV\n" + "HSMEGDAWgBQquZtpLjub2M3eKjEENGvKBxirZzAOBgNVHQ8BAf8EBAMCAf4wDQYJ\n" + "KoZIhvcNAQEFBQADggEBAHlh26Nebhax6nZR+csVm8tpvuaBa58oH2U+3RGFktTo\n" + "Qb9+M70j5/Egv6S0phkBxoyNNXxlpE8JpNbYIxUFE6dDea/bow6be3ga8wSGWsb2\n" + "jCBHOElQBp1yZzrwmAOtlmdE/D8QDYZN5AA7KXvOOzuZhmElQITcE2K3+spZ1gMe\n" + "1lMBzW1MaFVA4e5rxyoAAEiCswoBw2AqDPeCNe5IhpbkdNQ96gFxugR1QKepfzk5\n" + "mlWXKWWuGVUlBXJH0+gY3Ljpr0NzARJ0o+FcXxVdJPP55PS2Z2cS52QiivalQaYc\n" + "tmBjRYoQtLpGEK5BV2VsPyMQPyEQWbfkQN0mDCP2qq4=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("AddTrust Low-Value Services Root", "MGUxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3Qg" + "VFRQIE5ldHdvcmsxITAfBgNVBAMTGEFkZFRydXN0IENsYXNzIDEgQ0EgUm9vdA==", "-----BEGIN CERTIFICATE-----\n" + "MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU\n" + "MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3\n" + "b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw\n" + "MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML\n" + "QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD\n" + "VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA\n" + "A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul\n" + "CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n\n" + "tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl\n" + "dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch\n" + "PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC\n" + "+Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O\n" + "BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E\n" + "BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl\n" + "MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk\n" + "ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB\n" + "IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X\n" + "7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz\n" + "43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY\n" + "eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl\n" + "pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA\n" + "WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("AddTrust External Root", "MG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRUcnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3Qg" + "RXh0ZXJuYWwgVFRQIE5ldHdvcmsxIjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3Q=", "-----BEGIN CERTIFICATE-----\n" + "MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU\n" + "MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs\n" + "IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290\n" + "MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux\n" + "FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h\n" + "bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v\n" + "dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt\n" + "H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9\n" + "uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX\n" + "mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX\n" + "a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN\n" + "E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0\n" + "WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD\n" + "VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0\n" + "Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU\n" + "cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx\n" + "IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN\n" + "AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH\n" + "YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5\n" + "6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC\n" + "Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX\n" + "c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a\n" + "mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("AddTrust Public Services Root", "MGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3Qg" + "VFRQIE5ldHdvcmsxIDAeBgNVBAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290", "-----BEGIN CERTIFICATE-----\n" + "MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU\n" + "MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3\n" + "b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx\n" + "MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB\n" + "ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV\n" + "BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC\n" + "AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV\n" + "6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX\n" + "GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP\n" + "dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH\n" + "1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF\n" + "62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW\n" + "BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw\n" + "AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL\n" + "MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU\n" + "cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv\n" + "b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6\n" + "IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/\n" + "iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao\n" + "GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh\n" + "4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm\n" + "XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("AddTrust Qualified Certificates Root", "MGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3Qg" + "VFRQIE5ldHdvcmsxIzAhBgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290", "-----BEGIN CERTIFICATE-----\n" + "MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU\n" + "MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3\n" + "b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1\n" + "MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK\n" + "EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh\n" + "BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B\n" + "AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq\n" + "xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G\n" + "87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i\n" + "2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U\n" + "WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1\n" + "0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G\n" + "A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T\n" + "AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr\n" + "pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL\n" + "ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm\n" + "aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv\n" + "hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm\n" + "hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X\n" + "dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3\n" + "P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y\n" + "iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no\n" + "xqE=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Verisign Time Stamping Authority CA", "MIGlMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0" + "d29yazE7MDkGA1UECxMyVGVybXMgb2YgdXNlIGF0IGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9y" + "cGEgKGMpMDAxLDAqBgNVBAMTI1ZlcmlTaWduIFRpbWUgU3RhbXBpbmcgQXV0aG9yaXR5IENB", "-----BEGIN CERTIFICATE-----\n" + "MIIDzTCCAzagAwIBAgIQU2GyYK7bcY6nlLMTM/QHCTANBgkqhkiG9w0BAQUFADCB\n" + "wTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTwwOgYDVQQL\n" + "EzNDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5\n" + "IC0gRzIxOjA4BgNVBAsTMShjKSAxOTk4IFZlcmlTaWduLCBJbmMuIC0gRm9yIGF1\n" + "dGhvcml6ZWQgdXNlIG9ubHkxHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdv\n" + "cmswHhcNMDAwOTI2MDAwMDAwWhcNMTAwOTI1MjM1OTU5WjCBpTEXMBUGA1UEChMO\n" + "VmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0IE5ldHdvcmsx\n" + "OzA5BgNVBAsTMlRlcm1zIG9mIHVzZSBhdCBodHRwczovL3d3dy52ZXJpc2lnbi5j\n" + "b20vcnBhIChjKTAwMSwwKgYDVQQDEyNWZXJpU2lnbiBUaW1lIFN0YW1waW5nIEF1\n" + "dGhvcml0eSBDQTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA0hmdZ8IAIVli\n" + "zrQJIkRpivglWtvtDbc2fk7gu5Q+kCWHwmFHKdm9VLhjzCx9abQzNvQ3B5rB3UBU\n" + "/OB4naCTuQk9I1F/RMIUdNsKvsvJMDRAmD7Q1yUQgZS9B0+c1lQn3y6ov8uQjI11\n" + "S7zi6ESHzeZBCiVu6PQkAsVSD27smHUCAwEAAaOB3zCB3DAPBgNVHRMECDAGAQH/\n" + "AgEAMEUGA1UdIAQ+MDwwOgYMYIZIAYb4RQEHFwEDMCowKAYIKwYBBQUHAgEWHGh0\n" + "dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9ycGEwMQYDVR0fBCowKDAmoCSgIoYgaHR0\n" + "cDovL2NybC52ZXJpc2lnbi5jb20vcGNhMy5jcmwwCwYDVR0PBAQDAgEGMEIGCCsG\n" + "AQUFBwEBBDYwNDAyBggrBgEFBQcwAaYmFiRodHRwOi8vb2NzcC52ZXJpc2lnbi5j\n" + "b20vb2NzcC9zdGF0dXMwDQYJKoZIhvcNAQEFBQADgYEAgnBold+2DcIBcBlK0lRW\n" + "HqzyRUyHuPU163hLBanInTsZIS5wNEqi9YngFXVF5yg3ADQnKeg3S/LvRJdrF1Ea\n" + "w1adPBqK9kpGRjeM+sv1ZFo4aC4cw+9wzrhGBha/937ntag+RaypJXUie28/sJyU\n" + "58dzq6wf7iWbwBbtt8pb8BQ=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Thawte Time Stamping CA", "MIGLMQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRQwEgYDVQQHEwtEdXJiYW52" + "aWxsZTEPMA0GA1UEChMGVGhhd3RlMR0wGwYDVQQLExRUaGF3dGUgQ2VydGlmaWNhdGlvbjEfMB0G" + "A1UEAxMWVGhhd3RlIFRpbWVzdGFtcGluZyBDQQ==", "-----BEGIN CERTIFICATE-----\n" + "MIICoTCCAgqgAwIBAgIBADANBgkqhkiG9w0BAQQFADCBizELMAkGA1UEBhMCWkEx\n" + "FTATBgNVBAgTDFdlc3Rlcm4gQ2FwZTEUMBIGA1UEBxMLRHVyYmFudmlsbGUxDzAN\n" + "BgNVBAoTBlRoYXd0ZTEdMBsGA1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAd\n" + "BgNVBAMTFlRoYXd0ZSBUaW1lc3RhbXBpbmcgQ0EwHhcNOTcwMTAxMDAwMDAwWhcN\n" + "MjAxMjMxMjM1OTU5WjCBizELMAkGA1UEBhMCWkExFTATBgNVBAgTDFdlc3Rlcm4g\n" + "Q2FwZTEUMBIGA1UEBxMLRHVyYmFudmlsbGUxDzANBgNVBAoTBlRoYXd0ZTEdMBsG\n" + "A1UECxMUVGhhd3RlIENlcnRpZmljYXRpb24xHzAdBgNVBAMTFlRoYXd0ZSBUaW1l\n" + "c3RhbXBpbmcgQ0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANYrWHhhRYZT\n" + "6jR7UZztsOYuGA7+4F+oJ9O0yeB8WU4WDnNUYMF/9p8u6TqFJBU820cEY8OexJQa\n" + "Wt9MevPZQx08EHp5JduQ/vBR5zDWQQD9nyjfeb6Uu522FOMjhdepQeBMpHmwKxqL\n" + "8vg7ij5FrHGSALSQQZj7X+36ty6K+Ig3AgMBAAGjEzARMA8GA1UdEwEB/wQFMAMB\n" + "Af8wDQYJKoZIhvcNAQEEBQADgYEAZ9viwuaHPUCDhjc1fR/OmsMMZiCouqoEiYbC\n" + "9RAIDb/LogWK0E02PvTX72nGXuSwlG9KuefeW4i2e9vjJ+V2w/A1wcu1J5szedyQ\n" + "pgCed/r8zSeUQhac0xxo7L9c3eWpexAKMnRUEzGLhQOEkbdYATAUOK8oyvyxUBkZ\n" + "CayJSdM=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Entrust.net Global Secure Server CA", "MIG6MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDE/MD0GA1UECxQ2d3d3LmVudHJ1c3QubmV0L1NTTF9D" + "UFMgaW5jb3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMjAwMCBFbnRy" + "dXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRp" + "ZmljYXRpb24gQXV0aG9yaXR5", "-----BEGIN CERTIFICATE-----\n" + "MIIElTCCA/6gAwIBAgIEOJsRPDANBgkqhkiG9w0BAQQFADCBujEUMBIGA1UEChML\n" + "RW50cnVzdC5uZXQxPzA9BgNVBAsUNnd3dy5lbnRydXN0Lm5ldC9TU0xfQ1BTIGlu\n" + "Y29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMcKGMpIDIwMDAg\n" + "RW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5uZXQgU2VjdXJl\n" + "IFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wMDAyMDQxNzIwMDBa\n" + "Fw0yMDAyMDQxNzUwMDBaMIG6MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDE/MD0GA1UE\n" + "CxQ2d3d3LmVudHJ1c3QubmV0L1NTTF9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p\n" + "dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMjAwMCBFbnRydXN0Lm5ldCBMaW1pdGVk\n" + "MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp\n" + "b24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHwV9OcfHO\n" + "8GCGD9JYf9Mzly0XonUwtZZkJi9ow0SrqHXmAGc0V55lxyKbc+bT3QgON1WqJUaB\n" + "bL3+qPZ1V1eMkGxKwz6LS0MKyRFWmponIpnPVZ5h2QLifLZ8OAfc439PmrkDQYC2\n" + "dWcTC5/oVzbIXQA23mYU2m52H083jIITiQIDAQABo4IBpDCCAaAwEQYJYIZIAYb4\n" + "QgEBBAQDAgAHMIHjBgNVHR8EgdswgdgwgdWggdKggc+kgcwwgckxFDASBgNVBAoT\n" + "C0VudHJ1c3QubmV0MT8wPQYDVQQLFDZ3d3cuZW50cnVzdC5uZXQvU1NMX0NQUyBp\n" + "bmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAyMDAw\n" + "IEVudHJ1c3QubmV0IExpbWl0ZWQxOjA4BgNVBAMTMUVudHJ1c3QubmV0IFNlY3Vy\n" + "ZSBTZXJ2ZXIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxDTALBgNVBAMTBENSTDEw\n" + "KwYDVR0QBCQwIoAPMjAwMDAyMDQxNzIwMDBagQ8yMDIwMDIwNDE3NTAwMFowCwYD\n" + "VR0PBAQDAgEGMB8GA1UdIwQYMBaAFMtswGvjuz7L/CKc/vuLkpyw8m4iMB0GA1Ud\n" + "DgQWBBTLbMBr47s+y/winP77i5KcsPJuIjAMBgNVHRMEBTADAQH/MB0GCSqGSIb2\n" + "fQdBAAQQMA4bCFY1LjA6NC4wAwIEkDANBgkqhkiG9w0BAQQFAAOBgQBi24GRzsia\n" + "d0Iv7L0no1MPUBvqTpLwqa+poLpIYcvvyQbvH9X07t9WLebKahlzqlO+krNQAraF\n" + "JnJj2HVQYnUUt7NQGj/KEQALhUVpbbalrlHhStyCP2yMNLJ3a9kC9n8O6mUE8c1U\n" + "yrrJzOCE98g+EZfTYAkYvAX/bIkz8OwVDw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Entrust.net Global Secure Personal CA", "MIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3LmVudHJ1c3QubmV0L0dDQ0Ff" + "Q1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMcKGMpIDIwMDAgRW50" + "cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5uZXQgQ2xpZW50IENlcnRpZmljYXRp" + "b24gQXV0aG9yaXR5", "-----BEGIN CERTIFICATE-----\n" + "MIIEgzCCA+ygAwIBAgIEOJ725DANBgkqhkiG9w0BAQQFADCBtDEUMBIGA1UEChML\n" + "RW50cnVzdC5uZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9HQ0NBX0NQUyBp\n" + "bmNvcnAuIGJ5IHJlZi4gKGxpbWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAyMDAw\n" + "IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNVBAMTKkVudHJ1c3QubmV0IENsaWVu\n" + "dCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wMDAyMDcxNjE2NDBaFw0yMDAy\n" + "MDcxNjQ2NDBaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3d3d3\n" + "LmVudHJ1c3QubmV0L0dDQ0FfQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxp\n" + "YWIuKTElMCMGA1UECxMcKGMpIDIwMDAgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEG\n" + "A1UEAxMqRW50cnVzdC5uZXQgQ2xpZW50IENlcnRpZmljYXRpb24gQXV0aG9yaXR5\n" + "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCTdLS25MVL1qFof2LV7PdRV7Ny\n" + "Spj10InJrWPNTTVRaoTUrcloeW+46xHbh65cJFET8VQlhK8pK5/jgOLZy93GRUk0\n" + "iJBeAZfv6lOm3fzB3ksqJeTpNfpVBQbliXrqpBFXO/x8PTbNZzVtpKklWb1m9fkn\n" + "5JVn1j+SgF7yNH0rhQIDAQABo4IBnjCCAZowEQYJYIZIAYb4QgEBBAQDAgAHMIHd\n" + "BgNVHR8EgdUwgdIwgc+ggcyggcmkgcYwgcMxFDASBgNVBAoTC0VudHJ1c3QubmV0\n" + "MUAwPgYDVQQLFDd3d3cuZW50cnVzdC5uZXQvR0NDQV9DUFMgaW5jb3JwLiBieSBy\n" + "ZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMjAwMCBFbnRydXN0Lm5l\n" + "dCBMaW1pdGVkMTMwMQYDVQQDEypFbnRydXN0Lm5ldCBDbGllbnQgQ2VydGlmaWNh\n" + "dGlvbiBBdXRob3JpdHkxDTALBgNVBAMTBENSTDEwKwYDVR0QBCQwIoAPMjAwMDAy\n" + "MDcxNjE2NDBagQ8yMDIwMDIwNzE2NDY0MFowCwYDVR0PBAQDAgEGMB8GA1UdIwQY\n" + "MBaAFISLdP3FjcD/J20gN0V8/i3OutN9MB0GA1UdDgQWBBSEi3T9xY3A/ydtIDdF\n" + "fP4tzrrTfTAMBgNVHRMEBTADAQH/MB0GCSqGSIb2fQdBAAQQMA4bCFY1LjA6NC4w\n" + "AwIEkDANBgkqhkiG9w0BAQQFAAOBgQBObzWAO9GK9Q6nIMstZVXQkvTnhLUGJoMS\n" + "hAusO7JE7r3PQNsgDrpuFOow4DtifH+La3xKp9U1PL6oXOpLu5OOgGarDyn9TS2/\n" + "GpsKkMWr2tGzhtQvJFJcem3G8v7lTRowjJDyutdKPkN+1MhQGof4T4HHdguEOnKd\n" + "zmVml64mXg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("AOL Time Warner Root Certification Authority 1", "MIGDMQswCQYDVQQGEwJVUzEdMBsGA1UEChMUQU9MIFRpbWUgV2FybmVyIEluYy4xHDAaBgNVBAsT" + "E0FtZXJpY2EgT25saW5lIEluYy4xNzA1BgNVBAMTLkFPTCBUaW1lIFdhcm5lciBSb290IENlcnRp" + "ZmljYXRpb24gQXV0aG9yaXR5IDE=", "-----BEGIN CERTIFICATE-----\n" + "MIID5jCCAs6gAwIBAgIBATANBgkqhkiG9w0BAQUFADCBgzELMAkGA1UEBhMCVVMx\n" + "HTAbBgNVBAoTFEFPTCBUaW1lIFdhcm5lciBJbmMuMRwwGgYDVQQLExNBbWVyaWNh\n" + "IE9ubGluZSBJbmMuMTcwNQYDVQQDEy5BT0wgVGltZSBXYXJuZXIgUm9vdCBDZXJ0\n" + "aWZpY2F0aW9uIEF1dGhvcml0eSAxMB4XDTAyMDUyOTA2MDAwMFoXDTM3MTEyMDE1\n" + "MDMwMFowgYMxCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRBT0wgVGltZSBXYXJuZXIg\n" + "SW5jLjEcMBoGA1UECxMTQW1lcmljYSBPbmxpbmUgSW5jLjE3MDUGA1UEAxMuQU9M\n" + "IFRpbWUgV2FybmVyIFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgMTCCASIw\n" + "DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJnej8Mlo2k06AX3dLm/WpcZuS+U\n" + "0pPlLYnKhHw/EEMbjIt8hFj4JHxIzyr9wBXZGH6EGhfT257XyuTZ16pYUYfw8ItI\n" + "TuLCxFlpMGK2MKKMCxGZYTVtfu/FsRkGIBKOQuHfD5YQUqjPnF+VFNivO3ULMSAf\n" + "RC+iYkGzuxgh28pxPIzstrkNn+9R7017EvILDOGsQI93f7DKeHEMXRZxcKLXwjqF\n" + "zQ6axOAAsNUl6twr5JQtOJyJQVdkKGUZHLZEtMgxa44Be3ZZJX8VHIQIfHNlIAqh\n" + "BC4aMqiaILGcLCFZ5/vP7nAtCMpjPiybkxlqpMKX/7eGV4iFbJ4VFitNLLMCAwEA\n" + "AaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUoTYwFsuGkABFgFOxj8jY\n" + "PXy+XxIwHwYDVR0jBBgwFoAUoTYwFsuGkABFgFOxj8jYPXy+XxIwDgYDVR0PAQH/\n" + "BAQDAgGGMA0GCSqGSIb3DQEBBQUAA4IBAQCKIBilvrMvtKaEAEAwKfq0FHNMeUWn\n" + "9nDg6H5kHgqVfGphwu9OH77/yZkfB2FK4V1Mza3u0FIy2VkyvNp5ctZ7CegCgTXT\n" + "Ct8RHcl5oIBN/lrXVtbtDyqvpxh1MwzqwWEFT2qaifKNuZ8u77BfWgDrvq2g+EQF\n" + "Z7zLBO+eZMXpyD8Fv8YvBxzDNnGGyjhmSs3WuEvGbKeXO/oTLW4jYYehY0KswsuX\n" + "n2Fozy1MBJ3XJU8KDk2QixhWqJNIV9xvrr2eZ1d3iVCzvhGbRWeDhhmH05i9CBoW\n" + "H1iCC+GWaQVLjuyDUTEH1dSf/1l7qG6Fz9NLqUmwX7A5KGgOc90lmt4S\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("AOL Time Warner Root Certification Authority 2", "MIGDMQswCQYDVQQGEwJVUzEdMBsGA1UEChMUQU9MIFRpbWUgV2FybmVyIEluYy4xHDAaBgNVBAsT" + "E0FtZXJpY2EgT25saW5lIEluYy4xNzA1BgNVBAMTLkFPTCBUaW1lIFdhcm5lciBSb290IENlcnRp" + "ZmljYXRpb24gQXV0aG9yaXR5IDI=", "-----BEGIN CERTIFICATE-----\n" + "MIIF5jCCA86gAwIBAgIBATANBgkqhkiG9w0BAQUFADCBgzELMAkGA1UEBhMCVVMx\n" + "HTAbBgNVBAoTFEFPTCBUaW1lIFdhcm5lciBJbmMuMRwwGgYDVQQLExNBbWVyaWNh\n" + "IE9ubGluZSBJbmMuMTcwNQYDVQQDEy5BT0wgVGltZSBXYXJuZXIgUm9vdCBDZXJ0\n" + "aWZpY2F0aW9uIEF1dGhvcml0eSAyMB4XDTAyMDUyOTA2MDAwMFoXDTM3MDkyODIz\n" + "NDMwMFowgYMxCzAJBgNVBAYTAlVTMR0wGwYDVQQKExRBT0wgVGltZSBXYXJuZXIg\n" + "SW5jLjEcMBoGA1UECxMTQW1lcmljYSBPbmxpbmUgSW5jLjE3MDUGA1UEAxMuQU9M\n" + "IFRpbWUgV2FybmVyIFJvb3QgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgMjCCAiIw\n" + "DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALQ3WggWmRToVbEbJGv8x4vmh6mJ\n" + "7ouZzU9AhqS2TcnZsdw8TQ2FTBVsRotSeJ/4I/1n9SQ6aF3Q92RhQVSji6UI0ilb\n" + "m2BPJoPRYxJWSXakFsKlnUWsi4SVqBax7J/qJBrvuVdcmiQhLE0OcR+mrF1FdAOY\n" + "xFSMFkpBd4aVdQxHAWZg/BXxD+r1FHjHDtdugRxev17nOirYlxcwfACtCJ0zr7iZ\n" + "YYCLqJV+FNwSbKTQ2O9ASQI2+W6p1h2WVgSysy0WVoaP2SBXgM1nEG2wTPDaRrbq\n" + "JS5Gr42whTg0ixQmgiusrpkLjhTXUr2eacOGAgvqdnUxCc4zGSGFQ+aJLZ8lN2fx\n" + "I2rSAG2X+Z/nKcrdH9cG6rjJuQkhn8g/BsXS6RJGAE57COtCPStIbp1n3UsC5ETz\n" + "kxmlJ85per5n0/xQpCyrw2u544BMzwVhSyvcG7mm0tCq9Stz+86QNZ8MUhy/XCFh\n" + "EVsVS6kkUfykXPcXnbDS+gfpj1bkGoxoigTTfFrjnqKhynFbotSg5ymFXQNoKk/S\n" + "Btc9+cMDLz9l+WceR0DTYw/j1Y75hauXTLPXJuuWCpTehTacyH+BCQJJKg71ZDIM\n" + "gtG6aoIbs0t0EfOMd9afv9w3pKdVBC/UMejTRrkDfNoSTllkt1ExMVCgyhwn2RAu\n" + "rda9EGYrw7AiShJbAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE\n" + "FE9pbQN+nZ8HGEO8txBO1b+pxCAoMB8GA1UdIwQYMBaAFE9pbQN+nZ8HGEO8txBO\n" + "1b+pxCAoMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAgEAO/Ouyugu\n" + "h4X7ZVnnrREUpVe8WJ8kEle7+z802u6teio0cnAxa8cZmIDJgt43d15Ui47y6mdP\n" + "yXSEkVYJ1eV6moG2gcKtNuTxVBFT8zRFASbI5Rq8NEQh3q0l/HYWdyGQgJhXnU7q\n" + "7C+qPBR7V8F+GBRn7iTGvboVsNIYvbdVgaxTwOjdaRITQrcCtQVBynlQboIOcXKT\n" + "RuidDV29rs4prWPVVRaAMCf/drr3uNZK49m1+VLQTkCpx+XCMseqdiThawVQ68W/\n" + "ClTluUI8JPu3B5wwn3la5uBAUhX0/Kr0VvlEl4ftDmVyXr4m+02kLQgH3thcoNyB\n" + "M5kYJRF3p+v9WAksmWsbivNSPxpNSGDxoPYzAlOL7SUJuA0t7Zdz7NeWH45gDtoQ\n" + "my8YJPamTQr5O8t1wswvziRpyQoijlmn94IM19drNZxDAGrElWe6nEXLuA4399xO\n" + "AU++CrYD062KRffaJ00psUjf5BHklka9bAI+1lHIlRcBFanyqqryvy9lG2/QuRqT\n" + "9Y41xICHPpQvZuTpqP9BnHAqTyo5GJUefvthATxRCC4oGKQWDzH9OmwjkyB24f0H\n" + "hdFbP9IcczLd+rn4jM8Ch3qaluTtT4mNU0OrDhPAARW0eTjb/G49nlG2uBOLZ8/5\n" + "fNkiHfZdxRwBL5joeiQYvITX+txyW/fBOmg=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("beTRUSTed Root CA-Baltimore Implementation", "MGYxEjAQBgNVBAoTCWJlVFJVU1RlZDEbMBkGA1UECxMSYmVUUlVTVGVkIFJvb3QgQ0FzMTMwMQYD" + "VQQDEypiZVRSVVNUZWQgUm9vdCBDQS1CYWx0aW1vcmUgSW1wbGVtZW50YXRpb24=", "-----BEGIN CERTIFICATE-----\n" + "MIIFajCCBFKgAwIBAgIEPLU9RjANBgkqhkiG9w0BAQUFADBmMRIwEAYDVQQKEwli\n" + "ZVRSVVNUZWQxGzAZBgNVBAsTEmJlVFJVU1RlZCBSb290IENBczEzMDEGA1UEAxMq\n" + "YmVUUlVTVGVkIFJvb3QgQ0EtQmFsdGltb3JlIEltcGxlbWVudGF0aW9uMB4XDTAy\n" + "MDQxMTA3Mzg1MVoXDTIyMDQxMTA3Mzg1MVowZjESMBAGA1UEChMJYmVUUlVTVGVk\n" + "MRswGQYDVQQLExJiZVRSVVNUZWQgUm9vdCBDQXMxMzAxBgNVBAMTKmJlVFJVU1Rl\n" + "ZCBSb290IENBLUJhbHRpbW9yZSBJbXBsZW1lbnRhdGlvbjCCASIwDQYJKoZIhvcN\n" + "AQEBBQADggEPADCCAQoCggEBALx+xDmcjOPWHIb/ymKt4H8wRXqOGrO4x/nRNv8i\n" + "805qX4QQ+2aBw5R5MdKR4XeOGCrDFN5R9U+jK7wYFuK13XneIviCfsuBH/0nLI/6\n" + "l2Qijvj/YaOcGx6Sj8CoCd8JEey3fTGaGuqDIQY8n7pc/5TqarjDa1U0Tz0yH92B\n" + "FODEPM2dMPgwqZfT7syj0B9fHBOB1BirlNFjw55/NZKeX0Tq7PQiXLfoPX2k+Ymp\n" + "kbIq2eszh+6l/ePazIjmiSZuxyuC0F6dWdsU7JGDBcNeDsYq0ATdcT0gTlgn/FP7\n" + "eHgZFLL8kFKJOGJgB7Sg7KxrUNb9uShr71ItOrL/8QFArDcCAwEAAaOCAh4wggIa\n" + "MA8GA1UdEwEB/wQFMAMBAf8wggG1BgNVHSAEggGsMIIBqDCCAaQGDysGAQQBsT4A\n" + "AAEJKIORMTCCAY8wggFIBggrBgEFBQcCAjCCAToaggE2UmVsaWFuY2Ugb24gb3Ig\n" + "dXNlIG9mIHRoaXMgQ2VydGlmaWNhdGUgY3JlYXRlcyBhbiBhY2tub3dsZWRnbWVu\n" + "dCBhbmQgYWNjZXB0YW5jZSBvZiB0aGUgdGhlbiBhcHBsaWNhYmxlIHN0YW5kYXJk\n" + "IHRlcm1zIGFuZCBjb25kaXRpb25zIG9mIHVzZSwgdGhlIENlcnRpZmljYXRpb24g\n" + "UHJhY3RpY2UgU3RhdGVtZW50IGFuZCB0aGUgUmVseWluZyBQYXJ0eSBBZ3JlZW1l\n" + "bnQsIHdoaWNoIGNhbiBiZSBmb3VuZCBhdCB0aGUgYmVUUlVTVGVkIHdlYiBzaXRl\n" + "LCBodHRwOi8vd3d3LmJldHJ1c3RlZC5jb20vcHJvZHVjdHNfc2VydmljZXMvaW5k\n" + "ZXguaHRtbDBBBggrBgEFBQcCARY1aHR0cDovL3d3dy5iZXRydXN0ZWQuY29tL3By\n" + "b2R1Y3RzX3NlcnZpY2VzL2luZGV4Lmh0bWwwHQYDVR0OBBYEFEU9w6nR3D8kVpgc\n" + "cxiIav+DR+22MB8GA1UdIwQYMBaAFEU9w6nR3D8kVpgccxiIav+DR+22MA4GA1Ud\n" + "DwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOCAQEASZK8o+6svfoNyYt5hhwjdrCA\n" + "WXf82n+0S9/DZEtqTg6t8n1ZdwWtColzsPq8y9yNAIiPpqCy6qxSJ7+hSHyXEHu6\n" + "7RMdmgduyzFiEuhjA6p9beP4G3YheBufS0OM00mG9htc9i5gFdPp43t1P9ACg9AY\n" + "gkHNZTfqjjJ+vWuZXTARyNtIVBw74acT02pIk/c9jH8F6M7ziCpjBLjqflh8AXtb\n" + "4cV97yHgjQ5dUX2xZ/2jvTg2xvI4hocalmhgRvsoFEdV4aeADGvi6t9NfJBIoDa9\n" + "CReJf8Py05yc493EG931t3GzUwWJBtDLSoDByFOQtTwxiBdQn8nEDovYqAJjDQ==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("beTRUSTed Root CA - Entrust Implementation", "MGYxEjAQBgNVBAoTCWJlVFJVU1RlZDEbMBkGA1UECxMSYmVUUlVTVGVkIFJvb3QgQ0FzMTMwMQYD" + "VQQDEypiZVRSVVNUZWQgUm9vdCBDQSAtIEVudHJ1c3QgSW1wbGVtZW50YXRpb24=", "-----BEGIN CERTIFICATE-----\n" + "MIIGUTCCBTmgAwIBAgIEPLVPQDANBgkqhkiG9w0BAQUFADBmMRIwEAYDVQQKEwli\n" + "ZVRSVVNUZWQxGzAZBgNVBAsTEmJlVFJVU1RlZCBSb290IENBczEzMDEGA1UEAxMq\n" + "YmVUUlVTVGVkIFJvb3QgQ0EgLSBFbnRydXN0IEltcGxlbWVudGF0aW9uMB4XDTAy\n" + "MDQxMTA4MjQyN1oXDTIyMDQxMTA4NTQyN1owZjESMBAGA1UEChMJYmVUUlVTVGVk\n" + "MRswGQYDVQQLExJiZVRSVVNUZWQgUm9vdCBDQXMxMzAxBgNVBAMTKmJlVFJVU1Rl\n" + "ZCBSb290IENBIC0gRW50cnVzdCBJbXBsZW1lbnRhdGlvbjCCASIwDQYJKoZIhvcN\n" + "AQEBBQADggEPADCCAQoCggEBALr0RAOqEmq1Q+xVkrYwfTVXDNvzDSduTPdQqJtO\n" + "K2/b9a0cS12zqcH+e0TrW6MFDR/FNCswACnxeECypP869AGIF37m1CbTukzqMvtD\n" + "d5eHI8XbQ6P1KqNRXuE70mVpflUVm3rnafdE4Fe1FehmYA8NA/uCjqPoEXtsvsdj\n" + "DheT389Lrm5zdeDzqrmkwAkbhepxKYhBMvnwKg5sCfJ0a2ZsUhMfGLzUPvfYbiCe\n" + "yv78IZTuEyhL11xeDGbu6bsPwTSxfwh28z0mcMmLJR1iJAzqHHVOwBLkuhMdMCkt\n" + "VjMFu5dZfsZJT4nXLySotohAtWSSU1Yk5KKghbNekLQSM80CAwEAAaOCAwUwggMB\n" + "MIIBtwYDVR0gBIIBrjCCAaowggGmBg8rBgEEAbE+AAACCSiDkTEwggGRMIIBSQYI\n" + "KwYBBQUHAgIwggE7GoIBN1JlbGlhbmNlIG9uIG9yIHVzZSBvZiB0aGlzIENlcnRp\n" + "ZmljYXRlIGNyZWF0ZXMgYW4gYWNrbm93bGVkZ21lbnQgYW5kIGFjY2VwdGFuY2Ug\n" + "b2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFyZCB0ZXJtcyBhbmQgY29uZGl0\n" + "aW9ucyBvZiB1c2UsIHRoZSBDZXJ0aWZpY2F0aW9uIFByYWN0aWNlIFN0YXRlbWVu\n" + "dCBhbmQgdGhlIFJlbHlpbmcgUGFydHkgQWdyZWVtZW50LCB3aGljaCBjYW4gYmUg\n" + "Zm91bmQgYXQgdGhlIGJlVFJVU1RlZCB3ZWIgc2l0ZSwgaHR0cHM6Ly93d3cuYmV0\n" + "cnVzdGVkLmNvbS9wcm9kdWN0c19zZXJ2aWNlcy9pbmRleC5odG1sMEIGCCsGAQUF\n" + "BwIBFjZodHRwczovL3d3dy5iZXRydXN0ZWQuY29tL3Byb2R1Y3RzX3NlcnZpY2Vz\n" + "L2luZGV4Lmh0bWwwEQYJYIZIAYb4QgEBBAQDAgAHMIGJBgNVHR8EgYEwfzB9oHug\n" + "eaR3MHUxEjAQBgNVBAoTCWJlVFJVU1RlZDEbMBkGA1UECxMSYmVUUlVTVGVkIFJv\n" + "b3QgQ0FzMTMwMQYDVQQDEypiZVRSVVNUZWQgUm9vdCBDQSAtIEVudHJ1c3QgSW1w\n" + "bGVtZW50YXRpb24xDTALBgNVBAMTBENSTDEwKwYDVR0QBCQwIoAPMjAwMjA0MTEw\n" + "ODI0MjdagQ8yMDIyMDQxMTA4NTQyN1owCwYDVR0PBAQDAgEGMB8GA1UdIwQYMBaA\n" + "FH1w5a44iwY/qhwaj/nPJDCqhIQWMB0GA1UdDgQWBBR9cOWuOIsGP6ocGo/5zyQw\n" + "qoSEFjAMBgNVHRMEBTADAQH/MB0GCSqGSIb2fQdBAAQQMA4bCFY2LjA6NC4wAwIE\n" + "kDANBgkqhkiG9w0BAQUFAAOCAQEAKrgXzh8QlOu4mre5X+za95IkrNySO8cgjfKZ\n" + "5V04ocI07cUTWVwFtStPYZuR+0H8/NU8TZh2BvWBfevdkObRVlTa4y0MnxEylCIB\n" + "evZsLHRnBMylj44ss0O1lKLQfelifwa+JwGDnjr9iu6YQ0pr17WXOzq/T220Y/oz\n" + "ADQuLW2WyXvKmWO6vvT2MKAtmJbpVkQFqUSjYRDrgqFnXbxdJ3Wqiig2KjiS2d2k\n" + "XgClzMx8KSreKJCrt+G2/30lC0DYqjSjLd4H61/OCt3Kfjp9JsFiaDrmLzfzgYYh\n" + "xKlkqu9FNtEaZnz46TfW1mG+oq1I59/mdP7TbX3SJdysYlep9w==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("beTRUSTed Root CA - RSA Implementation", "MGIxEjAQBgNVBAoTCWJlVFJVU1RlZDEbMBkGA1UECxMSYmVUUlVTVGVkIFJvb3QgQ0FzMS8wLQYD" + "VQQDEyZiZVRSVVNUZWQgUm9vdCBDQSAtIFJTQSBJbXBsZW1lbnRhdGlvbg==", "-----BEGIN CERTIFICATE-----\n" + "MIIFaDCCBFCgAwIBAgIQO1nHe81bV569N1KsdrSqGjANBgkqhkiG9w0BAQUFADBi\n" + "MRIwEAYDVQQKEwliZVRSVVNUZWQxGzAZBgNVBAsTEmJlVFJVU1RlZCBSb290IENB\n" + "czEvMC0GA1UEAxMmYmVUUlVTVGVkIFJvb3QgQ0EgLSBSU0EgSW1wbGVtZW50YXRp\n" + "b24wHhcNMDIwNDExMTExODEzWhcNMjIwNDEyMTEwNzI1WjBiMRIwEAYDVQQKEwli\n" + "ZVRSVVNUZWQxGzAZBgNVBAsTEmJlVFJVU1RlZCBSb290IENBczEvMC0GA1UEAxMm\n" + "YmVUUlVTVGVkIFJvb3QgQ0EgLSBSU0EgSW1wbGVtZW50YXRpb24wggEiMA0GCSqG\n" + "SIb3DQEBAQUAA4IBDwAwggEKAoIBAQDkujQwCY5X0LkGLG9uJIAiv11DpvpPrILn\n" + "HGhwhRujbrWqeNluB0s/6d/16uhUoWGKDi9pdRi3DOUUjXFumLhV/AyV0Jtu4S2I\n" + "1DpAa5LxmZZk3tv/ePTulh1HiXzUvrmIdyM6CeYEnm2qXtLIvZpOGd+J6lsOfsPk\n" + "tPDgaTuID0GQ+NRxQyTBjyZLO1bp/4xsN+lFrYWMU8NghpBKlsmzVLC7F/AcRdnU\n" + "GxlkVgoZ98zh/4avflherHqQH8koOUV7orbHnB/ahdQhhlkwk75TMzf270HPM8er\n" + "cmsl9fNTGwxMLvF1S++gh/f+ihXQbNXL+WhTuXAVE8L1LvtDNXUtAgMBAAGjggIY\n" + "MIICFDAMBgNVHRMEBTADAQH/MIIBtQYDVR0gBIIBrDCCAagwggGkBg8rBgEEAbE+\n" + "AAADCSiDkTEwggGPMEEGCCsGAQUFBwIBFjVodHRwOi8vd3d3LmJldHJ1c3RlZC5j\n" + "b20vcHJvZHVjdHNfc2VydmljZXMvaW5kZXguaHRtbDCCAUgGCCsGAQUFBwICMIIB\n" + "OhqCATZSZWxpYW5jZSBvbiBvciB1c2Ugb2YgdGhpcyBDZXJ0aWZpY2F0ZSBjcmVh\n" + "dGVzIGFuIGFja25vd2xlZGdtZW50IGFuZCBhY2NlcHRhbmNlIG9mIHRoZSB0aGVu\n" + "IGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNl\n" + "LCB0aGUgQ2VydGlmaWNhdGlvbiBQcmFjdGljZSBTdGF0ZW1lbnQgYW5kIHRoZSBS\n" + "ZWx5aW5nIFBhcnR5IEFncmVlbWVudCwgd2hpY2ggY2FuIGJlIGZvdW5kIGF0IHRo\n" + "ZSBiZVRSVVNUZWQgd2ViIHNpdGUsIGh0dHA6Ly93d3cuYmV0cnVzdGVkLmNvbS9w\n" + "cm9kdWN0c19zZXJ2aWNlcy9pbmRleC5odG1sMAsGA1UdDwQEAwIBBjAfBgNVHSME\n" + "GDAWgBSp7BR++dlDzFMrFK3P9/BZiUHNGTAdBgNVHQ4EFgQUqewUfvnZQ8xTKxSt\n" + "z/fwWYlBzRkwDQYJKoZIhvcNAQEFBQADggEBANuXsHXqDMTBmMpWBcCorSZIry0g\n" + "6IHHtt9DwSwddUvUQo3neqh03GZCWYez9Wlt2ames30cMcH1VOJZJEnl7r05pmuK\n" + "mET7m9cqg5c0Lcd9NUwtNLg+DcTsiCevnpL9UGGCqGAHFFPMZRPB9kdEadIxyKbd\n" + "LrML3kqNWz2rDcI1UqJWN8wyiyiFQpyRQHpwKzg21eFzGh/l+n5f3NacOzDq28Bb\n" + "J1zTcwfBwvNMm2+fG8oeqqg4MwlYsq78B+g23FW6L09A/nq9BqaBwZMifIYRCgZ3\n" + "SK41ty8ymmFei74pnykkiFY5LKjSq5YDWtRIn7lAhAuYaPsBQ9Yb4gmxlxw=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("RSA Security 2048 v3", "MDoxGTAXBgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAyMDQ4" + "IFYz", "-----BEGIN CERTIFICATE-----\n" + "MIIDYTCCAkmgAwIBAgIQCgEBAQAAAnwAAAAKAAAAAjANBgkqhkiG9w0BAQUFADA6\n" + "MRkwFwYDVQQKExBSU0EgU2VjdXJpdHkgSW5jMR0wGwYDVQQLExRSU0EgU2VjdXJp\n" + "dHkgMjA0OCBWMzAeFw0wMTAyMjIyMDM5MjNaFw0yNjAyMjIyMDM5MjNaMDoxGTAX\n" + "BgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAy\n" + "MDQ4IFYzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt49VcdKA3Xtp\n" + "eafwGFAyPGJn9gqVB93mG/Oe2dJBVGutn3y+Gc37RqtBaB4Y6lXIL5F4iSj7Jylg\n" + "/9+PjDvJSZu1pJTOAeo+tWN7fyb9Gd3AIb2E0S1PRsNO3Ng3OTsor8udGuorryGl\n" + "wSMiuLgbWhOHV4PR8CDn6E8jQrAApX2J6elhc5SYcSa8LWrg903w8bYqODGBDSnh\n" + "AMFRD0xS+ARaqn1y07iHKrtjEAMqs6FPDVpeRrc9DvV07Jmf+T0kgYim3WBU6JU2\n" + "PcYJk5qjEoAAVZkZR73QpXzDuvsf9/UP+Ky5tfQ3mBMY3oVbtwyCO4dvlTlYMNpu\n" + "AWgXIszACwIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIB\n" + "BjAfBgNVHSMEGDAWgBQHw1EwpKrpRa41JPr/JCwz0LGdjDAdBgNVHQ4EFgQUB8NR\n" + "MKSq6UWuNST6/yQsM9CxnYwwDQYJKoZIhvcNAQEFBQADggEBAF8+hnZuuDU8TjYc\n" + "HnmYv/3VEhF5Ug7uMYm83X/50cYVIeiKAVQNOvtUudZj1LGqlk2iQk3UUx+LEN5/\n" + "Zb5gEydxiKRz44Rj0aRV4VCT5hsOedBnvEbIvz8XDZXmxpBp3ue0L96VfdASPz0+\n" + "f00/FGj1EVDVwfSQpQgdMWD/YIwjVAqv/qFuxdF6Kmh4zx6CCiC0H63lhbJqaHVO\n" + "rSU3lIW+vaHU6rcMSzyd6BIA8F+sDeGscGNz9395nzIlQnQFgCi/vcEkllgVsRch\n" + "6YlL2weIZ/QVrXA+L02FO8K32/6YaCOJ4XQP3vTFhGMpG8zLB8kApKnXwiJPZ9d3\n" + "7CAFYd4=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("RSA Security 1024 v3", "MDoxGTAXBgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAxMDI0" + "IFYz", "-----BEGIN CERTIFICATE-----\n" + "MIICXDCCAcWgAwIBAgIQCgEBAQAAAnwAAAALAAAAAjANBgkqhkiG9w0BAQUFADA6\n" + "MRkwFwYDVQQKExBSU0EgU2VjdXJpdHkgSW5jMR0wGwYDVQQLExRSU0EgU2VjdXJp\n" + "dHkgMTAyNCBWMzAeFw0wMTAyMjIyMTAxNDlaFw0yNjAyMjIyMDAxNDlaMDoxGTAX\n" + "BgNVBAoTEFJTQSBTZWN1cml0eSBJbmMxHTAbBgNVBAsTFFJTQSBTZWN1cml0eSAx\n" + "MDI0IFYzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDV3f5mCc8kPD6ugU5O\n" + "isRpgFtZO9+5TUzKtS3DJy08rwBCbbwoppbPf9dYrIMKo1W1exeQFYRMiu4mmdxY\n" + "78c4pqqv0I5CyGLXq6yp+0p9v+r+Ek3d/yYtbzZUaMjShFbuklNhCbM/OZuoyZu9\n" + "zp9+1BlqFikYvtc6adwlWzMaUQIDAQABo2MwYTAPBgNVHRMBAf8EBTADAQH/MA4G\n" + "A1UdDwEB/wQEAwIBBjAfBgNVHSMEGDAWgBTEwBykB5T9zU0B1FTapQxf3q4FWjAd\n" + "BgNVHQ4EFgQUxMAcpAeU/c1NAdRU2qUMX96uBVowDQYJKoZIhvcNAQEFBQADgYEA\n" + "Py1q4yZDlX2Jl2X7deRyHUZXxGFraZ8SmyzVWujAovBDleMf6XbN3Ou8k6BlCsdN\n" + "T1+nr6JGFLkM88y9am63nd4lQtBU/55oc2PcJOsiv6hy8l4A4Q1OOkNumU4/iXgD\n" + "mMrzVcydro7BqkWY+o8aoI2II/EVQQ2lRj6RP4vr93E=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GeoTrust Global CA", "MEIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVz" + "dCBHbG9iYWwgQ0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIDVDCCAjygAwIBAgIDAjRWMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT\n" + "MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i\n" + "YWwgQ0EwHhcNMDIwNTIxMDQwMDAwWhcNMjIwNTIxMDQwMDAwWjBCMQswCQYDVQQG\n" + "EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UEAxMSR2VvVHJ1c3Qg\n" + "R2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2swYYzD9\n" + "9BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9mOSm9BXiLnTjoBbdq\n" + "fnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIuT8rxh0PBFpVXLVDv\n" + "iS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6cJmTM386DGXHKTubU\n" + "1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmRCw7+OC7RHQWa9k0+\n" + "bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5aszPeE4uwc2hGKceeoW\n" + "MPRfwCvocWvk+QIDAQABo1MwUTAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTA\n" + "ephojYn7qwVkDBF9qn1luMrMTjAfBgNVHSMEGDAWgBTAephojYn7qwVkDBF9qn1l\n" + "uMrMTjANBgkqhkiG9w0BAQUFAAOCAQEANeMpauUvXVSOKVCUn5kaFOSPeCpilKIn\n" + "Z57QzxpeR+nBsqTP3UEaBU6bS+5Kb1VSsyShNwrrZHYqLizz/Tt1kL/6cdjHPTfS\n" + "tQWVYrmm3ok9Nns4d0iXrKYgjy6myQzCsplFAMfOEVEiIuCl6rYVSAlk6l5PdPcF\n" + "PseKUgzbFbS9bZvlxrFUaKnjaZC2mqUPuLk/IH2uSrW4nOQdtqvmlKXBx4Ot2/Un\n" + "hw4EbNX/3aBd7YdStysVAq45pmp06drE57xNNB6pXE0zX5IJL4hmXXeXxx12E6nV\n" + "5fEWCRE11azbJHFwLJhWC9kXtNHjUStedejV0NxPNO3CBWaAocvmMw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GeoTrust Global CA 2", "MEQxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMR0wGwYDVQQDExRHZW9UcnVz" + "dCBHbG9iYWwgQ0EgMg==", "-----BEGIN CERTIFICATE-----\n" + "MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW\n" + "MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs\n" + "IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG\n" + "EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg\n" + "R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A\n" + "PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8\n" + "Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL\n" + "TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL\n" + "5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7\n" + "S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe\n" + "2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE\n" + "FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap\n" + "EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td\n" + "EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv\n" + "/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN\n" + "A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0\n" + "abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF\n" + "I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz\n" + "4iIprn2DQKi6bA==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GeoTrust Universal CA", "MEUxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMR4wHAYDVQQDExVHZW9UcnVz" + "dCBVbml2ZXJzYWwgQ0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW\n" + "MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy\n" + "c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE\n" + "BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0\n" + "IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV\n" + "VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8\n" + "cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT\n" + "QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh\n" + "F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v\n" + "c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w\n" + "mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd\n" + "VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX\n" + "teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ\n" + "f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe\n" + "Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+\n" + "nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB\n" + "/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY\n" + "MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG\n" + "9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc\n" + "aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX\n" + "IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn\n" + "ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z\n" + "uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN\n" + "Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja\n" + "QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW\n" + "koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9\n" + "ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt\n" + "DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm\n" + "bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("GeoTrust Universal CA 2", "MEcxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMSAwHgYDVQQDExdHZW9UcnVz" + "dCBVbml2ZXJzYWwgQ0EgMg==", "-----BEGIN CERTIFICATE-----\n" + "MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW\n" + "MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy\n" + "c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD\n" + "VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1\n" + "c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC\n" + "AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81\n" + "WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG\n" + "FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq\n" + "XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL\n" + "se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb\n" + "KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd\n" + "IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73\n" + "y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt\n" + "hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc\n" + "QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4\n" + "Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV\n" + "HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV\n" + "HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ\n" + "KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z\n" + "dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ\n" + "L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr\n" + "Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo\n" + "ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY\n" + "T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz\n" + "GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m\n" + "1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV\n" + "OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH\n" + "6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX\n" + "QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("UTN-USER First-Network Applications", "MIGjMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4w" + "HAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRy" + "dXN0LmNvbTErMCkGA1UEAxMiVVROLVVTRVJGaXJzdC1OZXR3b3JrIEFwcGxpY2F0aW9ucw==", "-----BEGIN CERTIFICATE-----\n" + "MIIEZDCCA0ygAwIBAgIQRL4Mi1AAJLQR0zYwS8AzdzANBgkqhkiG9w0BAQUFADCB\n" + "ozELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\n" + "Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\n" + "dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xKzApBgNVBAMTIlVUTi1VU0VSRmlyc3Qt\n" + "TmV0d29yayBBcHBsaWNhdGlvbnMwHhcNOTkwNzA5MTg0ODM5WhcNMTkwNzA5MTg1\n" + "NzQ5WjCBozELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0\n" + "IExha2UgQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYD\n" + "VQQLExhodHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xKzApBgNVBAMTIlVUTi1VU0VS\n" + "Rmlyc3QtTmV0d29yayBBcHBsaWNhdGlvbnMwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n" + "DwAwggEKAoIBAQCz+5Gh5DZVhawGNFugmliy+LUPBXeDrjKxdpJo7CNKyXY/45y2\n" + "N3kDuatpjQclthln5LAbGHNhSuh+zdMvZOOmfAz6F4CjDUeJT1FxL+78P/m4FoCH\n" + "iZMlIJpDgmkkdihZNaEdwH+DBmQWICzTSaSFtMBhf1EI+GgVkYDLpdXuOzr0hARe\n" + "YFmnjDRy7rh4xdE7EkpvfmUnuaRVxblvQ6TFHSyZwFKkeEwVs0CYCGtDxgGwenv1\n" + "axwiP8vv/6jQOkt2FZ7S0cYu49tXGzKiuG/ohqY/cKvlcJKrRB5AUPuco2LkbG6g\n" + "yN7igEL66S/ozjIEj3yNtxyjNTwV3Z7DrpelAgMBAAGjgZEwgY4wCwYDVR0PBAQD\n" + "AgHGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFPqGydvguul49Uuo1hXf8NPh\n" + "ahQ8ME8GA1UdHwRIMEYwRKBCoECGPmh0dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9V\n" + "VE4tVVNFUkZpcnN0LU5ldHdvcmtBcHBsaWNhdGlvbnMuY3JsMA0GCSqGSIb3DQEB\n" + "BQUAA4IBAQCk8yXM0dSRgyLQzDKrm5ZONJFUICU0YV8qAhXhi6r/fWRRzwr/vH3Y\n" + "IWp4yy9Rb/hCHTO967V7lMPDqaAt39EpHx3+jz+7qEUqf9FuVSTiuwL7MT++6Lzs\n" + "QCv4AdRWOOTKRIK1YSAhZ2X28AvnNPilwpyjXEAfhZOVBt5P1CeptqX8Fs1zMT+4\n" + "ZSfP1FMa8Kxun08FDAOBp4QpxFq9ZFdyrTvPNximmMatBrTcCKME1SmklpoSZ0qM\n" + "YEWd8SOasACcaLWYUNPvji6SZbFIPiG+FTAqDbUMo2s/rn9X9R+WfN9v3YIwLGUb\n" + "QErNaLly7HF27FSOH4UMAWr6pjisH8SE\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("America Online Root Certification Authority 1", "MGMxCzAJBgNVBAYTAlVTMRwwGgYDVQQKExNBbWVyaWNhIE9ubGluZSBJbmMuMTYwNAYDVQQDEy1B" + "bWVyaWNhIE9ubGluZSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IDE=", "-----BEGIN CERTIFICATE-----\n" + "MIIDpDCCAoygAwIBAgIBATANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEc\n" + "MBoGA1UEChMTQW1lcmljYSBPbmxpbmUgSW5jLjE2MDQGA1UEAxMtQW1lcmljYSBP\n" + "bmxpbmUgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAxMB4XDTAyMDUyODA2\n" + "MDAwMFoXDTM3MTExOTIwNDMwMFowYzELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE0Ft\n" + "ZXJpY2EgT25saW5lIEluYy4xNjA0BgNVBAMTLUFtZXJpY2EgT25saW5lIFJvb3Qg\n" + "Q2VydGlmaWNhdGlvbiBBdXRob3JpdHkgMTCCASIwDQYJKoZIhvcNAQEBBQADggEP\n" + "ADCCAQoCggEBAKgv6KRpBgNHw+kqmP8ZonCaxlCyfqXfaE0bfA+2l2h9LaaLl+lk\n" + "hsmj76CGv2BlnEtUiMJIxUo5vxTjWVXlGbR0yLQFOVwWpeKVBeASrlmLojNoWBym\n" + "1BW32J/X3HGrfpq/m44zDyL9Hy7nBzbvYjnF3cu6JRQj3gzGPTzOggjmZj7aUTsW\n" + "OqMFf6Dch9Wc/HKpoH145LcxVR5lu9RhsCFg7RAycsWSJR74kEoYeEfffjA3PlAb\n" + "2xzTa5qGUwew76wGePiEmf4hjUyAtgyC9mZweRrTT6PP8c9GsEsPPt2IYriMqQko\n" + "O3rHl+Ee5fSfwMCuJKDIodkP1nsmgmkyPacCAwEAAaNjMGEwDwYDVR0TAQH/BAUw\n" + "AwEB/zAdBgNVHQ4EFgQUAK3Zo/Z59m50qX8zPYEX10zPM94wHwYDVR0jBBgwFoAU\n" + "AK3Zo/Z59m50qX8zPYEX10zPM94wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEB\n" + "BQUAA4IBAQB8itEfGDeC4Liwo+1WlchiYZwFos3CYiZhzRAW18y0ZTTQEYqtqKkF\n" + "Zu90821fnZmv9ov761KyBZiibyrFVL0lvV+uyIbqRizBs73B6UlwGBaXCBOMIOAb\n" + "LjpHyx7kADCVW/RFo8AasAFOq73AI25jP4BKxQft3OJvx8Fi8eNy1gTIdGcL+oir\n" + "oQHIb/AUr9KZzVGTfu0uOMe9zkZQPXLjeSWdm4grECDdpbgyn43gKd8hdIaC2y+C\n" + "MMbHNYaz+ZZfRtsMRf3zUMNvxsNIrUam4SdHCh0Om7bCd39j8uB9Gr784N/Xx6ds\n" + "sPmuujz9dLQR6FgNgLzTqIA6me11zEZ7\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("America Online Root Certification Authority 2", "MGMxCzAJBgNVBAYTAlVTMRwwGgYDVQQKExNBbWVyaWNhIE9ubGluZSBJbmMuMTYwNAYDVQQDEy1B" + "bWVyaWNhIE9ubGluZSBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IDI=", "-----BEGIN CERTIFICATE-----\n" + "MIIFpDCCA4ygAwIBAgIBATANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEc\n" + "MBoGA1UEChMTQW1lcmljYSBPbmxpbmUgSW5jLjE2MDQGA1UEAxMtQW1lcmljYSBP\n" + "bmxpbmUgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAyMB4XDTAyMDUyODA2\n" + "MDAwMFoXDTM3MDkyOTE0MDgwMFowYzELMAkGA1UEBhMCVVMxHDAaBgNVBAoTE0Ft\n" + "ZXJpY2EgT25saW5lIEluYy4xNjA0BgNVBAMTLUFtZXJpY2EgT25saW5lIFJvb3Qg\n" + "Q2VydGlmaWNhdGlvbiBBdXRob3JpdHkgMjCCAiIwDQYJKoZIhvcNAQEBBQADggIP\n" + "ADCCAgoCggIBAMxBRR3pPU0Q9oyxQcngXssNt79Hc9PwVU3dxgz6sWYFas14tNwC\n" + "206B89enfHG8dWOgXeMHDEjsJcQDIPT/DjsS/5uN4cbVG7RtIuOx238hZK+GvFci\n" + "KtZHgVdEglZTvYYUAQv8f3SkWq7xuhG1m1hagLQ3eAkzfDJHA1zEpYNI9FdWboE2\n" + "JxhP7JsowtS013wMPgwr38oE18aO6lhOqKSlGBxsRZijQdEt0sdtjRnxrXm3gT+9\n" + "BoInLRBYBbV4Bbkv2wxrkJB+FFk4u5QkE+XRnRTf04JNRvCAOVIyD+OEsnpD8l7e\n" + "Xz8d3eOyG6ChKiMDbi4BFYdcpnV1x5dhvt6G3NRI270qv0pV2uh9UPu0gBe4lL8B\n" + "PeraunzgWGcXuVjgiIZGZ2ydEEdYMtA1fHkqkKJaEBEjNa0vzORKW6fIJ/KD3l67\n" + "Xnfn6KVuY8INXWHQjNJsWiEOyiijzirplcdIz5ZvHZIlyMbGwcEMBawmxNJ10uEq\n" + "Z8A9W6Wa6897GqidFEXlD6CaZd4vKL3Ob5Rmg0gp2OpljK+T2WSfVVcmv2/LNzGZ\n" + "o2C7HK2JNDJiuEMhBnIMoVxtRsX6Kc8w3onccVvdtjc+31D1uAclJuW8tf48ArO3\n" + "+L5DwYcRlJ4jbBeKuIonDFRH8KmzwICMoCfrHRnjB453cMor9H124HhnAgMBAAGj\n" + "YzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFE1FwWg4u3OpaaEg5+31IqEj\n" + "FNeeMB8GA1UdIwQYMBaAFE1FwWg4u3OpaaEg5+31IqEjFNeeMA4GA1UdDwEB/wQE\n" + "AwIBhjANBgkqhkiG9w0BAQUFAAOCAgEAZ2sGuV9FOypLM7PmG2tZTiLMubekJcmn\n" + "xPBUlgtk87FYT15R/LKXeydlwuXK5w0MJXti4/qftIe3RUavg6WXSIylvfEWK5t2\n" + "LHo1YGwRgJfMqZJS5ivmae2p+DYtLHe/YUjRYwu5W1LtGLBDQiKmsXeu3mnFzccc\n" + "obGlHBD7GL4acN3Bkku+KVqdPzW+5X1R+FXgJXUjhx5c3LqdsKyzadsXg8n33gy8\n" + "CNyRnqjQ1xU3c6U1uPx+xURABsPr+CKAXEfOAuMRn0T//ZoyzH1kUQ7rVyZ2OuMe\n" + "IjzCpjbdGe+n/BLzJsBZMYVMnNjP36TMzCmT/5RtdlwTCJfy7aULTd3oyWgOZtMA\n" + "DjMSW7yV5TKQqLPGbIOtd+6Lfn6xqavT4fG2wLHqiMDn05DpKJKUe2h7lyoKZy2F\n" + "AjgQ5ANh1NolNscIWC2hp1GvMApJ9aZphwctREZ2jirlmjvXGKL8nDgQzMY70rUX\n" + "Om/9riW99XJZZLF0KjhfGEzfz3EEWjbUvy+ZnOjZurGV5gJLIaFb1cFPj65pbVPb\n" + "AZO1XB4Y3WRayhgoPmMEEf0cjQAPuDffZ4qdZqkCapH/E8ovXYO8h5Ns3CRRFgQl\n" + "Zvqz2cK6Kb6aSDiCmfS/O0oxGfm/jiEzFMpPVF/7zvuPcX/9XhmgD0uRuMRUvAaw\n" + "RY8mkaKO/qk=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Visa eCommerce Root", "MGsxCzAJBgNVBAYTAlVTMQ0wCwYDVQQKEwRWSVNBMS8wLQYDVQQLEyZWaXNhIEludGVybmF0aW9u" + "YWwgU2VydmljZSBBc3NvY2lhdGlvbjEcMBoGA1UEAxMTVmlzYSBlQ29tbWVyY2UgUm9vdA==", "-----BEGIN CERTIFICATE-----\n" + "MIIDojCCAoqgAwIBAgIQE4Y1TR0/BvLB+WUF1ZAcYjANBgkqhkiG9w0BAQUFADBr\n" + "MQswCQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRl\n" + "cm5hdGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNv\n" + "bW1lcmNlIFJvb3QwHhcNMDIwNjI2MDIxODM2WhcNMjIwNjI0MDAxNjEyWjBrMQsw\n" + "CQYDVQQGEwJVUzENMAsGA1UEChMEVklTQTEvMC0GA1UECxMmVmlzYSBJbnRlcm5h\n" + "dGlvbmFsIFNlcnZpY2UgQXNzb2NpYXRpb24xHDAaBgNVBAMTE1Zpc2EgZUNvbW1l\n" + "cmNlIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvV95WHm6h\n" + "2mCxlCfLF9sHP4CFT8icttD0b0/Pmdjh28JIXDqsOTPHH2qLJj0rNfVIsZHBAk4E\n" + "lpF7sDPwsRROEW+1QK8bRaVK7362rPKgH1g/EkZgPI2h4H3PVz4zHvtH8aoVlwdV\n" + "ZqW1LS7YgFmypw23RuwhY/81q6UCzyr0TP579ZRdhE2o8mCP2w4lPJ9zcc+U30rq\n" + "299yOIzzlr3xF7zSujtFWsan9sYXiwGd/BmoKoMWuDpI/k4+oKsGGelT84ATB+0t\n" + "vz8KPFUgOSwsAGl0lUq8ILKpeeUYiZGo3BxN77t+Nwtd/jmliFKMAGzsGHxBvfaL\n" + "dXe6YJ2E5/4tAgMBAAGjQjBAMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQD\n" + "AgEGMB0GA1UdDgQWBBQVOIMPPyw/cDMezUb+B4wg4NfDtzANBgkqhkiG9w0BAQUF\n" + "AAOCAQEAX/FBfXxcCLkr4NWSR/pnXKUTwwMhmytMiUbPWU3J/qVAtmPN3XEolWcR\n" + "zCSs00Rsca4BIGsDoo8Ytyk6feUWYFN4PMCvFYP3j1IzJL1kk5fui/fbGKhtcbP3\n" + "LBfQdCVp9/5rPJS+TUtBjE7ic9DjkCJzQ83z7+pzzkWKsKZJ/0x9nXGIxHYdkFsd\n" + "7v3M9+79YKWxehZx0RbQfBI8bGmX265fOZpwLwU8GUYEmSA20GBuYQa7FkKMcPcw\n" + "++DbZqMAAb3mLNqRX6BGi01qnD093QVG/na/oAo85ADmJ7f/hC3euiInlhBx6yLt\n" + "398znM/jra6O1I7mT1GvFpLgXPYHDw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("TC TrustCenter, Germany, Class 2 CA", "MIG8MQswCQYDVQQGEwJERTEQMA4GA1UECBMHSGFtYnVyZzEQMA4GA1UEBxMHSGFtYnVyZzE6MDgG" + "A1UEChMxVEMgVHJ1c3RDZW50ZXIgZm9yIFNlY3VyaXR5IGluIERhdGEgTmV0d29ya3MgR21iSDEi" + "MCAGA1UECxMZVEMgVHJ1c3RDZW50ZXIgQ2xhc3MgMiBDQTEpMCcGCSqGSIb3DQEJARYaY2VydGlm" + "aWNhdGVAdHJ1c3RjZW50ZXIuZGU=", "-----BEGIN CERTIFICATE-----\n" + "MIIDXDCCAsWgAwIBAgICA+owDQYJKoZIhvcNAQEEBQAwgbwxCzAJBgNVBAYTAkRF\n" + "MRAwDgYDVQQIEwdIYW1idXJnMRAwDgYDVQQHEwdIYW1idXJnMTowOAYDVQQKEzFU\n" + "QyBUcnVzdENlbnRlciBmb3IgU2VjdXJpdHkgaW4gRGF0YSBOZXR3b3JrcyBHbWJI\n" + "MSIwIAYDVQQLExlUQyBUcnVzdENlbnRlciBDbGFzcyAyIENBMSkwJwYJKoZIhvcN\n" + "AQkBFhpjZXJ0aWZpY2F0ZUB0cnVzdGNlbnRlci5kZTAeFw05ODAzMDkxMTU5NTla\n" + "Fw0xMTAxMDExMTU5NTlaMIG8MQswCQYDVQQGEwJERTEQMA4GA1UECBMHSGFtYnVy\n" + "ZzEQMA4GA1UEBxMHSGFtYnVyZzE6MDgGA1UEChMxVEMgVHJ1c3RDZW50ZXIgZm9y\n" + "IFNlY3VyaXR5IGluIERhdGEgTmV0d29ya3MgR21iSDEiMCAGA1UECxMZVEMgVHJ1\n" + "c3RDZW50ZXIgQ2xhc3MgMiBDQTEpMCcGCSqGSIb3DQEJARYaY2VydGlmaWNhdGVA\n" + "dHJ1c3RjZW50ZXIuZGUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBANo46O0y\n" + "AClxgwENv4wB3NrGrTmkqYov1YtcaF9QxmL1Zr3KkSLsqh1R1z2zUbKDTl3LSbDw\n" + "TFXlay3HhQswHJJOgtTKAu33b77c4OMUuAVT8pr0VotanoWT0bSCVq5Nu6hLVxa8\n" + "/vhYnvgpjbB7zXjJT6yLZwzxnPv8V5tXXE8NAgMBAAGjazBpMA8GA1UdEwEB/wQF\n" + "MAMBAf8wDgYDVR0PAQH/BAQDAgGGMDMGCWCGSAGG+EIBCAQmFiRodHRwOi8vd3d3\n" + "LnRydXN0Y2VudGVyLmRlL2d1aWRlbGluZXMwEQYJYIZIAYb4QgEBBAQDAgAHMA0G\n" + "CSqGSIb3DQEBBAUAA4GBAIRS+yjf/x91AbwBvgRWl2p0QiQxg/lGsQaKic+WLDO/\n" + "jLVfenKhhQbOhvgFjuj5Jcrag4wGrOs2bYWRNAQ29ELw+HkuCkhcq8xRT3h2oNms\n" + "Gb0q0WkEKJHKNhAngFdb0lz1wlurZIFjdFH0l7/NEij3TWZ/p/AcASZ4smZHcFFk\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("TC TrustCenter, Germany, Class 3 CA", "MIG8MQswCQYDVQQGEwJERTEQMA4GA1UECBMHSGFtYnVyZzEQMA4GA1UEBxMHSGFtYnVyZzE6MDgG" + "A1UEChMxVEMgVHJ1c3RDZW50ZXIgZm9yIFNlY3VyaXR5IGluIERhdGEgTmV0d29ya3MgR21iSDEi" + "MCAGA1UECxMZVEMgVHJ1c3RDZW50ZXIgQ2xhc3MgMyBDQTEpMCcGCSqGSIb3DQEJARYaY2VydGlm" + "aWNhdGVAdHJ1c3RjZW50ZXIuZGU=", "-----BEGIN CERTIFICATE-----\n" + "MIIDXDCCAsWgAwIBAgICA+swDQYJKoZIhvcNAQEEBQAwgbwxCzAJBgNVBAYTAkRF\n" + "MRAwDgYDVQQIEwdIYW1idXJnMRAwDgYDVQQHEwdIYW1idXJnMTowOAYDVQQKEzFU\n" + "QyBUcnVzdENlbnRlciBmb3IgU2VjdXJpdHkgaW4gRGF0YSBOZXR3b3JrcyBHbWJI\n" + "MSIwIAYDVQQLExlUQyBUcnVzdENlbnRlciBDbGFzcyAzIENBMSkwJwYJKoZIhvcN\n" + "AQkBFhpjZXJ0aWZpY2F0ZUB0cnVzdGNlbnRlci5kZTAeFw05ODAzMDkxMTU5NTla\n" + "Fw0xMTAxMDExMTU5NTlaMIG8MQswCQYDVQQGEwJERTEQMA4GA1UECBMHSGFtYnVy\n" + "ZzEQMA4GA1UEBxMHSGFtYnVyZzE6MDgGA1UEChMxVEMgVHJ1c3RDZW50ZXIgZm9y\n" + "IFNlY3VyaXR5IGluIERhdGEgTmV0d29ya3MgR21iSDEiMCAGA1UECxMZVEMgVHJ1\n" + "c3RDZW50ZXIgQ2xhc3MgMyBDQTEpMCcGCSqGSIb3DQEJARYaY2VydGlmaWNhdGVA\n" + "dHJ1c3RjZW50ZXIuZGUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALa0wTUF\n" + "Lg2N7KBAahwOJ6ZQkmtQGwfeLud2zODa/ISoXoxjaitN2U4CdhHBC/KNecoAtvGw\n" + "Dtf7pBc9r6tpepYnv68zoZoqWarEtTcI8hKlMbZD9TKWcSgoq40oht+77uMMfTDW\n" + "w1Krj10nnGvAo+cFa1dJRLNu6mTP0o56UHd3AgMBAAGjazBpMA8GA1UdEwEB/wQF\n" + "MAMBAf8wDgYDVR0PAQH/BAQDAgGGMDMGCWCGSAGG+EIBCAQmFiRodHRwOi8vd3d3\n" + "LnRydXN0Y2VudGVyLmRlL2d1aWRlbGluZXMwEQYJYIZIAYb4QgEBBAQDAgAHMA0G\n" + "CSqGSIb3DQEBBAUAA4GBABY9xs3Bu4VxhUafPiCPUSiZ7C1FIWMjWwS7TJC4iJIE\n" + "Tb19AaM/9uzO8d7+feXhPrvGq14L3T2WxMup1Pkm5gZOngylerpuw3yCGdHHsbHD\n" + "2w2Om0B8NwvxXej9H5CIpQ5ON2QhqE6NtJ/x3kit1VYYUimLRzQSCdS7kjXvD9s0\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Certum Root CA", "MD4xCzAJBgNVBAYTAlBMMRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNl" + "cnR1bSBDQQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIDDDCCAfSgAwIBAgIDAQAgMA0GCSqGSIb3DQEBBQUAMD4xCzAJBgNVBAYTAlBM\n" + "MRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD\n" + "QTAeFw0wMjA2MTExMDQ2MzlaFw0yNzA2MTExMDQ2MzlaMD4xCzAJBgNVBAYTAlBM\n" + "MRswGQYDVQQKExJVbml6ZXRvIFNwLiB6IG8uby4xEjAQBgNVBAMTCUNlcnR1bSBD\n" + "QTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM6xwS7TT3zNJc4YPk/E\n" + "jG+AanPIW1H4m9LcuwBcsaD8dQPugfCI7iNS6eYVM42sLQnFdvkrOYCJ5JdLkKWo\n" + "ePhzQ3ukYbDYWMzhbGZ+nPMJXlVjhNWo7/OxLjBos8Q82KxujZlakE403Daaj4GI\n" + "ULdtlkIJ89eVgw1BS7Bqa/j8D35in2fE7SZfECYPCE/wpFcozo+47UX2bu4lXapu\n" + "Ob7kky/ZR6By6/qmW6/KUz/iDsaWVhFu9+lmqSbYf5VT7QqFiLpPKaVCjF62/IUg\n" + "AKpoC6EahQGcxEZjgoi2IrHu/qpGWX7PNSzVttpd90gzFFS269lvzs2I1qsb2pY7\n" + "HVkCAwEAAaMTMBEwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEA\n" + "uI3O7+cUus/usESSbLQ5PqKEbq24IXfS1HeCh+YgQYHu4vgRt2PRFze+GXYkHAQa\n" + "TOs9qmdvLdTN/mUxcMUbpgIKumB7bVjCmkn+YzILa+M6wKyrO7Do0wlRjBCDxjTg\n" + "xSvgGrZgFCdsMneMvLJymM/NzD+5yCRCFNZX/OYmQ6kd5YCQzgNUKD73P9P4Te1q\n" + "CjqTE5s7FCMTY5w/0YcneeVMUeMBrYVdGjux1XMQpNPyvG5k9VpWkKjHDkx0Dy5x\n" + "O/fIR/RpbxXyEV6DHpx8Uq79AtoSqFlnGNu8cN2bsWntgM6JQEhqDjXKKWYVIZQs\n" + "6GAqm4VKQPNriiTsBhYscw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Comodo AAA Services root", "MHsxCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcMB1Nh" + "bGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSEwHwYDVQQDDBhBQUEgQ2VydGlmaWNh" + "dGUgU2VydmljZXM=", "-----BEGIN CERTIFICATE-----\n" + "MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb\n" + "MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow\n" + "GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj\n" + "YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL\n" + "MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE\n" + "BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM\n" + "GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP\n" + "ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua\n" + "BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe\n" + "3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4\n" + "YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR\n" + "rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm\n" + "ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU\n" + "oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF\n" + "MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v\n" + "QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t\n" + "b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF\n" + "AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q\n" + "GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz\n" + "Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2\n" + "G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi\n" + "l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3\n" + "smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Comodo Secure Services root", "MH4xCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcMB1Nh" + "bGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSQwIgYDVQQDDBtTZWN1cmUgQ2VydGlm" + "aWNhdGUgU2VydmljZXM=", "-----BEGIN CERTIFICATE-----\n" + "MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQQGEwJHQjEb\n" + "MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow\n" + "GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEkMCIGA1UEAwwbU2VjdXJlIENlcnRp\n" + "ZmljYXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVow\n" + "fjELMAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G\n" + "A1UEBwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxJDAiBgNV\n" + "BAMMG1NlY3VyZSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEB\n" + "BQADggEPADCCAQoCggEBAMBxM4KK0HDrc4eCQNUd5MvJDkKQ+d40uaG6EfQlhfPM\n" + "cm3ye5drswfxdySRXyWP9nQ95IDC+DwN879A6vfIUtFyb+/Iq0G4bi4XKpVpDM3S\n" + "HpR7LZQdqnXXs5jLrLxkU0C8j6ysNstcrbvd4JQX7NFc0L/vpZXJkMWwrPsbQ996\n" + "CF23uPJAGysnnlDOXmWCiIxe004MeuoIkbY2qitC++rCoznl2yY4rYsK7hljxxwk\n" + "3wN42ubqwUcaCwtGCd0C/N7Lh1/XMGNooa7cMqG6vv5Eq2i2pRcV/b3Vp6ea5EQz\n" + "6YiO/O1R65NxTq0B50SOqy3LqP4BSUjwwN3HaNiS/j0CAwEAAaOBxzCBxDAdBgNV\n" + "HQ4EFgQUPNiTiMLAggnMAZkGkyDpnnAJY08wDgYDVR0PAQH/BAQDAgEGMA8GA1Ud\n" + "EwEB/wQFMAMBAf8wgYEGA1UdHwR6MHgwO6A5oDeGNWh0dHA6Ly9jcmwuY29tb2Rv\n" + "Y2EuY29tL1NlY3VyZUNlcnRpZmljYXRlU2VydmljZXMuY3JsMDmgN6A1hjNodHRw\n" + "Oi8vY3JsLmNvbW9kby5uZXQvU2VjdXJlQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmww\n" + "DQYJKoZIhvcNAQEFBQADggEBAIcBbSMdflsXfcFhMs+P5/OKlFlm4J4oqF7Tt/Q0\n" + "5qo5spcWxYJvMqTpjOev/e/C6LlLqqP05tqNZSH7uoDrJiiFGv45jN5bBAS0VPmj\n" + "Z55B+glSzAVIqMk/IQQezkhr/IXownuvf7fM+F86/TXGDe+X3EyrEeFryzHRbPtI\n" + "gKvcnDe4IRRLDXE97IMzbtFuMhbsmMcWi1mmNKsFVy2T96oTy9IT4rcuO81rUBcJ\n" + "aD61JlfutuC23bkpgHl9j6PwpCikFcSF9CfUa7/lXORlAnZUtOM3ZiTTGWHIUhDl\n" + "izeauan5Hb/qmZJhlv8BzaFfDbxxvA6sCx1HRR3B7Hzs/Sk=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Comodo Trusted Services root", "MH8xCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAOBgNVBAcMB1Nh" + "bGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSUwIwYDVQQDDBxUcnVzdGVkIENlcnRp" + "ZmljYXRlIFNlcnZpY2Vz", "-----BEGIN CERTIFICATE-----\n" + "MIIEQzCCAyugAwIBAgIBATANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJHQjEb\n" + "MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow\n" + "GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDElMCMGA1UEAwwcVHJ1c3RlZCBDZXJ0\n" + "aWZpY2F0ZSBTZXJ2aWNlczAeFw0wNDAxMDEwMDAwMDBaFw0yODEyMzEyMzU5NTla\n" + "MH8xCzAJBgNVBAYTAkdCMRswGQYDVQQIDBJHcmVhdGVyIE1hbmNoZXN0ZXIxEDAO\n" + "BgNVBAcMB1NhbGZvcmQxGjAYBgNVBAoMEUNvbW9kbyBDQSBMaW1pdGVkMSUwIwYD\n" + "VQQDDBxUcnVzdGVkIENlcnRpZmljYXRlIFNlcnZpY2VzMIIBIjANBgkqhkiG9w0B\n" + "AQEFAAOCAQ8AMIIBCgKCAQEA33FvNlhTWvI2VFeAxHQIIO0Yfyod5jWaHiWsnOWW\n" + "fnJSoBVC21ndZHoa0Lh73TkVvFVIxO06AOoxEbrycXQaZ7jPM8yoMa+j49d/vzMt\n" + "TGo87IvDktJTdyR0nAducPy9C1t2ul/y/9c3S0pgePfw+spwtOpZqqPOSC+pw7IL\n" + "fhdyFgymBwwbOM/JYrc/oJOlh0Hyt3BAd9i+FHzjqMB6juljatEPmsbS9Is6FARW\n" + "1O24zG71++IsWL1/T2sr92AkWCTOJu80kTrV44HQsvAEAtdbtz6SrGsSivnkBbA7\n" + "kUlcsutT6vifR4buv5XAwAaf0lteERv0xwQ1KdJVXOTt6wIDAQABo4HJMIHGMB0G\n" + "A1UdDgQWBBTFe1i97doladL3WRaoszLAeydb9DAOBgNVHQ8BAf8EBAMCAQYwDwYD\n" + "VR0TAQH/BAUwAwEB/zCBgwYDVR0fBHwwejA8oDqgOIY2aHR0cDovL2NybC5jb21v\n" + "ZG9jYS5jb20vVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMuY3JsMDqgOKA2hjRo\n" + "dHRwOi8vY3JsLmNvbW9kby5uZXQvVHJ1c3RlZENlcnRpZmljYXRlU2VydmljZXMu\n" + "Y3JsMA0GCSqGSIb3DQEBBQUAA4IBAQDIk4E7ibSvuIQSTI3S8NtwuleGFTQQuS9/\n" + "HrCoiWChisJ3DFBKmwCL2Iv0QeLQg4pKHBQGsKNoBXAxMKdTmw7pSqBYaWcOrp32\n" + "pSxBvzwGa+RZzG0Q8ZZvH9/0BAKkn0U+yNj6NkZEUD+Cl5EfKNsYEYwq5GWDVxIS\n" + "jBc/lDb+XbDABHcTuPQV1T84zJQ6VdCsmPW6AF/ghhmBeC8owH7TzEIK9a5QoNE+\n" + "xqFx7D+gIIxmOom0jtTYsU0lR+4viMi14QVFwL4Ucd56/Y57fU0IlqUSc/Atyjcn\n" + "dBInTMu2l+nZrghtWjlA3QVHdWpaIbOjGM9O9y5Xt5hwXsjEeLBi\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS Chained CAs root", "MIIBHDELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25h" + "MS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQK" + "FCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMTMwMQYDVQQLEypJUFMgQ0EgQ2hh" + "aW5lZCBDQXMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxMzAxBgNVBAMTKklQUyBDQSBDaGFpbmVk" + "IENBcyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEeMBwGCSqGSIb3DQEJARYPaXBzQG1haWwuaXBz" + "LmVz", "-----BEGIN CERTIFICATE-----\n" + "MIIH9zCCB2CgAwIBAgIBADANBgkqhkiG9w0BAQUFADCCARwxCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQBgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UE\n" + "ChMlSVBTIEludGVybmV0IHB1Ymxpc2hpbmcgU2VydmljZXMgcy5sLjErMCkGA1UE\n" + "ChQiaXBzQG1haWwuaXBzLmVzIEMuSS5GLiAgQi02MDkyOTQ1MjEzMDEGA1UECxMq\n" + "SVBTIENBIENoYWluZWQgQ0FzIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MTMwMQYD\n" + "VQQDEypJUFMgQ0EgQ2hhaW5lZCBDQXMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkx\n" + "HjAcBgkqhkiG9w0BCQEWD2lwc0BtYWlsLmlwcy5lczAeFw0wMTEyMjkwMDUzNTha\n" + "Fw0yNTEyMjcwMDUzNThaMIIBHDELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNl\n" + "bG9uYTESMBAGA1UEBxMJQmFyY2Vsb25hMS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQg\n" + "cHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQKFCJpcHNAbWFpbC5pcHMu\n" + "ZXMgQy5JLkYuICBCLTYwOTI5NDUyMTMwMQYDVQQLEypJUFMgQ0EgQ2hhaW5lZCBD\n" + "QXMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxMzAxBgNVBAMTKklQUyBDQSBDaGFp\n" + "bmVkIENBcyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEeMBwGCSqGSIb3DQEJARYP\n" + "aXBzQG1haWwuaXBzLmVzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcVpJJ\n" + "spQgvJhPUOtopKdJC7/SMejHT8KGC/po/UNaivNgkjWZOLtNA1IhW/A3mTXhQSCB\n" + "hYEFcYGdtJUZqV92NC5jNzVXjrQfQj8VXOF6wV8TGDIxya2+o8eDZh65nAQTy2nB\n" + "Bt4wBrszo7Uf8I9vzv+W6FS+ZoCua9tBhDaiPQIDAQABo4IEQzCCBD8wHQYDVR0O\n" + "BBYEFKGtMbH5PuEXpsirNPxShwkeYlJBMIIBTgYDVR0jBIIBRTCCAUGAFKGtMbH5\n" + "PuEXpsirNPxShwkeYlJBoYIBJKSCASAwggEcMQswCQYDVQQGEwJFUzESMBAGA1UE\n" + "CBMJQmFyY2Vsb25hMRIwEAYDVQQHEwlCYXJjZWxvbmExLjAsBgNVBAoTJUlQUyBJ\n" + "bnRlcm5ldCBwdWJsaXNoaW5nIFNlcnZpY2VzIHMubC4xKzApBgNVBAoUImlwc0Bt\n" + "YWlsLmlwcy5lcyBDLkkuRi4gIEItNjA5Mjk0NTIxMzAxBgNVBAsTKklQUyBDQSBD\n" + "aGFpbmVkIENBcyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEzMDEGA1UEAxMqSVBT\n" + "IENBIENoYWluZWQgQ0FzIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MR4wHAYJKoZI\n" + "hvcNAQkBFg9pcHNAbWFpbC5pcHMuZXOCAQAwDAYDVR0TBAUwAwEB/zAMBgNVHQ8E\n" + "BQMDB/+AMGsGA1UdJQRkMGIGCCsGAQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMG\n" + "CCsGAQUFBwMEBggrBgEFBQcDCAYKKwYBBAGCNwIBFQYKKwYBBAGCNwIBFgYKKwYB\n" + "BAGCNwoDAQYKKwYBBAGCNwoDBDARBglghkgBhvhCAQEEBAMCAAcwGgYDVR0RBBMw\n" + "EYEPaXBzQG1haWwuaXBzLmVzMBoGA1UdEgQTMBGBD2lwc0BtYWlsLmlwcy5lczBC\n" + "BglghkgBhvhCAQ0ENRYzQ2hhaW5lZCBDQSBDZXJ0aWZpY2F0ZSBpc3N1ZWQgYnkg\n" + "aHR0cDovL3d3dy5pcHMuZXMvMCkGCWCGSAGG+EIBAgQcFhpodHRwOi8vd3d3Lmlw\n" + "cy5lcy9pcHMyMDAyLzA3BglghkgBhvhCAQQEKhYoaHR0cDovL3d3dy5pcHMuZXMv\n" + "aXBzMjAwMi9pcHMyMDAyQ0FDLmNybDA8BglghkgBhvhCAQMELxYtaHR0cDovL3d3\n" + "dy5pcHMuZXMvaXBzMjAwMi9yZXZvY2F0aW9uQ0FDLmh0bWw/MDkGCWCGSAGG+EIB\n" + "BwQsFipodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL3JlbmV3YWxDQUMuaHRtbD8w\n" + "NwYJYIZIAYb4QgEIBCoWKGh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvcG9saWN5\n" + "Q0FDLmh0bWwwbQYDVR0fBGYwZDAuoCygKoYoaHR0cDovL3d3dy5pcHMuZXMvaXBz\n" + "MjAwMi9pcHMyMDAyQ0FDLmNybDAyoDCgLoYsaHR0cDovL3d3d2JhY2suaXBzLmVz\n" + "L2lwczIwMDIvaXBzMjAwMkNBQy5jcmwwLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF\n" + "BzABhhNodHRwOi8vb2NzcC5pcHMuZXMvMA0GCSqGSIb3DQEBBQUAA4GBAERyMJ1W\n" + "WKJBGyi3leGmGpVfp3hAK+/blkr8THFj2XOVvQLiogbHvpcqk4A0hgP63Ng9HgfN\n" + "HnNDJGD1HWHc3JagvPsd4+cSACczAsDAK1M92GsDgaPb1pOVIO/Tln4mkImcJpvN\n" + "b2ar7QMiRDjMWb2f2/YHogF/JsRj9SVCXmK9\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS CLASE1 root", "MIIBEjELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25h" + "MS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQK" + "FCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMS4wLAYDVQQLEyVJUFMgQ0EgQ0xB" + "U0UxIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVJUFMgQ0EgQ0xBU0UxIENlcnRp" + "ZmljYXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXM=", "-----BEGIN CERTIFICATE-----\n" + "MIIH6jCCB1OgAwIBAgIBADANBgkqhkiG9w0BAQUFADCCARIxCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQBgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UE\n" + "ChMlSVBTIEludGVybmV0IHB1Ymxpc2hpbmcgU2VydmljZXMgcy5sLjErMCkGA1UE\n" + "ChQiaXBzQG1haWwuaXBzLmVzIEMuSS5GLiAgQi02MDkyOTQ1MjEuMCwGA1UECxMl\n" + "SVBTIENBIENMQVNFMSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEuMCwGA1UEAxMl\n" + "SVBTIENBIENMQVNFMSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEeMBwGCSqGSIb3\n" + "DQEJARYPaXBzQG1haWwuaXBzLmVzMB4XDTAxMTIyOTAwNTkzOFoXDTI1MTIyNzAw\n" + "NTkzOFowggESMQswCQYDVQQGEwJFUzESMBAGA1UECBMJQmFyY2Vsb25hMRIwEAYD\n" + "VQQHEwlCYXJjZWxvbmExLjAsBgNVBAoTJUlQUyBJbnRlcm5ldCBwdWJsaXNoaW5n\n" + "IFNlcnZpY2VzIHMubC4xKzApBgNVBAoUImlwc0BtYWlsLmlwcy5lcyBDLkkuRi4g\n" + "IEItNjA5Mjk0NTIxLjAsBgNVBAsTJUlQUyBDQSBDTEFTRTEgQ2VydGlmaWNhdGlv\n" + "biBBdXRob3JpdHkxLjAsBgNVBAMTJUlQUyBDQSBDTEFTRTEgQ2VydGlmaWNhdGlv\n" + "biBBdXRob3JpdHkxHjAcBgkqhkiG9w0BCQEWD2lwc0BtYWlsLmlwcy5lczCBnzAN\n" + "BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA4FEnpwvdr9G5Q1uCN0VWcu+atsIS7ywS\n" + "zHb5BlmvXSHU0lq4oNTzav3KaY1mSPd05u42veiWkXWmcSjK5yISMmmwPh5r9FBS\n" + "YmL9Yzt9fuzuOOpi9GyocY3h6YvJP8a1zZRCb92CRTzo3wno7wpVqVZHYUxJZHMQ\n" + "KD/Kvwn/xi8CAwEAAaOCBEowggRGMB0GA1UdDgQWBBTrsxl588GlHKzcuh9morKb\n" + "adB4CDCCAUQGA1UdIwSCATswggE3gBTrsxl588GlHKzcuh9morKbadB4CKGCARqk\n" + "ggEWMIIBEjELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UE\n" + "BxMJQmFyY2Vsb25hMS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBT\n" + "ZXJ2aWNlcyBzLmwuMSswKQYDVQQKFCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBC\n" + "LTYwOTI5NDUyMS4wLAYDVQQLEyVJUFMgQ0EgQ0xBU0UxIENlcnRpZmljYXRpb24g\n" + "QXV0aG9yaXR5MS4wLAYDVQQDEyVJUFMgQ0EgQ0xBU0UxIENlcnRpZmljYXRpb24g\n" + "QXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXOCAQAwDAYD\n" + "VR0TBAUwAwEB/zAMBgNVHQ8EBQMDB/+AMGsGA1UdJQRkMGIGCCsGAQUFBwMBBggr\n" + "BgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYKKwYBBAGCNwIB\n" + "FQYKKwYBBAGCNwIBFgYKKwYBBAGCNwoDAQYKKwYBBAGCNwoDBDARBglghkgBhvhC\n" + "AQEEBAMCAAcwGgYDVR0RBBMwEYEPaXBzQG1haWwuaXBzLmVzMBoGA1UdEgQTMBGB\n" + "D2lwc0BtYWlsLmlwcy5lczBBBglghkgBhvhCAQ0ENBYyQ0xBU0UxIENBIENlcnRp\n" + "ZmljYXRlIGlzc3VlZCBieSBodHRwOi8vd3d3Lmlwcy5lcy8wKQYJYIZIAYb4QgEC\n" + "BBwWGmh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvMDoGCWCGSAGG+EIBBAQtFito\n" + "dHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL2lwczIwMDJDTEFTRTEuY3JsMD8GCWCG\n" + "SAGG+EIBAwQyFjBodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL3Jldm9jYXRpb25D\n" + "TEFTRTEuaHRtbD8wPAYJYIZIAYb4QgEHBC8WLWh0dHA6Ly93d3cuaXBzLmVzL2lw\n" + "czIwMDIvcmVuZXdhbENMQVNFMS5odG1sPzA6BglghkgBhvhCAQgELRYraHR0cDov\n" + "L3d3dy5pcHMuZXMvaXBzMjAwMi9wb2xpY3lDTEFTRTEuaHRtbDBzBgNVHR8EbDBq\n" + "MDGgL6AthitodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL2lwczIwMDJDTEFTRTEu\n" + "Y3JsMDWgM6Axhi9odHRwOi8vd3d3YmFjay5pcHMuZXMvaXBzMjAwMi9pcHMyMDAy\n" + "Q0xBU0UxLmNybDAvBggrBgEFBQcBAQQjMCEwHwYIKwYBBQUHMAGGE2h0dHA6Ly9v\n" + "Y3NwLmlwcy5lcy8wDQYJKoZIhvcNAQEFBQADgYEAK9Dr/drIyllq2tPMMi7JVBuK\n" + "Yn4VLenZMdMu9Ccj/1urxUq2ckCuU3T0vAW0xtnIyXf7t/k0f3gA+Nak5FI/LEpj\n" + "V4F1Wo7ojPsCwJTGKbqz3Bzosq/SLmJbGqmODszFV0VRFOlOHIilkfSj945RyKm+\n" + "hjM+5i9Ibq9UkE6tsSU=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS CLASE3 root", "MIIBEjELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25h" + "MS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQK" + "FCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMS4wLAYDVQQLEyVJUFMgQ0EgQ0xB" + "U0UzIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVJUFMgQ0EgQ0xBU0UzIENlcnRp" + "ZmljYXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXM=", "-----BEGIN CERTIFICATE-----\n" + "MIIH6jCCB1OgAwIBAgIBADANBgkqhkiG9w0BAQUFADCCARIxCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQBgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UE\n" + "ChMlSVBTIEludGVybmV0IHB1Ymxpc2hpbmcgU2VydmljZXMgcy5sLjErMCkGA1UE\n" + "ChQiaXBzQG1haWwuaXBzLmVzIEMuSS5GLiAgQi02MDkyOTQ1MjEuMCwGA1UECxMl\n" + "SVBTIENBIENMQVNFMyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEuMCwGA1UEAxMl\n" + "SVBTIENBIENMQVNFMyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEeMBwGCSqGSIb3\n" + "DQEJARYPaXBzQG1haWwuaXBzLmVzMB4XDTAxMTIyOTAxMDE0NFoXDTI1MTIyNzAx\n" + "MDE0NFowggESMQswCQYDVQQGEwJFUzESMBAGA1UECBMJQmFyY2Vsb25hMRIwEAYD\n" + "VQQHEwlCYXJjZWxvbmExLjAsBgNVBAoTJUlQUyBJbnRlcm5ldCBwdWJsaXNoaW5n\n" + "IFNlcnZpY2VzIHMubC4xKzApBgNVBAoUImlwc0BtYWlsLmlwcy5lcyBDLkkuRi4g\n" + "IEItNjA5Mjk0NTIxLjAsBgNVBAsTJUlQUyBDQSBDTEFTRTMgQ2VydGlmaWNhdGlv\n" + "biBBdXRob3JpdHkxLjAsBgNVBAMTJUlQUyBDQSBDTEFTRTMgQ2VydGlmaWNhdGlv\n" + "biBBdXRob3JpdHkxHjAcBgkqhkiG9w0BCQEWD2lwc0BtYWlsLmlwcy5lczCBnzAN\n" + "BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAqxf+DrDGaBtT8FK+n/ra+osTBLsBjzLZ\n" + "H49NzjaY2uQARIwo2BNEKqRrThckQpzTiKRBgtYj+4vJhuW5qYIF3PHeH+AMmVWY\n" + "8jjsbJ0gA8DvqqPGZARRLXgNo9KoOtYkTOmWehisEyMiG3zoMRGzXwmqMHBxRiVr\n" + "SXGAK5UBsh8CAwEAAaOCBEowggRGMB0GA1UdDgQWBBS4k/8uy9wsjqLnev42USGj\n" + "mFsMNDCCAUQGA1UdIwSCATswggE3gBS4k/8uy9wsjqLnev42USGjmFsMNKGCARqk\n" + "ggEWMIIBEjELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UE\n" + "BxMJQmFyY2Vsb25hMS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBT\n" + "ZXJ2aWNlcyBzLmwuMSswKQYDVQQKFCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBC\n" + "LTYwOTI5NDUyMS4wLAYDVQQLEyVJUFMgQ0EgQ0xBU0UzIENlcnRpZmljYXRpb24g\n" + "QXV0aG9yaXR5MS4wLAYDVQQDEyVJUFMgQ0EgQ0xBU0UzIENlcnRpZmljYXRpb24g\n" + "QXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXOCAQAwDAYD\n" + "VR0TBAUwAwEB/zAMBgNVHQ8EBQMDB/+AMGsGA1UdJQRkMGIGCCsGAQUFBwMBBggr\n" + "BgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYKKwYBBAGCNwIB\n" + "FQYKKwYBBAGCNwIBFgYKKwYBBAGCNwoDAQYKKwYBBAGCNwoDBDARBglghkgBhvhC\n" + "AQEEBAMCAAcwGgYDVR0RBBMwEYEPaXBzQG1haWwuaXBzLmVzMBoGA1UdEgQTMBGB\n" + "D2lwc0BtYWlsLmlwcy5lczBBBglghkgBhvhCAQ0ENBYyQ0xBU0UzIENBIENlcnRp\n" + "ZmljYXRlIGlzc3VlZCBieSBodHRwOi8vd3d3Lmlwcy5lcy8wKQYJYIZIAYb4QgEC\n" + "BBwWGmh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvMDoGCWCGSAGG+EIBBAQtFito\n" + "dHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL2lwczIwMDJDTEFTRTMuY3JsMD8GCWCG\n" + "SAGG+EIBAwQyFjBodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL3Jldm9jYXRpb25D\n" + "TEFTRTMuaHRtbD8wPAYJYIZIAYb4QgEHBC8WLWh0dHA6Ly93d3cuaXBzLmVzL2lw\n" + "czIwMDIvcmVuZXdhbENMQVNFMy5odG1sPzA6BglghkgBhvhCAQgELRYraHR0cDov\n" + "L3d3dy5pcHMuZXMvaXBzMjAwMi9wb2xpY3lDTEFTRTMuaHRtbDBzBgNVHR8EbDBq\n" + "MDGgL6AthitodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL2lwczIwMDJDTEFTRTMu\n" + "Y3JsMDWgM6Axhi9odHRwOi8vd3d3YmFjay5pcHMuZXMvaXBzMjAwMi9pcHMyMDAy\n" + "Q0xBU0UzLmNybDAvBggrBgEFBQcBAQQjMCEwHwYIKwYBBQUHMAGGE2h0dHA6Ly9v\n" + "Y3NwLmlwcy5lcy8wDQYJKoZIhvcNAQEFBQADgYEAF2VcmZVDAyevJuXr0LMXI/dD\n" + "qsfwfewPxqmurpYPdikc4gYtfibFPPqhwYHOU7BC0ZdXGhd+pFFhxu7pXu8Fuuu9\n" + "D6eSb9ijBmgpjnn1/7/5p6/ksc7C0YBCJwUENPjDfxZ4IwwHJPJGR607VNCv1TGy\n" + "r33I6unUVtkOE7LFRVA=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS CLASEA1 root", "MIIBFDELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25h" + "MS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQK" + "FCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMS8wLQYDVQQLEyZJUFMgQ0EgQ0xB" + "U0VBMSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEvMC0GA1UEAxMmSVBTIENBIENMQVNFQTEgQ2Vy" + "dGlmaWNhdGlvbiBBdXRob3JpdHkxHjAcBgkqhkiG9w0BCQEWD2lwc0BtYWlsLmlwcy5lcw==", "-----BEGIN CERTIFICATE-----\n" + "MIIH9zCCB2CgAwIBAgIBADANBgkqhkiG9w0BAQUFADCCARQxCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQBgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UE\n" + "ChMlSVBTIEludGVybmV0IHB1Ymxpc2hpbmcgU2VydmljZXMgcy5sLjErMCkGA1UE\n" + "ChQiaXBzQG1haWwuaXBzLmVzIEMuSS5GLiAgQi02MDkyOTQ1MjEvMC0GA1UECxMm\n" + "SVBTIENBIENMQVNFQTEgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxLzAtBgNVBAMT\n" + "JklQUyBDQSBDTEFTRUExIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MR4wHAYJKoZI\n" + "hvcNAQkBFg9pcHNAbWFpbC5pcHMuZXMwHhcNMDExMjI5MDEwNTMyWhcNMjUxMjI3\n" + "MDEwNTMyWjCCARQxCzAJBgNVBAYTAkVTMRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQ\n" + "BgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UEChMlSVBTIEludGVybmV0IHB1Ymxpc2hp\n" + "bmcgU2VydmljZXMgcy5sLjErMCkGA1UEChQiaXBzQG1haWwuaXBzLmVzIEMuSS5G\n" + "LiAgQi02MDkyOTQ1MjEvMC0GA1UECxMmSVBTIENBIENMQVNFQTEgQ2VydGlmaWNh\n" + "dGlvbiBBdXRob3JpdHkxLzAtBgNVBAMTJklQUyBDQSBDTEFTRUExIENlcnRpZmlj\n" + "YXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXMw\n" + "gZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALsw19zQVL01Tp/FTILq0VA8R5j8\n" + "m2mdd81u4D/u6zJfX5/S0HnllXNEITLgCtud186Nq1KLK3jgm1t99P1tCeWu4Wwd\n" + "ByOgF9H5fahGRpEiqLJpxq339fWUoTCUvQDMRH/uxJ7JweaPCjbB/SQ9AaD1e+J8\n" + "eGZDi09Z8pvZ+kmzAgMBAAGjggRTMIIETzAdBgNVHQ4EFgQUZyaW56G/2LUDnf47\n" + "3P7yiuYV3TAwggFGBgNVHSMEggE9MIIBOYAUZyaW56G/2LUDnf473P7yiuYV3TCh\n" + "ggEcpIIBGDCCARQxCzAJBgNVBAYTAkVTMRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQ\n" + "BgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UEChMlSVBTIEludGVybmV0IHB1Ymxpc2hp\n" + "bmcgU2VydmljZXMgcy5sLjErMCkGA1UEChQiaXBzQG1haWwuaXBzLmVzIEMuSS5G\n" + "LiAgQi02MDkyOTQ1MjEvMC0GA1UECxMmSVBTIENBIENMQVNFQTEgQ2VydGlmaWNh\n" + "dGlvbiBBdXRob3JpdHkxLzAtBgNVBAMTJklQUyBDQSBDTEFTRUExIENlcnRpZmlj\n" + "YXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXOC\n" + "AQAwDAYDVR0TBAUwAwEB/zAMBgNVHQ8EBQMDB/+AMGsGA1UdJQRkMGIGCCsGAQUF\n" + "BwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYKKwYB\n" + "BAGCNwIBFQYKKwYBBAGCNwIBFgYKKwYBBAGCNwoDAQYKKwYBBAGCNwoDBDARBglg\n" + "hkgBhvhCAQEEBAMCAAcwGgYDVR0RBBMwEYEPaXBzQG1haWwuaXBzLmVzMBoGA1Ud\n" + "EgQTMBGBD2lwc0BtYWlsLmlwcy5lczBCBglghkgBhvhCAQ0ENRYzQ0xBU0VBMSBD\n" + "QSBDZXJ0aWZpY2F0ZSBpc3N1ZWQgYnkgaHR0cDovL3d3dy5pcHMuZXMvMCkGCWCG\n" + "SAGG+EIBAgQcFhpodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyLzA7BglghkgBhvhC\n" + "AQQELhYsaHR0cDovL3d3dy5pcHMuZXMvaXBzMjAwMi9pcHMyMDAyQ0xBU0VBMS5j\n" + "cmwwQAYJYIZIAYb4QgEDBDMWMWh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvcmV2\n" + "b2NhdGlvbkNMQVNFQTEuaHRtbD8wPQYJYIZIAYb4QgEHBDAWLmh0dHA6Ly93d3cu\n" + "aXBzLmVzL2lwczIwMDIvcmVuZXdhbENMQVNFQTEuaHRtbD8wOwYJYIZIAYb4QgEI\n" + "BC4WLGh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvcG9saWN5Q0xBU0VBMS5odG1s\n" + "MHUGA1UdHwRuMGwwMqAwoC6GLGh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvaXBz\n" + "MjAwMkNMQVNFQTEuY3JsMDagNKAyhjBodHRwOi8vd3d3YmFjay5pcHMuZXMvaXBz\n" + "MjAwMi9pcHMyMDAyQ0xBU0VBMS5jcmwwLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF\n" + "BzABhhNodHRwOi8vb2NzcC5pcHMuZXMvMA0GCSqGSIb3DQEBBQUAA4GBAH66iqyA\n" + "AIQVCtWYUQxkxZwCWINmyq0eB81+atqAB98DNEock8RLWCA1NnHtogo1EqWmZaeF\n" + "aQoO42Hu6r4okzPV7Oi+xNtff6j5YzHIa5biKcJboOeXNp13XjFr/tOn2yrb25aL\n" + "H2betgPAK7N41lUH5Y85UN4HI3LmvSAUS7SG\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS CLASEA3 root", "MIIBFDELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25h" + "MS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQK" + "FCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMS8wLQYDVQQLEyZJUFMgQ0EgQ0xB" + "U0VBMyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEvMC0GA1UEAxMmSVBTIENBIENMQVNFQTMgQ2Vy" + "dGlmaWNhdGlvbiBBdXRob3JpdHkxHjAcBgkqhkiG9w0BCQEWD2lwc0BtYWlsLmlwcy5lcw==", "-----BEGIN CERTIFICATE-----\n" + "MIIH9zCCB2CgAwIBAgIBADANBgkqhkiG9w0BAQUFADCCARQxCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQBgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UE\n" + "ChMlSVBTIEludGVybmV0IHB1Ymxpc2hpbmcgU2VydmljZXMgcy5sLjErMCkGA1UE\n" + "ChQiaXBzQG1haWwuaXBzLmVzIEMuSS5GLiAgQi02MDkyOTQ1MjEvMC0GA1UECxMm\n" + "SVBTIENBIENMQVNFQTMgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxLzAtBgNVBAMT\n" + "JklQUyBDQSBDTEFTRUEzIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MR4wHAYJKoZI\n" + "hvcNAQkBFg9pcHNAbWFpbC5pcHMuZXMwHhcNMDExMjI5MDEwNzUwWhcNMjUxMjI3\n" + "MDEwNzUwWjCCARQxCzAJBgNVBAYTAkVTMRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQ\n" + "BgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UEChMlSVBTIEludGVybmV0IHB1Ymxpc2hp\n" + "bmcgU2VydmljZXMgcy5sLjErMCkGA1UEChQiaXBzQG1haWwuaXBzLmVzIEMuSS5G\n" + "LiAgQi02MDkyOTQ1MjEvMC0GA1UECxMmSVBTIENBIENMQVNFQTMgQ2VydGlmaWNh\n" + "dGlvbiBBdXRob3JpdHkxLzAtBgNVBAMTJklQUyBDQSBDTEFTRUEzIENlcnRpZmlj\n" + "YXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXMw\n" + "gZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAO6AAPYaZC6tasiDsYun7o/ZttvN\n" + "G7uGBiJ2MwwSbUhWYdLcgiViL5/SaTBlA0IjWLxH3GvWdV0XPOH/8lhneaDBgbHU\n" + "VqLyjRGZ/fZ98cfEXgIqmuJKtROKAP2Md4bm15T1IHUuDky/dMQ/gT6DtKM4Ninn\n" + "6Cr1jIhBqoCm42zvAgMBAAGjggRTMIIETzAdBgNVHQ4EFgQUHp9XUEe2YZM50yz8\n" + "2l09BXW3mQIwggFGBgNVHSMEggE9MIIBOYAUHp9XUEe2YZM50yz82l09BXW3mQKh\n" + "ggEcpIIBGDCCARQxCzAJBgNVBAYTAkVTMRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQ\n" + "BgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UEChMlSVBTIEludGVybmV0IHB1Ymxpc2hp\n" + "bmcgU2VydmljZXMgcy5sLjErMCkGA1UEChQiaXBzQG1haWwuaXBzLmVzIEMuSS5G\n" + "LiAgQi02MDkyOTQ1MjEvMC0GA1UECxMmSVBTIENBIENMQVNFQTMgQ2VydGlmaWNh\n" + "dGlvbiBBdXRob3JpdHkxLzAtBgNVBAMTJklQUyBDQSBDTEFTRUEzIENlcnRpZmlj\n" + "YXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXOC\n" + "AQAwDAYDVR0TBAUwAwEB/zAMBgNVHQ8EBQMDB/+AMGsGA1UdJQRkMGIGCCsGAQUF\n" + "BwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYKKwYB\n" + "BAGCNwIBFQYKKwYBBAGCNwIBFgYKKwYBBAGCNwoDAQYKKwYBBAGCNwoDBDARBglg\n" + "hkgBhvhCAQEEBAMCAAcwGgYDVR0RBBMwEYEPaXBzQG1haWwuaXBzLmVzMBoGA1Ud\n" + "EgQTMBGBD2lwc0BtYWlsLmlwcy5lczBCBglghkgBhvhCAQ0ENRYzQ0xBU0VBMyBD\n" + "QSBDZXJ0aWZpY2F0ZSBpc3N1ZWQgYnkgaHR0cDovL3d3dy5pcHMuZXMvMCkGCWCG\n" + "SAGG+EIBAgQcFhpodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyLzA7BglghkgBhvhC\n" + "AQQELhYsaHR0cDovL3d3dy5pcHMuZXMvaXBzMjAwMi9pcHMyMDAyQ0xBU0VBMy5j\n" + "cmwwQAYJYIZIAYb4QgEDBDMWMWh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvcmV2\n" + "b2NhdGlvbkNMQVNFQTMuaHRtbD8wPQYJYIZIAYb4QgEHBDAWLmh0dHA6Ly93d3cu\n" + "aXBzLmVzL2lwczIwMDIvcmVuZXdhbENMQVNFQTMuaHRtbD8wOwYJYIZIAYb4QgEI\n" + "BC4WLGh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvcG9saWN5Q0xBU0VBMy5odG1s\n" + "MHUGA1UdHwRuMGwwMqAwoC6GLGh0dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvaXBz\n" + "MjAwMkNMQVNFQTMuY3JsMDagNKAyhjBodHRwOi8vd3d3YmFjay5pcHMuZXMvaXBz\n" + "MjAwMi9pcHMyMDAyQ0xBU0VBMy5jcmwwLwYIKwYBBQUHAQEEIzAhMB8GCCsGAQUF\n" + "BzABhhNodHRwOi8vb2NzcC5pcHMuZXMvMA0GCSqGSIb3DQEBBQUAA4GBAEo9IEca\n" + "2on0eisxeewBwMwB9dbB/MjD81ACUZBYKp/nNQlbMAqBACVHr9QPDp5gJqiVp4MI\n" + "3y2s6Q73nMify5NF8bpqxmdRSmlPa/59Cy9SKcJQrSRE7SOzSMtEQMEDlQwKeAYS\n" + "AfWRMS1Jjbs/RU4s4OjNtckUFQzjB4ObJnXv\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS Servidores root", "MIGjMQswCQYDVQQGEwJFUzESMBAGA1UECBMJQkFSQ0VMT05BMRIwEAYDVQQHEwlCQVJDRUxPTkEx" + "GTAXBgNVBAoTEElQUyBTZWd1cmlkYWQgQ0ExGDAWBgNVBAsTD0NlcnRpZmljYWNpb25lczEXMBUG" + "A1UEAxMOSVBTIFNFUlZJRE9SRVMxHjAcBgkqhkiG9w0BCQEWD2lwc0BtYWlsLmlwcy5lcw==", "-----BEGIN CERTIFICATE-----\n" + "MIICtzCCAiACAQAwDQYJKoZIhvcNAQEEBQAwgaMxCzAJBgNVBAYTAkVTMRIwEAYD\n" + "VQQIEwlCQVJDRUxPTkExEjAQBgNVBAcTCUJBUkNFTE9OQTEZMBcGA1UEChMQSVBT\n" + "IFNlZ3VyaWRhZCBDQTEYMBYGA1UECxMPQ2VydGlmaWNhY2lvbmVzMRcwFQYDVQQD\n" + "Ew5JUFMgU0VSVklET1JFUzEeMBwGCSqGSIb3DQEJARYPaXBzQG1haWwuaXBzLmVz\n" + "MB4XDTk4MDEwMTIzMjEwN1oXDTA5MTIyOTIzMjEwN1owgaMxCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCQVJDRUxPTkExEjAQBgNVBAcTCUJBUkNFTE9OQTEZMBcGA1UE\n" + "ChMQSVBTIFNlZ3VyaWRhZCBDQTEYMBYGA1UECxMPQ2VydGlmaWNhY2lvbmVzMRcw\n" + "FQYDVQQDEw5JUFMgU0VSVklET1JFUzEeMBwGCSqGSIb3DQEJARYPaXBzQG1haWwu\n" + "aXBzLmVzMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCsT1J0nznqjtwlxLyY\n" + "XZhkJAk8IbPMGbWOlI6H0fg3PqHILVikgDVboXVsHUUMH2Fjal5vmwpMwci4YSM1\n" + "gf/+rHhwLWjhOgeYlQJU3c0jt4BT18g3RXIGJBK6E2Ehim51KODFDzT9NthFf+G4\n" + "Nu+z4cYgjui0OLzhPvYR3oydAQIDAQABMA0GCSqGSIb3DQEBBAUAA4GBACzzw3lY\n" + "JN7GO9HgQmm47mSzPWIBubOE3yN93ZjPEKn+ANgilgUTB1RXxafey9m4iEL2mdsU\n" + "dx+2/iU94aI+A6mB0i1sR/WWRowiq8jMDQ6XXotBtDvECgZAHd1G9AHduoIuPD14\n" + "cJ58GNCr+Lh3B0Zx8coLY1xq+XKU1QFPoNtC\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("IPS Timestamping root", "MIIBHjELMAkGA1UEBhMCRVMxEjAQBgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25h" + "MS4wLAYDVQQKEyVJUFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQK" + "FCJpcHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMTQwMgYDVQQLEytJUFMgQ0EgVGlt" + "ZXN0YW1waW5nIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MTQwMgYDVQQDEytJUFMgQ0EgVGltZXN0" + "YW1waW5nIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MR4wHAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5p" + "cHMuZXM=", "-----BEGIN CERTIFICATE-----\n" + "MIIIODCCB6GgAwIBAgIBADANBgkqhkiG9w0BAQUFADCCAR4xCzAJBgNVBAYTAkVT\n" + "MRIwEAYDVQQIEwlCYXJjZWxvbmExEjAQBgNVBAcTCUJhcmNlbG9uYTEuMCwGA1UE\n" + "ChMlSVBTIEludGVybmV0IHB1Ymxpc2hpbmcgU2VydmljZXMgcy5sLjErMCkGA1UE\n" + "ChQiaXBzQG1haWwuaXBzLmVzIEMuSS5GLiAgQi02MDkyOTQ1MjE0MDIGA1UECxMr\n" + "SVBTIENBIFRpbWVzdGFtcGluZyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTE0MDIG\n" + "A1UEAxMrSVBTIENBIFRpbWVzdGFtcGluZyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\n" + "eTEeMBwGCSqGSIb3DQEJARYPaXBzQG1haWwuaXBzLmVzMB4XDTAxMTIyOTAxMTAx\n" + "OFoXDTI1MTIyNzAxMTAxOFowggEeMQswCQYDVQQGEwJFUzESMBAGA1UECBMJQmFy\n" + "Y2Vsb25hMRIwEAYDVQQHEwlCYXJjZWxvbmExLjAsBgNVBAoTJUlQUyBJbnRlcm5l\n" + "dCBwdWJsaXNoaW5nIFNlcnZpY2VzIHMubC4xKzApBgNVBAoUImlwc0BtYWlsLmlw\n" + "cy5lcyBDLkkuRi4gIEItNjA5Mjk0NTIxNDAyBgNVBAsTK0lQUyBDQSBUaW1lc3Rh\n" + "bXBpbmcgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxNDAyBgNVBAMTK0lQUyBDQSBU\n" + "aW1lc3RhbXBpbmcgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxHjAcBgkqhkiG9w0B\n" + "CQEWD2lwc0BtYWlsLmlwcy5lczCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\n" + "vLjuVqWajOY2ycJioGaBjRrVetJznw6EZLqVtJCneK/K/lRhW86yIFcBrkSSQxA4\n" + "Efdo/BdApWgnMjvEp+ZCccWZ73b/K5Uk9UmSGGjKALWkWi9uy9YbLA1UZ2t6KaFY\n" + "q6JaANZbuxjC3/YeE1Z2m6Vo4pjOxgOKNNtMg0GmqaMCAwEAAaOCBIAwggR8MB0G\n" + "A1UdDgQWBBSL0BBQCYHynQnVDmB4AyKiP8jKZjCCAVAGA1UdIwSCAUcwggFDgBSL\n" + "0BBQCYHynQnVDmB4AyKiP8jKZqGCASakggEiMIIBHjELMAkGA1UEBhMCRVMxEjAQ\n" + "BgNVBAgTCUJhcmNlbG9uYTESMBAGA1UEBxMJQmFyY2Vsb25hMS4wLAYDVQQKEyVJ\n" + "UFMgSW50ZXJuZXQgcHVibGlzaGluZyBTZXJ2aWNlcyBzLmwuMSswKQYDVQQKFCJp\n" + "cHNAbWFpbC5pcHMuZXMgQy5JLkYuICBCLTYwOTI5NDUyMTQwMgYDVQQLEytJUFMg\n" + "Q0EgVGltZXN0YW1waW5nIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MTQwMgYDVQQD\n" + "EytJUFMgQ0EgVGltZXN0YW1waW5nIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MR4w\n" + "HAYJKoZIhvcNAQkBFg9pcHNAbWFpbC5pcHMuZXOCAQAwDAYDVR0TBAUwAwEB/zAM\n" + "BgNVHQ8EBQMDB/+AMGsGA1UdJQRkMGIGCCsGAQUFBwMBBggrBgEFBQcDAgYIKwYB\n" + "BQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCAYKKwYBBAGCNwIBFQYKKwYBBAGCNwIB\n" + "FgYKKwYBBAGCNwoDAQYKKwYBBAGCNwoDBDARBglghkgBhvhCAQEEBAMCAAcwGgYD\n" + "VR0RBBMwEYEPaXBzQG1haWwuaXBzLmVzMBoGA1UdEgQTMBGBD2lwc0BtYWlsLmlw\n" + "cy5lczBHBglghkgBhvhCAQ0EOhY4VGltZXN0YW1waW5nIENBIENlcnRpZmljYXRl\n" + "IGlzc3VlZCBieSBodHRwOi8vd3d3Lmlwcy5lcy8wKQYJYIZIAYb4QgECBBwWGmh0\n" + "dHA6Ly93d3cuaXBzLmVzL2lwczIwMDIvMEAGCWCGSAGG+EIBBAQzFjFodHRwOi8v\n" + "d3d3Lmlwcy5lcy9pcHMyMDAyL2lwczIwMDJUaW1lc3RhbXBpbmcuY3JsMEUGCWCG\n" + "SAGG+EIBAwQ4FjZodHRwOi8vd3d3Lmlwcy5lcy9pcHMyMDAyL3Jldm9jYXRpb25U\n" + "aW1lc3RhbXBpbmcuaHRtbD8wQgYJYIZIAYb4QgEHBDUWM2h0dHA6Ly93d3cuaXBz\n" + "LmVzL2lwczIwMDIvcmVuZXdhbFRpbWVzdGFtcGluZy5odG1sPzBABglghkgBhvhC\n" + "AQgEMxYxaHR0cDovL3d3dy5pcHMuZXMvaXBzMjAwMi9wb2xpY3lUaW1lc3RhbXBp\n" + "bmcuaHRtbDB/BgNVHR8EeDB2MDegNaAzhjFodHRwOi8vd3d3Lmlwcy5lcy9pcHMy\n" + "MDAyL2lwczIwMDJUaW1lc3RhbXBpbmcuY3JsMDugOaA3hjVodHRwOi8vd3d3YmFj\n" + "ay5pcHMuZXMvaXBzMjAwMi9pcHMyMDAyVGltZXN0YW1waW5nLmNybDAvBggrBgEF\n" + "BQcBAQQjMCEwHwYIKwYBBQUHMAGGE2h0dHA6Ly9vY3NwLmlwcy5lcy8wDQYJKoZI\n" + "hvcNAQEFBQADgYEAZbrBzAAalZHK6Ww6vzoeFAh8+4Pua2JR0zORtWB5fgTYXXk3\n" + "6MNbsMRnLWhasl8OCvrNPzpFoeo2zyYepxEoxZSPhExTCMWTs/zif/WN87GphV+I\n" + "3pGW7hdbrqXqcGV4LCFkAZXOzkw+UPS2Wctjjba9GNSHSl/c7+lW8AoM6HU=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("QuoVadis Root CA", "MH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMSUwIwYDVQQLExxSb290" + "IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVRdW9WYWRpcyBSb290IENlcnRpZmlj" + "YXRpb24gQXV0aG9yaXR5", "-----BEGIN CERTIFICATE-----\n" + "MIIF0DCCBLigAwIBAgIEOrZQizANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJC\n" + "TTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDElMCMGA1UECxMcUm9vdCBDZXJ0\n" + "aWZpY2F0aW9uIEF1dGhvcml0eTEuMCwGA1UEAxMlUXVvVmFkaXMgUm9vdCBDZXJ0\n" + "aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wMTAzMTkxODMzMzNaFw0yMTAzMTcxODMz\n" + "MzNaMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMSUw\n" + "IwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYDVQQDEyVR\n" + "dW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG\n" + "9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv2G1lVO6V/z68mcLOhrfEYBklbTRvM16z/Yp\n" + "li4kVEAkOPcahdxYTMukJ0KX0J+DisPkBgNbAKVRHnAEdOLB1Dqr1607BxgFjv2D\n" + "rOpm2RgbaIr1VxqYuvXtdj182d6UajtLF8HVj71lODqV0D1VNk7feVcxKh7YWWVJ\n" + "WCCYfqtffp/p1k3sg3Spx2zY7ilKhSoGFPlU5tPaZQeLYzcS19Dsw3sgQUSj7cug\n" + "F+FxZc4dZjH3dgEZyH0DWLaVSR2mEiboxgx24ONmy+pdpibu5cxfvWenAScOospU\n" + "xbF6lR1xHkopigPcakXBpBlebzbNw6Kwt/5cOOJSvPhEQ+aQuwIDAQABo4ICUjCC\n" + "Ak4wPQYIKwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwczovL29jc3AucXVv\n" + "dmFkaXNvZmZzaG9yZS5jb20wDwYDVR0TAQH/BAUwAwEB/zCCARoGA1UdIASCAREw\n" + "ggENMIIBCQYJKwYBBAG+WAABMIH7MIHUBggrBgEFBQcCAjCBxxqBxFJlbGlhbmNl\n" + "IG9uIHRoZSBRdW9WYWRpcyBSb290IENlcnRpZmljYXRlIGJ5IGFueSBwYXJ0eSBh\n" + "c3N1bWVzIGFjY2VwdGFuY2Ugb2YgdGhlIHRoZW4gYXBwbGljYWJsZSBzdGFuZGFy\n" + "ZCB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB1c2UsIGNlcnRpZmljYXRpb24gcHJh\n" + "Y3RpY2VzLCBhbmQgdGhlIFF1b1ZhZGlzIENlcnRpZmljYXRlIFBvbGljeS4wIgYI\n" + "KwYBBQUHAgEWFmh0dHA6Ly93d3cucXVvdmFkaXMuYm0wHQYDVR0OBBYEFItLbe3T\n" + "KbkGGew5Oanwl4Rqy+/fMIGuBgNVHSMEgaYwgaOAFItLbe3TKbkGGew5Oanwl4Rq\n" + "y+/foYGEpIGBMH8xCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1p\n" + "dGVkMSUwIwYDVQQLExxSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS4wLAYD\n" + "VQQDEyVRdW9WYWRpcyBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggQ6tlCL\n" + "MA4GA1UdDwEB/wQEAwIBBjANBgkqhkiG9w0BAQUFAAOCAQEAitQUtf70mpKnGdSk\n" + "fnIYj9lofFIk3WdvOXrEql494liwTXCYhGHoG+NpGA7O+0dQoE7/8CQfvbLO9Sf8\n" + "7C9TqnN7Az10buYWnuulLsS/VidQK2K6vkscPFVcQR0kvoIgR13VRH56FmjffU1R\n" + "cHhXHTMe/QKZnAzNCgVPx7uOpHX6Sm2xgI4JVrmcGmD+XcHXetwReNDWXcG31a0y\n" + "mQM6isxUJTkxgXsTIlG6Rmyhu576BGxJJnSP0nPrzDCi5upZIof4l/UO/erMkqQW\n" + "xFIY6iHOsfHmhIHluqmGKPJDWl0Snawe2ajlCmqnf6CHKc/yiU3U7MXi5nrQNiOK\n" + "SnQ2+Q==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("QuoVadis Root CA 2", "MEUxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W" + "YWRpcyBSb290IENBIDI=", "-----BEGIN CERTIFICATE-----\n" + "MIIFtzCCA5+gAwIBAgICBQkwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x\n" + "GTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv\n" + "b3QgQ0EgMjAeFw0wNjExMjQxODI3MDBaFw0zMTExMjQxODIzMzNaMEUxCzAJBgNV\n" + "BAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W\n" + "YWRpcyBSb290IENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCa\n" + "GMpLlA0ALa8DKYrwD4HIrkwZhR0In6spRIXzL4GtMh6QRr+jhiYaHv5+HBg6XJxg\n" + "Fyo6dIMzMH1hVBHL7avg5tKifvVrbxi3Cgst/ek+7wrGsxDp3MJGF/hd/aTa/55J\n" + "WpzmM+Yklvc/ulsrHHo1wtZn/qtmUIttKGAr79dgw8eTvI02kfN/+NsRE8Scd3bB\n" + "rrcCaoF6qUWD4gXmuVbBlDePSHFjIuwXZQeVikvfj8ZaCuWw419eaxGrDPmF60Tp\n" + "+ARz8un+XJiM9XOva7R+zdRcAitMOeGylZUtQofX1bOQQ7dsE/He3fbE+Ik/0XX1\n" + "ksOR1YqI0JDs3G3eicJlcZaLDQP9nL9bFqyS2+r+eXyt66/3FsvbzSUr5R/7mp/i\n" + "Ucw6UwxI5g69ybR2BlLmEROFcmMDBOAENisgGQLodKcftslWZvB1JdxnwQ5hYIiz\n" + "PtGo/KPaHbDRsSNU30R2be1B2MGyIrZTHN81Hdyhdyox5C315eXbyOD/5YDXC2Og\n" + "/zOhD7osFRXql7PSorW+8oyWHhqPHWykYTe5hnMz15eWniN9gqRMgeKh0bpnX5UH\n" + "oycR7hYQe7xFSkyyBNKr79X9DFHOUGoIMfmR2gyPZFwDwzqLID9ujWc9Otb+fVuI\n" + "yV77zGHcizN300QyNQliBJIWENieJ0f7OyHj+OsdWwIDAQABo4GwMIGtMA8GA1Ud\n" + "EwEB/wQFMAMBAf8wCwYDVR0PBAQDAgEGMB0GA1UdDgQWBBQahGK8SEwzJQTU7tD2\n" + "A8QZRtGUazBuBgNVHSMEZzBlgBQahGK8SEwzJQTU7tD2A8QZRtGUa6FJpEcwRTEL\n" + "MAkGA1UEBhMCQk0xGTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMT\n" + "ElF1b1ZhZGlzIFJvb3QgQ0EgMoICBQkwDQYJKoZIhvcNAQEFBQADggIBAD4KFk2f\n" + "BluornFdLwUvZ+YTRYPENvbzwCYMDbVHZF34tHLJRqUDGCdViXh9duqWNIAXINzn\n" + "g/iN/Ae42l9NLmeyhP3ZRPx3UIHmfLTJDQtyU/h2BwdBR5YM++CCJpNVjP4iH2Bl\n" + "fF/nJrP3MpCYUNQ3cVX2kiF495V5+vgtJodmVjB3pjd4M1IQWK4/YY7yarHvGH5K\n" + "WWPKjaJW1acvvFYfzznB4vsKqBUsfU16Y8Zsl0Q80m/DShcK+JDSV6IZUaUtl0Ha\n" + "B0+pUNqQjZRG4T7wlP0QADj1O+hA4bRuVhogzG9Yje0uRY/W6ZM/57Es3zrWIozc\n" + "hLsib9D45MY56QSIPMO661V6bYCZJPVsAfv4l7CUW+v90m/xd2gNNWQjrLhVoQPR\n" + "TUIZ3Ph1WVaj+ahJefivDrkRoHy3au000LYmYjgahwz46P0u05B/B5EqHdZ+XIWD\n" + "mbA4CD/pXvk1B+TJYm5Xf6dQlfe6yJvmjqIBxdZmv3lh8zwc4bmCXF2gw+nYSL0Z\n" + "ohEUGW6yhhtoPkg3Goi3XZZenMfvJ2II4pEZXNLxId26F0KCl3GBUzGpn/Z9Yr9y\n" + "4aOTHcyKJloJONDO1w2AFrR4pTqHTI2KpdVGl/IsELm8VCLAAVBpQ570su9t+Oza\n" + "8eOx79+Rj1QqCyXBJhnEUhAFZdWCEOrCMc0u\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("QuoVadis Root CA 3", "MEUxCzAJBgNVBAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W" + "YWRpcyBSb290IENBIDM=", "-----BEGIN CERTIFICATE-----\n" + "MIIGnTCCBIWgAwIBAgICBcYwDQYJKoZIhvcNAQEFBQAwRTELMAkGA1UEBhMCQk0x\n" + "GTAXBgNVBAoTEFF1b1ZhZGlzIExpbWl0ZWQxGzAZBgNVBAMTElF1b1ZhZGlzIFJv\n" + "b3QgQ0EgMzAeFw0wNjExMjQxOTExMjNaFw0zMTExMjQxOTA2NDRaMEUxCzAJBgNV\n" + "BAYTAkJNMRkwFwYDVQQKExBRdW9WYWRpcyBMaW1pdGVkMRswGQYDVQQDExJRdW9W\n" + "YWRpcyBSb290IENBIDMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDM\n" + "V0IWVJzmmNPTTe7+7cefQzlKZbPoFog02w1ZkXTPkrgEQK0CSzGrvI2RaNggDhoB\n" + "4hp7Thdd4oq3P5kazethq8Jlph+3t723j/z9cI8LoGe+AaJZz3HmDyl2/7FWeUUr\n" + "H556VOijKTVopAFPD6QuN+8bv+OPEKhyq1hX51SGyMnzW9os2l2ObjyjPtr7guXd\n" + "8lyyBTNvijbO0BNO/79KDDRMpsMhvVAEVeuxu537RR5kFd5VAYwCdrXLoT9Cabwv\n" + "vWhDFlaJKjdhkf2mrk7AyxRllDdLkgbvBNDInIjbC3uBr7E9KsRlOni27tyAsdLT\n" + "mZw67mtaa7ONt9XOnMK+pUsvFrGeaDsGb659n/je7Mwpp5ijJUMv7/FfJuGITfhe\n" + "btfZFG4ZM2mnO4SJk8RTVROhUXhA+LjJou57ulJCg54U7QVSWllWp5f8nT8KKdjc\n" + "T5EOE7zelaTfi5m+rJsziO+1ga8bxiJTyPbH7pcUsMV8eFLI8M5ud2CEpukqdiDt\n" + "WAEXMJPpGovgc2PZapKUSU60rUqFxKMiMPwJ7Wgic6aIDFUhWMXhOp8q3crhkODZ\n" + "c6tsgLjoC2SToJyMGf+z0gzskSaHirOi4XCPLArlzW1oUevaPwV/izLmE1xr/l9A\n" + "4iLItLRkT9a6fUg+qGkM17uGcclzuD87nSVL2v9A6wIDAQABo4IBlTCCAZEwDwYD\n" + "VR0TAQH/BAUwAwEB/zCB4QYDVR0gBIHZMIHWMIHTBgkrBgEEAb5YAAMwgcUwgZMG\n" + "CCsGAQUFBwICMIGGGoGDQW55IHVzZSBvZiB0aGlzIENlcnRpZmljYXRlIGNvbnN0\n" + "aXR1dGVzIGFjY2VwdGFuY2Ugb2YgdGhlIFF1b1ZhZGlzIFJvb3QgQ0EgMyBDZXJ0\n" + "aWZpY2F0ZSBQb2xpY3kgLyBDZXJ0aWZpY2F0aW9uIFByYWN0aWNlIFN0YXRlbWVu\n" + "dC4wLQYIKwYBBQUHAgEWIWh0dHA6Ly93d3cucXVvdmFkaXNnbG9iYWwuY29tL2Nw\n" + "czALBgNVHQ8EBAMCAQYwHQYDVR0OBBYEFPLAE+CCQz777i9nMpY1XNu4ywLQMG4G\n" + "A1UdIwRnMGWAFPLAE+CCQz777i9nMpY1XNu4ywLQoUmkRzBFMQswCQYDVQQGEwJC\n" + "TTEZMBcGA1UEChMQUXVvVmFkaXMgTGltaXRlZDEbMBkGA1UEAxMSUXVvVmFkaXMg\n" + "Um9vdCBDQSAzggIFxjANBgkqhkiG9w0BAQUFAAOCAgEAT62gLEz6wPJv92ZVqyM0\n" + "7ucp2sNbtrCD2dDQ4iH782CnO11gUyeim/YIIirnv6By5ZwkajGxkHon24QRiSem\n" + "d1o417+shvzuXYO8BsbRd2sPbSQvS3pspweWyuOEn62Iix2rFo1bZhfZFvSLgNLd\n" + "+LJ2w/w4E6oM3kJpK27zPOuAJ9v1pkQNn1pVWQvVDVJIxa6f8i+AxeoyUDUSly7B\n" + "4f/xI4hROJ/yZlZ25w9Rl6VSDE1JUZU2Pb+iSwwQHYaZTKrzchGT5Or2m9qoXadN\n" + "t54CrnMAyNojA+j56hl0YgCUyyIgvpSnWbWCar6ZeXqp8kokUvd0/bpO5qgdAm6x\n" + "DYBEwa7TIzdfu4V8K5Iu6H6li92Z4b8nby1dqnuH/grdS/yO9SbkbnBCbjPsMZ57\n" + "k8HkyWkaPcBrTiJt7qtYTcbQQcEr6k8Sh17rRdhs9ZgC06DYVYoGmRmioHfRMJ6s\n" + "zHXug/WwYjnPbFfiTNKRCw51KBuav/0aQ/HKd/s7j2G4aSgWQgRecCocIdiP4b0j\n" + "Wy10QJLZYxkNc91pvGJHvOB0K7Lrfb5BG7XARsWhIstfTsEokt4YutUqKLsRixeT\n" + "mJlglFwjz1onl14LBQaTNx47aTbrqZ5hHY8y2o4M1nQ+ewkk2gF3R8Q7zTSMmfXK\n" + "4SVhM7JZG+Ju1zdXtg2pEto=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Security Communication Root CA", "MFAxCzAJBgNVBAYTAkpQMRgwFgYDVQQKEw9TRUNPTSBUcnVzdC5uZXQxJzAlBgNVBAsTHlNlY3Vy" + "aXR5IENvbW11bmljYXRpb24gUm9vdENBMQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIDWjCCAkKgAwIBAgIBADANBgkqhkiG9w0BAQUFADBQMQswCQYDVQQGEwJKUDEY\n" + "MBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYDVQQLEx5TZWN1cml0eSBDb21t\n" + "dW5pY2F0aW9uIFJvb3RDQTEwHhcNMDMwOTMwMDQyMDQ5WhcNMjMwOTMwMDQyMDQ5\n" + "WjBQMQswCQYDVQQGEwJKUDEYMBYGA1UEChMPU0VDT00gVHJ1c3QubmV0MScwJQYD\n" + "VQQLEx5TZWN1cml0eSBDb21tdW5pY2F0aW9uIFJvb3RDQTEwggEiMA0GCSqGSIb3\n" + "DQEBAQUAA4IBDwAwggEKAoIBAQCzs/5/022x7xZ8V6UMbXaKL0u/ZPtM7orw8yl8\n" + "9f/uKuDp6bpbZCKamm8sOiZpUQWZJtzVHGpxxpp9Hp3dfGzGjGdnSj74cbAZJ6kJ\n" + "DKaVv0uMDPpVmDvY6CKhS3E4eayXkmmziX7qIWgGmBSWh9JhNrxtJ1aeV+7AwFb9\n" + "Ms+k2Y7CI9eNqPPYJayX5HA49LY6tJ07lyZDo6G8SVlyTCMwhwFY9k6+HGhWZq/N\n" + "QV3Is00qVUarH9oe4kA92819uZKAnDfdDJZkndwi92SL32HeFZRSFaB9UslLqCHJ\n" + "xrHty8OVYNEP8Ktw+N/LTX7s1vqr2b1/VPKl6Xn62dZ2JChzAgMBAAGjPzA9MB0G\n" + "A1UdDgQWBBSgc0mZaNyFW2XjmygvV5+9M7wHSDALBgNVHQ8EBAMCAQYwDwYDVR0T\n" + "AQH/BAUwAwEB/zANBgkqhkiG9w0BAQUFAAOCAQEAaECpqLvkT115swW1F7NgE+vG\n" + "kl3g0dNq/vu+m22/xwVtWSDEHPC32oRYAmP6SBbvT6UL90qY8j+eG61Ha2POCEfr\n" + "Uj94nK9NrvjVT8+amCoQQTlSxN3Zmw7vkwGusi7KaEIkQmywszo+zenaSMQVy+n5\n" + "Bw+SUEmK3TGXX8npN6o7WWWXlDLJs58+OmJYxUmtYg5xpTKqL8aJdkNAExNnPaJU\n" + "JRDL8Try2frbSVa7pv6nQTXD4IhhyYjH3zYQIphZ6rBK+1YWc26sTfcioU+tHXot\n" + "RSflMMFe8toTyyVCUZVHA4xsIcx0Qu1T/zOLjw9XARYvz6buyXAiFL39vmwLAw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Sonera Class 1 Root CA", "MDkxCzAJBgNVBAYTAkZJMQ8wDQYDVQQKEwZTb25lcmExGTAXBgNVBAMTEFNvbmVyYSBDbGFzczEg" + "Q0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIDIDCCAgigAwIBAgIBJDANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJGSTEP\n" + "MA0GA1UEChMGU29uZXJhMRkwFwYDVQQDExBTb25lcmEgQ2xhc3MxIENBMB4XDTAx\n" + "MDQwNjEwNDkxM1oXDTIxMDQwNjEwNDkxM1owOTELMAkGA1UEBhMCRkkxDzANBgNV\n" + "BAoTBlNvbmVyYTEZMBcGA1UEAxMQU29uZXJhIENsYXNzMSBDQTCCASIwDQYJKoZI\n" + "hvcNAQEBBQADggEPADCCAQoCggEBALWJHytPZwp5/8Ue+H887dF+2rDNbS82rDTG\n" + "29lkFwhjMDMiikzujrsPDUJVyZ0upe/3p4zDq7mXy47vPxVnqIJyY1MPQYx9EJUk\n" + "oVqlBvqSV536pQHydekfvFYmUk54GWVYVQNYwBSujHxVX3BbdyMGNpfzJLWaRpXk\n" + "3w0LBUXl0fIdgrvGE+D+qnr9aTCU89JFhfzyMlsy3uhsXR/LpCJ0sICOXZT3BgBL\n" + "qdReLjVQCfOAl/QMF6452F/NM8EcyonCIvdFEu1eEpOdY6uCLrnrQkFEy0oaAIIN\n" + "nvmLVz5MxxftLItyM19yejhW1ebZrgUaHXVFsculJRwSVzb9IjcCAwEAAaMzMDEw\n" + "DwYDVR0TAQH/BAUwAwEB/zARBgNVHQ4ECgQIR+IMi/ZTiFIwCwYDVR0PBAQDAgEG\n" + "MA0GCSqGSIb3DQEBBQUAA4IBAQCLGrLJXWG04bkruVPRsoWdd44W7hE928Jj2VuX\n" + "ZfsSZ9gqXLar5V7DtxYvyOirHYr9qxp81V9jz9yw3Xe5qObSIjiHBxTZ/75Wtf0H\n" + "DjxVyhbMp6Z3N/vbXB9OWQaHowND9Rart4S9Tu+fMTfwRvFAttEMpWT4Y14h21VO\n" + "TzF2nBBhjrZTOqMRvq9tfB69ri3iDGnHhVNoomG6xT60eVR4ngrHAr5i0RGCS2Uv\n" + "kVrCqIexVmiUefkl98HVrhq4uz2PqYo4Ffdz0Fpg0YCw8NzVUM1O7pJIae2yIx4w\n" + "zMiUyLb1O4Z/P6Yun/Y+LLWSlj7fLJOK/4GMDw9ZIRlXvVWa\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Sonera Class 2 Root CA", "MDkxCzAJBgNVBAYTAkZJMQ8wDQYDVQQKEwZTb25lcmExGTAXBgNVBAMTEFNvbmVyYSBDbGFzczIg" + "Q0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIDIDCCAgigAwIBAgIBHTANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJGSTEP\n" + "MA0GA1UEChMGU29uZXJhMRkwFwYDVQQDExBTb25lcmEgQ2xhc3MyIENBMB4XDTAx\n" + "MDQwNjA3Mjk0MFoXDTIxMDQwNjA3Mjk0MFowOTELMAkGA1UEBhMCRkkxDzANBgNV\n" + "BAoTBlNvbmVyYTEZMBcGA1UEAxMQU29uZXJhIENsYXNzMiBDQTCCASIwDQYJKoZI\n" + "hvcNAQEBBQADggEPADCCAQoCggEBAJAXSjWdyvANlsdE+hY3/Ei9vX+ALTU74W+o\n" + "Z6m/AxxNjG8yR9VBaKQTBME1DJqEQ/xcHf+Js+gXGM2RX/uJ4+q/Tl18GybTdXnt\n" + "5oTjV+WtKcT0OijnpXuENmmz/V52vaMtmdOQTiMofRhj8VQ7Jp12W5dCsv+u8E7s\n" + "3TmVToMGf+dJQMjFAbJUWmYdPfz56TwKnoG4cPABi+QjVHzIrviQHgCWctRUz2Ej\n" + "vOr7nQKV0ba5cTppCD8PtOFCx4j1P5iop7oc4HFx71hXgVB6XGt0Rg6DA5jDjqhu\n" + "8nYybieDwnPz3BjotJPqdURrBGAgcVeHnfO+oJAjPYok4doh28MCAwEAAaMzMDEw\n" + "DwYDVR0TAQH/BAUwAwEB/zARBgNVHQ4ECgQISqCqWITTXjwwCwYDVR0PBAQDAgEG\n" + "MA0GCSqGSIb3DQEBBQUAA4IBAQBazof5FnIVV0sd2ZvnoiYw7JNn39Yt0jSv9zil\n" + "zqsWuasvfDXLrNAPtEwr/IDva4yRXzZ299uzGxnq9LIR/WFxRL8oszodv7ND6J+/\n" + "3DEIcbCdjdY0RzKQxmUk96BKfARzjzlvF4xytb1LyHr4e4PDKE6cCepnP7JnBBvD\n" + "FNr450kkkdAdavphOe9r5yF1BgfYErQhIHBCcYHaPJo2vqZbDWpsmh+Re/n570K6\n" + "Tk6ezAyNlNzZRZxe7EJQY670XcSxEtzKO6gunRRaBXW37Ndj4ro1tgQIkejanZz2\n" + "ZrUYrAqmVCY0M9IbwdR/GjqOC6oybtv8TyWf2TLHllpwrN9M\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Staat der Nederlanden Root CA", "MFUxCzAJBgNVBAYTAk5MMR4wHAYDVQQKExVTdGFhdCBkZXIgTmVkZXJsYW5kZW4xJjAkBgNVBAMT" + "HVN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENB", "-----BEGIN CERTIFICATE-----\n" + "MIIDujCCAqKgAwIBAgIEAJiWijANBgkqhkiG9w0BAQUFADBVMQswCQYDVQQGEwJO\n" + "TDEeMBwGA1UEChMVU3RhYXQgZGVyIE5lZGVybGFuZGVuMSYwJAYDVQQDEx1TdGFh\n" + "dCBkZXIgTmVkZXJsYW5kZW4gUm9vdCBDQTAeFw0wMjEyMTcwOTIzNDlaFw0xNTEy\n" + "MTYwOTE1MzhaMFUxCzAJBgNVBAYTAk5MMR4wHAYDVQQKExVTdGFhdCBkZXIgTmVk\n" + "ZXJsYW5kZW4xJjAkBgNVBAMTHVN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENB\n" + "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmNK1URF6gaYUmHFtvszn\n" + "ExvWJw56s2oYHLZhWtVhCb/ekBPHZ+7d89rFDBKeNVU+LCeIQGv33N0iYfXCxw71\n" + "9tV2U02PjLwYdjeFnejKScfST5gTCaI+Ioicf9byEGW07l8Y1Rfj+MX94p2i71MO\n" + "hXeiD+EwR+4A5zN9RGcaC1Hoi6CeUJhoNFIfLm0B8mBF8jHrqTFoKbt6QZ7GGX+U\n" + "tFE5A3+y3qcym7RHjm+0Sq7lr7HcsBthvJly3uSJt3omXdozSVtSnA71iq3DuD3o\n" + "BmrC1SoLbHuEvVYFy4ZlkuxEK7COudxwC0barbxjiDn622r+I/q85Ej0ZytqERAh\n" + "SQIDAQABo4GRMIGOMAwGA1UdEwQFMAMBAf8wTwYDVR0gBEgwRjBEBgRVHSAAMDww\n" + "OgYIKwYBBQUHAgEWLmh0dHA6Ly93d3cucGtpb3ZlcmhlaWQubmwvcG9saWNpZXMv\n" + "cm9vdC1wb2xpY3kwDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBSofeu8Y6R0E3QA\n" + "7Jbg0zTBLL9s+DANBgkqhkiG9w0BAQUFAAOCAQEABYSHVXQ2YcG70dTGFagTtJ+k\n" + "/rvuFbQvBgwp8qiSpGEN/KtcCFtREytNwiphyPgJWPwtArI5fZlmgb9uXJVFIGzm\n" + "eafR2Bwp/MIgJ1HI8XxdNGdphREwxgDS1/PTfLbwMVcoEoJz6TMvplW0C5GUR5z6\n" + "u3pCMuiufi3IvKwUv9kP2Vv8wfl6leF9fpb8cbDCTMjfRTTJzg3ynGQI0DvDKcWy\n" + "7ZAEwbEpkcUwb8GpcjPM/l0WFywRaed+/sWDCN+83CI6LiBpIzlWYGeQiy52OfsR\n" + "iJf2fL1LuCAWZwWN4jvBcj+UlTfHXbme2JOhF4//DGYVwSR8MnwDHTuhWEUykw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("TDC Internet Root CA", "MEMxCzAJBgNVBAYTAkRLMRUwEwYDVQQKEwxUREMgSW50ZXJuZXQxHTAbBgNVBAsTFFREQyBJbnRl" + "cm5ldCBSb290IENB", "-----BEGIN CERTIFICATE-----\n" + "MIIEKzCCAxOgAwIBAgIEOsylTDANBgkqhkiG9w0BAQUFADBDMQswCQYDVQQGEwJE\n" + "SzEVMBMGA1UEChMMVERDIEludGVybmV0MR0wGwYDVQQLExRUREMgSW50ZXJuZXQg\n" + "Um9vdCBDQTAeFw0wMTA0MDUxNjMzMTdaFw0yMTA0MDUxNzAzMTdaMEMxCzAJBgNV\n" + "BAYTAkRLMRUwEwYDVQQKEwxUREMgSW50ZXJuZXQxHTAbBgNVBAsTFFREQyBJbnRl\n" + "cm5ldCBSb290IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxLhA\n" + "vJHVYx/XmaCLDEAedLdInUaMArLgJF/wGROnN4NrXceO+YQwzho7+vvOi20jxsNu\n" + "Zp+Jpd/gQlBn+h9sHvTQBda/ytZO5GhgbEaqHF1j4QeGDmUApy6mcca8uYGoOn0a\n" + "0vnRrEvLznWv3Hv6gXPU/Lq9QYjUdLP5Xjg6PEOo0pVOd20TDJ2PeAG3WiAfAzc1\n" + "4izbSysseLlJ28TQx5yc5IogCSEWVmb/Bexb4/DPqyQkXsN/cHoSxNK1EKC2IeGN\n" + "eGlVRGn1ypYcNIUXJXfi9i8nmHj9eQY6otZaQ8H/7AQ77hPv01ha/5Lr7K7a8jcD\n" + "R0G2l8ktCkEiu7vmpwIDAQABo4IBJTCCASEwEQYJYIZIAYb4QgEBBAQDAgAHMGUG\n" + "A1UdHwReMFwwWqBYoFakVDBSMQswCQYDVQQGEwJESzEVMBMGA1UEChMMVERDIElu\n" + "dGVybmV0MR0wGwYDVQQLExRUREMgSW50ZXJuZXQgUm9vdCBDQTENMAsGA1UEAxME\n" + "Q1JMMTArBgNVHRAEJDAigA8yMDAxMDQwNTE2MzMxN1qBDzIwMjEwNDA1MTcwMzE3\n" + "WjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUbGQBx/2FbazI2p5QCIUItTxWqFAw\n" + "HQYDVR0OBBYEFGxkAcf9hW2syNqeUAiFCLU8VqhQMAwGA1UdEwQFMAMBAf8wHQYJ\n" + "KoZIhvZ9B0EABBAwDhsIVjUuMDo0LjADAgSQMA0GCSqGSIb3DQEBBQUAA4IBAQBO\n" + "Q8zR3R0QGwZ/t6T609lN+yOfI1Rb5osvBCiLtSdtiaHsmGnc540mgwV5dOy0uaOX\n" + "wTUA/RXaOYE6lTGQ3pfphqiZdwzlWqCE/xIWrG64jcN7ksKsLtB9KOy282A4aW8+\n" + "2ARVPp7MVdK6/rtHBNcK2RYKNCn1WBPVT8+PVkuzHu7TmHnaCB4Mb7j4Fifvwm89\n" + "9qNLPg7kbWzbO0ESm70NRyN/PErQr8Cv9u8btRXE64PECV90i9kR+8JWsTz4cMo0\n" + "jUNAE4z9mQNUecYu6oah9jrUCbz0vGbMPVjQV0kK7iXiQe4T+Zs4NNEA9X7nlB38\n" + "aQNiuJkFBT1reBK9sG9l\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("TDC OCES Root CA", "MDExCzAJBgNVBAYTAkRLMQwwCgYDVQQKEwNUREMxFDASBgNVBAMTC1REQyBPQ0VTIENB", "-----BEGIN CERTIFICATE-----\n" + "MIIFGTCCBAGgAwIBAgIEPki9xDANBgkqhkiG9w0BAQUFADAxMQswCQYDVQQGEwJE\n" + "SzEMMAoGA1UEChMDVERDMRQwEgYDVQQDEwtUREMgT0NFUyBDQTAeFw0wMzAyMTEw\n" + "ODM5MzBaFw0zNzAyMTEwOTA5MzBaMDExCzAJBgNVBAYTAkRLMQwwCgYDVQQKEwNU\n" + "REMxFDASBgNVBAMTC1REQyBPQ0VTIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A\n" + "MIIBCgKCAQEArGL2YSCyz8DGhdfjeebM7fI5kqSXLmSjhFuHnEz9pPPEXyG9VhDr\n" + "2y5h7JNp46PMvZnDBfwGuMo2HP6QjklMxFaaL1a8z3sM8W9Hpg1DTeLpHTk0zY0s\n" + "2RKY+ePhwUp8hjjEqcRhiNJerxomTdXkoCJHhNlktxmW/OwZ5LKXJk5KTMuPJItU\n" + "GBxIYXvViGjaXbXqzRowwYCDdlCqT9HU3Tjw7xb04QxQBr/q+3pJoSgrHPb8FTKj\n" + "dGqPqcNiKXEx5TukYBdedObaE+3pHx8b0bJoc8YQNHVGEBDjkAB2QMuLt0MJIf+r\n" + "TpPGWOmlgtt3xDqZsXKVSQTwtyv6e1mO3QIDAQABo4ICNzCCAjMwDwYDVR0TAQH/\n" + "BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwgewGA1UdIASB5DCB4TCB3gYIKoFQgSkB\n" + "AQEwgdEwLwYIKwYBBQUHAgEWI2h0dHA6Ly93d3cuY2VydGlmaWthdC5kay9yZXBv\n" + "c2l0b3J5MIGdBggrBgEFBQcCAjCBkDAKFgNUREMwAwIBARqBgUNlcnRpZmlrYXRl\n" + "ciBmcmEgZGVubmUgQ0EgdWRzdGVkZXMgdW5kZXIgT0lEIDEuMi4yMDguMTY5LjEu\n" + "MS4xLiBDZXJ0aWZpY2F0ZXMgZnJvbSB0aGlzIENBIGFyZSBpc3N1ZWQgdW5kZXIg\n" + "T0lEIDEuMi4yMDguMTY5LjEuMS4xLjARBglghkgBhvhCAQEEBAMCAAcwgYEGA1Ud\n" + "HwR6MHgwSKBGoESkQjBAMQswCQYDVQQGEwJESzEMMAoGA1UEChMDVERDMRQwEgYD\n" + "VQQDEwtUREMgT0NFUyBDQTENMAsGA1UEAxMEQ1JMMTAsoCqgKIYmaHR0cDovL2Ny\n" + "bC5vY2VzLmNlcnRpZmlrYXQuZGsvb2Nlcy5jcmwwKwYDVR0QBCQwIoAPMjAwMzAy\n" + "MTEwODM5MzBagQ8yMDM3MDIxMTA5MDkzMFowHwYDVR0jBBgwFoAUYLWF7FZkfhIZ\n" + "J2cdUBVLc647+RIwHQYDVR0OBBYEFGC1hexWZH4SGSdnHVAVS3OuO/kSMB0GCSqG\n" + "SIb2fQdBAAQQMA4bCFY2LjA6NC4wAwIEkDANBgkqhkiG9w0BAQUFAAOCAQEACrom\n" + "JkbTc6gJ82sLMJn9iuFXehHTuJTXCRBuo7E4A9G28kNBKWKnctj7fAXmMXAnVBhO\n" + "inxO5dHKjHiIzxvTkIvmI/gLDjNDfZziChmPyQE+dF10yYscA+UYyAFMP8uXBV2Y\n" + "caaYb7Z8vTd/vuGTJW1v8AqtFxjhA7wHKcitJuj4YfD9IQl+mo6paH1IYnK9AOoB\n" + "mbgGglGBTvH1tJFUuSN6AJqfXY3gPGS5GhKSKseCRHI53OI8xthV9RVOyAUO28bQ\n" + "YqbsFbS1AoLbrIyigfCbmTH1ICCoiGEKB5+U/NDXG8wuF/MEJ3Zn61SD/aSQfgY9\n" + "BKNDLdr8C2LqL19iUw==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("UTN DATACorp SGC Root CA", "MIGTMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4w" + "HAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRy" + "dXN0LmNvbTEbMBkGA1UEAxMSVVROIC0gREFUQUNvcnAgU0dD", "-----BEGIN CERTIFICATE-----\n" + "MIIEXjCCA0agAwIBAgIQRL4Mi1AAIbQR0ypoBqmtaTANBgkqhkiG9w0BAQUFADCB\n" + "kzELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\n" + "Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\n" + "dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xGzAZBgNVBAMTElVUTiAtIERBVEFDb3Jw\n" + "IFNHQzAeFw05OTA2MjQxODU3MjFaFw0xOTA2MjQxOTA2MzBaMIGTMQswCQYDVQQG\n" + "EwJVUzELMAkGA1UECBMCVVQxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4wHAYD\n" + "VQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cu\n" + "dXNlcnRydXN0LmNvbTEbMBkGA1UEAxMSVVROIC0gREFUQUNvcnAgU0dDMIIBIjAN\n" + "BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3+5YEKIrblXEjr8uRgnn4AgPLit6\n" + "E5Qbvfa2gI5lBZMAHryv4g+OGQ0SR+ysraP6LnD43m77VkIVni5c7yPeIbkFdicZ\n" + "D0/Ww5y0vpQZY/KmEQrrU0icvvIpOxboGqBMpsn0GFlowHDyUwDAXlCCpVZvNvlK\n" + "4ESGoE1O1kduSUrLZ9emxAW5jh70/P/N5zbgnAVssjMiFdC04MwXwLLA9P4yPykq\n" + "lXvY8qdOD1R8oQ2AswkDwf9c3V6aPryuvEeKaq5xyh+xKrhfQgUL7EYw0XILyulW\n" + "bfXv33i+Ybqypa4ETLyorGkVl73v67SMvzX41MPRKA5cOp9wGDMgd8SirwIDAQAB\n" + "o4GrMIGoMAsGA1UdDwQEAwIBxjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRT\n" + "MtGzz3/64PGgXYVOktKeRR20TzA9BgNVHR8ENjA0MDKgMKAuhixodHRwOi8vY3Js\n" + "LnVzZXJ0cnVzdC5jb20vVVROLURBVEFDb3JwU0dDLmNybDAqBgNVHSUEIzAhBggr\n" + "BgEFBQcDAQYKKwYBBAGCNwoDAwYJYIZIAYb4QgQBMA0GCSqGSIb3DQEBBQUAA4IB\n" + "AQAnNZcAiosovcYzMB4p/OL31ZjUQLtgyr+rFywJNn9Q+kHcrpY6CiM+iVnJowft\n" + "Gzet/Hy+UUla3joKVAgWRcKZsYfNjGjgaQPpxE6YsjuMFrMOoAyYUJuTqXAJyCyj\n" + "j98C5OBxOvG0I3KgqgHf35g+FFCgMSa9KOlaMCZ1+XtgHI3zzVAmbQQnmt/VDUVH\n" + "KWss5nbZqSl9Mt3JNjy9rjXxEZ4du5A/EkdOjtd+D2JzHVImOBwYSf0wdJrE5SIv\n" + "2MCN7ZF6TACPcn9d2t0bi0Vr591pl6jFVkwPDPafepE39peC4N1xaf92P2BNPM/3\n" + "mfnGV/TJVTl4uix5yaaIK/QI\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("UTN USERFirst Email Root CA", "MIGuMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4w" + "HAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRy" + "dXN0LmNvbTE2MDQGA1UEAxMtVVROLVVTRVJGaXJzdC1DbGllbnQgQXV0aGVudGljYXRpb24gYW5k" + "IEVtYWls", "-----BEGIN CERTIFICATE-----\n" + "MIIEojCCA4qgAwIBAgIQRL4Mi1AAJLQR0zYlJWfJiTANBgkqhkiG9w0BAQUFADCB\n" + "rjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\n" + "Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\n" + "dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xNjA0BgNVBAMTLVVUTi1VU0VSRmlyc3Qt\n" + "Q2xpZW50IEF1dGhlbnRpY2F0aW9uIGFuZCBFbWFpbDAeFw05OTA3MDkxNzI4NTBa\n" + "Fw0xOTA3MDkxNzM2NThaMIGuMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAV\n" + "BgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4wHAYDVQQKExVUaGUgVVNFUlRSVVNUIE5l\n" + "dHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRydXN0LmNvbTE2MDQGA1UE\n" + "AxMtVVROLVVTRVJGaXJzdC1DbGllbnQgQXV0aGVudGljYXRpb24gYW5kIEVtYWls\n" + "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsjmFpPJ9q0E7YkY3rs3B\n" + "YHW8OWX5ShpHornMSMxqmNVNNRm5pELlzkniii8efNIxB8dOtINknS4p1aJkxIW9\n" + "hVE1eaROaJB7HHqkkqgX8pgV8pPMyaQylbsMTzC9mKALi+VuG6JG+ni8om+rWV6l\n" + "L8/K2m2qL+usobNqqrcuZzWLeeEeaYji5kbNoKXqvgvOdjp6Dpvq/NonWz1zHyLm\n" + "SGHGTPNpsaguG7bUMSAsvIKKjqQOpdeJQ/wWWq8dcdcRWdq6hw2v+vPhwvCkxWeM\n" + "1tZUOt4KpLoDd7NlyP0e03RiqhjKaJMeoYV+9Udly/hNVyh00jT/MLbu9mIwFIws\n" + "6wIDAQABo4G5MIG2MAsGA1UdDwQEAwIBxjAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud\n" + "DgQWBBSJgmd9xJ0mcABLtFBIfN49rgRufTBYBgNVHR8EUTBPME2gS6BJhkdodHRw\n" + "Oi8vY3JsLnVzZXJ0cnVzdC5jb20vVVROLVVTRVJGaXJzdC1DbGllbnRBdXRoZW50\n" + "aWNhdGlvbmFuZEVtYWlsLmNybDAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUH\n" + "AwQwDQYJKoZIhvcNAQEFBQADggEBALFtYV2mGn98q0rkMPxTbyUkxsrt4jFcKw7u\n" + "7mFVbwQ+zznexRtJlOTrIEy05p5QLnLZjfWqo7NK2lYcYJeA3IKirUq9iiv/Cwm0\n" + "xtcgBEXkzYABurorbs6q15L+5K/r9CYdFip/bDCVNy8zEqx/3cfREYxRmLLQo5HQ\n" + "rfafnoOTHh1CuEava2bwm3/q4wMC5QJRwarVNZ1yQAOJujEdxRBoUp7fooXFXAim\n" + "eOZTT7Hot9MUnpOmw2TjrH5xzbyf6QMbzPvprDHBr3wVdAKZw7JHpsIyYdfHb0gk\n" + "USeh1YdV8nuPmD0Wnu51tvjQjvLzxq4oW6fw8zYX/MMF08oDSlQ=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("UTN USERFirst Hardware Root CA", "MIGXMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4w" + "HAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRy" + "dXN0LmNvbTEfMB0GA1UEAxMWVVROLVVTRVJGaXJzdC1IYXJkd2FyZQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIEdDCCA1ygAwIBAgIQRL4Mi1AAJLQR0zYq/mUK/TANBgkqhkiG9w0BAQUFADCB\n" + "lzELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\n" + "Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\n" + "dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3Qt\n" + "SGFyZHdhcmUwHhcNOTkwNzA5MTgxMDQyWhcNMTkwNzA5MTgxOTIyWjCBlzELMAkG\n" + "A1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEe\n" + "MBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExhodHRwOi8v\n" + "d3d3LnVzZXJ0cnVzdC5jb20xHzAdBgNVBAMTFlVUTi1VU0VSRmlyc3QtSGFyZHdh\n" + "cmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCx98M4P7Sof885glFn\n" + "0G2f0v9Y8+efK+wNiVSZuTiZFvfgIXlIwrthdBKWHTxqctU8EGc6Oe0rE81m65UJ\n" + "M6Rsl7HoxuzBdXmcRl6Nq9Bq/bkqVRcQVLMZ8Jr28bFdtqdt++BxF2uiiPsA3/4a\n" + "MXcMmgF6sTLjKwEHOG7DpV4jvEWbe1DByTCP2+UretNb+zNAHqDVmBe8i4fDidNd\n" + "oI6yqqr2jmmIBsX6iSHzCJ1pLgkzmykNRg+MzEk0sGlRvfkGzWitZky8PqxhvQqI\n" + "DsjfPe58BEydCl5rkdbux+0ojatNh4lz0G6k0B4WixThdkQDf2Os5M1JnMWS9Ksy\n" + "oUhbAgMBAAGjgbkwgbYwCwYDVR0PBAQDAgHGMA8GA1UdEwEB/wQFMAMBAf8wHQYD\n" + "VR0OBBYEFKFyXyYbKJhDlV0HN9WFlp1L0sNFMEQGA1UdHwQ9MDswOaA3oDWGM2h0\n" + "dHA6Ly9jcmwudXNlcnRydXN0LmNvbS9VVE4tVVNFUkZpcnN0LUhhcmR3YXJlLmNy\n" + "bDAxBgNVHSUEKjAoBggrBgEFBQcDAQYIKwYBBQUHAwUGCCsGAQUFBwMGBggrBgEF\n" + "BQcDBzANBgkqhkiG9w0BAQUFAAOCAQEARxkP3nTGmZev/K0oXnWO6y1n7k57K9cM\n" + "//bey1WiCuFMVGWTYGufEpytXoMs61quwOQt9ABjHbjAbPLPSbtNk28Gpgoiskli\n" + "CE7/yMgUsogWXecB5BKV5UU0s4tpvc+0hY91UZ59Ojg6FEgSxvunOxqNDYJAB+gE\n" + "CJChicsZUN/KHAG8HQQZexB2lzvukJDKxA4fFm517zP4029bHpbj4HR3dHuKom4t\n" + "3XbWOTCC8KucUvIqx69JXn7HaOWCgchqJ/kniCrVWFCVH/A7HFe7fRQ5YiuayZSS\n" + "KqMiDP+JJn1fIytH1xUdqWqeUQ0qUZ6B+dQ7XnASfxAynB67nfhmqA==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("UTN USERFirst Object Root CA", "MIGVMQswCQYDVQQGEwJVUzELMAkGA1UECBMCVVQxFzAVBgNVBAcTDlNhbHQgTGFrZSBDaXR5MR4w" + "HAYDVQQKExVUaGUgVVNFUlRSVVNUIE5ldHdvcmsxITAfBgNVBAsTGGh0dHA6Ly93d3cudXNlcnRy" + "dXN0LmNvbTEdMBsGA1UEAxMUVVROLVVTRVJGaXJzdC1PYmplY3Q=", "-----BEGIN CERTIFICATE-----\n" + "MIIEZjCCA06gAwIBAgIQRL4Mi1AAJLQR0zYt4LNfGzANBgkqhkiG9w0BAQUFADCB\n" + "lTELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAlVUMRcwFQYDVQQHEw5TYWx0IExha2Ug\n" + "Q2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBOZXR3b3JrMSEwHwYDVQQLExho\n" + "dHRwOi8vd3d3LnVzZXJ0cnVzdC5jb20xHTAbBgNVBAMTFFVUTi1VU0VSRmlyc3Qt\n" + "T2JqZWN0MB4XDTk5MDcwOTE4MzEyMFoXDTE5MDcwOTE4NDAzNlowgZUxCzAJBgNV\n" + "BAYTAlVTMQswCQYDVQQIEwJVVDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkxHjAc\n" + "BgNVBAoTFVRoZSBVU0VSVFJVU1QgTmV0d29yazEhMB8GA1UECxMYaHR0cDovL3d3\n" + "dy51c2VydHJ1c3QuY29tMR0wGwYDVQQDExRVVE4tVVNFUkZpcnN0LU9iamVjdDCC\n" + "ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAM6qgT+jo2F4qjEAVZURnicP\n" + "HxzfOpuCaDDASmEd8S8O+r5596Uj71VRloTN2+O5bj4x2AogZ8f02b+U60cEPgLO\n" + "KqJdhwQJ9jCdGIqXsqoc/EHSoTbL+z2RuufZcDX65OeQw5ujm9M89RKZd7G3CeBo\n" + "5hy485RjiGpq/gt2yb70IuRnuasaXnfBhQfdDWy/7gbHd2pBnqcP1/vulBe3/IW+\n" + "pKvEHDHd17bR5PDv3xaPslKT16HUiaEHLr/hARJCHhrh2JU022R5KP+6LhHC5ehb\n" + "kkj7RwvCbNqtMoNB86XlQXD9ZZBt+vpRxPm9lisZBCzTbafc8H9vg2XiaquHhnUC\n" + "AwEAAaOBrzCBrDALBgNVHQ8EBAMCAcYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4E\n" + "FgQU2u1kdBScFDyr3ZmpvVsoTYs8ydgwQgYDVR0fBDswOTA3oDWgM4YxaHR0cDov\n" + "L2NybC51c2VydHJ1c3QuY29tL1VUTi1VU0VSRmlyc3QtT2JqZWN0LmNybDApBgNV\n" + "HSUEIjAgBggrBgEFBQcDAwYIKwYBBQUHAwgGCisGAQQBgjcKAwQwDQYJKoZIhvcN\n" + "AQEFBQADggEBAAgfUrE3RHjb/c652pWWmKpVZIC1WkDdIaXFwfNfLEzIR1pp6ujw\n" + "NTX00CXzyKakh0q9G7FzCL3Uw8q2NbtZhncxzaeAFK4T7/yxSPlrJSUtUbYsbUXB\n" + "mMiKVl0+7kNOPmsnjtA6S4ULX9Ptaqd1y9Fahy85dRNacrACgZ++8A+EVCBibGnU\n" + "4U3GDZlDAQ0Slox4nb9QorFEqmrPF3rPbw/U+CRVX/A0FklmPlBGyWNxODFiuGK5\n" + "81OtbLUrohKqGU8J2l7nk8aOFAj+8DCAGKCGhU3IfdeLA/5u1fedFqySLKAj5ZyR\n" + "Uh+U3xeUc8OzwcFxBSAAeL0TUh2oPs0AH8g=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Camerfirma Chambers of Commerce Root", "MH8xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBBODI3NDMyODcx" + "IzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIwIAYDVQQDExlDaGFtYmVycyBv" + "ZiBDb21tZXJjZSBSb290", "-----BEGIN CERTIFICATE-----\n" + "MIIEvTCCA6WgAwIBAgIBADANBgkqhkiG9w0BAQUFADB/MQswCQYDVQQGEwJFVTEn\n" + "MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL\n" + "ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg\n" + "b2YgQ29tbWVyY2UgUm9vdDAeFw0wMzA5MzAxNjEzNDNaFw0zNzA5MzAxNjEzNDRa\n" + "MH8xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBB\n" + "ODI3NDMyODcxIzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSIw\n" + "IAYDVQQDExlDaGFtYmVycyBvZiBDb21tZXJjZSBSb290MIIBIDANBgkqhkiG9w0B\n" + "AQEFAAOCAQ0AMIIBCAKCAQEAtzZV5aVdGDDg2olUkfzIx1L4L1DZ77F1c2VHfRtb\n" + "unXF/KGIJPov7coISjlUxFF6tdpg6jg8gbLL8bvZkSM/SAFwdakFKq0fcfPJVD0d\n" + "BmpAPrMMhe5cG3nCYsS4No41XQEMIwRHNaqbYE6gZj3LJgqcQKH0XZi/caulAGgq\n" + "7YN6D6IUtdQis4CwPAxaUWktWBiP7Zme8a7ileb2R6jWDA+wWFjbw2Y3npuRVDM3\n" + "0pQcakjJyfKl2qUMI/cjDpwyVV5xnIQFUZot/eZOKjRa3spAN2cMVCFVd9oKDMyX\n" + "roDclDZK9D7ONhMeU+SsTjoF7Nuucpw4i9A5O4kKPnf+dQIBA6OCAUQwggFAMBIG\n" + "A1UdEwEB/wQIMAYBAf8CAQwwPAYDVR0fBDUwMzAxoC+gLYYraHR0cDovL2NybC5j\n" + "aGFtYmVyc2lnbi5vcmcvY2hhbWJlcnNyb290LmNybDAdBgNVHQ4EFgQU45T1sU3p\n" + "26EpW1eLTXYGduHRooowDgYDVR0PAQH/BAQDAgEGMBEGCWCGSAGG+EIBAQQEAwIA\n" + "BzAnBgNVHREEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24ub3JnMCcGA1Ud\n" + "EgQgMB6BHGNoYW1iZXJzcm9vdEBjaGFtYmVyc2lnbi5vcmcwWAYDVR0gBFEwTzBN\n" + "BgsrBgEEAYGHLgoDATA+MDwGCCsGAQUFBwIBFjBodHRwOi8vY3BzLmNoYW1iZXJz\n" + "aWduLm9yZy9jcHMvY2hhbWJlcnNyb290Lmh0bWwwDQYJKoZIhvcNAQEFBQADggEB\n" + "AAxBl8IahsAifJ/7kPMa0QOx7xP5IV8EnNrJpY0nbJaHkb5BkAFyk+cefV/2icZd\n" + "p0AJPaxJRUXcLo0waLIJuvvDL8y6C98/d3tGfToSJI6WjzwFCm/SlCgdbQzALogi\n" + "1djPHRPH8EjX1wWnz8dHnjs8NMiAT9QUu/wNUPf6s+xCX6ndbcj0dc97wXImsQEc\n" + "XCz9ek60AcUFV7nnPKoF2YjpB0ZBzu9Bga5Y34OirsrXdx/nADydb47kMgkdTXg0\n" + "eDQ8lJsm7U9xxhl6vSAiSFr+S30Dt+dYvsYyTnQeaN2oaFuzPu5ifdmA6Ap1erfu\n" + "tGWaIZDgqtCYvDi1czyL+Nw=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Camerfirma Global Chambersign Root", "MH0xCzAJBgNVBAYTAkVVMScwJQYDVQQKEx5BQyBDYW1lcmZpcm1hIFNBIENJRiBBODI3NDMyODcx" + "IzAhBgNVBAsTGmh0dHA6Ly93d3cuY2hhbWJlcnNpZ24ub3JnMSAwHgYDVQQDExdHbG9iYWwgQ2hh" + "bWJlcnNpZ24gUm9vdA==", "-----BEGIN CERTIFICATE-----\n" + "MIIExTCCA62gAwIBAgIBADANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJFVTEn\n" + "MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL\n" + "ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4GA1UEAxMXR2xvYmFsIENo\n" + "YW1iZXJzaWduIFJvb3QwHhcNMDMwOTMwMTYxNDE4WhcNMzcwOTMwMTYxNDE4WjB9\n" + "MQswCQYDVQQGEwJFVTEnMCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgy\n" + "NzQzMjg3MSMwIQYDVQQLExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEgMB4G\n" + "A1UEAxMXR2xvYmFsIENoYW1iZXJzaWduIFJvb3QwggEgMA0GCSqGSIb3DQEBAQUA\n" + "A4IBDQAwggEIAoIBAQCicKLQn0KuWxfH2H3PFIP8T8mhtxOviteePgQKkotgVvq0\n" + "Mi+ITaFgCPS3CU6gSS9J1tPfnZdan5QEcOw/Wdm3zGaLmFIoCQLfxS+EjXqXd7/s\n" + "QJ0lcqu1PzKY+7e3/HKE5TWH+VX6ox8Oby4o3Wmg2UIQxvi1RMLQQ3/bvOSiPGpV\n" + "eAp3qdjqGTK3L/5cPxvusZjsyq16aUXjlg9V9ubtdepl6DJWk0aJqCWKZQbua795\n" + "B9Dxt6/tLE2Su8CoX6dnfQTyFQhwrJLWfQTSM/tMtgsL+xrJxI0DqX5c8lCrEqWh\n" + "z0hQpe/SyBoT+rB/sYIcd2oPX9wLlY/vQ37mRQklAgEDo4IBUDCCAUwwEgYDVR0T\n" + "AQH/BAgwBgEB/wIBDDA/BgNVHR8EODA2MDSgMqAwhi5odHRwOi8vY3JsLmNoYW1i\n" + "ZXJzaWduLm9yZy9jaGFtYmVyc2lnbnJvb3QuY3JsMB0GA1UdDgQWBBRDnDafsJ4w\n" + "TcbOX60Qq+UDpfqpFDAOBgNVHQ8BAf8EBAMCAQYwEQYJYIZIAYb4QgEBBAQDAgAH\n" + "MCoGA1UdEQQjMCGBH2NoYW1iZXJzaWducm9vdEBjaGFtYmVyc2lnbi5vcmcwKgYD\n" + "VR0SBCMwIYEfY2hhbWJlcnNpZ25yb290QGNoYW1iZXJzaWduLm9yZzBbBgNVHSAE\n" + "VDBSMFAGCysGAQQBgYcuCgEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly9jcHMuY2hh\n" + "bWJlcnNpZ24ub3JnL2Nwcy9jaGFtYmVyc2lnbnJvb3QuaHRtbDANBgkqhkiG9w0B\n" + "AQUFAAOCAQEAPDtwkfkEVCeR4e3t/mh/YV3lQWVPMvEYBZRqHN4fcNs+ezICNLUM\n" + "bKGKfKX0j//U2K0X1S0E0T9YgOKBWYi+wONGkyT+kL0mojAt6JcmVzWJdJYY9hXi\n" + "ryQZVgICsroPFOrGimbBhkVVi76SvpykBMdJPJ7oKXqJ1/6v/2j1pReQvayZzKWG\n" + "VwlnRtvWFsJG8eSpUPWP0ZIV018+xgBJOm5YstHRJw0lyDL4IBHNfTIzSJRUTN3c\n" + "ecQwn+uOuFW114hcxWokPbLTBQNRxgfvzBRydD1ucs4YKIxKoHflCStFREest2d/\n" + "AYoFWpO+ocH/+OcOZ6RHSXZddZAa9SaP8A==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("NetLock Qualified (Class QA) Root", "MIHJMQswCQYDVQQGEwJIVTERMA8GA1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFs" + "b3phdGJpenRvbnNhZ2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxQjBABgNVBAMT" + "OU5ldExvY2sgTWlub3NpdGV0dCBLb3pqZWd5em9pIChDbGFzcyBRQSkgVGFudXNpdHZhbnlraWFk" + "bzEeMBwGCSqGSIb3DQEJARYPaW5mb0BuZXRsb2NrLmh1", "-----BEGIN CERTIFICATE-----\n" + "MIIG0TCCBbmgAwIBAgIBezANBgkqhkiG9w0BAQUFADCByTELMAkGA1UEBhMCSFUx\n" + "ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0\n" + "b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMUIwQAYDVQQD\n" + "EzlOZXRMb2NrIE1pbm9zaXRldHQgS296amVneXpvaSAoQ2xhc3MgUUEpIFRhbnVz\n" + "aXR2YW55a2lhZG8xHjAcBgkqhkiG9w0BCQEWD2luZm9AbmV0bG9jay5odTAeFw0w\n" + "MzAzMzAwMTQ3MTFaFw0yMjEyMTUwMTQ3MTFaMIHJMQswCQYDVQQGEwJIVTERMA8G\n" + "A1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFsb3phdGJpenRvbnNh\n" + "Z2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxQjBABgNVBAMTOU5l\n" + "dExvY2sgTWlub3NpdGV0dCBLb3pqZWd5em9pIChDbGFzcyBRQSkgVGFudXNpdHZh\n" + "bnlraWFkbzEeMBwGCSqGSIb3DQEJARYPaW5mb0BuZXRsb2NrLmh1MIIBIjANBgkq\n" + "hkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx1Ilstg91IRVCacbvWy5FPSKAtt2/Goq\n" + "eKvld/Bu4IwjZ9ulZJm53QE+b+8tmjwi8F3JV6BVQX/yQ15YglMxZc4e8ia6AFQe\n" + "r7C8HORSjKAyr7c3sVNnaHRnUPYtLmTeriZ539+Zhqurf4XsoPuAzPS4DB6TRWO5\n" + "3Lhbm+1bOdRfYrCnjnxmOCyqsQhjF2d9zL2z8cM/z1A57dEZgxXbhxInlrfa6uWd\n" + "vLrqOU+L73Sa58XQ0uqGURzk/mQIKAR5BevKxXEOC++r6uwSEaEYBTJp0QwsGj0l\n" + "mT+1fMptsK6ZmfoIYOcZwvK9UdPM0wKswREMgM6r3JSda6M5UzrWhQIDAMV9o4IC\n" + "wDCCArwwEgYDVR0TAQH/BAgwBgEB/wIBBDAOBgNVHQ8BAf8EBAMCAQYwggJ1Bglg\n" + "hkgBhvhCAQ0EggJmFoICYkZJR1lFTEVNISBFemVuIHRhbnVzaXR2YW55IGEgTmV0\n" + "TG9jayBLZnQuIE1pbm9zaXRldHQgU3pvbGdhbHRhdGFzaSBTemFiYWx5emF0YWJh\n" + "biBsZWlydCBlbGphcmFzb2sgYWxhcGphbiBrZXN6dWx0LiBBIG1pbm9zaXRldHQg\n" + "ZWxla3Ryb25pa3VzIGFsYWlyYXMgam9naGF0YXMgZXJ2ZW55ZXN1bGVzZW5laywg\n" + "dmFsYW1pbnQgZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYSBNaW5vc2l0ZXR0IFN6\n" + "b2xnYWx0YXRhc2kgU3phYmFseXphdGJhbiwgYXogQWx0YWxhbm9zIFN6ZXJ6b2Rl\n" + "c2kgRmVsdGV0ZWxla2JlbiBlbG9pcnQgZWxsZW5vcnplc2kgZWxqYXJhcyBtZWd0\n" + "ZXRlbGUuIEEgZG9rdW1lbnR1bW9rIG1lZ3RhbGFsaGF0b2sgYSBodHRwczovL3d3\n" + "dy5uZXRsb2NrLmh1L2RvY3MvIGNpbWVuIHZhZ3kga2VyaGV0b2sgYXogaW5mb0Bu\n" + "ZXRsb2NrLm5ldCBlLW1haWwgY2ltZW4uIFdBUk5JTkchIFRoZSBpc3N1YW5jZSBh\n" + "bmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmljYXRlIGFyZSBzdWJqZWN0IHRvIHRo\n" + "ZSBOZXRMb2NrIFF1YWxpZmllZCBDUFMgYXZhaWxhYmxlIGF0IGh0dHBzOi8vd3d3\n" + "Lm5ldGxvY2suaHUvZG9jcy8gb3IgYnkgZS1tYWlsIGF0IGluZm9AbmV0bG9jay5u\n" + "ZXQwHQYDVR0OBBYEFAlqYhaSsFq7VQ7LdTI6MuWyIckoMA0GCSqGSIb3DQEBBQUA\n" + "A4IBAQCRalCc23iBmz+LQuM7/KbD7kPgz/PigDVJRXYC4uMvBcXxKufAQTPGtpvQ\n" + "MznNwNuhrWw3AkxYQTvyl5LGSKjN5Yo5iWH5Upfpvfb5lHTocQ68d4bDBsxafEp+\n" + "NFAwLvt/MpqNPfMgW/hqyobzMUwsWYACff44yTB1HLdV47yfuqhthCgFdbOLDcCR\n" + "VCHnpgu0mfVRQdzNo0ci2ccBgcTcR08m6h/t280NmPSjnLRzMkqWmf68f8glWPhY\n" + "83ZmiVSkpj7EUFy6iRiCdUgh0k8T6GB+B3bbELVR5qq5aKrN9p2QdRLqOBrKROi3\n" + "macqaJVmlaut74nLYKkGEsaUR+ko\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("NetLock Notary (Class A) Root", "MIGvMQswCQYDVQQGEwJIVTEQMA4GA1UECBMHSHVuZ2FyeTERMA8GA1UEBxMIQnVkYXBlc3QxJzAl" + "BgNVBAoTHk5ldExvY2sgSGFsb3phdGJpenRvbnNhZ2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZh" + "bnlraWFkb2sxNjA0BgNVBAMTLU5ldExvY2sgS296amVneXpvaSAoQ2xhc3MgQSkgVGFudXNpdHZh" + "bnlraWFkbw==", "-----BEGIN CERTIFICATE-----\n" + "MIIGfTCCBWWgAwIBAgICAQMwDQYJKoZIhvcNAQEEBQAwga8xCzAJBgNVBAYTAkhV\n" + "MRAwDgYDVQQIEwdIdW5nYXJ5MREwDwYDVQQHEwhCdWRhcGVzdDEnMCUGA1UEChMe\n" + "TmV0TG9jayBIYWxvemF0Yml6dG9uc2FnaSBLZnQuMRowGAYDVQQLExFUYW51c2l0\n" + "dmFueWtpYWRvazE2MDQGA1UEAxMtTmV0TG9jayBLb3pqZWd5em9pIChDbGFzcyBB\n" + "KSBUYW51c2l0dmFueWtpYWRvMB4XDTk5MDIyNDIzMTQ0N1oXDTE5MDIxOTIzMTQ0\n" + "N1owga8xCzAJBgNVBAYTAkhVMRAwDgYDVQQIEwdIdW5nYXJ5MREwDwYDVQQHEwhC\n" + "dWRhcGVzdDEnMCUGA1UEChMeTmV0TG9jayBIYWxvemF0Yml6dG9uc2FnaSBLZnQu\n" + "MRowGAYDVQQLExFUYW51c2l0dmFueWtpYWRvazE2MDQGA1UEAxMtTmV0TG9jayBL\n" + "b3pqZWd5em9pIChDbGFzcyBBKSBUYW51c2l0dmFueWtpYWRvMIIBIjANBgkqhkiG\n" + "9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvHSMD7tM9DceqQWC2ObhbHDqeLVu0ThEDaiD\n" + "zl3S1tWBxdRL51uUcCbbO51qTGL3cfNk1mE7PetzozfZz+qMkjvN9wfcZnSX9EUi\n" + "3fRc4L9t875lM+QVOr/bmJBVOMTtplVjC7B4BPTjbsE/jvxReB+SnoPC/tmwqcm8\n" + "WgD/qaiYdPv2LD4VOQ22BFWoDpggQrOxJa1+mm9dU7GrDPzr4PN6s6iz/0b2Y6LY\n" + "Oph7tqyF/7AlT3Rj5xMHpQqPBffAZG9+pyeAlt7ULoZgx2srXnN7F+eRP2QM2Esi\n" + "NCubMvJIH5+hCoR64sKtlz2O1cH5VqNQ6ca0+pii7pXmKgOM3wIDAQABo4ICnzCC\n" + "ApswDgYDVR0PAQH/BAQDAgAGMBIGA1UdEwEB/wQIMAYBAf8CAQQwEQYJYIZIAYb4\n" + "QgEBBAQDAgAHMIICYAYJYIZIAYb4QgENBIICURaCAk1GSUdZRUxFTSEgRXplbiB0\n" + "YW51c2l0dmFueSBhIE5ldExvY2sgS2Z0LiBBbHRhbGFub3MgU3pvbGdhbHRhdGFz\n" + "aSBGZWx0ZXRlbGVpYmVuIGxlaXJ0IGVsamFyYXNvayBhbGFwamFuIGtlc3p1bHQu\n" + "IEEgaGl0ZWxlc2l0ZXMgZm9seWFtYXRhdCBhIE5ldExvY2sgS2Z0LiB0ZXJtZWtm\n" + "ZWxlbG9zc2VnLWJpenRvc2l0YXNhIHZlZGkuIEEgZGlnaXRhbGlzIGFsYWlyYXMg\n" + "ZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYXogZWxvaXJ0IGVsbGVub3J6ZXNpIGVs\n" + "amFyYXMgbWVndGV0ZWxlLiBBeiBlbGphcmFzIGxlaXJhc2EgbWVndGFsYWxoYXRv\n" + "IGEgTmV0TG9jayBLZnQuIEludGVybmV0IGhvbmxhcGphbiBhIGh0dHBzOi8vd3d3\n" + "Lm5ldGxvY2submV0L2RvY3MgY2ltZW4gdmFneSBrZXJoZXRvIGF6IGVsbGVub3J6\n" + "ZXNAbmV0bG9jay5uZXQgZS1tYWlsIGNpbWVuLiBJTVBPUlRBTlQhIFRoZSBpc3N1\n" + "YW5jZSBhbmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmljYXRlIGlzIHN1YmplY3Qg\n" + "dG8gdGhlIE5ldExvY2sgQ1BTIGF2YWlsYWJsZSBhdCBodHRwczovL3d3dy5uZXRs\n" + "b2NrLm5ldC9kb2NzIG9yIGJ5IGUtbWFpbCBhdCBjcHNAbmV0bG9jay5uZXQuMA0G\n" + "CSqGSIb3DQEBBAUAA4IBAQBIJEb3ulZv+sgoA0BO5TE5ayZrU3/b39/zcT0mwBQO\n" + "xmd7I6gMc90Bu8bKbjc5VdXHjFYgDigKDtIqpLBJUsY4B/6+CgmM0ZjPytoUMaFP\n" + "0jn8DxEsQ8Pdq5PHVT5HfBgaANzze9jyf1JsIPQLX2lS9O74silg6+NJMSEN1rUQ\n" + "QeJBCWziGppWS3cC9qCbmieH6FUpccKQn0V4GuEVZD3QDtigdp+uxdAu6tYPVuxk\n" + "f1qbFFgBJ34TUMdrKuZoPL9coAob4Q566eKAw+np9v1sEZ7Q5SgnK1QyQhSCdeZK\n" + "8CtmdWOMovsEPoMOmzbwGOQmIMOM8CgHrTwXZoi1/baI\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("NetLock Business (Class B) Root", "MIGZMQswCQYDVQQGEwJIVTERMA8GA1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFs" + "b3phdGJpenRvbnNhZ2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxMjAwBgNVBAMT" + "KU5ldExvY2sgVXpsZXRpIChDbGFzcyBCKSBUYW51c2l0dmFueWtpYWRv", "-----BEGIN CERTIFICATE-----\n" + "MIIFSzCCBLSgAwIBAgIBaTANBgkqhkiG9w0BAQQFADCBmTELMAkGA1UEBhMCSFUx\n" + "ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0\n" + "b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMTIwMAYDVQQD\n" + "EylOZXRMb2NrIFV6bGV0aSAoQ2xhc3MgQikgVGFudXNpdHZhbnlraWFkbzAeFw05\n" + "OTAyMjUxNDEwMjJaFw0xOTAyMjAxNDEwMjJaMIGZMQswCQYDVQQGEwJIVTERMA8G\n" + "A1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFsb3phdGJpenRvbnNh\n" + "Z2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxMjAwBgNVBAMTKU5l\n" + "dExvY2sgVXpsZXRpIChDbGFzcyBCKSBUYW51c2l0dmFueWtpYWRvMIGfMA0GCSqG\n" + "SIb3DQEBAQUAA4GNADCBiQKBgQCx6gTsIKAjwo84YM/HRrPVG/77uZmeBNwcf4xK\n" + "gZjupNTKihe5In+DCnVMm8Bp2GQ5o+2So/1bXHQawEfKOml2mrriRBf8TKPV/riX\n" + "iK+IA4kfpPIEPsgHC+b5sy96YhQJRhTKZPWLgLViqNhr1nGTLbO/CVRY7QbrqHvc\n" + "Q7GhaQIDAQABo4ICnzCCApswEgYDVR0TAQH/BAgwBgEB/wIBBDAOBgNVHQ8BAf8E\n" + "BAMCAAYwEQYJYIZIAYb4QgEBBAQDAgAHMIICYAYJYIZIAYb4QgENBIICURaCAk1G\n" + "SUdZRUxFTSEgRXplbiB0YW51c2l0dmFueSBhIE5ldExvY2sgS2Z0LiBBbHRhbGFu\n" + "b3MgU3pvbGdhbHRhdGFzaSBGZWx0ZXRlbGVpYmVuIGxlaXJ0IGVsamFyYXNvayBh\n" + "bGFwamFuIGtlc3p1bHQuIEEgaGl0ZWxlc2l0ZXMgZm9seWFtYXRhdCBhIE5ldExv\n" + "Y2sgS2Z0LiB0ZXJtZWtmZWxlbG9zc2VnLWJpenRvc2l0YXNhIHZlZGkuIEEgZGln\n" + "aXRhbGlzIGFsYWlyYXMgZWxmb2dhZGFzYW5hayBmZWx0ZXRlbGUgYXogZWxvaXJ0\n" + "IGVsbGVub3J6ZXNpIGVsamFyYXMgbWVndGV0ZWxlLiBBeiBlbGphcmFzIGxlaXJh\n" + "c2EgbWVndGFsYWxoYXRvIGEgTmV0TG9jayBLZnQuIEludGVybmV0IGhvbmxhcGph\n" + "biBhIGh0dHBzOi8vd3d3Lm5ldGxvY2submV0L2RvY3MgY2ltZW4gdmFneSBrZXJo\n" + "ZXRvIGF6IGVsbGVub3J6ZXNAbmV0bG9jay5uZXQgZS1tYWlsIGNpbWVuLiBJTVBP\n" + "UlRBTlQhIFRoZSBpc3N1YW5jZSBhbmQgdGhlIHVzZSBvZiB0aGlzIGNlcnRpZmlj\n" + "YXRlIGlzIHN1YmplY3QgdG8gdGhlIE5ldExvY2sgQ1BTIGF2YWlsYWJsZSBhdCBo\n" + "dHRwczovL3d3dy5uZXRsb2NrLm5ldC9kb2NzIG9yIGJ5IGUtbWFpbCBhdCBjcHNA\n" + "bmV0bG9jay5uZXQuMA0GCSqGSIb3DQEBBAUAA4GBAATbrowXr/gOkDFOzT4JwG06\n" + "sPgzTEdM43WIEJessDgVkcYplswhwG08pXTP2IKlOcNl40JwuyKQ433bNXbhoLXa\n" + "n3BukxowOR0w2y7jfLKRstE3Kfq51hdcR0/jHTjrn9V7lagonhVK0dHQKwCXoOKS\n" + "NitjrFgBazMpUIaD8QFI\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("NetLock Express (Class C) Root", "MIGbMQswCQYDVQQGEwJIVTERMA8GA1UEBxMIQnVkYXBlc3QxJzAlBgNVBAoTHk5ldExvY2sgSGFs" + "b3phdGJpenRvbnNhZ2kgS2Z0LjEaMBgGA1UECxMRVGFudXNpdHZhbnlraWFkb2sxNDAyBgNVBAMT" + "K05ldExvY2sgRXhwcmVzc3ogKENsYXNzIEMpIFRhbnVzaXR2YW55a2lhZG8=", "-----BEGIN CERTIFICATE-----\n" + "MIIFTzCCBLigAwIBAgIBaDANBgkqhkiG9w0BAQQFADCBmzELMAkGA1UEBhMCSFUx\n" + "ETAPBgNVBAcTCEJ1ZGFwZXN0MScwJQYDVQQKEx5OZXRMb2NrIEhhbG96YXRiaXp0\n" + "b25zYWdpIEtmdC4xGjAYBgNVBAsTEVRhbnVzaXR2YW55a2lhZG9rMTQwMgYDVQQD\n" + "EytOZXRMb2NrIEV4cHJlc3N6IChDbGFzcyBDKSBUYW51c2l0dmFueWtpYWRvMB4X\n" + "DTk5MDIyNTE0MDgxMVoXDTE5MDIyMDE0MDgxMVowgZsxCzAJBgNVBAYTAkhVMREw\n" + "DwYDVQQHEwhCdWRhcGVzdDEnMCUGA1UEChMeTmV0TG9jayBIYWxvemF0Yml6dG9u\n" + "c2FnaSBLZnQuMRowGAYDVQQLExFUYW51c2l0dmFueWtpYWRvazE0MDIGA1UEAxMr\n" + "TmV0TG9jayBFeHByZXNzeiAoQ2xhc3MgQykgVGFudXNpdHZhbnlraWFkbzCBnzAN\n" + "BgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA6+ywbGGKIyWvYCDj2Z/8kwvbXY2wobNA\n" + "OoLO/XXgeDIDhlqGlZHtU/qdQPzm6N3ZW3oDvV3zOwzDUXmbrVWg6dADEK8KuhRC\n" + "2VImESLH0iDMgqSaqf64gXadarfSNnU+sYYJ9m5tfk63euyucYT2BDMIJTLrdKwW\n" + "RMbkQJMdf60CAwEAAaOCAp8wggKbMBIGA1UdEwEB/wQIMAYBAf8CAQQwDgYDVR0P\n" + "AQH/BAQDAgAGMBEGCWCGSAGG+EIBAQQEAwIABzCCAmAGCWCGSAGG+EIBDQSCAlEW\n" + "ggJNRklHWUVMRU0hIEV6ZW4gdGFudXNpdHZhbnkgYSBOZXRMb2NrIEtmdC4gQWx0\n" + "YWxhbm9zIFN6b2xnYWx0YXRhc2kgRmVsdGV0ZWxlaWJlbiBsZWlydCBlbGphcmFz\n" + "b2sgYWxhcGphbiBrZXN6dWx0LiBBIGhpdGVsZXNpdGVzIGZvbHlhbWF0YXQgYSBO\n" + "ZXRMb2NrIEtmdC4gdGVybWVrZmVsZWxvc3NlZy1iaXp0b3NpdGFzYSB2ZWRpLiBB\n" + "IGRpZ2l0YWxpcyBhbGFpcmFzIGVsZm9nYWRhc2FuYWsgZmVsdGV0ZWxlIGF6IGVs\n" + "b2lydCBlbGxlbm9yemVzaSBlbGphcmFzIG1lZ3RldGVsZS4gQXogZWxqYXJhcyBs\n" + "ZWlyYXNhIG1lZ3RhbGFsaGF0byBhIE5ldExvY2sgS2Z0LiBJbnRlcm5ldCBob25s\n" + "YXBqYW4gYSBodHRwczovL3d3dy5uZXRsb2NrLm5ldC9kb2NzIGNpbWVuIHZhZ3kg\n" + "a2VyaGV0byBheiBlbGxlbm9yemVzQG5ldGxvY2submV0IGUtbWFpbCBjaW1lbi4g\n" + "SU1QT1JUQU5UISBUaGUgaXNzdWFuY2UgYW5kIHRoZSB1c2Ugb2YgdGhpcyBjZXJ0\n" + "aWZpY2F0ZSBpcyBzdWJqZWN0IHRvIHRoZSBOZXRMb2NrIENQUyBhdmFpbGFibGUg\n" + "YXQgaHR0cHM6Ly93d3cubmV0bG9jay5uZXQvZG9jcyBvciBieSBlLW1haWwgYXQg\n" + "Y3BzQG5ldGxvY2submV0LjANBgkqhkiG9w0BAQQFAAOBgQAQrX/XDDKACtiG8XmY\n" + "ta3UzbM2xJZIwVzNmtkFLp++UOv0JhQQLdRmF/iewSf98e3ke0ugbLWrmldwpu2g\n" + "pO0u9f38vf5NNwgMvOOWgyL1SRt/Syu0VMGAfJlOHdCM7tCs5ZL6dVb+ZKATj7i4\n" + "Fp1hBWeAyNDYpQcCNJgEjTME1A==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("XRamp Global CA Root", "MIGCMQswCQYDVQQGEwJVUzEeMBwGA1UECxMVd3d3LnhyYW1wc2VjdXJpdHkuY29tMSQwIgYDVQQK" + "ExtYUmFtcCBTZWN1cml0eSBTZXJ2aWNlcyBJbmMxLTArBgNVBAMTJFhSYW1wIEdsb2JhbCBDZXJ0" + "aWZpY2F0aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIEMDCCAxigAwIBAgIQUJRs7Bjq1ZxN1ZfvdY+grTANBgkqhkiG9w0BAQUFADCB\n" + "gjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3dy54cmFtcHNlY3VyaXR5LmNvbTEk\n" + "MCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2VydmljZXMgSW5jMS0wKwYDVQQDEyRY\n" + "UmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQxMTAxMTcx\n" + "NDA0WhcNMzUwMTAxMDUzNzE5WjCBgjELMAkGA1UEBhMCVVMxHjAcBgNVBAsTFXd3\n" + "dy54cmFtcHNlY3VyaXR5LmNvbTEkMCIGA1UEChMbWFJhbXAgU2VjdXJpdHkgU2Vy\n" + "dmljZXMgSW5jMS0wKwYDVQQDEyRYUmFtcCBHbG9iYWwgQ2VydGlmaWNhdGlvbiBB\n" + "dXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCYJB69FbS6\n" + "38eMpSe2OAtp87ZOqCwuIR1cRN8hXX4jdP5efrRKt6atH67gBhbim1vZZ3RrXYCP\n" + "KZ2GG9mcDZhtdhAoWORlsH9KmHmf4MMxfoArtYzAQDsRhtDLooY2YKTVMIJt2W7Q\n" + "DxIEM5dfT2Fa8OT5kavnHTu86M/0ay00fOJIYRyO82FEzG+gSqmUsE3a56k0enI4\n" + "qEHMPJQRfevIpoy3hsvKMzvZPTeL+3o+hiznc9cKV6xkmxnr9A8ECIqsAxcZZPRa\n" + "JSKNNCyy9mgdEm3Tih4U2sSPpuIjhdV6Db1q4Ons7Be7QhtnqiXtRYMh/MHJfNVi\n" + "PvryxS3T/dRlAgMBAAGjgZ8wgZwwEwYJKwYBBAGCNxQCBAYeBABDAEEwCwYDVR0P\n" + "BAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFMZPoj0GY4QJnM5i5ASs\n" + "jVy16bYbMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jcmwueHJhbXBzZWN1cml0\n" + "eS5jb20vWEdDQS5jcmwwEAYJKwYBBAGCNxUBBAMCAQEwDQYJKoZIhvcNAQEFBQAD\n" + "ggEBAJEVOQMBG2f7Shz5CmBbodpNl2L5JFMn14JkTpAuw0kbK5rc/Kh4ZzXxHfAR\n" + "vbdI4xD2Dd8/0sm2qlWkSLoC295ZLhVbO50WfUfXN+pfTXYSNrsf16GBBEYgoyxt\n" + "qZ4Bfj8pzgCT3/3JknOJiWSe5yvkHJEs0rnOfc5vMZnT5r7SHpDwCRR5XCOrTdLa\n" + "IR9NmXmd4c8nnxCbHIgNsIpkQTG4DmyQJKSbXHGPurt+HBvbaoAPIbzp26a3QPSy\n" + "i6mx5O+aGtA9aZnuqCij4Tyz8LIRnM98QObd50N9otg6tamN8jSZxNQQ4Qb9CYQQ\n" + "O+7ETPTsJ3xCwnR8gooJybQDJbw=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Go Daddy Class 2 CA", "MGMxCzAJBgNVBAYTAlVTMSEwHwYDVQQKExhUaGUgR28gRGFkZHkgR3JvdXAsIEluYy4xMTAvBgNV" + "BAsTKEdvIERhZGR5IENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHk=", "-----BEGIN CERTIFICATE-----\n" + "MIIEADCCAuigAwIBAgIBADANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEh\n" + "MB8GA1UEChMYVGhlIEdvIERhZGR5IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBE\n" + "YWRkeSBDbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA0MDYyOTE3\n" + "MDYyMFoXDTM0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRo\n" + "ZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg\n" + "MiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN\n" + "ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XCA\n" + "PVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux6w\n" + "wdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLOtXi\n" + "EqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWoriMY\n" + "avx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZEewo+\n" + "YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjgcAwgb0wHQYDVR0OBBYEFNLE\n" + "sNKR1EwRcbNhyz2h/t2oatTjMIGNBgNVHSMEgYUwgYKAFNLEsNKR1EwRcbNhyz2h\n" + "/t2oatTjoWekZTBjMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYVGhlIEdvIERhZGR5\n" + "IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBEYWRkeSBDbGFzcyAyIENlcnRpZmlj\n" + "YXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD\n" + "ggEBADJL87LKPpH8EsahB4yOd6AzBhRckB4Y9wimPQoZ+YeAEW5p5JYXMP80kWNy\n" + "OO7MHAGjHZQopDH2esRU1/blMVgDoszOYtuURXO1v0XJJLXVggKtI3lpjbi2Tc7P\n" + "TMozI+gciKqdi0FuFskg5YmezTvacPd+mSYgFFQlq25zheabIZ0KbIIOqPjCDPoQ\n" + "HmyW74cNxA9hi63ugyuV+I6ShHI56yDqg+2DzZduCLzrTia2cyvk0/ZM/iZx4mER\n" + "dEr/VxqHD3VILs9RaRegAhJhldXRQLIQTO7ErBBDpqWeCtWVYpoNz4iCxTIM5Cuf\n" + "ReYNnyicsbkqWletNw+vHX/bvZ8=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Starfield Class 2 CA", "MGgxCzAJBgNVBAYTAlVTMSUwIwYDVQQKExxTdGFyZmllbGQgVGVjaG5vbG9naWVzLCBJbmMuMTIw" + "MAYDVQQLEylTdGFyZmllbGQgQ2xhc3MgMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIEDzCCAvegAwIBAgIBADANBgkqhkiG9w0BAQUFADBoMQswCQYDVQQGEwJVUzEl\n" + "MCMGA1UEChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMp\n" + "U3RhcmZpZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQw\n" + "NjI5MTczOTE2WhcNMzQwNjI5MTczOTE2WjBoMQswCQYDVQQGEwJVUzElMCMGA1UE\n" + "ChMcU3RhcmZpZWxkIFRlY2hub2xvZ2llcywgSW5jLjEyMDAGA1UECxMpU3RhcmZp\n" + "ZWxkIENsYXNzIDIgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggEgMA0GCSqGSIb3\n" + "DQEBAQUAA4IBDQAwggEIAoIBAQC3Msj+6XGmBIWtDBFk385N78gDGIc/oav7PKaf\n" + "8MOh2tTYbitTkPskpD6E8J7oX+zlJ0T1KKY/e97gKvDIr1MvnsoFAZMej2YcOadN\n" + "+lq2cwQlZut3f+dZxkqZJRRU6ybH838Z1TBwj6+wRir/resp7defqgSHo9T5iaU0\n" + "X9tDkYI22WY8sbi5gv2cOj4QyDvvBmVmepsZGD3/cVE8MC5fvj13c7JdBmzDI1aa\n" + "K4UmkhynArPkPw2vCHmCuDY96pzTNbO8acr1zJ3o/WSNF4Azbl5KXZnJHoe0nRrA\n" + "1W4TNSNe35tfPe/W93bC6j67eA0cQmdrBNj41tpvi/JEoAGrAgEDo4HFMIHCMB0G\n" + "A1UdDgQWBBS/X7fRzt0fhvRbVazc1xDCDqmI5zCBkgYDVR0jBIGKMIGHgBS/X7fR\n" + "zt0fhvRbVazc1xDCDqmI56FspGowaDELMAkGA1UEBhMCVVMxJTAjBgNVBAoTHFN0\n" + "YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xMjAwBgNVBAsTKVN0YXJmaWVsZCBD\n" + "bGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8w\n" + "DQYJKoZIhvcNAQEFBQADggEBAAWdP4id0ckaVaGsafPzWdqbAYcaT1epoXkJKtv3\n" + "L7IezMdeatiDh6GX70k1PncGQVhiv45YuApnP+yz3SFmH8lU+nLMPUxA2IGvd56D\n" + "eruix/U0F47ZEUD0/CwqTRV/p2JdLiXTAAsgGh1o+Re49L2L7ShZ3U0WixeDyLJl\n" + "xy16paq8U4Zt3VekyvggQQto8PT7dL5WXXp59fkdheMtlb71cZBDzI0fmgAKhynp\n" + "VSJYACPq4xJDKVtHCN2MQWplBqjlIapBtJUhlbl90TSrE9atvNziPTnNvT51cKEY\n" + "WQPJIrSPnNVeKtelttQKbfi3QBFGmh95DmK/D5fs4C8fF5Q=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("StartCom Ltd.", "MIGwMQswCQYDVQQGEwJJTDEPMA0GA1UECBMGSXNyYWVsMQ4wDAYDVQQHEwVFaWxhdDEWMBQGA1UE" + "ChMNU3RhcnRDb20gTHRkLjEaMBgGA1UECxMRQ0EgQXV0aG9yaXR5IERlcC4xKTAnBgNVBAMTIEZy" + "ZWUgU1NMIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MSEwHwYJKoZIhvcNAQkBFhJhZG1pbkBzdGFy" + "dGNvbS5vcmc=", "-----BEGIN CERTIFICATE-----\n" + "MIIFFjCCBH+gAwIBAgIBADANBgkqhkiG9w0BAQQFADCBsDELMAkGA1UEBhMCSUwx\n" + "DzANBgNVBAgTBklzcmFlbDEOMAwGA1UEBxMFRWlsYXQxFjAUBgNVBAoTDVN0YXJ0\n" + "Q29tIEx0ZC4xGjAYBgNVBAsTEUNBIEF1dGhvcml0eSBEZXAuMSkwJwYDVQQDEyBG\n" + "cmVlIFNTTCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEhMB8GCSqGSIb3DQEJARYS\n" + "YWRtaW5Ac3RhcnRjb20ub3JnMB4XDTA1MDMxNzE3Mzc0OFoXDTM1MDMxMDE3Mzc0\n" + "OFowgbAxCzAJBgNVBAYTAklMMQ8wDQYDVQQIEwZJc3JhZWwxDjAMBgNVBAcTBUVp\n" + "bGF0MRYwFAYDVQQKEw1TdGFydENvbSBMdGQuMRowGAYDVQQLExFDQSBBdXRob3Jp\n" + "dHkgRGVwLjEpMCcGA1UEAxMgRnJlZSBTU0wgQ2VydGlmaWNhdGlvbiBBdXRob3Jp\n" + "dHkxITAfBgkqhkiG9w0BCQEWEmFkbWluQHN0YXJ0Y29tLm9yZzCBnzANBgkqhkiG\n" + "9w0BAQEFAAOBjQAwgYkCgYEA7YRgACOeyEpRKSfeOqE5tWmrCbIvNP1h3D3TsM+x\n" + "18LEwrHkllbEvqoUDufMOlDIOmKdw6OsWXuO7lUaHEe+o5c5s7XvIywI6Nivcy+5\n" + "yYPo7QAPyHWlLzRMGOh2iCNJitu27Wjaw7ViKUylS7eYtAkUEKD4/mJ2IhULpNYI\n" + "LzUCAwEAAaOCAjwwggI4MA8GA1UdEwEB/wQFMAMBAf8wCwYDVR0PBAQDAgHmMB0G\n" + "A1UdDgQWBBQcicOWzL3+MtUNjIExtpidjShkjTCB3QYDVR0jBIHVMIHSgBQcicOW\n" + "zL3+MtUNjIExtpidjShkjaGBtqSBszCBsDELMAkGA1UEBhMCSUwxDzANBgNVBAgT\n" + "BklzcmFlbDEOMAwGA1UEBxMFRWlsYXQxFjAUBgNVBAoTDVN0YXJ0Q29tIEx0ZC4x\n" + "GjAYBgNVBAsTEUNBIEF1dGhvcml0eSBEZXAuMSkwJwYDVQQDEyBGcmVlIFNTTCBD\n" + "ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEhMB8GCSqGSIb3DQEJARYSYWRtaW5Ac3Rh\n" + "cnRjb20ub3JnggEAMB0GA1UdEQQWMBSBEmFkbWluQHN0YXJ0Y29tLm9yZzAdBgNV\n" + "HRIEFjAUgRJhZG1pbkBzdGFydGNvbS5vcmcwEQYJYIZIAYb4QgEBBAQDAgAHMC8G\n" + "CWCGSAGG+EIBDQQiFiBGcmVlIFNTTCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAy\n" + "BglghkgBhvhCAQQEJRYjaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL2NhLWNybC5j\n" + "cmwwKAYJYIZIAYb4QgECBBsWGWh0dHA6Ly9jZXJ0LnN0YXJ0Y29tLm9yZy8wOQYJ\n" + "YIZIAYb4QgEIBCwWKmh0dHA6Ly9jZXJ0LnN0YXJ0Y29tLm9yZy9pbmRleC5waHA/\n" + "YXBwPTExMTANBgkqhkiG9w0BAQQFAAOBgQBscSXhnjSRIe/bbL0BCFaPiNhBOlP1\n" + "ct8nV0t2hPdopP7rPwl+KLhX6h/BquL/lp9JmeaylXOWxkjHXo0Hclb4g4+fd68p\n" + "00UOpO6wNnQt8M2YI3s3S9r+UZjEHjQ8iP2ZO1CnwYszx8JSFhKVU2Ui77qLzmLb\n" + "cCOxgN8aIDjnfg==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("StartCom Certification Authority", "MH0xCzAJBgNVBAYTAklMMRYwFAYDVQQKEw1TdGFydENvbSBMdGQuMSswKQYDVQQLEyJTZWN1cmUg" + "RGlnaXRhbCBDZXJ0aWZpY2F0ZSBTaWduaW5nMSkwJwYDVQQDEyBTdGFydENvbSBDZXJ0aWZpY2F0" + "aW9uIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIHyTCCBbGgAwIBAgIBATANBgkqhkiG9w0BAQUFADB9MQswCQYDVQQGEwJJTDEW\n" + "MBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMiU2VjdXJlIERpZ2l0YWwg\n" + "Q2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3RhcnRDb20gQ2VydGlmaWNh\n" + "dGlvbiBBdXRob3JpdHkwHhcNMDYwOTE3MTk0NjM2WhcNMzYwOTE3MTk0NjM2WjB9\n" + "MQswCQYDVQQGEwJJTDEWMBQGA1UEChMNU3RhcnRDb20gTHRkLjErMCkGA1UECxMi\n" + "U2VjdXJlIERpZ2l0YWwgQ2VydGlmaWNhdGUgU2lnbmluZzEpMCcGA1UEAxMgU3Rh\n" + "cnRDb20gQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwggIiMA0GCSqGSIb3DQEBAQUA\n" + "A4ICDwAwggIKAoICAQDBiNsJvGxGfHiflXu1M5DycmLWwTYgIiRezul38kMKogZk\n" + "pMyONvg45iPwbm2xPN1yo4UcodM9tDMr0y+v/uqwQVlntsQGfQqedIXWeUyAN3rf\n" + "OQVSWff0G0ZDpNKFhdLDcfN1YjS6LIp/Ho/u7TTQEceWzVI9ujPW3U3eCztKS5/C\n" + "Ji/6tRYccjV3yjxd5srhJosaNnZcAdt0FCX+7bWgiA/deMotHweXMAEtcnn6RtYT\n" + "Kqi5pquDSR3l8u/d5AGOGAqPY1MWhWKpDhk6zLVmpsJrdAfkK+F2PrRt2PZE4XNi\n" + "HzvEvqBTViVsUQn3qqvKv3b9bZvzndu/PWa8DFaqr5hIlTpL36dYUNk4dalb6kMM\n" + "Av+Z6+hsTXBbKWWc3apdzK8BMewM69KN6Oqce+Zu9ydmDBpI125C4z/eIT574Q1w\n" + "+2OqqGwaVLRcJXrJosmLFqa7LH4XXgVNWG4SHQHuEhANxjJ/GP/89PrNbpHoNkm+\n" + "Gkhpi8KWTRoSsmkXwQqQ1vp5Iki/untp+HDH+no32NgN0nZPV/+Qt+OR0t3vwmC3\n" + "Zzrd/qqc8NSLf3Iizsafl7b4r4qgEKjZ+xjGtrVcUjyJthkqcwEKDwOzEmDyei+B\n" + "26Nu/yYwl/WL3YlXtq09s68rxbd2AvCl1iuahhQqcvbjM4xdCUsT37uMdBNSSwID\n" + "AQABo4ICUjCCAk4wDAYDVR0TBAUwAwEB/zALBgNVHQ8EBAMCAa4wHQYDVR0OBBYE\n" + "FE4L7xqkQFulF2mHMMo0aEPQQa7yMGQGA1UdHwRdMFswLKAqoCiGJmh0dHA6Ly9j\n" + "ZXJ0LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMCugKaAnhiVodHRwOi8vY3Js\n" + "LnN0YXJ0Y29tLm9yZy9zZnNjYS1jcmwuY3JsMIIBXQYDVR0gBIIBVDCCAVAwggFM\n" + "BgsrBgEEAYG1NwEBATCCATswLwYIKwYBBQUHAgEWI2h0dHA6Ly9jZXJ0LnN0YXJ0\n" + "Y29tLm9yZy9wb2xpY3kucGRmMDUGCCsGAQUFBwIBFilodHRwOi8vY2VydC5zdGFy\n" + "dGNvbS5vcmcvaW50ZXJtZWRpYXRlLnBkZjCB0AYIKwYBBQUHAgIwgcMwJxYgU3Rh\n" + "cnQgQ29tbWVyY2lhbCAoU3RhcnRDb20pIEx0ZC4wAwIBARqBl0xpbWl0ZWQgTGlh\n" + "YmlsaXR5LCByZWFkIHRoZSBzZWN0aW9uICpMZWdhbCBMaW1pdGF0aW9ucyogb2Yg\n" + "dGhlIFN0YXJ0Q29tIENlcnRpZmljYXRpb24gQXV0aG9yaXR5IFBvbGljeSBhdmFp\n" + "bGFibGUgYXQgaHR0cDovL2NlcnQuc3RhcnRjb20ub3JnL3BvbGljeS5wZGYwEQYJ\n" + "YIZIAYb4QgEBBAQDAgAHMDgGCWCGSAGG+EIBDQQrFilTdGFydENvbSBGcmVlIFNT\n" + "TCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTANBgkqhkiG9w0BAQUFAAOCAgEAFmyZ\n" + "9GYMNPXQhV59CuzaEE44HF7fpiUFS5Eyweg78T3dRAlbB0mKKctmArexmvclmAk8\n" + "jhvh3TaHK0u7aNM5Zj2gJsfyOZEdUauCe37Vzlrk4gNXcGmXCPleWKYK34wGmkUW\n" + "FjgKXlf2Ysd6AgXmvB618p70qSmD+LIU424oh0TDkBreOKk8rENNZEXO3SipXPJz\n" + "ewT4F+irsfMuXGRuczE6Eri8sxHkfY+BUZo7jYn0TZNmezwD7dOaHZrzZVD1oNB1\n" + "ny+v8OqCQ5j4aZyJecRDjkZy42Q2Eq/3JR44iZB3fsNrarnDy0RLrHiQi+fHLB5L\n" + "EUTINFInzQpdn4XBidUaePKVEFMy3YCEZnXZtWgo+2EuvoSoOMCZEoalHmdkrQYu\n" + "L6lwhceWD3yJZfWOQ1QOq92lgDmUYMA0yZZwLKMS9R9Ie70cfmu3nZD0Ijuu+Pwq\n" + "yvqCUqDvr0tVk+vBtfAii6w0TiYiBKGHLHVKt+V9E9e4DGTANtLJL4YSjCMJwRuC\n" + "O3NJo2pXh5Tl1njFmUNj403gdy3hZZlyaQQaRwnmDwFWJPsfvw55qVguucQJAX6V\n" + "um0ABj6y6koQOdjQK/W/7HW/lwLFCRsI3FU34oH7N4RDYiDK51ZLZer+bMEkkySh\n" + "NOsF/5oirpt9P/FlUQqmMGqz9IgcgA38corog14=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Taiwan GRCA", "MD8xCzAJBgNVBAYTAlRXMTAwLgYDVQQKDCdHb3Zlcm5tZW50IFJvb3QgQ2VydGlmaWNhdGlvbiBB" + "dXRob3JpdHk=", "-----BEGIN CERTIFICATE-----\n" + "MIIFcjCCA1qgAwIBAgIQH51ZWtcvwgZEpYAIaeNe9jANBgkqhkiG9w0BAQUFADA/\n" + "MQswCQYDVQQGEwJUVzEwMC4GA1UECgwnR292ZXJubWVudCBSb290IENlcnRpZmlj\n" + "YXRpb24gQXV0aG9yaXR5MB4XDTAyMTIwNTEzMjMzM1oXDTMyMTIwNTEzMjMzM1ow\n" + "PzELMAkGA1UEBhMCVFcxMDAuBgNVBAoMJ0dvdmVybm1lbnQgUm9vdCBDZXJ0aWZp\n" + "Y2F0aW9uIEF1dGhvcml0eTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB\n" + "AJoluOzMonWoe/fOW1mKydGGEghU7Jzy50b2iPN86aXfTEc2pBsBHH8eV4qNw8XR\n" + "IePaJD9IK/ufLqGU5ywck9G/GwGHU5nOp/UKIXZ3/6m3xnOUT0b3EEk3+qhZSV1q\n" + "gQdW8or5BtD3cCJNtLdBuTK4sfCxw5w/cP1T3YGq2GN49thTbqGsaoQkclSGxtKy\n" + "yhwOeYHWtXBiCAEuTk8O1RGvqa/lmr/czIdtJuTJV6L7lvnM4T9TjGxMfptTCAts\n" + "F/tnyMKtsc2AtJfcdgEWFelq16TheEfOhtX7MfP6Mb40qij7cEwdScevLJ1tZqa2\n" + "jWR+tSBqnTuBto9AAGdLiYa4zGX+FVPpBMHWXx1E1wovJ5pGfaENda1UhhXcSTvx\n" + "ls4Pm6Dso3pdvtUqdULle96ltqqvKKyskKw4t9VoNSZ63Pc78/1Fm9G7Q3hub/FC\n" + "VGqY8A2tl+lSXunVanLeavcbYBT0peS2cWeqH+riTcFCQP5nRhc4L0c/cZyu5SHK\n" + "YS1tB6iEfC3uUSXxY5Ce/eFXiGvviiNtsea9P63RPZYLhY3Naye7twWb7LuRqQoH\n" + "EgKXTiCQ8P8NHuJBO9NAOueNXdpm5AKwB1KYXA6OM5zCppX7VRluTI6uSw+9wThN\n" + "Xo+EHWbNxWCWtFJaBYmOlXqYwZE8lSOyDvR5tMl8wUohAgMBAAGjajBoMB0GA1Ud\n" + "DgQWBBTMzO/MKWCkO7GStjz6MmKPrCUVOzAMBgNVHRMEBTADAQH/MDkGBGcqBwAE\n" + "MTAvMC0CAQAwCQYFKw4DAhoFADAHBgVnKgMAAAQUA5vwIhP/lSg209yewDL7MTqK\n" + "UWUwDQYJKoZIhvcNAQEFBQADggIBAECASvomyc5eMN1PhnR2WPWus4MzeKR6dBcZ\n" + "TulStbngCnRiqmjKeKBMmo4sIy7VahIkv9Ro04rQ2JyftB8M3jh+Vzj8jeJPXgyf\n" + "qzvS/3WXy6TjZwj/5cAWtUgBfen5Cv8b5Wppv3ghqMKnI6mGq3ZW6A4M9hPdKmaK\n" + "ZEk9GhiHkASfQlK3T8v+R0F2Ne//AHY2RTKbxkaFXeIksB7jSJaYV0eUVXoPQbFE\n" + "JPPB/hprv4j9wabak2BegUqZIJxIZhm1AHlUD7gsL0u8qV1bYH+Mh6XgUmMqvtg7\n" + "hUAV/h62ZT/FS9p+tXo1KaMuephgIqP0fSdOLeq0dDzpD6QzDxARvBMB1uUO07+1\n" + "EqLhRSPAzAhuYbeJq4PjJB7mXQfnHyA+z2fI56wwbSdLaG5LKlwCCDTb+HbkZ6Mm\n" + "nD+iMsJKxYEYMRBWqoTvLQr/uB930r+lWKBi5NdLkXWNiYCYfm3LU05er/ayl4WX\n" + "udpVBrkk7tfGOB5jGxI7leFYrPLfhNVfmS8NVVvmONsuP3LpSIXLuykTjx44Vbnz\n" + "ssQwmSNOXfJIoRIM3BKQCZBUkQM8R+XVyWXgt0t97EfTsws+rZ7QdAAO671RrcDe\n" + "LMDDav7v3Aun+kbfYNucpllQdSNpc5Oy+fwC00fmcc4QAu4njIT/rEUNE1yDMuAl\n" + "pYYsfPQS\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Firmaprofesional Root CA", "MIGdMQswCQYDVQQGEwJFUzEiMCAGA1UEBxMZQy8gTXVudGFuZXIgMjQ0IEJhcmNlbG9uYTFCMEAG" + "A1UEAxM5QXV0b3JpZGFkIGRlIENlcnRpZmljYWNpb24gRmlybWFwcm9mZXNpb25hbCBDSUYgQTYy" + "NjM0MDY4MSYwJAYJKoZIhvcNAQkBFhdjYUBmaXJtYXByb2Zlc2lvbmFsLmNvbQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIEVzCCAz+gAwIBAgIBATANBgkqhkiG9w0BAQUFADCBnTELMAkGA1UEBhMCRVMx\n" + "IjAgBgNVBAcTGUMvIE11bnRhbmVyIDI0NCBCYXJjZWxvbmExQjBABgNVBAMTOUF1\n" + "dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIEZpcm1hcHJvZmVzaW9uYWwgQ0lGIEE2\n" + "MjYzNDA2ODEmMCQGCSqGSIb3DQEJARYXY2FAZmlybWFwcm9mZXNpb25hbC5jb20w\n" + "HhcNMDExMDI0MjIwMDAwWhcNMTMxMDI0MjIwMDAwWjCBnTELMAkGA1UEBhMCRVMx\n" + "IjAgBgNVBAcTGUMvIE11bnRhbmVyIDI0NCBCYXJjZWxvbmExQjBABgNVBAMTOUF1\n" + "dG9yaWRhZCBkZSBDZXJ0aWZpY2FjaW9uIEZpcm1hcHJvZmVzaW9uYWwgQ0lGIEE2\n" + "MjYzNDA2ODEmMCQGCSqGSIb3DQEJARYXY2FAZmlybWFwcm9mZXNpb25hbC5jb20w\n" + "ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDnIwNvbyOlXnjOlSztlB5u\n" + "Cp4Bx+ow0Syd3Tfom5h5VtP8c9/Qit5Vj1H5WuretXDE7aTt/6MNbg9kUDGvASdY\n" + "rv5sp0ovFy3Tc9UTHI9ZpTQsHVQERc1ouKDAA6XPhUJHlShbz++AbOCQl4oBPB3z\n" + "hxAwJkh91/zpnZFx/0GaqUC1N5wpIE8fUuOgfRNtVLcK3ulqTgesrBlf3H5idPay\n" + "BQC6haD9HThuy1q7hryUZzM1gywfI834yJFxzJeL764P3CkDG8A563DtwW4O2GcL\n" + "iam8NeTvtjS0pbbELaW+0MOUJEjb35bTALVmGotmBQ/dPz/LP6pemkr4tErvlTcb\n" + "AgMBAAGjgZ8wgZwwKgYDVR0RBCMwIYYfaHR0cDovL3d3dy5maXJtYXByb2Zlc2lv\n" + "bmFsLmNvbTASBgNVHRMBAf8ECDAGAQH/AgEBMCsGA1UdEAQkMCKADzIwMDExMDI0\n" + "MjIwMDAwWoEPMjAxMzEwMjQyMjAwMDBaMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E\n" + "FgQUMwugZtHq2s7eYpMEKFK1FH84aLcwDQYJKoZIhvcNAQEFBQADggEBAEdz/o0n\n" + "VPD11HecJ3lXV7cVVuzH2Fi3AQL0M+2TUIiefEaxvT8Ub/GzR0iLjJcG1+p+o1wq\n" + "u00vR+L4OQbJnC4xGgN49Lw4xiKLMzHwFgQEffl25EvXwOaD7FnMP97/T2u3Z36m\n" + "hoEyIwOdyPdfwUpgpZKpsaSgYMN4h7Mi8yrrW6ntBas3D7Hi05V2Y1Z0jFhyGzfl\n" + "ZKG+TQyTmAyX9odtsz/ny4Cm7YjHX1BiAuiZdBbQ5rQ58SfLyEDW44YQqSMSkuBp\n" + "QWOnryULwMWSyx6Yo1q6xTMPoJcB3X/ge9YGVM+h4k0460tQtcsm9MracEpqoeJ5\n" + "quGnM/b9Sh/22WA=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Wells Fargo Root CA", "MIGCMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLV2VsbHMgRmFyZ28xLDAqBgNVBAsTI1dlbGxzIEZh" + "cmdvIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MS8wLQYDVQQDEyZXZWxscyBGYXJnbyBSb290IENl" + "cnRpZmljYXRlIEF1dGhvcml0eQ==", "-----BEGIN CERTIFICATE-----\n" + "MIID5TCCAs2gAwIBAgIEOeSXnjANBgkqhkiG9w0BAQUFADCBgjELMAkGA1UEBhMC\n" + "VVMxFDASBgNVBAoTC1dlbGxzIEZhcmdvMSwwKgYDVQQLEyNXZWxscyBGYXJnbyBD\n" + "ZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEvMC0GA1UEAxMmV2VsbHMgRmFyZ28gUm9v\n" + "dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDAxMDExMTY0MTI4WhcNMjEwMTE0\n" + "MTY0MTI4WjCBgjELMAkGA1UEBhMCVVMxFDASBgNVBAoTC1dlbGxzIEZhcmdvMSww\n" + "KgYDVQQLEyNXZWxscyBGYXJnbyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTEvMC0G\n" + "A1UEAxMmV2VsbHMgRmFyZ28gUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkwggEi\n" + "MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDVqDM7Jvk0/82bfuUER84A4n13\n" + "5zHCLielTWi5MbqNQ1mXx3Oqfz1cQJ4F5aHiidlMuD+b+Qy0yGIZLEWukR5zcUHE\n" + "SxP9cMIlrCL1dQu3U+SlK93OvRw6esP3E48mVJwWa2uv+9iWsWCaSOAlIiR5NM4O\n" + "JgALTqv9i86C1y8IcGjBqAr5dE8Hq6T54oN+J3N0Prj5OEL8pahbSCOz6+MlsoCu\n" + "ltQKnMJ4msZoGK43YjdeUXWoWGPAUe5AeH6orxqg4bB4nVCMe+ez/I4jsNtlAHCE\n" + "AQgAFG5Uhpq6zPk3EPbg3oQtnaSFN9OH4xXQwReQfhkhahKpdv0SAulPIV4XAgMB\n" + "AAGjYTBfMA8GA1UdEwEB/wQFMAMBAf8wTAYDVR0gBEUwQzBBBgtghkgBhvt7hwcB\n" + "CzAyMDAGCCsGAQUFBwIBFiRodHRwOi8vd3d3LndlbGxzZmFyZ28uY29tL2NlcnRw\n" + "b2xpY3kwDQYJKoZIhvcNAQEFBQADggEBANIn3ZwKdyu7IvICtUpKkfnRLb7kuxpo\n" + "7w6kAOnu5+/u9vnldKTC2FJYxHT7zmu1Oyl5GFrvm+0fazbuSCUlFLZWohDo7qd/\n" + "0D+j0MNdJu4HzMPBJCGHHt8qElNvQRbn7a6U+oxy+hNH8Dx+rn0ROhPs7fpvcmR7\n" + "nX1/Jv16+yWt6j4pf0zjAFcysLPp7VMX2YuyFA4w6OXVE8Zkr8QA1dhYJPz1j+zx\n" + "x32l2w8n0cbyQIjmH/ZhqPRCyLk306m+LFZ4wnKbWV01QIroTmMatukgalHizqSQ\n" + "33ZwmVxwQ023tqcZZE6St8WRPH9IFmV7Fv3L/PvZ1dZPIWU7Sn9Ho/s=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Swisscom Root CA 1", "MGQxCzAJBgNVBAYTAmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0" + "aWZpY2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAx", "-----BEGIN CERTIFICATE-----\n" + "MIIF2TCCA8GgAwIBAgIQXAuFXAvnWUHfV8w/f52oNjANBgkqhkiG9w0BAQUFADBk\n" + "MQswCQYDVQQGEwJjaDERMA8GA1UEChMIU3dpc3Njb20xJTAjBgNVBAsTHERpZ2l0\n" + "YWwgQ2VydGlmaWNhdGUgU2VydmljZXMxGzAZBgNVBAMTElN3aXNzY29tIFJvb3Qg\n" + "Q0EgMTAeFw0wNTA4MTgxMjA2MjBaFw0yNTA4MTgyMjA2MjBaMGQxCzAJBgNVBAYT\n" + "AmNoMREwDwYDVQQKEwhTd2lzc2NvbTElMCMGA1UECxMcRGlnaXRhbCBDZXJ0aWZp\n" + "Y2F0ZSBTZXJ2aWNlczEbMBkGA1UEAxMSU3dpc3Njb20gUm9vdCBDQSAxMIICIjAN\n" + "BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0LmwqAzZuz8h+BvVM5OAFmUgdbI9\n" + "m2BtRsiMMW8Xw/qabFbtPMWRV8PNq5ZJkCoZSx6jbVfd8StiKHVFXqrWW/oLJdih\n" + "FvkcxC7mlSpnzNApbjyFNDhhSbEAn9Y6cV9Nbc5fuankiX9qUvrKm/LcqfmdmUc/\n" + "TilftKaNXXsLmREDA/7n29uj/x2lzZAeAR81sH8A25Bvxn570e56eqeqDFdvpG3F\n" + "EzuwpdntMhy0XmeLVNxzh+XTF3xmUHJd1BpYwdnP2IkCb6dJtDZd0KTeByy2dbco\n" + "kdaXvij1mB7qWybJvbCXc9qukSbraMH5ORXWZ0sKbU/Lz7DkQnGMU3nn7uHbHaBu\n" + "HYwadzVcFh4rUx80i9Fs/PJnB3r1re3WmquhsUvhzDdf/X/NTa64H5xD+SpYVUNF\n" + "vJbNcA78yeNmuk6NO4HLFWR7uZToXTNShXEuT46iBhFRyePLoW4xCGQMwtI89Tbo\n" + "19AOeCMgkckkKmUpWyL3Ic6DXqTz3kvTaI9GdVyDCW4pa8RwjPWd1yAv/0bSKzjC\n" + "L3UcPX7ape8eYIVpQtPM+GP+HkM5haa2Y0EQs3MevNP6yn0WR+Kn1dCjigoIlmJW\n" + "bjTb2QK5MHXjBNLnj8KwEUAKrNVxAmKLMb7dxiNYMUJDLXT5xp6mig/p/r+D5kNX\n" + "JLrvRjSq1xIBOO0CAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCAYYwHQYDVR0hBBYw\n" + "FDASBgdghXQBUwABBgdghXQBUwABMBIGA1UdEwEB/wQIMAYBAf8CAQcwHwYDVR0j\n" + "BBgwFoAUAyUv3m+CATpcLNwroWm1Z9SM0/0wHQYDVR0OBBYEFAMlL95vggE6XCzc\n" + "K6FptWfUjNP9MA0GCSqGSIb3DQEBBQUAA4ICAQA1EMvspgQNDQ/NwNurqPKIlwzf\n" + "ky9NfEBWMXrrpA9gzXrzvsMnjgM+pN0S734edAY8PzHyHHuRMSG08NBsl9Tpl7Ik\n" + "Vh5WwzW9iAUPWxAaZOHHgjD5Mq2eUCzneAXQMbFamIp1TpBcahQq4FJHgmDmHtqB\n" + "sfsUC1rxn9KVuj7QG9YVHaO+htXbD8BJZLsuUBlL0iT43R4HVtA4oJVwIHaM190e\n" + "3p9xxCPvgxNcoyQVTSlAPGrEqdi3pkSlDfTgnXceQHAm/NrZNuR55LU/vJtlvrsR\n" + "ls/bxig5OgjOR1tTWsWZ/l2p3e9M1MalrQLmjAcSHm8D0W+go/MpvRLHUKKwf4ip\n" + "mXeascClOS5cfGniLLDqN2qk4Vrh9VDlg++luyqI54zb/W1elxmofmZ1a3Hqv7HH\n" + "b6D0jqTsNFFbjCYDcKF31QESVwA12yPeDooomf2xEG9L/zgtYE4snOtnta1J7ksf\n" + "rK/7DZBaZmBwXarNeNQk7shBoJMBkpxqnvy5JMWzFYJ+vq6VK+uxwNrjAWALXmms\n" + "hFZhvnEX/h0TD/7Gh0Xp/jKgGg0TpJRVcaUWi7rKibCyx/yP2FS1k2Kdzs9Z+z0Y\n" + "zirLNRWCXf9UIltxUvu3yf5gmwBBZPCqKuy2QkPOiWaByIufOVQDJdMWNY6E0F/6\n" + "MBr1mmz0DlP5OlvRHA==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("DigiCert Assured ID Root CA", "MGUxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp" + "Y2VydC5jb20xJDAiBgNVBAMTG0RpZ2lDZXJ0IEFzc3VyZWQgSUQgUm9vdCBDQQ==", "-----BEGIN CERTIFICATE-----\n" + "MIIDtzCCAp+gAwIBAgIQDOfg5RfYRv6P5WD8G/AwOTANBgkqhkiG9w0BAQUFADBl\n" + "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\n" + "d3cuZGlnaWNlcnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJv\n" + "b3QgQ0EwHhcNMDYxMTEwMDAwMDAwWhcNMzExMTEwMDAwMDAwWjBlMQswCQYDVQQG\n" + "EwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3d3cuZGlnaWNl\n" + "cnQuY29tMSQwIgYDVQQDExtEaWdpQ2VydCBBc3N1cmVkIElEIFJvb3QgQ0EwggEi\n" + "MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtDhXO5EOAXLGH87dg+XESpa7c\n" + "JpSIqvTO9SA5KFhgDPiA2qkVlTJhPLWxKISKityfCgyDF3qPkKyK53lTXDGEKvYP\n" + "mDI2dsze3Tyoou9q+yHyUmHfnyDXH+Kx2f4YZNISW1/5WBg1vEfNoTb5a3/UsDg+\n" + "wRvDjDPZ2C8Y/igPs6eD1sNuRMBhNZYW/lmci3Zt1/GiSw0r/wty2p5g0I6QNcZ4\n" + "VYcgoc/lbQrISXwxmDNsIumH0DJaoroTghHtORedmTpyoeb6pNnVFzF1roV9Iq4/\n" + "AUaG9ih5yLHa5FcXxH4cDrC0kqZWs72yl+2qp/C3xag/lRbQ/6GW6whfGHdPAgMB\n" + "AAGjYzBhMA4GA1UdDwEB/wQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW\n" + "BBRF66Kv9JLLgjEtUYunpyGd823IDzAfBgNVHSMEGDAWgBRF66Kv9JLLgjEtUYun\n" + "pyGd823IDzANBgkqhkiG9w0BAQUFAAOCAQEAog683+Lt8ONyc3pklL/3cmbYMuRC\n" + "dWKuh+vy1dneVrOfzM4UKLkNl2BcEkxY5NM9g0lFWJc1aRqoR+pWxnmrEthngYTf\n" + "fwk8lOa4JiwgvT2zKIn3X/8i4peEH+ll74fg38FnSbNd67IJKusm7Xi+fT8r87cm\n" + "NW1fiQG2SVufAQWbqz0lwcy2f8Lxb4bG+mRo64EtlOtCt/qMHt1i8b5QZ7dsvfPx\n" + "H2sMNgcWfzd8qVttevESRmCD1ycEvkvOl77DZypoEd+A5wwzZr8TDRRu838fYxAe\n" + "+o0bJW1sj6W3YQGx0qMmoRBxna3iw/nDmVG3KwcIzi7mULKn+gpFL6Lw8g==\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("DigiCert Global Root CA", "MGExCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp" + "Y2VydC5jb20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENB", "-----BEGIN CERTIFICATE-----\n" + "MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh\n" + "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\n" + "d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD\n" + "QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT\n" + "MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j\n" + "b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG\n" + "9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB\n" + "CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97\n" + "nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt\n" + "43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P\n" + "T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4\n" + "gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO\n" + "BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR\n" + "TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw\n" + "DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr\n" + "hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg\n" + "06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF\n" + "PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls\n" + "YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk\n" + "CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("DigiCert High Assurance EV Root CA", "MGwxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp" + "Y2VydC5jb20xKzApBgNVBAMTIkRpZ2lDZXJ0IEhpZ2ggQXNzdXJhbmNlIEVWIFJvb3QgQ0E=", "-----BEGIN CERTIFICATE-----\n" + "MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs\n" + "MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3\n" + "d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j\n" + "ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL\n" + "MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3\n" + "LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug\n" + "RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm\n" + "+9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW\n" + "PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM\n" + "xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB\n" + "Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3\n" + "hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg\n" + "EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF\n" + "MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA\n" + "FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec\n" + "nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z\n" + "eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF\n" + "hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2\n" + "Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe\n" + "vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep\n" + "+OkuE6N36B9K\n" + "-----END CERTIFICATE-----");
            super.addPEMCertificate("Certplus Class 2 Primary CA", "MD0xCzAJBgNVBAYTAkZSMREwDwYDVQQKEwhDZXJ0cGx1czEbMBkGA1UEAxMSQ2xhc3MgMiBQcmlt" + "YXJ5IENB", "-----BEGIN CERTIFICATE-----\n" + "MIIDkjCCAnqgAwIBAgIRAIW9S/PY2uNp9pTXX8OlRCMwDQYJKoZIhvcNAQEFBQAw\n" + "PTELMAkGA1UEBhMCRlIxETAPBgNVBAoTCENlcnRwbHVzMRswGQYDVQQDExJDbGFz\n" + "cyAyIFByaW1hcnkgQ0EwHhcNOTkwNzA3MTcwNTAwWhcNMTkwNzA2MjM1OTU5WjA9\n" + "MQswCQYDVQQGEwJGUjERMA8GA1UEChMIQ2VydHBsdXMxGzAZBgNVBAMTEkNsYXNz\n" + "IDIgUHJpbWFyeSBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANxQ\n" + "ltAS+DXSCHh6tlJw/W/uz7kRy1134ezpfgSN1sxvc0NXYKwzCkTsA18cgCSR5aiR\n" + "VhKC9+Ar9NuuYS6JEI1rbLqzAr3VNsVINyPi8Fo3UjMXEuLRYE2+L0ER4/YXJQyL\n" + "kcAbmXuZVg2v7tK8R1fjeUl7NIknJITesezpWE7+Tt9avkGtrAjFGA7v0lPubNCd\n" + "EgETjdyAYveVqUSISnFOYFWe2yMZeVYHDD9jC1yw4r5+FfyUM1hBOHTE4Y+L3yas\n" + "H7WLO7dDWWuwJKZtkIvEcupdM5i3y95ee++U8Rs+yskhwcWYAqqi9lt3m/V+llU0\n" + "HGdpwPFC40es/CgcZlUCAwEAAaOBjDCBiTAPBgNVHRMECDAGAQH/AgEKMAsGA1Ud\n" + "DwQEAwIBBjAdBgNVHQ4EFgQU43Mt38sOKAze3bOkynm4jrvoMIkwEQYJYIZIAYb4\n" + "QgEBBAQDAgEGMDcGA1UdHwQwMC4wLKAqoCiGJmh0dHA6Ly93d3cuY2VydHBsdXMu\n" + "Y29tL0NSTC9jbGFzczIuY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCnVM+IRBnL39R/\n" + "AN9WM2K191EBkOvDP9GIROkkXe/nFL0gt5o8AP5tn9uQ3Nf0YtaLcF3n5QRIqWh8\n" + "yfFC82x/xXp8HVGIutIKPidd3i1RTtMTZGnkLuPT55sJmabglZvOGtd/vjzOUrMR\n" + "FcEPF80Du5wlFbqidon8BvEY0JNLDnyCt6X09l/+7UCmnYR0ObncHoUW2ikbhiMA\n" + "ybuJfm6AiB4vFLQDJKgybwOaRywwvlbGp0ICcBvqQNi6BQNwB6SW//1IMwrh3KWB\n" + "kJtN3X3n57LNXMhqlfil9o3EXXgIvnsG1knPGTZQIy4I5p4FTUcY1Rbpsda2ENW7\n" + "l7+ijrRU\n" + "-----END CERTIFICATE-----");
            return;
        }

        public override function addPEMCertificate(arg1:String, arg2:String, arg3:String):void
        {
            throw new Error("Cannot add certificates to the Root CA store.");
        }

        public override function addCertificate(arg1:com.hurlant.crypto.cert.X509Certificate):void
        {
            throw new Error("Cannot add certificates to the Root CA store.");
        }
    }
}


//          class X509Certificate
package com.hurlant.crypto.cert 
{
    import com.hurlant.crypto.hash.*;
    import com.hurlant.crypto.rsa.*;
    import com.hurlant.util.*;
    import com.hurlant.util.der.*;
    import flash.utils.*;
    
    public class X509Certificate extends Object
    {
        public function X509Certificate(arg1:*)
        {
            super();
            _loaded = false;
            _param = arg1;
            _ignoreExpiredCertificate = false;
            _ignoreSelfSignedCertificate = false;
            return;
        }

        public function getPublicKey():com.hurlant.crypto.rsa.RSAKey
        {
            load();
            var loc1:*=_obj.signedCertificate.subjectPublicKeyInfo.subjectPublicKey as flash.utils.ByteArray;
            loc1.position = 0;
            var loc2:*=com.hurlant.util.der.DER.parse(loc1, [{"name":"N"}, {"name":"E"}]);
            return new com.hurlant.crypto.rsa.RSAKey(loc2.N, loc2.E.valueOf());
        }

        public function getAlgorithmIdentifier():String
        {
            return _obj.algorithmIdentifier.algorithmId.toString();
        }

        public function getCommonName():String
        {
            var loc1:*=_obj.signedCertificate.subject;
            return (loc1.findAttributeValue(com.hurlant.util.der.OID.COMMON_NAME) as com.hurlant.util.der.PrintableString).getString();
        }

        public function set ignoreExpiredCertificate(arg1:Boolean):void
        {
            _ignoreExpiredCertificate = arg1;
            return;
        }

        public function isSelfSigned(arg1:Date):Boolean
        {
            load();
            var loc1:*=getPublicKey();
            return verifyCertificate(loc1);
        }

        public function getIssuerPrincipal():String
        {
            load();
            return com.hurlant.util.Base64.encodeByteArray(_obj.signedCertificate.issuer_bin);
        }

        public function getSubjectPrincipal():String
        {
            load();
            return com.hurlant.util.Base64.encodeByteArray(_obj.signedCertificate.subject_bin);
        }

        internal function signCertificate(arg1:com.hurlant.crypto.rsa.RSAKey, arg2:String):flash.utils.ByteArray
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc6:*=arg2;
            switch (loc6) 
            {
                case com.hurlant.util.der.OID.SHA1_WITH_RSA_ENCRYPTION:
                {
                    loc1 = new com.hurlant.crypto.hash.SHA1();
                    loc2 = com.hurlant.util.der.OID.SHA1_ALGORITHM;
                    break;
                }
                case com.hurlant.util.der.OID.MD2_WITH_RSA_ENCRYPTION:
                {
                    loc1 = new com.hurlant.crypto.hash.MD2();
                    loc2 = com.hurlant.util.der.OID.MD2_ALGORITHM;
                    break;
                }
                case com.hurlant.util.der.OID.MD5_WITH_RSA_ENCRYPTION:
                {
                    loc1 = new com.hurlant.crypto.hash.MD5();
                    loc2 = com.hurlant.util.der.OID.MD5_ALGORITHM;
                    break;
                }
                default:
                {
                    return null;
                }
            }
            var loc3:*=_obj.signedCertificate_bin;
            loc3 = loc1.hash(loc3);
            var loc4:*;
            (loc4 = new com.hurlant.util.der.Sequence())[0] = new com.hurlant.util.der.Sequence();
            loc4[0][0] = new com.hurlant.util.der.ObjectIdentifier(0, 0, loc2);
            loc4[0][1] = null;
            loc4[1] = new com.hurlant.util.der.ByteString();
            loc4[1].writeBytes(loc3);
            loc3 = loc4.toDER();
            var loc5:*=new flash.utils.ByteArray();
            arg1.sign(loc3, loc5, loc3.length);
            return loc5;
        }

        internal function verifyCertificate(arg1:com.hurlant.crypto.rsa.RSAKey):Boolean
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=getAlgorithmIdentifier();
            var loc7:*=loc1;
            switch (loc7) 
            {
                case com.hurlant.util.der.OID.SHA1_WITH_RSA_ENCRYPTION:
                {
                    loc2 = new com.hurlant.crypto.hash.SHA1();
                    loc3 = com.hurlant.util.der.OID.SHA1_ALGORITHM;
                    break;
                }
                case com.hurlant.util.der.OID.MD2_WITH_RSA_ENCRYPTION:
                {
                    loc2 = new com.hurlant.crypto.hash.MD2();
                    loc3 = com.hurlant.util.der.OID.MD2_ALGORITHM;
                    break;
                }
                case com.hurlant.util.der.OID.MD5_WITH_RSA_ENCRYPTION:
                {
                    loc2 = new com.hurlant.crypto.hash.MD5();
                    loc3 = com.hurlant.util.der.OID.MD5_ALGORITHM;
                    break;
                }
                default:
                {
                    return false;
                }
            }
            var loc4:*=_obj.signedCertificate_bin;
            var loc5:*=new flash.utils.ByteArray();
            arg1.verify(_obj.encrypted, loc5, _obj.encrypted.length);
            loc5.position = 0;
            loc4 = loc2.hash(loc4);
            var loc6:*;
            if ((loc6 = com.hurlant.util.der.DER.parse(loc5, com.hurlant.util.der.Type.RSA_SIGNATURE)).algorithm.algorithmId.toString() != loc3) 
            {
                return false;
            }
            if (!com.hurlant.util.ArrayUtil.equals(loc6.hash, loc4)) 
            {
                return false;
            }
            return true;
        }

        internal function load():void
        {
            var loc2:*=null;
            if (_loaded) 
            {
                return;
            }
            var loc1:*=_param;
            if (loc1 is String) 
            {
                loc2 = com.hurlant.util.der.PEM.readCertIntoArray(loc1 as String);
            }
            else if (loc1 is flash.utils.ByteArray) 
            {
                loc2 = loc1;
            }
            if (loc2 == null) 
            {
                throw new Error("Invalid x509 Certificate parameter: " + loc1);
            }
            else 
            {
                _obj = com.hurlant.util.der.DER.parse(loc2, com.hurlant.util.der.Type.TLS_CERT);
                _loaded = true;
            }
            return;
        }

        public function isSigned(arg1:com.hurlant.crypto.cert.X509CertificateCollection, arg2:com.hurlant.crypto.cert.X509CertificateCollection, arg3:Date=null):Boolean
        {
            load();
            if (arg3 == null) 
            {
                arg3 = new Date();
            }
            var loc1:*=getNotBefore();
            var loc2:*=getNotAfter();
            if (arg3.getTime() < loc1.getTime()) 
            {
                return false;
            }
            if (arg3.getTime() > loc2.getTime()) 
            {
                if (!_ignoreExpiredCertificate) 
                {
                    return false;
                }
            }
            var loc3:*=getIssuerPrincipal();
            var loc4:*=arg2.getCertificate(loc3);
            var loc5:*=false;
            if (loc4 != null) 
            {
                loc5 = true;
            }
            else if ((loc4 = arg1.getCertificate(loc3)) == null) 
            {
                return true;
            }
            if (loc4 == this) 
            {
                if (_ignoreSelfSignedCertificate) 
                {
                    return true;
                }
                return false;
            }
            if (!(loc5 && loc4.isSelfSigned(arg3)) && !loc4.isSigned(arg1, arg2, arg3)) 
            {
                return false;
            }
            var loc6:*=loc4.getPublicKey();
            return verifyCertificate(loc6);
        }

        public function set ignoreSelfSignedCertificate(arg1:Boolean):void
        {
            _ignoreSelfSignedCertificate = arg1;
            return;
        }

        public function getNotBefore():Date
        {
            return _obj.signedCertificate.validity.notBefore.date;
        }

        public function getNotAfter():Date
        {
            return _obj.signedCertificate.validity.notAfter.date;
        }

        internal var _ignoreExpiredCertificate:Boolean;

        internal var _param:*;

        internal var _loaded:Boolean;

        internal var _obj:Object;

        internal var _ignoreSelfSignedCertificate:Boolean;
    }
}


//          class X509CertificateCollection
package com.hurlant.crypto.cert 
{
    public class X509CertificateCollection extends Object
    {
        public function X509CertificateCollection()
        {
            super();
            _map = {};
            return;
        }

        public function addPEMCertificate(arg1:String, arg2:String, arg3:String):void
        {
            _map[arg2] = new com.hurlant.crypto.cert.X509Certificate(arg3);
            return;
        }

        public function getCertificate(arg1:String):com.hurlant.crypto.cert.X509Certificate
        {
            return _map[arg1];
        }

        public function addCertificate(arg1:com.hurlant.crypto.cert.X509Certificate):void
        {
            var loc1:*=arg1.getSubjectPrincipal();
            _map[loc1] = arg1;
            return;
        }

        internal var _map:Object;
    }
}


//        package hash
//          class HMAC
package com.hurlant.crypto.hash 
{
    import flash.utils.*;
    
    public class HMAC extends Object
    {
        public function HMAC(arg1:com.hurlant.crypto.hash.IHash, arg2:uint=0)
        {
            super();
            this.hash = arg1;
            this.bits = arg2;
            return;
        }

        public function toString():String
        {
            return "hmac-" + (bits > 0 ? bits + "-" : "") + hash.toString();
        }

        public function getHashSize():uint
        {
            if (bits != 0) 
            {
                return bits / 8;
            }
            return hash.getHashSize();
        }

        public function compute(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=null;
            if (arg1.length > hash.getInputSize()) 
            {
                loc1 = hash.hash(arg1);
            }
            else 
            {
                loc1 = new flash.utils.ByteArray();
                loc1.writeBytes(arg1);
            }
            while (loc1.length < hash.getInputSize()) 
            {
                loc1[loc1.length] = 0;
            }
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=new flash.utils.ByteArray();
            var loc4:*=0;
            while (loc4 < loc1.length) 
            {
                loc2[loc4] = loc1[loc4] ^ 54;
                loc3[loc4] = loc1[loc4] ^ 92;
                ++loc4;
            }
            loc2.position = loc1.length;
            loc2.writeBytes(arg2);
            var loc5:*=hash.hash(loc2);
            loc3.position = loc1.length;
            loc3.writeBytes(loc5);
            var loc6:*=hash.hash(loc3);
            if (bits > 0 && bits < 8 * loc6.length) 
            {
                loc6.length = bits / 8;
            }
            return loc6;
        }

        public function dispose():void
        {
            hash = null;
            bits = 0;
            return;
        }

        internal var bits:uint;

        internal var hash:com.hurlant.crypto.hash.IHash;
    }
}


//          class IHash
package com.hurlant.crypto.hash 
{
    import flash.utils.*;
    
    public interface IHash
    {
        function toString():String;

        function getHashSize():uint;

        function getInputSize():uint;

        function hash(arg1:flash.utils.ByteArray):flash.utils.ByteArray;
    }
}


//          class MD2
package com.hurlant.crypto.hash 
{
    import flash.utils.*;
    
    public class MD2 extends Object implements com.hurlant.crypto.hash.IHash
    {
        public function MD2()
        {
            super();
            return;
        }

        public function toString():String
        {
            return "md2";
        }

        public function getInputSize():uint
        {
            return 16;
        }

        public function getHashSize():uint
        {
            return HASH_SIZE;
        }

        public function hash(arg1:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc7:*=0;
            var loc8:*=0;
            var loc9:*=0;
            var loc1:*=arg1.length;
            var loc2:*=16 - arg1.length % 16 || 16;
            do 
            {
                arg1[arg1.length] = loc2;
            }
            while (arg1.length % 16 != 0);
            var loc3:*=arg1.length;
            var loc4:*=new flash.utils.ByteArray();
            var loc5:*=0;
            loc2 = 0;
            while (loc2 < loc3) 
            {
                loc7 = 0;
                while (loc7 < 16) 
                {
                    var loc10:*;
                    loc4[loc7] = loc10 = loc4[loc7] ^ S[arg1[loc2 + loc7] ^ loc5];
                    loc5 = loc10;
                    ++loc7;
                }
                loc2 = loc2 + 16;
            }
            arg1.position = arg1.length;
            arg1.writeBytes(loc4);
            loc3 = loc3 + 16;
            var loc6:*=new flash.utils.ByteArray();
            loc2 = 0;
            while (loc2 < loc3) 
            {
                loc7 = 0;
                while (loc7 < 16) 
                {
                    loc6[16 + loc7] = loc10 = arg1[loc2 + loc7];
                    loc6[32 + loc7] = loc10 ^ loc6[loc7];
                    ++loc7;
                }
                loc8 = 0;
                loc7 = 0;
                while (loc7 < 18) 
                {
                    loc9 = 0;
                    while (loc9 < 48) 
                    {
                        loc8 = loc10 = loc6[loc9] ^ S[loc8];
                        loc6[loc9] = loc10;
                        ++loc9;
                    }
                    loc8 = loc8 + loc7 & 255;
                    ++loc7;
                }
                loc2 = loc2 + 16;
            }
            loc6.length = 16;
            arg1.length = loc1;
            return loc6;
        }

        public static const HASH_SIZE:int=16;

        internal static const S:Array=[41, 46, 67, 201, 162, 216, 124, 1, 61, 54, 84, 161, 236, 240, 6, 19, 98, 167, 5, 243, 192, 199, 115, 140, 152, 147, 43, 217, 188, 76, 130, 202, 30, 155, 87, 60, 253, 212, 224, 22, 103, 66, 111, 24, 138, 23, 229, 18, 190, 78, 196, 214, 218, 158, 222, 73, 160, 251, 245, 142, 187, 47, 238, 122, 169, 104, 121, 145, 21, 178, 7, 63, 148, 194, 16, 137, 11, 34, 95, 33, 128, 127, 93, 154, 90, 144, 50, 39, 53, 62, 204, 231, 191, 247, 151, 3, 255, 25, 48, 179, 72, 165, 181, 209, 215, 94, 146, 42, 172, 86, 170, 198, 79, 184, 56, 210, 150, 164, 125, 182, 118, 252, 107, 226, 156, 116, 4, 241, 69, 157, 112, 89, 100, 113, 135, 32, 134, 91, 207, 101, 230, 45, 168, 2, 27, 96, 37, 173, 174, 176, 185, 246, 28, 70, 97, 105, 52, 64, 126, 15, 85, 71, 163, 35, 221, 81, 175, 58, 195, 92, 249, 206, 186, 197, 234, 38, 44, 83, 13, 110, 133, 40, 132, 9, 211, 223, 205, 244, 65, 129, 77, 82, 106, 220, 55, 200, 108, 193, 171, 250, 36, 225, 123, 8, 12, 189, 177, 74, 120, 136, 149, 139, 227, 99, 232, 109, 233, 203, 213, 254, 59, 0, 29, 57, 242, 239, 183, 14, 102, 88, 208, 228, 166, 119, 114, 248, 235, 117, 75, 10, 49, 68, 80, 180, 143, 237, 31, 26, 219, 153, 141, 51, 159, 17, 131, 20];
    }
}


//          class MD5
package com.hurlant.crypto.hash 
{
    import flash.utils.*;
    
    public class MD5 extends Object implements com.hurlant.crypto.hash.IHash
    {
        public function MD5()
        {
            super();
            return;
        }

        internal function ff(arg1:uint, arg2:uint, arg3:uint, arg4:uint, arg5:uint, arg6:uint, arg7:uint):uint
        {
            return cmn(arg2 & arg3 | ~arg2 & arg4, arg1, arg2, arg5, arg6, arg7);
        }

        internal function cmn(arg1:uint, arg2:uint, arg3:uint, arg4:uint, arg5:uint, arg6:uint):uint
        {
            return rol(arg2 + arg1 + arg4 + arg6, arg5) + arg3;
        }

        internal function hh(arg1:uint, arg2:uint, arg3:uint, arg4:uint, arg5:uint, arg6:uint, arg7:uint):uint
        {
            return cmn(arg2 ^ arg3 ^ arg4, arg1, arg2, arg5, arg6, arg7);
        }

        public function getHashSize():uint
        {
            return HASH_SIZE;
        }

        public function hash(arg1:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=arg1.length * 8;
            var loc2:*=arg1.endian;
            while (arg1.length % 4 != 0) 
            {
                arg1[arg1.length] = 0;
            }
            arg1.position = 0;
            var loc3:*=[];
            arg1.endian = flash.utils.Endian.LITTLE_ENDIAN;
            var loc4:*=0;
            while (loc4 < arg1.length) 
            {
                loc3.push(arg1.readUnsignedInt());
                loc4 = loc4 + 4;
            }
            var loc5:*=core_md5(loc3, loc1);
            var loc6:*;
            (loc6 = new flash.utils.ByteArray()).endian = flash.utils.Endian.LITTLE_ENDIAN;
            loc4 = 0;
            while (loc4 < 4) 
            {
                loc6.writeUnsignedInt(loc5[loc4]);
                ++loc4;
            }
            arg1.length = loc1 / 8;
            arg1.endian = loc2;
            return loc6;
        }

        internal function gg(arg1:uint, arg2:uint, arg3:uint, arg4:uint, arg5:uint, arg6:uint, arg7:uint):uint
        {
            return cmn(arg2 & arg4 | arg3 & ~arg4, arg1, arg2, arg5, arg6, arg7);
        }

        public function toString():String
        {
            return "md5";
        }

        public function getInputSize():uint
        {
            return 64;
        }

        internal function rol(arg1:uint, arg2:uint):uint
        {
            return arg1 << arg2 | arg1 >>> 32 - arg2;
        }

        internal function ii(arg1:uint, arg2:uint, arg3:uint, arg4:uint, arg5:uint, arg6:uint, arg7:uint):uint
        {
            return cmn(arg3 ^ (arg2 | ~arg4), arg1, arg2, arg5, arg6, arg7);
        }

        internal function core_md5(arg1:Array, arg2:uint):Array
        {
            var loc6:*=0;
            var loc7:*=0;
            var loc8:*=0;
            var loc9:*=0;
            arg1[arg2 >> 5] = arg1[arg2 >> 5] | 128 << arg2 % 32;
            arg1[(arg2 + 64 >>> 9 << 4) + 14] = arg2;
            var loc1:*=1732584193;
            var loc2:*=4023233417;
            var loc3:*=2562383102;
            var loc4:*=271733878;
            var loc5:*=0;
            while (loc5 < arg1.length) 
            {
                arg1[loc5] = arg1[loc5] || 0;
                arg1[loc5 + 1] = arg1[loc5 + 1] || 0;
                arg1[loc5 + 2] = arg1[loc5 + 2] || 0;
                arg1[loc5 + 3] = arg1[loc5 + 3] || 0;
                arg1[loc5 + 4] = arg1[loc5 + 4] || 0;
                arg1[loc5 + 5] = arg1[loc5 + 5] || 0;
                arg1[loc5 + 6] = arg1[loc5 + 6] || 0;
                arg1[loc5 + 7] = arg1[loc5 + 7] || 0;
                arg1[loc5 + 8] = arg1[loc5 + 8] || 0;
                arg1[loc5 + 9] = arg1[loc5 + 9] || 0;
                arg1[loc5 + 10] = arg1[loc5 + 10] || 0;
                arg1[loc5 + 11] = arg1[loc5 + 11] || 0;
                arg1[loc5 + 12] = arg1[loc5 + 12] || 0;
                arg1[loc5 + 13] = arg1[loc5 + 13] || 0;
                arg1[loc5 + 14] = arg1[loc5 + 14] || 0;
                arg1[loc5 + 15] = arg1[loc5 + 15] || 0;
                loc6 = loc1;
                loc7 = loc2;
                loc8 = loc3;
                loc9 = loc4;
                loc1 = ff(loc1, loc2, loc3, loc4, arg1[loc5 + 0], 7, 3614090360);
                loc4 = ff(loc4, loc1, loc2, loc3, arg1[loc5 + 1], 12, 3905402710);
                loc3 = ff(loc3, loc4, loc1, loc2, arg1[loc5 + 2], 17, 606105819);
                loc2 = ff(loc2, loc3, loc4, loc1, arg1[loc5 + 3], 22, 3250441966);
                loc1 = ff(loc1, loc2, loc3, loc4, arg1[loc5 + 4], 7, 4118548399);
                loc4 = ff(loc4, loc1, loc2, loc3, arg1[loc5 + 5], 12, 1200080426);
                loc3 = ff(loc3, loc4, loc1, loc2, arg1[loc5 + 6], 17, 2821735955);
                loc2 = ff(loc2, loc3, loc4, loc1, arg1[loc5 + 7], 22, 4249261313);
                loc1 = ff(loc1, loc2, loc3, loc4, arg1[loc5 + 8], 7, 1770035416);
                loc4 = ff(loc4, loc1, loc2, loc3, arg1[loc5 + 9], 12, 2336552879);
                loc3 = ff(loc3, loc4, loc1, loc2, arg1[loc5 + 10], 17, 4294925233);
                loc2 = ff(loc2, loc3, loc4, loc1, arg1[loc5 + 11], 22, 2304563134);
                loc1 = ff(loc1, loc2, loc3, loc4, arg1[loc5 + 12], 7, 1804603682);
                loc4 = ff(loc4, loc1, loc2, loc3, arg1[loc5 + 13], 12, 4254626195);
                loc3 = ff(loc3, loc4, loc1, loc2, arg1[loc5 + 14], 17, 2792965006);
                loc2 = ff(loc2, loc3, loc4, loc1, arg1[loc5 + 15], 22, 1236535329);
                loc1 = gg(loc1, loc2, loc3, loc4, arg1[loc5 + 1], 5, 4129170786);
                loc4 = gg(loc4, loc1, loc2, loc3, arg1[loc5 + 6], 9, 3225465664);
                loc3 = gg(loc3, loc4, loc1, loc2, arg1[loc5 + 11], 14, 643717713);
                loc2 = gg(loc2, loc3, loc4, loc1, arg1[loc5 + 0], 20, 3921069994);
                loc1 = gg(loc1, loc2, loc3, loc4, arg1[loc5 + 5], 5, 3593408605);
                loc4 = gg(loc4, loc1, loc2, loc3, arg1[loc5 + 10], 9, 38016083);
                loc3 = gg(loc3, loc4, loc1, loc2, arg1[loc5 + 15], 14, 3634488961);
                loc2 = gg(loc2, loc3, loc4, loc1, arg1[loc5 + 4], 20, 3889429448);
                loc1 = gg(loc1, loc2, loc3, loc4, arg1[loc5 + 9], 5, 568446438);
                loc4 = gg(loc4, loc1, loc2, loc3, arg1[loc5 + 14], 9, 3275163606);
                loc3 = gg(loc3, loc4, loc1, loc2, arg1[loc5 + 3], 14, 4107603335);
                loc2 = gg(loc2, loc3, loc4, loc1, arg1[loc5 + 8], 20, 1163531501);
                loc1 = gg(loc1, loc2, loc3, loc4, arg1[loc5 + 13], 5, 2850285829);
                loc4 = gg(loc4, loc1, loc2, loc3, arg1[loc5 + 2], 9, 4243563512);
                loc3 = gg(loc3, loc4, loc1, loc2, arg1[loc5 + 7], 14, 1735328473);
                loc2 = gg(loc2, loc3, loc4, loc1, arg1[loc5 + 12], 20, 2368359562);
                loc1 = hh(loc1, loc2, loc3, loc4, arg1[loc5 + 5], 4, 4294588738);
                loc4 = hh(loc4, loc1, loc2, loc3, arg1[loc5 + 8], 11, 2272392833);
                loc3 = hh(loc3, loc4, loc1, loc2, arg1[loc5 + 11], 16, 1839030562);
                loc2 = hh(loc2, loc3, loc4, loc1, arg1[loc5 + 14], 23, 4259657740);
                loc1 = hh(loc1, loc2, loc3, loc4, arg1[loc5 + 1], 4, 2763975236);
                loc4 = hh(loc4, loc1, loc2, loc3, arg1[loc5 + 4], 11, 1272893353);
                loc3 = hh(loc3, loc4, loc1, loc2, arg1[loc5 + 7], 16, 4139469664);
                loc2 = hh(loc2, loc3, loc4, loc1, arg1[loc5 + 10], 23, 3200236656);
                loc1 = hh(loc1, loc2, loc3, loc4, arg1[loc5 + 13], 4, 681279174);
                loc4 = hh(loc4, loc1, loc2, loc3, arg1[loc5 + 0], 11, 3936430074);
                loc3 = hh(loc3, loc4, loc1, loc2, arg1[loc5 + 3], 16, 3572445317);
                loc2 = hh(loc2, loc3, loc4, loc1, arg1[loc5 + 6], 23, 76029189);
                loc1 = hh(loc1, loc2, loc3, loc4, arg1[loc5 + 9], 4, 3654602809);
                loc4 = hh(loc4, loc1, loc2, loc3, arg1[loc5 + 12], 11, 3873151461);
                loc3 = hh(loc3, loc4, loc1, loc2, arg1[loc5 + 15], 16, 530742520);
                loc2 = hh(loc2, loc3, loc4, loc1, arg1[loc5 + 2], 23, 3299628645);
                loc1 = ii(loc1, loc2, loc3, loc4, arg1[loc5 + 0], 6, 4096336452);
                loc4 = ii(loc4, loc1, loc2, loc3, arg1[loc5 + 7], 10, 1126891415);
                loc3 = ii(loc3, loc4, loc1, loc2, arg1[loc5 + 14], 15, 2878612391);
                loc2 = ii(loc2, loc3, loc4, loc1, arg1[loc5 + 5], 21, 4237533241);
                loc1 = ii(loc1, loc2, loc3, loc4, arg1[loc5 + 12], 6, 1700485571);
                loc4 = ii(loc4, loc1, loc2, loc3, arg1[loc5 + 3], 10, 2399980690);
                loc3 = ii(loc3, loc4, loc1, loc2, arg1[loc5 + 10], 15, 4293915773);
                loc2 = ii(loc2, loc3, loc4, loc1, arg1[loc5 + 1], 21, 2240044497);
                loc1 = ii(loc1, loc2, loc3, loc4, arg1[loc5 + 8], 6, 1873313359);
                loc4 = ii(loc4, loc1, loc2, loc3, arg1[loc5 + 15], 10, 4264355552);
                loc3 = ii(loc3, loc4, loc1, loc2, arg1[loc5 + 6], 15, 2734768916);
                loc2 = ii(loc2, loc3, loc4, loc1, arg1[loc5 + 13], 21, 1309151649);
                loc1 = ii(loc1, loc2, loc3, loc4, arg1[loc5 + 4], 6, 4149444226);
                loc4 = ii(loc4, loc1, loc2, loc3, arg1[loc5 + 11], 10, 3174756917);
                loc3 = ii(loc3, loc4, loc1, loc2, arg1[loc5 + 2], 15, 718787259);
                loc2 = ii(loc2, loc3, loc4, loc1, arg1[loc5 + 9], 21, 3951481745);
                loc1 = loc1 + loc6;
                loc2 = loc2 + loc7;
                loc3 = loc3 + loc8;
                loc4 = loc4 + loc9;
                loc5 = loc5 + 16;
            }
            return [loc1, loc2, loc3, loc4];
        }

        public static const HASH_SIZE:int=16;
    }
}


//          class SHA1
package com.hurlant.crypto.hash 
{
    public class SHA1 extends com.hurlant.crypto.hash.SHABase implements com.hurlant.crypto.hash.IHash
    {
        public function SHA1()
        {
            super();
            return;
        }

        public override function toString():String
        {
            return "sha1";
        }

        protected override function core(arg1:Array, arg2:uint):Array
        {
            var loc8:*=0;
            var loc9:*=0;
            var loc10:*=0;
            var loc11:*=0;
            var loc12:*=0;
            var loc13:*=0;
            var loc14:*=0;
            arg1[arg2 >> 5] = arg1[arg2 >> 5] | 128 << 24 - arg2 % 32;
            arg1[(arg2 + 64 >> 9 << 4) + 15] = arg2;
            var loc1:*=[];
            var loc2:*=1732584193;
            var loc3:*=4023233417;
            var loc4:*=2562383102;
            var loc5:*=271733878;
            var loc6:*=3285377520;
            var loc7:*=0;
            while (loc7 < arg1.length) 
            {
                loc8 = loc2;
                loc9 = loc3;
                loc10 = loc4;
                loc11 = loc5;
                loc12 = loc6;
                loc13 = 0;
                while (loc13 < 80) 
                {
                    if (loc13 < 16) 
                    {
                        loc1[loc13] = arg1[loc7 + loc13] || 0;
                    }
                    else 
                    {
                        loc1[loc13] = rol(loc1[loc13 - 3] ^ loc1[loc13 - 8] ^ loc1[loc13 - 14] ^ loc1[loc13 - 16], 1);
                    }
                    loc14 = rol(loc2, 5) + ft(loc13, loc3, loc4, loc5) + loc6 + loc1[loc13] + kt(loc13);
                    loc6 = loc5;
                    loc5 = loc4;
                    loc4 = rol(loc3, 30);
                    loc3 = loc2;
                    loc2 = loc14;
                    ++loc13;
                }
                loc2 = loc2 + loc8;
                loc3 = loc3 + loc9;
                loc4 = loc4 + loc10;
                loc5 = loc5 + loc11;
                loc6 = loc6 + loc12;
                loc7 = loc7 + 16;
            }
            return [loc2, loc3, loc4, loc5, loc6];
        }

        internal function kt(arg1:uint):uint
        {
            return arg1 < 20 ? 1518500249 : arg1 < 40 ? 1859775393 : arg1 < 60 ? 2400959708 : 3395469782;
        }

        public override function getHashSize():uint
        {
            return HASH_SIZE;
        }

        internal function ft(arg1:uint, arg2:uint, arg3:uint, arg4:uint):uint
        {
            if (arg1 < 20) 
            {
                return arg2 & arg3 | ~arg2 & arg4;
            }
            if (arg1 < 40) 
            {
                return arg2 ^ arg3 ^ arg4;
            }
            if (arg1 < 60) 
            {
                return arg2 & arg3 | arg2 & arg4 | arg3 & arg4;
            }
            return arg2 ^ arg3 ^ arg4;
        }

        internal function rol(arg1:uint, arg2:uint):uint
        {
            return arg1 << arg2 | arg1 >>> 32 - arg2;
        }

        public static const HASH_SIZE:int=20;
    }
}


//          class SHA224
package com.hurlant.crypto.hash 
{
    public class SHA224 extends com.hurlant.crypto.hash.SHA256
    {
        public function SHA224()
        {
            super();
            h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
            return;
        }

        public override function getHashSize():uint
        {
            return 28;
        }

        public override function toString():String
        {
            return "sha224";
        }
    }
}


//          class SHA256
package com.hurlant.crypto.hash 
{
    public class SHA256 extends com.hurlant.crypto.hash.SHABase implements com.hurlant.crypto.hash.IHash
    {
        public function SHA256()
        {
            h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
            super();
            return;
        }

        public override function toString():String
        {
            return "sha256";
        }

        public override function getHashSize():uint
        {
            return 32;
        }

        protected function rrol(arg1:uint, arg2:uint):uint
        {
            return arg1 << 32 - arg2 | arg1 >>> arg2;
        }

        protected override function core(arg1:Array, arg2:uint):Array
        {
            var loc11:*=0;
            var loc12:*=0;
            var loc13:*=0;
            var loc14:*=0;
            var loc15:*=0;
            var loc16:*=0;
            var loc17:*=0;
            var loc18:*=0;
            var loc19:*=0;
            var loc20:*=0;
            var loc21:*=0;
            var loc22:*=0;
            var loc23:*=0;
            arg1[arg2 >> 5] = arg1[arg2 >> 5] | 128 << 24 - arg2 % 32;
            arg1[(arg2 + 64 >> 9 << 4) + 15] = arg2;
            var loc1:*=[];
            var loc2:*=h[0];
            var loc3:*=h[1];
            var loc4:*=h[2];
            var loc5:*=h[3];
            var loc6:*=h[4];
            var loc7:*=h[5];
            var loc8:*=h[6];
            var loc9:*=h[7];
            var loc10:*=0;
            while (loc10 < arg1.length) 
            {
                loc11 = loc2;
                loc12 = loc3;
                loc13 = loc4;
                loc14 = loc5;
                loc15 = loc6;
                loc16 = loc7;
                loc17 = loc8;
                loc18 = loc9;
                loc19 = 0;
                while (loc19 < 64) 
                {
                    if (loc19 < 16) 
                    {
                        loc1[loc19] = arg1[loc10 + loc19] || 0;
                    }
                    else 
                    {
                        loc22 = rrol(loc1[loc19 - 15], 7) ^ rrol(loc1[loc19 - 15], 18) ^ loc1[loc19 - 15] >>> 3;
                        loc23 = rrol(loc1[loc19 - 2], 17) ^ rrol(loc1[loc19 - 2], 19) ^ loc1[loc19 - 2] >>> 10;
                        loc1[loc19] = loc1[loc19 - 16] + loc22 + loc1[loc19 - 7] + loc23;
                    }
                    loc20 = (rrol(loc2, 2) ^ rrol(loc2, 13) ^ rrol(loc2, 22)) + (loc2 & loc3 ^ loc2 & loc4 ^ loc3 & loc4);
                    loc21 = loc9 + (rrol(loc6, 6) ^ rrol(loc6, 11) ^ rrol(loc6, 25)) + (loc6 & loc7 ^ loc8 & ~loc6) + k[loc19] + loc1[loc19];
                    loc9 = loc8;
                    loc8 = loc7;
                    loc7 = loc6;
                    loc6 = loc5 + loc21;
                    loc5 = loc4;
                    loc4 = loc3;
                    loc3 = loc2;
                    loc2 = loc21 + loc20;
                    ++loc19;
                }
                loc2 = loc2 + loc11;
                loc3 = loc3 + loc12;
                loc4 = loc4 + loc13;
                loc5 = loc5 + loc14;
                loc6 = loc6 + loc15;
                loc7 = loc7 + loc16;
                loc8 = loc8 + loc17;
                loc9 = loc9 + loc18;
                loc10 = loc10 + 16;
            }
            return [loc2, loc3, loc4, loc5, loc6, loc7, loc8, loc9];
        }

        protected static const k:Array=[1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

        protected var h:Array;
    }
}


//          class SHABase
package com.hurlant.crypto.hash 
{
    import flash.utils.*;
    
    public class SHABase extends Object implements com.hurlant.crypto.hash.IHash
    {
        public function SHABase()
        {
            super();
            return;
        }

        public function toString():String
        {
            return "sha";
        }

        public function getInputSize():uint
        {
            return 64;
        }

        public function getHashSize():uint
        {
            return 0;
        }

        public function hash(arg1:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=arg1.length;
            var loc2:*=arg1.endian;
            arg1.endian = flash.utils.Endian.BIG_ENDIAN;
            var loc3:*=loc1 * 8;
            while (arg1.length % 4 != 0) 
            {
                arg1[arg1.length] = 0;
            }
            arg1.position = 0;
            var loc4:*=[];
            var loc5:*=0;
            while (loc5 < arg1.length) 
            {
                loc4.push(arg1.readUnsignedInt());
                loc5 = loc5 + 4;
            }
            var loc6:*=core(loc4, loc3);
            var loc7:*=new flash.utils.ByteArray();
            var loc8:*=getHashSize() / 4;
            loc5 = 0;
            while (loc5 < loc8) 
            {
                loc7.writeUnsignedInt(loc6[loc5]);
                ++loc5;
            }
            arg1.length = loc1;
            arg1.endian = loc2;
            return loc7;
        }

        protected function core(arg1:Array, arg2:uint):Array
        {
            return null;
        }
    }
}


//        package prng
//          class ARC4
package com.hurlant.crypto.prng 
{
    import com.hurlant.crypto.symmetric.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class ARC4 extends Object implements com.hurlant.crypto.prng.IPRNG, com.hurlant.crypto.symmetric.IStreamCipher
    {
        public function ARC4(arg1:flash.utils.ByteArray=null)
        {
            super();
            S = new flash.utils.ByteArray();
            if (arg1) 
            {
                init(arg1);
            }
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            encrypt(arg1);
            return;
        }

        public function init(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            loc1 = 0;
            while (loc1 < 256) 
            {
                S[loc1] = loc1;
                ++loc1;
            }
            loc2 = 0;
            loc1 = 0;
            while (loc1 < 256) 
            {
                loc2 = loc2 + S[loc1] + arg1[loc1 % arg1.length] & 255;
                loc3 = S[loc1];
                S[loc1] = S[loc2];
                S[loc2] = loc3;
                ++loc1;
            }
            this.i = 0;
            this.j = 0;
            return;
        }

        public function next():uint
        {
            var loc1:*=0;
            i = i + 1 & 255;
            j = j + S[i] & 255;
            loc1 = S[i];
            S[i] = S[j];
            S[j] = loc1;
            return S[loc1 + S[i] & 255];
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                var loc2:*=loc1++;
                arg1[loc2] = arg1[loc2] ^ next();
            }
            return;
        }

        public function dispose():void
        {
            var loc1:*=0;
            if (S != null) 
            {
                loc1 = 0;
                while (loc1 < S.length) 
                {
                    S[loc1] = Math.random() * 256;
                    ++loc1;
                }
                S.length = 0;
                S = null;
            }
            this.i = 0;
            this.j = 0;
            com.hurlant.util.Memory.gc();
            return;
        }

        public function getBlockSize():uint
        {
            return 1;
        }

        public function getPoolSize():uint
        {
            return psize;
        }

        public function toString():String
        {
            return "rc4";
        }

        internal const psize:uint=256;

        internal var S:flash.utils.ByteArray;

        internal var i:int=0;

        internal var j:int=0;
    }
}


//          class IPRNG
package com.hurlant.crypto.prng 
{
    import flash.utils.*;
    
    public interface IPRNG
    {
        function init(arg1:flash.utils.ByteArray):void;

        function next():uint;

        function getPoolSize():uint;

        function toString():String;

        function dispose():void;
    }
}


//          class Random
package com.hurlant.crypto.prng 
{
    import com.hurlant.util.*;
    import flash.system.*;
    import flash.text.*;
    import flash.utils.*;
    
    public class Random extends Object
    {
        public function Random(arg1:Class=null)
        {
            var loc1:*=0;
            super();
            if (arg1 == null) 
            {
                arg1 = com.hurlant.crypto.prng.ARC4;
            }
            state = new arg1() as com.hurlant.crypto.prng.IPRNG;
            psize = state.getPoolSize();
            pool = new flash.utils.ByteArray();
            pptr = 0;
            while (pptr < psize) 
            {
                loc1 = 65536 * Math.random();
                var loc3:*;
                var loc2:*=pptr++;
                pool[loc2] = loc1 >>> 8;
                pool[loc3 = pptr++] = loc1 & 255;
            }
            pptr = 0;
            seed();
            return;
        }

        public function autoSeed():void
        {
            var loc3:*=null;
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeUnsignedInt(flash.system.System.totalMemory);
            loc1.writeUTF(flash.system.Capabilities.serverString);
            loc1.writeUnsignedInt(flash.utils.getTimer());
            loc1.writeUnsignedInt(new Date().getTime());
            var loc2:*=flash.text.Font.enumerateFonts(true);
            var loc4:*=0;
            var loc5:*=loc2;
            for each (loc3 in loc5) 
            {
                loc1.writeUTF(loc3.fontName);
                loc1.writeUTF(loc3.fontStyle);
                loc1.writeUTF(loc3.fontType);
            }
            loc1.position = 0;
            while (loc1.bytesAvailable >= 4) 
            {
                seed(loc1.readUnsignedInt());
            }
            return;
        }

        public function seed(arg1:int=0):void
        {
            if (arg1 == 0) 
            {
                arg1 = new Date().getTime();
            }
            var loc2:*;
            var loc1:*=pptr++;
            pool[loc1] = pool[loc1] ^ arg1 & 255;
            loc2 = pptr++;
            pool[loc2] = pool[loc2] ^ arg1 >> 8 & 255;
            pool[loc3 = pptr++] = pool[loc3] ^ arg1 >> 16 & 255;
            pool[loc4 = pptr++] = pool[loc4] ^ arg1 >> 24 & 255;
            pptr = pptr % psize;
            seeded = true;
            return;
        }

        public function toString():String
        {
            return "random-" + state.toString();
        }

        public function dispose():void
        {
            var loc1:*=0;
            while (loc1 < pool.length) 
            {
                pool[loc1] = Math.random() * 256;
                ++loc1;
            }
            pool.length = 0;
            pool = null;
            state.dispose();
            state = null;
            psize = 0;
            pptr = 0;
            com.hurlant.util.Memory.gc();
            return;
        }

        public function nextBytes(arg1:flash.utils.ByteArray, arg2:int):void
        {
            while (arg2--) 
            {
                arg1.writeByte(nextByte());
            }
            return;
        }

        public function nextByte():int
        {
            if (!ready) 
            {
                if (!seeded) 
                {
                    autoSeed();
                }
                state.init(pool);
                pool.length = 0;
                pptr = 0;
                ready = true;
            }
            return state.next();
        }

        internal var ready:Boolean=false;

        internal var pool:flash.utils.ByteArray;

        internal var seeded:Boolean=false;

        internal var psize:int;

        internal var state:com.hurlant.crypto.prng.IPRNG;

        internal var pptr:int;
    }
}


//          class TLSPRF
package com.hurlant.crypto.prng 
{
    import com.hurlant.crypto.hash.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class TLSPRF extends Object
    {
        public function TLSPRF(arg1:flash.utils.ByteArray, arg2:String, arg3:flash.utils.ByteArray)
        {
            super();
            var loc1:*=Math.ceil(arg1.length / 2);
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=new flash.utils.ByteArray();
            loc2.writeBytes(arg1, 0, loc1);
            loc3.writeBytes(arg1, arg1.length - loc1, loc1);
            var loc4:*;
            (loc4 = new flash.utils.ByteArray()).writeUTFBytes(arg2);
            loc4.writeBytes(arg3);
            this.seed = loc4;
            this.s1 = loc2;
            this.s2 = loc3;
            hmac_md5 = new com.hurlant.crypto.hash.HMAC(new com.hurlant.crypto.hash.MD5());
            hmac_sha1 = new com.hurlant.crypto.hash.HMAC(new com.hurlant.crypto.hash.SHA1());
            this.a1 = hmac_md5.compute(loc2, this.seed);
            this.a2 = hmac_sha1.compute(loc3, this.seed);
            p1 = new flash.utils.ByteArray();
            p2 = new flash.utils.ByteArray();
            d1 = new flash.utils.ByteArray();
            d2 = new flash.utils.ByteArray();
            d1.position = com.hurlant.crypto.hash.MD5.HASH_SIZE;
            d1.writeBytes(this.seed);
            d2.position = com.hurlant.crypto.hash.SHA1.HASH_SIZE;
            d2.writeBytes(this.seed);
            return;
        }

        internal function more_md5():void
        {
            d1.position = 0;
            d1.writeBytes(a1);
            var loc1:*=p1.position;
            var loc2:*=hmac_md5.compute(s1, d1);
            a1 = hmac_md5.compute(s1, a1);
            p1.writeBytes(loc2);
            p1.position = loc1;
            return;
        }

        public function nextByte():int
        {
            if (p1.bytesAvailable == 0) 
            {
                more_md5();
            }
            if (p2.bytesAvailable == 0) 
            {
                more_sha1();
            }
            return p1.readUnsignedByte() ^ p2.readUnsignedByte();
        }

        internal function dba(arg1:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                arg1[loc1] = 0;
                ++loc1;
            }
            arg1.length = 0;
            return null;
        }

        public function toString():String
        {
            return "tls-prf";
        }

        public function dispose():void
        {
            seed = dba(seed);
            s1 = dba(s1);
            s2 = dba(s2);
            a1 = dba(a1);
            a2 = dba(a2);
            p1 = dba(p1);
            p2 = dba(p2);
            d1 = dba(d1);
            d2 = dba(d2);
            hmac_md5.dispose();
            hmac_md5 = null;
            hmac_sha1.dispose();
            hmac_sha1 = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal function more_sha1():void
        {
            d2.position = 0;
            d2.writeBytes(a2);
            var loc1:*=p2.position;
            var loc2:*=hmac_sha1.compute(s2, d2);
            a2 = hmac_sha1.compute(s2, a2);
            p2.writeBytes(loc2);
            p2.position = loc1;
            return;
        }

        public function nextBytes(arg1:flash.utils.IDataOutput, arg2:int):void
        {
            while (arg2--) 
            {
                arg1.writeByte(nextByte());
            }
            return;
        }

        internal var p1:flash.utils.ByteArray;

        internal var p2:flash.utils.ByteArray;

        internal var d1:flash.utils.ByteArray;

        internal var d2:flash.utils.ByteArray;

        internal var hmac_sha1:com.hurlant.crypto.hash.HMAC;

        internal var s1:flash.utils.ByteArray;

        internal var s2:flash.utils.ByteArray;

        internal var hmac_md5:com.hurlant.crypto.hash.HMAC;

        internal var a1:flash.utils.ByteArray;

        internal var seed:flash.utils.ByteArray;

        internal var a2:flash.utils.ByteArray;
    }
}


//        package rsa
//          class RSAKey
package com.hurlant.crypto.rsa 
{
    import com.hurlant.crypto.prng.*;
    import com.hurlant.math.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class RSAKey extends Object
    {
        public function RSAKey(arg1:com.hurlant.math.BigInteger, arg2:int, arg3:com.hurlant.math.BigInteger=null, arg4:com.hurlant.math.BigInteger=null, arg5:com.hurlant.math.BigInteger=null, arg6:com.hurlant.math.BigInteger=null, arg7:com.hurlant.math.BigInteger=null, arg8:com.hurlant.math.BigInteger=null)
        {
            super();
            this.n = arg1;
            this.e = arg2;
            this.d = arg3;
            this.p = arg4;
            this.q = arg5;
            this.dmp1 = arg6;
            this.dmq1 = arg7;
            this.coeff = arg8;
            canEncrypt = !(n == null) && !(e == 0);
            canDecrypt = canEncrypt && !(d == null);
            return;
        }

        public function verify(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray, arg3:uint, arg4:Function=null):void
        {
            _decrypt(doPublic, arg1, arg2, arg3, arg4, 1);
            return;
        }

        protected function doPrivate2(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            if (p == null && q == null) 
            {
                return arg1.modPow(d, n);
            }
            var loc1:*=arg1.mod(p).modPow(dmp1, p);
            var loc2:*=arg1.mod(q).modPow(dmq1, q);
            while (loc1.compareTo(loc2) < 0) 
            {
                loc1 = loc1.add(p);
            }
            var loc3:*;
            return loc3 = loc1.subtract(loc2).multiply(coeff).mod(p).multiply(q).add(loc2);
        }

        public function dump():String
        {
            var loc1:*="N=" + n.toString(16) + "\n" + "E=" + e.toString(16) + "\n";
            if (canDecrypt) 
            {
                loc1 = loc1 + ("D=" + d.toString(16) + "\n");
                if (!(p == null) && !(q == null)) 
                {
                    loc1 = loc1 + ("P=" + p.toString(16) + "\n");
                    loc1 = loc1 + ("Q=" + q.toString(16) + "\n");
                    loc1 = loc1 + ("DMP1=" + dmp1.toString(16) + "\n");
                    loc1 = loc1 + ("DMQ1=" + dmq1.toString(16) + "\n");
                    loc1 = loc1 + ("IQMP=" + coeff.toString(16) + "\n");
                }
            }
            return loc1;
        }

        public function decrypt(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray, arg3:uint, arg4:Function=null):void
        {
            _decrypt(doPrivate2, arg1, arg2, arg3, arg4, 2);
            return;
        }

        internal function _decrypt(arg1:Function, arg2:flash.utils.ByteArray, arg3:flash.utils.ByteArray, arg4:uint, arg5:Function, arg6:int):void
        {
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            if (arg5 == null) 
            {
                arg5 = pkcs1unpad;
            }
            if (arg2.position >= arg2.length) 
            {
                arg2.position = 0;
            }
            var loc1:*=getBlockSize();
            var loc2:*=arg2.position + arg4;
            while (arg2.position < loc2) 
            {
                loc3 = new com.hurlant.math.BigInteger(arg2, arg4);
                loc4 = arg1(loc3);
                loc5 = arg5(loc4, loc1);
                arg3.writeBytes(loc5);
            }
            return;
        }

        protected function doPublic(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return arg1.modPowInt(e, n);
        }

        public function dispose():void
        {
            e = 0;
            n.dispose();
            n = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal function _encrypt(arg1:Function, arg2:flash.utils.ByteArray, arg3:flash.utils.ByteArray, arg4:uint, arg5:Function, arg6:int):void
        {
            var loc3:*=null;
            var loc4:*=null;
            if (arg5 == null) 
            {
                arg5 = pkcs1pad;
            }
            if (arg2.position >= arg2.length) 
            {
                arg2.position = 0;
            }
            var loc1:*=getBlockSize();
            var loc2:*=arg2.position + arg4;
            while (arg2.position < loc2) 
            {
                loc3 = new com.hurlant.math.BigInteger(arg5(arg2, loc2, loc1, arg6), loc1);
                (loc4 = arg1(loc3)).toArray(arg3);
            }
            return;
        }

        internal function rawpad(arg1:flash.utils.ByteArray, arg2:int, arg3:uint):flash.utils.ByteArray
        {
            return arg1;
        }

        public function encrypt(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray, arg3:uint, arg4:Function=null):void
        {
            _encrypt(doPublic, arg1, arg2, arg3, arg4, 2);
            return;
        }

        internal function pkcs1pad(arg1:flash.utils.ByteArray, arg2:int, arg3:uint, arg4:uint=2):flash.utils.ByteArray
        {
            var loc5:*=0;
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=arg1.position;
            arg2 = Math.min(arg2, arg1.length, loc2 + arg3 - 11);
            arg1.position = arg2;
            var loc3:*;
            --loc3;
            while (loc3 >= loc2 && arg3 > 11) 
            {
                var loc6:*;
                loc1[loc6 = --arg3] = arg1[loc3--];
            }
            loc1[loc6 = --arg3] = 0;
            var loc4:*=new com.hurlant.crypto.prng.Random();
            while (arg3 > 2) 
            {
                loc5 = 0;
                while (loc5 == 0) 
                {
                    loc5 = arg4 != 2 ? 255 : loc4.nextByte();
                }
                var loc7:*;
                loc1[loc7 = --arg3] = loc5;
            }
            loc1[loc7 = --arg3] = arg4;
            var loc8:*;
            loc1[loc8 = --arg3] = 0;
            return loc1;
        }

        internal function pkcs1unpad(arg1:com.hurlant.math.BigInteger, arg2:uint, arg3:uint=2):flash.utils.ByteArray
        {
            var loc1:*=arg1.toByteArray();
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=0;
            while (loc3 < loc1.length && loc1[loc3] == 0) 
            {
                ++loc3;
            }
            if (!(loc1.length - loc3 == (arg2 - 1)) || loc1[loc3] > 2) 
            {
                trace("PKCS#1 unpad: i=" + loc3 + ", expected b[i]==[0,1,2], got b[i]=" + loc1[loc3].toString(16));
                return null;
            }
            ++loc3;
            while (loc1[loc3] != 0) 
            {
                if (!(++loc3 >= loc1.length)) 
                {
                    continue;
                }
                trace("PKCS#1 unpad: i=" + loc3 + ", b[i-1]!=0 (=" + loc1[(loc3 - 1)].toString(16) + ")");
                return null;
            }
            while (++loc3 < loc1.length) 
            {
                loc2.writeByte(loc1[loc3]);
            }
            loc2.position = 0;
            return loc2;
        }

        public function getBlockSize():uint
        {
            return (n.bitLength() + 7) / 8;
        }

        public function toString():String
        {
            return "rsa";
        }

        public function sign(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray, arg3:uint, arg4:Function=null):void
        {
            _encrypt(doPrivate2, arg1, arg2, arg3, arg4, 1);
            return;
        }

        protected function doPrivate(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            if (p == null || q == null) 
            {
                return arg1.modPow(d, n);
            }
            var loc1:*=arg1.mod(p).modPow(dmp1, p);
            var loc2:*=arg1.mod(q).modPow(dmq1, q);
            while (loc1.compareTo(loc2) < 0) 
            {
                loc1 = loc1.add(p);
            }
            return loc1.subtract(loc2).multiply(coeff).mod(p).multiply(q).add(loc2);
        }

        protected static function bigRandom(arg1:int, arg2:com.hurlant.crypto.prng.Random):com.hurlant.math.BigInteger
        {
            if (arg1 < 2) 
            {
                return com.hurlant.math.BigInteger.nbv(1);
            }
            var loc1:*=new flash.utils.ByteArray();
            arg2.nextBytes(loc1, arg1 >> 3);
            loc1.position = 0;
            var loc2:*;
            (loc2 = new com.hurlant.math.BigInteger(loc1)).primify(arg1, 1);
            return loc2;
        }

        public static function parsePublicKey(arg1:String, arg2:String):com.hurlant.crypto.rsa.RSAKey
        {
            return new RSAKey(new com.hurlant.math.BigInteger(arg1, 16), parseInt(arg2, 16));
        }

        public static function generate(arg1:uint, arg2:String):com.hurlant.crypto.rsa.RSAKey
        {
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc1:*=new com.hurlant.crypto.prng.Random();
            var loc2:*=arg1 >> 1;
            var loc3:*;
            (loc3 = new RSAKey(null, 0, null)).e = parseInt(arg2, 16);
            var loc4:*=new com.hurlant.math.BigInteger(arg2, 16);
            for (;;) 
            {
                for (;;) 
                {
                    loc3.p = bigRandom(arg1 - loc2, loc1);
                    if (!(loc3.p.subtract(com.hurlant.math.BigInteger.ONE).gcd(loc4).compareTo(com.hurlant.math.BigInteger.ONE) == 0 && loc3.p.isProbablePrime(10))) 
                    {
                        continue;
                    }
                    break;
                }
                for (;;) 
                {
                    loc3.q = bigRandom(loc2, loc1);
                    if (!(loc3.q.subtract(com.hurlant.math.BigInteger.ONE).gcd(loc4).compareTo(com.hurlant.math.BigInteger.ONE) == 0 && loc3.q.isProbablePrime(10))) 
                    {
                        continue;
                    }
                    break;
                }
                if (loc3.p.compareTo(loc3.q) <= 0) 
                {
                    loc8 = loc3.p;
                    loc3.p = loc3.q;
                    loc3.q = loc8;
                }
                loc5 = loc3.p.subtract(com.hurlant.math.BigInteger.ONE);
                loc6 = loc3.q.subtract(com.hurlant.math.BigInteger.ONE);
                if ((loc7 = loc5.multiply(loc6)).gcd(loc4).compareTo(com.hurlant.math.BigInteger.ONE) != 0) 
                {
                    continue;
                }
                loc3.n = loc3.p.multiply(loc3.q);
                loc3.d = loc4.modInverse(loc7);
                loc3.dmp1 = loc3.d.mod(loc5);
                loc3.dmq1 = loc3.d.mod(loc6);
                loc3.coeff = loc3.q.modInverse(loc3.p);
                break;
            }
            return loc3;
        }

        public static function parsePrivateKey(arg1:String, arg2:String, arg3:String, arg4:String=null, arg5:String=null, arg6:String=null, arg7:String=null, arg8:String=null):com.hurlant.crypto.rsa.RSAKey
        {
            if (arg4 == null) 
            {
                return new RSAKey(new com.hurlant.math.BigInteger(arg1, 16), parseInt(arg2, 16), new com.hurlant.math.BigInteger(arg3, 16));
            }
            return new RSAKey(new com.hurlant.math.BigInteger(arg1, 16), parseInt(arg2, 16), new com.hurlant.math.BigInteger(arg3, 16), new com.hurlant.math.BigInteger(arg4, 16), new com.hurlant.math.BigInteger(arg5, 16), new com.hurlant.math.BigInteger(arg6, 16), new com.hurlant.math.BigInteger(arg7), new com.hurlant.math.BigInteger(arg8));
        }

        public var dmp1:com.hurlant.math.BigInteger;

        protected var canDecrypt:Boolean;

        public var d:com.hurlant.math.BigInteger;

        public var e:int;

        public var dmq1:com.hurlant.math.BigInteger;

        public var n:com.hurlant.math.BigInteger;

        public var p:com.hurlant.math.BigInteger;

        public var q:com.hurlant.math.BigInteger;

        protected var canEncrypt:Boolean;

        public var coeff:com.hurlant.math.BigInteger;
    }
}


//        package symmetric
//          class AESKey
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.crypto.prng.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class AESKey extends Object implements com.hurlant.crypto.symmetric.ISymmetricKey
    {
        public function AESKey(arg1:flash.utils.ByteArray)
        {
            super();
            tmp = new flash.utils.ByteArray();
            state = new flash.utils.ByteArray();
            keyLength = arg1.length;
            this.key = new flash.utils.ByteArray();
            this.key.writeBytes(arg1);
            expandKey();
            return;
        }

        public function toString():String
        {
            return "aes" + 8 * keyLength;
        }

        public function decrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            var loc1:*=0;
            state.position = 0;
            state.writeBytes(arg1, arg2, Nb * 4);
            addRoundKey(key, Nr * Nb * 4);
            invShiftRows();
            loc1 = Nr;
            while (loc1--) 
            {
                addRoundKey(key, loc1 * Nb * 4);
                if (!loc1) 
                {
                    continue;
                }
                invMixSubColumns();
            }
            arg1.position = arg2;
            arg1.writeBytes(state);
            return;
        }

        protected function invMixSubColumns():void
        {
            var loc1:*=0;
            tmp.length = 0;
            tmp[0] = XtimeE[state[0]] ^ XtimeB[state[1]] ^ XtimeD[state[2]] ^ Xtime9[state[3]];
            tmp[5] = Xtime9[state[0]] ^ XtimeE[state[1]] ^ XtimeB[state[2]] ^ XtimeD[state[3]];
            tmp[10] = XtimeD[state[0]] ^ Xtime9[state[1]] ^ XtimeE[state[2]] ^ XtimeB[state[3]];
            tmp[15] = XtimeB[state[0]] ^ XtimeD[state[1]] ^ Xtime9[state[2]] ^ XtimeE[state[3]];
            tmp[4] = XtimeE[state[4]] ^ XtimeB[state[5]] ^ XtimeD[state[6]] ^ Xtime9[state[7]];
            tmp[9] = Xtime9[state[4]] ^ XtimeE[state[5]] ^ XtimeB[state[6]] ^ XtimeD[state[7]];
            tmp[14] = XtimeD[state[4]] ^ Xtime9[state[5]] ^ XtimeE[state[6]] ^ XtimeB[state[7]];
            tmp[3] = XtimeB[state[4]] ^ XtimeD[state[5]] ^ Xtime9[state[6]] ^ XtimeE[state[7]];
            tmp[8] = XtimeE[state[8]] ^ XtimeB[state[9]] ^ XtimeD[state[10]] ^ Xtime9[state[11]];
            tmp[13] = Xtime9[state[8]] ^ XtimeE[state[9]] ^ XtimeB[state[10]] ^ XtimeD[state[11]];
            tmp[2] = XtimeD[state[8]] ^ Xtime9[state[9]] ^ XtimeE[state[10]] ^ XtimeB[state[11]];
            tmp[7] = XtimeB[state[8]] ^ XtimeD[state[9]] ^ Xtime9[state[10]] ^ XtimeE[state[11]];
            tmp[12] = XtimeE[state[12]] ^ XtimeB[state[13]] ^ XtimeD[state[14]] ^ Xtime9[state[15]];
            tmp[1] = Xtime9[state[12]] ^ XtimeE[state[13]] ^ XtimeB[state[14]] ^ XtimeD[state[15]];
            tmp[6] = XtimeD[state[12]] ^ Xtime9[state[13]] ^ XtimeE[state[14]] ^ XtimeB[state[15]];
            tmp[11] = XtimeB[state[12]] ^ XtimeD[state[13]] ^ Xtime9[state[14]] ^ XtimeE[state[15]];
            loc1 = 0;
            while (loc1 < 4 * Nb) 
            {
                state[loc1] = InvSbox[tmp[loc1]];
                ++loc1;
            }
            return;
        }

        
        {
            _Rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
            function ():void
            {
                Sbox = new flash.utils.ByteArray();
                InvSbox = new flash.utils.ByteArray();
                Xtime2Sbox = new flash.utils.ByteArray();
                Xtime3Sbox = new flash.utils.ByteArray();
                Xtime2 = new flash.utils.ByteArray();
                Xtime9 = new flash.utils.ByteArray();
                XtimeB = new flash.utils.ByteArray();
                XtimeD = new flash.utils.ByteArray();
                XtimeE = new flash.utils.ByteArray();
                i = 0;
                while (i < 256) 
                {
                    Sbox[i] = _Sbox[i];
                    InvSbox[i] = _InvSbox[i];
                    Xtime2Sbox[i] = _Xtime2Sbox[i];
                    Xtime3Sbox[i] = _Xtime3Sbox[i];
                    Xtime2[i] = _Xtime2[i];
                    Xtime9[i] = _Xtime9[i];
                    XtimeB[i] = _XtimeB[i];
                    XtimeD[i] = _XtimeD[i];
                    XtimeE[i] = _XtimeE[i];
                    var loc1:*;
                    i++;
                }
                Rcon = new flash.utils.ByteArray();
                i = 0;
                while (i < _Rcon.length) 
                {
                    Rcon[i] = _Rcon[i];
                    i++;
                }
                return;
            }()
        }

        protected function mixSubColumns():void
        {
            tmp.length = 0;
            tmp[0] = Xtime2Sbox[state[0]] ^ Xtime3Sbox[state[5]] ^ Sbox[state[10]] ^ Sbox[state[15]];
            tmp[1] = Sbox[state[0]] ^ Xtime2Sbox[state[5]] ^ Xtime3Sbox[state[10]] ^ Sbox[state[15]];
            tmp[2] = Sbox[state[0]] ^ Sbox[state[5]] ^ Xtime2Sbox[state[10]] ^ Xtime3Sbox[state[15]];
            tmp[3] = Xtime3Sbox[state[0]] ^ Sbox[state[5]] ^ Sbox[state[10]] ^ Xtime2Sbox[state[15]];
            tmp[4] = Xtime2Sbox[state[4]] ^ Xtime3Sbox[state[9]] ^ Sbox[state[14]] ^ Sbox[state[3]];
            tmp[5] = Sbox[state[4]] ^ Xtime2Sbox[state[9]] ^ Xtime3Sbox[state[14]] ^ Sbox[state[3]];
            tmp[6] = Sbox[state[4]] ^ Sbox[state[9]] ^ Xtime2Sbox[state[14]] ^ Xtime3Sbox[state[3]];
            tmp[7] = Xtime3Sbox[state[4]] ^ Sbox[state[9]] ^ Sbox[state[14]] ^ Xtime2Sbox[state[3]];
            tmp[8] = Xtime2Sbox[state[8]] ^ Xtime3Sbox[state[13]] ^ Sbox[state[2]] ^ Sbox[state[7]];
            tmp[9] = Sbox[state[8]] ^ Xtime2Sbox[state[13]] ^ Xtime3Sbox[state[2]] ^ Sbox[state[7]];
            tmp[10] = Sbox[state[8]] ^ Sbox[state[13]] ^ Xtime2Sbox[state[2]] ^ Xtime3Sbox[state[7]];
            tmp[11] = Xtime3Sbox[state[8]] ^ Sbox[state[13]] ^ Sbox[state[2]] ^ Xtime2Sbox[state[7]];
            tmp[12] = Xtime2Sbox[state[12]] ^ Xtime3Sbox[state[1]] ^ Sbox[state[6]] ^ Sbox[state[11]];
            tmp[13] = Sbox[state[12]] ^ Xtime2Sbox[state[1]] ^ Xtime3Sbox[state[6]] ^ Sbox[state[11]];
            tmp[14] = Sbox[state[12]] ^ Sbox[state[1]] ^ Xtime2Sbox[state[6]] ^ Xtime3Sbox[state[11]];
            tmp[15] = Xtime3Sbox[state[12]] ^ Sbox[state[1]] ^ Sbox[state[6]] ^ Xtime2Sbox[state[11]];
            state.position = 0;
            state.writeBytes(tmp, 0, Nb * 4);
            return;
        }

        protected function invShiftRows():void
        {
            var loc1:*=0;
            state[0] = InvSbox[state[0]];
            state[4] = InvSbox[state[4]];
            state[8] = InvSbox[state[8]];
            state[12] = InvSbox[state[12]];
            loc1 = InvSbox[state[13]];
            state[13] = InvSbox[state[9]];
            state[9] = InvSbox[state[5]];
            state[5] = InvSbox[state[1]];
            state[1] = loc1;
            loc1 = InvSbox[state[2]];
            state[2] = InvSbox[state[10]];
            state[10] = loc1;
            loc1 = InvSbox[state[6]];
            state[6] = InvSbox[state[14]];
            state[14] = loc1;
            loc1 = InvSbox[state[3]];
            state[3] = InvSbox[state[7]];
            state[7] = InvSbox[state[11]];
            state[11] = InvSbox[state[15]];
            state[15] = loc1;
            return;
        }

        protected function shiftRows():void
        {
            var loc1:*=0;
            state[0] = Sbox[state[0]];
            state[4] = Sbox[state[4]];
            state[8] = Sbox[state[8]];
            state[12] = Sbox[state[12]];
            loc1 = Sbox[state[1]];
            state[1] = Sbox[state[5]];
            state[5] = Sbox[state[9]];
            state[9] = Sbox[state[13]];
            state[13] = loc1;
            loc1 = Sbox[state[2]];
            state[2] = Sbox[state[10]];
            state[10] = loc1;
            loc1 = Sbox[state[6]];
            state[6] = Sbox[state[14]];
            state[14] = loc1;
            loc1 = Sbox[state[15]];
            state[15] = Sbox[state[11]];
            state[11] = Sbox[state[7]];
            state[7] = Sbox[state[3]];
            state[3] = loc1;
            return;
        }

        public function getBlockSize():uint
        {
            return 16;
        }

        public function dispose():void
        {
            var loc1:*=0;
            var loc2:*=new com.hurlant.crypto.prng.Random();
            loc1 = 0;
            while (loc1 < key.length) 
            {
                key[loc1] = loc2.nextByte();
                ++loc1;
            }
            Nr = loc2.nextByte();
            loc1 = 0;
            while (loc1 < state.length) 
            {
                state[loc1] = loc2.nextByte();
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < tmp.length) 
            {
                tmp[loc1] = loc2.nextByte();
                ++loc1;
            }
            key.length = 0;
            keyLength = 0;
            state.length = 0;
            tmp.length = 0;
            key = null;
            state = null;
            tmp = null;
            Nr = 0;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal function expandKey():void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            var loc7:*=key.length / 4;
            Nr = loc7 + 6;
            loc6 = loc7;
            while (loc6 < Nb * (Nr + 1)) 
            {
                loc1 = key[4 * loc6 - 4];
                loc2 = key[4 * loc6 - 3];
                loc3 = key[4 * loc6 - 2];
                loc4 = key[(4 * loc6 - 1)];
                if (loc6 % loc7) 
                {
                    if (loc7 > 6 && loc6 % loc7 == 4) 
                    {
                        loc1 = Sbox[loc1];
                        loc2 = Sbox[loc2];
                        loc3 = Sbox[loc3];
                        loc4 = Sbox[loc4];
                    }
                }
                else 
                {
                    loc5 = loc4;
                    loc4 = Sbox[loc1];
                    loc1 = Sbox[loc2] ^ Rcon[loc6 / loc7];
                    loc2 = Sbox[loc3];
                    loc3 = Sbox[loc5];
                }
                key[4 * loc6 + 0] = key[4 * loc6 - 4 * loc7 + 0] ^ loc1;
                key[4 * loc6 + 1] = key[4 * loc6 - 4 * loc7 + 1] ^ loc2;
                key[4 * loc6 + 2] = key[4 * loc6 - 4 * loc7 + 2] ^ loc3;
                key[4 * loc6 + 3] = key[4 * loc6 - 4 * loc7 + 3] ^ loc4;
                ++loc6;
            }
            return;
        }

        protected function addRoundKey(arg1:flash.utils.ByteArray, arg2:uint):void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < 16) 
            {
                state[loc1] = state[loc1] ^ arg1[loc1 + arg2];
                ++loc1;
            }
            return;
        }

        public function encrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            var loc1:*=0;
            state.position = 0;
            state.writeBytes(arg1, arg2, Nb * 4);
            addRoundKey(key, 0);
            loc1 = 1;
            while (loc1 < Nr + 1) 
            {
                if (loc1 < Nr) 
                {
                    mixSubColumns();
                }
                else 
                {
                    shiftRows();
                }
                addRoundKey(key, loc1 * Nb * 4);
                ++loc1;
            }
            arg1.position = arg2;
            arg1.writeBytes(state);
            return;
        }

        internal static const _Xtime2:Array=[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 27, 25, 31, 29, 19, 17, 23, 21, 11, 9, 15, 13, 3, 1, 7, 5, 59, 57, 63, 61, 51, 49, 55, 53, 43, 41, 47, 45, 35, 33, 39, 37, 91, 89, 95, 93, 83, 81, 87, 85, 75, 73, 79, 77, 67, 65, 71, 69, 123, 121, 127, 125, 115, 113, 119, 117, 107, 105, 111, 109, 99, 97, 103, 101, 155, 153, 159, 157, 147, 145, 151, 149, 139, 137, 143, 141, 131, 129, 135, 133, 187, 185, 191, 189, 179, 177, 183, 181, 171, 169, 175, 173, 163, 161, 167, 165, 219, 217, 223, 221, 211, 209, 215, 213, 203, 201, 207, 205, 195, 193, 199, 197, 251, 249, 255, 253, 243, 241, 247, 245, 235, 233, 239, 237, 227, 225, 231, 229];

        internal static const _Xtime9:Array=[0, 9, 18, 27, 36, 45, 54, 63, 72, 65, 90, 83, 108, 101, 126, 119, 144, 153, 130, 139, 180, 189, 166, 175, 216, 209, 202, 195, 252, 245, 238, 231, 59, 50, 41, 32, 31, 22, 13, 4, 115, 122, 97, 104, 87, 94, 69, 76, 171, 162, 185, 176, 143, 134, 157, 148, 227, 234, 241, 248, 199, 206, 213, 220, 118, 127, 100, 109, 82, 91, 64, 73, 62, 55, 44, 37, 26, 19, 8, 1, 230, 239, 244, 253, 194, 203, 208, 217, 174, 167, 188, 181, 138, 131, 152, 145, 77, 68, 95, 86, 105, 96, 123, 114, 5, 12, 23, 30, 33, 40, 51, 58, 221, 212, 207, 198, 249, 240, 235, 226, 149, 156, 135, 142, 177, 184, 163, 170, 236, 229, 254, 247, 200, 193, 218, 211, 164, 173, 182, 191, 128, 137, 146, 155, 124, 117, 110, 103, 88, 81, 74, 67, 52, 61, 38, 47, 16, 25, 2, 11, 215, 222, 197, 204, 243, 250, 225, 232, 159, 150, 141, 132, 187, 178, 169, 160, 71, 78, 85, 92, 99, 106, 113, 120, 15, 6, 29, 20, 43, 34, 57, 48, 154, 147, 136, 129, 190, 183, 172, 165, 210, 219, 192, 201, 246, 255, 228, 237, 10, 3, 24, 17, 46, 39, 60, 53, 66, 75, 80, 89, 102, 111, 116, 125, 161, 168, 179, 186, 133, 140, 151, 158, 233, 224, 251, 242, 205, 196, 223, 214, 49, 56, 35, 42, 21, 28, 7, 14, 121, 112, 107, 98, 93, 84, 79, 70];

        internal static const Nb:uint=4;

        internal static const _XtimeB:Array=[0, 11, 22, 29, 44, 39, 58, 49, 88, 83, 78, 69, 116, 127, 98, 105, 176, 187, 166, 173, 156, 151, 138, 129, 232, 227, 254, 245, 196, 207, 210, 217, 123, 112, 109, 102, 87, 92, 65, 74, 35, 40, 53, 62, 15, 4, 25, 18, 203, 192, 221, 214, 231, 236, 241, 250, 147, 152, 133, 142, 191, 180, 169, 162, 246, 253, 224, 235, 218, 209, 204, 199, 174, 165, 184, 179, 130, 137, 148, 159, 70, 77, 80, 91, 106, 97, 124, 119, 30, 21, 8, 3, 50, 57, 36, 47, 141, 134, 155, 144, 161, 170, 183, 188, 213, 222, 195, 200, 249, 242, 239, 228, 61, 54, 43, 32, 17, 26, 7, 12, 101, 110, 115, 120, 73, 66, 95, 84, 247, 252, 225, 234, 219, 208, 205, 198, 175, 164, 185, 178, 131, 136, 149, 158, 71, 76, 81, 90, 107, 96, 125, 118, 31, 20, 9, 2, 51, 56, 37, 46, 140, 135, 154, 145, 160, 171, 182, 189, 212, 223, 194, 201, 248, 243, 238, 229, 60, 55, 42, 33, 16, 27, 6, 13, 100, 111, 114, 121, 72, 67, 94, 85, 1, 10, 23, 28, 45, 38, 59, 48, 89, 82, 79, 68, 117, 126, 99, 104, 177, 186, 167, 172, 157, 150, 139, 128, 233, 226, 255, 244, 197, 206, 211, 216, 122, 113, 108, 103, 86, 93, 64, 75, 34, 41, 52, 63, 14, 5, 24, 19, 202, 193, 220, 215, 230, 237, 240, 251, 146, 153, 132, 143, 190, 181, 168, 163];

        internal static const _XtimeE:Array=[0, 14, 28, 18, 56, 54, 36, 42, 112, 126, 108, 98, 72, 70, 84, 90, 224, 238, 252, 242, 216, 214, 196, 202, 144, 158, 140, 130, 168, 166, 180, 186, 219, 213, 199, 201, 227, 237, 255, 241, 171, 165, 183, 185, 147, 157, 143, 129, 59, 53, 39, 41, 3, 13, 31, 17, 75, 69, 87, 89, 115, 125, 111, 97, 173, 163, 177, 191, 149, 155, 137, 135, 221, 211, 193, 207, 229, 235, 249, 247, 77, 67, 81, 95, 117, 123, 105, 103, 61, 51, 33, 47, 5, 11, 25, 23, 118, 120, 106, 100, 78, 64, 82, 92, 6, 8, 26, 20, 62, 48, 34, 44, 150, 152, 138, 132, 174, 160, 178, 188, 230, 232, 250, 244, 222, 208, 194, 204, 65, 79, 93, 83, 121, 119, 101, 107, 49, 63, 45, 35, 9, 7, 21, 27, 161, 175, 189, 179, 153, 151, 133, 139, 209, 223, 205, 195, 233, 231, 245, 251, 154, 148, 134, 136, 162, 172, 190, 176, 234, 228, 246, 248, 210, 220, 206, 192, 122, 116, 102, 104, 66, 76, 94, 80, 10, 4, 22, 24, 50, 60, 46, 32, 236, 226, 240, 254, 212, 218, 200, 198, 156, 146, 128, 142, 164, 170, 184, 182, 12, 2, 16, 30, 52, 58, 40, 38, 124, 114, 96, 110, 68, 74, 88, 86, 55, 57, 43, 37, 15, 1, 19, 29, 71, 73, 91, 85, 127, 113, 99, 109, 215, 217, 203, 197, 239, 225, 243, 253, 167, 169, 187, 181, 159, 145, 131, 141];

        internal static const _Xtime2Sbox:Array=[198, 248, 238, 246, 255, 214, 222, 145, 96, 2, 206, 86, 231, 181, 77, 236, 143, 31, 137, 250, 239, 178, 142, 251, 65, 179, 95, 69, 35, 83, 228, 155, 117, 225, 61, 76, 108, 126, 245, 131, 104, 81, 209, 249, 226, 171, 98, 42, 8, 149, 70, 157, 48, 55, 10, 47, 14, 36, 27, 223, 205, 78, 127, 234, 18, 29, 88, 52, 54, 220, 180, 91, 164, 118, 183, 125, 82, 221, 94, 19, 166, 185, 0, 193, 64, 227, 121, 182, 212, 141, 103, 114, 148, 152, 176, 133, 187, 197, 79, 237, 134, 154, 102, 17, 138, 233, 4, 254, 160, 120, 37, 75, 162, 93, 128, 5, 63, 33, 112, 241, 99, 119, 175, 66, 32, 229, 253, 191, 129, 24, 38, 195, 190, 53, 136, 46, 147, 85, 252, 122, 200, 186, 50, 230, 192, 25, 158, 163, 68, 84, 59, 11, 140, 199, 107, 40, 167, 188, 22, 173, 219, 100, 116, 20, 146, 12, 72, 184, 159, 189, 67, 196, 57, 49, 211, 242, 213, 139, 110, 218, 1, 177, 156, 73, 216, 172, 243, 207, 202, 244, 71, 16, 111, 240, 74, 92, 56, 87, 115, 151, 203, 161, 232, 62, 150, 97, 13, 15, 224, 124, 113, 204, 144, 6, 247, 28, 194, 106, 174, 105, 23, 153, 58, 39, 217, 235, 43, 34, 210, 169, 7, 51, 45, 60, 21, 201, 135, 170, 80, 165, 3, 89, 9, 26, 101, 215, 132, 208, 130, 41, 90, 30, 123, 168, 109, 44];

        internal static const _Xtime3Sbox:Array=[165, 132, 153, 141, 13, 189, 177, 84, 80, 3, 169, 125, 25, 98, 230, 154, 69, 157, 64, 135, 21, 235, 201, 11, 236, 103, 253, 234, 191, 247, 150, 91, 194, 28, 174, 106, 90, 65, 2, 79, 92, 244, 52, 8, 147, 115, 83, 63, 12, 82, 101, 94, 40, 161, 15, 181, 9, 54, 155, 61, 38, 105, 205, 159, 27, 158, 116, 46, 45, 178, 238, 251, 246, 77, 97, 206, 123, 62, 113, 151, 245, 104, 0, 44, 96, 31, 200, 237, 190, 70, 217, 75, 222, 212, 232, 74, 107, 42, 229, 22, 197, 215, 85, 148, 207, 16, 6, 129, 240, 68, 186, 227, 243, 254, 192, 138, 173, 188, 72, 4, 223, 193, 117, 99, 48, 26, 14, 109, 76, 20, 53, 47, 225, 162, 204, 57, 87, 242, 130, 71, 172, 231, 43, 149, 160, 152, 209, 127, 102, 126, 171, 131, 202, 41, 211, 60, 121, 226, 29, 118, 59, 86, 78, 30, 219, 10, 108, 228, 93, 110, 239, 166, 168, 164, 55, 139, 50, 67, 89, 183, 140, 100, 210, 224, 180, 250, 7, 37, 175, 142, 233, 24, 213, 136, 111, 114, 36, 241, 199, 81, 35, 124, 156, 33, 221, 220, 134, 133, 144, 66, 196, 170, 216, 5, 1, 18, 163, 95, 249, 208, 145, 88, 39, 185, 56, 19, 179, 51, 187, 112, 137, 167, 182, 34, 146, 32, 73, 255, 120, 122, 143, 248, 128, 23, 218, 49, 198, 184, 195, 176, 119, 17, 203, 252, 214, 58];

        internal static const _InvSbox:Array=[82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];

        internal static const _XtimeD:Array=[0, 13, 26, 23, 52, 57, 46, 35, 104, 101, 114, 127, 92, 81, 70, 75, 208, 221, 202, 199, 228, 233, 254, 243, 184, 181, 162, 175, 140, 129, 150, 155, 187, 182, 161, 172, 143, 130, 149, 152, 211, 222, 201, 196, 231, 234, 253, 240, 107, 102, 113, 124, 95, 82, 69, 72, 3, 14, 25, 20, 55, 58, 45, 32, 109, 96, 119, 122, 89, 84, 67, 78, 5, 8, 31, 18, 49, 60, 43, 38, 189, 176, 167, 170, 137, 132, 147, 158, 213, 216, 207, 194, 225, 236, 251, 246, 214, 219, 204, 193, 226, 239, 248, 245, 190, 179, 164, 169, 138, 135, 144, 157, 6, 11, 28, 17, 50, 63, 40, 37, 110, 99, 116, 121, 90, 87, 64, 77, 218, 215, 192, 205, 238, 227, 244, 249, 178, 191, 168, 165, 134, 139, 156, 145, 10, 7, 16, 29, 62, 51, 36, 41, 98, 111, 120, 117, 86, 91, 76, 65, 97, 108, 123, 118, 85, 88, 79, 66, 9, 4, 19, 30, 61, 48, 39, 42, 177, 188, 171, 166, 133, 136, 159, 146, 217, 212, 195, 206, 237, 224, 247, 250, 183, 186, 173, 160, 131, 142, 153, 148, 223, 210, 197, 200, 235, 230, 241, 252, 103, 106, 125, 112, 83, 94, 73, 68, 15, 2, 21, 24, 59, 54, 33, 44, 12, 1, 22, 27, 56, 53, 34, 47, 100, 105, 126, 115, 80, 93, 74, 71, 220, 209, 198, 203, 232, 229, 242, 255, 180, 185, 174, 163, 128, 141, 154, 151];

        internal static const _Sbox:Array=[99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];

        internal var state:flash.utils.ByteArray;

        internal var tmp:flash.utils.ByteArray;

        internal var Nr:uint;

        internal var keyLength:uint;

        internal var key:flash.utils.ByteArray;

        internal static var XtimeE:flash.utils.ByteArray;

        internal static var i:uint;

        internal static var Xtime2Sbox:flash.utils.ByteArray;

        internal static var _Rcon:Array;

        internal static var Sbox:flash.utils.ByteArray;

        internal static var Rcon:flash.utils.ByteArray;

        internal static var InvSbox:flash.utils.ByteArray;

        internal static var Xtime2:flash.utils.ByteArray;

        internal static var Xtime9:flash.utils.ByteArray;

        internal static var XtimeB:flash.utils.ByteArray;

        internal static var XtimeD:flash.utils.ByteArray;

        internal static var Xtime3Sbox:flash.utils.ByteArray;
    }
}


//          class BlowFishKey
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class BlowFishKey extends Object implements com.hurlant.crypto.symmetric.ISymmetricKey
    {
        public function BlowFishKey(arg1:flash.utils.ByteArray)
        {
            super();
            this.key = arg1;
            setKey(arg1);
            return;
        }

        internal function F(arg1:uint):uint
        {
            return (S0[arg1 >>> 24] + S1[arg1 >>> 16 & 255] ^ S2[arg1 >>> 8 & 255]) + S3[arg1 & 255];
        }

        internal function BytesTo32bits(arg1:flash.utils.ByteArray, arg2:uint):uint
        {
            return (arg1[arg2] & 255) << 24 | (arg1[arg2 + 1] & 255) << 16 | (arg1[arg2 + 2] & 255) << 8 | arg1[arg2 + 3] & 255;
        }

        internal function decryptBlock(arg1:flash.utils.ByteArray, arg2:uint, arg3:flash.utils.ByteArray, arg4:uint):void
        {
            var loc1:*=BytesTo32bits(arg1, arg2);
            var loc2:*=BytesTo32bits(arg1, arg2 + 4);
            loc1 = loc1 ^ P[ROUNDS + 1];
            var loc3:*=ROUNDS;
            while (loc3 > 0) 
            {
                loc2 = loc2 ^ F(loc1) ^ P[loc3];
                loc1 = loc1 ^ F(loc2) ^ P[(loc3 - 1)];
                loc3 = loc3 - 2;
            }
            loc2 = loc2 ^ P[0];
            Bits32ToBytes(loc2, arg3, arg4);
            Bits32ToBytes(loc1, arg3, arg4 + 4);
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            decryptBlock(arg1, arg2, arg1, arg2);
            return;
        }

        public function getBlockSize():uint
        {
            return BLOCK_SIZE;
        }

        internal function setKey(arg1:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc5:*=0;
            S0 = KS0.concat();
            S1 = KS1.concat();
            S2 = KS2.concat();
            S3 = KS3.concat();
            P = KP.concat();
            var loc1:*=arg1.length;
            var loc2:*=0;
            var loc3:*=0;
            while (loc3 < P_SZ) 
            {
                loc4 = 0;
                loc5 = 0;
                while (loc5 < 4) 
                {
                    loc4 = loc4 << 8 | arg1[loc2++] & 255;
                    if (loc2 >= loc1) 
                    {
                        loc2 = 0;
                    }
                    ++loc5;
                }
                P[loc3] = P[loc3] ^ loc4;
                ++loc3;
            }
            processTable(0, 0, P);
            processTable(P[P_SZ - 2], P[(P_SZ - 1)], S0);
            processTable(S0[SBOX_SK - 2], S0[(SBOX_SK - 1)], S1);
            processTable(S1[SBOX_SK - 2], S1[(SBOX_SK - 1)], S2);
            processTable(S2[SBOX_SK - 2], S2[(SBOX_SK - 1)], S3);
            return;
        }

        internal function processTable(arg1:uint, arg2:uint, arg3:Array):void
        {
            var loc3:*=0;
            var loc1:*=arg3.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                arg1 = arg1 ^ P[0];
                loc3 = 1;
                while (loc3 < ROUNDS) 
                {
                    arg2 = arg2 ^ F(arg1) ^ P[loc3];
                    arg1 = arg1 ^ F(arg2) ^ P[loc3 + 1];
                    loc3 = loc3 + 2;
                }
                arg2 = arg2 ^ P[ROUNDS + 1];
                arg3[loc2] = arg2;
                arg3[loc2 + 1] = arg1;
                arg2 = arg1;
                arg1 = arg3[loc2];
                loc2 = loc2 + 2;
            }
            return;
        }

        public function encrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            encryptBlock(arg1, arg2, arg1, arg2);
            return;
        }

        public function dispose():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < S0.length) 
            {
                S0[loc1] = 0;
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < S1.length) 
            {
                S1[loc1] = 0;
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < S2.length) 
            {
                S2[loc1] = 0;
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < S3.length) 
            {
                S3[loc1] = 0;
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < P.length) 
            {
                P[loc1] = 0;
                ++loc1;
            }
            S0 = null;
            S1 = null;
            S2 = null;
            S3 = null;
            P = null;
            loc1 = 0;
            while (loc1 < key.length) 
            {
                key[loc1] = 0;
                ++loc1;
            }
            key.length = 0;
            key = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal function encryptBlock(arg1:flash.utils.ByteArray, arg2:uint, arg3:flash.utils.ByteArray, arg4:uint):void
        {
            var loc1:*=BytesTo32bits(arg1, arg2);
            var loc2:*=BytesTo32bits(arg1, arg2 + 4);
            loc1 = loc1 ^ P[0];
            var loc3:*=1;
            while (loc3 < ROUNDS) 
            {
                loc2 = loc2 ^ F(loc1) ^ P[loc3];
                loc1 = loc1 ^ F(loc2) ^ P[loc3 + 1];
                loc3 = loc3 + 2;
            }
            loc2 = loc2 ^ P[ROUNDS + 1];
            Bits32ToBytes(loc2, arg3, arg4);
            Bits32ToBytes(loc1, arg3, arg4 + 4);
            return;
        }

        internal function Bits32ToBytes(arg1:uint, arg2:flash.utils.ByteArray, arg3:uint):void
        {
            arg2[arg3 + 3] = arg1;
            arg2[arg3 + 2] = arg1 >> 8;
            arg2[arg3 + 1] = arg1 >> 16;
            arg2[arg3] = arg1 >> 24;
            return;
        }

        public function toString():String
        {
            return "blowfish";
        }

        internal static const KP:Array=[608135816, 2242054355, 320440878, 57701188, 2752067618, 698298832, 137296536, 3964562569, 1160258022, 953160567, 3193202383, 887688300, 3232508343, 3380367581, 1065670069, 3041331479, 2450970073, 2306472731];

        internal static const KS0:Array=[3509652390, 2564797868, 805139163, 3491422135, 3101798381, 1780907670, 3128725573, 4046225305, 614570311, 3012652279, 134345442, 2240740374, 1667834072, 1901547113, 2757295779, 4103290238, 227898511, 1921955416, 1904987480, 2182433518, 2069144605, 3260701109, 2620446009, 720527379, 3318853667, 677414384, 3393288472, 3101374703, 2390351024, 1614419982, 1822297739, 2954791486, 3608508353, 3174124327, 2024746970, 1432378464, 3864339955, 2857741204, 1464375394, 1676153920, 1439316330, 715854006, 3033291828, 289532110, 2706671279, 2087905683, 3018724369, 1668267050, 732546397, 1947742710, 3462151702, 2609353502, 2950085171, 1814351708, 2050118529, 680887927, 999245976, 1800124847, 3300911131, 1713906067, 1641548236, 4213287313, 1216130144, 1575780402, 4018429277, 3917837745, 3693486850, 3949271944, 596196993, 3549867205, 258830323, 2213823033, 772490370, 2760122372, 1774776394, 2652871518, 566650946, 4142492826, 1728879713, 2882767088, 1783734482, 3629395816, 2517608232, 2874225571, 1861159788, 326777828, 3124490320, 2130389656, 2716951837, 967770486, 1724537150, 2185432712, 2364442137, 1164943284, 2105845187, 998989502, 3765401048, 2244026483, 1075463327, 1455516326, 1322494562, 910128902, 469688178, 1117454909, 936433444, 3490320968, 3675253459, 1240580251, 122909385, 2157517691, 634681816, 4142456567, 3825094682, 3061402683, 2540495037, 79693498, 3249098678, 1084186820, 1583128258, 426386531, 1761308591, 1047286709, 322548459, 995290223, 1845252383, 2603652396, 3431023940, 2942221577, 3202600964, 3727903485, 1712269319, 422464435, 3234572375, 1170764815, 3523960633, 3117677531, 1434042557, 442511882, 3600875718, 1076654713, 1738483198, 4213154764, 2393238008, 3677496056, 1014306527, 4251020053, 793779912, 2902807211, 842905082, 4246964064, 1395751752, 1040244610, 2656851899, 3396308128, 445077038, 3742853595, 3577915638, 679411651, 2892444358, 2354009459, 1767581616, 3150600392, 3791627101, 3102740896, 284835224, 4246832056, 1258075500, 768725851, 2589189241, 3069724005, 3532540348, 1274779536, 3789419226, 2764799539, 1660621633, 3471099624, 4011903706, 913787905, 3497959166, 737222580, 2514213453, 2928710040, 3937242737, 1804850592, 3499020752, 2949064160, 2386320175, 2390070455, 2415321851, 4061277028, 2290661394, 2416832540, 1336762016, 1754252060, 3520065937, 3014181293, 791618072, 3188594551, 3933548030, 2332172193, 3852520463, 3043980520, 413987798, 3465142937, 3030929376, 4245938359, 2093235073, 3534596313, 375366246, 2157278981, 2479649556, 555357303, 3870105701, 2008414854, 3344188149, 4221384143, 3956125452, 2067696032, 3594591187, 2921233993, 2428461, 544322398, 577241275, 1471733935, 610547355, 4027169054, 1432588573, 1507829418, 2025931657, 3646575487, 545086370, 48609733, 2200306550, 1653985193, 298326376, 1316178497, 3007786442, 2064951626, 458293330, 2589141269, 3591329599, 3164325604, 727753846, 2179363840, 146436021, 1461446943, 4069977195, 705550613, 3059967265, 3887724982, 4281599278, 3313849956, 1404054877, 2845806497, 146425753, 1854211946];

        internal static const KS1:Array=[1266315497, 3048417604, 3681880366, 3289982499, 2909710000, 1235738493, 2632868024, 2414719590, 3970600049, 1771706367, 1449415276, 3266420449, 422970021, 1963543593, 2690192192, 3826793022, 1062508698, 1531092325, 1804592342, 2583117782, 2714934279, 4024971509, 1294809318, 4028980673, 1289560198, 2221992742, 1669523910, 35572830, 157838143, 1052438473, 1016535060, 1802137761, 1753167236, 1386275462, 3080475397, 2857371447, 1040679964, 2145300060, 2390574316, 1461121720, 2956646967, 4031777805, 4028374788, 33600511, 2920084762, 1018524850, 629373528, 3691585981, 3515945977, 2091462646, 2486323059, 586499841, 988145025, 935516892, 3367335476, 2599673255, 2839830854, 265290510, 3972581182, 2759138881, 3795373465, 1005194799, 847297441, 406762289, 1314163512, 1332590856, 1866599683, 4127851711, 750260880, 613907577, 1450815602, 3165620655, 3734664991, 3650291728, 3012275730, 3704569646, 1427272223, 778793252, 1343938022, 2676280711, 2052605720, 1946737175, 3164576444, 3914038668, 3967478842, 3682934266, 1661551462, 3294938066, 4011595847, 840292616, 3712170807, 616741398, 312560963, 711312465, 1351876610, 322626781, 1910503582, 271666773, 2175563734, 1594956187, 70604529, 3617834859, 1007753275, 1495573769, 4069517037, 2549218298, 2663038764, 504708206, 2263041392, 3941167025, 2249088522, 1514023603, 1998579484, 1312622330, 694541497, 2582060303, 2151582166, 1382467621, 776784248, 2618340202, 3323268794, 2497899128, 2784771155, 503983604, 4076293799, 907881277, 423175695, 432175456, 1378068232, 4145222326, 3954048622, 3938656102, 3820766613, 2793130115, 2977904593, 26017576, 3274890735, 3194772133, 1700274565, 1756076034, 4006520079, 3677328699, 720338349, 1533947780, 354530856, 688349552, 3973924725, 1637815568, 332179504, 3949051286, 53804574, 2852348879, 3044236432, 1282449977, 3583942155, 3416972820, 4006381244, 1617046695, 2628476075, 3002303598, 1686838959, 431878346, 2686675385, 1700445008, 1080580658, 1009431731, 832498133, 3223435511, 2605976345, 2271191193, 2516031870, 1648197032, 4164389018, 2548247927, 300782431, 375919233, 238389289, 3353747414, 2531188641, 2019080857, 1475708069, 455242339, 2609103871, 448939670, 3451063019, 1395535956, 2413381860, 1841049896, 1491858159, 885456874, 4264095073, 4001119347, 1565136089, 3898914787, 1108368660, 540939232, 1173283510, 2745871338, 3681308437, 4207628240, 3343053890, 4016749493, 1699691293, 1103962373, 3625875870, 2256883143, 3830138730, 1031889488, 3479347698, 1535977030, 4236805024, 3251091107, 2132092099, 1774941330, 1199868427, 1452454533, 157007616, 2904115357, 342012276, 595725824, 1480756522, 206960106, 497939518, 591360097, 863170706, 2375253569, 3596610801, 1814182875, 2094937945, 3421402208, 1082520231, 3463918190, 2785509508, 435703966, 3908032597, 1641649973, 2842273706, 3305899714, 1510255612, 2148256476, 2655287854, 3276092548, 4258621189, 236887753, 3681803219, 274041037, 1734335097, 3815195456, 3317970021, 1899903192, 1026095262, 4050517792, 356393447, 2410691914, 3873677099, 3682840055];

        internal static const KS3:Array=[976866871, 3556439503, 2881648439, 1522871579, 1555064734, 1336096578, 3548522304, 2579274686, 3574697629, 3205460757, 3593280638, 3338716283, 3079412587, 564236357, 2993598910, 1781952180, 1464380207, 3163844217, 3332601554, 1699332808, 1393555694, 1183702653, 3581086237, 1288719814, 691649499, 2847557200, 2895455976, 3193889540, 2717570544, 1781354906, 1676643554, 2592534050, 3230253752, 1126444790, 2770207658, 2633158820, 2210423226, 2615765581, 2414155088, 3127139286, 673620729, 2805611233, 1269405062, 4015350505, 3341807571, 4149409754, 1057255273, 2012875353, 2162469141, 2276492801, 2601117357, 993977747, 3918593370, 2654263191, 753973209, 36408145, 2530585658, 25011837, 3520020182, 2088578344, 530523599, 2918365339, 1524020338, 1518925132, 3760827505, 3759777254, 1202760957, 3985898139, 3906192525, 674977740, 4174734889, 2031300136, 2019492241, 3983892565, 4153806404, 3822280332, 352677332, 2297720250, 60907813, 90501309, 3286998549, 1016092578, 2535922412, 2839152426, 457141659, 509813237, 4120667899, 652014361, 1966332200, 2975202805, 55981186, 2327461051, 676427537, 3255491064, 2882294119, 3433927263, 1307055953, 942726286, 933058658, 2468411793, 3933900994, 4215176142, 1361170020, 2001714738, 2830558078, 3274259782, 1222529897, 1679025792, 2729314320, 3714953764, 1770335741, 151462246, 3013232138, 1682292957, 1483529935, 471910574, 1539241949, 458788160, 3436315007, 1807016891, 3718408830, 978976581, 1043663428, 3165965781, 1927990952, 4200891579, 2372276910, 3208408903, 3533431907, 1412390302, 2931980059, 4132332400, 1947078029, 3881505623, 4168226417, 2941484381, 1077988104, 1320477388, 886195818, 18198404, 3786409000, 2509781533, 112762804, 3463356488, 1866414978, 891333506, 18488651, 661792760, 1628790961, 3885187036, 3141171499, 876946877, 2693282273, 1372485963, 791857591, 2686433993, 3759982718, 3167212022, 3472953795, 2716379847, 445679433, 3561995674, 3504004811, 3574258232, 54117162, 3331405415, 2381918588, 3769707343, 4154350007, 1140177722, 4074052095, 668550556, 3214352940, 367459370, 261225585, 2610173221, 4209349473, 3468074219, 3265815641, 314222801, 3066103646, 3808782860, 282218597, 3406013506, 3773591054, 379116347, 1285071038, 846784868, 2669647154, 3771962079, 3550491691, 2305946142, 453669953, 1268987020, 3317592352, 3279303384, 3744833421, 2610507566, 3859509063, 266596637, 3847019092, 517658769, 3462560207, 3443424879, 370717030, 4247526661, 2224018117, 4143653529, 4112773975, 2788324899, 2477274417, 1456262402, 2901442914, 1517677493, 1846949527, 2295493580, 3734397586, 2176403920, 1280348187, 1908823572, 3871786941, 846861322, 1172426758, 3287448474, 3383383037, 1655181056, 3139813346, 901632758, 1897031941, 2986607138, 3066810236, 3447102507, 1393639104, 373351379, 950779232, 625454576, 3124240540, 4148612726, 2007998917, 544563296, 2244738638, 2330496472, 2058025392, 1291430526, 424198748, 50039436, 29584100, 3605783033, 2429876329, 2791104160, 1057563949, 3255363231, 3075367218, 3463963227, 1469046755, 985887462];

        internal static const ROUNDS:uint=16;

        internal static const KS2:Array=[3913112168, 2491498743, 4132185628, 2489919796, 1091903735, 1979897079, 3170134830, 3567386728, 3557303409, 857797738, 1136121015, 1342202287, 507115054, 2535736646, 337727348, 3213592640, 1301675037, 2528481711, 1895095763, 1721773893, 3216771564, 62756741, 2142006736, 835421444, 2531993523, 1442658625, 3659876326, 2882144922, 676362277, 1392781812, 170690266, 3921047035, 1759253602, 3611846912, 1745797284, 664899054, 1329594018, 3901205900, 3045908486, 2062866102, 2865634940, 3543621612, 3464012697, 1080764994, 553557557, 3656615353, 3996768171, 991055499, 499776247, 1265440854, 648242737, 3940784050, 980351604, 3713745714, 1749149687, 3396870395, 4211799374, 3640570775, 1161844396, 3125318951, 1431517754, 545492359, 4268468663, 3499529547, 1437099964, 2702547544, 3433638243, 2581715763, 2787789398, 1060185593, 1593081372, 2418618748, 4260947970, 69676912, 2159744348, 86519011, 2512459080, 3838209314, 1220612927, 3339683548, 133810670, 1090789135, 1078426020, 1569222167, 845107691, 3583754449, 4072456591, 1091646820, 628848692, 1613405280, 3757631651, 526609435, 236106946, 48312990, 2942717905, 3402727701, 1797494240, 859738849, 992217954, 4005476642, 2243076622, 3870952857, 3732016268, 765654824, 3490871365, 2511836413, 1685915746, 3888969200, 1414112111, 2273134842, 3281911079, 4080962846, 172450625, 2569994100, 980381355, 4109958455, 2819808352, 2716589560, 2568741196, 3681446669, 3329971472, 1835478071, 660984891, 3704678404, 4045999559, 3422617507, 3040415634, 1762651403, 1719377915, 3470491036, 2693910283, 3642056355, 3138596744, 1364962596, 2073328063, 1983633131, 926494387, 3423689081, 2150032023, 4096667949, 1749200295, 3328846651, 309677260, 2016342300, 1779581495, 3079819751, 111262694, 1274766160, 443224088, 298511866, 1025883608, 3806446537, 1145181785, 168956806, 3641502830, 3584813610, 1689216846, 3666258015, 3200248200, 1692713982, 2646376535, 4042768518, 1618508792, 1610833997, 3523052358, 4130873264, 2001055236, 3610705100, 2202168115, 4028541809, 2961195399, 1006657119, 2006996926, 3186142756, 1430667929, 3210227297, 1314452623, 4074634658, 4101304120, 2273951170, 1399257539, 3367210612, 3027628629, 1190975929, 2062231137, 2333990788, 2221543033, 2438960610, 1181637006, 548689776, 2362791313, 3372408396, 3104550113, 3145860560, 296247880, 1970579870, 3078560182, 3769228297, 1714227617, 3291629107, 3898220290, 166772364, 1251581989, 493813264, 448347421, 195405023, 2709975567, 677966185, 3703036547, 1463355134, 2715995803, 1338867538, 1343315457, 2802222074, 2684532164, 233230375, 2599980071, 2000651841, 3277868038, 1638401717, 4028070440, 3237316320, 6314154, 819756386, 300326615, 590932579, 1405279636, 3267499572, 3150704214, 2428286686, 3959192993, 3461946742, 1862657033, 1266418056, 963775037, 2089974820, 2263052895, 1917689273, 448879540, 3550394620, 3981727096, 150775221, 3627908307, 1303187396, 508620638, 2975983352, 2726630617, 1817252668, 1876281319, 1457606340, 908771278, 3720792119, 3617206836, 2455994898, 1729034894, 1080033504];

        internal static const BLOCK_SIZE:uint=8;

        internal static const P_SZ:uint=ROUNDS + 2;

        internal static const SBOX_SK:uint=256;

        internal var S3:Array;

        internal var P:Array;

        internal var S1:Array;

        internal var key:flash.utils.ByteArray=null;

        internal var S0:Array;

        internal var S2:Array;
    }
}


//          class CBCMode
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class CBCMode extends com.hurlant.crypto.symmetric.IVMode implements com.hurlant.crypto.symmetric.IMode
    {
        public function CBCMode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super(arg1, arg2);
            return;
        }

        public function toString():String
        {
            return key.toString() + "-cbc";
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            var loc3:*=0;
            padding.pad(arg1);
            var loc1:*=getIV4e();
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc3 = 0;
                while (loc3 < blockSize) 
                {
                    arg1[loc2 + loc3] = arg1[loc2 + loc3] ^ loc1[loc3];
                    ++loc3;
                }
                key.encrypt(arg1, loc2);
                loc1.position = 0;
                loc1.writeBytes(arg1, loc2, blockSize);
                loc2 = loc2 + blockSize;
            }
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc1:*=getIV4d();
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc2.position = 0;
                loc2.writeBytes(arg1, loc3, blockSize);
                key.decrypt(arg1, loc3);
                loc4 = 0;
                while (loc4 < blockSize) 
                {
                    arg1[loc3 + loc4] = arg1[loc3 + loc4] ^ loc1[loc4];
                    ++loc4;
                }
                loc1.position = 0;
                loc1.writeBytes(loc2, 0, blockSize);
                loc3 = loc3 + blockSize;
            }
            padding.unpad(arg1);
            return;
        }
    }
}


//          class CFB8Mode
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class CFB8Mode extends com.hurlant.crypto.symmetric.IVMode implements com.hurlant.crypto.symmetric.IMode
    {
        public function CFB8Mode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super(arg1, null);
            return;
        }

        public function toString():String
        {
            return key.toString() + "-cfb8";
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc1:*=getIV4e();
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc2.position = 0;
                loc2.writeBytes(loc1);
                key.encrypt(loc1);
                arg1[loc3] = arg1[loc3] ^ loc1[0];
                loc4 = 0;
                while (loc4 < (blockSize - 1)) 
                {
                    loc1[loc4] = loc2[loc4 + 1];
                    ++loc4;
                }
                loc1[(blockSize - 1)] = arg1[loc3];
                ++loc3;
            }
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=getIV4d();
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc4 = arg1[loc3];
                loc2.position = 0;
                loc2.writeBytes(loc1);
                key.encrypt(loc1);
                arg1[loc3] = arg1[loc3] ^ loc1[0];
                loc5 = 0;
                while (loc5 < (blockSize - 1)) 
                {
                    loc1[loc5] = loc2[loc5 + 1];
                    ++loc5;
                }
                loc1[(blockSize - 1)] = loc4;
                ++loc3;
            }
            return;
        }
    }
}


//          class CFBMode
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class CFBMode extends com.hurlant.crypto.symmetric.IVMode implements com.hurlant.crypto.symmetric.IMode
    {
        public function CFBMode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super(arg1, null);
            return;
        }

        public function toString():String
        {
            return key.toString() + "-cfb";
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=arg1.length;
            var loc2:*=getIV4e();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                key.encrypt(loc2);
                loc4 = loc3 + blockSize < loc1 ? blockSize : loc1 - loc3;
                loc5 = 0;
                while (loc5 < loc4) 
                {
                    arg1[loc3 + loc5] = arg1[loc3 + loc5] ^ loc2[loc5];
                    ++loc5;
                }
                loc2.position = 0;
                loc2.writeBytes(arg1, loc3, loc4);
                loc3 = loc3 + blockSize;
            }
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            var loc5:*=0;
            var loc6:*=0;
            var loc1:*=arg1.length;
            var loc2:*=getIV4d();
            var loc3:*=new flash.utils.ByteArray();
            var loc4:*=0;
            while (loc4 < arg1.length) 
            {
                key.encrypt(loc2);
                loc5 = loc4 + blockSize < loc1 ? blockSize : loc1 - loc4;
                loc3.position = 0;
                loc3.writeBytes(arg1, loc4, loc5);
                loc6 = 0;
                while (loc6 < loc5) 
                {
                    arg1[loc4 + loc6] = arg1[loc4 + loc6] ^ loc2[loc6];
                    ++loc6;
                }
                loc2.position = 0;
                loc2.writeBytes(loc3);
                loc4 = loc4 + blockSize;
            }
            return;
        }
    }
}


//          class CTRMode
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class CTRMode extends com.hurlant.crypto.symmetric.IVMode implements com.hurlant.crypto.symmetric.IMode
    {
        public function CTRMode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super(arg1, arg2);
            return;
        }

        internal function core(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=new flash.utils.ByteArray();
            loc1.writeBytes(arg2);
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                loc2.position = 0;
                loc2.writeBytes(loc1);
                key.encrypt(loc2);
                loc4 = 0;
                while (loc4 < blockSize) 
                {
                    arg1[loc3 + loc4] = arg1[loc3 + loc4] ^ loc2[loc4];
                    ++loc4;
                }
                loc4 = (blockSize - 1);
                while (loc4 >= 0) 
                {
                    var loc5:*;
                    var loc6:*;
                    var loc7:*=((loc5 = loc1)[loc6 = loc4] + 1);
                    loc5[loc6] = loc7;
                    if (loc1[loc4] != 0) 
                    {
                        break;
                    }
                    --loc4;
                }
                loc3 = loc3 + blockSize;
            }
            return;
        }

        public function toString():String
        {
            return key.toString() + "-ctr";
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            padding.pad(arg1);
            var loc1:*=getIV4e();
            core(arg1, loc1);
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=getIV4d();
            core(arg1, loc1);
            padding.unpad(arg1);
            return;
        }
    }
}


//          class DESKey
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class DESKey extends Object implements com.hurlant.crypto.symmetric.ISymmetricKey
    {
        public function DESKey(arg1:flash.utils.ByteArray)
        {
            super();
            this.key = arg1;
            this.encKey = generateWorkingKey(true, arg1, 0);
            this.decKey = generateWorkingKey(false, arg1, 0);
            return;
        }

        protected function generateWorkingKey(arg1:Boolean, arg2:flash.utils.ByteArray, arg3:uint):Array
        {
            var loc4:*=0;
            var loc7:*=0;
            var loc8:*=0;
            var loc9:*=0;
            var loc10:*=0;
            var loc1:*=[];
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=new flash.utils.ByteArray();
            var loc5:*=0;
            while (loc5 < 56) 
            {
                loc4 = pc1[loc5];
                loc2[loc5] = !((arg2[arg3 + (loc4 >>> 3)] & bytebit[loc4 & 7]) == 0);
                ++loc5;
            }
            var loc6:*=0;
            while (loc6 < 16) 
            {
                if (arg1) 
                {
                    loc7 = loc6 << 1;
                }
                else 
                {
                    loc7 = 15 - loc6 << 1;
                }
                loc8 = loc7 + 1;
                var loc11:*;
                loc1[loc8] = loc11 = 0;
                loc1[loc7] = loc11;
                loc5 = 0;
                while (loc5 < 28) 
                {
                    if ((loc4 = loc5 + totrot[loc6]) < 28) 
                    {
                        loc3[loc5] = loc2[loc4];
                    }
                    else 
                    {
                        loc3[loc5] = loc2[loc4 - 28];
                    }
                    ++loc5;
                }
                loc5 = 28;
                while (loc5 < 56) 
                {
                    if ((loc4 = loc5 + totrot[loc6]) < 56) 
                    {
                        loc3[loc5] = loc2[loc4];
                    }
                    else 
                    {
                        loc3[loc5] = loc2[loc4 - 28];
                    }
                    ++loc5;
                }
                loc5 = 0;
                while (loc5 < 24) 
                {
                    if (loc3[pc2[loc5]]) 
                    {
                        loc1[loc7] = loc1[loc7] | bigbyte[loc5];
                    }
                    if (loc3[pc2[loc5 + 24]]) 
                    {
                        loc1[loc8] = loc1[loc8] | bigbyte[loc5];
                    }
                    ++loc5;
                }
                ++loc6;
            }
            loc6 = 0;
            while (loc6 != 32) 
            {
                loc9 = loc1[loc6];
                loc10 = loc1[loc6 + 1];
                loc1[loc6] = (loc9 & 16515072) << 6 | (loc9 & 4032) << 10 | (loc10 & 16515072) >>> 10 | (loc10 & 4032) >>> 6;
                loc1[loc6 + 1] = (loc9 & 258048) << 12 | (loc9 & 63) << 16 | (loc10 & 258048) >>> 4 | loc10 & 63;
                loc6 = loc6 + 2;
            }
            return loc1;
        }

        public function getBlockSize():uint
        {
            return 8;
        }

        public function encrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            desFunc(encKey, arg1, arg2, arg1, arg2);
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            desFunc(decKey, arg1, arg2, arg1, arg2);
            return;
        }

        protected function desFunc(arg1:Array, arg2:flash.utils.ByteArray, arg3:uint, arg4:flash.utils.ByteArray, arg5:uint):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=0;
            var loc5:*=0;
            loc3 = (loc3 = (loc3 = (loc3 = (arg2[arg3 + 0] & 255) << 24) | (arg2[arg3 + 1] & 255) << 16) | (arg2[arg3 + 2] & 255) << 8) | arg2[arg3 + 3] & 255;
            loc2 = (loc2 = (loc2 = (loc2 = (arg2[arg3 + 4] & 255) << 24) | (arg2[arg3 + 5] & 255) << 16) | (arg2[arg3 + 6] & 255) << 8) | arg2[arg3 + 7] & 255;
            loc1 = (loc3 >>> 4 ^ loc2) & 252645135;
            loc2 = loc2 ^ loc1;
            loc1 = ((loc3 = loc3 ^ loc1 << 4) >>> 16 ^ loc2) & 65535;
            loc2 = loc2 ^ loc1;
            loc3 = loc3 ^ loc1 << 16;
            loc1 = (loc2 >>> 2 ^ loc3) & 858993459;
            loc3 = loc3 ^ loc1;
            loc1 = ((loc2 = loc2 ^ loc1 << 2) >>> 8 ^ loc3) & 16711935;
            loc3 = loc3 ^ loc1;
            loc2 = ((loc2 = loc2 ^ loc1 << 8) << 1 | loc2 >>> 31 & 1) & 4294967295;
            loc1 = (loc3 ^ loc2) & 2863311530;
            loc3 = loc3 ^ loc1;
            loc2 = loc2 ^ loc1;
            loc3 = (loc3 << 1 | loc3 >>> 31 & 1) & 4294967295;
            var loc4:*=0;
            while (loc4 < 8) 
            {
                loc1 = (loc1 = loc2 << 28 | loc2 >>> 4) ^ arg1[loc4 * 4 + 0];
                loc5 = (loc5 = (loc5 = (loc5 = SP7[loc1 & 63]) | SP5[loc1 >>> 8 & 63]) | SP3[loc1 >>> 16 & 63]) | SP1[loc1 >>> 24 & 63];
                loc1 = loc2 ^ arg1[loc4 * 4 + 1];
                loc5 = (loc5 = (loc5 = (loc5 = loc5 | SP8[loc1 & 63]) | SP6[loc1 >>> 8 & 63]) | SP4[loc1 >>> 16 & 63]) | SP2[loc1 >>> 24 & 63];
                loc1 = (loc1 = (loc3 = loc3 ^ loc5) << 28 | loc3 >>> 4) ^ arg1[loc4 * 4 + 2];
                loc5 = (loc5 = (loc5 = (loc5 = SP7[loc1 & 63]) | SP5[loc1 >>> 8 & 63]) | SP3[loc1 >>> 16 & 63]) | SP1[loc1 >>> 24 & 63];
                loc1 = loc3 ^ arg1[loc4 * 4 + 3];
                loc5 = (loc5 = (loc5 = (loc5 = loc5 | SP8[loc1 & 63]) | SP6[loc1 >>> 8 & 63]) | SP4[loc1 >>> 16 & 63]) | SP2[loc1 >>> 24 & 63];
                loc2 = loc2 ^ loc5;
                ++loc4;
            }
            loc2 = loc2 << 31 | loc2 >>> 1;
            loc1 = (loc3 ^ loc2) & 2863311530;
            loc3 = loc3 ^ loc1;
            loc2 = loc2 ^ loc1;
            loc1 = ((loc3 = loc3 << 31 | loc3 >>> 1) >>> 8 ^ loc2) & 16711935;
            loc2 = loc2 ^ loc1;
            loc1 = ((loc3 = loc3 ^ loc1 << 8) >>> 2 ^ loc2) & 858993459;
            loc2 = loc2 ^ loc1;
            loc3 = loc3 ^ loc1 << 2;
            loc1 = (loc2 >>> 16 ^ loc3) & 65535;
            loc3 = loc3 ^ loc1;
            loc1 = ((loc2 = loc2 ^ loc1 << 16) >>> 4 ^ loc3) & 252645135;
            loc3 = loc3 ^ loc1;
            loc2 = loc2 ^ loc1 << 4;
            arg4[arg5 + 0] = loc2 >>> 24 & 255;
            arg4[arg5 + 1] = loc2 >>> 16 & 255;
            arg4[arg5 + 2] = loc2 >>> 8 & 255;
            arg4[arg5 + 3] = loc2 & 255;
            arg4[arg5 + 4] = loc3 >>> 24 & 255;
            arg4[arg5 + 5] = loc3 >>> 16 & 255;
            arg4[arg5 + 6] = loc3 >>> 8 & 255;
            arg4[arg5 + 7] = loc3 & 255;
            return;
        }

        public function toString():String
        {
            return "des";
        }

        public function dispose():void
        {
            var loc1:*=0;
            loc1 = 0;
            while (loc1 < encKey.length) 
            {
                encKey[loc1] = 0;
                ++loc1;
            }
            loc1 = 0;
            while (loc1 < decKey.length) 
            {
                decKey[loc1] = 0;
                ++loc1;
            }
            encKey = null;
            decKey = null;
            loc1 = 0;
            while (loc1 < key.length) 
            {
                key[loc1] = 0;
                ++loc1;
            }
            key.length = 0;
            key = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal static const SP8:Array=[268439616, 4096, 262144, 268701760, 268435456, 268439616, 64, 268435456, 262208, 268697600, 268701760, 266240, 268701696, 266304, 4096, 64, 268697600, 268435520, 268439552, 4160, 266240, 262208, 268697664, 268701696, 4160, 0, 0, 268697664, 268435520, 268439552, 266304, 262144, 266304, 262144, 268701696, 4096, 64, 268697664, 4096, 266304, 268439552, 64, 268435520, 268697600, 268697664, 268435456, 262144, 268439616, 0, 268701760, 262208, 268435520, 268697600, 268439552, 268439616, 0, 268701760, 266240, 266240, 4160, 4160, 262208, 268435456, 268701696];

        internal static const bytebit:Array=[128, 64, 32, 16, 8, 4, 2, 1];

        internal static const bigbyte:Array=[8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1];

        internal static const pc1:Array=[56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3];

        internal static const pc2:Array=[13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31];

        internal static const Df_Key:Array=[1, 35, 69, 103, 137, 171, 205, 239, 254, 220, 186, 152, 118, 84, 50, 16, 137, 171, 205, 239, 1, 35, 69, 103];

        internal static const totrot:Array=[1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

        internal static const SP1:Array=[16843776, 0, 65536, 16843780, 16842756, 66564, 4, 65536, 1024, 16843776, 16843780, 1024, 16778244, 16842756, 16777216, 4, 1028, 16778240, 16778240, 66560, 66560, 16842752, 16842752, 16778244, 65540, 16777220, 16777220, 65540, 0, 1028, 66564, 16777216, 65536, 16843780, 4, 16842752, 16843776, 16777216, 16777216, 1024, 16842756, 65536, 66560, 16777220, 1024, 4, 16778244, 66564, 16843780, 65540, 16842752, 16778244, 16777220, 1028, 66564, 16843776, 1028, 16778240, 16778240, 0, 65540, 66560, 0, 16842756];

        internal static const SP2:Array=[2148565024, 2147516416, 32768, 1081376, 1048576, 32, 2148532256, 2147516448, 2147483680, 2148565024, 2148564992, 2147483648, 2147516416, 1048576, 32, 2148532256, 1081344, 1048608, 2147516448, 0, 2147483648, 32768, 1081376, 2148532224, 1048608, 2147483680, 0, 1081344, 32800, 2148564992, 2148532224, 32800, 0, 1081376, 2148532256, 1048576, 2147516448, 2148532224, 2148564992, 32768, 2148532224, 2147516416, 32, 2148565024, 1081376, 32, 32768, 2147483648, 32800, 2148564992, 1048576, 2147483680, 1048608, 2147516448, 2147483680, 1048608, 1081344, 0, 2147516416, 32800, 2147483648, 2148532256, 2148565024, 1081344];

        internal static const SP3:Array=[520, 134349312, 0, 134348808, 134218240, 0, 131592, 134218240, 131080, 134217736, 134217736, 131072, 134349320, 131080, 134348800, 520, 134217728, 8, 134349312, 512, 131584, 134348800, 134348808, 131592, 134218248, 131584, 131072, 134218248, 8, 134349320, 512, 134217728, 134349312, 134217728, 131080, 520, 131072, 134349312, 134218240, 0, 512, 131080, 134349320, 134218240, 134217736, 512, 0, 134348808, 134218248, 131072, 134217728, 134349320, 8, 131592, 131584, 134217736, 134348800, 134218248, 520, 134348800, 131592, 8, 134348808, 131584];

        internal static const SP4:Array=[8396801, 8321, 8321, 128, 8396928, 8388737, 8388609, 8193, 0, 8396800, 8396800, 8396929, 129, 0, 8388736, 8388609, 1, 8192, 8388608, 8396801, 128, 8388608, 8193, 8320, 8388737, 1, 8320, 8388736, 8192, 8396928, 8396929, 129, 8388736, 8388609, 8396800, 8396929, 129, 0, 0, 8396800, 8320, 8388736, 8388737, 1, 8396801, 8321, 8321, 128, 8396929, 129, 1, 8192, 8388609, 8193, 8396928, 8388737, 8193, 8320, 8388608, 8396801, 128, 8388608, 8192, 8396928];

        internal static const SP5:Array=[256, 34078976, 34078720, 1107296512, 524288, 256, 1073741824, 34078720, 1074266368, 524288, 33554688, 1074266368, 1107296512, 1107820544, 524544, 1073741824, 33554432, 1074266112, 1074266112, 0, 1073742080, 1107820800, 1107820800, 33554688, 1107820544, 1073742080, 0, 1107296256, 34078976, 33554432, 1107296256, 524544, 524288, 1107296512, 256, 33554432, 1073741824, 34078720, 1107296512, 1074266368, 33554688, 1073741824, 1107820544, 34078976, 1074266368, 256, 33554432, 1107820544, 1107820800, 524544, 1107296256, 1107820800, 34078720, 0, 1074266112, 1107296256, 524544, 33554688, 1073742080, 524288, 0, 1074266112, 34078976, 1073742080];

        internal static const SP6:Array=[536870928, 541065216, 16384, 541081616, 541065216, 16, 541081616, 4194304, 536887296, 4210704, 4194304, 536870928, 4194320, 536887296, 536870912, 16400, 0, 4194320, 536887312, 16384, 4210688, 536887312, 16, 541065232, 541065232, 0, 4210704, 541081600, 16400, 4210688, 541081600, 536870912, 536887296, 16, 541065232, 4210688, 541081616, 4194304, 16400, 536870928, 4194304, 536887296, 536870912, 16400, 536870928, 541081616, 4210688, 541065216, 4210704, 541081600, 0, 541065232, 16, 16384, 541065216, 4210704, 16384, 4194320, 536887312, 0, 541081600, 536870912, 4194320, 536887312];

        internal static const SP7:Array=[2097152, 69206018, 67110914, 0, 2048, 67110914, 2099202, 69208064, 69208066, 2097152, 0, 67108866, 2, 67108864, 69206018, 2050, 67110912, 2099202, 2097154, 67110912, 67108866, 69206016, 69208064, 2097154, 69206016, 2048, 2050, 69208066, 2099200, 2, 67108864, 2099200, 67108864, 2099200, 2097152, 67110914, 67110914, 69206018, 69206018, 2, 2097154, 67108864, 67110912, 2097152, 69208064, 2050, 2099202, 69208064, 2050, 67108866, 69208066, 69206016, 2099200, 0, 2, 69208066, 0, 2099202, 69206016, 2048, 67108866, 67110912, 2048, 2097154];

        protected var encKey:Array;

        protected var key:flash.utils.ByteArray;

        protected var decKey:Array;
    }
}


//          class ECBMode
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class ECBMode extends Object implements com.hurlant.crypto.symmetric.IMode, com.hurlant.crypto.symmetric.ICipher
    {
        public function ECBMode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super();
            this.key = arg1;
            if (arg2 != null) 
            {
                arg2.setBlockSize(arg1.getBlockSize());
            }
            else 
            {
                arg2 = new com.hurlant.crypto.symmetric.PKCS5(arg1.getBlockSize());
            }
            this.padding = arg2;
            return;
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            padding.pad(arg1);
            arg1.position = 0;
            var loc1:*=key.getBlockSize();
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=new flash.utils.ByteArray();
            var loc4:*=0;
            while (loc4 < arg1.length) 
            {
                loc2.length = 0;
                arg1.readBytes(loc2, 0, loc1);
                key.encrypt(loc2);
                loc3.writeBytes(loc2);
                loc4 = loc4 + loc1;
            }
            arg1.length = 0;
            arg1.writeBytes(loc3);
            return;
        }

        public function getBlockSize():uint
        {
            return key.getBlockSize();
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            arg1.position = 0;
            var loc1:*=key.getBlockSize();
            if (arg1.length % loc1 != 0) 
            {
                throw new Error("ECB mode cipher length must be a multiple of blocksize " + loc1);
            }
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=new flash.utils.ByteArray();
            var loc4:*=0;
            while (loc4 < arg1.length) 
            {
                loc2.length = 0;
                arg1.readBytes(loc2, 0, loc1);
                key.decrypt(loc2);
                loc3.writeBytes(loc2);
                loc4 = loc4 + loc1;
            }
            padding.unpad(loc3);
            arg1.length = 0;
            arg1.writeBytes(loc3);
            return;
        }

        public function toString():String
        {
            return key.toString() + "-ecb";
        }

        public function dispose():void
        {
            key.dispose();
            key = null;
            padding = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal var key:com.hurlant.crypto.symmetric.ISymmetricKey;

        internal var padding:com.hurlant.crypto.symmetric.IPad;
    }
}


//          class ICipher
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public interface ICipher
    {
        function encrypt(arg1:flash.utils.ByteArray):void;

        function getBlockSize():uint;

        function toString():String;

        function decrypt(arg1:flash.utils.ByteArray):void;

        function dispose():void;
    }
}


//          class IMode
package com.hurlant.crypto.symmetric 
{
    public interface IMode extends com.hurlant.crypto.symmetric.ICipher
    {
    }
}


//          class IPad
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public interface IPad
    {
        function unpad(arg1:flash.utils.ByteArray):void;

        function pad(arg1:flash.utils.ByteArray):void;

        function setBlockSize(arg1:uint):void;
    }
}


//          class IStreamCipher
package com.hurlant.crypto.symmetric 
{
    public interface IStreamCipher extends com.hurlant.crypto.symmetric.ICipher
    {
    }
}


//          class ISymmetricKey
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public interface ISymmetricKey
    {
        function encrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void;

        function getBlockSize():uint;

        function toString():String;

        function decrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void;

        function dispose():void;
    }
}


//          class IVMode
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.crypto.prng.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class IVMode extends Object
    {
        public function IVMode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super();
            this.key = arg1;
            blockSize = arg1.getBlockSize();
            if (arg2 != null) 
            {
                arg2.setBlockSize(blockSize);
            }
            else 
            {
                arg2 = new com.hurlant.crypto.symmetric.PKCS5(blockSize);
            }
            this.padding = arg2;
            prng = new com.hurlant.crypto.prng.Random();
            iv = null;
            lastIV = new flash.utils.ByteArray();
            return;
        }

        public function set IV(arg1:flash.utils.ByteArray):void
        {
            iv = arg1;
            lastIV.length = 0;
            lastIV.writeBytes(iv);
            return;
        }

        protected function getIV4d():flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            if (iv) 
            {
                loc1.writeBytes(iv);
            }
            else 
            {
                throw new Error("an IV must be set before calling decrypt()");
            }
            return loc1;
        }

        protected function getIV4e():flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            if (iv) 
            {
                loc1.writeBytes(iv);
            }
            else 
            {
                prng.nextBytes(loc1, blockSize);
            }
            lastIV.length = 0;
            lastIV.writeBytes(loc1);
            return loc1;
        }

        public function get IV():flash.utils.ByteArray
        {
            return lastIV;
        }

        public function dispose():void
        {
            var loc1:*=0;
            if (iv != null) 
            {
                loc1 = 0;
                while (loc1 < iv.length) 
                {
                    iv[loc1] = prng.nextByte();
                    ++loc1;
                }
                iv.length = 0;
                iv = null;
            }
            if (lastIV != null) 
            {
                loc1 = 0;
                while (loc1 < iv.length) 
                {
                    lastIV[loc1] = prng.nextByte();
                    ++loc1;
                }
                lastIV.length = 0;
                lastIV = null;
            }
            key.dispose();
            key = null;
            padding = null;
            prng.dispose();
            prng = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        public function getBlockSize():uint
        {
            return key.getBlockSize();
        }

        protected var lastIV:flash.utils.ByteArray;

        protected var iv:flash.utils.ByteArray;

        protected var blockSize:uint;

        protected var padding:com.hurlant.crypto.symmetric.IPad;

        protected var prng:com.hurlant.crypto.prng.Random;

        protected var key:com.hurlant.crypto.symmetric.ISymmetricKey;
    }
}


//          class NullPad
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class NullPad extends Object implements com.hurlant.crypto.symmetric.IPad
    {
        public function NullPad()
        {
            super();
            return;
        }

        public function unpad(arg1:flash.utils.ByteArray):void
        {
            return;
        }

        public function pad(arg1:flash.utils.ByteArray):void
        {
            return;
        }

        public function setBlockSize(arg1:uint):void
        {
            return;
        }
    }
}


//          class OFBMode
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class OFBMode extends com.hurlant.crypto.symmetric.IVMode implements com.hurlant.crypto.symmetric.IMode
    {
        public function OFBMode(arg1:com.hurlant.crypto.symmetric.ISymmetricKey, arg2:com.hurlant.crypto.symmetric.IPad=null)
        {
            super(arg1, null);
            return;
        }

        internal function core(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray):void
        {
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=arg1.length;
            var loc2:*=new flash.utils.ByteArray();
            var loc3:*=0;
            while (loc3 < arg1.length) 
            {
                key.encrypt(arg2);
                loc2.position = 0;
                loc2.writeBytes(arg2);
                loc4 = loc3 + blockSize < loc1 ? blockSize : loc1 - loc3;
                loc5 = 0;
                while (loc5 < loc4) 
                {
                    arg1[loc3 + loc5] = arg1[loc3 + loc5] ^ arg2[loc5];
                    ++loc5;
                }
                arg2.position = 0;
                arg2.writeBytes(loc2);
                loc3 = loc3 + blockSize;
            }
            return;
        }

        public function toString():String
        {
            return key.toString() + "-ofb";
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=getIV4e();
            core(arg1, loc1);
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=getIV4d();
            core(arg1, loc1);
            return;
        }
    }
}


//          class PKCS5
package com.hurlant.crypto.symmetric 
{
    import flash.utils.*;
    
    public class PKCS5 extends Object implements com.hurlant.crypto.symmetric.IPad
    {
        public function PKCS5(arg1:uint=0)
        {
            super();
            this.blockSize = arg1;
            return;
        }

        public function pad(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=blockSize - arg1.length % blockSize;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                arg1[arg1.length] = loc1;
                ++loc2;
            }
            return;
        }

        public function setBlockSize(arg1:uint):void
        {
            blockSize = arg1;
            return;
        }

        public function unpad(arg1:flash.utils.ByteArray):void
        {
            var loc3:*=0;
            var loc1:*=arg1.length % blockSize;
            if (loc1 != 0) 
            {
                throw new Error("PKCS#5::unpad: ByteArray.length isn\'t a multiple of the blockSize");
            }
            loc1 = arg1[(arg1.length - 1)];
            var loc2:*=loc1;
            while (loc2 > 0) 
            {
                loc3 = arg1[(arg1.length - 1)];
                var loc4:*;
                var loc5:*=((loc4 = arg1).length - 1);
                loc4.length = loc5;
                if (loc1 != loc3) 
                {
                    throw new Error("PKCS#5:unpad: Invalid padding value. expected [" + loc1 + "], found [" + loc3 + "]");
                }
                --loc2;
            }
            return;
        }

        internal var blockSize:uint;
    }
}


//          class SimpleIVMode
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class SimpleIVMode extends Object implements com.hurlant.crypto.symmetric.IMode, com.hurlant.crypto.symmetric.ICipher
    {
        public function SimpleIVMode(arg1:com.hurlant.crypto.symmetric.IVMode)
        {
            super();
            this.mode = arg1;
            cipher = arg1 as com.hurlant.crypto.symmetric.ICipher;
            return;
        }

        public function encrypt(arg1:flash.utils.ByteArray):void
        {
            cipher.encrypt(arg1);
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeBytes(mode.IV);
            loc1.writeBytes(arg1);
            arg1.position = 0;
            arg1.writeBytes(loc1);
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeBytes(arg1, 0, getBlockSize());
            mode.IV = loc1;
            loc1 = new flash.utils.ByteArray();
            loc1.writeBytes(arg1, getBlockSize());
            cipher.decrypt(loc1);
            arg1.length = 0;
            arg1.writeBytes(loc1);
            return;
        }

        public function dispose():void
        {
            mode.dispose();
            mode = null;
            cipher = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        public function getBlockSize():uint
        {
            return mode.getBlockSize();
        }

        public function toString():String
        {
            return "simple-" + cipher.toString();
        }

        protected var mode:com.hurlant.crypto.symmetric.IVMode;

        protected var cipher:com.hurlant.crypto.symmetric.ICipher;
    }
}


//          class TLSPad
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.crypto.tls.*;
    import flash.utils.*;
    
    public class TLSPad extends Object implements com.hurlant.crypto.symmetric.IPad
    {
        public function TLSPad(arg1:uint=0)
        {
            super();
            this.blockSize = arg1;
            return;
        }

        public function pad(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=blockSize - (arg1.length + 1) % blockSize;
            var loc2:*=0;
            while (loc2 <= loc1) 
            {
                arg1[arg1.length] = loc1;
                ++loc2;
            }
            return;
        }

        public function setBlockSize(arg1:uint):void
        {
            blockSize = arg1;
            return;
        }

        public function unpad(arg1:flash.utils.ByteArray):void
        {
            var loc3:*=0;
            var loc1:*=arg1.length % blockSize;
            if (loc1 != 0) 
            {
                throw new com.hurlant.crypto.tls.TLSError("TLSPad::unpad: ByteArray.length isn\'t a multiple of the blockSize", com.hurlant.crypto.tls.TLSError.bad_record_mac);
            }
            loc1 = arg1[(arg1.length - 1)];
            var loc2:*=loc1;
            while (loc2 > 0) 
            {
                loc3 = arg1[(arg1.length - 1)];
                var loc4:*;
                var loc5:*=((loc4 = arg1).length - 1);
                loc4.length = loc5;
                if (loc1 != loc3) 
                {
                    throw new com.hurlant.crypto.tls.TLSError("TLSPad:unpad: Invalid padding value. expected [" + loc1 + "], found [" + loc3 + "]", com.hurlant.crypto.tls.TLSError.bad_record_mac);
                }
                --loc2;
            }
            loc5 = ((loc4 = arg1).length - 1);
            loc4.length = loc5;
            return;
        }

        internal var blockSize:uint;
    }
}


//          class TripleDESKey
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class TripleDESKey extends com.hurlant.crypto.symmetric.DESKey
    {
        public function TripleDESKey(arg1:flash.utils.ByteArray)
        {
            super(arg1);
            encKey2 = generateWorkingKey(false, arg1, 8);
            decKey2 = generateWorkingKey(true, arg1, 8);
            if (arg1.length > 16) 
            {
                encKey3 = generateWorkingKey(true, arg1, 16);
                decKey3 = generateWorkingKey(false, arg1, 16);
            }
            else 
            {
                encKey3 = encKey;
                decKey3 = decKey;
            }
            return;
        }

        public override function encrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            desFunc(encKey, arg1, arg2, arg1, arg2);
            desFunc(encKey2, arg1, arg2, arg1, arg2);
            desFunc(encKey3, arg1, arg2, arg1, arg2);
            return;
        }

        public override function dispose():void
        {
            super.dispose();
            var loc1:*=0;
            if (encKey2 != null) 
            {
                loc1 = 0;
                while (loc1 < encKey2.length) 
                {
                    encKey2[loc1] = 0;
                    ++loc1;
                }
                encKey2 = null;
            }
            if (encKey3 != null) 
            {
                loc1 = 0;
                while (loc1 < encKey3.length) 
                {
                    encKey3[loc1] = 0;
                    ++loc1;
                }
                encKey3 = null;
            }
            if (decKey2 != null) 
            {
                loc1 = 0;
                while (loc1 < decKey2.length) 
                {
                    decKey2[loc1] = 0;
                    ++loc1;
                }
                decKey2 = null;
            }
            if (decKey3 != null) 
            {
                loc1 = 0;
                while (loc1 < decKey3.length) 
                {
                    decKey3[loc1] = 0;
                    ++loc1;
                }
                decKey3 = null;
            }
            com.hurlant.util.Memory.gc();
            return;
        }

        public override function decrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            desFunc(decKey3, arg1, arg2, arg1, arg2);
            desFunc(decKey2, arg1, arg2, arg1, arg2);
            desFunc(decKey, arg1, arg2, arg1, arg2);
            return;
        }

        public override function toString():String
        {
            return "3des";
        }

        protected var encKey2:Array;

        protected var encKey3:Array;

        protected var decKey2:Array;

        protected var decKey3:Array;
    }
}


//          class XTeaKey
package com.hurlant.crypto.symmetric 
{
    import com.hurlant.crypto.prng.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class XTeaKey extends Object implements com.hurlant.crypto.symmetric.ISymmetricKey
    {
        public function XTeaKey(arg1:flash.utils.ByteArray)
        {
            super();
            arg1.position = 0;
            k = [arg1.readUnsignedInt(), arg1.readUnsignedInt(), arg1.readUnsignedInt(), arg1.readUnsignedInt()];
            return;
        }

        public function encrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            var loc3:*=0;
            arg1.position = arg2;
            var loc1:*=arg1.readUnsignedInt();
            var loc2:*=arg1.readUnsignedInt();
            var loc4:*=0;
            var loc5:*=2654435769;
            loc3 = 0;
            while (loc3 < NUM_ROUNDS) 
            {
                loc1 = loc1 + ((loc2 << 4 ^ loc2 >> 5) + loc2 ^ loc4 + k[loc4 & 3]);
                loc4 = loc4 + loc5;
                loc2 = loc2 + ((loc1 << 4 ^ loc1 >> 5) + loc1 ^ loc4 + k[loc4 >> 11 & 3]);
                ++loc3;
            }
            arg1.position = arg1.position - 8;
            arg1.writeUnsignedInt(loc1);
            arg1.writeUnsignedInt(loc2);
            return;
        }

        public function decrypt(arg1:flash.utils.ByteArray, arg2:uint=0):void
        {
            var loc3:*=0;
            arg1.position = arg2;
            var loc1:*=arg1.readUnsignedInt();
            var loc2:*=arg1.readUnsignedInt();
            var loc4:*;
            var loc5:*=(loc4 = 2654435769) * NUM_ROUNDS;
            loc3 = 0;
            while (loc3 < NUM_ROUNDS) 
            {
                loc2 = loc2 - ((loc1 << 4 ^ loc1 >> 5) + loc1 ^ loc5 + k[loc5 >> 11 & 3]);
                loc5 = loc5 - loc4;
                loc1 = loc1 - ((loc2 << 4 ^ loc2 >> 5) + loc2 ^ loc5 + k[loc5 & 3]);
                ++loc3;
            }
            arg1.position = arg1.position - 8;
            arg1.writeUnsignedInt(loc1);
            arg1.writeUnsignedInt(loc2);
            return;
        }

        public function getBlockSize():uint
        {
            return 8;
        }

        public function toString():String
        {
            return "xtea";
        }

        public function dispose():void
        {
            var loc1:*=new com.hurlant.crypto.prng.Random();
            var loc2:*=0;
            while (loc2 < k.length) 
            {
                k[loc2] = loc1.nextByte();
                delete k[loc2];
                ++loc2;
            }
            k = null;
            com.hurlant.util.Memory.gc();
            return;
        }

        public static function parseKey(arg1:String):com.hurlant.crypto.symmetric.XTeaKey
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeUnsignedInt(parseInt(arg1.substr(0, 8), 16));
            loc1.writeUnsignedInt(parseInt(arg1.substr(8, 8), 16));
            loc1.writeUnsignedInt(parseInt(arg1.substr(16, 8), 16));
            loc1.writeUnsignedInt(parseInt(arg1.substr(24, 8), 16));
            loc1.position = 0;
            return new XTeaKey(loc1);
        }

        public const NUM_ROUNDS:uint=64;

        internal var k:Array;
    }
}


//        package tls
//          class BulkCiphers
package com.hurlant.crypto.tls 
{
    import com.hurlant.crypto.*;
    import com.hurlant.crypto.symmetric.*;
    import flash.utils.*;
    
    public class BulkCiphers extends Object
    {
        public function BulkCiphers(arg1:uint, arg2:uint, arg3:uint, arg4:uint, arg5:uint, arg6:uint)
        {
            super();
            type = arg1;
            keyBytes = arg2;
            expandedKeyBytes = arg3;
            effectiveKeyBits = arg4;
            IVSize = arg5;
            blockSize = arg6;
            return;
        }

        public static function getCipher(arg1:uint, arg2:flash.utils.ByteArray):com.hurlant.crypto.symmetric.ICipher
        {
            return com.hurlant.crypto.Crypto.getCipher(algos[arg1], arg2, new com.hurlant.crypto.symmetric.TLSPad());
        }

        public static function getKeyBytes(arg1:uint):uint
        {
            return getProp(arg1).keyBytes;
        }

        internal static function init():void
        {
            _props = [];
            _props[NULL] = new BulkCiphers(STREAM_CIPHER, 0, 0, 0, 0, 0);
            _props[RC4_40] = new BulkCiphers(STREAM_CIPHER, 5, 16, 40, 0, 0);
            _props[RC4_128] = new BulkCiphers(STREAM_CIPHER, 16, 16, 128, 0, 0);
            _props[RC2_CBC_40] = new BulkCiphers(BLOCK_CIPHER, 5, 16, 40, 8, 8);
            _props[DES_CBC] = new BulkCiphers(BLOCK_CIPHER, 8, 8, 56, 8, 8);
            _props[DES3_EDE_CBC] = new BulkCiphers(BLOCK_CIPHER, 24, 24, 168, 8, 8);
            _props[DES40_CBC] = new BulkCiphers(BLOCK_CIPHER, 5, 8, 40, 8, 8);
            _props[IDEA_CBC] = new BulkCiphers(BLOCK_CIPHER, 16, 16, 128, 8, 8);
            _props[AES_128] = new BulkCiphers(BLOCK_CIPHER, 16, 16, 128, 16, 16);
            _props[AES_256] = new BulkCiphers(BLOCK_CIPHER, 32, 32, 256, 16, 16);
            return;
        }

        internal static function getProp(arg1:uint):com.hurlant.crypto.tls.BulkCiphers
        {
            var loc1:*=_props[arg1];
            if (loc1 == null) 
            {
                throw new Error("Unknown bulk cipher " + arg1.toString(16));
            }
            return loc1;
        }

        public static function getEffectiveKeyBits(arg1:uint):uint
        {
            return getProp(arg1).effectiveKeyBits;
        }

        public static function getIVSize(arg1:uint):uint
        {
            return getProp(arg1).IVSize;
        }

        public static function getBlockSize(arg1:uint):uint
        {
            return getProp(arg1).blockSize;
        }

        public static function getExpandedKeyBytes(arg1:uint):uint
        {
            return getProp(arg1).expandedKeyBytes;
        }

        public static function getType(arg1:uint):uint
        {
            return getProp(arg1).type;
        }

        
        {
            init();
        }

        internal static const algos:Array=["", "rc4", "rc4", "", "des-cbc", "3des-cbc", "des-cbc", "", "aes", "aes"];

        public static const AES_256:uint=9;

        public static const NULL:uint=0;

        public static const DES3_EDE_CBC:uint=5;

        public static const RC4_40:uint=1;

        public static const RC4_128:uint=2;

        public static const BLOCK_CIPHER:uint=1;

        public static const AES_128:uint=8;

        public static const STREAM_CIPHER:uint=0;

        public static const DES40_CBC:uint=6;

        public static const RC2_CBC_40:uint=3;

        public static const DES_CBC:uint=4;

        public static const IDEA_CBC:uint=7;

        internal var expandedKeyBytes:uint;

        internal var keyBytes:uint;

        internal var blockSize:uint;

        internal var IVSize:uint;

        internal var type:uint;

        internal var effectiveKeyBits:uint;

        internal static var _props:Array;
    }
}


//          class CipherSuites
package com.hurlant.crypto.tls 
{
    public class CipherSuites extends Object
    {
        public function CipherSuites(arg1:uint, arg2:uint, arg3:uint)
        {
            super();
            this.cipher = arg1;
            this.hash = arg2;
            this.key = arg3;
            return;
        }

        public static function getDefaultSuites():Array
        {
            return [TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_RC4_128_MD5, TLS_RSA_WITH_DES_CBC_SHA];
        }

        
        {
            init();
        }

        internal static function getProp(arg1:uint):com.hurlant.crypto.tls.CipherSuites
        {
            var loc1:*=_props[arg1];
            if (loc1 == null) 
            {
                throw new Error("Unknown cipher " + arg1.toString(16));
            }
            return loc1;
        }

        public static function getMac(arg1:uint):uint
        {
            return getProp(arg1).hash;
        }

        internal static function init():void
        {
            _props = [];
            _props[TLS_NULL_WITH_NULL_NULL] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.NULL, com.hurlant.crypto.tls.MACs.NULL, com.hurlant.crypto.tls.KeyExchanges.NULL);
            _props[TLS_RSA_WITH_NULL_MD5] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.NULL, com.hurlant.crypto.tls.MACs.MD5, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_NULL_SHA] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.NULL, com.hurlant.crypto.tls.MACs.SHA1, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_RC4_128_MD5] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.RC4_128, com.hurlant.crypto.tls.MACs.MD5, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_RC4_128_SHA] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.RC4_128, com.hurlant.crypto.tls.MACs.SHA1, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_DES_CBC_SHA] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.DES_CBC, com.hurlant.crypto.tls.MACs.SHA1, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_3DES_EDE_CBC_SHA] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.DES3_EDE_CBC, com.hurlant.crypto.tls.MACs.SHA1, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_AES_128_CBC_SHA] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.AES_128, com.hurlant.crypto.tls.MACs.SHA1, com.hurlant.crypto.tls.KeyExchanges.RSA);
            _props[TLS_RSA_WITH_AES_256_CBC_SHA] = new CipherSuites(com.hurlant.crypto.tls.BulkCiphers.AES_256, com.hurlant.crypto.tls.MACs.SHA1, com.hurlant.crypto.tls.KeyExchanges.RSA);
            return;
        }

        public static function getBulkCipher(arg1:uint):uint
        {
            return getProp(arg1).cipher;
        }

        public static function getKeyExchange(arg1:uint):uint
        {
            return getProp(arg1).key;
        }

        public static const TLS_RSA_WITH_RC4_128_MD5:uint=4;

        public static const TLS_DHE_RSA_WITH_AES_256_CBC_SHA:uint=57;

        public static const TLS_RSA_WITH_3DES_EDE_CBC_SHA:uint=10;

        public static const TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA:uint=22;

        public static const TLS_RSA_WITH_RC4_128_SHA:uint=5;

        public static const TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA:uint=19;

        public static const TLS_DH_anon_WITH_AES_256_CBC_SHA:uint=58;

        public static const TLS_RSA_WITH_AES_128_CBC_SHA:uint=47;

        public static const TLS_DHE_DSS_WITH_DES_CBC_SHA:uint=18;

        public static const TLS_DH_DSS_WITH_AES_128_CBC_SHA:uint=48;

        public static const TLS_DH_RSA_WITH_AES_128_CBC_SHA:uint=49;

        public static const TLS_RSA_WITH_AES_256_CBC_SHA:uint=53;

        public static const TLS_DH_anon_WITH_DES_CBC_SHA:uint=26;

        public static const TLS_DHE_RSA_WITH_DES_CBC_SHA:uint=21;

        public static const TLS_DH_DSS_WITH_AES_256_CBC_SHA:uint=54;

        public static const TLS_DH_RSA_WITH_AES_256_CBC_SHA:uint=55;

        public static const TLS_DH_anon_WITH_3DES_EDE_CBC_SHA:uint=27;

        public static const TLS_NULL_WITH_NULL_NULL:uint=0;

        public static const TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA:uint=16;

        public static const TLS_DH_anon_WITH_RC4_128_MD5:uint=24;

        public static const TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA:uint=13;

        public static const TLS_DHE_RSA_WITH_AES_128_CBC_SHA:uint=51;

        public static const TLS_RSA_WITH_NULL_MD5:uint=1;

        public static const TLS_RSA_WITH_IDEA_CBC_SHA:uint=7;

        public static const TLS_RSA_WITH_NULL_SHA:uint=2;

        public static const TLS_RSA_WITH_DES_CBC_SHA:uint=9;

        public static const TLS_DHE_DSS_WITH_AES_128_CBC_SHA:uint=50;

        public static const TLS_DH_RSA_WITH_DES_CBC_SHA:uint=15;

        public static const TLS_DHE_DSS_WITH_AES_256_CBC_SHA:uint=56;

        public static const TLS_DH_anon_WITH_AES_128_CBC_SHA:uint=52;

        public static const TLS_DH_DSS_WITH_DES_CBC_SHA:uint=12;

        public var key:uint;

        public var cipher:uint;

        public var hash:uint;

        internal static var _props:Array;
    }
}


//          class KeyExchanges
package com.hurlant.crypto.tls 
{
    public class KeyExchanges extends Object
    {
        public function KeyExchanges()
        {
            super();
            return;
        }

        public static function useRSA(arg1:uint):Boolean
        {
            return arg1 == RSA;
        }

        public static const RSA:uint=1;

        public static const DH_RSA:uint=3;

        public static const DHE_DSS:uint=4;

        public static const NULL:uint=0;

        public static const DHE_RSA:uint=5;

        public static const DH_DSS:uint=2;

        public static const DH_anon:uint=6;
    }
}


//          class MACs
package com.hurlant.crypto.tls 
{
    import com.hurlant.crypto.*;
    import com.hurlant.crypto.hash.*;
    
    public class MACs extends Object
    {
        public function MACs()
        {
            super();
            return;
        }

        public static function getHashSize(arg1:uint):uint
        {
            return [0, 16, 20][arg1];
        }

        public static function getHMAC(arg1:uint):com.hurlant.crypto.hash.HMAC
        {
            if (arg1 == NULL) 
            {
                return null;
            }
            return com.hurlant.crypto.Crypto.getHMAC(["", "md5", "sha1"][arg1]);
        }

        public static const SHA1:uint=2;

        public static const NULL:uint=0;

        public static const MD5:uint=1;
    }
}


//          class TLSConfig
package com.hurlant.crypto.tls 
{
    import com.hurlant.crypto.cert.*;
    import com.hurlant.crypto.rsa.*;
    import com.hurlant.util.der.*;
    import flash.utils.*;
    
    public class TLSConfig extends Object
    {
        public function TLSConfig(arg1:uint, arg2:Array=null, arg3:Array=null, arg4:flash.utils.ByteArray=null, arg5:com.hurlant.crypto.rsa.RSAKey=null, arg6:com.hurlant.crypto.cert.X509CertificateCollection=null)
        {
            super();
            this.entity = arg1;
            this.cipherSuites = arg2;
            this.compressions = arg3;
            this.certificate = arg4;
            this.privateKey = arg5;
            this.CAStore = arg6;
            if (arg2 == null) 
            {
                this.cipherSuites = com.hurlant.crypto.tls.CipherSuites.getDefaultSuites();
            }
            if (arg3 == null) 
            {
                this.compressions = [com.hurlant.crypto.tls.TLSSecurityParameters.COMPRESSION_NULL];
            }
            if (arg6 == null) 
            {
                this.CAStore = new com.hurlant.crypto.cert.MozillaRootCertificates();
            }
            return;
        }

        public function setPEMCertificate(arg1:String, arg2:String=null):void
        {
            if (arg2 == null) 
            {
                arg2 = arg1;
            }
            certificate = com.hurlant.util.der.PEM.readCertIntoArray(arg1);
            privateKey = com.hurlant.util.der.PEM.readRSAPrivateKey(arg2);
            return;
        }

        public var CAStore:com.hurlant.crypto.cert.X509CertificateCollection;

        public var entity:uint;

        public var compressions:Array;

        public var certificate:flash.utils.ByteArray;

        public var privateKey:com.hurlant.crypto.rsa.RSAKey;

        public var cipherSuites:Array;
    }
}


//          class TLSConnectionState
package com.hurlant.crypto.tls 
{
    import com.hurlant.crypto.hash.*;
    import com.hurlant.crypto.symmetric.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class TLSConnectionState extends Object
    {
        public function TLSConnectionState(arg1:uint=0, arg2:uint=0, arg3:uint=0, arg4:flash.utils.ByteArray=null, arg5:flash.utils.ByteArray=null, arg6:flash.utils.ByteArray=null)
        {
            super();
            this.bulkCipher = arg1;
            this.cipherType = arg2;
            this.macAlgorithm = arg3;
            MAC_write_secret = arg4;
            hmac = com.hurlant.crypto.tls.MACs.getHMAC(arg3);
            CIPHER_key = arg5;
            CIPHER_IV = arg6;
            cipher = com.hurlant.crypto.tls.BulkCiphers.getCipher(arg1, arg5);
            if (cipher is com.hurlant.crypto.symmetric.IVMode) 
            {
                ivmode = cipher as com.hurlant.crypto.symmetric.IVMode;
                ivmode.IV = arg6;
            }
            return;
        }

        public function encrypt(arg1:uint, arg2:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc2:*=null;
            var loc3:*=null;
            var loc1:*=null;
            if (macAlgorithm != com.hurlant.crypto.tls.MACs.NULL) 
            {
                (loc2 = new flash.utils.ByteArray()).writeUnsignedInt(seq_hi);
                loc2.writeUnsignedInt(seq_lo);
                loc2.writeByte(arg1);
                loc2.writeShort(com.hurlant.crypto.tls.TLSEngine.TLS_VERSION);
                loc2.writeShort(arg2.length);
                if (arg2.length != 0) 
                {
                    loc2.writeBytes(arg2, 0, arg2.length);
                }
                loc1 = hmac.compute(MAC_write_secret, loc2);
                arg2.position = arg2.length;
                arg2.writeBytes(loc1);
            }
            arg2.position = 0;
            if (cipherType != com.hurlant.crypto.tls.BulkCiphers.STREAM_CIPHER) 
            {
                cipher.encrypt(arg2);
                (loc3 = new flash.utils.ByteArray()).writeBytes(arg2, arg2.length - CIPHER_IV.length, CIPHER_IV.length);
                CIPHER_IV = loc3;
                ivmode.IV = loc3;
            }
            else if (bulkCipher != com.hurlant.crypto.tls.BulkCiphers.NULL) 
            {
                cipher.encrypt(arg2);
            }
            var loc4:*;
            seq_lo++;
            if (seq_lo == 0) 
            {
                seq_hi++;
            }
            return arg2;
        }

        public function decrypt(arg1:uint, arg2:uint, arg3:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=null;
            if (cipherType != com.hurlant.crypto.tls.BulkCiphers.STREAM_CIPHER) 
            {
                (loc1 = new flash.utils.ByteArray()).writeBytes(arg3, arg3.length - CIPHER_IV.length, CIPHER_IV.length);
                cipher.decrypt(arg3);
                CIPHER_IV = loc1;
                ivmode.IV = loc1;
            }
            else if (bulkCipher != com.hurlant.crypto.tls.BulkCiphers.NULL) 
            {
                cipher.decrypt(arg3);
            }
            if (macAlgorithm != com.hurlant.crypto.tls.MACs.NULL) 
            {
                loc2 = new flash.utils.ByteArray();
                loc3 = arg3.length - hmac.getHashSize();
                loc2.writeUnsignedInt(seq_hi);
                loc2.writeUnsignedInt(seq_lo);
                loc2.writeByte(arg1);
                loc2.writeShort(com.hurlant.crypto.tls.TLSEngine.TLS_VERSION);
                loc2.writeShort(loc3);
                if (loc3 != 0) 
                {
                    loc2.writeBytes(arg3, 0, loc3);
                }
                loc4 = hmac.compute(MAC_write_secret, loc2);
                (loc5 = new flash.utils.ByteArray()).writeBytes(arg3, loc3, hmac.getHashSize());
                if (!com.hurlant.util.ArrayUtil.equals(loc4, loc5)) 
                {
                    throw new com.hurlant.crypto.tls.TLSError("Bad Mac Data", com.hurlant.crypto.tls.TLSError.bad_record_mac);
                }
                arg3.length = loc3;
                arg3.position = 0;
            }
            var loc6:*;
            seq_lo++;
            if (seq_lo == 0) 
            {
                seq_hi++;
            }
            return arg3;
        }

        internal var CIPHER_IV:flash.utils.ByteArray;

        internal var seq_lo:uint;

        internal var cipherType:uint;

        internal var macAlgorithm:uint;

        internal var seq_hi:uint;

        internal var cipher:com.hurlant.crypto.symmetric.ICipher;

        internal var ivmode:com.hurlant.crypto.symmetric.IVMode;

        internal var CIPHER_key:flash.utils.ByteArray;

        internal var MAC_write_secret:flash.utils.ByteArray;

        internal var bulkCipher:uint;

        internal var hmac:com.hurlant.crypto.hash.HMAC;
    }
}


//          class TLSEngine
package com.hurlant.crypto.tls 
{
    import com.hurlant.crypto.cert.*;
    import com.hurlant.crypto.prng.*;
    import com.hurlant.util.*;
    import flash.events.*;
    import flash.utils.*;
    
    public class TLSEngine extends flash.events.EventDispatcher
    {
        public function TLSEngine(arg1:com.hurlant.crypto.tls.TLSConfig, arg2:flash.utils.IDataInput, arg3:flash.utils.IDataOutput, arg4:String=null)
        {
            _packetQueue = [];
            super();
            _ignoreCommonNameCheck = false;
            _ignoreExpiredCertificate = false;
            _ignoreSelfSignedCertificate = false;
            _entity = arg1.entity;
            _config = arg1;
            _iStream = arg2;
            _oStream = arg3;
            _otherIdentity = arg4;
            _state = STATE_NEW;
            _securityParameters = new com.hurlant.crypto.tls.TLSSecurityParameters(_entity);
            var loc1:*=_securityParameters.getConnectionStates();
            _currentReadState = loc1.read;
            _currentWriteState = loc1.write;
            _handshakePayloads = new flash.utils.ByteArray();
            _store = new com.hurlant.crypto.cert.X509CertificateCollection();
            return;
        }

        internal function enforceClient():Boolean
        {
            if (_entity == SERVER) 
            {
                return false;
            }
            return true;
        }

        internal function verifyHandshake(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=_securityParameters.computeVerifyData(1 - _entity, _handshakePayloads);
            if (com.hurlant.util.ArrayUtil.equals(arg1, loc1)) 
            {
                _state = STATE_READY;
                dispatchEvent(new com.hurlant.crypto.tls.TLSEvent(com.hurlant.crypto.tls.TLSEvent.READY));
            }
            else 
            {
                throw new com.hurlant.crypto.tls.TLSError("Invalid Finished mac.", com.hurlant.crypto.tls.TLSError.bad_record_mac);
            }
            return;
        }

        internal function parseAlert(arg1:flash.utils.ByteArray):void
        {
            close();
            return;
        }

        internal function parseOneRecord(arg1:uint, arg2:uint, arg3:flash.utils.ByteArray):void
        {
            arg3 = _currentReadState.decrypt(arg1, arg2, arg3);
            if (arg3.length > 16384) 
            {
                throw new com.hurlant.crypto.tls.TLSError("Excessive Decrypted TLS Record length: " + arg3.length, com.hurlant.crypto.tls.TLSError.record_overflow);
            }
            var loc1:*=arg1;
            switch (loc1) 
            {
                case PROTOCOL_APPLICATION_DATA:
                {
                    if (_state != STATE_READY) 
                    {
                        throw new com.hurlant.crypto.tls.TLSError("Too soon for data!", com.hurlant.crypto.tls.TLSError.unexpected_message);
                    }
                    else 
                    {
                        parseApplicationData(arg3);
                    }
                    break;
                }
                case PROTOCOL_HANDSHAKE:
                {
                    while (arg3 != null) 
                    {
                        arg3 = parseHandshake(arg3);
                    }
                    break;
                }
                case PROTOCOL_ALERT:
                {
                    parseAlert(arg3);
                    break;
                }
                case PROTOCOL_CHANGE_CIPHER_SPEC:
                {
                    parseChangeCipherSpec(arg3);
                    break;
                }
                default:
                {
                    throw new com.hurlant.crypto.tls.TLSError("Unsupported TLS Record Content Type: " + arg1.toString(16), com.hurlant.crypto.tls.TLSError.unexpected_message);
                }
            }
            return;
        }

        internal function scheduleWrite():void
        {
            if (_writeScheduler != 0) 
            {
                return;
            }
            _writeScheduler = flash.utils.setTimeout(commitWrite, 0);
            return;
        }

        internal function sendChangeCipherSpec():void
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1[0] = 1;
            sendRecord(PROTOCOL_CHANGE_CIPHER_SPEC, loc1);
            _currentWriteState = _pendingWriteState;
            _pendingWriteState = null;
            return;
        }

        internal function parseHandshake(arg1:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=null;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=0;
            var loc10:*=null;
            var loc11:*=null;
            if (arg1.length < 4) 
            {
                return null;
            }
            arg1.position = 0;
            loc1 = arg1;
            loc2 = loc1.readUnsignedByte();
            if ((loc4 = (loc3 = loc1.readUnsignedByte()) << 16 | loc1.readUnsignedShort()) + 4 > arg1.length) 
            {
                return null;
            }
            if (arg1[0] != HANDSHAKE_FINISHED) 
            {
                _handshakePayloads.writeBytes(arg1, 0, loc4 + 4);
            }
            var loc12:*=loc2;
            switch (loc12) 
            {
                case HANDSHAKE_HELLO_REQUEST:
                {
                    if (!enforceClient()) 
                    {
                        break;
                    }
                    if (_state != STATE_READY) 
                    {
                        break;
                    }
                    _handshakePayloads = new flash.utils.ByteArray();
                    startHandshake();
                    break;
                }
                case HANDSHAKE_CLIENT_HELLO:
                {
                    if (!enforceServer()) 
                    {
                        break;
                    }
                    loc5 = parseHandshakeHello(loc2, loc4, loc1);
                    sendServerHello(loc5);
                    sendCertificate();
                    sendServerHelloDone();
                    break;
                }
                case HANDSHAKE_SERVER_HELLO:
                {
                    if (!enforceClient()) 
                    {
                        break;
                    }
                    loc5 = parseHandshakeHello(loc2, loc4, loc1);
                    _securityParameters.setCipher(loc5.suites[0]);
                    _securityParameters.setCompression(loc5.compressions[0]);
                    _securityParameters.setServerRandom(loc5.random);
                    break;
                }
                case HANDSHAKE_CERTIFICATE:
                {
                    loc6 = (loc3 = loc1.readByte()) << 16 | loc1.readShort();
                    loc7 = [];
                    while (loc6 > 0) 
                    {
                        loc9 = (loc3 = loc1.readByte()) << 16 | loc1.readShort();
                        loc10 = new flash.utils.ByteArray();
                        loc1.readBytes(loc10, 0, loc9);
                        loc7.push(loc10);
                        loc6 = loc6 - (3 + loc9);
                    }
                    loadCertificates(loc7);
                    break;
                }
                case HANDSHAKE_SERVER_KEY_EXCHANGE:
                {
                    if (!enforceClient()) 
                    {
                        break;
                    }
                    throw new com.hurlant.crypto.tls.TLSError("Server Key Exchange Not Implemented", com.hurlant.crypto.tls.TLSError.internal_error);
                }
                case HANDSHAKE_CERTIFICATE_REQUEST:
                {
                    if (!enforceClient()) 
                    {
                        break;
                    }
                    throw new com.hurlant.crypto.tls.TLSError("Certificate Request Not Implemented", com.hurlant.crypto.tls.TLSError.internal_error);
                }
                case HANDSHAKE_HELLO_DONE:
                {
                    if (!enforceClient()) 
                    {
                        break;
                    }
                    sendClientAck();
                    break;
                }
                case HANDSHAKE_CLIENT_KEY_EXCHANGE:
                {
                    if (!enforceServer()) 
                    {
                        break;
                    }
                    parseHandshakeClientKeyExchange(loc2, loc4, loc1);
                    break;
                }
                case HANDSHAKE_CERTIFICATE_VERIFY:
                {
                    if (!enforceServer()) 
                    {
                        break;
                    }
                    throw new com.hurlant.crypto.tls.TLSError("Certificate Verify not implemented", com.hurlant.crypto.tls.TLSError.internal_error);
                }
                case HANDSHAKE_FINISHED:
                {
                    loc8 = new flash.utils.ByteArray();
                    loc1.readBytes(loc8, 0, 12);
                    verifyHandshake(loc8);
                    break;
                }
            }
            if (loc4 + 4 < arg1.length) 
            {
                (loc11 = new flash.utils.ByteArray()).writeBytes(arg1, loc4 + 4, arg1.length - (loc4 + 4));
                return loc11;
            }
            return null;
        }

        internal function parseApplicationData(arg1:flash.utils.ByteArray):void
        {
            dispatchEvent(new com.hurlant.crypto.tls.TLSEvent(com.hurlant.crypto.tls.TLSEvent.DATA, arg1));
            return;
        }

        internal function sendServerHello(arg1:Object):void
        {
            var loc1:*=findMatch(_config.cipherSuites, arg1.suites);
            if (loc1 == -1) 
            {
                throw new com.hurlant.crypto.tls.TLSError("No compatible cipher found.", com.hurlant.crypto.tls.TLSError.handshake_failure);
            }
            _securityParameters.setCipher(loc1);
            var loc2:*=findMatch(_config.compressions, arg1.compressions);
            if (loc2 == 1) 
            {
                throw new com.hurlant.crypto.tls.TLSError("No compatible compression method found.", com.hurlant.crypto.tls.TLSError.handshake_failure);
            }
            _securityParameters.setCompression(loc2);
            _securityParameters.setClientRandom(arg1.random);
            var loc3:*;
            (loc3 = new flash.utils.ByteArray()).writeShort(TLS_VERSION);
            var loc4:*=new com.hurlant.crypto.prng.Random();
            var loc5:*=new flash.utils.ByteArray();
            loc4.nextBytes(loc5, 32);
            _securityParameters.setServerRandom(loc5);
            loc3.writeBytes(loc5, 0, 32);
            loc3.writeByte(32);
            loc4.nextBytes(loc3, 32);
            loc3.writeShort(arg1.suites[0]);
            loc3.writeByte(arg1.compressions[0]);
            loc3.position = 0;
            sendHandshake(HANDSHAKE_SERVER_HELLO, loc3.length, loc3);
            return;
        }

        internal function findMatch(arg1:Array, arg2:Array):int
        {
            var loc2:*=0;
            var loc1:*=0;
            while (loc1 < arg1.length) 
            {
                loc2 = arg1[loc1];
                if (arg2.indexOf(loc2) > -1) 
                {
                    return loc2;
                }
                ++loc1;
            }
            return -1;
        }

        internal function handleTLSError(arg1:com.hurlant.crypto.tls.TLSError):void
        {
            close(arg1);
            return;
        }

        internal function sendClientAck():void
        {
            sendClientKeyExchange();
            sendChangeCipherSpec();
            sendFinished();
            return;
        }

        internal function sendFinished():void
        {
            var loc1:*=_securityParameters.computeVerifyData(_entity, _handshakePayloads);
            loc1.position = 0;
            sendHandshake(HANDSHAKE_FINISHED, loc1.length, loc1);
            return;
        }

        public function set ignoreSelfSignedCertificate(arg1:Boolean):void
        {
            _ignoreSelfSignedCertificate = arg1;
            return;
        }

        internal function sendClientHello():void
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeShort(TLS_VERSION);
            var loc2:*=new com.hurlant.crypto.prng.Random();
            var loc3:*=new flash.utils.ByteArray();
            loc2.nextBytes(loc3, 32);
            _securityParameters.setClientRandom(loc3);
            loc1.writeBytes(loc3, 0, 32);
            loc1.writeByte(32);
            loc2.nextBytes(loc1, 32);
            var loc4:*=_config.cipherSuites;
            loc1.writeShort(2 * loc4.length);
            var loc5:*=0;
            while (loc5 < loc4.length) 
            {
                loc1.writeShort(loc4[loc5]);
                ++loc5;
            }
            loc4 = _config.compressions;
            loc1.writeByte(loc4.length);
            loc5 = 0;
            while (loc5 < loc4.length) 
            {
                loc1.writeByte(loc4[loc5]);
                ++loc5;
            }
            loc1.position = 0;
            sendHandshake(HANDSHAKE_CLIENT_HELLO, loc1.length, loc1);
            return;
        }

        internal function parseChangeCipherSpec(arg1:flash.utils.ByteArray):void
        {
            arg1.readUnsignedByte();
            if (_pendingReadState == null) 
            {
                throw new com.hurlant.crypto.tls.TLSError("Not ready to Change Cipher Spec, damnit.", com.hurlant.crypto.tls.TLSError.unexpected_message);
            }
            _currentReadState = _pendingReadState;
            _pendingReadState = null;
            return;
        }

        internal function parseRecord(arg1:flash.utils.IDataInput):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=null;
            while (!(_state == STATE_CLOSED) && arg1.bytesAvailable > 4) 
            {
                if (_packetQueue.length > 0) 
                {
                    loc1 = (loc6 = _packetQueue.shift()).data;
                    if (arg1.bytesAvailable + loc1.length >= loc6.length) 
                    {
                        arg1.readBytes(loc1, loc1.length, loc6.length - loc1.length);
                        parseOneRecord(loc6.type, loc6.length, loc1);
                        continue;
                    }
                    else 
                    {
                        arg1.readBytes(loc1, loc1.length, arg1.bytesAvailable);
                        _packetQueue.push(loc6);
                        continue;
                    }
                }
                loc2 = arg1.readByte();
                loc3 = arg1.readShort();
                if ((loc4 = arg1.readShort()) > 16384 + 2048) 
                {
                    throw new com.hurlant.crypto.tls.TLSError("Excessive TLS Record length: " + loc4, com.hurlant.crypto.tls.TLSError.record_overflow);
                }
                if (loc3 != TLS_VERSION) 
                {
                    throw new com.hurlant.crypto.tls.TLSError("Unsupported TLS version: " + loc3.toString(16), com.hurlant.crypto.tls.TLSError.protocol_version);
                }
                if (!(arg1.bytesAvailable < loc4)) 
                {
                };
                loc1 = new flash.utils.ByteArray();
                loc5 = Math.min(arg1.bytesAvailable, loc4);
                arg1.readBytes(loc1, 0, loc5);
                if (loc5 == loc4) 
                {
                    parseOneRecord(loc2, loc4, loc1);
                    continue;
                }
                _packetQueue.push({"type":loc2, "length":loc4, "data":loc1});
            }
            return;
        }

        public function start():void
        {
            var loc1:*;
            if (_entity == CLIENT) 
            {
                try 
                {
                    startHandshake();
                }
                catch (e:com.hurlant.crypto.tls.TLSError)
                {
                    handleTLSError(e);
                }
            }
            return;
        }

        public function sendApplicationData(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=arg3;
            while (loc2 > 16384) 
            {
                loc1.position = 0;
                loc1.writeBytes(arg1, arg2, 16384);
                loc1.position = 0;
                sendRecord(PROTOCOL_APPLICATION_DATA, loc1);
                arg2 = arg2 + 16384;
                loc2 = loc2 - 16384;
            }
            loc1.position = 0;
            loc1.writeBytes(arg1, arg2, loc2);
            loc1.position = 0;
            sendRecord(PROTOCOL_APPLICATION_DATA, loc1);
            return;
        }

        internal function parseHandshakeHello(arg1:uint, arg2:uint, arg3:flash.utils.IDataInput):Object
        {
            var loc1:*=null;
            var loc8:*=0;
            var loc9:*=0;
            var loc10:*=0;
            var loc11:*=0;
            var loc12:*=null;
            var loc13:*=0;
            var loc14:*=0;
            var loc15:*=0;
            var loc16:*=null;
            var loc2:*;
            if ((loc2 = arg3.readShort()) != TLS_VERSION) 
            {
                throw new com.hurlant.crypto.tls.TLSError("Unsupported TLS version: " + loc2.toString(16), com.hurlant.crypto.tls.TLSError.protocol_version);
            }
            var loc3:*=new flash.utils.ByteArray();
            arg3.readBytes(loc3, 0, 32);
            var loc4:*=arg3.readByte();
            var loc5:*=new flash.utils.ByteArray();
            arg3.readBytes(loc5, 0, loc4);
            var loc6:*=[];
            if (arg1 != HANDSHAKE_CLIENT_HELLO) 
            {
                loc6.push(arg3.readShort());
            }
            else 
            {
                loc8 = arg3.readShort();
                loc9 = 0;
                while (loc9 < loc8 / 2) 
                {
                    loc6.push(arg3.readShort());
                    ++loc9;
                }
            }
            var loc7:*=[];
            if (arg1 != HANDSHAKE_CLIENT_HELLO) 
            {
                loc7.push(arg3.readByte());
            }
            else 
            {
                loc10 = arg3.readByte();
                loc9 = 0;
                while (loc9 < loc10) 
                {
                    loc7.push(arg3.readByte());
                    ++loc9;
                }
            }
            loc1 = {"random":loc3, "session":loc5, "suites":loc6, "compressions":loc7};
            if (arg1 == HANDSHAKE_CLIENT_HELLO) 
            {
                loc11 = 2 + 32 + 1 + loc4 + 2 + loc8 + 1 + loc10;
                loc12 = [];
                if (loc11 < arg2) 
                {
                    loc13 = arg3.readShort();
                    while (loc13 > 0) 
                    {
                        loc14 = arg3.readShort();
                        loc15 = arg3.readShort();
                        loc16 = new flash.utils.ByteArray();
                        arg3.readBytes(loc16, 0, loc15);
                        loc13 = loc13 - (4 + loc15);
                        loc12.push({"type":loc14, "length":loc15, "data":loc16});
                    }
                }
                loc1.ext = loc12;
            }
            return loc1;
        }

        internal function sendClientKeyExchange():void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            if (_securityParameters.useRSA) 
            {
                loc1 = new flash.utils.ByteArray();
                loc1.writeShort(TLS_VERSION);
                loc2 = new com.hurlant.crypto.prng.Random();
                loc2.nextBytes(loc1, 46);
                loc1.position = 0;
                loc3 = new flash.utils.ByteArray();
                loc3.writeBytes(loc1, 0, loc1.length);
                _securityParameters.setPreMasterSecret(loc3);
                loc4 = new flash.utils.ByteArray();
                _otherCertificate.getPublicKey().encrypt(loc1, loc4, loc1.length);
                (loc5 = new flash.utils.ByteArray()).writeShort(loc4.length);
                loc5.writeBytes(loc4, 0, loc4.length);
                loc5.position = 0;
                sendHandshake(HANDSHAKE_CLIENT_KEY_EXCHANGE, loc5.length, loc5);
                loc6 = _securityParameters.getConnectionStates();
                _pendingReadState = loc6.read;
                _pendingWriteState = loc6.write;
            }
            else 
            {
                throw new com.hurlant.crypto.tls.TLSError("Non-RSA Client Key Exchange not implemented.", com.hurlant.crypto.tls.TLSError.internal_error);
            }
            return;
        }

        internal function parseHandshakeClientKeyExchange(arg1:uint, arg2:uint, arg3:flash.utils.ByteArray):void
        {
            var loc1:*=0;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (_securityParameters.useRSA) 
            {
                loc1 = arg3.readShort();
                loc2 = new flash.utils.ByteArray();
                arg3.readBytes(loc2, 0, loc1);
                loc3 = new flash.utils.ByteArray();
                _config.privateKey.decrypt(loc2, loc3, loc1);
                _securityParameters.setPreMasterSecret(loc3);
                loc4 = _securityParameters.getConnectionStates();
                _pendingReadState = loc4.read;
                _pendingWriteState = loc4.write;
            }
            else 
            {
                throw new com.hurlant.crypto.tls.TLSError("parseHandshakeClientKeyExchange not implemented for DH modes.", com.hurlant.crypto.tls.TLSError.internal_error);
            }
            return;
        }

        internal function startHandshake():void
        {
            _state = STATE_NEGOTIATING;
            sendClientHello();
            return;
        }

        internal function sendCertificate():void
        {
            var loc1:*=_config.certificate;
            if (loc1 == null) 
            {
                return;
            }
            var loc2:*=loc1.length;
            var loc3:*=loc2 + 3;
            var loc4:*;
            (loc4 = new flash.utils.ByteArray()).writeByte(loc3 >> 16);
            loc4.writeShort(loc3 & 65535);
            loc4.writeByte(loc2 >> 16);
            loc4.writeShort(loc2 & 65535);
            loc4.writeBytes(loc1);
            loc4.position = 0;
            sendHandshake(HANDSHAKE_CERTIFICATE, loc4.length, loc4);
            return;
        }

        internal function commitWrite():void
        {
            flash.utils.clearTimeout(_writeScheduler);
            _writeScheduler = 0;
            if (_state != STATE_CLOSED) 
            {
                dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.SOCKET_DATA));
            }
            return;
        }

        public function dataAvailable(arg1:*=null):void
        {
            var e:*=null;

            var loc1:*;
            e = arg1;
            if (_state == STATE_CLOSED) 
            {
                return;
            }
            try 
            {
                parseRecord(_iStream);
            }
            catch (e:com.hurlant.crypto.tls.TLSError)
            {
                handleTLSError(e);
            }
            return;
        }

        public function set ignoreCommonNameCheck(arg1:Boolean):void
        {
            _ignoreCommonNameCheck = arg1;
            return;
        }

        internal function enforceServer():Boolean
        {
            if (_entity == CLIENT) 
            {
                return false;
            }
            return true;
        }

        public function set ignoreExpiredCertificate(arg1:Boolean):void
        {
            _ignoreExpiredCertificate = arg1;
            return;
        }

        public function close(arg1:com.hurlant.crypto.tls.TLSError=null):void
        {
            if (_state == STATE_CLOSED) 
            {
                return;
            }
            var loc1:*=new flash.utils.ByteArray();
            if (arg1 == null && !(_state == STATE_READY)) 
            {
                loc1[0] = 1;
                loc1[1] = com.hurlant.crypto.tls.TLSError.user_canceled;
                sendRecord(PROTOCOL_ALERT, loc1);
            }
            loc1[0] = 2;
            if (arg1 != null) 
            {
                loc1[1] = arg1.errorID;
            }
            else 
            {
                loc1[1] = com.hurlant.crypto.tls.TLSError.close_notify;
            }
            sendRecord(PROTOCOL_ALERT, loc1);
            _state = STATE_CLOSED;
            dispatchEvent(new flash.events.Event(flash.events.Event.CLOSE));
            return;
        }

        internal function sendRecord(arg1:uint, arg2:flash.utils.ByteArray):void
        {
            arg2 = _currentWriteState.encrypt(arg1, arg2);
            _oStream.writeByte(arg1);
            _oStream.writeShort(TLS_VERSION);
            _oStream.writeShort(arg2.length);
            _oStream.writeBytes(arg2, 0, arg2.length);
            scheduleWrite();
            return;
        }

        internal function sendHandshake(arg1:uint, arg2:uint, arg3:flash.utils.IDataInput):void
        {
            var loc1:*;
            (loc1 = new flash.utils.ByteArray()).writeByte(arg1);
            loc1.writeByte(0);
            loc1.writeShort(arg2);
            arg3.readBytes(loc1, loc1.position, arg2);
            _handshakePayloads.writeBytes(loc1, 0, loc1.length);
            sendRecord(PROTOCOL_HANDSHAKE, loc1);
            return;
        }

        internal function sendServerHelloDone():void
        {
            var loc1:*=new flash.utils.ByteArray();
            sendHandshake(HANDSHAKE_HELLO_DONE, loc1.length, loc1);
            return;
        }

        internal function loadCertificates(arg1:Array):void
        {
            var loc3:*=null;
            var loc1:*=null;
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                (loc3 = new com.hurlant.crypto.cert.X509Certificate(arg1[loc2])).ignoreExpiredCertificate = _ignoreExpiredCertificate;
                loc3.ignoreSelfSignedCertificate = _ignoreSelfSignedCertificate;
                _store.addCertificate(loc3);
                if (loc1 == null) 
                {
                    loc1 = loc3;
                }
                ++loc2;
            }
            if (loc1.isSigned(_store, _config.CAStore)) 
            {
                if (_otherIdentity != null) 
                {
                    if (_ignoreCommonNameCheck) 
                    {
                        _otherCertificate = loc1;
                        return;
                    }
                    if (loc1.getCommonName() != _otherIdentity) 
                    {
                        throw new com.hurlant.crypto.tls.TLSError("Invalid common name: " + loc1.getCommonName() + ", expected " + _otherIdentity, com.hurlant.crypto.tls.TLSError.bad_certificate);
                    }
                    else 
                    {
                        _otherCertificate = loc1;
                    }
                }
                else 
                {
                    _otherCertificate = loc1;
                }
            }
            else 
            {
                throw new com.hurlant.crypto.tls.TLSError("Cannot verify certificate", com.hurlant.crypto.tls.TLSError.bad_certificate);
            }
            return;
        }

        public static const SERVER:uint=0;

        public static const CLIENT:uint=1;

        internal static const STATE_NEGOTIATING:uint=1;

        internal static const HANDSHAKE_CERTIFICATE:uint=11;

        public static const TLS_VERSION:uint=769;

        internal static const PROTOCOL_ALERT:uint=21;

        internal static const HANDSHAKE_HELLO_DONE:uint=14;

        internal static const HANDSHAKE_SERVER_HELLO:uint=2;

        internal static const HANDSHAKE_FINISHED:uint=20;

        internal static const HANDSHAKE_CLIENT_HELLO:uint=1;

        internal static const PROTOCOL_CHANGE_CIPHER_SPEC:uint=20;

        internal static const HANDSHAKE_CERTIFICATE_VERIFY:uint=15;

        internal static const PROTOCOL_APPLICATION_DATA:uint=23;

        internal static const PROTOCOL_HANDSHAKE:uint=22;

        internal static const STATE_NEW:uint=0;

        internal static const STATE_READY:uint=2;

        internal static const HANDSHAKE_CLIENT_KEY_EXCHANGE:uint=16;

        internal static const HANDSHAKE_SERVER_KEY_EXCHANGE:uint=12;

        internal static const STATE_CLOSED:uint=3;

        internal static const HANDSHAKE_HELLO_REQUEST:uint=0;

        internal static const HANDSHAKE_CERTIFICATE_REQUEST:uint=13;

        internal var _entity:uint;

        internal var _ignoreExpiredCertificate:Boolean;

        internal var _ignoreSelfSignedCertificate:Boolean;

        internal var _iStream:flash.utils.IDataInput;

        internal var _oStream:flash.utils.IDataOutput;

        internal var _pendingReadState:com.hurlant.crypto.tls.TLSConnectionState;

        internal var _state:uint;

        internal var _packetQueue:Array;

        internal var _writeScheduler:uint;

        internal var _handshakePayloads:flash.utils.ByteArray;

        internal var _currentWriteState:com.hurlant.crypto.tls.TLSConnectionState;

        internal var _otherCertificate:com.hurlant.crypto.cert.X509Certificate;

        internal var _config:com.hurlant.crypto.tls.TLSConfig;

        internal var _ignoreCommonNameCheck:Boolean;

        internal var _otherIdentity:String;

        internal var _store:com.hurlant.crypto.cert.X509CertificateCollection;

        internal var _securityParameters:com.hurlant.crypto.tls.TLSSecurityParameters;

        internal var _pendingWriteState:com.hurlant.crypto.tls.TLSConnectionState;

        internal var _currentReadState:com.hurlant.crypto.tls.TLSConnectionState;
    }
}


//          class TLSError
package com.hurlant.crypto.tls 
{
    public class TLSError extends Error
    {
        public function TLSError(arg1:String, arg2:int)
        {
            super(arg1, arg2);
            return;
        }

        public static const internal_error:uint=80;

        public static const handshake_failure:uint=40;

        public static const unsupported_certificate:uint=43;

        public static const decompression_failure:uint=30;

        public static const user_canceled:uint=90;

        public static const access_denied:uint=49;

        public static const no_renegotiation:uint=100;

        public static const unexpected_message:uint=10;

        public static const bad_record_mac:uint=20;

        public static const bad_certificate:uint=42;

        public static const decryption_failed:uint=21;

        public static const decrypt_error:uint=51;

        public static const certificate_unknown:uint=46;

        public static const close_notify:uint=0;

        public static const protocol_version:uint=70;

        public static const unknown_ca:uint=48;

        public static const certificate_revoked:uint=44;

        public static const record_overflow:uint=22;

        public static const illegal_parameter:uint=47;

        public static const insufficient_security:uint=71;

        public static const certificate_expired:uint=45;

        public static const decode_error:uint=50;
    }
}


//          class TLSEvent
package com.hurlant.crypto.tls 
{
    import flash.events.*;
    import flash.utils.*;
    
    public class TLSEvent extends flash.events.Event
    {
        public function TLSEvent(arg1:String, arg2:flash.utils.ByteArray=null)
        {
            this.data = arg2;
            super(arg1, false, false);
            return;
        }

        public static const DATA:String="data";

        public static const READY:String="ready";

        public var data:flash.utils.ByteArray;
    }
}


//          class TLSSecurityParameters
package com.hurlant.crypto.tls 
{
    import com.hurlant.crypto.hash.*;
    import com.hurlant.crypto.prng.*;
    import flash.utils.*;
    
    public class TLSSecurityParameters extends Object
    {
        public function TLSSecurityParameters(arg1:uint)
        {
            super();
            this.entity = arg1;
            reset();
            return;
        }

        public function getBulkCipher():uint
        {
            return bulkCipher;
        }

        public function setPreMasterSecret(arg1:flash.utils.ByteArray):void
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeBytes(clientRandom, 0, clientRandom.length);
            loc1.writeBytes(serverRandom, 0, serverRandom.length);
            var loc2:*=new com.hurlant.crypto.prng.TLSPRF(arg1, "master secret", loc1);
            masterSecret = new flash.utils.ByteArray();
            loc2.nextBytes(masterSecret, 48);
            return;
        }

        public function setCipher(arg1:uint):void
        {
            bulkCipher = com.hurlant.crypto.tls.CipherSuites.getBulkCipher(arg1);
            cipherType = com.hurlant.crypto.tls.BulkCiphers.getType(bulkCipher);
            keySize = com.hurlant.crypto.tls.BulkCiphers.getExpandedKeyBytes(bulkCipher);
            keyMaterialLength = com.hurlant.crypto.tls.BulkCiphers.getKeyBytes(bulkCipher);
            IVSize = com.hurlant.crypto.tls.BulkCiphers.getIVSize(bulkCipher);
            keyExchange = com.hurlant.crypto.tls.CipherSuites.getKeyExchange(arg1);
            macAlgorithm = com.hurlant.crypto.tls.CipherSuites.getMac(arg1);
            hashSize = com.hurlant.crypto.tls.MACs.getHashSize(macAlgorithm);
            return;
        }

        public function reset():void
        {
            bulkCipher = com.hurlant.crypto.tls.BulkCiphers.NULL;
            cipherType = com.hurlant.crypto.tls.BulkCiphers.BLOCK_CIPHER;
            macAlgorithm = com.hurlant.crypto.tls.MACs.NULL;
            compression = COMPRESSION_NULL;
            masterSecret = null;
            return;
        }

        public function computeVerifyData(arg1:uint, arg2:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=new com.hurlant.crypto.hash.MD5();
            loc1.writeBytes(loc2.hash(arg2), 0, loc2.getHashSize());
            var loc3:*=new com.hurlant.crypto.hash.SHA1();
            loc1.writeBytes(loc3.hash(arg2), 0, loc3.getHashSize());
            var loc4:*=new com.hurlant.crypto.prng.TLSPRF(masterSecret, arg1 != com.hurlant.crypto.tls.TLSEngine.CLIENT ? "server finished" : "client finished", loc1);
            var loc5:*=new flash.utils.ByteArray();
            loc4.nextBytes(loc5, 12);
            return loc5;
        }

        public function getCipherType():uint
        {
            return cipherType;
        }

        public function getMacAlgorithm():uint
        {
            return macAlgorithm;
        }

        public function setServerRandom(arg1:flash.utils.ByteArray):void
        {
            serverRandom = arg1;
            return;
        }

        public function setClientRandom(arg1:flash.utils.ByteArray):void
        {
            clientRandom = arg1;
            return;
        }

        public function getConnectionStates():Object
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            var loc5:*=null;
            var loc6:*=null;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=null;
            if (masterSecret != null) 
            {
                loc1 = new flash.utils.ByteArray();
                loc1.writeBytes(serverRandom, 0, serverRandom.length);
                loc1.writeBytes(clientRandom, 0, clientRandom.length);
                loc2 = new com.hurlant.crypto.prng.TLSPRF(masterSecret, "key expansion", loc1);
                loc3 = new flash.utils.ByteArray();
                loc2.nextBytes(loc3, hashSize);
                loc4 = new flash.utils.ByteArray();
                loc2.nextBytes(loc4, hashSize);
                loc5 = new flash.utils.ByteArray();
                loc2.nextBytes(loc5, keyMaterialLength);
                loc6 = new flash.utils.ByteArray();
                loc2.nextBytes(loc6, keyMaterialLength);
                loc7 = new flash.utils.ByteArray();
                loc2.nextBytes(loc7, IVSize);
                loc8 = new flash.utils.ByteArray();
                loc2.nextBytes(loc8, IVSize);
                loc9 = new com.hurlant.crypto.tls.TLSConnectionState(bulkCipher, cipherType, macAlgorithm, loc3, loc5, loc7);
                loc10 = new com.hurlant.crypto.tls.TLSConnectionState(bulkCipher, cipherType, macAlgorithm, loc4, loc6, loc8);
                if (entity == com.hurlant.crypto.tls.TLSEngine.CLIENT) 
                {
                    return {"read":loc10, "write":loc9};
                }
                return {"read":loc9, "write":loc10};
            }
            return {"read":new com.hurlant.crypto.tls.TLSConnectionState(), "write":new com.hurlant.crypto.tls.TLSConnectionState()};
        }

        public function get useRSA():Boolean
        {
            return com.hurlant.crypto.tls.KeyExchanges.useRSA(keyExchange);
        }

        public function setCompression(arg1:uint):void
        {
            compression = arg1;
            return;
        }

        public static const COMPRESSION_NULL:uint=0;

        internal var keySize:uint;

        internal var IVSize:uint;

        internal var macAlgorithm:uint;

        public var keyExchange:uint;

        internal var entity:uint;

        internal var cipherType:uint;

        internal var serverRandom:flash.utils.ByteArray;

        internal var keyMaterialLength:uint;

        internal var compression:uint;

        internal var clientRandom:flash.utils.ByteArray;

        internal var hashSize:uint;

        internal var masterSecret:flash.utils.ByteArray;

        internal var bulkCipher:uint;
    }
}


//          class TLSSocket
package com.hurlant.crypto.tls 
{
    import flash.events.*;
    import flash.net.*;
    import flash.utils.*;
    
    public class TLSSocket extends flash.events.EventDispatcher implements flash.utils.IDataInput, flash.utils.IDataOutput
    {
        public function TLSSocket(arg1:String=null, arg2:int=0, arg3:com.hurlant.crypto.tls.TLSConfig=null)
        {
            super();
            _ignoreCommonNameCheck = false;
            _ignoreExpiredCertificate = false;
            _ignoreSelfSignedCertificate = false;
            endian = flash.utils.Endian.BIG_ENDIAN;
            if (!(arg1 == null) && !(arg2 == 0)) 
            {
                connect(arg1, arg2, arg3);
            }
            return;
        }

        public function readBoolean():Boolean
        {
            return _iStream.readBoolean();
        }

        public function flush():void
        {
            commitWrite();
            _socket.flush();
            return;
        }

        public function readDouble():Number
        {
            return _iStream.readDouble();
        }

        public function get connected():Boolean
        {
            return _socket.connected;
        }

        internal function commitWrite():void
        {
            flash.utils.clearTimeout(_writeScheduler);
            _writeScheduler = 0;
            if (_ready) 
            {
                _engine.sendApplicationData(_oStream);
                _oStream.length = 0;
            }
            return;
        }

        internal function init(arg1:flash.net.Socket, arg2:com.hurlant.crypto.tls.TLSConfig, arg3:String):void
        {
            var host:String;
            var config:com.hurlant.crypto.tls.TLSConfig;
            var socket:flash.net.Socket;

            var loc1:*;
            socket = arg1;
            config = arg2;
            host = arg3;
            _iStream = new flash.utils.ByteArray();
            _oStream = new flash.utils.ByteArray();
            _iStream_cursor = 0;
            objectEncoding = flash.net.ObjectEncoding.DEFAULT;
            socket.endian = endian;
            _socket = socket;
            _socket.addEventListener(flash.events.Event.CONNECT, dispatchEvent);
            _socket.addEventListener(flash.events.IOErrorEvent.IO_ERROR, dispatchEvent);
            _socket.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);
            _socket.addEventListener(flash.events.Event.CLOSE, dispatchEvent);
            if (config == null) 
            {
                config = new com.hurlant.crypto.tls.TLSConfig(com.hurlant.crypto.tls.TLSEngine.CLIENT);
            }
            _engine = new com.hurlant.crypto.tls.TLSEngine(config, _socket, _socket, host);
            _engine.ignoreCommonNameCheck = _ignoreCommonNameCheck;
            _engine.ignoreExpiredCertificate = _ignoreExpiredCertificate;
            _engine.ignoreSelfSignedCertificate = _ignoreSelfSignedCertificate;
            _engine.addEventListener(com.hurlant.crypto.tls.TLSEvent.DATA, onTLSData);
            _engine.addEventListener(com.hurlant.crypto.tls.TLSEvent.READY, onTLSReady);
            _engine.addEventListener(flash.events.Event.CLOSE, onTLSClose);
            _engine.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, function (arg1:*):void
            {
                _socket.flush();
                return;
            })
            _socket.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, _engine.dataAvailable);
            _ready = false;
            return;
        }

        public function writeUTFBytes(arg1:String):void
        {
            _oStream.writeUTFBytes(arg1);
            scheduleWrite();
            return;
        }

        public function connect(arg1:String, arg2:int, arg3:com.hurlant.crypto.tls.TLSConfig=null):void
        {
            init(new flash.net.Socket(), arg3, arg1);
            _socket.connect(arg1, arg2);
            _engine.start();
            return;
        }

        public function readUTF():String
        {
            return _iStream.readUTF();
        }

        public function startTLS(arg1:flash.net.Socket, arg2:String, arg3:com.hurlant.crypto.tls.TLSConfig=null):void
        {
            if (!arg1.connected) 
            {
                throw new Error("Cannot STARTTLS on a socket that isn\'t connected.");
            }
            init(arg1, arg3, arg2);
            _engine.start();
            return;
        }

        public function readUnsignedInt():uint
        {
            return _iStream.readUnsignedInt();
        }

        public function set endian(arg1:String):void
        {
            _endian = arg1;
            if (_iStream == null || _oStream == null) 
            {
                return;
            }
            _iStream.endian = arg1;
            _oStream.endian = arg1;
            return;
        }

        public function writeUTF(arg1:String):void
        {
            _oStream.writeUTF(arg1);
            scheduleWrite();
            return;
        }

        public function writeBoolean(arg1:Boolean):void
        {
            _oStream.writeBoolean(arg1);
            scheduleWrite();
            return;
        }

        public function readUnsignedByte():uint
        {
            return _iStream.readUnsignedByte();
        }

        public function set ignoreExpiredCertificate(arg1:Boolean):void
        {
            _ignoreExpiredCertificate = arg1;
            return;
        }

        public function readMultiByte(arg1:uint, arg2:String):String
        {
            return _iStream.readMultiByte(arg1, arg2);
        }

        public function writeUnsignedInt(arg1:uint):void
        {
            _oStream.writeUnsignedInt(arg1);
            scheduleWrite();
            return;
        }

        internal function onTLSReady(arg1:com.hurlant.crypto.tls.TLSEvent):void
        {
            _ready = true;
            scheduleWrite();
            dispatchEvent(new com.hurlant.crypto.tls.TLSEvent(arg1.type, arg1.data));
            return;
        }

        public function close():void
        {
            _ready = false;
            _engine.close();
            _socket.flush();
            _socket.close();
            return;
        }

        public function set objectEncoding(arg1:uint):void
        {
            _objectEncoding = arg1;
            _iStream.objectEncoding = arg1;
            _oStream.objectEncoding = arg1;
            return;
        }

        internal function onTLSData(arg1:com.hurlant.crypto.tls.TLSEvent):void
        {
            if (_iStream.position == _iStream.length) 
            {
                _iStream.position = 0;
                _iStream.length = 0;
                _iStream_cursor = 0;
            }
            var loc1:*=_iStream.position;
            _iStream.position = _iStream_cursor;
            _iStream.writeBytes(arg1.data);
            _iStream_cursor = _iStream.position;
            _iStream.position = loc1;
            dispatchEvent(new flash.events.ProgressEvent(flash.events.ProgressEvent.SOCKET_DATA, false, false, arg1.data.length));
            return;
        }

        public function get baseEngine():com.hurlant.crypto.tls.TLSEngine
        {
            return _engine;
        }

        public function set ignoreSelfSignedCertificate(arg1:Boolean):void
        {
            _ignoreSelfSignedCertificate = arg1;
            return;
        }

        public function readObject():*
        {
            return _iStream.readObject();
        }

        public function readFloat():Number
        {
            return _iStream.readFloat();
        }

        public function readInt():int
        {
            return _iStream.readInt();
        }

        public function writeObject(arg1:*):void
        {
            _oStream.writeObject(arg1);
            scheduleWrite();
            return;
        }

        public function readShort():int
        {
            return _iStream.readShort();
        }

        public function writeByte(arg1:int):void
        {
            _oStream.writeByte(arg1);
            scheduleWrite();
            return;
        }

        internal function scheduleWrite():void
        {
            if (_writeScheduler != 0) 
            {
                return;
            }
            _writeScheduler = flash.utils.setTimeout(commitWrite, 0);
            return;
        }

        public function writeInt(arg1:int):void
        {
            _oStream.writeInt(arg1);
            scheduleWrite();
            return;
        }

        public function readUnsignedShort():uint
        {
            return _iStream.readUnsignedShort();
        }

        public function get endian():String
        {
            return _endian;
        }

        public function get bytesAvailable():uint
        {
            return _iStream.bytesAvailable;
        }

        public function writeDouble(arg1:Number):void
        {
            _oStream.writeDouble(arg1);
            scheduleWrite();
            return;
        }

        public function get baseSocket():flash.net.Socket
        {
            return _socket;
        }

        public function readBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            return _iStream.readBytes(arg1, arg2, arg3);
        }

        public function readUTFBytes(arg1:uint):String
        {
            return _iStream.readUTFBytes(arg1);
        }

        internal function onTLSClose(arg1:flash.events.Event):void
        {
            dispatchEvent(arg1);
            close();
            return;
        }

        public function readByte():int
        {
            return _iStream.readByte();
        }

        public function set ignoreCommonNameCheck(arg1:Boolean):void
        {
            _ignoreCommonNameCheck = arg1;
            return;
        }

        public function writeFloat(arg1:Number):void
        {
            _oStream.writeFloat(arg1);
            scheduleWrite();
            return;
        }

        public function get objectEncoding():uint
        {
            return _objectEncoding;
        }

        public function writeBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            _oStream.writeBytes(arg1, arg2, arg3);
            scheduleWrite();
            return;
        }

        public function writeMultiByte(arg1:String, arg2:String):void
        {
            _oStream.writeMultiByte(arg1, arg2);
            scheduleWrite();
            return;
        }

        public function writeShort(arg1:int):void
        {
            _oStream.writeShort(arg1);
            scheduleWrite();
            return;
        }

        internal var _ignoreExpiredCertificate:Boolean;

        internal var _iStream:flash.utils.ByteArray;

        internal var _iStream_cursor:uint;

        internal var _engine:com.hurlant.crypto.tls.TLSEngine;

        internal var _ignoreCommonNameCheck:Boolean;

        internal var _ignoreSelfSignedCertificate:Boolean;

        internal var _ready:Boolean;

        internal var _socket:flash.net.Socket;

        internal var _endian:String;

        internal var _objectEncoding:uint;

        internal var _oStream:flash.utils.ByteArray;

        internal var _writeScheduler:uint;
    }
}


//        class Crypto
package com.hurlant.crypto 
{
    import com.hurlant.crypto.hash.*;
    import com.hurlant.crypto.prng.*;
    import com.hurlant.crypto.rsa.*;
    import com.hurlant.crypto.symmetric.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class Crypto extends Object
    {
        public function Crypto()
        {
            super();
            return;
        }

        public static function getCipher(arg1:String, arg2:flash.utils.ByteArray, arg3:com.hurlant.crypto.symmetric.IPad=null):com.hurlant.crypto.symmetric.ICipher
        {
            var loc2:*=null;
            var loc1:*=arg1.split("-");
            var loc3:*=loc1[0];
            switch (loc3) 
            {
                case "simple":
                {
                    loc1.shift();
                    arg1 = loc1.join("-");
                    if ((loc2 = getCipher(arg1, arg2, arg3)) is com.hurlant.crypto.symmetric.IVMode) 
                    {
                        return new com.hurlant.crypto.symmetric.SimpleIVMode(loc2 as com.hurlant.crypto.symmetric.IVMode);
                    }
                    return loc2;
                }
                case "aes":
                case "aes128":
                case "aes192":
                case "aes256":
                {
                    loc1.shift();
                    if (arg2.length * 8 == loc1[0]) 
                    {
                        loc1.shift();
                    }
                    return getMode(loc1[0], new com.hurlant.crypto.symmetric.AESKey(arg2), arg3);
                }
                case "bf":
                case "blowfish":
                {
                    loc1.shift();
                    return getMode(loc1[0], new com.hurlant.crypto.symmetric.BlowFishKey(arg2), arg3);
                }
                case "des":
                {
                    loc1.shift();
                    if (!(loc1[0] == "ede") && !(loc1[0] == "ede3")) 
                    {
                        return getMode(loc1[0], new com.hurlant.crypto.symmetric.DESKey(arg2), arg3);
                    }
                    if (loc1.length == 1) 
                    {
                        loc1.push("ecb");
                    }
                }
                case "3des":
                case "des3":
                {
                    loc1.shift();
                    return getMode(loc1[0], new com.hurlant.crypto.symmetric.TripleDESKey(arg2), arg3);
                }
                case "xtea":
                {
                    loc1.shift();
                    return getMode(loc1[0], new com.hurlant.crypto.symmetric.XTeaKey(arg2), arg3);
                }
                case "rc4":
                {
                    loc1.shift();
                    return new com.hurlant.crypto.prng.ARC4(arg2);
                }
            }
            return null;
        }

        public static function getHash(arg1:String):com.hurlant.crypto.hash.IHash
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case "md2":
                {
                    return new com.hurlant.crypto.hash.MD2();
                }
                case "md5":
                {
                    return new com.hurlant.crypto.hash.MD5();
                }
                case "sha":
                case "sha1":
                {
                    return new com.hurlant.crypto.hash.SHA1();
                }
                case "sha224":
                {
                    return new com.hurlant.crypto.hash.SHA224();
                }
                case "sha256":
                {
                    return new com.hurlant.crypto.hash.SHA256();
                }
            }
            return null;
        }

        public static function getRSA(arg1:String, arg2:String):com.hurlant.crypto.rsa.RSAKey
        {
            return com.hurlant.crypto.rsa.RSAKey.parsePublicKey(arg2, arg1);
        }

        internal static function getMode(arg1:String, arg2:com.hurlant.crypto.symmetric.ISymmetricKey, arg3:com.hurlant.crypto.symmetric.IPad=null):com.hurlant.crypto.symmetric.IMode
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case "ecb":
                {
                    return new com.hurlant.crypto.symmetric.ECBMode(arg2, arg3);
                }
                case "cfb":
                {
                    return new com.hurlant.crypto.symmetric.CFBMode(arg2, arg3);
                }
                case "cfb8":
                {
                    return new com.hurlant.crypto.symmetric.CFB8Mode(arg2, arg3);
                }
                case "ofb":
                {
                    return new com.hurlant.crypto.symmetric.OFBMode(arg2, arg3);
                }
                case "ctr":
                {
                    return new com.hurlant.crypto.symmetric.CTRMode(arg2, arg3);
                }
                case "cbc":
                default:
                {
                    return new com.hurlant.crypto.symmetric.CBCMode(arg2, arg3);
                }
            }
        }

        public static function getKeySize(arg1:String):uint
        {
            var loc1:*=arg1.split("-");
            var loc2:*=loc1[0];
            switch (loc2) 
            {
                case "simple":
                {
                    loc1.shift();
                    return getKeySize(loc1.join("-"));
                }
                case "aes128":
                {
                    return 16;
                }
                case "aes192":
                {
                    return 24;
                }
                case "aes256":
                {
                    return 32;
                }
                case "aes":
                {
                    loc1.shift();
                    return parseInt(loc1[0]) / 8;
                }
                case "bf":
                case "blowfish":
                {
                    return 16;
                }
                case "des":
                {
                    loc1.shift();
                    loc2 = loc1[0];
                    switch (loc2) 
                    {
                        case "ede":
                        {
                            return 16;
                        }
                        case "ede3":
                        {
                            return 24;
                        }
                        default:
                        {
                            return 8;
                        }
                    }
                }
                case "3des":
                case "des3":
                {
                    return 24;
                }
                case "xtea":
                {
                    return 8;
                }
                case "rc4":
                {
                    if (parseInt(loc1[1]) > 0) 
                    {
                        return parseInt(loc1[1]) / 8;
                    }
                    return 16;
                }
            }
            return 0;
        }

        public static function getPad(arg1:String):com.hurlant.crypto.symmetric.IPad
        {
            var loc1:*=arg1;
            switch (loc1) 
            {
                case "null":
                {
                    return new com.hurlant.crypto.symmetric.NullPad();
                }
                case "pkcs5":
                default:
                {
                    return new com.hurlant.crypto.symmetric.PKCS5();
                }
            }
        }

        public static function getHMAC(arg1:String):com.hurlant.crypto.hash.HMAC
        {
            var loc1:*=arg1.split("-");
            if (loc1[0] == "hmac") 
            {
                loc1.shift();
            }
            var loc2:*=0;
            if (loc1.length > 1) 
            {
                loc2 = parseInt(loc1[1]);
            }
            return new com.hurlant.crypto.hash.HMAC(getHash(loc1[0]), loc2);
        }

        internal var b64:com.hurlant.util.Base64;
    }
}


//      package math
//        class BarrettReduction
package com.hurlant.math 
{
    use namespace bi_internal;
    
    internal class BarrettReduction extends Object implements com.hurlant.math.IReduction
    {
        public function BarrettReduction(arg1:com.hurlant.math.BigInteger)
        {
            super();
            r2 = new com.hurlant.math.BigInteger();
            q3 = new com.hurlant.math.BigInteger();
            com.hurlant.math.BigInteger.ONE.bi_internal::dlShiftTo(2 * arg1.t, r2);
            mu = r2.divide(arg1);
            this.m = arg1;
            return;
        }

        public function revert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return arg1;
        }

        public function sqrTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::squareTo(arg2);
            reduce(arg2);
            return;
        }

        public function convert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=null;
            if (arg1.bi_internal::s < 0 || arg1.t > 2 * m.t) 
            {
                return arg1.mod(m);
            }
            if (arg1.compareTo(m) < 0) 
            {
                return arg1;
            }
            loc1 = new com.hurlant.math.BigInteger();
            arg1.bi_internal::copyTo(loc1);
            reduce(loc1);
            return loc1;
        }

        public function reduce(arg1:com.hurlant.math.BigInteger):void
        {
            var loc1:*=arg1 as com.hurlant.math.BigInteger;
            loc1.bi_internal::drShiftTo((m.t - 1), r2);
            if (loc1.t > m.t + 1) 
            {
                loc1.t = m.t + 1;
                loc1.bi_internal::clamp();
            }
            mu.bi_internal::multiplyUpperTo(r2, m.t + 1, q3);
            m.bi_internal::multiplyLowerTo(q3, m.t + 1, r2);
            while (loc1.compareTo(r2) < 0) 
            {
                loc1.bi_internal::dAddOffset(1, m.t + 1);
            }
            loc1.bi_internal::subTo(r2, loc1);
            while (loc1.compareTo(m) >= 0) 
            {
                loc1.bi_internal::subTo(m, loc1);
            }
            return;
        }

        public function mulTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger, arg3:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::multiplyTo(arg2, arg3);
            reduce(arg3);
            return;
        }

        internal var r2:com.hurlant.math.BigInteger;

        internal var q3:com.hurlant.math.BigInteger;

        internal var mu:com.hurlant.math.BigInteger;

        internal var m:com.hurlant.math.BigInteger;
    }
}


//        class BigInteger
package com.hurlant.math 
{
    import com.hurlant.crypto.prng.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    use namespace bi_internal;
    
    public class BigInteger extends Object
    {
        public function BigInteger(arg1:*=null, arg2:int=0)
        {
            var loc1:*=null;
            var loc2:*=0;
            super();
            bi_internal::a = new Array();
            if (arg1 is String) 
            {
                arg1 = com.hurlant.util.Hex.toArray(arg1);
                arg2 = 0;
            }
            if (arg1 is flash.utils.ByteArray) 
            {
                loc1 = arg1 as flash.utils.ByteArray;
                loc2 = arg2 || loc1.length - loc1.position;
                bi_internal::fromArray(loc1, loc2);
            }
            return;
        }

        public function clearBit(arg1:int):com.hurlant.math.BigInteger
        {
            return changeBit(arg1, op_andnot);
        }

        internal function op_or(arg1:int, arg2:int):int
        {
            return arg1 | arg2;
        }

        public function negate():com.hurlant.math.BigInteger
        {
            var loc1:*=nbi();
            ZERO.bi_internal::subTo(this, loc1);
            return loc1;
        }

        public function andNot(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bitwiseTo(arg1, op_andnot, loc1);
            return loc1;
        }

        public function modPow(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc2:*=0;
            var loc4:*=null;
            var loc10:*=0;
            var loc13:*=null;
            var loc14:*=null;
            var loc1:*=arg1.bitLength();
            var loc3:*=nbv(1);
            if (loc1 <= 0) 
            {
                return loc3;
            }
            if (loc1 < 18) 
            {
                loc2 = 1;
            }
            else if (loc1 < 48) 
            {
                loc2 = 3;
            }
            else if (loc1 < 144) 
            {
                loc2 = 4;
            }
            else if (loc1 < 768) 
            {
                loc2 = 5;
            }
            else 
            {
                loc2 = 6;
            }
            if (loc1 < 8) 
            {
                loc4 = new ClassicReduction(arg2);
            }
            else if (arg2.bi_internal::isEven()) 
            {
                loc4 = new BarrettReduction(arg2);
            }
            else 
            {
                loc4 = new MontgomeryReduction(arg2);
            }
            var loc5:*=[];
            var loc6:*=3;
            var loc7:*;
            --loc7;
            var loc8:*=(1 << loc2 - 1);
            loc5[1] = loc4.convert(this);
            if (loc2 > 1) 
            {
                loc14 = new com.hurlant.math.BigInteger();
                loc4.sqrTo(loc5[1], loc14);
                while (loc6 <= loc8) 
                {
                    loc5[loc6] = new com.hurlant.math.BigInteger();
                    loc4.mulTo(loc14, loc5[loc6 - 2], loc5[loc6]);
                    loc6 = loc6 + 2;
                }
            }
            var loc9:*=(arg1.t - 1);
            var loc11:*=true;
            var loc12:*=new com.hurlant.math.BigInteger();
            loc1 = (bi_internal::nbits(arg1.bi_internal::a[loc9]) - 1);
            while (loc9 >= 0) 
            {
                if (loc1 >= loc7) 
                {
                    loc10 = arg1.bi_internal::a[loc9] >> loc1 - loc7 & loc8;
                }
                else 
                {
                    loc10 = (arg1.bi_internal::a[loc9] & (1 << loc1 + 1 - 1)) << loc7 - loc1;
                    if (loc9 > 0) 
                    {
                        loc10 = loc10 | arg1.bi_internal::a[(loc9 - 1)] >> DB + loc1 - loc7;
                    }
                }
                loc6 = loc2;
                while ((loc10 & 1) == 0) 
                {
                    loc10 = loc10 >> 1;
                    --loc6;
                }
                var loc15:*;
                loc1 = loc15 = loc1 - loc6;
                if (loc15 < 0) 
                {
                    loc1 = loc1 + DB;
                    --loc9;
                }
                if (loc11) 
                {
                    loc5[loc10].copyTo(loc3);
                    loc11 = false;
                }
                else 
                {
                    while (loc6 > 1) 
                    {
                        loc4.sqrTo(loc3, loc12);
                        loc4.sqrTo(loc12, loc3);
                        loc6 = loc6 - 2;
                    }
                    if (loc6 > 0) 
                    {
                        loc4.sqrTo(loc3, loc12);
                    }
                    else 
                    {
                        loc13 = loc3;
                        loc3 = loc12;
                        loc12 = loc13;
                    }
                    loc4.mulTo(loc12, loc5[loc10], loc3);
                }
                while (loc9 >= 0 && (arg1.bi_internal::a[loc9] & 1 << loc1) == 0) 
                {
                    loc4.sqrTo(loc3, loc12);
                    loc13 = loc3;
                    loc3 = loc12;
                    loc12 = loc13;
                    if (!(--loc1 < 0)) 
                    {
                        continue;
                    }
                    loc1 = (DB - 1);
                    --loc9;
                }
            }
            return loc4.revert(loc3);
        }

        public function isProbablePrime(arg1:int):Boolean
        {
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=0;
            var loc2:*=abs();
            if (loc2.t == 1 && loc2.bi_internal::a[0] <= lowprimes[(lowprimes.length - 1)]) 
            {
                loc1 = 0;
                while (loc1 < lowprimes.length) 
                {
                    if (loc2[0] == lowprimes[loc1]) 
                    {
                        return true;
                    }
                    ++loc1;
                }
                return false;
            }
            if (loc2.bi_internal::isEven()) 
            {
                return false;
            }
            loc1 = 1;
            while (loc1 < lowprimes.length) 
            {
                loc3 = lowprimes[loc1];
                loc4 = loc1 + 1;
                while (loc4 < lowprimes.length && loc3 < lplim) 
                {
                    loc3 = loc3 * lowprimes[loc4++];
                }
                loc3 = loc2.modInt(loc3);
                while (loc1 < loc4) 
                {
                    if (loc3 % lowprimes[loc1++] != 0) 
                    {
                        continue;
                    }
                    return false;
                }
            }
            return loc2.millerRabin(arg1);
        }

        public function divide(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bi_internal::divRemTo(arg1, loc1, null);
            return loc1;
        }

        public function mod(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=nbi();
            abs().bi_internal::divRemTo(arg1, null, loc1);
            if (bi_internal::s < 0 && loc1.compareTo(ZERO) > 0) 
            {
                arg1.bi_internal::subTo(loc1, loc1);
            }
            return loc1;
        }

        protected function addTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=Math.min(arg1.t, t);
            while (loc1 < loc3) 
            {
                loc2 = loc2 + (this.bi_internal::a[loc1] + arg1.bi_internal::a[loc1]);
                var loc4:*;
                arg2.bi_internal::a[loc4 = loc1++] = loc2 & DM;
                loc2 = loc2 >> DB;
            }
            if (arg1.t < t) 
            {
                loc2 = loc2 + arg1.bi_internal::s;
                while (loc1 < t) 
                {
                    loc2 = loc2 + this.bi_internal::a[loc1];
                    arg2.bi_internal::a[loc4 = loc1++] = loc2 & DM;
                    loc2 = loc2 >> DB;
                }
                loc2 = loc2 + bi_internal::s;
            }
            else 
            {
                loc2 = loc2 + bi_internal::s;
                while (loc1 < arg1.t) 
                {
                    loc2 = loc2 + arg1.bi_internal::a[loc1];
                    arg2.bi_internal::a[loc4 = loc1++] = loc2 & DM;
                    loc2 = loc2 >> DB;
                }
                loc2 = loc2 + arg1.bi_internal::s;
            }
            arg2.bi_internal::s = loc2 < 0 ? -1 : 0;
            if (loc2 > 0) 
            {
                arg2.bi_internal::a[loc4 = loc1++] = loc2;
            }
            else if (loc2 < -1) 
            {
                arg2.bi_internal::a[loc4 = loc1++] = DV + loc2;
            }
            arg2.t = loc1;
            arg2.bi_internal::clamp();
            return;
        }

        protected function bitwiseTo(arg1:com.hurlant.math.BigInteger, arg2:Function, arg3:com.hurlant.math.BigInteger):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=Math.min(arg1.t, t);
            loc1 = 0;
            while (loc1 < loc3) 
            {
                arg3.bi_internal::a[loc1] = arg2(this.bi_internal::a[loc1], arg1.bi_internal::a[loc1]);
                ++loc1;
            }
            if (arg1.t < t) 
            {
                loc2 = arg1.bi_internal::s & DM;
                loc1 = loc3;
                while (loc1 < t) 
                {
                    arg3.bi_internal::a[loc1] = arg2(this.bi_internal::a[loc1], loc2);
                    ++loc1;
                }
                arg3.t = t;
            }
            else 
            {
                loc2 = bi_internal::s & DM;
                loc1 = loc3;
                while (loc1 < arg1.t) 
                {
                    arg3.bi_internal::a[loc1] = arg2(loc2, arg1.bi_internal::a[loc1]);
                    ++loc1;
                }
                arg3.t = arg1.t;
            }
            arg3.bi_internal::s = arg2(bi_internal::s, arg1.bi_internal::s);
            arg3.bi_internal::clamp();
            return;
        }

        protected function modInt(arg1:int):int
        {
            var loc3:*=0;
            if (arg1 <= 0) 
            {
                return 0;
            }
            var loc1:*=DV % arg1;
            var loc2:*=bi_internal::s < 0 ? (arg1 - 1) : 0;
            if (t > 0) 
            {
                if (loc1 != 0) 
                {
                    loc3 = (t - 1);
                    while (loc3 >= 0) 
                    {
                        loc2 = (loc1 * loc2 + bi_internal::a[loc3]) % arg1;
                        --loc3;
                    }
                }
                else 
                {
                    loc2 = bi_internal::a[0] % arg1;
                }
            }
            return loc2;
        }

        protected function chunkSize(arg1:Number):int
        {
            return Math.floor(Math.LN2 * DB / Math.log(arg1));
        }

        public function gcd(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc5:*=null;
            var loc1:*=bi_internal::s < 0 ? negate() : clone();
            var loc2:*=arg1.bi_internal::s < 0 ? arg1.negate() : arg1.clone();
            if (loc1.compareTo(loc2) < 0) 
            {
                loc5 = loc1;
                loc1 = loc2;
                loc2 = loc5;
            }
            var loc3:*=loc1.getLowestSetBit();
            var loc4:*;
            if ((loc4 = loc2.getLowestSetBit()) < 0) 
            {
                return loc1;
            }
            if (loc3 < loc4) 
            {
                loc4 = loc3;
            }
            if (loc4 > 0) 
            {
                loc1.bi_internal::rShiftTo(loc4, loc1);
                loc2.bi_internal::rShiftTo(loc4, loc2);
            }
            while (loc1.sigNum() > 0) 
            {
                var loc6:*;
                loc3 = loc6 = loc1.getLowestSetBit();
                if (loc6 > 0) 
                {
                    loc1.bi_internal::rShiftTo(loc3, loc1);
                }
                loc3 = loc6 = loc2.getLowestSetBit();
                if (loc6 > 0) 
                {
                    loc2.bi_internal::rShiftTo(loc3, loc2);
                }
                if (loc1.compareTo(loc2) >= 0) 
                {
                    loc1.bi_internal::subTo(loc2, loc1);
                    loc1.bi_internal::rShiftTo(1, loc1);
                    continue;
                }
                loc2.bi_internal::subTo(loc1, loc2);
                loc2.bi_internal::rShiftTo(1, loc2);
            }
            if (loc4 > 0) 
            {
                loc2.bi_internal::lShiftTo(loc4, loc2);
            }
            return loc2;
        }

        bi_internal function dAddOffset(arg1:int, arg2:int):void
        {
            while (t <= arg2) 
            {
                var loc2:*;
                var loc1:*=t++;
                bi_internal::a[loc1] = 0;
            }
            bi_internal::a[arg2] = bi_internal::a[arg2] + arg1;
            while (bi_internal::a[arg2] >= DV) 
            {
                bi_internal::a[arg2] = bi_internal::a[arg2] - DV;
                if (++arg2 >= t) 
                {
                    loc1 = t++;
                    bi_internal::a[loc1] = 0;
                }
                loc3 = ((loc1 = bi_internal::a)[loc2 = arg2] + 1);
                loc1[loc2] = loc3;
            }
            return;
        }

        bi_internal function lShiftTo(arg1:int, arg2:com.hurlant.math.BigInteger):void
        {
            var loc6:*=0;
            var loc1:*=arg1 % DB;
            var loc2:*=DB - loc1;
            var loc3:*=(1 << loc2 - 1);
            var loc4:*=arg1 / DB;
            var loc5:*=bi_internal::s << loc1 & DM;
            loc6 = (t - 1);
            while (loc6 >= 0) 
            {
                arg2.bi_internal::a[loc6 + loc4 + 1] = bi_internal::a[loc6] >> loc2 | loc5;
                loc5 = (bi_internal::a[loc6] & loc3) << loc1;
                --loc6;
            }
            --loc6;
            while (loc6 >= 0) 
            {
                arg2.bi_internal::a[loc6] = 0;
                --loc6;
            }
            arg2.bi_internal::a[loc4] = loc5;
            arg2.t = t + loc4 + 1;
            arg2.bi_internal::s = bi_internal::s;
            arg2.bi_internal::clamp();
            return;
        }

        public function getLowestSetBit():int
        {
            var loc1:*=0;
            while (loc1 < t) 
            {
                if (bi_internal::a[loc1] != 0) 
                {
                    return loc1 * DB + lbit(bi_internal::a[loc1]);
                }
                ++loc1;
            }
            if (bi_internal::s < 0) 
            {
                return t * DB;
            }
            return -1;
        }

        public function subtract(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bi_internal::subTo(arg1, loc1);
            return loc1;
        }

        public function primify(arg1:int, arg2:int):void
        {
            if (!testBit((arg1 - 1))) 
            {
                bitwiseTo(com.hurlant.math.BigInteger.ONE.shiftLeft((arg1 - 1)), op_or, this);
            }
            if (bi_internal::isEven()) 
            {
                bi_internal::dAddOffset(1, 0);
            }
            while (!isProbablePrime(arg2)) 
            {
                bi_internal::dAddOffset(2, 0);
                while (bitLength() > arg1) 
                {
                    bi_internal::subTo(com.hurlant.math.BigInteger.ONE.shiftLeft((arg1 - 1)), this);
                }
            }
            return;
        }

        bi_internal function multiplyLowerTo(arg1:com.hurlant.math.BigInteger, arg2:int, arg3:com.hurlant.math.BigInteger):void
        {
            var loc2:*=0;
            var loc1:*=Math.min(t + arg1.t, arg2);
            arg3.bi_internal::s = 0;
            arg3.t = loc1;
            while (loc1 > 0) 
            {
                var loc3:*;
                arg3.bi_internal::a[loc3 = --loc1] = 0;
            }
            loc2 = arg3.t - t;
            while (loc1 < loc2) 
            {
                arg3.bi_internal::a[loc1 + t] = bi_internal::am(0, arg1.bi_internal::a[loc1], arg3, loc1, 0, t);
                ++loc1;
            }
            loc2 = Math.min(arg1.t, arg2);
            while (loc1 < loc2) 
            {
                bi_internal::am(0, arg1.bi_internal::a[loc1], arg3, loc1, 0, arg2 - loc1);
                ++loc1;
            }
            arg3.bi_internal::clamp();
            return;
        }

        public function modPowInt(arg1:int, arg2:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=null;
            if (arg1 < 256 || arg2.bi_internal::isEven()) 
            {
                loc1 = new ClassicReduction(arg2);
            }
            else 
            {
                loc1 = new MontgomeryReduction(arg2);
            }
            return bi_internal::exp(arg1, loc1);
        }

        bi_internal function intAt(arg1:String, arg2:int):int
        {
            return parseInt(arg1.charAt(arg2), 36);
        }

        public function testBit(arg1:int):Boolean
        {
            var loc1:*=Math.floor(arg1 / DB);
            if (loc1 >= t) 
            {
                return !(bi_internal::s == 0);
            }
            return !((bi_internal::a[loc1] & 1 << arg1 % DB) == 0);
        }

        bi_internal function exp(arg1:int, arg2:IReduction):com.hurlant.math.BigInteger
        {
            var loc5:*=null;
            if (arg1 > 4294967295 || arg1 < 1) 
            {
                return ONE;
            }
            var loc1:*=nbi();
            var loc2:*=nbi();
            var loc3:*=arg2.convert(this);
            var loc4:*=(bi_internal::nbits(arg1) - 1);
            loc3.bi_internal::copyTo(loc1);
            while (--loc4 >= 0) 
            {
                arg2.sqrTo(loc1, loc2);
                if ((arg1 & 1 << loc4) > 0) 
                {
                    arg2.mulTo(loc2, loc3, loc1);
                    continue;
                }
                loc5 = loc1;
                loc1 = loc2;
                loc2 = loc5;
            }
            return arg2.revert(loc1);
        }

        public function toArray(arg1:flash.utils.ByteArray):uint
        {
            var loc1:*=8;
            var loc2:*=(1 << 8 - 1);
            var loc3:*=0;
            var loc4:*=t;
            var loc5:*=DB - loc4 * DB % loc1;
            var loc6:*=false;
            var loc7:*=0;
            if (loc4-- > 0) 
            {
                if (loc5 < DB) 
                {
                    loc5 < DB;
                    var loc8:*;
                    loc3 = loc8 = bi_internal::a[loc4] >> loc5;
                }
                if (loc5 < DB) 
                {
                    loc6 = true;
                    arg1.writeByte(loc3);
                    ++loc7;
                }
                while (loc4 >= 0) 
                {
                    if (loc5 < loc1) 
                    {
                        loc5 = loc8 = loc5 + (DB - loc1);
                        loc3 = (loc3 = (bi_internal::a[loc4] & (1 << loc5 - 1)) << loc1 - loc5) | bi_internal::a[--loc4] >> loc8;
                    }
                    else 
                    {
                        loc5 = loc8 = loc5 - loc1;
                        loc3 = bi_internal::a[loc4] >> loc8 & loc2;
                        if (loc5 <= 0) 
                        {
                            loc5 = loc5 + DB;
                            --loc4;
                        }
                    }
                    if (loc3 > 0) 
                    {
                        loc6 = true;
                    }
                    if (!loc6) 
                    {
                        continue;
                    }
                    arg1.writeByte(loc3);
                    ++loc7;
                }
            }
            return loc7;
        }

        public function dispose():void
        {
            var loc1:*=new com.hurlant.crypto.prng.Random();
            var loc2:*=0;
            while (loc2 < bi_internal::a.length) 
            {
                bi_internal::a[loc2] = loc1.nextByte();
                delete bi_internal::a[loc2];
                ++loc2;
            }
            bi_internal::a = null;
            t = 0;
            bi_internal::s = 0;
            com.hurlant.util.Memory.gc();
            return;
        }

        internal function lbit(arg1:int):int
        {
            if (arg1 == 0) 
            {
                return -1;
            }
            var loc1:*=0;
            if ((arg1 & 65535) == 0) 
            {
                arg1 = arg1 >> 16;
                loc1 = loc1 + 16;
            }
            if ((arg1 & 255) == 0) 
            {
                arg1 = arg1 >> 8;
                loc1 = loc1 + 8;
            }
            if ((arg1 & 15) == 0) 
            {
                arg1 = arg1 >> 4;
                loc1 = loc1 + 4;
            }
            if ((arg1 & 3) == 0) 
            {
                arg1 = arg1 >> 2;
                loc1 = loc1 + 2;
            }
            if ((arg1 & 1) == 0) 
            {
                ++loc1;
            }
            return loc1;
        }

        bi_internal function divRemTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger=null, arg3:com.hurlant.math.BigInteger=null):void
        {
            var y:com.hurlant.math.BigInteger;
            var nsh:int;
            var pt:com.hurlant.math.BigInteger;
            var d1:Number;
            var d2:Number;
            var qd:int;
            var y0:int;
            var yt:Number;
            var ys:int;
            var e:Number;
            var ms:int;
            var j:int;
            var m:com.hurlant.math.BigInteger;
            var i:int;
            var q:com.hurlant.math.BigInteger=null;
            var r:com.hurlant.math.BigInteger=null;
            var t:com.hurlant.math.BigInteger;
            var pm:com.hurlant.math.BigInteger;
            var ts:int;

            var loc1:*;
            qd = 0;
            m = arg1;
            q = arg2;
            r = arg3;
            pm = m.abs();
            if (pm.t <= 0) 
            {
                return;
            }
            pt = abs();
            if (pt.t < pm.t) 
            {
                if (q != null) 
                {
                    q.bi_internal::fromInt(0);
                }
                if (r != null) 
                {
                    bi_internal::copyTo(r);
                }
                return;
            }
            if (r == null) 
            {
                r = nbi();
            }
            y = nbi();
            ts = bi_internal::s;
            ms = m.bi_internal::s;
            nsh = DB - bi_internal::nbits(pm.bi_internal::a[(pm.t - 1)]);
            if (nsh > 0) 
            {
                pm.bi_internal::lShiftTo(nsh, y);
                pt.bi_internal::lShiftTo(nsh, r);
            }
            else 
            {
                pm.bi_internal::copyTo(y);
                pt.bi_internal::copyTo(r);
            }
            ys = y.t;
            y0 = y.bi_internal::a[(ys - 1)];
            if (y0 == 0) 
            {
                return;
            }
            yt = y0 * (1 << F1) + (ys > 1 ? y.bi_internal::a[ys - 2] >> F2 : 0);
            d1 = FV / yt;
            d2 = (1 << F1) / yt;
            e = 1 << F2;
            i = r.t;
            j = i - ys;
            t = q != null ? q : nbi();
            y.bi_internal::dlShiftTo(j, t);
            if (r.compareTo(t) >= 0) 
            {
                var loc3:*;
                var loc4:*=((loc3 = r).t + 1);
                loc3.t = loc4;
                var loc2:*;
                r.bi_internal::a[loc2 = (loc3 = r).t] = 1;
                r.bi_internal::subTo(t, r);
            }
            ONE.bi_internal::dlShiftTo(ys, t);
            t.bi_internal::subTo(y, y);
            while (y.t < ys) 
            {
                loc3 = 0;
                loc4 = y;
                loc2 = new XMLList("");
                for each (var loc5:* in loc4) 
                {
                    var loc6:*;
                    with (loc6 = loc5) 
                    {
                        var loc7:*;
                        var loc8:*=((loc7 = y).t + 1);
                        loc7.t = loc8;
                        if (0) 
                        {
                            loc2[loc3] = loc5;
                        }
                    }
                }
            }
            while ((j = (j - 1)) >= 0) 
            {
                qd = r.bi_internal::a[i = (i - 1)] != y0 ? Number(r.bi_internal::a[i]) * d1 + (Number(r.bi_internal::a[(i - 1)]) + e) * d2 : DM;
                r.bi_internal::a[i] = loc2 = r.bi_internal::a[i] + y.bi_internal::am(0, qd, r, j, 0, ys);
                if (!(loc2 < qd)) 
                {
                    continue;
                }
                y.bi_internal::dlShiftTo(j, t);
                r.bi_internal::subTo(t, r);
                while (r.bi_internal::a[i] < (qd = (qd - 1))) 
                {
                    r.bi_internal::subTo(t, r);
                }
            }
            if (q != null) 
            {
                r.bi_internal::drShiftTo(ys, q);
                if (ts != ms) 
                {
                    ZERO.bi_internal::subTo(q, q);
                }
            }
            r.t = ys;
            r.bi_internal::clamp();
            if (nsh > 0) 
            {
                r.bi_internal::rShiftTo(nsh, r);
            }
            if (ts < 0) 
            {
                ZERO.bi_internal::subTo(r, r);
            }
            return;
        }

        public function remainder(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bi_internal::divRemTo(arg1, null, loc1);
            return loc1;
        }

        bi_internal function multiplyUpperTo(arg1:com.hurlant.math.BigInteger, arg2:int, arg3:com.hurlant.math.BigInteger):void
        {
            --arg2;
            var loc2:*;
            arg3.t = loc2 = t + arg1.t - arg2;
            var loc1:*=loc2;
            arg3.bi_internal::s = 0;
            while (--loc1 >= 0) 
            {
                arg3.bi_internal::a[loc1] = 0;
            }
            loc1 = Math.max(arg2 - t, 0);
            while (loc1 < arg1.t) 
            {
                arg3.bi_internal::a[t + loc1 - arg2] = bi_internal::am(arg2 - loc1, arg1.bi_internal::a[loc1], arg3, 0, 0, t + loc1 - arg2);
                ++loc1;
            }
            arg3.bi_internal::clamp();
            arg3.bi_internal::drShiftTo(1, arg3);
            return;
        }

        public function divideAndRemainder(arg1:com.hurlant.math.BigInteger):Array
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            var loc2:*=new com.hurlant.math.BigInteger();
            bi_internal::divRemTo(arg1, loc1, loc2);
            return [loc1, loc2];
        }

        public function valueOf():Number
        {
            var loc1:*=1;
            var loc2:*=0;
            var loc3:*=0;
            while (loc3 < t) 
            {
                loc2 = loc2 + bi_internal::a[loc3] * loc1;
                loc1 = loc1 * DV;
                ++loc3;
            }
            return loc2;
        }

        public function shiftLeft(arg1:int):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            if (arg1 < 0) 
            {
                bi_internal::rShiftTo(-arg1, loc1);
            }
            else 
            {
                bi_internal::lShiftTo(arg1, loc1);
            }
            return loc1;
        }

        public function multiply(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bi_internal::multiplyTo(arg1, loc1);
            return loc1;
        }

        bi_internal function am(arg1:int, arg2:int, arg3:com.hurlant.math.BigInteger, arg4:int, arg5:int, arg6:int):int
        {
            var loc3:*=0;
            var loc4:*=0;
            var loc5:*=0;
            var loc1:*=arg2 & 32767;
            var loc2:*=arg2 >> 15;
            while (--arg6 >= 0) 
            {
                loc3 = bi_internal::a[arg1] & 32767;
                loc4 = bi_internal::a[arg1++] >> 15;
                loc5 = loc2 * loc3 + loc4 * loc1;
                arg5 = ((loc3 = loc1 * loc3 + ((loc5 & 32767) << 15) + arg3.bi_internal::a[arg4] + (arg5 & 1073741823)) >>> 30) + (loc5 >>> 15) + loc2 * loc4 + (arg5 >>> 30);
                var loc6:*;
                arg3.bi_internal::a[loc6 = arg4++] = loc3 & 1073741823;
            }
            return arg5;
        }

        bi_internal function drShiftTo(arg1:int, arg2:com.hurlant.math.BigInteger):void
        {
            var loc1:*=0;
            loc1 = arg1;
            while (loc1 < t) 
            {
                arg2.bi_internal::a[loc1 - arg1] = bi_internal::a[loc1];
                ++loc1;
            }
            arg2.t = Math.max(t - arg1, 0);
            arg2.bi_internal::s = bi_internal::s;
            return;
        }

        public function add(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            addTo(arg1, loc1);
            return loc1;
        }

        protected function nbi():*
        {
            return new com.hurlant.math.BigInteger();
        }

        protected function millerRabin(arg1:int):Boolean
        {
            var loc6:*=null;
            var loc7:*=0;
            var loc1:*=subtract(com.hurlant.math.BigInteger.ONE);
            var loc2:*=loc1.getLowestSetBit();
            if (loc2 <= 0) 
            {
                return false;
            }
            var loc3:*=loc1.shiftRight(loc2);
            arg1 = arg1 + 1 >> 1;
            if (arg1 > lowprimes.length) 
            {
                arg1 = lowprimes.length;
            }
            var loc4:*=new com.hurlant.math.BigInteger();
            var loc5:*=0;
            while (loc5 < arg1) 
            {
                loc4.bi_internal::fromInt(lowprimes[loc5]);
                if (!((loc6 = loc4.modPow(loc3, this)).compareTo(com.hurlant.math.BigInteger.ONE) == 0) && !(loc6.compareTo(loc1) == 0)) 
                {
                    loc7 = 1;
                    while (loc7++ < loc2 && !(loc6.compareTo(loc1) == 0)) 
                    {
                        if ((loc6 = loc6.modPowInt(2, this)).compareTo(com.hurlant.math.BigInteger.ONE) != 0) 
                        {
                            continue;
                        }
                        return false;
                    }
                    if (loc6.compareTo(loc1) != 0) 
                    {
                        return false;
                    }
                }
                ++loc5;
            }
            return true;
        }

        bi_internal function dMultiply(arg1:int):void
        {
            bi_internal::a[t] = bi_internal::am(0, (arg1 - 1), this, 0, 0, t);
            var loc1:*;
            t++;
            bi_internal::clamp();
            return;
        }

        internal function op_andnot(arg1:int, arg2:int):int
        {
            return arg1 & ~arg2;
        }

        bi_internal function clamp():void
        {
            var loc1:*=bi_internal::s & DM;
            while (t > 0 && bi_internal::a[(t - 1)] == loc1) 
            {
                var loc2:*;
                t--;
            }
            return;
        }

        bi_internal function invDigit():int
        {
            if (t < 1) 
            {
                return 0;
            }
            var loc1:*=bi_internal::a[0];
            if ((loc1 & 1) == 0) 
            {
                return 0;
            }
            var loc2:*=loc1 & 3;
            loc2 = loc2 * (2 - (loc1 & 15) * loc2) & 15;
            loc2 = loc2 * (2 - (loc1 & 255) * loc2) & 255;
            loc2 = loc2 * (2 - ((loc1 & 65535) * loc2 & 65535)) & 65535;
            loc2 = loc2 * (2 - loc1 * loc2 % DV) % DV;
            return loc2 > 0 ? DV - loc2 : -loc2;
        }

        protected function changeBit(arg1:int, arg2:Function):com.hurlant.math.BigInteger
        {
            var loc1:*=com.hurlant.math.BigInteger.ONE.shiftLeft(arg1);
            bitwiseTo(loc1, arg2, loc1);
            return loc1;
        }

        public function equals(arg1:com.hurlant.math.BigInteger):Boolean
        {
            return compareTo(arg1) == 0;
        }

        public function compareTo(arg1:com.hurlant.math.BigInteger):int
        {
            var loc1:*=bi_internal::s - arg1.bi_internal::s;
            if (loc1 != 0) 
            {
                return loc1;
            }
            var loc2:*=t;
            loc1 = loc2 - arg1.t;
            if (loc1 != 0) 
            {
                return loc1;
            }
            while (--loc2 >= 0) 
            {
                loc1 = bi_internal::a[loc2] - arg1.bi_internal::a[loc2];
                if (loc1 == 0) 
                {
                    continue;
                }
                return loc1;
            }
            return 0;
        }

        public function shiftRight(arg1:int):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            if (arg1 < 0) 
            {
                bi_internal::lShiftTo(-arg1, loc1);
            }
            else 
            {
                bi_internal::rShiftTo(arg1, loc1);
            }
            return loc1;
        }

        bi_internal function multiplyTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            var loc1:*=abs();
            var loc2:*=arg1.abs();
            var loc3:*=loc1.t;
            arg2.t = loc3 + loc2.t;
            while (--loc3 >= 0) 
            {
                arg2.bi_internal::a[loc3] = 0;
            }
            loc3 = 0;
            while (loc3 < loc2.t) 
            {
                arg2.bi_internal::a[loc3 + loc1.t] = loc1.bi_internal::am(0, loc2.bi_internal::a[loc3], arg2, loc3, 0, loc1.t);
                ++loc3;
            }
            arg2.bi_internal::s = 0;
            arg2.bi_internal::clamp();
            if (bi_internal::s != arg1.bi_internal::s) 
            {
                ZERO.bi_internal::subTo(arg2, arg2);
            }
            return;
        }

        public function bitCount():int
        {
            var loc1:*=0;
            var loc2:*=bi_internal::s & DM;
            var loc3:*=0;
            while (loc3 < t) 
            {
                loc1 = loc1 + cbit(bi_internal::a[loc3] ^ loc2);
                ++loc3;
            }
            return loc1;
        }

        protected function toRadix(arg1:uint=10):String
        {
            if (sigNum() == 0 || arg1 < 2 || arg1 > 32) 
            {
                return "0";
            }
            var loc1:*=chunkSize(arg1);
            var loc2:*=Math.pow(arg1, loc1);
            var loc3:*=nbv(loc2);
            var loc4:*=nbi();
            var loc5:*=nbi();
            var loc6:*="";
            bi_internal::divRemTo(loc3, loc4, loc5);
            while (loc4.sigNum() > 0) 
            {
                loc6 = (loc2 + loc5.intValue()).toString(arg1).substr(1) + loc6;
                loc4.bi_internal::divRemTo(loc3, loc4, loc5);
            }
            return loc5.intValue().toString(arg1) + loc6;
        }

        internal function cbit(arg1:int):int
        {
            var loc1:*=0;
            while (arg1 != 0) 
            {
                arg1 = arg1 & (arg1 - 1);
                ++loc1;
            }
            return loc1;
        }

        bi_internal function rShiftTo(arg1:int, arg2:com.hurlant.math.BigInteger):void
        {
            var loc5:*=0;
            arg2.bi_internal::s = bi_internal::s;
            var loc1:*=arg1 / DB;
            if (loc1 >= t) 
            {
                arg2.t = 0;
                return;
            }
            var loc2:*=arg1 % DB;
            var loc3:*=DB - loc2;
            var loc4:*=(1 << loc2 - 1);
            arg2.bi_internal::a[0] = bi_internal::a[loc1] >> loc2;
            loc5 = loc1 + 1;
            while (loc5 < t) 
            {
                arg2.bi_internal::a[(loc5 - loc1 - 1)] = arg2.bi_internal::a[(loc5 - loc1 - 1)] | (bi_internal::a[loc5] & loc4) << loc3;
                arg2.bi_internal::a[loc5 - loc1] = bi_internal::a[loc5] >> loc2;
                ++loc5;
            }
            if (loc2 > 0) 
            {
                arg2.bi_internal::a[(t - loc1 - 1)] = arg2.bi_internal::a[(t - loc1 - 1)] | (bi_internal::s & loc4) << loc3;
            }
            arg2.t = t - loc1;
            arg2.bi_internal::clamp();
            return;
        }

        public function modInverse(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=arg1.bi_internal::isEven();
            if (bi_internal::isEven() && loc1 || arg1.sigNum() == 0) 
            {
                return com.hurlant.math.BigInteger.ZERO;
            }
            var loc2:*=arg1.clone();
            var loc3:*=clone();
            var loc4:*=nbv(1);
            var loc5:*=nbv(0);
            var loc6:*=nbv(0);
            var loc7:*=nbv(1);
            while (loc2.sigNum() != 0) 
            {
                while (loc2.bi_internal::isEven()) 
                {
                    loc2.bi_internal::rShiftTo(1, loc2);
                    if (loc1) 
                    {
                        if (!loc4.bi_internal::isEven() || !loc5.bi_internal::isEven()) 
                        {
                            loc4.addTo(this, loc4);
                            loc5.bi_internal::subTo(arg1, loc5);
                        }
                        loc4.bi_internal::rShiftTo(1, loc4);
                    }
                    else if (!loc5.bi_internal::isEven()) 
                    {
                        loc5.bi_internal::subTo(arg1, loc5);
                    }
                    loc5.bi_internal::rShiftTo(1, loc5);
                }
                while (loc3.bi_internal::isEven()) 
                {
                    loc3.bi_internal::rShiftTo(1, loc3);
                    if (loc1) 
                    {
                        if (!loc6.bi_internal::isEven() || !loc7.bi_internal::isEven()) 
                        {
                            loc6.addTo(this, loc6);
                            loc7.bi_internal::subTo(arg1, loc7);
                        }
                        loc6.bi_internal::rShiftTo(1, loc6);
                    }
                    else if (!loc7.bi_internal::isEven()) 
                    {
                        loc7.bi_internal::subTo(arg1, loc7);
                    }
                    loc7.bi_internal::rShiftTo(1, loc7);
                }
                if (loc2.compareTo(loc3) >= 0) 
                {
                    loc2.bi_internal::subTo(loc3, loc2);
                    if (loc1) 
                    {
                        loc4.bi_internal::subTo(loc6, loc4);
                    }
                    loc5.bi_internal::subTo(loc7, loc5);
                    continue;
                }
                loc3.bi_internal::subTo(loc2, loc3);
                if (loc1) 
                {
                    loc6.bi_internal::subTo(loc4, loc6);
                }
                loc7.bi_internal::subTo(loc5, loc7);
            }
            if (loc3.compareTo(com.hurlant.math.BigInteger.ONE) != 0) 
            {
                return com.hurlant.math.BigInteger.ZERO;
            }
            if (loc7.compareTo(arg1) >= 0) 
            {
                return loc7.subtract(arg1);
            }
            if (loc7.sigNum() < 0) 
            {
                loc7.addTo(arg1, loc7);
            }
            else 
            {
                return loc7;
            }
            if (loc7.sigNum() < 0) 
            {
                return loc7.add(arg1);
            }
            return loc7;
        }

        bi_internal function fromArray(arg1:flash.utils.ByteArray, arg2:int):void
        {
            var loc5:*=0;
            var loc1:*=arg1.position;
            var loc2:*=loc1 + arg2;
            var loc3:*=0;
            var loc4:*=8;
            t = 0;
            bi_internal::s = 0;
            while (--loc2 >= loc1) 
            {
                loc5 = loc2 < arg1.length ? arg1[loc2] : 0;
                if (loc3 != 0) 
                {
                    if (loc3 + loc4 > DB) 
                    {
                        bi_internal::a[(t - 1)] = bi_internal::a[(t - 1)] | (loc5 & (1 << DB - loc3 - 1)) << loc3;
                        bi_internal::a[loc6 = t++] = loc5 >> DB - loc3;
                    }
                    else 
                    {
                        bi_internal::a[(t - 1)] = bi_internal::a[(t - 1)] | loc5 << loc3;
                    }
                }
                else 
                {
                    var loc7:*;
                    var loc6:*;
                    bi_internal::a[loc6 = t++] = loc5;
                }
                if (!((loc3 = loc3 + loc4) >= DB)) 
                {
                    continue;
                }
                loc3 = loc3 - DB;
            }
            bi_internal::clamp();
            arg1.position = Math.min(loc1 + arg2, arg1.length);
            return;
        }

        bi_internal function copyTo(arg1:com.hurlant.math.BigInteger):void
        {
            var loc1:*=(t - 1);
            while (loc1 >= 0) 
            {
                arg1.bi_internal::a[loc1] = bi_internal::a[loc1];
                --loc1;
            }
            arg1.t = t;
            arg1.bi_internal::s = bi_internal::s;
            return;
        }

        public function intValue():int
        {
            if (bi_internal::s < 0) 
            {
                if (t == 1) 
                {
                    return bi_internal::a[0] - DV;
                }
                if (t == 0) 
                {
                    return -1;
                }
            }
            else 
            {
                if (t == 1) 
                {
                    return bi_internal::a[0];
                }
                if (t == 0) 
                {
                    return 0;
                }
            }
            return (bi_internal::a[1] & (1 << 32 - DB - 1)) << DB | bi_internal::a[0];
        }

        public function min(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return compareTo(arg1) < 0 ? this : arg1;
        }

        public function bitLength():int
        {
            if (t <= 0) 
            {
                return 0;
            }
            return DB * (t - 1) + bi_internal::nbits(bi_internal::a[(t - 1)] ^ bi_internal::s & DM);
        }

        public function shortValue():int
        {
            return t != 0 ? bi_internal::a[0] << 16 >> 16 : bi_internal::s;
        }

        public function and(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bitwiseTo(arg1, op_and, loc1);
            return loc1;
        }

        public function byteValue():int
        {
            return t != 0 ? bi_internal::a[0] << 24 >> 24 : bi_internal::s;
        }

        public function not():com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            var loc2:*=0;
            while (loc2 < t) 
            {
                loc1[loc2] = DM & ~bi_internal::a[loc2];
                ++loc2;
            }
            loc1.t = t;
            loc1.bi_internal::s = ~bi_internal::s;
            return loc1;
        }

        bi_internal function subTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            var loc1:*=0;
            var loc2:*=0;
            var loc3:*=Math.min(arg1.t, t);
            while (loc1 < loc3) 
            {
                loc2 = loc2 + (bi_internal::a[loc1] - arg1.bi_internal::a[loc1]);
                var loc4:*;
                arg2.bi_internal::a[loc4 = loc1++] = loc2 & DM;
                loc2 = loc2 >> DB;
            }
            if (arg1.t < t) 
            {
                loc2 = loc2 - arg1.bi_internal::s;
                while (loc1 < t) 
                {
                    loc2 = loc2 + bi_internal::a[loc1];
                    arg2.bi_internal::a[loc4 = loc1++] = loc2 & DM;
                    loc2 = loc2 >> DB;
                }
                loc2 = loc2 + bi_internal::s;
            }
            else 
            {
                loc2 = loc2 + bi_internal::s;
                while (loc1 < arg1.t) 
                {
                    loc2 = loc2 - arg1.bi_internal::a[loc1];
                    arg2.bi_internal::a[loc4 = loc1++] = loc2 & DM;
                    loc2 = loc2 >> DB;
                }
                loc2 = loc2 - arg1.bi_internal::s;
            }
            arg2.bi_internal::s = loc2 < 0 ? -1 : 0;
            if (loc2 < -1) 
            {
                arg2.bi_internal::a[loc4 = loc1++] = DV + loc2;
            }
            else if (loc2 > 0) 
            {
                arg2.bi_internal::a[loc4 = loc1++] = loc2;
            }
            arg2.t = loc1;
            arg2.bi_internal::clamp();
            return;
        }

        public function clone():com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            this.bi_internal::copyTo(loc1);
            return loc1;
        }

        public function pow(arg1:int):com.hurlant.math.BigInteger
        {
            return bi_internal::exp(arg1, new com.hurlant.math.NullReduction());
        }

        public function flipBit(arg1:int):com.hurlant.math.BigInteger
        {
            return changeBit(arg1, op_xor);
        }

        public function xor(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bitwiseTo(arg1, op_xor, loc1);
            return loc1;
        }

        public function or(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            bitwiseTo(arg1, op_or, loc1);
            return loc1;
        }

        public function max(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return compareTo(arg1) > 0 ? this : arg1;
        }

        bi_internal function fromInt(arg1:int):void
        {
            t = 1;
            bi_internal::s = arg1 < 0 ? -1 : 0;
            if (arg1 > 0) 
            {
                bi_internal::a[0] = arg1;
            }
            else if (arg1 < -1) 
            {
                bi_internal::a[0] = arg1 + DV;
            }
            else 
            {
                t = 0;
            }
            return;
        }

        bi_internal function isEven():Boolean
        {
            return (t > 0 ? bi_internal::a[0] & 1 : bi_internal::s) == 0;
        }

        public function toString(arg1:Number=16):String
        {
            var loc1:*=0;
            if (bi_internal::s < 0) 
            {
                return "-" + negate().toString(arg1);
            }
            var loc8:*=arg1;
            switch (loc8) 
            {
                case 2:
                {
                    loc1 = 1;
                    break;
                }
                case 4:
                {
                    loc1 = 2;
                    break;
                }
                case 8:
                {
                    loc1 = 3;
                    break;
                }
                case 16:
                {
                    loc1 = 4;
                    break;
                }
                case 32:
                {
                    loc1 = 5;
                    break;
                }
            }
            var loc2:*=(1 << loc1 - 1);
            var loc3:*=0;
            var loc4:*=false;
            var loc5:*="";
            var loc6:*=t;
            var loc7:*=DB - loc6 * DB % loc1;
            if (loc6-- > 0) 
            {
                if (loc7 < DB) 
                {
                    loc7 < DB;
                    loc3 = loc8 = bi_internal::a[loc6] >> loc7;
                }
                if (loc7 < DB) 
                {
                    loc4 = true;
                    loc5 = loc3.toString(36);
                }
                while (loc6 >= 0) 
                {
                    if (loc7 < loc1) 
                    {
                        loc7 = loc8 = loc7 + (DB - loc1);
                        loc3 = (loc3 = (bi_internal::a[loc6] & (1 << loc7 - 1)) << loc1 - loc7) | bi_internal::a[--loc6] >> loc8;
                    }
                    else 
                    {
                        loc7 = loc8 = loc7 - loc1;
                        loc3 = bi_internal::a[loc6] >> loc8 & loc2;
                        if (loc7 <= 0) 
                        {
                            loc7 = loc7 + DB;
                            --loc6;
                        }
                    }
                    if (loc3 > 0) 
                    {
                        loc4 = true;
                    }
                    if (!loc4) 
                    {
                        continue;
                    }
                    loc5 = loc5 + loc3.toString(36);
                }
            }
            return loc4 ? loc5 : "0";
        }

        public function setBit(arg1:int):com.hurlant.math.BigInteger
        {
            return changeBit(arg1, op_or);
        }

        public function abs():com.hurlant.math.BigInteger
        {
            return bi_internal::s < 0 ? negate() : this;
        }

        bi_internal function nbits(arg1:int):int
        {
            var loc2:*=0;
            var loc1:*=1;
            var loc3:*;
            loc2 = loc3 = arg1 >>> 16;
            if (loc3 != 0) 
            {
                arg1 = loc2;
                loc1 = loc1 + 16;
            }
            loc2 = loc3 = arg1 >> 8;
            if (loc3 != 0) 
            {
                arg1 = loc2;
                loc1 = loc1 + 8;
            }
            loc2 = loc3 = arg1 >> 4;
            if (loc3 != 0) 
            {
                arg1 = loc2;
                loc1 = loc1 + 4;
            }
            loc2 = loc3 = arg1 >> 2;
            if (loc3 != 0) 
            {
                arg1 = loc2;
                loc1 = loc1 + 2;
            }
            loc2 = loc3 = arg1 >> 1;
            if (loc3 != 0) 
            {
                arg1 = loc2;
                loc1 = loc1 + 1;
            }
            return loc1;
        }

        public function sigNum():int
        {
            if (bi_internal::s < 0) 
            {
                return -1;
            }
            if (t <= 0 || t == 1 && bi_internal::a[0] <= 0) 
            {
                return 0;
            }
            return 1;
        }

        public function toByteArray():flash.utils.ByteArray
        {
            var loc4:*=0;
            var loc1:*=t;
            var loc2:*=new flash.utils.ByteArray();
            loc2[0] = bi_internal::s;
            var loc3:*=DB - loc1 * DB % 8;
            var loc5:*=0;
            if (loc1-- > 0) 
            {
                if (loc3 < DB) 
                {
                    loc3 < DB;
                    var loc6:*;
                    loc4 = loc6 = bi_internal::a[loc1] >> loc3;
                }
                if (loc3 < DB) 
                {
                    loc2[loc6 = loc5++] = loc4 | bi_internal::s << DB - loc3;
                }
                while (loc1 >= 0) 
                {
                    if (loc3 < 8) 
                    {
                        loc3 = loc6 = loc3 + (DB - 8);
                        loc4 = (loc4 = (bi_internal::a[loc1] & (1 << loc3 - 1)) << 8 - loc3) | bi_internal::a[--loc1] >> loc6;
                    }
                    else 
                    {
                        loc3 = loc6 = loc3 - 8;
                        loc4 = bi_internal::a[loc1] >> loc6 & 255;
                        if (loc3 <= 0) 
                        {
                            loc3 = loc3 + DB;
                            --loc1;
                        }
                    }
                    if ((loc4 & 128) != 0) 
                    {
                        loc4 = loc4 | -256;
                    }
                    if (loc5 == 0 && !((bi_internal::s & 128) == (loc4 & 128))) 
                    {
                        ++loc5;
                    }
                    if (!(loc5 > 0 || !(loc4 == bi_internal::s))) 
                    {
                        continue;
                    }
                    loc2[loc6 = loc5++] = loc4;
                }
            }
            return loc2;
        }

        bi_internal function squareTo(arg1:com.hurlant.math.BigInteger):void
        {
            var loc3:*=0;
            var loc1:*=abs();
            var loc4:*;
            arg1.t = loc4 = 2 * loc1.t;
            var loc2:*=loc4;
            while (--loc2 >= 0) 
            {
                arg1.bi_internal::a[loc2] = 0;
            }
            loc2 = 0;
            while (loc2 < (loc1.t - 1)) 
            {
                loc3 = loc1.bi_internal::am(loc2, loc1.bi_internal::a[loc2], arg1, 2 * loc2, 0, 1);
                arg1.bi_internal::a[loc2 + loc1.t] = loc4 = arg1.bi_internal::a[loc2 + loc1.t] + loc1.bi_internal::am(loc2 + 1, 2 * loc1.bi_internal::a[loc2], arg1, 2 * loc2 + 1, loc3, (loc1.t - loc2 - 1));
                if (loc4 >= DV) 
                {
                    arg1.bi_internal::a[loc2 + loc1.t] = arg1.bi_internal::a[loc2 + loc1.t] - DV;
                    arg1.bi_internal::a[loc2 + loc1.t + 1] = 1;
                }
                ++loc2;
            }
            if (arg1.t > 0) 
            {
                arg1.bi_internal::a[(arg1.t - 1)] = arg1.bi_internal::a[(arg1.t - 1)] + loc1.bi_internal::am(loc2, loc1.bi_internal::a[loc2], arg1, 2 * loc2, 0, 1);
            }
            arg1.bi_internal::s = 0;
            arg1.bi_internal::clamp();
            return;
        }

        internal function op_and(arg1:int, arg2:int):int
        {
            return arg1 & arg2;
        }

        protected function fromRadix(arg1:String, arg2:int=10):void
        {
            var loc7:*=0;
            bi_internal::fromInt(0);
            var loc1:*=chunkSize(arg2);
            var loc2:*=Math.pow(arg2, loc1);
            var loc3:*=false;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            while (loc6 < arg1.length) 
            {
                if ((loc7 = bi_internal::intAt(arg1, loc6)) < 0) 
                {
                    if (arg1.charAt(loc6) == "-" && sigNum() == 0) 
                    {
                        loc3 = true;
                    }
                }
                else 
                {
                    loc5 = arg2 * loc5 + loc7;
                    if (++loc4 >= loc1) 
                    {
                        bi_internal::dMultiply(loc2);
                        bi_internal::dAddOffset(loc5, 0);
                        loc4 = 0;
                        loc5 = 0;
                    }
                }
                ++loc6;
            }
            if (loc4 > 0) 
            {
                bi_internal::dMultiply(Math.pow(arg2, loc4));
                bi_internal::dAddOffset(loc5, 0);
            }
            if (loc3) 
            {
                com.hurlant.math.BigInteger.ZERO.bi_internal::subTo(this, this);
            }
            return;
        }

        bi_internal function dlShiftTo(arg1:int, arg2:com.hurlant.math.BigInteger):void
        {
            var loc1:*=0;
            loc1 = (t - 1);
            while (loc1 >= 0) 
            {
                arg2.bi_internal::a[loc1 + arg1] = bi_internal::a[loc1];
                --loc1;
            }
            --loc1;
            while (loc1 >= 0) 
            {
                arg2.bi_internal::a[loc1] = 0;
                --loc1;
            }
            arg2.t = t + arg1;
            arg2.bi_internal::s = bi_internal::s;
            return;
        }

        internal function op_xor(arg1:int, arg2:int):int
        {
            return arg1 ^ arg2;
        }

        public static function nbv(arg1:int):com.hurlant.math.BigInteger
        {
            var loc1:*=new BigInteger();
            loc1.bi_internal::fromInt(arg1);
            return loc1;
        }

        public static const ONE:com.hurlant.math.BigInteger=nbv(1);

        public static const ZERO:com.hurlant.math.BigInteger=nbv(0);

        public static const DM:int=(DV - 1);

        public static const F1:int=BI_FP - DB;

        public static const F2:int=2 * DB - BI_FP;

        public static const lplim:int=(1 << 26) / lowprimes[(lowprimes.length - 1)];

        public static const lowprimes:Array=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];

        public static const FV:Number=Math.pow(2, BI_FP);

        public static const BI_FP:int=52;

        public static const DV:int=1 << DB;

        public static const DB:int=30;

        bi_internal var a:Array;

        bi_internal var s:int;

        public var t:int;
    }
}


//        class ClassicReduction
package com.hurlant.math 
{
    use namespace bi_internal;
    
    internal class ClassicReduction extends Object implements com.hurlant.math.IReduction
    {
        public function ClassicReduction(arg1:com.hurlant.math.BigInteger)
        {
            super();
            this.m = arg1;
            return;
        }

        public function revert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return arg1;
        }

        public function reduce(arg1:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::divRemTo(m, null, arg1);
            return;
        }

        public function mulTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger, arg3:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::multiplyTo(arg2, arg3);
            reduce(arg3);
            return;
        }

        public function sqrTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::squareTo(arg2);
            reduce(arg2);
            return;
        }

        public function convert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            if (arg1.bi_internal::s < 0 || arg1.compareTo(m) >= 0) 
            {
                return arg1.mod(m);
            }
            return arg1;
        }

        internal var m:com.hurlant.math.BigInteger;
    }
}


//        class IReduction
package com.hurlant.math 
{
    internal interface IReduction
    {
        function revert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger;

        function reduce(arg1:com.hurlant.math.BigInteger):void;

        function convert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger;

        function mulTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger, arg3:com.hurlant.math.BigInteger):void;

        function sqrTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void;
    }
}


//        class MontgomeryReduction
package com.hurlant.math 
{
    use namespace bi_internal;
    
    internal class MontgomeryReduction extends Object implements com.hurlant.math.IReduction
    {
        public function MontgomeryReduction(arg1:com.hurlant.math.BigInteger)
        {
            super();
            this.m = arg1;
            mp = arg1.bi_internal::invDigit();
            mpl = mp & 32767;
            mph = mp >> 15;
            um = (1 << com.hurlant.math.BigInteger.DB - 15 - 1);
            mt2 = 2 * arg1.t;
            return;
        }

        public function convert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            arg1.abs().bi_internal::dlShiftTo(m.t, loc1);
            loc1.bi_internal::divRemTo(m, null, loc1);
            if (arg1.bi_internal::s < 0 && loc1.compareTo(com.hurlant.math.BigInteger.ZERO) > 0) 
            {
                m.bi_internal::subTo(loc1, loc1);
            }
            return loc1;
        }

        public function revert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            var loc1:*=new com.hurlant.math.BigInteger();
            arg1.bi_internal::copyTo(loc1);
            reduce(loc1);
            return loc1;
        }

        public function sqrTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::squareTo(arg2);
            reduce(arg2);
            return;
        }

        public function reduce(arg1:com.hurlant.math.BigInteger):void
        {
            var loc2:*=0;
            var loc3:*=0;
            while (arg1.t <= mt2) 
            {
                var loc5:*;
                var loc6:*=((loc5 = arg1).t + 1);
                loc5.t = loc6;
                var loc4:*;
                arg1.bi_internal::a[loc4 = (loc5 = arg1).t] = 0;
            }
            var loc1:*=0;
            while (loc1 < m.t) 
            {
                loc2 = arg1.bi_internal::a[loc1] & 32767;
                loc3 = loc2 * mpl + ((loc2 * mph + (arg1.bi_internal::a[loc1] >> 15) * mpl & um) << 15) & com.hurlant.math.BigInteger.DM;
                loc2 = loc1 + m.t;
                arg1.bi_internal::a[loc2] = arg1.bi_internal::a[loc2] + m.bi_internal::am(0, loc3, arg1, loc1, 0, m.t);
                while (arg1.bi_internal::a[loc2] >= com.hurlant.math.BigInteger.DV) 
                {
                    arg1.bi_internal::a[loc2] = arg1.bi_internal::a[loc2] - com.hurlant.math.BigInteger.DV;
                    loc6 = ((loc4 = arg1.bi_internal::a)[loc5 = ++loc2] + 1);
                    loc4[loc5] = loc6;
                }
                ++loc1;
            }
            arg1.bi_internal::clamp();
            arg1.bi_internal::drShiftTo(m.t, arg1);
            if (arg1.compareTo(m) >= 0) 
            {
                arg1.bi_internal::subTo(m, arg1);
            }
            return;
        }

        public function mulTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger, arg3:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::multiplyTo(arg2, arg3);
            reduce(arg3);
            return;
        }

        internal var mp:int;

        internal var mph:int;

        internal var mpl:int;

        internal var mt2:int;

        internal var m:com.hurlant.math.BigInteger;

        internal var um:int;
    }
}


//        class NullReduction
package com.hurlant.math 
{
    use namespace bi_internal;
    
    public class NullReduction extends Object implements com.hurlant.math.IReduction
    {
        public function NullReduction()
        {
            super();
            return;
        }

        public function convert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return arg1;
        }

        public function sqrTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::squareTo(arg2);
            return;
        }

        public function mulTo(arg1:com.hurlant.math.BigInteger, arg2:com.hurlant.math.BigInteger, arg3:com.hurlant.math.BigInteger):void
        {
            arg1.bi_internal::multiplyTo(arg2, arg3);
            return;
        }

        public function revert(arg1:com.hurlant.math.BigInteger):com.hurlant.math.BigInteger
        {
            return arg1;
        }

        public function reduce(arg1:com.hurlant.math.BigInteger):void
        {
            return;
        }
    }
}


//        namespace bi_internal
package com.hurlant.math 
{
    public namespace bi_internal="http://crypto.hurlant.com/BigInteger";
}


//      package util
//        package der
//          class AsciiString
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public class AsciiString extends Object implements com.hurlant.util.der.IAsn1Type
    {
        public function AsciiString(arg1:uint, arg2:uint, arg3:flash.utils.ByteArray)
        {
            super();
            this.type = arg1;
            this.len = arg2;
            this.bytearr = arg3;
            this.str = "";
            var loc1:*=0;
            while (loc1 < len) 
            {
                this.str = this.str + String.fromCharCode(this.bytearr[loc1]);
                ++loc1;
            }
            return;
        }

        public function getLength():uint
        {
            return this.len;
        }

        public function toString(arg1:Number=0):String
        {
            return com.hurlant.util.der.DER.indent + "AsciiString[" + this.type + "][" + this.len + "][" + this.str + "]";
        }

        public function getType():uint
        {
            return this.type;
        }

        public function toDER():flash.utils.ByteArray
        {
            return com.hurlant.util.der.DER.wrapDER(this.type, this.bytearr);
        }

        internal var str:String;

        internal var len:uint;

        internal var bytearr:flash.utils.ByteArray;

        internal var type:uint;
    }
}


//          class ByteString
package com.hurlant.util.der 
{
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class ByteString extends flash.utils.ByteArray implements com.hurlant.util.der.IAsn1Type
    {
        public function ByteString(arg1:uint=4, arg2:uint=0)
        {
            super();
            this.type = arg1;
            this.len = arg2;
            return;
        }

        public function getType():uint
        {
            return type;
        }

        public function toDER():flash.utils.ByteArray
        {
            return com.hurlant.util.der.DER.wrapDER(type, this);
        }

        public function getLength():uint
        {
            return len;
        }

        public override function toString():String
        {
            return com.hurlant.util.der.DER.indent + "ByteString[" + type + "][" + len + "][" + com.hurlant.util.Hex.fromArray(this) + "]";
        }

        internal var type:uint;

        internal var len:uint;
    }
}


//          class DER
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public class DER extends Object
    {
        public function DER()
        {
            super();
            return;
        }

        public static function parse(arg1:flash.utils.ByteArray, arg2:*=null):com.hurlant.util.der.IAsn1Type
        {
            var loc1:*=0;
            var loc3:*=0;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=0;
            var loc7:*=null;
            var loc8:*=null;
            var loc9:*=null;
            var loc10:*=null;
            var loc11:*=null;
            var loc12:*=null;
            var loc13:*=null;
            var loc14:*=false;
            var loc15:*=false;
            var loc16:*=null;
            var loc17:*=undefined;
            var loc18:*=null;
            var loc19:*=0;
            var loc20:*=null;
            loc1 = arg1.readUnsignedByte();
            var loc2:*=!((loc1 & 32) == 0);
            loc1 = loc1 & 31;
            if ((loc3 = arg1.readUnsignedByte()) >= 128) 
            {
                loc5 = loc3 & 127;
                loc3 = 0;
                while (loc5 > 0) 
                {
                    loc3 = loc3 << 8 | arg1.readUnsignedByte();
                    --loc5;
                }
            }
            var loc21:*=loc1;
        }

        internal static function isConstructedType(arg1:flash.utils.ByteArray):Boolean
        {
            var loc1:*=arg1[arg1.position];
            return !((loc1 & 32) == 0);
        }

        public static function wrapDER(arg1:int, arg2:flash.utils.ByteArray):flash.utils.ByteArray
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeByte(arg1);
            var loc2:*;
            if ((loc2 = arg2.length) < 128) 
            {
                loc1.writeByte(loc2);
            }
            else if (loc2 < 256) 
            {
                loc1.writeByte(1 | 128);
                loc1.writeByte(loc2);
            }
            else if (loc2 < 65536) 
            {
                loc1.writeByte(2 | 128);
                loc1.writeByte(loc2 >> 8);
                loc1.writeByte(loc2);
            }
            else if (loc2 < 65536 * 256) 
            {
                loc1.writeByte(3 | 128);
                loc1.writeByte(loc2 >> 16);
                loc1.writeByte(loc2 >> 8);
                loc1.writeByte(loc2);
            }
            else 
            {
                loc1.writeByte(4 | 128);
                loc1.writeByte(loc2 >> 24);
                loc1.writeByte(loc2 >> 16);
                loc1.writeByte(loc2 >> 8);
                loc1.writeByte(loc2);
            }
            loc1.writeBytes(arg2);
            loc1.position = 0;
            return loc1;
        }

        internal static function getLengthOfNextElement(arg1:flash.utils.ByteArray):int
        {
            var loc3:*=0;
            var loc1:*=arg1.position;
            var loc4:*;
            var loc5:*=((loc4 = arg1).position + 1);
            loc4.position = loc5;
            var loc2:*=arg1.readUnsignedByte();
            if (loc2 >= 128) 
            {
                loc3 = loc2 & 127;
                loc2 = 0;
                while (loc3 > 0) 
                {
                    loc2 = loc2 << 8 | arg1.readUnsignedByte();
                    --loc3;
                }
            }
            loc2 = loc2 + (arg1.position - loc1);
            arg1.position = loc1;
            return loc2;
        }

        
        {
            indent = "";
        }

        public static var indent:String="";
    }
}


//          class IAsn1Type
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public interface IAsn1Type
    {
        function getType():uint;

        function getLength():uint;

        function toDER():flash.utils.ByteArray;
    }
}


//          class Integer
package com.hurlant.util.der 
{
    import com.hurlant.math.*;
    import flash.utils.*;
    
    public class Integer extends com.hurlant.math.BigInteger implements com.hurlant.util.der.IAsn1Type
    {
        public function Integer(arg1:uint, arg2:uint, arg3:flash.utils.ByteArray)
        {
            this.type = arg1;
            this.len = arg2;
            super(arg3);
            return;
        }

        public function getType():uint
        {
            return type;
        }

        public function toDER():flash.utils.ByteArray
        {
            return null;
        }

        public function getLength():uint
        {
            return len;
        }

        public override function toString(arg1:Number=0):String
        {
            return com.hurlant.util.der.DER.indent + "Integer[" + type + "][" + len + "][" + super.toString(16) + "]";
        }

        internal var type:uint;

        internal var len:uint;
    }
}


//          class OID
package com.hurlant.util.der 
{
    public class OID extends Object
    {
        public function OID()
        {
            super();
            return;
        }

        public static const SHA1_WITH_RSA_ENCRYPTION:String="1.2.840.113549.1.1.5";

        public static const RSA_ENCRYPTION:String="1.2.840.113549.1.1.1";

        public static const COUNTRY_NAME:String="2.5.4.6";

        public static const MD2_ALGORITHM:String="1.2.840.113549.2.2";

        public static const MD5_ALGORITHM:String="1.2.840.113549.2.5";

        public static const DSA_WITH_SHA1:String="1.2.840.10040.4.3";

        public static const DSA:String="1.2.840.10040.4.1";

        public static const MD2_WITH_RSA_ENCRYPTION:String="1.2.840.113549.1.1.2";

        public static const STATE_NAME:String="2.5.4.8";

        public static const MD5_WITH_RSA_ENCRYPTION:String="1.2.840.113549.1.1.4";

        public static const ORGANIZATION_NAME:String="2.5.4.10";

        public static const COMMON_NAME:String="2.5.4.3";

        public static const DH_PUBLIC_NUMBER:String="1.2.840.10046.2.1";

        public static const LOCALITY_NAME:String="2.5.4.7";

        public static const SHA1_ALGORITHM:String="1.3.14.3.2.26";

        public static const TITLE:String="2.5.4.12";

        public static const ORG_UNIT_NAME:String="2.5.4.11";

        public static const SURNAME:String="2.5.4.4";
    }
}


//          class ObjectIdentifier
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public class ObjectIdentifier extends Object implements com.hurlant.util.der.IAsn1Type
    {
        public function ObjectIdentifier(arg1:uint, arg2:uint, arg3:*)
        {
            super();
            this.type = arg1;
            this.len = arg2;
            if (arg3 is flash.utils.ByteArray) 
            {
                parse(arg3 as flash.utils.ByteArray);
            }
            else if (arg3 is String) 
            {
                generate(arg3 as String);
            }
            else 
            {
                throw new Error("Invalid call to new ObjectIdentifier");
            }
            return;
        }

        public function dump():String
        {
            return "OID[" + type + "][" + len + "][" + toString() + "]";
        }

        public function getLength():uint
        {
            return len;
        }

        internal function generate(arg1:String):void
        {
            oid = arg1.split(".");
            return;
        }

        public function toString():String
        {
            return com.hurlant.util.der.DER.indent + oid.join(".");
        }

        public function getType():uint
        {
            return type;
        }

        internal function parse(arg1:flash.utils.ByteArray):void
        {
            var loc4:*=false;
            var loc1:*=arg1.readUnsignedByte();
            var loc2:*=[];
            loc2.push(uint(loc1 / 40));
            loc2.push(uint(loc1 % 40));
            var loc3:*=0;
            while (arg1.bytesAvailable > 0) 
            {
                loc1 = arg1.readUnsignedByte();
                loc4 = (loc1 & 128) == 0;
                loc1 = loc1 & 127;
                loc3 = loc3 * 128 + loc1;
                if (!loc4) 
                {
                    continue;
                }
                loc2.push(loc3);
                loc3 = 0;
            }
            oid = loc2;
            return;
        }

        public function toDER():flash.utils.ByteArray
        {
            var loc4:*=0;
            var loc1:*=[];
            loc1[0] = oid[0] * 40 + oid[1];
            var loc2:*=2;
            while (loc2 < oid.length) 
            {
                if ((loc4 = parseInt(oid[loc2])) < 128) 
                {
                    loc1.push(loc4);
                }
                else if (loc4 < 128 * 128) 
                {
                    loc1.push(loc4 >> 7 | 128);
                    loc1.push(loc4 & 127);
                }
                else if (loc4 < 128 * 128 * 128) 
                {
                    loc1.push(loc4 >> 14 | 128);
                    loc1.push(loc4 >> 7 & 127 | 128);
                    loc1.push(loc4 & 127);
                }
                else if (loc4 < 128 * 128 * 128 * 128) 
                {
                    loc1.push(loc4 >> 21 | 128);
                    loc1.push(loc4 >> 14 & 127 | 128);
                    loc1.push(loc4 >> 7 & 127 | 128);
                    loc1.push(loc4 & 127);
                }
                else 
                {
                    throw new Error("OID element bigger than we thought. :(");
                }
                ++loc2;
            }
            len = loc1.length;
            if (type == 0) 
            {
                type = 6;
            }
            loc1.unshift(len);
            loc1.unshift(type);
            var loc3:*=new flash.utils.ByteArray();
            loc2 = 0;
            while (loc2 < loc1.length) 
            {
                loc3[loc2] = loc1[loc2];
                ++loc2;
            }
            return loc3;
        }

        internal var oid:Array;

        internal var len:uint;

        internal var type:uint;
    }
}


//          class PEM
package com.hurlant.util.der 
{
    import com.hurlant.crypto.rsa.*;
    import com.hurlant.util.*;
    import flash.utils.*;
    
    public class PEM extends Object
    {
        public function PEM()
        {
            super();
            return;
        }

        internal static function extractBinary(arg1:String, arg2:String, arg3:String):flash.utils.ByteArray
        {
            var loc1:*;
            if ((loc1 = arg3.indexOf(arg1)) == -1) 
            {
                return null;
            }
            loc1 = loc1 + arg1.length;
            var loc2:*;
            if ((loc2 = arg3.indexOf(arg2)) == -1) 
            {
                return null;
            }
            var loc3:*=(loc3 = arg3.substring(loc1, loc2)).replace(new RegExp("\\s", "mg"), "");
            return com.hurlant.util.Base64.decodeToByteArray(loc3);
        }

        public static function readRSAPrivateKey(arg1:String):com.hurlant.crypto.rsa.RSAKey
        {
            var loc3:*=null;
            var loc1:*=extractBinary(RSA_PRIVATE_KEY_HEADER, RSA_PRIVATE_KEY_FOOTER, arg1);
            if (loc1 == null) 
            {
                return null;
            }
            var loc2:*=com.hurlant.util.der.DER.parse(loc1);
            if (loc2 is Array) 
            {
                loc3 = loc2 as Array;
                return new com.hurlant.crypto.rsa.RSAKey(loc3[1], loc3[2].valueOf(), loc3[3], loc3[4], loc3[5], loc3[6], loc3[7], loc3[8]);
            }
            return null;
        }

        public static function readRSAPublicKey(arg1:String):com.hurlant.crypto.rsa.RSAKey
        {
            var loc3:*=null;
            var loc1:*=extractBinary(RSA_PUBLIC_KEY_HEADER, RSA_PUBLIC_KEY_FOOTER, arg1);
            if (loc1 == null) 
            {
                return null;
            }
            var loc2:*=com.hurlant.util.der.DER.parse(loc1);
            if (loc2 is Array) 
            {
                if ((loc3 = loc2 as Array)[0][0].toString() != com.hurlant.util.der.OID.RSA_ENCRYPTION) 
                {
                    return null;
                }
                loc3[1].position = 1;
                loc2 = com.hurlant.util.der.DER.parse(loc3[1]);
                if (loc2 is Array) 
                {
                    loc3 = loc2 as Array;
                    return new com.hurlant.crypto.rsa.RSAKey(loc3[0], loc3[1]);
                }
                return null;
            }
            return null;
        }

        public static function readCertIntoArray(arg1:String):flash.utils.ByteArray
        {
            var loc1:*=extractBinary(CERTIFICATE_HEADER, CERTIFICATE_FOOTER, arg1);
            return loc1;
        }

        internal static const CERTIFICATE_FOOTER:String="-----END CERTIFICATE-----";

        internal static const RSA_PUBLIC_KEY_HEADER:String="-----BEGIN PUBLIC KEY-----";

        internal static const RSA_PRIVATE_KEY_HEADER:String="-----BEGIN RSA PRIVATE KEY-----";

        internal static const RSA_PUBLIC_KEY_FOOTER:String="-----END PUBLIC KEY-----";

        internal static const CERTIFICATE_HEADER:String="-----BEGIN CERTIFICATE-----";

        internal static const RSA_PRIVATE_KEY_FOOTER:String="-----END RSA PRIVATE KEY-----";
    }
}


//          class PrintableString
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public class PrintableString extends Object implements com.hurlant.util.der.IAsn1Type
    {
        public function PrintableString(arg1:uint, arg2:uint)
        {
            super();
            this.type = arg1;
            this.len = arg2;
            return;
        }

        public function getLength():uint
        {
            return len;
        }

        public function getString():String
        {
            return str;
        }

        public function toString():String
        {
            return com.hurlant.util.der.DER.indent + str;
        }

        public function getType():uint
        {
            return type;
        }

        public function toDER():flash.utils.ByteArray
        {
            return null;
        }

        public function setString(arg1:String):void
        {
            str = arg1;
            return;
        }

        protected var type:uint;

        protected var str:String;

        protected var len:uint;
    }
}


//          class Sequence
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public dynamic class Sequence extends Array implements com.hurlant.util.der.IAsn1Type
    {
        public function Sequence(arg1:uint=48, arg2:uint=0)
        {
            super();
            this.type = arg1;
            this.len = arg2;
            return;
        }

        public function getLength():uint
        {
            return len;
        }

        public function toString():String
        {
            var loc4:*=false;
            var loc5:*=null;
            var loc1:*=com.hurlant.util.der.DER.indent;
            com.hurlant.util.der.DER.indent = com.hurlant.util.der.DER.indent + "    ";
            var loc2:*="";
            var loc3:*=0;
            while (loc3 < length) 
            {
                if (this[loc3] != null) 
                {
                    loc4 = false;
                    var loc6:*=0;
                    var loc7:*=this;
                    for (loc5 in loc7) 
                    {
                        if (!(!(loc3.toString() == loc5) && this[loc3] == this[loc5])) 
                        {
                            continue;
                        }
                        loc2 = loc2 + (loc5 + ": " + this[loc3] + "\n");
                        loc4 = true;
                        break;
                    }
                    if (!loc4) 
                    {
                        loc2 = loc2 + (this[loc3] + "\n");
                    }
                }
                ++loc3;
            }
            com.hurlant.util.der.DER.indent = loc1;
            return com.hurlant.util.der.DER.indent + "Sequence[" + type + "][" + len + "][\n" + loc2 + "\n" + loc1 + "]";
        }

        public function findAttributeValue(arg1:String):com.hurlant.util.der.IAsn1Type
        {
            var loc1:*=undefined;
            var loc2:*=undefined;
            var loc3:*=undefined;
            var loc4:*=null;
            var loc5:*=0;
            var loc6:*=this;
            for each (loc1 in loc6) 
            {
                if (!(loc1 is com.hurlant.util.der.Set)) 
                {
                    continue;
                }
                loc2 = loc1[0];
                if (!(loc2 is com.hurlant.util.der.Sequence)) 
                {
                    continue;
                }
                if (!((loc3 = loc2[0]) is com.hurlant.util.der.ObjectIdentifier)) 
                {
                    continue;
                }
                if ((loc4 = loc3 as com.hurlant.util.der.ObjectIdentifier).toString() != arg1) 
                {
                    continue;
                }
                return loc2[1] as com.hurlant.util.der.IAsn1Type;
            }
            return null;
        }

        public function getType():uint
        {
            return type;
        }

        public function toDER():flash.utils.ByteArray
        {
            var loc3:*=null;
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=0;
            while (loc2 < length) 
            {
                loc3 = this[loc2];
                if (loc3 != null) 
                {
                    loc1.writeBytes(loc3.toDER());
                }
                else 
                {
                    loc1.writeByte(5);
                    loc1.writeByte(0);
                }
                ++loc2;
            }
            return com.hurlant.util.der.DER.wrapDER(type, loc1);
        }

        protected var len:uint;

        protected var type:uint;
    }
}


//          class Set
package com.hurlant.util.der 
{
    public dynamic class Set extends com.hurlant.util.der.Sequence implements com.hurlant.util.der.IAsn1Type
    {
        public function Set(arg1:uint=49, arg2:uint=0)
        {
            super(arg1, arg2);
            return;
        }

        public override function toString():String
        {
            var loc1:*=null;
            loc1 = com.hurlant.util.der.DER.indent;
            com.hurlant.util.der.DER.indent = com.hurlant.util.der.DER.indent + "    ";
            var loc2:*=join("\n");
            com.hurlant.util.der.DER.indent = loc1;
            return com.hurlant.util.der.DER.indent + "Set[" + type + "][" + len + "][\n" + loc2 + "\n" + loc1 + "]";
        }
    }
}


//          class Type
package com.hurlant.util.der 
{
    import com.hurlant.util.*;
    
    public class Type extends Object
    {
        public function Type()
        {
            super();
            return;
        }

        public static const CERTIFICATE:Array=[{"name":"tbsCertificate", "value":[{"name":"tag0", "value":[{"name":"version"}]}, {"name":"serialNumber"}, {"name":"signature"}, {"name":"issuer", "value":[{"name":"type"}, {"name":"value"}]}, {"name":"validity", "value":[{"name":"notBefore"}, {"name":"notAfter"}]}, {"name":"subject"}, {"name":"subjectPublicKeyInfo", "value":[{"name":"algorithm"}, {"name":"subjectPublicKey"}]}, {"name":"issuerUniqueID"}, {"name":"subjectUniqueID"}, {"name":"extensions"}]}, {"name":"signatureAlgorithm"}, {"name":"signatureValue"}];

        public static const TLS_CERT:Array=[{"name":"signedCertificate", "extract":true, "value":[{"name":"versionHolder", "optional":true, "value":[{"name":"version"}], "defaultValue":function ():com.hurlant.util.der.Sequence
        {
            var loc1:*=new com.hurlant.util.der.Sequence(0, 0);
            var loc2:*=new com.hurlant.util.der.Integer(2, 1, com.hurlant.util.Hex.toArray("00"));
            loc1.push(loc2);
            loc1.version = loc2;
            return loc1;
        }()}, {"name":"serialNumber"}, {"name":"signature", "value":[{"name":"algorithmId"}]}, {"name":"issuer", "extract":true, "value":[{"name":"type"}, {"name":"value"}]}, {"name":"validity", "value":[{"name":"notBefore"}, {"name":"notAfter"}]}, {"name":"subject", "extract":true, "value":[]}, {"name":"subjectPublicKeyInfo", "value":[{"name":"algorithm", "value":[{"name":"algorithmId"}]}, {"name":"subjectPublicKey"}]}, {"name":"extensions", "value":[]}]}, {"name":"algorithmIdentifier", "value":[{"name":"algorithmId"}]}, {"name":"encrypted", "value":null}]

        public static const RSA_SIGNATURE:Array=[{"name":"algorithm", "value":[{"name":"algorithmId"}]}, {"name":"hash"}];

        public static const RSA_PUBLIC_KEY:Array=[{"name":"modulus"}, {"name":"publicExponent"}];
    }
}


//          class UTCTime
package com.hurlant.util.der 
{
    import flash.utils.*;
    
    public class UTCTime extends Object implements com.hurlant.util.der.IAsn1Type
    {
        public function UTCTime(arg1:uint, arg2:uint)
        {
            super();
            this.type = arg1;
            this.len = arg2;
            return;
        }

        public function getLength():uint
        {
            return len;
        }

        public function toString():String
        {
            return com.hurlant.util.der.DER.indent + "UTCTime[" + type + "][" + len + "][" + date + "]";
        }

        public function setUTCTime(arg1:String):void
        {
            var loc1:*=parseInt(arg1.substr(0, 2));
            if (loc1 < 50) 
            {
                loc1 = loc1 + 2000;
            }
            else 
            {
                loc1 = loc1 + 1900;
            }
            var loc2:*=parseInt(arg1.substr(2, 2));
            var loc3:*=parseInt(arg1.substr(4, 2));
            var loc4:*=parseInt(arg1.substr(6, 2));
            var loc5:*=parseInt(arg1.substr(8, 2));
            date = new Date(loc1, (loc2 - 1), loc3, loc4, loc5);
            return;
        }

        public function getType():uint
        {
            return type;
        }

        public function toDER():flash.utils.ByteArray
        {
            return null;
        }

        public var date:Date;

        protected var len:uint;

        protected var type:uint;
    }
}


//        class ArrayUtil
package com.hurlant.util 
{
    import flash.utils.*;
    
    public class ArrayUtil extends Object
    {
        public function ArrayUtil()
        {
            super();
            return;
        }

        public static function equals(arg1:flash.utils.ByteArray, arg2:flash.utils.ByteArray):Boolean
        {
            if (arg1.length != arg2.length) 
            {
                return false;
            }
            var loc1:*=arg1.length;
            var loc2:*=0;
            while (loc2 < loc1) 
            {
                if (arg1[loc2] != arg2[loc2]) 
                {
                    return false;
                }
                ++loc2;
            }
            return true;
        }
    }
}


//        class Base64
package com.hurlant.util 
{
    import flash.utils.*;
    
    public class Base64 extends Object
    {
        public function Base64()
        {
            super();
            throw new Error("Base64 class is static container only");
        }

        public static function encode(arg1:String):String
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeUTFBytes(arg1);
            return encodeByteArray(loc1);
        }

        public static function encodeByteArray(arg1:flash.utils.ByteArray):String
        {
            var loc2:*=null;
            var loc4:*=0;
            var loc5:*=0;
            var loc6:*=0;
            var loc1:*="";
            var loc3:*=new Array(4);
            arg1.position = 0;
            while (arg1.bytesAvailable > 0) 
            {
                loc2 = new Array();
                loc4 = 0;
                while (loc4 < 3 && arg1.bytesAvailable > 0) 
                {
                    loc2[loc4] = arg1.readUnsignedByte();
                    ++loc4;
                }
                loc3[0] = (loc2[0] & 252) >> 2;
                loc3[1] = (loc2[0] & 3) << 4 | loc2[1] >> 4;
                loc3[2] = (loc2[1] & 15) << 2 | loc2[2] >> 6;
                loc3[3] = loc2[2] & 63;
                loc5 = loc2.length;
                while (loc5 < 3) 
                {
                    loc3[loc5 + 1] = 64;
                    ++loc5;
                }
                loc6 = 0;
                while (loc6 < loc3.length) 
                {
                    loc1 = loc1 + BASE64_CHARS.charAt(loc3[loc6]);
                    ++loc6;
                }
            }
            return loc1;
        }

        public static function decode(arg1:String):String
        {
            var loc1:*=decodeToByteArray(arg1);
            return loc1.readUTFBytes(loc1.length);
        }

        public static function decodeToByteArray(arg1:String):flash.utils.ByteArray
        {
            var loc5:*=0;
            var loc6:*=0;
            var loc1:*=new flash.utils.ByteArray();
            var loc2:*=new Array(4);
            var loc3:*=new Array(3);
            var loc4:*=0;
            while (loc4 < arg1.length) 
            {
                loc5 = 0;
                while (loc5 < 4 && loc4 + loc5 < arg1.length) 
                {
                    loc2[loc5] = BASE64_CHARS.indexOf(arg1.charAt(loc4 + loc5));
                    ++loc5;
                }
                loc3[0] = (loc2[0] << 2) + ((loc2[1] & 48) >> 4);
                loc3[1] = ((loc2[1] & 15) << 4) + ((loc2[2] & 60) >> 2);
                loc3[2] = ((loc2[2] & 3) << 6) + loc2[3];
                loc6 = 0;
                while (loc6 < loc3.length) 
                {
                    if (loc2[loc6 + 1] == 64) 
                    {
                        break;
                    }
                    loc1.writeByte(loc3[loc6]);
                    ++loc6;
                }
                loc4 = loc4 + 4;
            }
            loc1.position = 0;
            return loc1;
        }

        public static const version:String="1.0.0";

        internal static const BASE64_CHARS:String="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    }
}


//        class Hex
package com.hurlant.util 
{
    import flash.utils.*;
    
    public class Hex extends Object
    {
        public function Hex()
        {
            super();
            return;
        }

        public static function fromString(arg1:String, arg2:Boolean=false):String
        {
            var loc1:*=new flash.utils.ByteArray();
            loc1.writeUTFBytes(arg1);
            return fromArray(loc1, arg2);
        }

        public static function toString(arg1:String):String
        {
            var loc1:*=toArray(arg1);
            return loc1.readUTFBytes(loc1.length);
        }

        public static function toArray(arg1:String):flash.utils.ByteArray
        {
            arg1 = arg1.replace(new RegExp("\\s|:", "gm"), "");
            var loc1:*=new flash.utils.ByteArray();
            if (arg1.length & 1 == 1) 
            {
                arg1 = "0" + arg1;
            }
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc1[loc2 / 2] = parseInt(arg1.substr(loc2, 2), 16);
                loc2 = loc2 + 2;
            }
            return loc1;
        }

        public static function fromArray(arg1:flash.utils.ByteArray, arg2:Boolean=false):String
        {
            var loc1:*="";
            var loc2:*=0;
            while (loc2 < arg1.length) 
            {
                loc1 = loc1 + ("0" + arg1[loc2].toString(16)).substr(-2, 2);
                if (arg2) 
                {
                    if (loc2 < (arg1.length - 1)) 
                    {
                        loc1 = loc1 + ":";
                    }
                }
                ++loc2;
            }
            return loc1;
        }
    }
}


//        class Memory
package com.hurlant.util 
{
    import flash.net.*;
    import flash.system.*;
    
    public class Memory extends Object
    {
        public function Memory()
        {
            super();
            return;
        }

        public static function gc():void
        {
            var loc1:*;
            try 
            {
                new flash.net.LocalConnection().connect("foo");
                new flash.net.LocalConnection().connect("foo");
            }
            catch (e:*)
            {
            };
            return;
        }

        public static function get used():uint
        {
            return flash.system.System.totalMemory;
        }
    }
}


//  package mgs
//    package aurora
//      package modules
//        package magneto
//          package controller
//            class CloseCommand
package mgs.aurora.modules.magneto.controller 
{
    import mgs.aurora.modules.magneto.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class CloseCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function CloseCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.magneto.model.SocketManagerProxy.NAME) as mgs.aurora.modules.magneto.model.SocketManagerProxy;
            loc1.close(arg1.getBody() as String);
            return;
        }
    }
}


//            class ConnectCommand
package mgs.aurora.modules.magneto.controller 
{
    import mgs.aurora.modules.magneto.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class ConnectCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function ConnectCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.magneto.model.SocketManagerProxy.NAME) as mgs.aurora.modules.magneto.model.SocketManagerProxy;
            loc1.connect(arg1.getBody() as String);
            return;
        }
    }
}


//            class DisposeCommand
package mgs.aurora.modules.magneto.controller 
{
    import mgs.aurora.modules.magneto.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class DisposeCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function DisposeCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.magneto.model.SocketManagerProxy.NAME) as mgs.aurora.modules.magneto.model.SocketManagerProxy;
            loc1.dispose();
            return;
        }
    }
}


//            class SendPacketCommand
package mgs.aurora.modules.magneto.controller 
{
    import mgs.aurora.modules.magneto.model.*;
    import mgs.aurora.modules.magneto.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SendPacketCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SendPacketCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.magneto.model.SocketManagerProxy.NAME) as mgs.aurora.modules.magneto.model.SocketManagerProxy;
            var loc2:*=arg1.getBody() as mgs.aurora.modules.magneto.model.vo.SendDataParams;
            loc1.sendData(loc2.socketId, loc2.data, loc2.serverId, loc2.moduleId, loc2.clientId);
            return;
        }
    }
}


//            class SetupCommand
package mgs.aurora.modules.magneto.controller 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupCommand extends org.puremvc.as3.multicore.patterns.command.MacroCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupCommand()
        {
            super();
            return;
        }

        protected override function initializeMacroCommand():void
        {
            super.initializeMacroCommand();
            this.addSubCommand(mgs.aurora.modules.magneto.controller.SetupModelCommand);
            return;
        }
    }
}


//            class SetupModelCommand
package mgs.aurora.modules.magneto.controller 
{
    import mgs.aurora.modules.magneto.model.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class SetupModelCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function SetupModelCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            facade.registerProxy(new mgs.aurora.modules.magneto.model.SocketConfigProxy(arg1.getBody() as XML));
            return;
        }
    }
}


//            class StartupCommand
package mgs.aurora.modules.magneto.controller 
{
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupCommand extends org.puremvc.as3.multicore.patterns.command.MacroCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupCommand()
        {
            super();
            return;
        }

        protected override function initializeMacroCommand():void
        {
            super.initializeMacroCommand();
            this.addSubCommand(mgs.aurora.modules.magneto.controller.StartupViewCommand);
            this.addSubCommand(mgs.aurora.modules.magneto.controller.StartupModelCommand);
            return;
        }
    }
}


//            class StartupModelCommand
package mgs.aurora.modules.magneto.controller 
{
    import flash.events.*;
    import mgs.aurora.modules.magneto.model.*;
    import mgs.aurora.modules.magneto.model.sockets.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupModelCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupModelCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as flash.events.IEventDispatcher;
            facade.registerProxy(new mgs.aurora.modules.magneto.model.SocketManagerProxy(new mgs.aurora.modules.magneto.model.sockets.SocketManager()));
            return;
        }
    }
}


//            class StartupViewCommand
package mgs.aurora.modules.magneto.controller 
{
    import flash.events.*;
    import mgs.aurora.modules.magneto.view.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.command.*;
    
    public class StartupViewCommand extends org.puremvc.as3.multicore.patterns.command.SimpleCommand implements org.puremvc.as3.multicore.interfaces.ICommand
    {
        public function StartupViewCommand()
        {
            super();
            return;
        }

        public override function execute(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getBody() as flash.events.IEventDispatcher;
            facade.registerMediator(new mgs.aurora.modules.magneto.view.EventBridgeMediator(loc1));
            return;
        }
    }
}


//          package model
//            package enums
//              class CompressionTypes
package mgs.aurora.modules.magneto.model.enums 
{
    public class CompressionTypes extends Object
    {
        public function CompressionTypes()
        {
            super();
            return;
        }

        
        {
            COMPRESSION_TYPE_NONE = 0;
            COMPRESSION_TYPE_GELZW12 = 1;
            COMPRESSION_TYPE_GELZW13 = 2;
            COMPRESSION_TYPE_GELZW14 = 3;
            COMPRESSION_TYPE_GELZW15 = 4;
            COMPRESSION_TYPE_ZLIB1 = 5;
            COMPRESSION_TYPE_ZLIB2 = 6;
            COMPRESSION_TYPE_ZLIB3 = 7;
            COMPRESSION_TYPE_ZLIB4 = 8;
            COMPRESSION_TYPE_ZLIB5 = 9;
            COMPRESSION_TYPE_ZLIB6 = 10;
            COMPRESSION_TYPE_ZLIB7 = 11;
            COMPRESSION_TYPE_ZLIB8 = 12;
            COMPRESSION_TYPE_ZLIB9 = 13;
            COMPRESSION_TYPE_LAST = 14;
        }

        public static var COMPRESSION_TYPE_NONE:int=0;

        public static var COMPRESSION_TYPE_GELZW12:int=1;

        public static var COMPRESSION_TYPE_GELZW13:int=2;

        public static var COMPRESSION_TYPE_GELZW14:int=3;

        public static var COMPRESSION_TYPE_GELZW15:int=4;

        public static var COMPRESSION_TYPE_ZLIB1:int=5;

        public static var COMPRESSION_TYPE_ZLIB2:int=6;

        public static var COMPRESSION_TYPE_ZLIB3:int=7;

        public static var COMPRESSION_TYPE_ZLIB4:int=8;

        public static var COMPRESSION_TYPE_ZLIB5:int=9;

        public static var COMPRESSION_TYPE_ZLIB6:int=10;

        public static var COMPRESSION_TYPE_ZLIB7:int=11;

        public static var COMPRESSION_TYPE_ZLIB8:int=12;

        public static var COMPRESSION_TYPE_ZLIB9:int=13;

        public static var COMPRESSION_TYPE_LAST:int=14;
    }
}


//            package events
//              class SocketEvent
package mgs.aurora.modules.magneto.model.events 
{
    import flash.events.*;
    
    public class SocketEvent extends flash.events.Event
    {
        public function SocketEvent(arg1:String, arg2:String, arg3:flash.events.Event, arg4:Boolean=false, arg5:Boolean=false)
        {
            super(arg1, arg4, arg5);
            this._socketId = arg2;
            this._originalEvent = arg3;
            return;
        }

        public override function clone():flash.events.Event
        {
            return new mgs.aurora.modules.magneto.model.events.SocketEvent(type, this.socketId, this.originalEvent, bubbles, cancelable);
        }

        public override function toString():String
        {
            return formatToString("SocketEvent", "type", "socketId", "originalEvent", "bubbles", "cancelable", "eventPhase");
        }

        public function get socketId():String
        {
            return this._socketId;
        }

        public function get originalEvent():flash.events.Event
        {
            return this._originalEvent;
        }

        internal static const NAME:String="/magneto/socket/event";

        public static const SECURE_CONNECT:String="/magneto/secure_connect";

        public static const INSECURE_CONNECT:String="/magneto/insecure_connect";

        public static const CLOSE:String="/magneto/close";

        public static const IO_ERROR:String="/magneto/io_error";

        public static const SECURITY_ERROR:String="/magneto/security/error";

        public static const SOCKET_DATA:String="/magneto/socket/data";

        internal var _socketId:String;

        internal var _originalEvent:flash.events.Event;
    }
}


//            package sockets
//              class MgsInSecureSocket
package mgs.aurora.modules.magneto.model.sockets 
{
    import com.hurlant.crypto.tls.*;
    import flash.events.*;
    import flash.net.*;
    import flash.utils.*;
    import mgs.aurora.modules.magneto.model.events.*;
    
    public dynamic class MgsInSecureSocket extends mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory implements flash.utils.IDataInput, flash.utils.IDataOutput, flash.events.IEventDispatcher
    {
        public function MgsInSecureSocket(arg1:String)
        {
            super();
            this._name = arg1;
            this._socket = new flash.net.Socket();
            this._socket.addEventListener(flash.events.Event.CONNECT, this.onConnect);
            this._socket.addEventListener(flash.events.Event.CLOSE, this.onClose);
            this._socket.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.onIOError);
            this._socket.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSecurityError);
            this._socket.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, this.onData);
            return;
        }

        internal function onIOError(arg1:flash.events.IOErrorEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onSecurityError(arg1:flash.events.SecurityErrorEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        public override function get baseSocket():flash.net.Socket
        {
            return this._socket;
        }

        public override function get socketName():String
        {
            return this._name;
        }

        public override function close():void
        {
            this._socket.close();
            return;
        }

        public override function connect(arg1:String, arg2:int, arg3:com.hurlant.crypto.tls.TLSConfig=null):void
        {
            this._socket.connect(arg1, arg2);
            return;
        }

        public override function flush():void
        {
            this._socket.flush();
            return;
        }

        public override function get connected():Boolean
        {
            return this._socket.connected;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._socket.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._socket.dispatchEvent(arg1);
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return this._socket.hasEventListener(arg1);
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._socket.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return this._socket.willTrigger(arg1);
        }

        public override function get bytesAvailable():uint
        {
            return this._socket.bytesAvailable;
        }

        public override function get endian():String
        {
            return this._socket.endian;
        }

        public override function get objectEncoding():uint
        {
            return this._socket.objectEncoding;
        }

        public override function readBoolean():Boolean
        {
            return this._socket.readBoolean();
        }

        public override function readByte():int
        {
            return this._socket.readByte();
        }

        public override function readBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            return this._socket.readBytes(arg1, arg2, arg3);
        }

        public override function readDouble():Number
        {
            return this._socket.readDouble();
        }

        public override function readFloat():Number
        {
            return this._socket.readFloat();
        }

        public override function readInt():int
        {
            return this._socket.readInt();
        }

        public override function readMultiByte(arg1:uint, arg2:String):String
        {
            return this._socket.readMultiByte(arg1, arg2);
        }

        public override function readObject():*
        {
            return this._socket.readObject();
        }

        public override function readShort():int
        {
            return this._socket.readShort();
        }

        public override function readUnsignedByte():uint
        {
            return this._socket.readUnsignedByte();
        }

        public override function readUnsignedInt():uint
        {
            return this._socket.readUnsignedInt();
        }

        public override function readUnsignedShort():uint
        {
            return this._socket.readUnsignedShort();
        }

        public override function readUTF():String
        {
            return this._socket.readUTF();
        }

        public override function readUTFBytes(arg1:uint):String
        {
            return this._socket.readUTFBytes(arg1);
        }

        public override function set endian(arg1:String):void
        {
            this._socket.endian = arg1;
            return;
        }

        public override function set objectEncoding(arg1:uint):void
        {
            this._socket.objectEncoding = arg1;
            return;
        }

        public override function writeBoolean(arg1:Boolean):void
        {
            this._socket.writeBoolean(arg1);
            return;
        }

        public override function writeByte(arg1:int):void
        {
            this._socket.writeByte(arg1);
            return;
        }

        public override function writeBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            this._socket.writeBytes(arg1, arg2, arg3);
            return;
        }

        public override function writeDouble(arg1:Number):void
        {
            this._socket.writeDouble(arg1);
            return;
        }

        public override function writeFloat(arg1:Number):void
        {
            this._socket.writeFloat(arg1);
            return;
        }

        public override function writeInt(arg1:int):void
        {
            this._socket.writeInt(arg1);
            return;
        }

        public override function writeMultiByte(arg1:String, arg2:String):void
        {
            this._socket.writeMultiByte(arg1, arg2);
            return;
        }

        public override function writeObject(arg1:*):void
        {
            this._socket.writeObject(arg1);
            return;
        }

        public override function writeShort(arg1:int):void
        {
            this._socket.writeShort(arg1);
            return;
        }

        public override function writeUnsignedInt(arg1:uint):void
        {
            this._socket.writeUnsignedInt(arg1);
            return;
        }

        public override function writeUTF(arg1:String):void
        {
            this._socket.writeUTF(arg1);
            return;
        }

        public override function writeUTFBytes(arg1:String):void
        {
            this._socket.writeUTFBytes(arg1);
            return;
        }

        internal function onData(arg1:flash.events.ProgressEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onConnect(arg1:flash.events.Event):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onClose(arg1:flash.events.Event):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.CLOSE, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal var _socket:flash.net.Socket;

        internal var _name:String;
    }
}


//              class MgsSocketFactory
package mgs.aurora.modules.magneto.model.sockets 
{
    import com.hurlant.crypto.tls.*;
    import flash.events.*;
    import flash.net.*;
    import flash.utils.*;
    
    public dynamic class MgsSocketFactory extends flash.events.EventDispatcher implements flash.utils.IDataInput, flash.utils.IDataOutput, flash.events.IEventDispatcher
    {
        public function MgsSocketFactory()
        {
            super();
            return;
        }

        public function close():void
        {
            return;
        }

        public function connect(arg1:String, arg2:int, arg3:com.hurlant.crypto.tls.TLSConfig=null):void
        {
            return;
        }

        public function flush():void
        {
            return;
        }

        public function get connected():Boolean
        {
            return false;
        }

        public function get baseSocket():flash.net.Socket
        {
            return null;
        }

        public function get socketName():String
        {
            return "";
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            return;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return false;
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return false;
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            return;
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return false;
        }

        public function get bytesAvailable():uint
        {
            return 0;
        }

        public function get endian():String
        {
            return "";
        }

        public function get objectEncoding():uint
        {
            return 0;
        }

        public function readBoolean():Boolean
        {
            return false;
        }

        public function readByte():int
        {
            return 0;
        }

        public function readBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            return;
        }

        public function readDouble():Number
        {
            return 0;
        }

        public function readFloat():Number
        {
            return 0;
        }

        public function readInt():int
        {
            return 0;
        }

        public function readMultiByte(arg1:uint, arg2:String):String
        {
            return "";
        }

        public function readObject():*
        {
            return;
        }

        public function readShort():int
        {
            return 0;
        }

        public function readUnsignedByte():uint
        {
            return 0;
        }

        public function readUnsignedInt():uint
        {
            return 0;
        }

        public function readUnsignedShort():uint
        {
            return 0;
        }

        public function readUTF():String
        {
            return "";
        }

        public function readUTFBytes(arg1:uint):String
        {
            return "";
        }

        public function set endian(arg1:String):void
        {
            return;
        }

        public function set objectEncoding(arg1:uint):void
        {
            return;
        }

        public function writeBoolean(arg1:Boolean):void
        {
            return;
        }

        public function writeByte(arg1:int):void
        {
            return;
        }

        public function writeBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            return;
        }

        public function writeDouble(arg1:Number):void
        {
            return;
        }

        public function writeFloat(arg1:Number):void
        {
            return;
        }

        public function writeInt(arg1:int):void
        {
            return;
        }

        public function writeMultiByte(arg1:String, arg2:String):void
        {
            return;
        }

        public function writeObject(arg1:*):void
        {
            return;
        }

        public function writeShort(arg1:int):void
        {
            return;
        }

        public function writeUnsignedInt(arg1:uint):void
        {
            return;
        }

        public function writeUTF(arg1:String):void
        {
            return;
        }

        public function writeUTFBytes(arg1:String):void
        {
            return;
        }

        public static function createSocket(arg1:Boolean, arg2:String):mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory
        {
            if (!arg1) 
            {
                return new mgs.aurora.modules.magneto.model.sockets.MgsInSecureSocket(arg2);
            }
            if (arg1) 
            {
                return new mgs.aurora.modules.magneto.model.sockets.MgsTLSSocket(arg2);
            }
            return null;
        }

        public static const INSECURE:int=0;

        public static const TLS:int=1;

        public static const MGS_ENDIAN:String=flash.utils.Endian.LITTLE_ENDIAN;

        public static const MPV_ROUTER:String="MPV_ROUTER";

        public static const MPV_LOBBY:String="MPV_LOBBY";
    }
}


//              class MgsTLSSocket
package mgs.aurora.modules.magneto.model.sockets 
{
    import com.hurlant.crypto.tls.*;
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.modules.magneto.model.events.*;
    
    public dynamic class MgsTLSSocket extends mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory implements flash.utils.IDataInput, flash.utils.IDataOutput, flash.events.IEventDispatcher
    {
        public function MgsTLSSocket(arg1:String)
        {
            super();
            this._name = arg1;
            this._socket = new com.hurlant.crypto.tls.TLSSocket();
            this._socket.ignoreCommonNameCheck = true;
            this._socket.ignoreExpiredCertificate = true;
            this._socket.ignoreSelfSignedCertificate = true;
            this._socket.addEventListener(flash.events.Event.CONNECT, this.onConnect);
            this._socket.addEventListener(flash.events.Event.CLOSE, this.onClose);
            this._socket.addEventListener(flash.events.IOErrorEvent.IO_ERROR, this.onIOError);
            this._socket.addEventListener(flash.events.SecurityErrorEvent.SECURITY_ERROR, this.onSecurityError);
            this._socket.addEventListener(flash.events.ProgressEvent.SOCKET_DATA, this.onData);
            return;
        }

        internal function onSecurityError(arg1:flash.events.SecurityErrorEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onTLSReady(arg1:com.hurlant.crypto.tls.TLSEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURE_CONNECT, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        public override function get socketName():String
        {
            return this._name;
        }

        public override function close():void
        {
            this._socket.flush();
            this._socket.close();
            return;
        }

        public override function connect(arg1:String, arg2:int, arg3:com.hurlant.crypto.tls.TLSConfig=null):void
        {
            this._socket.connect(arg1, arg2, arg3);
            return;
        }

        public override function flush():void
        {
            this._socket.flush();
            return;
        }

        public override function get connected():Boolean
        {
            return this._socket.connected;
        }

        public override function addEventListener(arg1:String, arg2:Function, arg3:Boolean=false, arg4:int=0, arg5:Boolean=false):void
        {
            this._socket.addEventListener(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public override function dispatchEvent(arg1:flash.events.Event):Boolean
        {
            return this._socket.dispatchEvent(arg1);
        }

        public override function hasEventListener(arg1:String):Boolean
        {
            return this._socket.hasEventListener(arg1);
        }

        public override function removeEventListener(arg1:String, arg2:Function, arg3:Boolean=false):void
        {
            this._socket.removeEventListener(arg1, arg2, arg3);
            return;
        }

        public override function willTrigger(arg1:String):Boolean
        {
            return this._socket.willTrigger(arg1);
        }

        public override function get bytesAvailable():uint
        {
            return this._socket.bytesAvailable;
        }

        public override function get endian():String
        {
            return this._socket.endian;
        }

        public override function get objectEncoding():uint
        {
            return this._socket.objectEncoding;
        }

        public override function readBoolean():Boolean
        {
            return this._socket.readBoolean();
        }

        public override function readByte():int
        {
            return this._socket.readByte();
        }

        public override function readBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            return this._socket.readBytes(arg1, arg2, arg3);
        }

        public override function readDouble():Number
        {
            return this._socket.readDouble();
        }

        public override function readFloat():Number
        {
            return this._socket.readFloat();
        }

        public override function readInt():int
        {
            return this._socket.readInt();
        }

        public override function readMultiByte(arg1:uint, arg2:String):String
        {
            return this._socket.readMultiByte(arg1, arg2);
        }

        public override function readObject():*
        {
            return this._socket.readObject();
        }

        public override function readShort():int
        {
            return this._socket.readShort();
        }

        public override function readUnsignedByte():uint
        {
            return this._socket.readUnsignedByte();
        }

        public override function readUnsignedInt():uint
        {
            return this._socket.readUnsignedInt();
        }

        public override function readUnsignedShort():uint
        {
            return this._socket.readUnsignedShort();
        }

        public override function readUTF():String
        {
            return this._socket.readUTF();
        }

        public override function readUTFBytes(arg1:uint):String
        {
            return this._socket.readUTFBytes(arg1);
        }

        public override function set endian(arg1:String):void
        {
            this._socket.endian = arg1;
            return;
        }

        public override function set objectEncoding(arg1:uint):void
        {
            this._socket.objectEncoding = arg1;
            return;
        }

        public override function writeBoolean(arg1:Boolean):void
        {
            this._socket.writeBoolean(arg1);
            return;
        }

        public override function writeByte(arg1:int):void
        {
            this._socket.writeByte(arg1);
            return;
        }

        public override function writeBytes(arg1:flash.utils.ByteArray, arg2:uint=0, arg3:uint=0):void
        {
            this._socket.writeBytes(arg1, arg2, arg3);
            return;
        }

        public override function writeDouble(arg1:Number):void
        {
            this._socket.writeDouble(arg1);
            return;
        }

        public override function writeFloat(arg1:Number):void
        {
            this._socket.writeFloat(arg1);
            return;
        }

        public override function writeInt(arg1:int):void
        {
            this._socket.writeInt(arg1);
            return;
        }

        public override function writeMultiByte(arg1:String, arg2:String):void
        {
            this._socket.writeMultiByte(arg1, arg2);
            return;
        }

        public override function writeObject(arg1:*):void
        {
            this._socket.writeObject(arg1);
            return;
        }

        public override function writeShort(arg1:int):void
        {
            this._socket.writeShort(arg1);
            return;
        }

        public override function writeUnsignedInt(arg1:uint):void
        {
            this._socket.writeUnsignedInt(arg1);
            return;
        }

        public override function writeUTF(arg1:String):void
        {
            this._socket.writeUTF(arg1);
            return;
        }

        public override function writeUTFBytes(arg1:String):void
        {
            this._socket.writeUTFBytes(arg1);
            return;
        }

        internal function onData(arg1:flash.events.ProgressEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onConnect(arg1:flash.events.Event):void
        {
            this._socket.addEventListener(com.hurlant.crypto.tls.TLSEvent.READY, this.onTLSReady);
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onClose(arg1:flash.events.Event):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.CLOSE, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal function onIOError(arg1:flash.events.IOErrorEvent):void
        {
            var loc1:*=new mgs.aurora.modules.magneto.model.events.SocketEvent(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.socketName, arg1);
            this.dispatchEvent(loc1);
            return;
        }

        internal var _socket:com.hurlant.crypto.tls.TLSSocket;

        internal var _name:String;
    }
}


//              class PolicyManager
package mgs.aurora.modules.magneto.model.sockets 
{
    import flash.events.*;
    import flash.system.*;
    import mgs.aurora.modules.magneto.model.events.*;
    
    public class PolicyManager extends flash.events.EventDispatcher
    {
        public function PolicyManager()
        {
            super();
            return;
        }

        public function loadPolicy(arg1:String, arg2:String, arg3:Number):void
        {
            this._host = arg2;
            this._port = arg3;
            flash.system.Security.loadPolicyFile("xmlsocket://" + this._host + ":" + this._port.toString());
            this._policysocket = mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory.createSocket(false, arg1);
            this._policysocket.endian = mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory.MGS_ENDIAN;
            this._policysocket.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.onConnect);
            this._policysocket.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.CLOSE, this.onClose);
            this._policysocket.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.onError);
            this._policysocket.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.onError);
            this._policysocket.connect(this._host, this._port);
            return;
        }

        internal function onConnect(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            Logger.logMessage("PolicyManager : onConnect : " + arg1.type);
            this.dispose();
            this._policysocket.close();
            this.dispatchEvent(arg1.clone());
            return;
        }

        internal function onClose(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            Logger.logMessage("PolicyManager : onClose : " + arg1.type);
            this.dispatchEvent(arg1.clone());
            return;
        }

        internal function onError(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            this.dispose();
            this._policysocket.close();
            this.dispatchEvent(arg1.clone());
            return;
        }

        internal function dispose():void
        {
            this._policysocket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.onConnect);
            this._policysocket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.CLOSE, this.onClose);
            this._policysocket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.onError);
            this._policysocket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.onError);
            return;
        }

        internal var _socketId:String;

        internal var _policysocket:mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory;

        internal var _host:String;

        internal var _port:Number;
    }
}


//              class SocketManager
package mgs.aurora.modules.magneto.model.sockets 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.enums.magneto.*;
    import mgs.aurora.common.events.magneto.*;
    import mgs.aurora.modules.magneto.model.events.*;
    import mgs.aurora.modules.magneto.model.vo.*;
    import mgs.aurora.modules.magneto.model.worker.*;
    
    public class SocketManager extends flash.events.EventDispatcher
    {
        public function SocketManager()
        {
            super();
            this._socketList = new flash.utils.Dictionary();
            return;
        }

        public function dispose():void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=this._socketList;
            for each (loc1 in loc3) 
            {
                loc1.socket.close();
                this.socketDispose(loc1.id);
            }
            return;
        }

        public function connect(arg1:String, arg2:mgs.aurora.modules.magneto.model.vo.SocketConfig):Boolean
        {
            if (this._socketList.hasOwnProperty(arg1) || !(arg1 == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY) && !(arg1 == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER)) 
            {
                return false;
            }
            this._socketList[arg1] = new flash.utils.Dictionary();
            this._socketList[arg1].socket = mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory.createSocket(arg2.secure, arg1);
            this._socketList[arg1].id = arg1;
            this._socketList[arg1].configuration = arg2;
            this._socketList[arg1].portList = this.createPortListArray(arg2.ports);
            this._socketList[arg1].portIndex = -1;
            this._socketList[arg1].host = arg2.host;
            this._socketList[arg1].secure = arg2.secure;
            this._socketList[arg1].compression = arg2.compression;
            this._socketList[arg1].connected = false;
            var loc1:*=new mgs.aurora.modules.magneto.model.sockets.PolicyManager();
            loc1.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.onPolicyConnected);
            loc1.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.onPolicyError);
            loc1.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.onPolicyError);
            this._socketList[arg1].policyManager = loc1;
            loc1.loadPolicy(arg1, arg2.policyHost, arg2.policyPort);
            return true;
        }

        public function sendData(arg1:String, arg2:XML, arg3:int, arg4:int, arg5:int):Boolean
        {
            if (!this._socketList.hasOwnProperty(arg1)) 
            {
                return false;
            }
            if (arg1 == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY || arg1 == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER) 
            {
                if (this._socketList[arg1].worker != null) 
                {
                    mgs.aurora.modules.magneto.model.worker.MultiPlayerViper(this._socketList[arg1].worker).sendData(arg2, arg3, arg4, arg5);
                    return true;
                }
            }
            return false;
        }

        internal function attemptConnection(arg1:String):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*;
            var loc4:*=((loc3 = this._socketList[arg1]).portIndex + 1);
            loc3.portIndex = loc4;
            if (this._socketList[arg1].portIndex == this._socketList[arg1].portList.length) 
            {
                loc1 = new XML("<Error>" + this._socketList[arg1].lastEvent.type + "</Error>");
                loc2 = new mgs.aurora.common.events.magneto.MagnetoEvent(mgs.aurora.common.events.magneto.MagnetoEvent.ERROR, arg1, loc1);
                dispatchEvent(loc2);
                this.socketDispose(arg1);
                return;
            }
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1].socket).connect(this._socketList[arg1].host, this._socketList[arg1].portList[this._socketList[arg1].portIndex]);
            return;
        }

        internal function onPolicyConnected(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            this.policyDispose(arg1.socketId);
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1.socketId].socket).addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.CLOSE, this.onClose);
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1.socketId].socket).addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURE_CONNECT, this.onSecureConnect);
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1.socketId].socket).addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.onInSecureConnect);
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1.socketId].socket).addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.onError);
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1.socketId].socket).addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.onError);
            this.attemptConnection(arg1.socketId);
            return;
        }

        public function close(arg1:String):void
        {
            mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1].socket).close();
            return;
        }

        internal function onPolicyError(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            this.policyDispose(arg1.socketId);
            var loc1:*=new XML("<Error>" + arg1.type + "</Error>");
            var loc2:*=new mgs.aurora.common.events.magneto.MagnetoEvent(mgs.aurora.common.events.magneto.MagnetoEvent.POLICY_ERROR, arg1.socketId, loc1);
            dispatchEvent(loc2);
            return;
        }

        internal function onSocketData(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            this._socketList[arg1.socketId].lastEvent = arg1.clone();
            return;
        }

        internal function onError(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            var loc1:*=null;
            var loc2:*=null;
            if (this._socketList[arg1.socketId]) 
            {
                if (this._socketList[arg1.socketId].connected) 
                {
                    loc1 = new XML("<Error>" + arg1.type + "</Error>");
                    loc2 = new mgs.aurora.common.events.magneto.MagnetoEvent(mgs.aurora.common.events.magneto.MagnetoEvent.ERROR, arg1.socketId, loc1);
                    dispatchEvent(loc2);
                    this.socketDispose(arg1.socketId);
                    return;
                }
                this._socketList[arg1.socketId].lastEvent = arg1.clone();
                this.attemptConnection(arg1.socketId);
            }
            return;
        }

        internal function onSecureConnect(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            this._socketList[arg1.socketId].lastEvent = arg1.clone();
            this.processConnectionEvent(arg1);
            return;
        }

        internal function processConnectionEvent(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            var loc3:*=null;
            this._socketList[arg1.socketId].socket.endian = mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory.MGS_ENDIAN;
            this._socketList[arg1.socketId].connected = true;
            if (arg1.socketId == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY || arg1.socketId == mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER) 
            {
                (loc3 = new mgs.aurora.modules.magneto.model.worker.MultiPlayerViper(arg1.socketId, this._socketList[arg1.socketId].socket, this._socketList[arg1.socketId].compression)).addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.DATA, this.onDataReceived, false, 0, true);
                this._socketList[arg1.socketId].worker = loc3;
            }
            else 
            {
                mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory(this._socketList[arg1.socketId].socket).addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.onSocketData);
            }
            var loc1:*=new XML("<Success>" + arg1.type + "</Success>");
            var loc2:*=new mgs.aurora.common.events.magneto.MagnetoEvent(mgs.aurora.common.events.magneto.MagnetoEvent.CONNECTED, arg1.socketId, loc1);
            dispatchEvent(loc2);
            return;
        }

        internal function onDataReceived(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            dispatchEvent(arg1);
            return;
        }

        internal function onInSecureConnect(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            this._socketList[arg1.socketId].lastEvent = arg1.clone();
            if (this._socketList[arg1.socketId].secure) 
            {
                return;
            }
            this.processConnectionEvent(arg1);
            return;
        }

        internal function onClose(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            var loc2:*=null;
            var loc1:*=new XML("<Error>" + arg1.type + "</Error>");
            if (this._socketList[arg1.socketId].worker != null) 
            {
                Debugger.trace("MPF Connection Close - " + arg1.socketId, "SYSTEM - Core MPF");
                mgs.aurora.modules.magneto.model.worker.MultiPlayerViper(this._socketList[arg1.socketId].worker).close();
                this._socketList[arg1.socketId].worker = null;
                loc2 = new mgs.aurora.common.events.magneto.MagnetoEvent(mgs.aurora.common.events.magneto.MagnetoEvent.ERROR, arg1.socketId, loc1);
                dispatchEvent(loc2);
            }
            this._socketList[arg1.socketId].lastEvent = arg1.clone();
            return;
        }

        internal function policyDispose(arg1:String):void
        {
            mgs.aurora.modules.magneto.model.sockets.PolicyManager(this._socketList[arg1].policyManager).removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.onPolicyConnected);
            mgs.aurora.modules.magneto.model.sockets.PolicyManager(this._socketList[arg1].policyManager).removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.onPolicyError);
            mgs.aurora.modules.magneto.model.sockets.PolicyManager(this._socketList[arg1].policyManager).removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURITY_ERROR, this.onPolicyError);
            this._socketList[arg1].policyManager = null;
            return;
        }

        internal function socketDispose(arg1:String):void
        {
            this._socketList[arg1].socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.CLOSE, this.onClose);
            this._socketList[arg1].socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SECURE_CONNECT, this.onSecureConnect);
            this._socketList[arg1].socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.INSECURE_CONNECT, this.onInSecureConnect);
            this._socketList[arg1].socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.IO_ERROR, this.onError);
            this._socketList[arg1].socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.onSocketData);
            this._socketList[arg1].socket = null;
            if (this._socketList[arg1].worker != null) 
            {
                mgs.aurora.modules.magneto.model.worker.MultiPlayerViper(this._socketList[arg1].worker).dispose();
                this._socketList[arg1].worker = null;
            }
            this._socketList[arg1] = null;
            return;
        }

        internal function createPortListArray(arg1:String):Array
        {
            if (arg1.indexOf("-") < 0) 
            {
                return [int(arg1)];
            }
            var loc1:*=arg1.split("-");
            var loc2:*=new Array();
            var loc3:*=Number(loc1[0]);
            while (loc3 <= Number(loc1[1])) 
            {
                loc2.push(loc3);
                ++loc3;
            }
            return loc2;
        }

        internal var _socketList:flash.utils.Dictionary;
    }
}


//            package vo
//              class SendDataParams
package mgs.aurora.modules.magneto.model.vo 
{
    public class SendDataParams extends Object
    {
        public function SendDataParams(arg1:String, arg2:XML, arg3:uint, arg4:uint, arg5:uint)
        {
            super();
            this.socketId = arg1;
            this.data = arg2;
            this.serverId = arg3;
            this.moduleId = arg4;
            this.clientId = arg5;
            return;
        }

        public var socketId:String;

        public var data:XML;

        public var serverId:uint;

        public var moduleId:uint;

        public var clientId:uint;
    }
}


//              class SendMPFDataParams
package mgs.aurora.modules.magneto.model.vo 
{
    public class SendMPFDataParams extends Object
    {
        public function SendMPFDataParams(arg1:String, arg2:uint, arg3:XML)
        {
            super();
            this.socketID = arg1;
            this.serviceID = arg2;
            this.data = arg3;
            return;
        }

        public var socketID:String;

        public var serviceID:uint;

        public var data:XML;
    }
}


//              class SocketConfig
package mgs.aurora.modules.magneto.model.vo 
{
    public class SocketConfig extends Object
    {
        public function SocketConfig(arg1:String, arg2:String, arg3:String, arg4:Boolean, arg5:uint, arg6:String, arg7:uint)
        {
            super();
            this.host = arg1;
            this.ports = arg2;
            this.portType = arg3;
            this.secure = arg4;
            this.policyPort = arg7;
            this.policyHost = arg6;
            this.compression = arg5;
            return;
        }

        public var host:String;

        public var ports:String;

        public var portType:String;

        public var secure:Boolean;

        public var policyPort:Number;

        public var compression:uint;

        public var policyHost:String;
    }
}


//            package worker
//              class MultiPlayerViper
package mgs.aurora.modules.magneto.model.worker 
{
    import flash.events.*;
    import flash.utils.*;
    import mgs.aurora.common.events.magneto.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.magneto.model.enums.*;
    import mgs.aurora.modules.magneto.model.events.*;
    import mgs.aurora.modules.magneto.model.sockets.*;
    
    public class MultiPlayerViper extends flash.events.EventDispatcher
    {
        public function MultiPlayerViper(arg1:String, arg2:mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory, arg3:int)
        {
            super();
            this._socketId = arg1;
            this._socket = arg2;
            this._compression = arg3;
            XML.ignoreWhitespace = true;
            XML.prettyPrinting = false;
            this._socket.addEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.onSocketData);
            return;
        }

        public function sendData(arg1:XML, arg2:int, arg3:int, arg4:int):void
        {
            var loc1:*=null;
            var loc2:*=0;
            var loc3:*=null;
            if (this._canSend) 
            {
                loc2 = (loc1 = arg1.children()[0].toXMLString()).length;
                (loc3 = mgs.aurora.common.utilities.StringUtils.utfStringToByteArray(loc1)).writeByte(0);
                if (this._compression > mgs.aurora.modules.magneto.model.enums.CompressionTypes.COMPRESSION_TYPE_GELZW15 && this._compression < mgs.aurora.modules.magneto.model.enums.CompressionTypes.COMPRESSION_TYPE_LAST) 
                {
                    loc3.compress();
                }
                this.createHeader(uint(arg3), loc2 + 1, loc3.length, this._compression);
                this._socket.writeBytes(loc3);
                this._socket.flush();
            }
            return;
        }

        public function dispose():void
        {
            this._socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.onSocketData);
            return;
        }

        internal function onSocketData(arg1:mgs.aurora.modules.magneto.model.events.SocketEvent):void
        {
            var loc1:*=null;
            var loc2:*=null;
            var loc3:*=null;
            var loc4:*=null;
            if (this._header == null) 
            {
                this.retrieveHeader();
            }
            while (!this.isWaiting()) 
            {
                loc1 = new flash.utils.ByteArray();
                this._socket.readBytes(loc1, 0, this._header.dataSize);
                if (int(this._header.compressionType) > mgs.aurora.modules.magneto.model.enums.CompressionTypes.COMPRESSION_TYPE_GELZW15 && int(this._header.compressionType) < mgs.aurora.modules.magneto.model.enums.CompressionTypes.COMPRESSION_TYPE_LAST) 
                {
                    loc1.uncompress();
                }
                loc2 = mgs.aurora.common.utilities.StringUtils.bytesToUTFString(loc1);
                (loc3 = new XML("<P toFromID=\"" + this._header.moduleID + "\"/>")).appendChild(new XMLList(loc2));
                this._header = null;
                loc4 = new mgs.aurora.common.events.magneto.MagnetoEvent(mgs.aurora.common.events.magneto.MagnetoEvent.DATA, this._socketId, loc3);
                dispatchEvent(loc4);
                if (!(this._socket.bytesAvailable >= HEADER_SIZE)) 
                {
                    continue;
                }
                this.retrieveHeader();
            }
            return;
        }

        internal function isWaiting():Boolean
        {
            if (this._header == null || this._header.dataSize > this._socket.bytesAvailable) 
            {
                return true;
            }
            return false;
        }

        internal function createHeader(arg1:uint, arg2:uint, arg3:uint, arg4:int):void
        {
            this._socket.writeUnsignedInt(arg1);
            this._socket.writeUnsignedInt(arg3);
            this._socket.writeShort(HEADER_SIZE);
            this._socket.writeByte(DATA_FORMAT_XML);
            this._socket.writeByte(arg4);
            this._socket.writeUnsignedInt(arg2);
            Logger.logMessage("SEND : mid : " + arg1);
            Logger.logMessage("SEND : datasize : " + arg3);
            Logger.logMessage("SEND : headsize : " + HEADER_SIZE);
            Logger.logMessage("SEND : data format : " + DATA_FORMAT_XML);
            Logger.logMessage("SEND : compression : " + arg4);
            Logger.logMessage("SEND : datasizeuncompressed : " + arg2);
            return;
        }

        internal function retrieveHeader():void
        {
            this._header = new Object();
            this._header.moduleID = this._socket.readUnsignedInt();
            this._header.dataSize = this._socket.readUnsignedInt();
            this._header.headerSize = this._socket.readShort();
            this._header.dataFormat = this._socket.readByte();
            this._header.compressionType = this._socket.readByte();
            this._header.dataSizeUnCompressed = this._socket.readUnsignedInt();
            Logger.logMessage("RECEIVE : mid : " + this._header.moduleID);
            Logger.logMessage("RECEIVE : datasize : " + this._header.dataSize);
            Logger.logMessage("RECEIVE : headsize : " + this._header.headerSize);
            Logger.logMessage("RECEIVE : data format : " + this._header.dataFormat);
            Logger.logMessage("RECEIVE : compression : " + this._header.compressionType);
            Logger.logMessage("RECEIVE : datasizeuncompressed : " + this._header.dataSizeUnCompressed);
            return;
        }

        public function close():void
        {
            Debugger.trace("MPF socket clean up - cansend " + this._canSend, "SYSTEM - Core MPF");
            this._canSend = false;
            this._socket.removeEventListener(mgs.aurora.modules.magneto.model.events.SocketEvent.SOCKET_DATA, this.onSocketData);
            return;
        }

        
        {
            HEADER_SIZE = 16;
            DATA_FORMAT_XML = 1;
        }

        internal var _socketId:String;

        internal var _socket:mgs.aurora.modules.magneto.model.sockets.MgsSocketFactory;

        internal var _compression:int;

        internal var _waiting:Boolean=false;

        internal var _header:Object=null;

        internal var _canSend:Boolean=true;

        public static var HEADER_SIZE:int=16;

        public static var DATA_FORMAT_XML:int=1;
    }
}


//            class SocketConfigProxy
package mgs.aurora.modules.magneto.model 
{
    import mgs.aurora.common.enums.magneto.*;
    import mgs.aurora.common.utilities.*;
    import mgs.aurora.modules.magneto.model.vo.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SocketConfigProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SocketConfigProxy(arg1:XML)
        {
            super(NAME, arg1);
            return;
        }

        public function get config():XML
        {
            return getData() as XML;
        }

        public function get compressionType():uint
        {
            return uint(this.config.settings.@compressionType);
        }

        public function get policyPort():uint
        {
            return uint(this.config.settings.@mpvPolicyPort);
        }

        public function get routerHost():String
        {
            return this.config.settings.@mpvServerHost.toXMLString();
        }

        public function get lobbyHost():String
        {
            return this.config.settings.@mpvServerLobbyHost.toXMLString();
        }

        public function get routerPortRange():String
        {
            return this.config.settings.@mpvPortRange.toXMLString();
        }

        public function get routerPortType():String
        {
            return this.config.settings.@mpvPortType.toXMLString();
        }

        public function get lobbyPort():String
        {
            return this.config.settings.@mpvLobbyPort.toXMLString();
        }

        public function get lobbyPortType():String
        {
            return this.config.settings.@mpvLobbyPortType.toXMLString();
        }

        public function get routerPortSSLEnabled():Boolean
        {
            return mgs.aurora.common.utilities.StringUtils.stringToBoolean(this.config.settings.@mpvPortSsl.toString());
        }

        public function get lobbyPortSSLEnabled():Boolean
        {
            return mgs.aurora.common.utilities.StringUtils.stringToBoolean(this.config.settings.@mpvLobbyPortSsl.toString());
        }

        public function getSocketConfig(arg1:String):mgs.aurora.modules.magneto.model.vo.SocketConfig
        {
            var loc1:*=null;
            var loc2:*=arg1;
            switch (loc2) 
            {
                case mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_LOBBY:
                {
                    loc1 = new mgs.aurora.modules.magneto.model.vo.SocketConfig(this.lobbyHost, this.lobbyPort, this.lobbyPortType, this.lobbyPortSSLEnabled, this.compressionType, this.lobbyHost, this.policyPort);
                    break;
                }
                case mgs.aurora.common.enums.magneto.SocketIdentifiers.MPV_ROUTER:
                {
                    loc1 = new mgs.aurora.modules.magneto.model.vo.SocketConfig(this.routerHost, this.routerPortRange, this.routerPortType, this.routerPortSSLEnabled, this.compressionType, this.routerHost, this.policyPort);
                    break;
                }
                default:
                {
                    loc1 = null;
                }
            }
            return loc1;
        }

        public static const NAME:String="SocketConfigProxy";
    }
}


//            class SocketManagerProxy
package mgs.aurora.modules.magneto.model 
{
    import flash.events.*;
    import mgs.aurora.common.events.magneto.*;
    import mgs.aurora.modules.magneto.model.sockets.*;
    import mgs.aurora.modules.magneto.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;
    
    public class SocketManagerProxy extends org.puremvc.as3.multicore.patterns.proxy.Proxy implements org.puremvc.as3.multicore.interfaces.IProxy
    {
        public function SocketManagerProxy(arg1:mgs.aurora.modules.magneto.model.sockets.SocketManager)
        {
            super(NAME, arg1);
            return;
        }

        public override function setData(arg1:Object):void
        {
            super.setData(arg1);
            var loc1:*=flash.events.IEventDispatcher(arg1);
            loc1.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.ERROR, this.socketEventProx, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.CLOSED, this.socketEventProx, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.CONNECTED, this.socketEventProx, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.DATA, this.socketEventProx, false, 0, true);
            loc1.addEventListener(mgs.aurora.common.events.magneto.MagnetoEvent.POLICY_ERROR, this.socketEventProx, false, 0, true);
            return;
        }

        internal function socketEventProx(arg1:mgs.aurora.common.events.magneto.MagnetoEvent):void
        {
            facade.sendNotification(mgs.aurora.modules.magneto.notifications.OutboundNotifications.SOCKET_EVENT, arg1);
            return;
        }

        internal function get manager():mgs.aurora.modules.magneto.model.sockets.SocketManager
        {
            return getData() as mgs.aurora.modules.magneto.model.sockets.SocketManager;
        }

        public function connect(arg1:String):void
        {
            var loc1:*=facade.retrieveProxy(mgs.aurora.modules.magneto.model.SocketConfigProxy.NAME) as mgs.aurora.modules.magneto.model.SocketConfigProxy;
            this.manager.connect(arg1, loc1.getSocketConfig(arg1));
            return;
        }

        public function sendData(arg1:String, arg2:XML, arg3:int, arg4:int, arg5:int):void
        {
            var loc1:*=this.manager.sendData(arg1, arg2, arg3, arg4, arg5);
            return;
        }

        public function dispose():void
        {
            this.manager.dispose();
            return;
        }

        public function close(arg1:String):void
        {
            this.manager.close(arg1);
            return;
        }

        public static const NAME:String="SocketManagerProxy";
    }
}


//          package notifications
//            class InboundNotifications
package mgs.aurora.modules.magneto.notifications 
{
    public class InboundNotifications extends Object
    {
        public function InboundNotifications()
        {
            super();
            return;
        }

        internal static const NAME:String="InboundNotifications";

        public static const CONNECT:String=NAME + "/notes/connect";

        public static const SEND_PACKET:String=NAME + "/notes/send_packet";

        public static const SEND_MPF_PACKET:String=NAME + "/notes/send_mpf_packet";

        public static const SETUP:String=NAME + "/notes/setup";

        public static const CLOSE:String=NAME + "/notes/close";
    }
}


//            class InternalNotifications
package mgs.aurora.modules.magneto.notifications 
{
    public class InternalNotifications extends Object
    {
        public function InternalNotifications()
        {
            super();
            return;
        }

        internal static const NAME:String="InternalNotifications";

        public static const STARTUP:String=NAME + "/notes/startup";

        public static const DISPOSE:String=NAME + "/notes/dispose";
    }
}


//            class OutboundNotifications
package mgs.aurora.modules.magneto.notifications 
{
    public class OutboundNotifications extends Object
    {
        public function OutboundNotifications()
        {
            super();
            return;
        }

        internal static const NAME:String="OutboundNotifications";

        public static const SOCKET_EVENT:String=NAME + "/notes/socket_event";
    }
}


//          package view
//            class EventBridgeMediator
package mgs.aurora.modules.magneto.view 
{
    import flash.events.*;
    import mgs.aurora.modules.magneto.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    
    public class EventBridgeMediator extends org.puremvc.as3.multicore.patterns.mediator.Mediator implements org.puremvc.as3.multicore.interfaces.IMediator
    {
        public function EventBridgeMediator(arg1:flash.events.IEventDispatcher)
        {
            super(NAME, arg1);
            return;
        }

        internal function get eventDispatcher():flash.events.IEventDispatcher
        {
            return getViewComponent() as flash.events.IEventDispatcher;
        }

        public override function listNotificationInterests():Array
        {
            var loc1:*=super.listNotificationInterests();
            loc1.push(mgs.aurora.modules.magneto.notifications.OutboundNotifications.SOCKET_EVENT);
            return loc1;
        }

        public override function handleNotification(arg1:org.puremvc.as3.multicore.interfaces.INotification):void
        {
            var loc1:*=arg1.getName();
            switch (loc1) 
            {
                case mgs.aurora.modules.magneto.notifications.OutboundNotifications.SOCKET_EVENT:
                {
                    this.eventDispatcher.dispatchEvent(arg1.getBody() as flash.events.Event);
                    break;
                }
            }
            return;
        }

        public static const NAME:String="EventBridgeMediator";
    }
}


//          class Magneto
package mgs.aurora.modules.magneto 
{
    import flash.display.*;
    import flash.events.*;
    import mgs.aurora.common.interfaces.magneto.*;
    import mgs.aurora.modules.magneto.model.vo.*;
    import mgs.aurora.modules.magneto.notifications.*;
    
    public class Magneto extends flash.display.Sprite implements mgs.aurora.common.interfaces.magneto.IMagneto
    {
        public function Magneto()
        {
            super();
            if (stage) 
            {
                this.init();
            }
            else 
            {
                this.addEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
            }
            return;
        }

        internal function init(arg1:flash.events.Event=null):void
        {
            this.removeEventListener(flash.events.Event.ADDED_TO_STAGE, this.init);
            this.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, this.dispose);
            this._facade = new mgs.aurora.modules.magneto.MagnetoFacade(mgs.aurora.modules.magneto.MagnetoFacade.NAME);
            this._facade.startup(this);
            return;
        }

        internal function dispose(arg1:flash.events.Event=null):void
        {
            this._facade.sendNotification(mgs.aurora.modules.magneto.notifications.InternalNotifications.DISPOSE);
            return;
        }

        public function connect(arg1:String):void
        {
            this._facade.sendNotification(mgs.aurora.modules.magneto.notifications.InboundNotifications.CONNECT, arg1);
            return;
        }

        public function sendData(arg1:String, arg2:XML, arg3:uint, arg4:uint, arg5:uint):void
        {
            this._facade.sendNotification(mgs.aurora.modules.magneto.notifications.InboundNotifications.SEND_PACKET, new mgs.aurora.modules.magneto.model.vo.SendDataParams(arg1, arg2, arg3, arg4, arg5));
            return;
        }

        public function sendMultiplayerData(arg1:String, arg2:uint, arg3:XML):void
        {
            this._facade.sendNotification(mgs.aurora.modules.magneto.notifications.InboundNotifications.SEND_MPF_PACKET, new mgs.aurora.modules.magneto.model.vo.SendMPFDataParams(arg1, arg2, arg3));
            return;
        }

        public function setup(arg1:XML):void
        {
            this._facade.sendNotification(mgs.aurora.modules.magneto.notifications.InboundNotifications.SETUP, arg1);
            return;
        }

        public function close(arg1:String):void
        {
            this._facade.sendNotification(mgs.aurora.modules.magneto.notifications.InboundNotifications.CLOSE, arg1);
            return;
        }

        public static const NAME:String="Magneto";

        internal var _facade:mgs.aurora.modules.magneto.MagnetoFacade;
    }
}


//          class MagnetoFacade
package mgs.aurora.modules.magneto 
{
    import flash.display.*;
    import mgs.aurora.modules.magneto.controller.*;
    import mgs.aurora.modules.magneto.notifications.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    
    public class MagnetoFacade extends org.puremvc.as3.multicore.patterns.facade.Facade implements org.puremvc.as3.multicore.interfaces.IFacade
    {
        public function MagnetoFacade(arg1:String)
        {
            super(arg1);
            return;
        }

        public function startup(arg1:flash.display.DisplayObject):void
        {
            this.sendNotification(mgs.aurora.modules.magneto.notifications.InternalNotifications.STARTUP, arg1);
            this.removeCommand(mgs.aurora.modules.magneto.notifications.InternalNotifications.STARTUP);
            return;
        }

        protected override function initializeController():void
        {
            super.initializeController();
            this.registerCommand(mgs.aurora.modules.magneto.notifications.InternalNotifications.STARTUP, mgs.aurora.modules.magneto.controller.StartupCommand);
            this.registerCommand(mgs.aurora.modules.magneto.notifications.InternalNotifications.DISPOSE, mgs.aurora.modules.magneto.controller.DisposeCommand);
            this.registerCommand(mgs.aurora.modules.magneto.notifications.InboundNotifications.CONNECT, mgs.aurora.modules.magneto.controller.ConnectCommand);
            this.registerCommand(mgs.aurora.modules.magneto.notifications.InboundNotifications.SETUP, mgs.aurora.modules.magneto.controller.SetupCommand);
            this.registerCommand(mgs.aurora.modules.magneto.notifications.InboundNotifications.SEND_PACKET, mgs.aurora.modules.magneto.controller.SendPacketCommand);
            this.registerCommand(mgs.aurora.modules.magneto.notifications.InboundNotifications.CLOSE, mgs.aurora.modules.magneto.controller.CloseCommand);
            return;
        }

        public static function getInstance(arg1:String):mgs.aurora.modules.magneto.MagnetoFacade
        {
            if (mgs.aurora.modules.magneto.MagnetoFacade._instance == null) 
            {
                mgs.aurora.modules.magneto.MagnetoFacade._instance = new MagnetoFacade(arg1);
            }
            return mgs.aurora.modules.magneto.MagnetoFacade._instance;
        }

        public static const NAME:String="MagnetoFacade";

        internal static var _instance:mgs.aurora.modules.magneto.MagnetoFacade;
    }
}


